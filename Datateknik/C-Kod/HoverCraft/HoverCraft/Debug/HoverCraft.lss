
HoverCraft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007be4  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00087be4  00087be4  0000fbe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008d0  20070000  00087bec  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00008460  200708d0  000884c0  000108d0  2**3
                  ALLOC
  4 .stack        00002000  20078d30  00090920  000108d0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000108d0  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  000108f9  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003136b  00000000  00000000  0001096a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008a4d  00000000  00000000  00041cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000017b0  00000000  00000000  0004a728  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001ae3b  00000000  00000000  0004bed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001c97a  00000000  00000000  00066d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0007335b  00000000  00000000  0008368d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00011067  00000000  00000000  000f69e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000013d0  00000000  00000000  00107a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003300  00000000  00000000  00108e20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007ad30 	.word	0x2007ad30
   80004:	000848bd 	.word	0x000848bd
   80008:	000848b9 	.word	0x000848b9
   8000c:	000848b9 	.word	0x000848b9
   80010:	000848b9 	.word	0x000848b9
   80014:	000848b9 	.word	0x000848b9
   80018:	000848b9 	.word	0x000848b9
	...
   8002c:	000823d5 	.word	0x000823d5
   80030:	000848b9 	.word	0x000848b9
   80034:	00000000 	.word	0x00000000
   80038:	00082465 	.word	0x00082465
   8003c:	000824a1 	.word	0x000824a1
   80040:	000848b9 	.word	0x000848b9
   80044:	000848b9 	.word	0x000848b9
   80048:	000848b9 	.word	0x000848b9
   8004c:	000848b9 	.word	0x000848b9
   80050:	000848b9 	.word	0x000848b9
   80054:	000848b9 	.word	0x000848b9
   80058:	000848b9 	.word	0x000848b9
   8005c:	000848b9 	.word	0x000848b9
   80060:	000848b9 	.word	0x000848b9
   80064:	000848b9 	.word	0x000848b9
   80068:	00000000 	.word	0x00000000
   8006c:	00084685 	.word	0x00084685
   80070:	000846a1 	.word	0x000846a1
   80074:	000846bd 	.word	0x000846bd
   80078:	000846d9 	.word	0x000846d9
	...
   80084:	000848b9 	.word	0x000848b9
   80088:	000848b9 	.word	0x000848b9
   8008c:	000848b9 	.word	0x000848b9
   80090:	000848b9 	.word	0x000848b9
   80094:	000848b9 	.word	0x000848b9
   80098:	000848b9 	.word	0x000848b9
   8009c:	000848b9 	.word	0x000848b9
   800a0:	000848b9 	.word	0x000848b9
   800a4:	00000000 	.word	0x00000000
   800a8:	000848b9 	.word	0x000848b9
   800ac:	000848b9 	.word	0x000848b9
   800b0:	000848b9 	.word	0x000848b9
   800b4:	000848b9 	.word	0x000848b9
   800b8:	000848b9 	.word	0x000848b9
   800bc:	000848b9 	.word	0x000848b9
   800c0:	000848b9 	.word	0x000848b9
   800c4:	000848b9 	.word	0x000848b9
   800c8:	000848b9 	.word	0x000848b9
   800cc:	000848b9 	.word	0x000848b9
   800d0:	000848b9 	.word	0x000848b9
   800d4:	000848b9 	.word	0x000848b9
   800d8:	000848b9 	.word	0x000848b9
   800dc:	000848b9 	.word	0x000848b9
   800e0:	000848b9 	.word	0x000848b9
   800e4:	000848b9 	.word	0x000848b9
   800e8:	000848b9 	.word	0x000848b9
   800ec:	000848b9 	.word	0x000848b9
   800f0:	000848b9 	.word	0x000848b9

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	00087bec 	.word	0x00087bec
   80110:	00087bef 	.word	0x00087bef
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	00087bec 	.word	0x00087bec
   8013c:	00087bec 	.word	0x00087bec
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	200708d0 	.word	0x200708d0
   80164:	00000000 	.word	0x00000000
   80168:	00087bec 	.word	0x00087bec

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	00087bec 	.word	0x00087bec
   80198:	200708d4 	.word	0x200708d4
   8019c:	00087bec 	.word	0x00087bec
   801a0:	00000000 	.word	0x00000000

000801a4 <init_adc>:
/* Enable the adc */

#include <asf.h>

/* Initialize the A/D converter */
void init_adc(void){
   801a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   801a8:	f44f 6460 	mov.w	r4, #3584	; 0xe00
   801ac:	f2c4 040e 	movt	r4, #16398	; 0x400e
   801b0:	f04f 0940 	mov.w	r9, #64	; 0x40
   801b4:	f8c4 9000 	str.w	r9, [r4]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   801b8:	f8c4 9014 	str.w	r9, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   801bc:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   801c0:	f44f 0880 	mov.w	r8, #4194304	; 0x400000
   801c4:	f8c4 8000 	str.w	r8, [r4]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   801c8:	f8c4 8014 	str.w	r8, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   801cc:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   801d0:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
   801d4:	6027      	str	r7, [r4, #0]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   801d6:	6167      	str	r7, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   801d8:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   801dc:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   801e0:	6026      	str	r6, [r4, #0]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   801e2:	6166      	str	r6, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   801e4:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0

	// Enable analog pin 1
	ioport_enable_pin(PIO_PA24_IDX); // Enable analog pin 4
	ioport_set_pin_dir(PIO_PA24_IDX,IOPORT_DIR_INPUT); // Set analog pin 4 as input

	pmc_enable_periph_clk(ID_ADC);
   801e8:	f04f 0025 	mov.w	r0, #37	; 0x25
   801ec:	f644 0335 	movw	r3, #18485	; 0x4835
   801f0:	f2c0 0308 	movt	r3, #8
   801f4:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 1000000, 8);
   801f6:	f04f 0500 	mov.w	r5, #0
   801fa:	f2c4 050c 	movt	r5, #16396	; 0x400c
   801fe:	4628      	mov	r0, r5
   80200:	f44f 41f4 	mov.w	r1, #31232	; 0x7a00
   80204:	f6c0 2103 	movt	r1, #2563	; 0xa03
   80208:	f244 2240 	movw	r2, #16960	; 0x4240
   8020c:	f2c0 020f 	movt	r2, #15
   80210:	f04f 0308 	mov.w	r3, #8
   80214:	f240 3cf1 	movw	ip, #1009	; 0x3f1
   80218:	f2c0 0c08 	movt	ip, #8
   8021c:	47e0      	blx	ip
	adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);
   8021e:	4628      	mov	r0, r5
   80220:	f04f 0100 	mov.w	r1, #0
   80224:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   80228:	f04f 0301 	mov.w	r3, #1
   8022c:	f240 4a41 	movw	sl, #1089	; 0x441
   80230:	f2c0 0a08 	movt	sl, #8
   80234:	47d0      	blx	sl
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
   80236:	4628      	mov	r0, r5
   80238:	f04f 0100 	mov.w	r1, #0
   8023c:	f240 4231 	movw	r2, #1073	; 0x431
   80240:	f2c0 0208 	movt	r2, #8
   80244:	4790      	blx	r2
	adc_enable_channel(ADC, ADC_CHANNEL_3);
   80246:	4628      	mov	r0, r5
   80248:	f04f 0103 	mov.w	r1, #3
   8024c:	f240 4a69 	movw	sl, #1129	; 0x469
   80250:	f2c0 0a08 	movt	sl, #8
   80254:	47d0      	blx	sl
	adc_enable_channel(ADC, ADC_CHANNEL_4);
   80256:	4628      	mov	r0, r5
   80258:	f04f 0104 	mov.w	r1, #4
   8025c:	47d0      	blx	sl
	adc_enable_channel(ADC, ADC_CHANNEL_5);
   8025e:	4628      	mov	r0, r5
   80260:	f04f 0105 	mov.w	r1, #5
   80264:	47d0      	blx	sl
	adc_enable_channel(ADC, ADC_CHANNEL_6);
   80266:	4628      	mov	r0, r5
   80268:	f04f 0106 	mov.w	r1, #6
   8026c:	47d0      	blx	sl
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   8026e:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80272:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80276:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   8027a:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   8027e:	6f20      	ldr	r0, [r4, #112]	; 0x70
   80280:	f020 0140 	bic.w	r1, r0, #64	; 0x40
   80284:	6721      	str	r1, [r4, #112]	; 0x70
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   80286:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   8028a:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   8028e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80292:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   80296:	6f23      	ldr	r3, [r4, #112]	; 0x70
   80298:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
   8029c:	6722      	str	r2, [r4, #112]	; 0x70
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   8029e:	6667      	str	r7, [r4, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   802a0:	6567      	str	r7, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   802a2:	6267      	str	r7, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   802a4:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   802a8:	6f20      	ldr	r0, [r4, #112]	; 0x70
   802aa:	f420 0100 	bic.w	r1, r0, #8388608	; 0x800000
   802ae:	6721      	str	r1, [r4, #112]	; 0x70
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   802b0:	6666      	str	r6, [r4, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   802b2:	6566      	str	r6, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   802b4:	6266      	str	r6, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   802b6:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   802ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
   802bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
   802c0:	6722      	str	r2, [r4, #112]	; 0x70
   802c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   802c6:	bf00      	nop

000802c8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   802c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   802cc:	460c      	mov	r4, r1
   802ce:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   802d0:	bb48      	cbnz	r0, 80326 <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
   802d2:	2a00      	cmp	r2, #0
   802d4:	dd2b      	ble.n	8032e <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
   802d6:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   802d8:	f648 4678 	movw	r6, #35960	; 0x8c78
   802dc:	f2c2 0607 	movt	r6, #8199	; 0x2007
   802e0:	f648 4570 	movw	r5, #35952	; 0x8c70
   802e4:	f2c2 0507 	movt	r5, #8199	; 0x2007
   802e8:	ea6f 0901 	mvn.w	r9, r1
   802ec:	eb07 0009 	add.w	r0, r7, r9
   802f0:	f000 0901 	and.w	r9, r0, #1
   802f4:	6830      	ldr	r0, [r6, #0]
   802f6:	682b      	ldr	r3, [r5, #0]
   802f8:	4798      	blx	r3
		ptr++;
   802fa:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   802fe:	42bc      	cmp	r4, r7
   80300:	d119      	bne.n	80336 <_read+0x6e>
   80302:	e00d      	b.n	80320 <_read+0x58>
		ptr_get(stdio_base, ptr);
   80304:	6830      	ldr	r0, [r6, #0]
   80306:	682b      	ldr	r3, [r5, #0]
   80308:	4621      	mov	r1, r4
   8030a:	4798      	blx	r3
		ptr++;
   8030c:	f104 0401 	add.w	r4, r4, #1
   80310:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   80312:	6830      	ldr	r0, [r6, #0]
   80314:	682a      	ldr	r2, [r5, #0]
   80316:	4790      	blx	r2
		ptr++;
   80318:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8031c:	42bc      	cmp	r4, r7
   8031e:	d1f1      	bne.n	80304 <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80320:	4640      	mov	r0, r8
   80322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80326:	f04f 30ff 	mov.w	r0, #4294967295
   8032a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
   8032e:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   80332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80336:	f1b9 0f00 	cmp.w	r9, #0
   8033a:	d0e3      	beq.n	80304 <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   8033c:	6830      	ldr	r0, [r6, #0]
   8033e:	682a      	ldr	r2, [r5, #0]
   80340:	4621      	mov	r1, r4
   80342:	4790      	blx	r2
		ptr++;
   80344:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80348:	42bc      	cmp	r4, r7
   8034a:	d1db      	bne.n	80304 <_read+0x3c>
   8034c:	e7e8      	b.n	80320 <_read+0x58>
   8034e:	bf00      	nop

00080350 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   80350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80354:	460d      	mov	r5, r1
   80356:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80358:	f100 30ff 	add.w	r0, r0, #4294967295
   8035c:	2802      	cmp	r0, #2
   8035e:	d824      	bhi.n	803aa <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
   80360:	b332      	cbz	r2, 803b0 <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80362:	f648 4678 	movw	r6, #35960	; 0x8c78
   80366:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8036a:	f648 4774 	movw	r7, #35956	; 0x8c74
   8036e:	f2c2 0707 	movt	r7, #8199	; 0x2007
   80372:	f04f 0400 	mov.w	r4, #0
   80376:	f102 39ff 	add.w	r9, r2, #4294967295
   8037a:	f009 0901 	and.w	r9, r9, #1
   8037e:	6830      	ldr	r0, [r6, #0]
   80380:	683b      	ldr	r3, [r7, #0]
   80382:	5d09      	ldrb	r1, [r1, r4]
   80384:	4798      	blx	r3
   80386:	42a0      	cmp	r0, r4
   80388:	da1a      	bge.n	803c0 <_write+0x70>
   8038a:	e014      	b.n	803b6 <_write+0x66>
   8038c:	6830      	ldr	r0, [r6, #0]
   8038e:	683b      	ldr	r3, [r7, #0]
   80390:	5d29      	ldrb	r1, [r5, r4]
   80392:	4798      	blx	r3
   80394:	2800      	cmp	r0, #0
   80396:	db0e      	blt.n	803b6 <_write+0x66>
			return -1;
		}
		++nChars;
   80398:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8039c:	6830      	ldr	r0, [r6, #0]
   8039e:	683a      	ldr	r2, [r7, #0]
   803a0:	5d29      	ldrb	r1, [r5, r4]
   803a2:	4790      	blx	r2
   803a4:	2800      	cmp	r0, #0
   803a6:	da1d      	bge.n	803e4 <_write+0x94>
   803a8:	e005      	b.n	803b6 <_write+0x66>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   803aa:	f04f 34ff 	mov.w	r4, #4294967295
   803ae:	e004      	b.n	803ba <_write+0x6a>
	}

	for (; len != 0; --len) {
   803b0:	f04f 0400 	mov.w	r4, #0
   803b4:	e001      	b.n	803ba <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   803b6:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   803ba:	4620      	mov	r0, r4
   803bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   803c0:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   803c4:	45a0      	cmp	r8, r4
   803c6:	d0f8      	beq.n	803ba <_write+0x6a>
   803c8:	f1b9 0f00 	cmp.w	r9, #0
   803cc:	d0de      	beq.n	8038c <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   803ce:	6830      	ldr	r0, [r6, #0]
   803d0:	683a      	ldr	r2, [r7, #0]
   803d2:	5d29      	ldrb	r1, [r5, r4]
   803d4:	4790      	blx	r2
   803d6:	2800      	cmp	r0, #0
   803d8:	dbed      	blt.n	803b6 <_write+0x66>
			return -1;
		}
		++nChars;
   803da:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   803de:	45a0      	cmp	r8, r4
   803e0:	d1d4      	bne.n	8038c <_write+0x3c>
   803e2:	e7ea      	b.n	803ba <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   803e4:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   803e8:	45a0      	cmp	r8, r4
   803ea:	d1cf      	bne.n	8038c <_write+0x3c>
   803ec:	e7e5      	b.n	803ba <_write+0x6a>
   803ee:	bf00      	nop

000803f0 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   803f0:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   803f2:	f04f 0401 	mov.w	r4, #1
   803f6:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   803f8:	f04f 0400 	mov.w	r4, #0
   803fc:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   803fe:	f240 2502 	movw	r5, #514	; 0x202
   80402:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   80406:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   8040a:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   8040e:	6845      	ldr	r5, [r0, #4]
   80410:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   80412:	ea4f 0242 	mov.w	r2, r2, lsl #1
   80416:	fbb1 f1f2 	udiv	r1, r1, r2
   8041a:	f101 32ff 	add.w	r2, r1, #4294967295
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   8041e:	ea4f 6102 	mov.w	r1, r2, lsl #24
   80422:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
   80426:	6043      	str	r3, [r0, #4]
	return 0;
}
   80428:	4620      	mov	r0, r4
   8042a:	bc30      	pop	{r4, r5}
   8042c:	4770      	bx	lr
   8042e:	bf00      	nop

00080430 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   80430:	6843      	ldr	r3, [r0, #4]
   80432:	f023 0210 	bic.w	r2, r3, #16
   80436:	6042      	str	r2, [r0, #4]
	p_adc->ADC_MR |= resolution;
   80438:	6843      	ldr	r3, [r0, #4]
   8043a:	4319      	orrs	r1, r3
   8043c:	6041      	str	r1, [r0, #4]
   8043e:	4770      	bx	lr

00080440 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80440:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80442:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   80444:	4322      	orrs	r2, r4
   80446:	ea4f 6101 	mov.w	r1, r1, lsl #24
   8044a:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   8044e:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80450:	ea4f 7303 	mov.w	r3, r3, lsl #28
   80454:	f003 5140 	and.w	r1, r3, #805306368	; 0x30000000
   80458:	430a      	orrs	r2, r1
   8045a:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   8045c:	bc10      	pop	{r4}
   8045e:	4770      	bx	lr

00080460 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80460:	f04f 0302 	mov.w	r3, #2
   80464:	6003      	str	r3, [r0, #0]
   80466:	4770      	bx	lr

00080468 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80468:	f04f 0301 	mov.w	r3, #1
   8046c:	fa03 f101 	lsl.w	r1, r3, r1
   80470:	6101      	str	r1, [r0, #16]
   80472:	4770      	bx	lr

00080474 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80474:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80476:	f04f 03ac 	mov.w	r3, #172	; 0xac
   8047a:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8047c:	680a      	ldr	r2, [r1, #0]
   8047e:	684c      	ldr	r4, [r1, #4]
   80480:	fbb2 f3f4 	udiv	r3, r2, r4
   80484:	ea4f 1313 	mov.w	r3, r3, lsr #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80488:	f103 34ff 	add.w	r4, r3, #4294967295
   8048c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80490:	4294      	cmp	r4, r2
   80492:	d80c      	bhi.n	804ae <uart_init+0x3a>
		return 1;

	p_uart->UART_BRGR = cd;
   80494:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80496:	6889      	ldr	r1, [r1, #8]
   80498:	6041      	str	r1, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8049a:	f240 2302 	movw	r3, #514	; 0x202
   8049e:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   804a2:	f04f 0250 	mov.w	r2, #80	; 0x50
   804a6:	6002      	str	r2, [r0, #0]

	return 0;
   804a8:	f04f 0000 	mov.w	r0, #0
   804ac:	e001      	b.n	804b2 <uart_init+0x3e>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   804ae:	f04f 0001 	mov.w	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   804b2:	bc10      	pop	{r4}
   804b4:	4770      	bx	lr
   804b6:	bf00      	nop

000804b8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   804b8:	6943      	ldr	r3, [r0, #20]
   804ba:	f013 0f02 	tst.w	r3, #2
   804be:	d003      	beq.n	804c8 <uart_write+0x10>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   804c0:	61c1      	str	r1, [r0, #28]
	return 0;
   804c2:	f04f 0000 	mov.w	r0, #0
   804c6:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   804c8:	f04f 0001 	mov.w	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   804cc:	4770      	bx	lr
   804ce:	bf00      	nop

000804d0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   804d0:	6943      	ldr	r3, [r0, #20]
   804d2:	f013 0f01 	tst.w	r3, #1
   804d6:	d004      	beq.n	804e2 <uart_read+0x12>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   804d8:	6980      	ldr	r0, [r0, #24]
   804da:	7008      	strb	r0, [r1, #0]
	return 0;
   804dc:	f04f 0000 	mov.w	r0, #0
   804e0:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   804e2:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   804e6:	4770      	bx	lr

000804e8 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   804e8:	6943      	ldr	r3, [r0, #20]
   804ea:	f013 0f02 	tst.w	r3, #2
   804ee:	d007      	beq.n	80500 <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   804f0:	ea4f 51c1 	mov.w	r1, r1, lsl #23
   804f4:	ea4f 52d1 	mov.w	r2, r1, lsr #23
   804f8:	61c2      	str	r2, [r0, #28]
	return 0;
   804fa:	f04f 0000 	mov.w	r0, #0
   804fe:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80500:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80504:	4770      	bx	lr
   80506:	bf00      	nop

00080508 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80508:	6943      	ldr	r3, [r0, #20]
   8050a:	f013 0f01 	tst.w	r3, #1
   8050e:	d008      	beq.n	80522 <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80510:	6980      	ldr	r0, [r0, #24]
   80512:	ea4f 52c0 	mov.w	r2, r0, lsl #23
   80516:	ea4f 53d2 	mov.w	r3, r2, lsr #23
   8051a:	600b      	str	r3, [r1, #0]

	return 0;
   8051c:	f04f 0000 	mov.w	r0, #0
   80520:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80522:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80526:	4770      	bx	lr

00080528 <update_fan_cycle_back>:
 		
 	}
 }
 
 /* Update the duty cycles for the fans. */
 void update_fan_cycle_back(int duty_cycle, int activeFan){
   80528:	b510      	push	{r4, lr}
   8052a:	f240 33e7 	movw	r3, #999	; 0x3e7
   8052e:	4298      	cmp	r0, r3
   80530:	bfa8      	it	ge
   80532:	4618      	movge	r0, r3
   80534:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
 	}
 	if(duty_cycle<0)
 	{
 		duty_cycle = 0;
 	}
 	if(activeFan==rightFan)
   80538:	2901      	cmp	r1, #1
   8053a:	d10d      	bne.n	80558 <update_fan_cycle_back+0x30>
 	{
 		update_duty_cycle_40(duty_cycle);
   8053c:	4620      	mov	r0, r4
   8053e:	f241 0311 	movw	r3, #4113	; 0x1011
   80542:	f2c0 0308 	movt	r3, #8
   80546:	4798      	blx	r3
 		update_duty_cycle_38(standby_cycle);
   80548:	f240 104d 	movw	r0, #333	; 0x14d
   8054c:	f640 71e5 	movw	r1, #4069	; 0xfe5
   80550:	f2c0 0108 	movt	r1, #8
   80554:	4788      	blx	r1
   80556:	bd10      	pop	{r4, pc}
 	}
 	else
 	{
 		update_duty_cycle_38(standby_cycle);
   80558:	f240 104d 	movw	r0, #333	; 0x14d
   8055c:	f640 71e5 	movw	r1, #4069	; 0xfe5
   80560:	f2c0 0108 	movt	r1, #8
   80564:	4788      	blx	r1
 		update_duty_cycle_40(duty_cycle);
   80566:	4620      	mov	r0, r4
   80568:	f241 0211 	movw	r2, #4113	; 0x1011
   8056c:	f2c0 0208 	movt	r2, #8
   80570:	4790      	blx	r2
   80572:	bd10      	pop	{r4, pc}

00080574 <controll_back>:
	}

}

/* Function responsible of controlling the back fans*/
 void controll_back(int left, int right){
   80574:	b570      	push	{r4, r5, r6, lr}

 	invalue = left-right;
   80576:	1a42      	subs	r2, r0, r1
   80578:	f648 4380 	movw	r3, #35968	; 0x8c80
   8057c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80580:	601a      	str	r2, [r3, #0]
	 
 	/* Calculate which fan to control in order to move the hoovercraft correctly */
 	if(left<right)
   80582:	4288      	cmp	r0, r1
 	{
 		activeFan = leftFan;
   80584:	f648 40a0 	movw	r0, #36000	; 0x8ca0
   80588:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8058c:	bfb4      	ite	lt
   8058e:	2100      	movlt	r1, #0
 	}
 	else
 	{
 		activeFan = rightFan;
   80590:	2101      	movge	r1, #1
   80592:	6001      	str	r1, [r0, #0]
 	}
 	
 	
 	/* Make room for the new values */
 	if(invalue!=0)
   80594:	2a00      	cmp	r2, #0
   80596:	d074      	beq.n	80682 <controll_back+0x10e>
 	{
 		
 		/* Moving average filter */
 		for(int i = buffert_size-1; i > 0;i--)
 		{
 			current_buffert[i] = current_buffert[i-1];
   80598:	f640 1608 	movw	r6, #2312	; 0x908
   8059c:	f2c2 0607 	movt	r6, #8199	; 0x2007
   805a0:	68f1      	ldr	r1, [r6, #12]
   805a2:	6131      	str	r1, [r6, #16]
   805a4:	68b0      	ldr	r0, [r6, #8]
   805a6:	60f0      	str	r0, [r6, #12]
   805a8:	6874      	ldr	r4, [r6, #4]
   805aa:	60b4      	str	r4, [r6, #8]
   805ac:	6835      	ldr	r5, [r6, #0]
   805ae:	6075      	str	r5, [r6, #4]
 		}
 
 		current_buffert[0] = invalue;
   805b0:	6032      	str	r2, [r6, #0]
 		
 		int sum_current_median = 0;
 		/* Calculate median value */
 		for(int i = 0; i < buffert_size;i++)
 		{
 			sum_current_median +=current_buffert[i];
   805b2:	1952      	adds	r2, r2, r5
   805b4:	1913      	adds	r3, r2, r4
   805b6:	181e      	adds	r6, r3, r0
   805b8:	1870      	adds	r0, r6, r1
 		temp_TI = TI;
 		double temp_TD;
 		temp_TD = TD;
 		
		
 		current_value = sum_current_median/buffert_size;
   805ba:	f246 6167 	movw	r1, #26215	; 0x6667
   805be:	f2c6 6166 	movt	r1, #26214	; 0x6666
   805c2:	fb81 1400 	smull	r1, r4, r1, r0
   805c6:	ea4f 75e0 	mov.w	r5, r0, asr #31
		 
 		if (current_value<0)
   805ca:	ebd5 0364 	rsbs	r3, r5, r4, asr #1
   805ce:	d405      	bmi.n	805dc <controll_back+0x68>
 		temp_TI = TI;
 		double temp_TD;
 		temp_TD = TD;
 		
		
 		current_value = sum_current_median/buffert_size;
   805d0:	f648 4290 	movw	r2, #35984	; 0x8c90
   805d4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   805d8:	6013      	str	r3, [r2, #0]
   805da:	e006      	b.n	805ea <controll_back+0x76>
		 
 		if (current_value<0)
 		current_value=current_value*-1;
   805dc:	f1c3 0600 	rsb	r6, r3, #0
   805e0:	f648 4090 	movw	r0, #35984	; 0x8c90
   805e4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   805e8:	6006      	str	r6, [r0, #0]
		 
 		e = (current_value);
   805ea:	f648 4190 	movw	r1, #35984	; 0x8c90
   805ee:	f2c2 0107 	movt	r1, #8199	; 0x2007
   805f2:	6808      	ldr	r0, [r1, #0]
   805f4:	f648 44a4 	movw	r4, #36004	; 0x8ca4
   805f8:	f2c2 0407 	movt	r4, #8199	; 0x2007
   805fc:	6020      	str	r0, [r4, #0]
 		
 		/* I-part */
 		sum = sum + e;
   805fe:	f640 1504 	movw	r5, #2308	; 0x904
   80602:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80606:	682b      	ldr	r3, [r5, #0]
   80608:	18c2      	adds	r2, r0, r3
   8060a:	602a      	str	r2, [r5, #0]
 		PI = (double) ((CONTROLLER_SCHEDULE_TIME/((double)1000*temp_TI))*sum);
 		/* D-part */
 		/* Calculate derivate */
 		d_buffert[1] = d_buffert[0];
   8060c:	f640 06fc 	movw	r6, #2300	; 0x8fc
   80610:	f2c2 0607 	movt	r6, #8199	; 0x2007
   80614:	6831      	ldr	r1, [r6, #0]
   80616:	6071      	str	r1, [r6, #4]
 		d_buffert[0] = e;
   80618:	6030      	str	r0, [r6, #0]
		int d_diff;
 		d_diff = d_buffert[0]-d_buffert[1];
 		PD = (temp_TD*d_diff)/((double)CONTROLLER_SCHEDULE_TIME/1000);
 		
 		/* Only P -control */
 		PI = 0;
   8061a:	f04f 0400 	mov.w	r4, #0
   8061e:	f04f 0500 	mov.w	r5, #0
   80622:	f648 4398 	movw	r3, #35992	; 0x8c98
   80626:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8062a:	e9c3 4500 	strd	r4, r5, [r3]
 		PD = 0;
   8062e:	f648 4288 	movw	r2, #35976	; 0x8c88
   80632:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80636:	e9c2 4500 	strd	r4, r5, [r2]
 			
 		/* Regler-part */
 		u = temp_KP*(e + PI + PD);
   8063a:	f644 7695 	movw	r6, #20373	; 0x4f95
   8063e:	f2c0 0608 	movt	r6, #8
   80642:	47b0      	blx	r6
   80644:	f644 46fd 	movw	r6, #19709	; 0x4cfd
   80648:	f2c0 0608 	movt	r6, #8
   8064c:	4622      	mov	r2, r4
   8064e:	462b      	mov	r3, r5
   80650:	47b0      	blx	r6
   80652:	4622      	mov	r2, r4
   80654:	462b      	mov	r3, r5
   80656:	47b0      	blx	r6
   80658:	f648 43a8 	movw	r3, #36008	; 0x8ca8
   8065c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80660:	e9c3 0100 	strd	r0, r1, [r3]
 
 		
 		update_fan_cycle_back((int)u,activeFan);
   80664:	f245 0261 	movw	r2, #20577	; 0x5061
   80668:	f2c0 0208 	movt	r2, #8
   8066c:	4790      	blx	r2
   8066e:	f648 41a0 	movw	r1, #36000	; 0x8ca0
   80672:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80676:	6809      	ldr	r1, [r1, #0]
   80678:	f240 5329 	movw	r3, #1321	; 0x529
   8067c:	f2c0 0308 	movt	r3, #8
   80680:	4798      	blx	r3
   80682:	bd70      	pop	{r4, r5, r6, pc}

00080684 <start_controller_back>:
int current_buffert[buffert_size] = {0};
int current_value;

/* Start the communication task */
void start_controller_back(void *p)
{
   80684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80688:	b083      	sub	sp, #12
	
	portTickType xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount(); //Retrieve the startup tick timer
   8068a:	f243 134d 	movw	r3, #12621	; 0x314d
   8068e:	f2c0 0308 	movt	r3, #8
   80692:	4798      	blx	r3
   80694:	f8ad 0006 	strh.w	r0, [sp, #6]
	i = 0;
	
	/* Simple infinite loop, printing text with a given delay */
	while(1)
	{
		adc_start(ADC);
   80698:	f04f 0400 	mov.w	r4, #0
   8069c:	f2c4 040c 	movt	r4, #16396	; 0x400c
   806a0:	f240 4b61 	movw	fp, #1121	; 0x461
   806a4:	f2c0 0b08 	movt	fp, #8
		int back_left_inductor;
		back_left_inductor = ADC->ADC_CDR[6]; // Retrieve latest vaule from back left inductor
		int back_right_inductor;
		back_right_inductor = ADC->ADC_CDR[5]; // Retrieve latest value from back right inductor
		
		xSemaphoreTake(semaphore_adc_values,portMAX_DELAY); // Take semaphore
   806a8:	f640 173c 	movw	r7, #2364	; 0x93c
   806ac:	f2c2 0707 	movt	r7, #8199	; 0x2007
   806b0:	f642 3a4d 	movw	sl, #11085	; 0x2b4d
   806b4:	f2c0 0a08 	movt	sl, #8
		adc_value_back_left = back_left_inductor;
   806b8:	f640 09f4 	movw	r9, #2292	; 0x8f4
   806bc:	f2c2 0907 	movt	r9, #8199	; 0x2007
		adc_value_back_right = back_right_inductor;
   806c0:	f640 08f0 	movw	r8, #2288	; 0x8f0
   806c4:	f2c2 0807 	movt	r8, #8199	; 0x2007
	i = 0;
	
	/* Simple infinite loop, printing text with a given delay */
	while(1)
	{
		adc_start(ADC);
   806c8:	4620      	mov	r0, r4
   806ca:	47d8      	blx	fp

		int back_left_inductor;
		back_left_inductor = ADC->ADC_CDR[6]; // Retrieve latest vaule from back left inductor
   806cc:	6ea6      	ldr	r6, [r4, #104]	; 0x68
		int back_right_inductor;
		back_right_inductor = ADC->ADC_CDR[5]; // Retrieve latest value from back right inductor
   806ce:	6e65      	ldr	r5, [r4, #100]	; 0x64
		
		xSemaphoreTake(semaphore_adc_values,portMAX_DELAY); // Take semaphore
   806d0:	6838      	ldr	r0, [r7, #0]
   806d2:	f04f 0100 	mov.w	r1, #0
   806d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   806da:	460b      	mov	r3, r1
   806dc:	47d0      	blx	sl
		adc_value_back_left = back_left_inductor;
   806de:	f8c9 6000 	str.w	r6, [r9]
		adc_value_back_right = back_right_inductor;
   806e2:	f8c8 5000 	str.w	r5, [r8]
		xSemaphoreGive(semaphore_adc_values); // Take semaphore
   806e6:	6838      	ldr	r0, [r7, #0]
   806e8:	f04f 0100 	mov.w	r1, #0
   806ec:	460a      	mov	r2, r1
   806ee:	460b      	mov	r3, r1
   806f0:	f642 1c1d 	movw	ip, #10525	; 0x291d
   806f4:	f2c0 0c08 	movt	ip, #8
   806f8:	47e0      	blx	ip
		controll_back(back_left_inductor,back_right_inductor);
   806fa:	4630      	mov	r0, r6
   806fc:	4629      	mov	r1, r5
   806fe:	f240 5275 	movw	r2, #1397	; 0x575
   80702:	f2c0 0208 	movt	r2, #8
   80706:	4790      	blx	r2
		
		vTaskDelayUntil(&xLastWakeTime,CONTROLLER_SCHEDULE_TIME);
   80708:	f10d 0006 	add.w	r0, sp, #6
   8070c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   80710:	f243 43fd 	movw	r3, #13565	; 0x34fd
   80714:	f2c0 0308 	movt	r3, #8
   80718:	4798      	blx	r3
   8071a:	e7d5      	b.n	806c8 <start_controller_back+0x44>

0008071c <update_fan_cycle>:
			
		}
}

/* Update the duty cycles for the fans. */
void update_fan_cycle(int duty_cycle, int active_Fan){
   8071c:	b510      	push	{r4, lr}
   8071e:	f240 33e7 	movw	r3, #999	; 0x3e7
   80722:	4298      	cmp	r0, r3
   80724:	bfa8      	it	ge
   80726:	4618      	movge	r0, r3
   80728:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
	}
	if(duty_cycle<0)
	{
		duty_cycle = 0;
	}
	if(active_Fan==rightFan)
   8072c:	2901      	cmp	r1, #1
   8072e:	d10d      	bne.n	8074c <update_fan_cycle+0x30>
	{
		update_duty_cycle_36(duty_cycle);
   80730:	4620      	mov	r0, r4
   80732:	f640 73b9 	movw	r3, #4025	; 0xfb9
   80736:	f2c0 0308 	movt	r3, #8
   8073a:	4798      	blx	r3
		update_duty_cycle_DAC1(standby_cycle);
   8073c:	f240 104d 	movw	r0, #333	; 0x14d
   80740:	f640 718d 	movw	r1, #3981	; 0xf8d
   80744:	f2c0 0108 	movt	r1, #8
   80748:	4788      	blx	r1
   8074a:	bd10      	pop	{r4, pc}
	}
	else
	{
		update_duty_cycle_36(standby_cycle);
   8074c:	f240 104d 	movw	r0, #333	; 0x14d
   80750:	f640 71b9 	movw	r1, #4025	; 0xfb9
   80754:	f2c0 0108 	movt	r1, #8
   80758:	4788      	blx	r1
		update_duty_cycle_DAC1(duty_cycle);
   8075a:	4620      	mov	r0, r4
   8075c:	f640 728d 	movw	r2, #3981	; 0xf8d
   80760:	f2c0 0208 	movt	r2, #8
   80764:	4790      	blx	r2
   80766:	bd10      	pop	{r4, pc}

00080768 <controll_front>:
 		vTaskDelayUntil(&xLastWakeTime,CONTROLLER_SCHEDULE_TIME);
 	}
}

/* Function responsible of controlling the front fans*/
void controll_front(int left, int right){
   80768:	b570      	push	{r4, r5, r6, lr}
	
	invalue = left-right;
   8076a:	1a42      	subs	r2, r0, r1
   8076c:	f648 4380 	movw	r3, #35968	; 0x8c80
   80770:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80774:	601a      	str	r2, [r3, #0]
	
	
	/* Calculate which fan to control in order to move the hoovercraft correctly */
	if(left<right)
   80776:	4288      	cmp	r0, r1
	{
		activeFan = leftFan;
   80778:	f648 40a0 	movw	r0, #36000	; 0x8ca0
   8077c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80780:	bfb4      	ite	lt
   80782:	2100      	movlt	r1, #0
	}
	else
	{
		activeFan = rightFan;
   80784:	2101      	movge	r1, #1
   80786:	6001      	str	r1, [r0, #0]
	}
	
		
	/* Make room for the new values */
		if(invalue!=0)
   80788:	2a00      	cmp	r2, #0
   8078a:	d074      	beq.n	80876 <controll_front+0x10e>
		{
			
			/* Moving average filter */
			for(int i = buffert_size-1; i > 0;i--)
			{
				current_buffert_front[i] = current_buffert_front[i-1];
   8078c:	f640 161c 	movw	r6, #2332	; 0x91c
   80790:	f2c2 0607 	movt	r6, #8199	; 0x2007
   80794:	68f1      	ldr	r1, [r6, #12]
   80796:	6131      	str	r1, [r6, #16]
   80798:	68b0      	ldr	r0, [r6, #8]
   8079a:	60f0      	str	r0, [r6, #12]
   8079c:	6874      	ldr	r4, [r6, #4]
   8079e:	60b4      	str	r4, [r6, #8]
   807a0:	6835      	ldr	r5, [r6, #0]
   807a2:	6075      	str	r5, [r6, #4]
			}

			current_buffert_front[0] = invalue;
   807a4:	6032      	str	r2, [r6, #0]
			
			int sum_current_median = 0;
			/* Calculate median value */
			for(int i = 0; i < buffert_size;i++)
			{
				sum_current_median +=current_buffert_front[i];
   807a6:	1952      	adds	r2, r2, r5
   807a8:	1913      	adds	r3, r2, r4
   807aa:	181e      	adds	r6, r3, r0
   807ac:	1870      	adds	r0, r6, r1
			temp_TI = TI;
			double temp_TD;
			temp_TD = TD;
			
			
			current_value = sum_current_median/buffert_size;
   807ae:	f246 6167 	movw	r1, #26215	; 0x6667
   807b2:	f2c6 6166 	movt	r1, #26214	; 0x6666
   807b6:	fb81 1400 	smull	r1, r4, r1, r0
   807ba:	ea4f 75e0 	mov.w	r5, r0, asr #31
			
			if (current_value<0)
   807be:	ebd5 0364 	rsbs	r3, r5, r4, asr #1
   807c2:	d405      	bmi.n	807d0 <controll_front+0x68>
			temp_TI = TI;
			double temp_TD;
			temp_TD = TD;
			
			
			current_value = sum_current_median/buffert_size;
   807c4:	f648 4290 	movw	r2, #35984	; 0x8c90
   807c8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   807cc:	6013      	str	r3, [r2, #0]
   807ce:	e006      	b.n	807de <controll_front+0x76>
			
			if (current_value<0)
				current_value=current_value*-1;
   807d0:	f1c3 0600 	rsb	r6, r3, #0
   807d4:	f648 4090 	movw	r0, #35984	; 0x8c90
   807d8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   807dc:	6006      	str	r6, [r0, #0]
				
			e = (current_value);
   807de:	f648 4190 	movw	r1, #35984	; 0x8c90
   807e2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   807e6:	6808      	ldr	r0, [r1, #0]
   807e8:	f648 44a4 	movw	r4, #36004	; 0x8ca4
   807ec:	f2c2 0407 	movt	r4, #8199	; 0x2007
   807f0:	6020      	str	r0, [r4, #0]
			
			/* I-part */
			sum_front = sum_front + e;
   807f2:	f640 1530 	movw	r5, #2352	; 0x930
   807f6:	f2c2 0507 	movt	r5, #8199	; 0x2007
   807fa:	682b      	ldr	r3, [r5, #0]
   807fc:	18c2      	adds	r2, r0, r3
   807fe:	602a      	str	r2, [r5, #0]
			PI = (double) ((CONTROLLER_SCHEDULE_TIME/((double)1000*temp_TI))*sum_front);
			
			/* D-part */
			/* Calculate derivate */
			d_buffert_front[1] = d_buffert_front[0];
   80800:	f640 1634 	movw	r6, #2356	; 0x934
   80804:	f2c2 0607 	movt	r6, #8199	; 0x2007
   80808:	6831      	ldr	r1, [r6, #0]
   8080a:	6071      	str	r1, [r6, #4]
			d_buffert_front[0] = e;
   8080c:	6030      	str	r0, [r6, #0]
			int d_diff;
			d_diff = d_buffert_front[0]-d_buffert_front[1];
			PD = (temp_TD*d_diff)/((double)CONTROLLER_SCHEDULE_TIME/1000);
			
			/* Only P -control */
			PI = 0;
   8080e:	f04f 0400 	mov.w	r4, #0
   80812:	f04f 0500 	mov.w	r5, #0
   80816:	f648 4398 	movw	r3, #35992	; 0x8c98
   8081a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8081e:	e9c3 4500 	strd	r4, r5, [r3]
			PD = 0;
   80822:	f648 4288 	movw	r2, #35976	; 0x8c88
   80826:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8082a:	e9c2 4500 	strd	r4, r5, [r2]
			
			/* Regler-part */
			u = temp_KP*(e + PI + PD);
   8082e:	f644 7695 	movw	r6, #20373	; 0x4f95
   80832:	f2c0 0608 	movt	r6, #8
   80836:	47b0      	blx	r6
   80838:	f644 46fd 	movw	r6, #19709	; 0x4cfd
   8083c:	f2c0 0608 	movt	r6, #8
   80840:	4622      	mov	r2, r4
   80842:	462b      	mov	r3, r5
   80844:	47b0      	blx	r6
   80846:	4622      	mov	r2, r4
   80848:	462b      	mov	r3, r5
   8084a:	47b0      	blx	r6
   8084c:	f648 43a8 	movw	r3, #36008	; 0x8ca8
   80850:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80854:	e9c3 0100 	strd	r0, r1, [r3]

		
			update_fan_cycle((int)u,activeFan);
   80858:	f245 0261 	movw	r2, #20577	; 0x5061
   8085c:	f2c0 0208 	movt	r2, #8
   80860:	4790      	blx	r2
   80862:	f648 41a0 	movw	r1, #36000	; 0x8ca0
   80866:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8086a:	6809      	ldr	r1, [r1, #0]
   8086c:	f240 731d 	movw	r3, #1821	; 0x71d
   80870:	f2c0 0308 	movt	r3, #8
   80874:	4798      	blx	r3
   80876:	bd70      	pop	{r4, r5, r6, pc}

00080878 <start_controller_front>:
int current_buffert_front[buffert_size] = {0};
int current_value;

/* Start the communication task */
void start_controller_front(void *p)
{
   80878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8087c:	b083      	sub	sp, #12
	
 	portTickType xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount(); //Retrieve the startup tick timer
   8087e:	f243 134d 	movw	r3, #12621	; 0x314d
   80882:	f2c0 0308 	movt	r3, #8
   80886:	4798      	blx	r3
   80888:	f8ad 0006 	strh.w	r0, [sp, #6]
	i = 0;
	
	/* Simple infinite loop, printing text with a given delay */
 	while(1)
	 {
		adc_start(ADC);
   8088c:	f04f 0400 	mov.w	r4, #0
   80890:	f2c4 040c 	movt	r4, #16396	; 0x400c
   80894:	f240 4b61 	movw	fp, #1121	; 0x461
   80898:	f2c0 0b08 	movt	fp, #8
		int front_left_inductor;
		front_left_inductor = ADC->ADC_CDR[4];
		int front_right_inductor;
		front_right_inductor = ADC->ADC_CDR[3];
			
		xSemaphoreTake(semaphore_adc_values,portMAX_DELAY); // Take semaphore
   8089c:	f640 173c 	movw	r7, #2364	; 0x93c
   808a0:	f2c2 0707 	movt	r7, #8199	; 0x2007
   808a4:	f642 3a4d 	movw	sl, #11085	; 0x2b4d
   808a8:	f2c0 0a08 	movt	sl, #8
		adc_value_front_left = front_left_inductor;
   808ac:	f640 09f8 	movw	r9, #2296	; 0x8f8
   808b0:	f2c2 0907 	movt	r9, #8199	; 0x2007
		adc_value_front_right = front_right_inductor;
   808b4:	f640 08ec 	movw	r8, #2284	; 0x8ec
   808b8:	f2c2 0807 	movt	r8, #8199	; 0x2007
	i = 0;
	
	/* Simple infinite loop, printing text with a given delay */
 	while(1)
	 {
		adc_start(ADC);
   808bc:	4620      	mov	r0, r4
   808be:	47d8      	blx	fp

		int front_left_inductor;
		front_left_inductor = ADC->ADC_CDR[4];
   808c0:	6e26      	ldr	r6, [r4, #96]	; 0x60
		int front_right_inductor;
		front_right_inductor = ADC->ADC_CDR[3];
   808c2:	6de5      	ldr	r5, [r4, #92]	; 0x5c
			
		xSemaphoreTake(semaphore_adc_values,portMAX_DELAY); // Take semaphore
   808c4:	6838      	ldr	r0, [r7, #0]
   808c6:	f04f 0100 	mov.w	r1, #0
   808ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
   808ce:	460b      	mov	r3, r1
   808d0:	47d0      	blx	sl
		adc_value_front_left = front_left_inductor;
   808d2:	f8c9 6000 	str.w	r6, [r9]
		adc_value_front_right = front_right_inductor;
   808d6:	f8c8 5000 	str.w	r5, [r8]
		xSemaphoreGive(semaphore_adc_values); // Take semaphore
   808da:	6838      	ldr	r0, [r7, #0]
   808dc:	f04f 0100 	mov.w	r1, #0
   808e0:	460a      	mov	r2, r1
   808e2:	460b      	mov	r3, r1
   808e4:	f642 1c1d 	movw	ip, #10525	; 0x291d
   808e8:	f2c0 0c08 	movt	ip, #8
   808ec:	47e0      	blx	ip
		
		controll_front(front_left_inductor,front_right_inductor);
   808ee:	4630      	mov	r0, r6
   808f0:	4629      	mov	r1, r5
   808f2:	f240 7269 	movw	r2, #1897	; 0x769
   808f6:	f2c0 0208 	movt	r2, #8
   808fa:	4790      	blx	r2
		
 		vTaskDelayUntil(&xLastWakeTime,CONTROLLER_SCHEDULE_TIME);
   808fc:	f10d 0006 	add.w	r0, sp, #6
   80900:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   80904:	f243 43fd 	movw	r3, #13565	; 0x34fd
   80908:	f2c0 0308 	movt	r3, #8
   8090c:	4798      	blx	r3
   8090e:	e7d5      	b.n	808bc <start_controller_front+0x44>

00080910 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80910:	b5f0      	push	{r4, r5, r6, r7, lr}
   80912:	b083      	sub	sp, #12
   80914:	4604      	mov	r4, r0
   80916:	460d      	mov	r5, r1
	uint32_t val;

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80918:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8091c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80920:	4298      	cmp	r0, r3
   80922:	d10d      	bne.n	80940 <usart_serial_getchar+0x30>
		while (uart_read((Uart*)p_usart, data));
   80924:	f44f 6600 	mov.w	r6, #2048	; 0x800
   80928:	f2c4 060e 	movt	r6, #16398	; 0x400e
   8092c:	f240 47d1 	movw	r7, #1233	; 0x4d1
   80930:	f2c0 0708 	movt	r7, #8
   80934:	4630      	mov	r0, r6
   80936:	4629      	mov	r1, r5
   80938:	47b8      	blx	r7
   8093a:	2800      	cmp	r0, #0
   8093c:	d1fa      	bne.n	80934 <usart_serial_getchar+0x24>
   8093e:	e02b      	b.n	80998 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80940:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   80944:	f2c4 0009 	movt	r0, #16393	; 0x4009
   80948:	4284      	cmp	r4, r0
   8094a:	d10f      	bne.n	8096c <usart_serial_getchar+0x5c>
		while (usart_read(p_usart, &val));
   8094c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   80950:	f2c4 0609 	movt	r6, #16393	; 0x4009
   80954:	f240 5709 	movw	r7, #1289	; 0x509
   80958:	f2c0 0708 	movt	r7, #8
   8095c:	4630      	mov	r0, r6
   8095e:	a901      	add	r1, sp, #4
   80960:	47b8      	blx	r7
   80962:	2800      	cmp	r0, #0
   80964:	d1fa      	bne.n	8095c <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
   80966:	9b01      	ldr	r3, [sp, #4]
   80968:	702b      	strb	r3, [r5, #0]
   8096a:	e02b      	b.n	809c4 <usart_serial_getchar+0xb4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8096c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   80970:	f2c4 0109 	movt	r1, #16393	; 0x4009
   80974:	428c      	cmp	r4, r1
   80976:	d10f      	bne.n	80998 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80978:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   8097c:	f2c4 0409 	movt	r4, #16393	; 0x4009
   80980:	f240 5609 	movw	r6, #1289	; 0x509
   80984:	f2c0 0608 	movt	r6, #8
   80988:	4620      	mov	r0, r4
   8098a:	a901      	add	r1, sp, #4
   8098c:	47b0      	blx	r6
   8098e:	2800      	cmp	r0, #0
   80990:	d1fa      	bne.n	80988 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   80992:	9a01      	ldr	r2, [sp, #4]
   80994:	702a      	strb	r2, [r5, #0]
   80996:	e02a      	b.n	809ee <usart_serial_getchar+0xde>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80998:	f04f 0000 	mov.w	r0, #0
   8099c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   809a0:	4284      	cmp	r4, r0
   809a2:	d10f      	bne.n	809c4 <usart_serial_getchar+0xb4>
		while (usart_read(p_usart, &val));
   809a4:	f04f 0400 	mov.w	r4, #0
   809a8:	f2c4 040a 	movt	r4, #16394	; 0x400a
   809ac:	f240 5609 	movw	r6, #1289	; 0x509
   809b0:	f2c0 0608 	movt	r6, #8
   809b4:	4620      	mov	r0, r4
   809b6:	a901      	add	r1, sp, #4
   809b8:	47b0      	blx	r6
   809ba:	2800      	cmp	r0, #0
   809bc:	d1fa      	bne.n	809b4 <usart_serial_getchar+0xa4>
		*data = (uint8_t)(val & 0xFF);
   809be:	9b01      	ldr	r3, [sp, #4]
   809c0:	702b      	strb	r3, [r5, #0]
   809c2:	e014      	b.n	809ee <usart_serial_getchar+0xde>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   809c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   809c8:	f2c4 010a 	movt	r1, #16394	; 0x400a
   809cc:	428c      	cmp	r4, r1
   809ce:	d10e      	bne.n	809ee <usart_serial_getchar+0xde>
		while (usart_read(p_usart, &val));
   809d0:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   809d4:	f2c4 040a 	movt	r4, #16394	; 0x400a
   809d8:	f240 5609 	movw	r6, #1289	; 0x509
   809dc:	f2c0 0608 	movt	r6, #8
   809e0:	4620      	mov	r0, r4
   809e2:	a901      	add	r1, sp, #4
   809e4:	47b0      	blx	r6
   809e6:	2800      	cmp	r0, #0
   809e8:	d1fa      	bne.n	809e0 <usart_serial_getchar+0xd0>
		*data = (uint8_t)(val & 0xFF);
   809ea:	9a01      	ldr	r2, [sp, #4]
   809ec:	702a      	strb	r2, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   809ee:	b003      	add	sp, #12
   809f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   809f2:	bf00      	nop

000809f4 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   809f4:	b570      	push	{r4, r5, r6, lr}
   809f6:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   809f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   809fc:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80a00:	4298      	cmp	r0, r3
   80a02:	d10f      	bne.n	80a24 <usart_serial_putchar+0x30>
		while (uart_write((Uart*)p_usart, c)!=0);
   80a04:	f44f 6500 	mov.w	r5, #2048	; 0x800
   80a08:	f2c4 050e 	movt	r5, #16398	; 0x400e
   80a0c:	f240 46b9 	movw	r6, #1209	; 0x4b9
   80a10:	f2c0 0608 	movt	r6, #8
   80a14:	4628      	mov	r0, r5
   80a16:	4621      	mov	r1, r4
   80a18:	47b0      	blx	r6
   80a1a:	2800      	cmp	r0, #0
   80a1c:	d1fa      	bne.n	80a14 <usart_serial_putchar+0x20>
		return 1;
   80a1e:	f04f 0001 	mov.w	r0, #1
   80a22:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80a24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   80a28:	f2c4 0109 	movt	r1, #16393	; 0x4009
   80a2c:	4288      	cmp	r0, r1
   80a2e:	d10f      	bne.n	80a50 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80a30:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   80a34:	f2c4 0509 	movt	r5, #16393	; 0x4009
   80a38:	f240 46e9 	movw	r6, #1257	; 0x4e9
   80a3c:	f2c0 0608 	movt	r6, #8
   80a40:	4628      	mov	r0, r5
   80a42:	4621      	mov	r1, r4
   80a44:	47b0      	blx	r6
   80a46:	2800      	cmp	r0, #0
   80a48:	d1fa      	bne.n	80a40 <usart_serial_putchar+0x4c>
		return 1;
   80a4a:	f04f 0001 	mov.w	r0, #1
   80a4e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80a50:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   80a54:	f2c4 0209 	movt	r2, #16393	; 0x4009
   80a58:	4290      	cmp	r0, r2
   80a5a:	d10f      	bne.n	80a7c <usart_serial_putchar+0x88>
		while (usart_write(p_usart, c)!=0);
   80a5c:	f44f 4540 	mov.w	r5, #49152	; 0xc000
   80a60:	f2c4 0509 	movt	r5, #16393	; 0x4009
   80a64:	f240 46e9 	movw	r6, #1257	; 0x4e9
   80a68:	f2c0 0608 	movt	r6, #8
   80a6c:	4628      	mov	r0, r5
   80a6e:	4621      	mov	r1, r4
   80a70:	47b0      	blx	r6
   80a72:	2800      	cmp	r0, #0
   80a74:	d1fa      	bne.n	80a6c <usart_serial_putchar+0x78>
		return 1;
   80a76:	f04f 0001 	mov.w	r0, #1
   80a7a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80a7c:	f04f 0300 	mov.w	r3, #0
   80a80:	f2c4 030a 	movt	r3, #16394	; 0x400a
   80a84:	4298      	cmp	r0, r3
   80a86:	d10f      	bne.n	80aa8 <usart_serial_putchar+0xb4>
		while (usart_write(p_usart, c)!=0);
   80a88:	f04f 0500 	mov.w	r5, #0
   80a8c:	f2c4 050a 	movt	r5, #16394	; 0x400a
   80a90:	f240 46e9 	movw	r6, #1257	; 0x4e9
   80a94:	f2c0 0608 	movt	r6, #8
   80a98:	4628      	mov	r0, r5
   80a9a:	4621      	mov	r1, r4
   80a9c:	47b0      	blx	r6
   80a9e:	2800      	cmp	r0, #0
   80aa0:	d1fa      	bne.n	80a98 <usart_serial_putchar+0xa4>
		return 1;
   80aa2:	f04f 0001 	mov.w	r0, #1
   80aa6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80aa8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80aac:	f2c4 010a 	movt	r1, #16394	; 0x400a
   80ab0:	4288      	cmp	r0, r1
   80ab2:	d10f      	bne.n	80ad4 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
   80ab4:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   80ab8:	f2c4 050a 	movt	r5, #16394	; 0x400a
   80abc:	f240 46e9 	movw	r6, #1257	; 0x4e9
   80ac0:	f2c0 0608 	movt	r6, #8
   80ac4:	4628      	mov	r0, r5
   80ac6:	4621      	mov	r1, r4
   80ac8:	47b0      	blx	r6
   80aca:	2800      	cmp	r0, #0
   80acc:	d1fa      	bne.n	80ac4 <usart_serial_putchar+0xd0>
		return 1;
   80ace:	f04f 0001 	mov.w	r0, #1
   80ad2:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80ad4:	f04f 0000 	mov.w	r0, #0
}
   80ad8:	bd70      	pop	{r4, r5, r6, pc}
   80ada:	bf00      	nop

00080adc <init_pwm>:
	
}

/* Initialize the pwm signals */
void init_pwm(void)
{
   80adc:	b508      	push	{r3, lr}
	initialize_pwm();
   80ade:	f640 5399 	movw	r3, #3481	; 0xd99
   80ae2:	f2c0 0308 	movt	r3, #8
   80ae6:	4798      	blx	r3
	update_duty_cycle_DAC1(999);		// 999 is the highest duty cycle
   80ae8:	f240 30e7 	movw	r0, #999	; 0x3e7
   80aec:	f640 718d 	movw	r1, #3981	; 0xf8d
   80af0:	f2c0 0108 	movt	r1, #8
   80af4:	4788      	blx	r1
	update_duty_cycle_36(600);
   80af6:	f44f 7016 	mov.w	r0, #600	; 0x258
   80afa:	f640 72b9 	movw	r2, #4025	; 0xfb9
   80afe:	f2c0 0208 	movt	r2, #8
   80b02:	4790      	blx	r2
	update_duty_cycle_38(600);
   80b04:	f44f 7016 	mov.w	r0, #600	; 0x258
   80b08:	f640 73e5 	movw	r3, #4069	; 0xfe5
   80b0c:	f2c0 0308 	movt	r3, #8
   80b10:	4798      	blx	r3
	update_duty_cycle_40(500);
   80b12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   80b16:	f241 0111 	movw	r1, #4113	; 0x1011
   80b1a:	f2c0 0108 	movt	r1, #8
   80b1e:	4788      	blx	r1
	update_duty_cycle_9(700);
   80b20:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   80b24:	f241 023d 	movw	r2, #4157	; 0x103d
   80b28:	f2c0 0208 	movt	r2, #8
   80b2c:	4790      	blx	r2
   80b2e:	bd08      	pop	{r3, pc}

00080b30 <init_tasks>:

}

void init_tasks(void)
{
   80b30:	b510      	push	{r4, lr}
   80b32:	b084      	sub	sp, #16
	/* Create and start the front controller task */
	if(xTaskCreate(start_controller_front,(const signed char * const) "Front controller", 2048, NULL, 2, NULL) !=pdPASS)
   80b34:	f04f 0302 	mov.w	r3, #2
   80b38:	9300      	str	r3, [sp, #0]
   80b3a:	f04f 0300 	mov.w	r3, #0
   80b3e:	9301      	str	r3, [sp, #4]
   80b40:	9302      	str	r3, [sp, #8]
   80b42:	9303      	str	r3, [sp, #12]
   80b44:	f640 0079 	movw	r0, #2169	; 0x879
   80b48:	f2c0 0008 	movt	r0, #8
   80b4c:	f647 0184 	movw	r1, #30852	; 0x7884
   80b50:	f2c0 0108 	movt	r1, #8
   80b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80b58:	f642 54f5 	movw	r4, #11765	; 0x2df5
   80b5c:	f2c0 0408 	movt	r4, #8
   80b60:	47a0      	blx	r4
   80b62:	2801      	cmp	r0, #1
   80b64:	d008      	beq.n	80b78 <init_tasks+0x48>
	{
		printf("Could not create task Front controller");
   80b66:	f647 0098 	movw	r0, #30872	; 0x7898
   80b6a:	f2c0 0008 	movt	r0, #8
   80b6e:	f245 11c5 	movw	r1, #20933	; 0x51c5
   80b72:	f2c0 0108 	movt	r1, #8
   80b76:	4788      	blx	r1
	}
	
	/* Create and start the front controller task */
	if(xTaskCreate(start_controller_back,(const signed char * const) "Back controller", 2048, NULL, 2, NULL) !=pdPASS)
   80b78:	f04f 0002 	mov.w	r0, #2
   80b7c:	9000      	str	r0, [sp, #0]
   80b7e:	f04f 0300 	mov.w	r3, #0
   80b82:	9301      	str	r3, [sp, #4]
   80b84:	9302      	str	r3, [sp, #8]
   80b86:	9303      	str	r3, [sp, #12]
   80b88:	f240 6085 	movw	r0, #1669	; 0x685
   80b8c:	f2c0 0008 	movt	r0, #8
   80b90:	f647 01c0 	movw	r1, #30912	; 0x78c0
   80b94:	f2c0 0108 	movt	r1, #8
   80b98:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80b9c:	f642 54f5 	movw	r4, #11765	; 0x2df5
   80ba0:	f2c0 0408 	movt	r4, #8
   80ba4:	47a0      	blx	r4
   80ba6:	2801      	cmp	r0, #1
   80ba8:	d008      	beq.n	80bbc <init_tasks+0x8c>
	{
		printf("Could not create task Back controller");
   80baa:	f647 00d0 	movw	r0, #30928	; 0x78d0
   80bae:	f2c0 0008 	movt	r0, #8
   80bb2:	f245 12c5 	movw	r2, #20933	; 0x51c5
   80bb6:	f2c0 0208 	movt	r2, #8
   80bba:	4790      	blx	r2
	}
	
	/* Create and start the communication task */
	if(xTaskCreate(start_communication,(const signed char * const) "Communication", 2048, NULL, 1, NULL) !=pdPASS)
   80bbc:	f04f 0301 	mov.w	r3, #1
   80bc0:	9300      	str	r3, [sp, #0]
   80bc2:	f04f 0300 	mov.w	r3, #0
   80bc6:	9301      	str	r3, [sp, #4]
   80bc8:	9302      	str	r3, [sp, #8]
   80bca:	9303      	str	r3, [sp, #12]
   80bcc:	f241 0069 	movw	r0, #4201	; 0x1069
   80bd0:	f2c0 0008 	movt	r0, #8
   80bd4:	f647 01f8 	movw	r1, #30968	; 0x78f8
   80bd8:	f2c0 0108 	movt	r1, #8
   80bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80be0:	f642 54f5 	movw	r4, #11765	; 0x2df5
   80be4:	f2c0 0408 	movt	r4, #8
   80be8:	47a0      	blx	r4
   80bea:	2801      	cmp	r0, #1
   80bec:	d008      	beq.n	80c00 <init_tasks+0xd0>
	{
		printf("Could not create task Communication");
   80bee:	f647 1008 	movw	r0, #30984	; 0x7908
   80bf2:	f2c0 0008 	movt	r0, #8
   80bf6:	f245 11c5 	movw	r1, #20933	; 0x51c5
   80bfa:	f2c0 0108 	movt	r1, #8
   80bfe:	4788      	blx	r1
	}
	
	vTaskStartScheduler(); // Start the tasks
   80c00:	f243 00b1 	movw	r0, #12465	; 0x30b1
   80c04:	f2c0 0008 	movt	r0, #8
   80c08:	4780      	blx	r0
}
   80c0a:	b004      	add	sp, #16
   80c0c:	bd10      	pop	{r4, pc}
   80c0e:	bf00      	nop

00080c10 <init_sempahores>:

void init_sempahores(void)
{
   80c10:	b510      	push	{r4, lr}
	vSemaphoreCreateBinary(semahpore_duty_cycles);
   80c12:	f04f 0001 	mov.w	r0, #1
   80c16:	f04f 0100 	mov.w	r1, #0
   80c1a:	f04f 0203 	mov.w	r2, #3
   80c1e:	f642 03b1 	movw	r3, #10417	; 0x28b1
   80c22:	f2c0 0308 	movt	r3, #8
   80c26:	4798      	blx	r3
   80c28:	f640 1140 	movw	r1, #2368	; 0x940
   80c2c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80c30:	6008      	str	r0, [r1, #0]
   80c32:	b140      	cbz	r0, 80c46 <init_sempahores+0x36>
   80c34:	f04f 0100 	mov.w	r1, #0
   80c38:	460a      	mov	r2, r1
   80c3a:	460b      	mov	r3, r1
   80c3c:	f642 141d 	movw	r4, #10525	; 0x291d
   80c40:	f2c0 0408 	movt	r4, #8
   80c44:	47a0      	blx	r4
	vSemaphoreCreateBinary(semaphore_adc_values);
   80c46:	f04f 0001 	mov.w	r0, #1
   80c4a:	f04f 0100 	mov.w	r1, #0
   80c4e:	f04f 0203 	mov.w	r2, #3
   80c52:	f642 03b1 	movw	r3, #10417	; 0x28b1
   80c56:	f2c0 0308 	movt	r3, #8
   80c5a:	4798      	blx	r3
   80c5c:	f640 123c 	movw	r2, #2364	; 0x93c
   80c60:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80c64:	6010      	str	r0, [r2, #0]
   80c66:	b140      	cbz	r0, 80c7a <init_sempahores+0x6a>
   80c68:	f04f 0100 	mov.w	r1, #0
   80c6c:	460a      	mov	r2, r1
   80c6e:	460b      	mov	r3, r1
   80c70:	f642 141d 	movw	r4, #10525	; 0x291d
   80c74:	f2c0 0408 	movt	r4, #8
   80c78:	47a0      	blx	r4
   80c7a:	bd10      	pop	{r4, pc}

00080c7c <main>:
	
	#endif
}

int main(void)
{
   80c7c:	b530      	push	{r4, r5, lr}
   80c7e:	b085      	sub	sp, #20
	/* Setup */
	sysclk_init();
   80c80:	f244 1359 	movw	r3, #16729	; 0x4159
   80c84:	f2c0 0308 	movt	r3, #8
   80c88:	4798      	blx	r3
	board_init();
   80c8a:	f244 10e5 	movw	r0, #16869	; 0x41e5
   80c8e:	f2c0 0008 	movt	r0, #8
   80c92:	4780      	blx	r0
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80c94:	f04f 000b 	mov.w	r0, #11
   80c98:	f644 0435 	movw	r4, #18485	; 0x4835
   80c9c:	f2c0 0408 	movt	r4, #8
   80ca0:	47a0      	blx	r4
   80ca2:	f04f 000c 	mov.w	r0, #12
   80ca6:	47a0      	blx	r4
   80ca8:	f04f 000d 	mov.w	r0, #13
   80cac:	47a0      	blx	r4
   80cae:	f04f 000e 	mov.w	r0, #14
   80cb2:	47a0      	blx	r4
   80cb4:	f04f 0008 	mov.w	r0, #8
   80cb8:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80cba:	f44f 6500 	mov.w	r5, #2048	; 0x800
   80cbe:	f2c4 050e 	movt	r5, #16398	; 0x400e
   80cc2:	f648 4178 	movw	r1, #35960	; 0x8c78
   80cc6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80cca:	600d      	str	r5, [r1, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80ccc:	f648 4374 	movw	r3, #35956	; 0x8c74
   80cd0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80cd4:	f640 12f5 	movw	r2, #2549	; 0x9f5
   80cd8:	f2c0 0208 	movt	r2, #8
   80cdc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80cde:	f648 4070 	movw	r0, #35952	; 0x8c70
   80ce2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80ce6:	f640 1111 	movw	r1, #2321	; 0x911
   80cea:	f2c0 0108 	movt	r1, #8
   80cee:	6001      	str	r1, [r0, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80cf0:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
   80cf4:	f2c0 5301 	movt	r3, #1281	; 0x501
   80cf8:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   80cfa:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   80cfe:	9201      	str	r2, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   80d00:	f44f 6000 	mov.w	r0, #2048	; 0x800
   80d04:	9002      	str	r0, [sp, #8]
   80d06:	f04f 0008 	mov.w	r0, #8
   80d0a:	47a0      	blx	r4
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80d0c:	4628      	mov	r0, r5
   80d0e:	4669      	mov	r1, sp
   80d10:	f240 4475 	movw	r4, #1141	; 0x475
   80d14:	f2c0 0408 	movt	r4, #8
   80d18:	47a0      	blx	r4
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80d1a:	f240 0510 	movw	r5, #16
   80d1e:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80d22:	6829      	ldr	r1, [r5, #0]
   80d24:	6888      	ldr	r0, [r1, #8]
   80d26:	f04f 0100 	mov.w	r1, #0
   80d2a:	f245 2427 	movw	r4, #21031	; 0x5227
   80d2e:	f2c0 0408 	movt	r4, #8
   80d32:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80d34:	682b      	ldr	r3, [r5, #0]
   80d36:	6858      	ldr	r0, [r3, #4]
   80d38:	f04f 0100 	mov.w	r1, #0
   80d3c:	47a0      	blx	r4
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   80d3e:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   80d42:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80d46:	f44f 7280 	mov.w	r2, #256	; 0x100
   80d4a:	6642      	str	r2, [r0, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80d4c:	6542      	str	r2, [r0, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80d4e:	6242      	str	r2, [r0, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80d50:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   80d54:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80d56:	f421 7380 	bic.w	r3, r1, #256	; 0x100
   80d5a:	6703      	str	r3, [r0, #112]	; 0x70
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	ioport_set_pin_mode(PIO_PA8_IDX,IOPORT_MODE_PULLUP);// No stdout buffer
	#if defined(__GNUC__)
	setbuf(stdout, NULL);
   80d5c:	6828      	ldr	r0, [r5, #0]
   80d5e:	6880      	ldr	r0, [r0, #8]
   80d60:	f04f 0100 	mov.w	r1, #0
   80d64:	47a0      	blx	r4
	sysclk_init();
	board_init();
	ioport_init();
	configure_console();
	
	init_adc();
   80d66:	f240 12a5 	movw	r2, #421	; 0x1a5
   80d6a:	f2c0 0208 	movt	r2, #8
   80d6e:	4790      	blx	r2
	init_pwm();
   80d70:	f640 21dd 	movw	r1, #2781	; 0xadd
   80d74:	f2c0 0108 	movt	r1, #8
   80d78:	4788      	blx	r1
	init_sempahores();
   80d7a:	f640 4311 	movw	r3, #3089	; 0xc11
   80d7e:	f2c0 0308 	movt	r3, #8
   80d82:	4798      	blx	r3
	init_tasks();
   80d84:	f640 3031 	movw	r0, #2865	; 0xb31
   80d88:	f2c0 0008 	movt	r0, #8
   80d8c:	4780      	blx	r0
	
}
   80d8e:	f04f 0000 	mov.w	r0, #0
   80d92:	b005      	add	sp, #20
   80d94:	bd30      	pop	{r4, r5, pc}
   80d96:	bf00      	nop

00080d98 <initialize_pwm>:
int duty_cycle_9 = 0;
int duty_cycle_DAC1= 0;

/* Function for initialize PWM on pins DAC1, 9, 36, 38 and 40 */
void initialize_pwm(void)
{
   80d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80d9c:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_PWM);
   80d9e:	f04f 0024 	mov.w	r0, #36	; 0x24
   80da2:	f644 0535 	movw	r5, #18485	; 0x4835
   80da6:	f2c0 0508 	movt	r5, #8
   80daa:	47a8      	blx	r5
	pwm_channel_enable(PWM, PWM_CHANNEL_0);
   80dac:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   80db0:	f2c4 0409 	movt	r4, #16393	; 0x4009
   80db4:	4620      	mov	r0, r4
   80db6:	f04f 0100 	mov.w	r1, #0
   80dba:	f244 1641 	movw	r6, #16705	; 0x4141
   80dbe:	f2c0 0608 	movt	r6, #8
   80dc2:	47b0      	blx	r6
	pwm_channel_enable(PWM, PWM_CHANNEL_1);
   80dc4:	4620      	mov	r0, r4
   80dc6:	f04f 0101 	mov.w	r1, #1
   80dca:	47b0      	blx	r6
	pwm_channel_enable(PWM, PWM_CHANNEL_2);
   80dcc:	4620      	mov	r0, r4
   80dce:	f04f 0102 	mov.w	r1, #2
   80dd2:	47b0      	blx	r6
	pwm_channel_enable(PWM, PWM_CHANNEL_3);
   80dd4:	4620      	mov	r0, r4
   80dd6:	f04f 0103 	mov.w	r1, #3
   80dda:	47b0      	blx	r6
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   80ddc:	4620      	mov	r0, r4
   80dde:	f04f 0104 	mov.w	r1, #4
   80de2:	47b0      	blx	r6
	
	/* General clock settings for the PWM */
	pmc_enable_periph_clk(ID_PWM);
   80de4:	f04f 0024 	mov.w	r0, #36	; 0x24
   80de8:	47a8      	blx	r5
	pwm_clock_t clock_setting = {
   80dea:	f643 6358 	movw	r3, #15960	; 0x3e58
   80dee:	f2c0 030f 	movt	r3, #15
   80df2:	9301      	str	r3, [sp, #4]
   80df4:	f04f 0500 	mov.w	r5, #0
   80df8:	9502      	str	r5, [sp, #8]
   80dfa:	f44f 40f4 	mov.w	r0, #31232	; 0x7a00
   80dfe:	f6c0 2003 	movt	r0, #2563	; 0xa03
   80e02:	9003      	str	r0, [sp, #12]
		.ul_clka = PWM_FREQUENCY * PWM_RESOLUTION,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_main_hz()
	};
	pwm_init(PWM, &clock_setting);
   80e04:	4620      	mov	r0, r4
   80e06:	a901      	add	r1, sp, #4
   80e08:	f643 72a9 	movw	r2, #16297	; 0x3fa9
   80e0c:	f2c0 0208 	movt	r2, #8
   80e10:	4790      	blx	r2
	
	/* Disables the PWM channels for setup */
	pwm_channel_disable(PWM, PWM_CHANNEL_0);
   80e12:	4620      	mov	r0, r4
   80e14:	4629      	mov	r1, r5
   80e16:	f244 174d 	movw	r7, #16717	; 0x414d
   80e1a:	f2c0 0708 	movt	r7, #8
   80e1e:	47b8      	blx	r7
	pwm_channel_disable(PWM, PWM_CHANNEL_1);
   80e20:	4620      	mov	r0, r4
   80e22:	f04f 0101 	mov.w	r1, #1
   80e26:	47b8      	blx	r7
	pwm_channel_disable(PWM, PWM_CHANNEL_2);
   80e28:	4620      	mov	r0, r4
   80e2a:	f04f 0102 	mov.w	r1, #2
   80e2e:	47b8      	blx	r7
	pwm_channel_disable(PWM, PWM_CHANNEL_3);
   80e30:	4620      	mov	r0, r4
   80e32:	f04f 0103 	mov.w	r1, #3
   80e36:	47b8      	blx	r7
	pwm_channel_disable(PWM, PWM_CHANNEL_4);
   80e38:	4620      	mov	r0, r4
   80e3a:	f04f 0104 	mov.w	r1, #4
   80e3e:	47b8      	blx	r7
	
	
	/* DAC1 */
	pwm_channel_DAC1.alignment = PWM_ALIGN_LEFT;
   80e40:	f640 1170 	movw	r1, #2416	; 0x970
   80e44:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80e48:	46ab      	mov	fp, r5
   80e4a:	810d      	strh	r5, [r1, #8]
	pwm_channel_DAC1.polarity = PWM_POLARITY;
   80e4c:	728d      	strb	r5, [r1, #10]
	pwm_channel_DAC1.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80e4e:	f04f 0a0b 	mov.w	sl, #11
   80e52:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_DAC1.ul_period = PWM_RESOLUTION;
   80e56:	f240 39e7 	movw	r9, #999	; 0x3e7
   80e5a:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_DAC1.ul_duty = 0;
   80e5e:	60cd      	str	r5, [r1, #12]
	pwm_channel_DAC1.channel = PWM_CHANNEL_0;
   80e60:	600d      	str	r5, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_DAC1);
   80e62:	4620      	mov	r0, r4
   80e64:	f643 73f5 	movw	r3, #16373	; 0x3ff5
   80e68:	f2c0 0308 	movt	r3, #8
   80e6c:	4798      	blx	r3
	pio_set_peripheral(PWM_PIO_B, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_DAC1);
   80e6e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   80e72:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80e76:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80e7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80e7e:	f244 2795 	movw	r7, #17045	; 0x4295
   80e82:	46b8      	mov	r8, r7
   80e84:	f2c0 0808 	movt	r8, #8
   80e88:	47c0      	blx	r8
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_0);
   80e8a:	4620      	mov	r0, r4
   80e8c:	4629      	mov	r1, r5
   80e8e:	47b0      	blx	r6
	
	/* Pin 36 */
	pwm_channel_36.alignment = PWM_ALIGN_LEFT;
   80e90:	f640 11c4 	movw	r1, #2500	; 0x9c4
   80e94:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80e98:	810d      	strh	r5, [r1, #8]
	pwm_channel_36.polarity = PWM_POLARITY;
   80e9a:	728d      	strb	r5, [r1, #10]
	pwm_channel_36.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80e9c:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_36.ul_period = PWM_RESOLUTION;
   80ea0:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_36.ul_duty = 0;
   80ea4:	60cd      	str	r5, [r1, #12]
	pwm_channel_36.channel = PWM_CHANNEL_1;
   80ea6:	f04f 0001 	mov.w	r0, #1
   80eaa:	6008      	str	r0, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_36);
   80eac:	4620      	mov	r0, r4
   80eae:	f643 72f5 	movw	r2, #16373	; 0x3ff5
   80eb2:	f2c0 0208 	movt	r2, #8
   80eb6:	4790      	blx	r2
	pio_set_peripheral(PWM_PIO_C, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_36);
   80eb8:	f44f 5790 	mov.w	r7, #4608	; 0x1200
   80ebc:	f2c4 070e 	movt	r7, #16398	; 0x400e
   80ec0:	4638      	mov	r0, r7
   80ec2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80ec6:	f04f 0210 	mov.w	r2, #16
   80eca:	47c0      	blx	r8
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_1);
   80ecc:	4620      	mov	r0, r4
   80ece:	f04f 0101 	mov.w	r1, #1
   80ed2:	47b0      	blx	r6
	
	/* Pin 38 */
	pwm_channel_38.alignment = PWM_ALIGN_LEFT;
   80ed4:	f640 11f0 	movw	r1, #2544	; 0x9f0
   80ed8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80edc:	810d      	strh	r5, [r1, #8]
	pwm_channel_38.polarity = PWM_POLARITY;
   80ede:	728d      	strb	r5, [r1, #10]
	pwm_channel_38.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80ee0:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_38.ul_period = PWM_RESOLUTION;
   80ee4:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_38.ul_duty = 0;
   80ee8:	60cd      	str	r5, [r1, #12]
	pwm_channel_38.channel = PWM_CHANNEL_2;
   80eea:	f04f 0302 	mov.w	r3, #2
   80eee:	600b      	str	r3, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_38);
   80ef0:	4620      	mov	r0, r4
   80ef2:	f643 72f5 	movw	r2, #16373	; 0x3ff5
   80ef6:	f2c0 0208 	movt	r2, #8
   80efa:	4790      	blx	r2
	pio_set_peripheral(PWM_PIO_C, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_38);
   80efc:	4638      	mov	r0, r7
   80efe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80f02:	f04f 0240 	mov.w	r2, #64	; 0x40
   80f06:	47c0      	blx	r8
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_2);
   80f08:	4620      	mov	r0, r4
   80f0a:	f04f 0102 	mov.w	r1, #2
   80f0e:	47b0      	blx	r6
	
	/* Pin 40 */
	pwm_channel_40.alignment = PWM_ALIGN_LEFT;
   80f10:	f640 119c 	movw	r1, #2460	; 0x99c
   80f14:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80f18:	810d      	strh	r5, [r1, #8]
	pwm_channel_40.polarity = PWM_POLARITY;
   80f1a:	728d      	strb	r5, [r1, #10]
	pwm_channel_40.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80f1c:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_40.ul_period = PWM_RESOLUTION;
   80f20:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_40.ul_duty = 0;
   80f24:	60cd      	str	r5, [r1, #12]
	pwm_channel_40.channel = PWM_CHANNEL_3;
   80f26:	f04f 0003 	mov.w	r0, #3
   80f2a:	6008      	str	r0, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_40);
   80f2c:	4620      	mov	r0, r4
   80f2e:	f643 73f5 	movw	r3, #16373	; 0x3ff5
   80f32:	f2c0 0308 	movt	r3, #8
   80f36:	4798      	blx	r3
	pio_set_peripheral(PWM_PIO_C, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_40);
   80f38:	4638      	mov	r0, r7
   80f3a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80f3e:	f44f 7280 	mov.w	r2, #256	; 0x100
   80f42:	47c0      	blx	r8
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_3);
   80f44:	4620      	mov	r0, r4
   80f46:	f04f 0103 	mov.w	r1, #3
   80f4a:	47b0      	blx	r6
	
	/* Pin 9 */
	pwm_channel_9.alignment = PWM_ALIGN_LEFT;
   80f4c:	f640 1148 	movw	r1, #2376	; 0x948
   80f50:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80f54:	810d      	strh	r5, [r1, #8]
	pwm_channel_9.polarity = PWM_POLARITY;
   80f56:	728d      	strb	r5, [r1, #10]
	pwm_channel_9.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80f58:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_9.ul_period = PWM_RESOLUTION;
   80f5c:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_9.ul_duty = 0;
   80f60:	60cd      	str	r5, [r1, #12]
	pwm_channel_9.channel = PWM_CHANNEL_4;
   80f62:	f04f 0504 	mov.w	r5, #4
   80f66:	600d      	str	r5, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_9);
   80f68:	4620      	mov	r0, r4
   80f6a:	f643 72f5 	movw	r2, #16373	; 0x3ff5
   80f6e:	f2c0 0208 	movt	r2, #8
   80f72:	4790      	blx	r2
	pio_set_peripheral(PWM_PIO_C, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_9);
   80f74:	4638      	mov	r0, r7
   80f76:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80f7a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   80f7e:	47c0      	blx	r8
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   80f80:	4620      	mov	r0, r4
   80f82:	4629      	mov	r1, r5
   80f84:	47b0      	blx	r6
}
   80f86:	b005      	add	sp, #20
   80f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00080f8c <update_duty_cycle_DAC1>:

/* Updates the dutycycle of the PWM signal on DAC1 */
void update_duty_cycle_DAC1(uint32_t duty_cycle_temp)
{
   80f8c:	b508      	push	{r3, lr}
   80f8e:	4602      	mov	r2, r0
	duty_cycle_DAC1 = duty_cycle_temp;
   80f90:	f640 1398 	movw	r3, #2456	; 0x998
   80f94:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80f98:	6018      	str	r0, [r3, #0]
	pwm_channel_update_duty(PWM, &pwm_channel_DAC1, duty_cycle_temp);
   80f9a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80f9e:	f2c4 0009 	movt	r0, #16393	; 0x4009
   80fa2:	f640 1170 	movw	r1, #2416	; 0x970
   80fa6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80faa:	f244 131d 	movw	r3, #16669	; 0x411d
   80fae:	f2c0 0308 	movt	r3, #8
   80fb2:	4798      	blx	r3
   80fb4:	bd08      	pop	{r3, pc}
   80fb6:	bf00      	nop

00080fb8 <update_duty_cycle_36>:
}

/* Update the dutycycle of the PWM signal on pin 36 */
void update_duty_cycle_36(uint32_t duty_cycle_temp)
{
   80fb8:	b508      	push	{r3, lr}
   80fba:	4602      	mov	r2, r0
	duty_cycle_36 = duty_cycle_temp;
   80fbc:	f640 231c 	movw	r3, #2588	; 0xa1c
   80fc0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80fc4:	6018      	str	r0, [r3, #0]
	pwm_channel_update_duty(PWM, &pwm_channel_36, duty_cycle_temp);
   80fc6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80fca:	f2c4 0009 	movt	r0, #16393	; 0x4009
   80fce:	f640 11c4 	movw	r1, #2500	; 0x9c4
   80fd2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80fd6:	f244 131d 	movw	r3, #16669	; 0x411d
   80fda:	f2c0 0308 	movt	r3, #8
   80fde:	4798      	blx	r3
   80fe0:	bd08      	pop	{r3, pc}
   80fe2:	bf00      	nop

00080fe4 <update_duty_cycle_38>:
}

/* Updates the dutycycle of the PMW signal on pin 38 */
void update_duty_cycle_38(uint32_t duty_cycle_temp)
{
   80fe4:	b508      	push	{r3, lr}
   80fe6:	4602      	mov	r2, r0
	duty_cycle_38 = duty_cycle_temp;
   80fe8:	f640 1344 	movw	r3, #2372	; 0x944
   80fec:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80ff0:	6018      	str	r0, [r3, #0]
	pwm_channel_update_duty(PWM, &pwm_channel_38, duty_cycle_temp);
   80ff2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80ff6:	f2c4 0009 	movt	r0, #16393	; 0x4009
   80ffa:	f640 11f0 	movw	r1, #2544	; 0x9f0
   80ffe:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81002:	f244 131d 	movw	r3, #16669	; 0x411d
   81006:	f2c0 0308 	movt	r3, #8
   8100a:	4798      	blx	r3
   8100c:	bd08      	pop	{r3, pc}
   8100e:	bf00      	nop

00081010 <update_duty_cycle_40>:
}

/* Updates the dutycycle of the PWM signal on pin 40 */
void update_duty_cycle_40(uint32_t duty_cycle_temp)
{
   81010:	b508      	push	{r3, lr}
   81012:	4602      	mov	r2, r0
	duty_cycle_40 = duty_cycle_temp;
   81014:	f640 2318 	movw	r3, #2584	; 0xa18
   81018:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8101c:	6018      	str	r0, [r3, #0]
	pwm_channel_update_duty(PWM, &pwm_channel_40, duty_cycle_temp);
   8101e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   81022:	f2c4 0009 	movt	r0, #16393	; 0x4009
   81026:	f640 119c 	movw	r1, #2460	; 0x99c
   8102a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8102e:	f244 131d 	movw	r3, #16669	; 0x411d
   81032:	f2c0 0308 	movt	r3, #8
   81036:	4798      	blx	r3
   81038:	bd08      	pop	{r3, pc}
   8103a:	bf00      	nop

0008103c <update_duty_cycle_9>:
}

/* Updates the dutycycle of the PWM signal on pin 9 */
void update_duty_cycle_9(uint32_t duty_cycle_temp)
{
   8103c:	b508      	push	{r3, lr}
   8103e:	4602      	mov	r2, r0
	duty_cycle_9 = duty_cycle_temp;
   81040:	f640 13ec 	movw	r3, #2540	; 0x9ec
   81044:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81048:	6018      	str	r0, [r3, #0]
	pwm_channel_update_duty(PWM, &pwm_channel_9, duty_cycle_temp);
   8104a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   8104e:	f2c4 0009 	movt	r0, #16393	; 0x4009
   81052:	f640 1148 	movw	r1, #2376	; 0x948
   81056:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8105a:	f244 131d 	movw	r3, #16669	; 0x411d
   8105e:	f2c0 0308 	movt	r3, #8
   81062:	4798      	blx	r3
   81064:	bd08      	pop	{r3, pc}
   81066:	bf00      	nop

00081068 <start_communication>:
extern void test_duty_cycle_DAC1(void);
extern void test_update_duty_cycle_DAC1(void);

/* Start the communication task */
void start_communication(void *p)
{
   81068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8106c:	b083      	sub	sp, #12
	
 	portTickType xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount(); //Retrieve the startup tick timer
   8106e:	f243 134d 	movw	r3, #12621	; 0x314d
   81072:	f2c0 0308 	movt	r3, #8
   81076:	4798      	blx	r3
   81078:	f8ad 0006 	strh.w	r0, [sp, #6]
	
 	int i;
	i = 0;
	UnityBegin("test/test_duty_cycle.h");
   8107c:	f647 102c 	movw	r0, #31020	; 0x792c
   81080:	f2c0 0008 	movt	r0, #8
   81084:	f242 013d 	movw	r1, #8253	; 0x203d
   81088:	f2c0 0108 	movt	r1, #8
   8108c:	4788      	blx	r1
	RUN_TEST(test_duty_cycle_36,20);
   8108e:	f241 20a5 	movw	r0, #4773	; 0x12a5
   81092:	f2c0 0008 	movt	r0, #8
   81096:	f647 1144 	movw	r1, #31044	; 0x7944
   8109a:	f2c0 0108 	movt	r1, #8
   8109e:	f04f 0214 	mov.w	r2, #20
   810a2:	f641 74cd 	movw	r4, #8141	; 0x1fcd
   810a6:	f2c0 0408 	movt	r4, #8
   810aa:	47a0      	blx	r4
	RUN_TEST(test_duty_cycle_38,20);
   810ac:	f241 20d9 	movw	r0, #4825	; 0x12d9
   810b0:	f2c0 0008 	movt	r0, #8
   810b4:	f647 1158 	movw	r1, #31064	; 0x7958
   810b8:	f2c0 0108 	movt	r1, #8
   810bc:	f04f 0214 	mov.w	r2, #20
   810c0:	47a0      	blx	r4
	RUN_TEST(test_duty_cycle_40,20);
   810c2:	f241 300d 	movw	r0, #4877	; 0x130d
   810c6:	f2c0 0008 	movt	r0, #8
   810ca:	f647 116c 	movw	r1, #31084	; 0x796c
   810ce:	f2c0 0108 	movt	r1, #8
   810d2:	f04f 0214 	mov.w	r2, #20
   810d6:	47a0      	blx	r4
	RUN_TEST(test_duty_cycle_9,20);
   810d8:	f241 3041 	movw	r0, #4929	; 0x1341
   810dc:	f2c0 0008 	movt	r0, #8
   810e0:	f647 1180 	movw	r1, #31104	; 0x7980
   810e4:	f2c0 0108 	movt	r1, #8
   810e8:	f04f 0214 	mov.w	r2, #20
   810ec:	47a0      	blx	r4
	RUN_TEST(test_duty_cycle_DAC1,20);
   810ee:	f241 2071 	movw	r0, #4721	; 0x1271
   810f2:	f2c0 0008 	movt	r0, #8
   810f6:	f647 1194 	movw	r1, #31124	; 0x7994
   810fa:	f2c0 0108 	movt	r1, #8
   810fe:	f04f 0214 	mov.w	r2, #20
   81102:	47a0      	blx	r4
	RUN_TEST(test_update_duty_cycle_DAC1,20);
   81104:	f241 3075 	movw	r0, #4981	; 0x1375
   81108:	f2c0 0008 	movt	r0, #8
   8110c:	f647 11ac 	movw	r1, #31148	; 0x79ac
   81110:	f2c0 0108 	movt	r1, #8
   81114:	f04f 0214 	mov.w	r2, #20
   81118:	47a0      	blx	r4
	UnityEnd();
   8111a:	f242 005d 	movw	r0, #8285	; 0x205d
   8111e:	f2c0 0008 	movt	r0, #8
   81122:	4780      	blx	r0
	
	/* Simple infinite loop, printing text with a given delay */
 	while(1)
	 {
		 
		xSemaphoreTake(semahpore_duty_cycles,portMAX_DELAY); // Take semaphore
   81124:	f640 1740 	movw	r7, #2368	; 0x940
   81128:	f2c2 0707 	movt	r7, #8199	; 0x2007
   8112c:	6838      	ldr	r0, [r7, #0]
   8112e:	f04f 0100 	mov.w	r1, #0
   81132:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81136:	460b      	mov	r3, r1
   81138:	f642 354d 	movw	r5, #11085	; 0x2b4d
   8113c:	f2c0 0508 	movt	r5, #8
   81140:	47a8      	blx	r5
		/* Store the external variables temporarely */
		int duty_cycle_36_temp = duty_cycle_36;
   81142:	f640 2c1c 	movw	ip, #2588	; 0xa1c
   81146:	f2c2 0c07 	movt	ip, #8199	; 0x2007
   8114a:	f8dc a000 	ldr.w	sl, [ip]
		int duty_cycle_38_temp = duty_cycle_38;
   8114e:	f640 1244 	movw	r2, #2372	; 0x944
   81152:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81156:	f8d2 9000 	ldr.w	r9, [r2]
		int duty_cycle_40_temp = duty_cycle_40;
   8115a:	f640 2618 	movw	r6, #2584	; 0xa18
   8115e:	f2c2 0607 	movt	r6, #8199	; 0x2007
   81162:	f8d6 8000 	ldr.w	r8, [r6]
		int duty_cycle_9_temp = duty_cycle_9;
   81166:	f640 13ec 	movw	r3, #2540	; 0x9ec
   8116a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8116e:	681e      	ldr	r6, [r3, #0]
		int duty_cycle_DAC1_temp = duty_cycle_DAC1;
   81170:	f640 1198 	movw	r1, #2456	; 0x998
   81174:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81178:	680c      	ldr	r4, [r1, #0]

		xSemaphoreGive(semahpore_duty_cycles); // Give back the semaphore
   8117a:	6838      	ldr	r0, [r7, #0]
   8117c:	f04f 0100 	mov.w	r1, #0
   81180:	460a      	mov	r2, r1
   81182:	460b      	mov	r3, r1
   81184:	f642 151d 	movw	r5, #10525	; 0x291d
   81188:	f2c0 0508 	movt	r5, #8
   8118c:	47a8      	blx	r5
		
		/* Print out duty cycle information */
		printf("Duty cycle DAC1: %d\n\r",duty_cycle_DAC1_temp);
   8118e:	f647 10c8 	movw	r0, #31176	; 0x79c8
   81192:	f2c0 0008 	movt	r0, #8
   81196:	4621      	mov	r1, r4
   81198:	f245 14c5 	movw	r4, #20933	; 0x51c5
   8119c:	f2c0 0408 	movt	r4, #8
   811a0:	47a0      	blx	r4
		printf("Duty cycle 36: %d\n\r",duty_cycle_36_temp);
   811a2:	f647 10e0 	movw	r0, #31200	; 0x79e0
   811a6:	f2c0 0008 	movt	r0, #8
   811aa:	4651      	mov	r1, sl
   811ac:	47a0      	blx	r4
		printf("Duty cycle 38: %d\n\r",duty_cycle_38_temp);
   811ae:	f647 10f4 	movw	r0, #31220	; 0x79f4
   811b2:	f2c0 0008 	movt	r0, #8
   811b6:	4649      	mov	r1, r9
   811b8:	47a0      	blx	r4
		printf("Duty cycle 40: %d\n\r",duty_cycle_40_temp);
   811ba:	f647 2008 	movw	r0, #31240	; 0x7a08
   811be:	f2c0 0008 	movt	r0, #8
   811c2:	4641      	mov	r1, r8
   811c4:	47a0      	blx	r4
		printf("Duty cycle 9: %d\n\r",duty_cycle_9_temp);
   811c6:	f647 201c 	movw	r0, #31260	; 0x7a1c
   811ca:	f2c0 0008 	movt	r0, #8
   811ce:	4631      	mov	r1, r6
   811d0:	47a0      	blx	r4
		
		xSemaphoreTake(semaphore_adc_values,portMAX_DELAY); // Take semaphore
   811d2:	f640 163c 	movw	r6, #2364	; 0x93c
   811d6:	f2c2 0607 	movt	r6, #8199	; 0x2007
   811da:	6830      	ldr	r0, [r6, #0]
   811dc:	f04f 0100 	mov.w	r1, #0
   811e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   811e4:	460b      	mov	r3, r1
   811e6:	f642 3b4d 	movw	fp, #11085	; 0x2b4d
   811ea:	f2c0 0b08 	movt	fp, #8
   811ee:	47d8      	blx	fp
		int adc_value_back_left_temp = adc_value_back_left;
   811f0:	f640 00f4 	movw	r0, #2292	; 0x8f4
   811f4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   811f8:	f8d0 9000 	ldr.w	r9, [r0]
		int adc_value_back_right_temp = adc_value_back_right;
   811fc:	f640 02f0 	movw	r2, #2288	; 0x8f0
   81200:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81204:	f8d2 8000 	ldr.w	r8, [r2]
		int adc_value_front_left_temp = adc_value_front_left;
   81208:	f640 03f8 	movw	r3, #2296	; 0x8f8
   8120c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81210:	f8d3 b000 	ldr.w	fp, [r3]
		int adc_value_front_right_temp = adc_value_front_right;
   81214:	f640 01ec 	movw	r1, #2284	; 0x8ec
   81218:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8121c:	f8d1 a000 	ldr.w	sl, [r1]
		xSemaphoreGive(semaphore_adc_values); // Give back the semaphore
   81220:	6830      	ldr	r0, [r6, #0]
   81222:	f04f 0100 	mov.w	r1, #0
   81226:	460a      	mov	r2, r1
   81228:	460b      	mov	r3, r1
   8122a:	47a8      	blx	r5
		printf("AD FRONT_LEFT: %d\n\r",adc_value_front_left_temp);
   8122c:	f647 2030 	movw	r0, #31280	; 0x7a30
   81230:	f2c0 0008 	movt	r0, #8
   81234:	4659      	mov	r1, fp
   81236:	47a0      	blx	r4
		printf("AD FRONT_RIGHT: %d\n\r",adc_value_front_right_temp);
   81238:	f647 2044 	movw	r0, #31300	; 0x7a44
   8123c:	f2c0 0008 	movt	r0, #8
   81240:	4651      	mov	r1, sl
   81242:	47a0      	blx	r4
		printf("AD BACK_LEFT: %d\n\r",adc_value_back_left_temp);
   81244:	f647 205c 	movw	r0, #31324	; 0x7a5c
   81248:	f2c0 0008 	movt	r0, #8
   8124c:	4649      	mov	r1, r9
   8124e:	47a0      	blx	r4
		printf("AD BACK_RIGHT: %d\n\r",adc_value_back_right_temp);
   81250:	f647 2070 	movw	r0, #31344	; 0x7a70
   81254:	f2c0 0008 	movt	r0, #8
   81258:	4641      	mov	r1, r8
   8125a:	47a0      	blx	r4
		
 		vTaskDelayUntil(&xLastWakeTime,COMMUNICATION_SCHEDULE_TIME);
   8125c:	f10d 0006 	add.w	r0, sp, #6
   81260:	f241 3188 	movw	r1, #5000	; 0x1388
   81264:	f243 45fd 	movw	r5, #13565	; 0x34fd
   81268:	f2c0 0508 	movt	r5, #8
   8126c:	47a8      	blx	r5
   8126e:	e75d      	b.n	8112c <start_communication+0xc4>

00081270 <test_duty_cycle_DAC1>:
 * Created: 2015-05-05 10:11:29
 *  Author: ad2302
 */ 
#include "pwm_controller.h"
#include "unity.h"
void test_duty_cycle_DAC1(void) {
   81270:	b510      	push	{r4, lr}
   81272:	b082      	sub	sp, #8
	TEST_ASSERT_EQUAL_MESSAGE(999,duty_cycle_DAC1,"wrong duty cycle DAC1");
   81274:	f640 1398 	movw	r3, #2456	; 0x998
   81278:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8127c:	6819      	ldr	r1, [r3, #0]
   8127e:	f04f 0094 	mov.w	r0, #148	; 0x94
   81282:	9000      	str	r0, [sp, #0]
   81284:	f240 30e7 	movw	r0, #999	; 0x3e7
   81288:	f647 2284 	movw	r2, #31364	; 0x7a84
   8128c:	f2c0 0208 	movt	r2, #8
   81290:	f04f 030a 	mov.w	r3, #10
   81294:	f641 7441 	movw	r4, #8001	; 0x1f41
   81298:	f2c0 0408 	movt	r4, #8
   8129c:	47a0      	blx	r4
}
   8129e:	b002      	add	sp, #8
   812a0:	bd10      	pop	{r4, pc}
   812a2:	bf00      	nop

000812a4 <test_duty_cycle_36>:

void test_duty_cycle_36(void) {
   812a4:	b510      	push	{r4, lr}
   812a6:	b082      	sub	sp, #8
	TEST_ASSERT_EQUAL_MESSAGE(600,duty_cycle_36,"wrong duty cycle DAC1");
   812a8:	f640 231c 	movw	r3, #2588	; 0xa1c
   812ac:	f2c2 0307 	movt	r3, #8199	; 0x2007
   812b0:	6819      	ldr	r1, [r3, #0]
   812b2:	f04f 0094 	mov.w	r0, #148	; 0x94
   812b6:	9000      	str	r0, [sp, #0]
   812b8:	f44f 7016 	mov.w	r0, #600	; 0x258
   812bc:	f647 2284 	movw	r2, #31364	; 0x7a84
   812c0:	f2c0 0208 	movt	r2, #8
   812c4:	f04f 030e 	mov.w	r3, #14
   812c8:	f641 7441 	movw	r4, #8001	; 0x1f41
   812cc:	f2c0 0408 	movt	r4, #8
   812d0:	47a0      	blx	r4
}
   812d2:	b002      	add	sp, #8
   812d4:	bd10      	pop	{r4, pc}
   812d6:	bf00      	nop

000812d8 <test_duty_cycle_38>:

void test_duty_cycle_38(void) {
   812d8:	b510      	push	{r4, lr}
   812da:	b082      	sub	sp, #8
	TEST_ASSERT_EQUAL_MESSAGE(600,duty_cycle_38,"wrong duty cycle DAC1");
   812dc:	f640 1344 	movw	r3, #2372	; 0x944
   812e0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   812e4:	6819      	ldr	r1, [r3, #0]
   812e6:	f04f 0094 	mov.w	r0, #148	; 0x94
   812ea:	9000      	str	r0, [sp, #0]
   812ec:	f44f 7016 	mov.w	r0, #600	; 0x258
   812f0:	f647 2284 	movw	r2, #31364	; 0x7a84
   812f4:	f2c0 0208 	movt	r2, #8
   812f8:	f04f 0312 	mov.w	r3, #18
   812fc:	f641 7441 	movw	r4, #8001	; 0x1f41
   81300:	f2c0 0408 	movt	r4, #8
   81304:	47a0      	blx	r4
}
   81306:	b002      	add	sp, #8
   81308:	bd10      	pop	{r4, pc}
   8130a:	bf00      	nop

0008130c <test_duty_cycle_40>:

void test_duty_cycle_40(void) {
   8130c:	b510      	push	{r4, lr}
   8130e:	b082      	sub	sp, #8
	TEST_ASSERT_EQUAL_MESSAGE(500,duty_cycle_40,"wrong duty cycle DAC1");
   81310:	f640 2318 	movw	r3, #2584	; 0xa18
   81314:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81318:	6819      	ldr	r1, [r3, #0]
   8131a:	f04f 0094 	mov.w	r0, #148	; 0x94
   8131e:	9000      	str	r0, [sp, #0]
   81320:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   81324:	f647 2284 	movw	r2, #31364	; 0x7a84
   81328:	f2c0 0208 	movt	r2, #8
   8132c:	f04f 0316 	mov.w	r3, #22
   81330:	f641 7441 	movw	r4, #8001	; 0x1f41
   81334:	f2c0 0408 	movt	r4, #8
   81338:	47a0      	blx	r4
}
   8133a:	b002      	add	sp, #8
   8133c:	bd10      	pop	{r4, pc}
   8133e:	bf00      	nop

00081340 <test_duty_cycle_9>:

void test_duty_cycle_9(void) {
   81340:	b510      	push	{r4, lr}
   81342:	b082      	sub	sp, #8
	TEST_ASSERT_EQUAL_MESSAGE(700,duty_cycle_9,"wrong duty cycle DAC1");
   81344:	f640 13ec 	movw	r3, #2540	; 0x9ec
   81348:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8134c:	6819      	ldr	r1, [r3, #0]
   8134e:	f04f 0094 	mov.w	r0, #148	; 0x94
   81352:	9000      	str	r0, [sp, #0]
   81354:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   81358:	f647 2284 	movw	r2, #31364	; 0x7a84
   8135c:	f2c0 0208 	movt	r2, #8
   81360:	f04f 031a 	mov.w	r3, #26
   81364:	f641 7441 	movw	r4, #8001	; 0x1f41
   81368:	f2c0 0408 	movt	r4, #8
   8136c:	47a0      	blx	r4
}
   8136e:	b002      	add	sp, #8
   81370:	bd10      	pop	{r4, pc}
   81372:	bf00      	nop

00081374 <test_update_duty_cycle_DAC1>:
void test_update_duty_cycle_DAC1(void) {
   81374:	b510      	push	{r4, lr}
   81376:	b082      	sub	sp, #8
	update_duty_cycle_DAC1(0);
   81378:	f04f 0000 	mov.w	r0, #0
   8137c:	f640 738d 	movw	r3, #3981	; 0xf8d
   81380:	f2c0 0308 	movt	r3, #8
   81384:	4798      	blx	r3
	TEST_ASSERT_EQUAL_MESSAGE(0,duty_cycle_DAC1,"wrong duty cycle DAC1");
   81386:	f640 1098 	movw	r0, #2456	; 0x998
   8138a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8138e:	6801      	ldr	r1, [r0, #0]
   81390:	f04f 0294 	mov.w	r2, #148	; 0x94
   81394:	9200      	str	r2, [sp, #0]
   81396:	f04f 0000 	mov.w	r0, #0
   8139a:	f647 2284 	movw	r2, #31364	; 0x7a84
   8139e:	f2c0 0208 	movt	r2, #8
   813a2:	f04f 031e 	mov.w	r3, #30
   813a6:	f641 7441 	movw	r4, #8001	; 0x1f41
   813aa:	f2c0 0408 	movt	r4, #8
   813ae:	47a0      	blx	r4
   813b0:	b002      	add	sp, #8
   813b2:	bd10      	pop	{r4, pc}

000813b4 <UnityPrintNumber>:
}

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumber(const _U_SINT number_to_print)
{
   813b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   813b8:	4606      	mov	r6, r0
    _U_SINT divisor = 1;
    _U_SINT next_divisor;
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
   813ba:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   813be:	d148      	bne.n	81452 <UnityPrintNumber+0x9e>
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   813c0:	f240 0310 	movw	r3, #16
   813c4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   813c8:	6818      	ldr	r0, [r3, #0]
   813ca:	6882      	ldr	r2, [r0, #8]
   813cc:	6891      	ldr	r1, [r2, #8]
   813ce:	f101 34ff 	add.w	r4, r1, #4294967295
   813d2:	6094      	str	r4, [r2, #8]
   813d4:	2c00      	cmp	r4, #0
   813d6:	da2a      	bge.n	8142e <UnityPrintNumber+0x7a>
   813d8:	6882      	ldr	r2, [r0, #8]
   813da:	6894      	ldr	r4, [r2, #8]
   813dc:	6995      	ldr	r5, [r2, #24]
   813de:	42ac      	cmp	r4, r5
   813e0:	db1b      	blt.n	8141a <UnityPrintNumber+0x66>
   813e2:	6810      	ldr	r0, [r2, #0]
   813e4:	f04f 072d 	mov.w	r7, #45	; 0x2d
   813e8:	7007      	strb	r7, [r0, #0]
   813ea:	f240 0310 	movw	r3, #16
   813ee:	f2c2 0307 	movt	r3, #8199	; 0x2007
   813f2:	6818      	ldr	r0, [r3, #0]
   813f4:	6882      	ldr	r2, [r0, #8]
   813f6:	6814      	ldr	r4, [r2, #0]
   813f8:	7821      	ldrb	r1, [r4, #0]
   813fa:	290a      	cmp	r1, #10
   813fc:	d003      	beq.n	81406 <UnityPrintNumber+0x52>
   813fe:	f104 0401 	add.w	r4, r4, #1
   81402:	6014      	str	r4, [r2, #0]
   81404:	e073      	b.n	814ee <UnityPrintNumber+0x13a>
   81406:	f04f 010a 	mov.w	r1, #10
   8140a:	f645 4591 	movw	r5, #23697	; 0x5c91
   8140e:	f2c0 0508 	movt	r5, #8
   81412:	47a8      	blx	r5
        number = (1ul << (UNITY_LONG_WIDTH-1));
   81414:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
   81418:	e069      	b.n	814ee <UnityPrintNumber+0x13a>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   8141a:	f04f 012d 	mov.w	r1, #45	; 0x2d
   8141e:	f645 4691 	movw	r6, #23697	; 0x5c91
   81422:	f2c0 0608 	movt	r6, #8
   81426:	47b0      	blx	r6
        number = (1ul << (UNITY_LONG_WIDTH-1));
   81428:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
   8142c:	e05f      	b.n	814ee <UnityPrintNumber+0x13a>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   8142e:	6886      	ldr	r6, [r0, #8]
   81430:	6830      	ldr	r0, [r6, #0]
   81432:	f04f 052d 	mov.w	r5, #45	; 0x2d
   81436:	7005      	strb	r5, [r0, #0]
   81438:	f240 0710 	movw	r7, #16
   8143c:	f2c2 0707 	movt	r7, #8199	; 0x2007
   81440:	683b      	ldr	r3, [r7, #0]
   81442:	6899      	ldr	r1, [r3, #8]
   81444:	680a      	ldr	r2, [r1, #0]
   81446:	f102 0201 	add.w	r2, r2, #1
   8144a:	600a      	str	r2, [r1, #0]
        number = (1ul << (UNITY_LONG_WIDTH-1));
   8144c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
   81450:	e04d      	b.n	814ee <UnityPrintNumber+0x13a>
    }
    else if (number_to_print < 0)
   81452:	2800      	cmp	r0, #0
   81454:	da4b      	bge.n	814ee <UnityPrintNumber+0x13a>
    {
        //Some other negative number
        UNITY_OUTPUT_CHAR('-');
   81456:	f240 0310 	movw	r3, #16
   8145a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8145e:	6818      	ldr	r0, [r3, #0]
   81460:	6882      	ldr	r2, [r0, #8]
   81462:	6891      	ldr	r1, [r2, #8]
   81464:	f101 34ff 	add.w	r4, r1, #4294967295
   81468:	6094      	str	r4, [r2, #8]
   8146a:	2c00      	cmp	r4, #0
   8146c:	da26      	bge.n	814bc <UnityPrintNumber+0x108>
   8146e:	6882      	ldr	r2, [r0, #8]
   81470:	6895      	ldr	r5, [r2, #8]
   81472:	6997      	ldr	r7, [r2, #24]
   81474:	42bd      	cmp	r5, r7
   81476:	db19      	blt.n	814ac <UnityPrintNumber+0xf8>
   81478:	6810      	ldr	r0, [r2, #0]
   8147a:	f04f 022d 	mov.w	r2, #45	; 0x2d
   8147e:	7002      	strb	r2, [r0, #0]
   81480:	f240 0110 	movw	r1, #16
   81484:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81488:	6808      	ldr	r0, [r1, #0]
   8148a:	6882      	ldr	r2, [r0, #8]
   8148c:	6814      	ldr	r4, [r2, #0]
   8148e:	7825      	ldrb	r5, [r4, #0]
   81490:	2d0a      	cmp	r5, #10
   81492:	d003      	beq.n	8149c <UnityPrintNumber+0xe8>
   81494:	f104 0401 	add.w	r4, r4, #1
   81498:	6014      	str	r4, [r2, #0]
   8149a:	e01e      	b.n	814da <UnityPrintNumber+0x126>
   8149c:	f04f 010a 	mov.w	r1, #10
   814a0:	f645 4791 	movw	r7, #23697	; 0x5c91
   814a4:	f2c0 0708 	movt	r7, #8
   814a8:	47b8      	blx	r7
   814aa:	e016      	b.n	814da <UnityPrintNumber+0x126>
   814ac:	f04f 012d 	mov.w	r1, #45	; 0x2d
   814b0:	f645 4391 	movw	r3, #23697	; 0x5c91
   814b4:	f2c0 0308 	movt	r3, #8
   814b8:	4798      	blx	r3
   814ba:	e00e      	b.n	814da <UnityPrintNumber+0x126>
   814bc:	6880      	ldr	r0, [r0, #8]
   814be:	6805      	ldr	r5, [r0, #0]
   814c0:	f04f 072d 	mov.w	r7, #45	; 0x2d
   814c4:	702f      	strb	r7, [r5, #0]
   814c6:	f240 0310 	movw	r3, #16
   814ca:	f2c2 0307 	movt	r3, #8199	; 0x2007
   814ce:	681a      	ldr	r2, [r3, #0]
   814d0:	6891      	ldr	r1, [r2, #8]
   814d2:	680c      	ldr	r4, [r1, #0]
   814d4:	f104 0401 	add.w	r4, r4, #1
   814d8:	600c      	str	r4, [r1, #0]
        number = (_U_UINT)(-number_to_print);
   814da:	f1c6 0600 	rsb	r6, r6, #0
   814de:	e006      	b.n	814ee <UnityPrintNumber+0x13a>
    }

    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
   814e0:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   814e4:	ea4f 0740 	mov.w	r7, r0, lsl #1
        if (next_divisor > divisor)
   814e8:	42bc      	cmp	r4, r7
   814ea:	db03      	blt.n	814f4 <UnityPrintNumber+0x140>
   814ec:	e007      	b.n	814fe <UnityPrintNumber+0x14a>

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
        number = (1ul << (UNITY_LONG_WIDTH-1));
   814ee:	f04f 0401 	mov.w	r4, #1
   814f2:	e000      	b.n	814f6 <UnityPrintNumber+0x142>
    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
        if (next_divisor > divisor)
            divisor = next_divisor;
   814f4:	463c      	mov	r4, r7
        //Positive number
        number = (_U_UINT)number_to_print;
    }

    // figure out initial divisor
    while (number / divisor > 9)
   814f6:	fbb6 f2f4 	udiv	r2, r6, r4
   814fa:	2a09      	cmp	r2, #9
   814fc:	d8f0      	bhi.n	814e0 <UnityPrintNumber+0x12c>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   814fe:	f240 0510 	movw	r5, #16
   81502:	f2c2 0507 	movt	r5, #8199	; 0x2007
   81506:	f64c 48cd 	movw	r8, #52429	; 0xcccd
   8150a:	f6cc 48cc 	movt	r8, #52428	; 0xcccc
   8150e:	f645 4991 	movw	r9, #23697	; 0x5c91
   81512:	f2c0 0908 	movt	r9, #8
   81516:	f04f 0a0a 	mov.w	sl, #10
        divisor /= 10;
   8151a:	f246 6767 	movw	r7, #26215	; 0x6667
   8151e:	f2c6 6766 	movt	r7, #26214	; 0x6666
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   81522:	6828      	ldr	r0, [r5, #0]
   81524:	6881      	ldr	r1, [r0, #8]
   81526:	688b      	ldr	r3, [r1, #8]
   81528:	f103 32ff 	add.w	r2, r3, #4294967295
   8152c:	608a      	str	r2, [r1, #8]
   8152e:	2a00      	cmp	r2, #0
   81530:	da2e      	bge.n	81590 <UnityPrintNumber+0x1dc>
   81532:	6882      	ldr	r2, [r0, #8]
   81534:	6891      	ldr	r1, [r2, #8]
   81536:	6993      	ldr	r3, [r2, #24]
   81538:	4299      	cmp	r1, r3
   8153a:	db1a      	blt.n	81572 <UnityPrintNumber+0x1be>
   8153c:	6811      	ldr	r1, [r2, #0]
   8153e:	fbb6 f3f4 	udiv	r3, r6, r4
   81542:	fba8 0203 	umull	r0, r2, r8, r3
   81546:	ea4f 00d2 	mov.w	r0, r2, lsr #3
   8154a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   8154e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   81552:	f103 0330 	add.w	r3, r3, #48	; 0x30
   81556:	700b      	strb	r3, [r1, #0]
   81558:	6828      	ldr	r0, [r5, #0]
   8155a:	6882      	ldr	r2, [r0, #8]
   8155c:	6813      	ldr	r3, [r2, #0]
   8155e:	7819      	ldrb	r1, [r3, #0]
   81560:	290a      	cmp	r1, #10
   81562:	d003      	beq.n	8156c <UnityPrintNumber+0x1b8>
   81564:	f103 0301 	add.w	r3, r3, #1
   81568:	6013      	str	r3, [r2, #0]
   8156a:	e026      	b.n	815ba <UnityPrintNumber+0x206>
   8156c:	4651      	mov	r1, sl
   8156e:	47c8      	blx	r9
   81570:	e023      	b.n	815ba <UnityPrintNumber+0x206>
   81572:	fbb6 f3f4 	udiv	r3, r6, r4
   81576:	fba8 e103 	umull	lr, r1, r8, r3
   8157a:	ea4f 01d1 	mov.w	r1, r1, lsr #3
   8157e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   81582:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
   81586:	f103 0330 	add.w	r3, r3, #48	; 0x30
   8158a:	b2d9      	uxtb	r1, r3
   8158c:	47c8      	blx	r9
   8158e:	e014      	b.n	815ba <UnityPrintNumber+0x206>
   81590:	6880      	ldr	r0, [r0, #8]
   81592:	6801      	ldr	r1, [r0, #0]
   81594:	fbb6 f3f4 	udiv	r3, r6, r4
   81598:	fba8 0203 	umull	r0, r2, r8, r3
   8159c:	ea4f 00d2 	mov.w	r0, r2, lsr #3
   815a0:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   815a4:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   815a8:	f103 0330 	add.w	r3, r3, #48	; 0x30
   815ac:	700b      	strb	r3, [r1, #0]
   815ae:	6829      	ldr	r1, [r5, #0]
   815b0:	6888      	ldr	r0, [r1, #8]
   815b2:	6802      	ldr	r2, [r0, #0]
   815b4:	f102 0201 	add.w	r2, r2, #1
   815b8:	6002      	str	r2, [r0, #0]
        divisor /= 10;
   815ba:	fb87 2004 	smull	r2, r0, r7, r4
   815be:	ea4f 74e4 	mov.w	r4, r4, asr #31
   815c2:	ebc4 04a0 	rsb	r4, r4, r0, asr #2
    }
    while (divisor > 0);
   815c6:	2c00      	cmp	r4, #0
   815c8:	dcab      	bgt.n	81522 <UnityPrintNumber+0x16e>
}
   815ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   815ce:	bf00      	nop

000815d0 <UnityPrintNumberUnsigned>:

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumberUnsigned(const _U_UINT number)
{
   815d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   815d4:	4606      	mov	r6, r0
    _U_UINT divisor = 1;
   815d6:	f04f 0401 	mov.w	r4, #1
    _U_UINT next_divisor;

    // figure out initial divisor
    while (number / divisor > 9)
   815da:	e006      	b.n	815ea <UnityPrintNumberUnsigned+0x1a>
    {
        next_divisor = divisor * 10;
   815dc:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   815e0:	ea4f 0140 	mov.w	r1, r0, lsl #1
        if (next_divisor > divisor)
   815e4:	428c      	cmp	r4, r1
   815e6:	d204      	bcs.n	815f2 <UnityPrintNumberUnsigned+0x22>
            divisor = next_divisor;
   815e8:	460c      	mov	r4, r1
{
    _U_UINT divisor = 1;
    _U_UINT next_divisor;

    // figure out initial divisor
    while (number / divisor > 9)
   815ea:	fbb6 f3f4 	udiv	r3, r6, r4
   815ee:	2b09      	cmp	r3, #9
   815f0:	d8f4      	bhi.n	815dc <UnityPrintNumberUnsigned+0xc>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   815f2:	f240 0710 	movw	r7, #16
   815f6:	f2c2 0707 	movt	r7, #8199	; 0x2007
   815fa:	f64c 45cd 	movw	r5, #52429	; 0xcccd
   815fe:	f6cc 45cc 	movt	r5, #52428	; 0xcccc
   81602:	f645 4891 	movw	r8, #23697	; 0x5c91
   81606:	f2c0 0808 	movt	r8, #8
   8160a:	f04f 090a 	mov.w	r9, #10
   8160e:	683b      	ldr	r3, [r7, #0]
   81610:	6898      	ldr	r0, [r3, #8]
   81612:	6882      	ldr	r2, [r0, #8]
   81614:	f102 31ff 	add.w	r1, r2, #4294967295
   81618:	6081      	str	r1, [r0, #8]
   8161a:	2900      	cmp	r1, #0
   8161c:	da2f      	bge.n	8167e <UnityPrintNumberUnsigned+0xae>
   8161e:	689a      	ldr	r2, [r3, #8]
   81620:	6890      	ldr	r0, [r2, #8]
   81622:	6991      	ldr	r1, [r2, #24]
   81624:	4288      	cmp	r0, r1
   81626:	db1a      	blt.n	8165e <UnityPrintNumberUnsigned+0x8e>
   81628:	6811      	ldr	r1, [r2, #0]
   8162a:	fbb6 f3f4 	udiv	r3, r6, r4
   8162e:	fba5 0203 	umull	r0, r2, r5, r3
   81632:	ea4f 00d2 	mov.w	r0, r2, lsr #3
   81636:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   8163a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   8163e:	f103 0330 	add.w	r3, r3, #48	; 0x30
   81642:	700b      	strb	r3, [r1, #0]
   81644:	6838      	ldr	r0, [r7, #0]
   81646:	6882      	ldr	r2, [r0, #8]
   81648:	6813      	ldr	r3, [r2, #0]
   8164a:	7819      	ldrb	r1, [r3, #0]
   8164c:	290a      	cmp	r1, #10
   8164e:	d003      	beq.n	81658 <UnityPrintNumberUnsigned+0x88>
   81650:	f103 0301 	add.w	r3, r3, #1
   81654:	6013      	str	r3, [r2, #0]
   81656:	e027      	b.n	816a8 <UnityPrintNumberUnsigned+0xd8>
   81658:	4649      	mov	r1, r9
   8165a:	47c0      	blx	r8
   8165c:	e024      	b.n	816a8 <UnityPrintNumberUnsigned+0xd8>
   8165e:	fbb6 f1f4 	udiv	r1, r6, r4
   81662:	fba5 e001 	umull	lr, r0, r5, r1
   81666:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   8166a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8166e:	eba1 0140 	sub.w	r1, r1, r0, lsl #1
   81672:	f101 0130 	add.w	r1, r1, #48	; 0x30
   81676:	4618      	mov	r0, r3
   81678:	b2c9      	uxtb	r1, r1
   8167a:	47c0      	blx	r8
   8167c:	e014      	b.n	816a8 <UnityPrintNumberUnsigned+0xd8>
   8167e:	689b      	ldr	r3, [r3, #8]
   81680:	6819      	ldr	r1, [r3, #0]
   81682:	fbb6 f3f4 	udiv	r3, r6, r4
   81686:	fba5 0203 	umull	r0, r2, r5, r3
   8168a:	ea4f 00d2 	mov.w	r0, r2, lsr #3
   8168e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   81692:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   81696:	f103 0330 	add.w	r3, r3, #48	; 0x30
   8169a:	700b      	strb	r3, [r1, #0]
   8169c:	6839      	ldr	r1, [r7, #0]
   8169e:	6888      	ldr	r0, [r1, #8]
   816a0:	6802      	ldr	r2, [r0, #0]
   816a2:	f102 0201 	add.w	r2, r2, #1
   816a6:	6002      	str	r2, [r0, #0]
        divisor /= 10;
   816a8:	fba5 3404 	umull	r3, r4, r5, r4
    }
    while (divisor > 0);
   816ac:	08e4      	lsrs	r4, r4, #3
   816ae:	d1ae      	bne.n	8160e <UnityPrintNumberUnsigned+0x3e>
}
   816b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000816b4 <UnityPrintNumberHex>:

//-----------------------------------------------
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
   816b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   816b8:	4606      	mov	r6, r0
   816ba:	460c      	mov	r4, r1
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
   816bc:	f240 0310 	movw	r3, #16
   816c0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   816c4:	6818      	ldr	r0, [r3, #0]
   816c6:	6882      	ldr	r2, [r0, #8]
   816c8:	6891      	ldr	r1, [r2, #8]
   816ca:	f101 33ff 	add.w	r3, r1, #4294967295
   816ce:	6093      	str	r3, [r2, #8]
   816d0:	2b00      	cmp	r3, #0
   816d2:	da26      	bge.n	81722 <UnityPrintNumberHex+0x6e>
   816d4:	6882      	ldr	r2, [r0, #8]
   816d6:	6891      	ldr	r1, [r2, #8]
   816d8:	6993      	ldr	r3, [r2, #24]
   816da:	4299      	cmp	r1, r3
   816dc:	db19      	blt.n	81712 <UnityPrintNumberHex+0x5e>
   816de:	6810      	ldr	r0, [r2, #0]
   816e0:	f04f 0230 	mov.w	r2, #48	; 0x30
   816e4:	7002      	strb	r2, [r0, #0]
   816e6:	f240 0110 	movw	r1, #16
   816ea:	f2c2 0107 	movt	r1, #8199	; 0x2007
   816ee:	6808      	ldr	r0, [r1, #0]
   816f0:	6882      	ldr	r2, [r0, #8]
   816f2:	6813      	ldr	r3, [r2, #0]
   816f4:	7819      	ldrb	r1, [r3, #0]
   816f6:	290a      	cmp	r1, #10
   816f8:	d003      	beq.n	81702 <UnityPrintNumberHex+0x4e>
   816fa:	f103 0301 	add.w	r3, r3, #1
   816fe:	6013      	str	r3, [r2, #0]
   81700:	e01e      	b.n	81740 <UnityPrintNumberHex+0x8c>
   81702:	f04f 010a 	mov.w	r1, #10
   81706:	f645 4391 	movw	r3, #23697	; 0x5c91
   8170a:	f2c0 0308 	movt	r3, #8
   8170e:	4798      	blx	r3
   81710:	e016      	b.n	81740 <UnityPrintNumberHex+0x8c>
   81712:	f04f 0130 	mov.w	r1, #48	; 0x30
   81716:	f645 4391 	movw	r3, #23697	; 0x5c91
   8171a:	f2c0 0308 	movt	r3, #8
   8171e:	4798      	blx	r3
   81720:	e00e      	b.n	81740 <UnityPrintNumberHex+0x8c>
   81722:	6880      	ldr	r0, [r0, #8]
   81724:	6801      	ldr	r1, [r0, #0]
   81726:	f04f 0230 	mov.w	r2, #48	; 0x30
   8172a:	700a      	strb	r2, [r1, #0]
   8172c:	f240 0310 	movw	r3, #16
   81730:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81734:	6818      	ldr	r0, [r3, #0]
   81736:	6881      	ldr	r1, [r0, #8]
   81738:	680a      	ldr	r2, [r1, #0]
   8173a:	f102 0201 	add.w	r2, r2, #1
   8173e:	600a      	str	r2, [r1, #0]
    UNITY_OUTPUT_CHAR('x');
   81740:	f240 0010 	movw	r0, #16
   81744:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81748:	6800      	ldr	r0, [r0, #0]
   8174a:	6882      	ldr	r2, [r0, #8]
   8174c:	6891      	ldr	r1, [r2, #8]
   8174e:	f101 33ff 	add.w	r3, r1, #4294967295
   81752:	6093      	str	r3, [r2, #8]
   81754:	2b00      	cmp	r3, #0
   81756:	da28      	bge.n	817aa <UnityPrintNumberHex+0xf6>
   81758:	6882      	ldr	r2, [r0, #8]
   8175a:	6891      	ldr	r1, [r2, #8]
   8175c:	6993      	ldr	r3, [r2, #24]
   8175e:	4299      	cmp	r1, r3
   81760:	db19      	blt.n	81796 <UnityPrintNumberHex+0xe2>
   81762:	6810      	ldr	r0, [r2, #0]
   81764:	f04f 0278 	mov.w	r2, #120	; 0x78
   81768:	7002      	strb	r2, [r0, #0]
   8176a:	f240 0110 	movw	r1, #16
   8176e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81772:	6808      	ldr	r0, [r1, #0]
   81774:	6882      	ldr	r2, [r0, #8]
   81776:	6813      	ldr	r3, [r2, #0]
   81778:	7819      	ldrb	r1, [r3, #0]
   8177a:	290a      	cmp	r1, #10
   8177c:	d003      	beq.n	81786 <UnityPrintNumberHex+0xd2>
   8177e:	f103 0301 	add.w	r3, r3, #1
   81782:	6013      	str	r3, [r2, #0]
   81784:	e00e      	b.n	817a4 <UnityPrintNumberHex+0xf0>
   81786:	f04f 010a 	mov.w	r1, #10
   8178a:	f645 4391 	movw	r3, #23697	; 0x5c91
   8178e:	f2c0 0308 	movt	r3, #8
   81792:	4798      	blx	r3
   81794:	e006      	b.n	817a4 <UnityPrintNumberHex+0xf0>
   81796:	f04f 0178 	mov.w	r1, #120	; 0x78
   8179a:	f645 4391 	movw	r3, #23697	; 0x5c91
   8179e:	f2c0 0308 	movt	r3, #8
   817a2:	4798      	blx	r3

    while (nibbles > 0)
   817a4:	b98c      	cbnz	r4, 817ca <UnityPrintNumberHex+0x116>
   817a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');
   817aa:	6880      	ldr	r0, [r0, #8]
   817ac:	6801      	ldr	r1, [r0, #0]
   817ae:	f04f 0278 	mov.w	r2, #120	; 0x78
   817b2:	700a      	strb	r2, [r1, #0]
   817b4:	f240 0310 	movw	r3, #16
   817b8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   817bc:	6818      	ldr	r0, [r3, #0]
   817be:	6881      	ldr	r1, [r0, #8]
   817c0:	680a      	ldr	r2, [r1, #0]
   817c2:	f102 0201 	add.w	r2, r2, #1
   817c6:	600a      	str	r2, [r1, #0]
   817c8:	e7ec      	b.n	817a4 <UnityPrintNumberHex+0xf0>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   817ca:	f240 0510 	movw	r5, #16
   817ce:	f2c2 0507 	movt	r5, #8199	; 0x2007
   817d2:	f645 4791 	movw	r7, #23697	; 0x5c91
   817d6:	46b9      	mov	r9, r7
   817d8:	f2c0 0908 	movt	r9, #8
   817dc:	f04f 080a 	mov.w	r8, #10
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
    {
        nibble = (number >> (--nibbles << 2)) & 0x0000000F;
   817e0:	f104 34ff 	add.w	r4, r4, #4294967295
   817e4:	b2e4      	uxtb	r4, r4
   817e6:	ea4f 0084 	mov.w	r0, r4, lsl #2
   817ea:	fa26 f200 	lsr.w	r2, r6, r0
   817ee:	f002 030f 	and.w	r3, r2, #15
        if (nibble <= 9)
   817f2:	2b09      	cmp	r3, #9
   817f4:	d82d      	bhi.n	81852 <UnityPrintNumberHex+0x19e>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
   817f6:	6828      	ldr	r0, [r5, #0]
   817f8:	6881      	ldr	r1, [r0, #8]
   817fa:	688a      	ldr	r2, [r1, #8]
   817fc:	f102 32ff 	add.w	r2, r2, #4294967295
   81800:	608a      	str	r2, [r1, #8]
   81802:	2a00      	cmp	r2, #0
   81804:	da19      	bge.n	8183a <UnityPrintNumberHex+0x186>
   81806:	6882      	ldr	r2, [r0, #8]
   81808:	6891      	ldr	r1, [r2, #8]
   8180a:	6997      	ldr	r7, [r2, #24]
   8180c:	42b9      	cmp	r1, r7
   8180e:	db10      	blt.n	81832 <UnityPrintNumberHex+0x17e>
   81810:	6810      	ldr	r0, [r2, #0]
   81812:	f103 0330 	add.w	r3, r3, #48	; 0x30
   81816:	7003      	strb	r3, [r0, #0]
   81818:	6828      	ldr	r0, [r5, #0]
   8181a:	6882      	ldr	r2, [r0, #8]
   8181c:	6813      	ldr	r3, [r2, #0]
   8181e:	7819      	ldrb	r1, [r3, #0]
   81820:	290a      	cmp	r1, #10
   81822:	d003      	beq.n	8182c <UnityPrintNumberHex+0x178>
   81824:	f103 0301 	add.w	r3, r3, #1
   81828:	6013      	str	r3, [r2, #0]
   8182a:	e03f      	b.n	818ac <UnityPrintNumberHex+0x1f8>
   8182c:	4641      	mov	r1, r8
   8182e:	47c8      	blx	r9
   81830:	e03c      	b.n	818ac <UnityPrintNumberHex+0x1f8>
   81832:	f103 0130 	add.w	r1, r3, #48	; 0x30
   81836:	47c8      	blx	r9
   81838:	e038      	b.n	818ac <UnityPrintNumberHex+0x1f8>
   8183a:	6880      	ldr	r0, [r0, #8]
   8183c:	6801      	ldr	r1, [r0, #0]
   8183e:	f103 0330 	add.w	r3, r3, #48	; 0x30
   81842:	700b      	strb	r3, [r1, #0]
   81844:	682b      	ldr	r3, [r5, #0]
   81846:	6898      	ldr	r0, [r3, #8]
   81848:	6802      	ldr	r2, [r0, #0]
   8184a:	f102 0201 	add.w	r2, r2, #1
   8184e:	6002      	str	r2, [r0, #0]
   81850:	e02c      	b.n	818ac <UnityPrintNumberHex+0x1f8>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   81852:	6828      	ldr	r0, [r5, #0]
   81854:	6881      	ldr	r1, [r0, #8]
   81856:	688a      	ldr	r2, [r1, #8]
   81858:	f102 32ff 	add.w	r2, r2, #4294967295
   8185c:	608a      	str	r2, [r1, #8]
   8185e:	2a00      	cmp	r2, #0
   81860:	da19      	bge.n	81896 <UnityPrintNumberHex+0x1e2>
   81862:	6882      	ldr	r2, [r0, #8]
   81864:	6891      	ldr	r1, [r2, #8]
   81866:	6997      	ldr	r7, [r2, #24]
   81868:	42b9      	cmp	r1, r7
   8186a:	db10      	blt.n	8188e <UnityPrintNumberHex+0x1da>
   8186c:	6810      	ldr	r0, [r2, #0]
   8186e:	f103 0337 	add.w	r3, r3, #55	; 0x37
   81872:	7003      	strb	r3, [r0, #0]
   81874:	6828      	ldr	r0, [r5, #0]
   81876:	6882      	ldr	r2, [r0, #8]
   81878:	6813      	ldr	r3, [r2, #0]
   8187a:	7819      	ldrb	r1, [r3, #0]
   8187c:	290a      	cmp	r1, #10
   8187e:	d003      	beq.n	81888 <UnityPrintNumberHex+0x1d4>
   81880:	f103 0301 	add.w	r3, r3, #1
   81884:	6013      	str	r3, [r2, #0]
   81886:	e011      	b.n	818ac <UnityPrintNumberHex+0x1f8>
   81888:	4641      	mov	r1, r8
   8188a:	47c8      	blx	r9
   8188c:	e00e      	b.n	818ac <UnityPrintNumberHex+0x1f8>
   8188e:	f103 0137 	add.w	r1, r3, #55	; 0x37
   81892:	47c8      	blx	r9
   81894:	e00a      	b.n	818ac <UnityPrintNumberHex+0x1f8>
   81896:	6880      	ldr	r0, [r0, #8]
   81898:	6801      	ldr	r1, [r0, #0]
   8189a:	f103 0337 	add.w	r3, r3, #55	; 0x37
   8189e:	700b      	strb	r3, [r1, #0]
   818a0:	682b      	ldr	r3, [r5, #0]
   818a2:	6898      	ldr	r0, [r3, #8]
   818a4:	6802      	ldr	r2, [r0, #0]
   818a6:	f102 0201 	add.w	r2, r2, #1
   818aa:	6002      	str	r2, [r0, #0]
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
   818ac:	2c00      	cmp	r4, #0
   818ae:	d197      	bne.n	817e0 <UnityPrintNumberHex+0x12c>
   818b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000818b4 <UnityPrintNumberByStyle>:
    }
}

//-----------------------------------------------
void UnityPrintNumberByStyle(const _U_SINT number, const UNITY_DISPLAY_STYLE_T style)
{
   818b4:	b508      	push	{r3, lr}
    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
   818b6:	f011 0f10 	tst.w	r1, #16
   818ba:	d005      	beq.n	818c8 <UnityPrintNumberByStyle+0x14>
    {
        UnityPrintNumber(number);
   818bc:	f241 33b5 	movw	r3, #5045	; 0x13b5
   818c0:	f2c0 0308 	movt	r3, #8
   818c4:	4798      	blx	r3
   818c6:	bd08      	pop	{r3, pc}
    }
    else if ((style & UNITY_DISPLAY_RANGE_UINT) == UNITY_DISPLAY_RANGE_UINT)
   818c8:	f011 0f20 	tst.w	r1, #32
   818cc:	d010      	beq.n	818f0 <UnityPrintNumberByStyle+0x3c>
    {
        UnityPrintNumberUnsigned(  (_U_UINT)number  &  UnitySizeMask[((_U_UINT)style & (_U_UINT)0x0F) - 1]  );
   818ce:	f001 020f 	and.w	r2, r1, #15
   818d2:	f102 31ff 	add.w	r1, r2, #4294967295
   818d6:	f647 239c 	movw	r3, #31388	; 0x7a9c
   818da:	f2c0 0308 	movt	r3, #8
   818de:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   818e2:	4010      	ands	r0, r2
   818e4:	f241 51d1 	movw	r1, #5585	; 0x15d1
   818e8:	f2c0 0108 	movt	r1, #8
   818ec:	4788      	blx	r1
   818ee:	bd08      	pop	{r3, pc}
    }
    else
    {
        UnityPrintNumberHex((_U_UINT)number, (char)((style & 0x000F) << 1));
   818f0:	f001 010f 	and.w	r1, r1, #15
   818f4:	ea4f 0141 	mov.w	r1, r1, lsl #1
   818f8:	f241 63b5 	movw	r3, #5813	; 0x16b5
   818fc:	f2c0 0308 	movt	r3, #8
   81900:	4798      	blx	r3
   81902:	bd08      	pop	{r3, pc}

00081904 <UnityPrint>:
//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
{
   81904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const char* pch = string;

    if (pch != NULL)
   81906:	4604      	mov	r4, r0
   81908:	2800      	cmp	r0, #0
   8190a:	f000 813c 	beq.w	81b86 <UnityPrint+0x282>
    {
        while (*pch)
   8190e:	7803      	ldrb	r3, [r0, #0]
   81910:	2b00      	cmp	r3, #0
   81912:	f000 8138 	beq.w	81b86 <UnityPrint+0x282>

//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
   81916:	f104 0401 	add.w	r4, r4, #1
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   8191a:	f240 0510 	movw	r5, #16
   8191e:	f2c2 0507 	movt	r5, #8199	; 0x2007
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   81922:	f241 66b5 	movw	r6, #5813	; 0x16b5
   81926:	f2c0 0608 	movt	r6, #8
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   8192a:	f645 4791 	movw	r7, #23697	; 0x5c91
   8192e:	f2c0 0708 	movt	r7, #8
    if (pch != NULL)
    {
        while (*pch)
        {
            // printable characters plus CR & LF are printed
            if ((*pch <= 126) && (*pch >= 32))
   81932:	f1a3 0220 	sub.w	r2, r3, #32
   81936:	b2d0      	uxtb	r0, r2
   81938:	285e      	cmp	r0, #94	; 0x5e
   8193a:	d82e      	bhi.n	8199a <UnityPrint+0x96>
            {
                UNITY_OUTPUT_CHAR(*pch);
   8193c:	6828      	ldr	r0, [r5, #0]
   8193e:	6882      	ldr	r2, [r0, #8]
   81940:	6893      	ldr	r3, [r2, #8]
   81942:	f103 31ff 	add.w	r1, r3, #4294967295
   81946:	6091      	str	r1, [r2, #8]
   81948:	2900      	cmp	r1, #0
   8194a:	da1a      	bge.n	81982 <UnityPrint+0x7e>
   8194c:	6882      	ldr	r2, [r0, #8]
   8194e:	6891      	ldr	r1, [r2, #8]
   81950:	6993      	ldr	r3, [r2, #24]
   81952:	4299      	cmp	r1, r3
   81954:	db11      	blt.n	8197a <UnityPrint+0x76>
   81956:	6810      	ldr	r0, [r2, #0]
   81958:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   8195c:	7002      	strb	r2, [r0, #0]
   8195e:	6828      	ldr	r0, [r5, #0]
   81960:	6882      	ldr	r2, [r0, #8]
   81962:	6813      	ldr	r3, [r2, #0]
   81964:	7819      	ldrb	r1, [r3, #0]
   81966:	290a      	cmp	r1, #10
   81968:	d003      	beq.n	81972 <UnityPrint+0x6e>
   8196a:	f103 0301 	add.w	r3, r3, #1
   8196e:	6013      	str	r3, [r2, #0]
   81970:	e104      	b.n	81b7c <UnityPrint+0x278>
   81972:	f04f 010a 	mov.w	r1, #10
   81976:	47b8      	blx	r7
   81978:	e100      	b.n	81b7c <UnityPrint+0x278>
   8197a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   8197e:	47b8      	blx	r7
   81980:	e0fc      	b.n	81b7c <UnityPrint+0x278>
   81982:	6880      	ldr	r0, [r0, #8]
   81984:	6803      	ldr	r3, [r0, #0]
   81986:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   8198a:	701a      	strb	r2, [r3, #0]
   8198c:	6829      	ldr	r1, [r5, #0]
   8198e:	6888      	ldr	r0, [r1, #8]
   81990:	6803      	ldr	r3, [r0, #0]
   81992:	f103 0301 	add.w	r3, r3, #1
   81996:	6003      	str	r3, [r0, #0]
   81998:	e0f0      	b.n	81b7c <UnityPrint+0x278>
            }
            //write escaped carriage returns
            else if (*pch == 13)
   8199a:	2b0d      	cmp	r3, #13
   8199c:	d15c      	bne.n	81a58 <UnityPrint+0x154>
            {
                UNITY_OUTPUT_CHAR('\\');
   8199e:	6828      	ldr	r0, [r5, #0]
   819a0:	6882      	ldr	r2, [r0, #8]
   819a2:	6893      	ldr	r3, [r2, #8]
   819a4:	f103 31ff 	add.w	r1, r3, #4294967295
   819a8:	6091      	str	r1, [r2, #8]
   819aa:	2900      	cmp	r1, #0
   819ac:	da1a      	bge.n	819e4 <UnityPrint+0xe0>
   819ae:	6882      	ldr	r2, [r0, #8]
   819b0:	6891      	ldr	r1, [r2, #8]
   819b2:	6993      	ldr	r3, [r2, #24]
   819b4:	4299      	cmp	r1, r3
   819b6:	db11      	blt.n	819dc <UnityPrint+0xd8>
   819b8:	6810      	ldr	r0, [r2, #0]
   819ba:	f04f 025c 	mov.w	r2, #92	; 0x5c
   819be:	7002      	strb	r2, [r0, #0]
   819c0:	6828      	ldr	r0, [r5, #0]
   819c2:	6882      	ldr	r2, [r0, #8]
   819c4:	6813      	ldr	r3, [r2, #0]
   819c6:	7819      	ldrb	r1, [r3, #0]
   819c8:	290a      	cmp	r1, #10
   819ca:	d003      	beq.n	819d4 <UnityPrint+0xd0>
   819cc:	f103 0301 	add.w	r3, r3, #1
   819d0:	6013      	str	r3, [r2, #0]
   819d2:	e012      	b.n	819fa <UnityPrint+0xf6>
   819d4:	f04f 010a 	mov.w	r1, #10
   819d8:	47b8      	blx	r7
   819da:	e00e      	b.n	819fa <UnityPrint+0xf6>
   819dc:	f04f 015c 	mov.w	r1, #92	; 0x5c
   819e0:	47b8      	blx	r7
   819e2:	e00a      	b.n	819fa <UnityPrint+0xf6>
   819e4:	6880      	ldr	r0, [r0, #8]
   819e6:	6803      	ldr	r3, [r0, #0]
   819e8:	f04f 025c 	mov.w	r2, #92	; 0x5c
   819ec:	701a      	strb	r2, [r3, #0]
   819ee:	6829      	ldr	r1, [r5, #0]
   819f0:	6888      	ldr	r0, [r1, #8]
   819f2:	6803      	ldr	r3, [r0, #0]
   819f4:	f103 0301 	add.w	r3, r3, #1
   819f8:	6003      	str	r3, [r0, #0]
                UNITY_OUTPUT_CHAR('r');
   819fa:	6828      	ldr	r0, [r5, #0]
   819fc:	6882      	ldr	r2, [r0, #8]
   819fe:	6893      	ldr	r3, [r2, #8]
   81a00:	f103 31ff 	add.w	r1, r3, #4294967295
   81a04:	6091      	str	r1, [r2, #8]
   81a06:	2900      	cmp	r1, #0
   81a08:	da1a      	bge.n	81a40 <UnityPrint+0x13c>
   81a0a:	6882      	ldr	r2, [r0, #8]
   81a0c:	6891      	ldr	r1, [r2, #8]
   81a0e:	6993      	ldr	r3, [r2, #24]
   81a10:	4299      	cmp	r1, r3
   81a12:	db11      	blt.n	81a38 <UnityPrint+0x134>
   81a14:	6810      	ldr	r0, [r2, #0]
   81a16:	f04f 0272 	mov.w	r2, #114	; 0x72
   81a1a:	7002      	strb	r2, [r0, #0]
   81a1c:	6828      	ldr	r0, [r5, #0]
   81a1e:	6882      	ldr	r2, [r0, #8]
   81a20:	6813      	ldr	r3, [r2, #0]
   81a22:	7819      	ldrb	r1, [r3, #0]
   81a24:	290a      	cmp	r1, #10
   81a26:	d003      	beq.n	81a30 <UnityPrint+0x12c>
   81a28:	f103 0301 	add.w	r3, r3, #1
   81a2c:	6013      	str	r3, [r2, #0]
   81a2e:	e0a5      	b.n	81b7c <UnityPrint+0x278>
   81a30:	f04f 010a 	mov.w	r1, #10
   81a34:	47b8      	blx	r7
   81a36:	e0a1      	b.n	81b7c <UnityPrint+0x278>
   81a38:	f04f 0172 	mov.w	r1, #114	; 0x72
   81a3c:	47b8      	blx	r7
   81a3e:	e09d      	b.n	81b7c <UnityPrint+0x278>
   81a40:	6880      	ldr	r0, [r0, #8]
   81a42:	6803      	ldr	r3, [r0, #0]
   81a44:	f04f 0272 	mov.w	r2, #114	; 0x72
   81a48:	701a      	strb	r2, [r3, #0]
   81a4a:	6829      	ldr	r1, [r5, #0]
   81a4c:	6888      	ldr	r0, [r1, #8]
   81a4e:	6803      	ldr	r3, [r0, #0]
   81a50:	f103 0301 	add.w	r3, r3, #1
   81a54:	6003      	str	r3, [r0, #0]
   81a56:	e091      	b.n	81b7c <UnityPrint+0x278>
            }
            //write escaped line feeds
            else if (*pch == 10)
   81a58:	2b0a      	cmp	r3, #10
   81a5a:	d15c      	bne.n	81b16 <UnityPrint+0x212>
            {
                UNITY_OUTPUT_CHAR('\\');
   81a5c:	6828      	ldr	r0, [r5, #0]
   81a5e:	6882      	ldr	r2, [r0, #8]
   81a60:	6893      	ldr	r3, [r2, #8]
   81a62:	f103 31ff 	add.w	r1, r3, #4294967295
   81a66:	6091      	str	r1, [r2, #8]
   81a68:	2900      	cmp	r1, #0
   81a6a:	da1a      	bge.n	81aa2 <UnityPrint+0x19e>
   81a6c:	6882      	ldr	r2, [r0, #8]
   81a6e:	6891      	ldr	r1, [r2, #8]
   81a70:	6993      	ldr	r3, [r2, #24]
   81a72:	4299      	cmp	r1, r3
   81a74:	db11      	blt.n	81a9a <UnityPrint+0x196>
   81a76:	6810      	ldr	r0, [r2, #0]
   81a78:	f04f 025c 	mov.w	r2, #92	; 0x5c
   81a7c:	7002      	strb	r2, [r0, #0]
   81a7e:	6828      	ldr	r0, [r5, #0]
   81a80:	6882      	ldr	r2, [r0, #8]
   81a82:	6813      	ldr	r3, [r2, #0]
   81a84:	7819      	ldrb	r1, [r3, #0]
   81a86:	290a      	cmp	r1, #10
   81a88:	d003      	beq.n	81a92 <UnityPrint+0x18e>
   81a8a:	f103 0301 	add.w	r3, r3, #1
   81a8e:	6013      	str	r3, [r2, #0]
   81a90:	e012      	b.n	81ab8 <UnityPrint+0x1b4>
   81a92:	f04f 010a 	mov.w	r1, #10
   81a96:	47b8      	blx	r7
   81a98:	e00e      	b.n	81ab8 <UnityPrint+0x1b4>
   81a9a:	f04f 015c 	mov.w	r1, #92	; 0x5c
   81a9e:	47b8      	blx	r7
   81aa0:	e00a      	b.n	81ab8 <UnityPrint+0x1b4>
   81aa2:	6880      	ldr	r0, [r0, #8]
   81aa4:	6803      	ldr	r3, [r0, #0]
   81aa6:	f04f 025c 	mov.w	r2, #92	; 0x5c
   81aaa:	701a      	strb	r2, [r3, #0]
   81aac:	6829      	ldr	r1, [r5, #0]
   81aae:	6888      	ldr	r0, [r1, #8]
   81ab0:	6803      	ldr	r3, [r0, #0]
   81ab2:	f103 0301 	add.w	r3, r3, #1
   81ab6:	6003      	str	r3, [r0, #0]
                UNITY_OUTPUT_CHAR('n');
   81ab8:	6828      	ldr	r0, [r5, #0]
   81aba:	6882      	ldr	r2, [r0, #8]
   81abc:	6893      	ldr	r3, [r2, #8]
   81abe:	f103 31ff 	add.w	r1, r3, #4294967295
   81ac2:	6091      	str	r1, [r2, #8]
   81ac4:	2900      	cmp	r1, #0
   81ac6:	da1a      	bge.n	81afe <UnityPrint+0x1fa>
   81ac8:	6882      	ldr	r2, [r0, #8]
   81aca:	6891      	ldr	r1, [r2, #8]
   81acc:	6993      	ldr	r3, [r2, #24]
   81ace:	4299      	cmp	r1, r3
   81ad0:	db11      	blt.n	81af6 <UnityPrint+0x1f2>
   81ad2:	6810      	ldr	r0, [r2, #0]
   81ad4:	f04f 026e 	mov.w	r2, #110	; 0x6e
   81ad8:	7002      	strb	r2, [r0, #0]
   81ada:	6828      	ldr	r0, [r5, #0]
   81adc:	6882      	ldr	r2, [r0, #8]
   81ade:	6813      	ldr	r3, [r2, #0]
   81ae0:	7819      	ldrb	r1, [r3, #0]
   81ae2:	290a      	cmp	r1, #10
   81ae4:	d003      	beq.n	81aee <UnityPrint+0x1ea>
   81ae6:	f103 0301 	add.w	r3, r3, #1
   81aea:	6013      	str	r3, [r2, #0]
   81aec:	e046      	b.n	81b7c <UnityPrint+0x278>
   81aee:	f04f 010a 	mov.w	r1, #10
   81af2:	47b8      	blx	r7
   81af4:	e042      	b.n	81b7c <UnityPrint+0x278>
   81af6:	f04f 016e 	mov.w	r1, #110	; 0x6e
   81afa:	47b8      	blx	r7
   81afc:	e03e      	b.n	81b7c <UnityPrint+0x278>
   81afe:	6880      	ldr	r0, [r0, #8]
   81b00:	6803      	ldr	r3, [r0, #0]
   81b02:	f04f 026e 	mov.w	r2, #110	; 0x6e
   81b06:	701a      	strb	r2, [r3, #0]
   81b08:	6829      	ldr	r1, [r5, #0]
   81b0a:	6888      	ldr	r0, [r1, #8]
   81b0c:	6803      	ldr	r3, [r0, #0]
   81b0e:	f103 0301 	add.w	r3, r3, #1
   81b12:	6003      	str	r3, [r0, #0]
   81b14:	e032      	b.n	81b7c <UnityPrint+0x278>
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   81b16:	6828      	ldr	r0, [r5, #0]
   81b18:	6881      	ldr	r1, [r0, #8]
   81b1a:	688b      	ldr	r3, [r1, #8]
   81b1c:	f103 32ff 	add.w	r2, r3, #4294967295
   81b20:	608a      	str	r2, [r1, #8]
   81b22:	2a00      	cmp	r2, #0
   81b24:	da1a      	bge.n	81b5c <UnityPrint+0x258>
   81b26:	6882      	ldr	r2, [r0, #8]
   81b28:	6891      	ldr	r1, [r2, #8]
   81b2a:	6993      	ldr	r3, [r2, #24]
   81b2c:	4299      	cmp	r1, r3
   81b2e:	db11      	blt.n	81b54 <UnityPrint+0x250>
   81b30:	6810      	ldr	r0, [r2, #0]
   81b32:	f04f 025c 	mov.w	r2, #92	; 0x5c
   81b36:	7002      	strb	r2, [r0, #0]
   81b38:	6828      	ldr	r0, [r5, #0]
   81b3a:	6882      	ldr	r2, [r0, #8]
   81b3c:	6813      	ldr	r3, [r2, #0]
   81b3e:	7819      	ldrb	r1, [r3, #0]
   81b40:	290a      	cmp	r1, #10
   81b42:	d003      	beq.n	81b4c <UnityPrint+0x248>
   81b44:	f103 0301 	add.w	r3, r3, #1
   81b48:	6013      	str	r3, [r2, #0]
   81b4a:	e012      	b.n	81b72 <UnityPrint+0x26e>
   81b4c:	f04f 010a 	mov.w	r1, #10
   81b50:	47b8      	blx	r7
   81b52:	e00e      	b.n	81b72 <UnityPrint+0x26e>
   81b54:	f04f 015c 	mov.w	r1, #92	; 0x5c
   81b58:	47b8      	blx	r7
   81b5a:	e00a      	b.n	81b72 <UnityPrint+0x26e>
   81b5c:	6880      	ldr	r0, [r0, #8]
   81b5e:	6801      	ldr	r1, [r0, #0]
   81b60:	f04f 035c 	mov.w	r3, #92	; 0x5c
   81b64:	700b      	strb	r3, [r1, #0]
   81b66:	682a      	ldr	r2, [r5, #0]
   81b68:	6890      	ldr	r0, [r2, #8]
   81b6a:	6801      	ldr	r1, [r0, #0]
   81b6c:	f101 0101 	add.w	r1, r1, #1
   81b70:	6001      	str	r1, [r0, #0]
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   81b72:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   81b76:	f04f 0102 	mov.w	r1, #2
   81b7a:	47b0      	blx	r6
{
    const char* pch = string;

    if (pch != NULL)
    {
        while (*pch)
   81b7c:	f814 3b01 	ldrb.w	r3, [r4], #1
   81b80:	2b00      	cmp	r3, #0
   81b82:	f47f aed6 	bne.w	81932 <UnityPrint+0x2e>
   81b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00081b88 <UnityTestResultsBegin>:
    UnityPrint(UnityStrOk);
}

//-----------------------------------------------
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
   81b88:	b538      	push	{r3, r4, r5, lr}
   81b8a:	460d      	mov	r5, r1
    UnityPrint(file);
   81b8c:	f641 1305 	movw	r3, #6405	; 0x1905
   81b90:	f2c0 0308 	movt	r3, #8
   81b94:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   81b96:	f240 0010 	movw	r0, #16
   81b9a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81b9e:	6800      	ldr	r0, [r0, #0]
   81ba0:	6884      	ldr	r4, [r0, #8]
   81ba2:	68a2      	ldr	r2, [r4, #8]
   81ba4:	f102 31ff 	add.w	r1, r2, #4294967295
   81ba8:	60a1      	str	r1, [r4, #8]
   81baa:	2900      	cmp	r1, #0
   81bac:	da26      	bge.n	81bfc <UnityTestResultsBegin+0x74>
   81bae:	6882      	ldr	r2, [r0, #8]
   81bb0:	6893      	ldr	r3, [r2, #8]
   81bb2:	6991      	ldr	r1, [r2, #24]
   81bb4:	428b      	cmp	r3, r1
   81bb6:	db19      	blt.n	81bec <UnityTestResultsBegin+0x64>
   81bb8:	6810      	ldr	r0, [r2, #0]
   81bba:	f04f 023a 	mov.w	r2, #58	; 0x3a
   81bbe:	7002      	strb	r2, [r0, #0]
   81bc0:	f240 0110 	movw	r1, #16
   81bc4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81bc8:	6808      	ldr	r0, [r1, #0]
   81bca:	6882      	ldr	r2, [r0, #8]
   81bcc:	6813      	ldr	r3, [r2, #0]
   81bce:	7819      	ldrb	r1, [r3, #0]
   81bd0:	290a      	cmp	r1, #10
   81bd2:	d003      	beq.n	81bdc <UnityTestResultsBegin+0x54>
   81bd4:	f103 0301 	add.w	r3, r3, #1
   81bd8:	6013      	str	r3, [r2, #0]
   81bda:	e01e      	b.n	81c1a <UnityTestResultsBegin+0x92>
   81bdc:	f04f 010a 	mov.w	r1, #10
   81be0:	f645 4391 	movw	r3, #23697	; 0x5c91
   81be4:	f2c0 0308 	movt	r3, #8
   81be8:	4798      	blx	r3
   81bea:	e016      	b.n	81c1a <UnityTestResultsBegin+0x92>
   81bec:	f04f 013a 	mov.w	r1, #58	; 0x3a
   81bf0:	f645 4391 	movw	r3, #23697	; 0x5c91
   81bf4:	f2c0 0308 	movt	r3, #8
   81bf8:	4798      	blx	r3
   81bfa:	e00e      	b.n	81c1a <UnityTestResultsBegin+0x92>
   81bfc:	6883      	ldr	r3, [r0, #8]
   81bfe:	6818      	ldr	r0, [r3, #0]
   81c00:	f04f 023a 	mov.w	r2, #58	; 0x3a
   81c04:	7002      	strb	r2, [r0, #0]
   81c06:	f240 0110 	movw	r1, #16
   81c0a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81c0e:	680b      	ldr	r3, [r1, #0]
   81c10:	6898      	ldr	r0, [r3, #8]
   81c12:	6802      	ldr	r2, [r0, #0]
   81c14:	f102 0201 	add.w	r2, r2, #1
   81c18:	6002      	str	r2, [r0, #0]
    UnityPrintNumber((_U_SINT)line);
   81c1a:	4628      	mov	r0, r5
   81c1c:	f241 32b5 	movw	r2, #5045	; 0x13b5
   81c20:	f2c0 0208 	movt	r2, #8
   81c24:	4790      	blx	r2
    UNITY_OUTPUT_CHAR(':');
   81c26:	f240 0010 	movw	r0, #16
   81c2a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81c2e:	6800      	ldr	r0, [r0, #0]
   81c30:	6881      	ldr	r1, [r0, #8]
   81c32:	688b      	ldr	r3, [r1, #8]
   81c34:	f103 32ff 	add.w	r2, r3, #4294967295
   81c38:	608a      	str	r2, [r1, #8]
   81c3a:	2a00      	cmp	r2, #0
   81c3c:	da26      	bge.n	81c8c <UnityTestResultsBegin+0x104>
   81c3e:	6882      	ldr	r2, [r0, #8]
   81c40:	6891      	ldr	r1, [r2, #8]
   81c42:	6993      	ldr	r3, [r2, #24]
   81c44:	4299      	cmp	r1, r3
   81c46:	db19      	blt.n	81c7c <UnityTestResultsBegin+0xf4>
   81c48:	6810      	ldr	r0, [r2, #0]
   81c4a:	f04f 023a 	mov.w	r2, #58	; 0x3a
   81c4e:	7002      	strb	r2, [r0, #0]
   81c50:	f240 0110 	movw	r1, #16
   81c54:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81c58:	6808      	ldr	r0, [r1, #0]
   81c5a:	6882      	ldr	r2, [r0, #8]
   81c5c:	6813      	ldr	r3, [r2, #0]
   81c5e:	7819      	ldrb	r1, [r3, #0]
   81c60:	290a      	cmp	r1, #10
   81c62:	d003      	beq.n	81c6c <UnityTestResultsBegin+0xe4>
   81c64:	f103 0301 	add.w	r3, r3, #1
   81c68:	6013      	str	r3, [r2, #0]
   81c6a:	e01e      	b.n	81caa <UnityTestResultsBegin+0x122>
   81c6c:	f04f 010a 	mov.w	r1, #10
   81c70:	f645 4391 	movw	r3, #23697	; 0x5c91
   81c74:	f2c0 0308 	movt	r3, #8
   81c78:	4798      	blx	r3
   81c7a:	e016      	b.n	81caa <UnityTestResultsBegin+0x122>
   81c7c:	f04f 013a 	mov.w	r1, #58	; 0x3a
   81c80:	f645 4391 	movw	r3, #23697	; 0x5c91
   81c84:	f2c0 0308 	movt	r3, #8
   81c88:	4798      	blx	r3
   81c8a:	e00e      	b.n	81caa <UnityTestResultsBegin+0x122>
   81c8c:	6880      	ldr	r0, [r0, #8]
   81c8e:	6801      	ldr	r1, [r0, #0]
   81c90:	f04f 033a 	mov.w	r3, #58	; 0x3a
   81c94:	700b      	strb	r3, [r1, #0]
   81c96:	f240 0210 	movw	r2, #16
   81c9a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81c9e:	6810      	ldr	r0, [r2, #0]
   81ca0:	6881      	ldr	r1, [r0, #8]
   81ca2:	680b      	ldr	r3, [r1, #0]
   81ca4:	f103 0301 	add.w	r3, r3, #1
   81ca8:	600b      	str	r3, [r1, #0]
    UnityPrint(Unity.CurrentTestName);
   81caa:	f648 40b0 	movw	r0, #36016	; 0x8cb0
   81cae:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81cb2:	6840      	ldr	r0, [r0, #4]
   81cb4:	f641 1205 	movw	r2, #6405	; 0x1905
   81cb8:	f2c0 0208 	movt	r2, #8
   81cbc:	4790      	blx	r2
    UNITY_OUTPUT_CHAR(':');
   81cbe:	f240 0110 	movw	r1, #16
   81cc2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81cc6:	6808      	ldr	r0, [r1, #0]
   81cc8:	6882      	ldr	r2, [r0, #8]
   81cca:	6893      	ldr	r3, [r2, #8]
   81ccc:	f103 31ff 	add.w	r1, r3, #4294967295
   81cd0:	6091      	str	r1, [r2, #8]
   81cd2:	2900      	cmp	r1, #0
   81cd4:	da26      	bge.n	81d24 <UnityTestResultsBegin+0x19c>
   81cd6:	6882      	ldr	r2, [r0, #8]
   81cd8:	6891      	ldr	r1, [r2, #8]
   81cda:	6993      	ldr	r3, [r2, #24]
   81cdc:	4299      	cmp	r1, r3
   81cde:	db19      	blt.n	81d14 <UnityTestResultsBegin+0x18c>
   81ce0:	6810      	ldr	r0, [r2, #0]
   81ce2:	f04f 023a 	mov.w	r2, #58	; 0x3a
   81ce6:	7002      	strb	r2, [r0, #0]
   81ce8:	f240 0110 	movw	r1, #16
   81cec:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81cf0:	6808      	ldr	r0, [r1, #0]
   81cf2:	6882      	ldr	r2, [r0, #8]
   81cf4:	6813      	ldr	r3, [r2, #0]
   81cf6:	7819      	ldrb	r1, [r3, #0]
   81cf8:	290a      	cmp	r1, #10
   81cfa:	d003      	beq.n	81d04 <UnityTestResultsBegin+0x17c>
   81cfc:	f103 0301 	add.w	r3, r3, #1
   81d00:	6013      	str	r3, [r2, #0]
   81d02:	bd38      	pop	{r3, r4, r5, pc}
   81d04:	f04f 010a 	mov.w	r1, #10
   81d08:	f645 4391 	movw	r3, #23697	; 0x5c91
   81d0c:	f2c0 0308 	movt	r3, #8
   81d10:	4798      	blx	r3
   81d12:	bd38      	pop	{r3, r4, r5, pc}
   81d14:	f04f 013a 	mov.w	r1, #58	; 0x3a
   81d18:	f645 4391 	movw	r3, #23697	; 0x5c91
   81d1c:	f2c0 0308 	movt	r3, #8
   81d20:	4798      	blx	r3
   81d22:	bd38      	pop	{r3, r4, r5, pc}
   81d24:	6880      	ldr	r0, [r0, #8]
   81d26:	6803      	ldr	r3, [r0, #0]
   81d28:	f04f 023a 	mov.w	r2, #58	; 0x3a
   81d2c:	701a      	strb	r2, [r3, #0]
   81d2e:	f240 0110 	movw	r1, #16
   81d32:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81d36:	6808      	ldr	r0, [r1, #0]
   81d38:	6883      	ldr	r3, [r0, #8]
   81d3a:	681a      	ldr	r2, [r3, #0]
   81d3c:	f102 0201 	add.w	r2, r2, #1
   81d40:	601a      	str	r2, [r3, #0]
   81d42:	bd38      	pop	{r3, r4, r5, pc}

00081d44 <UnityTestResultsFailBegin>:
}

//-----------------------------------------------
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
   81d44:	b508      	push	{r3, lr}
   81d46:	4601      	mov	r1, r0
    UnityTestResultsBegin(Unity.TestFile, line);
   81d48:	f648 43b0 	movw	r3, #36016	; 0x8cb0
   81d4c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81d50:	6818      	ldr	r0, [r3, #0]
   81d52:	f641 3289 	movw	r2, #7049	; 0x1b89
   81d56:	f2c0 0208 	movt	r2, #8
   81d5a:	4790      	blx	r2
    UnityPrint(UnityStrFail);
   81d5c:	f647 20c8 	movw	r0, #31432	; 0x7ac8
   81d60:	f2c0 0008 	movt	r0, #8
   81d64:	f641 1105 	movw	r1, #6405	; 0x1905
   81d68:	f2c0 0108 	movt	r1, #8
   81d6c:	4788      	blx	r1
    UNITY_OUTPUT_CHAR(':');
   81d6e:	f240 0010 	movw	r0, #16
   81d72:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81d76:	6800      	ldr	r0, [r0, #0]
   81d78:	6882      	ldr	r2, [r0, #8]
   81d7a:	6893      	ldr	r3, [r2, #8]
   81d7c:	f103 31ff 	add.w	r1, r3, #4294967295
   81d80:	6091      	str	r1, [r2, #8]
   81d82:	2900      	cmp	r1, #0
   81d84:	da26      	bge.n	81dd4 <UnityTestResultsFailBegin+0x90>
   81d86:	6882      	ldr	r2, [r0, #8]
   81d88:	6891      	ldr	r1, [r2, #8]
   81d8a:	6993      	ldr	r3, [r2, #24]
   81d8c:	4299      	cmp	r1, r3
   81d8e:	db19      	blt.n	81dc4 <UnityTestResultsFailBegin+0x80>
   81d90:	6810      	ldr	r0, [r2, #0]
   81d92:	f04f 023a 	mov.w	r2, #58	; 0x3a
   81d96:	7002      	strb	r2, [r0, #0]
   81d98:	f240 0110 	movw	r1, #16
   81d9c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81da0:	6808      	ldr	r0, [r1, #0]
   81da2:	6882      	ldr	r2, [r0, #8]
   81da4:	6813      	ldr	r3, [r2, #0]
   81da6:	7819      	ldrb	r1, [r3, #0]
   81da8:	290a      	cmp	r1, #10
   81daa:	d003      	beq.n	81db4 <UnityTestResultsFailBegin+0x70>
   81dac:	f103 0301 	add.w	r3, r3, #1
   81db0:	6013      	str	r3, [r2, #0]
   81db2:	bd08      	pop	{r3, pc}
   81db4:	f04f 010a 	mov.w	r1, #10
   81db8:	f645 4391 	movw	r3, #23697	; 0x5c91
   81dbc:	f2c0 0308 	movt	r3, #8
   81dc0:	4798      	blx	r3
   81dc2:	bd08      	pop	{r3, pc}
   81dc4:	f04f 013a 	mov.w	r1, #58	; 0x3a
   81dc8:	f645 4391 	movw	r3, #23697	; 0x5c91
   81dcc:	f2c0 0308 	movt	r3, #8
   81dd0:	4798      	blx	r3
   81dd2:	bd08      	pop	{r3, pc}
   81dd4:	6880      	ldr	r0, [r0, #8]
   81dd6:	6803      	ldr	r3, [r0, #0]
   81dd8:	f04f 023a 	mov.w	r2, #58	; 0x3a
   81ddc:	701a      	strb	r2, [r3, #0]
   81dde:	f240 0110 	movw	r1, #16
   81de2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81de6:	6808      	ldr	r0, [r1, #0]
   81de8:	6883      	ldr	r3, [r0, #8]
   81dea:	681a      	ldr	r2, [r3, #0]
   81dec:	f102 0201 	add.w	r2, r2, #1
   81df0:	601a      	str	r2, [r3, #0]
   81df2:	bd08      	pop	{r3, pc}

00081df4 <UnityAddMsgIfSpecified>:
    UNITY_PRINT_EOL;
}

//-----------------------------------------------
static void UnityAddMsgIfSpecified(const char* msg)
{
   81df4:	b538      	push	{r3, r4, r5, lr}
    if (msg)
   81df6:	4605      	mov	r5, r0
   81df8:	b150      	cbz	r0, 81e10 <UnityAddMsgIfSpecified+0x1c>
    {
        UnityPrint(UnityStrSpacer);
   81dfa:	f647 20bc 	movw	r0, #31420	; 0x7abc
   81dfe:	f2c0 0008 	movt	r0, #8
   81e02:	f641 1405 	movw	r4, #6405	; 0x1905
   81e06:	f2c0 0408 	movt	r4, #8
   81e0a:	47a0      	blx	r4
        UnityPrint(msg);
   81e0c:	4628      	mov	r0, r5
   81e0e:	47a0      	blx	r4
   81e10:	bd38      	pop	{r3, r4, r5, pc}
   81e12:	bf00      	nop

00081e14 <UnityPrintFail>:
#endif

//-----------------------------------------------

void UnityPrintFail(void)
{
   81e14:	b508      	push	{r3, lr}
    UnityPrint(UnityStrFail);
   81e16:	f647 20c8 	movw	r0, #31432	; 0x7ac8
   81e1a:	f2c0 0008 	movt	r0, #8
   81e1e:	f641 1305 	movw	r3, #6405	; 0x1905
   81e22:	f2c0 0308 	movt	r3, #8
   81e26:	4798      	blx	r3
   81e28:	bd08      	pop	{r3, pc}
   81e2a:	bf00      	nop

00081e2c <UnityPrintOk>:
}

void UnityPrintOk(void)
{
   81e2c:	b508      	push	{r3, lr}
    UnityPrint(UnityStrOk);
   81e2e:	f647 20b8 	movw	r0, #31416	; 0x7ab8
   81e32:	f2c0 0008 	movt	r0, #8
   81e36:	f641 1305 	movw	r3, #6405	; 0x1905
   81e3a:	f2c0 0308 	movt	r3, #8
   81e3e:	4798      	blx	r3
   81e40:	bd08      	pop	{r3, pc}
   81e42:	bf00      	nop

00081e44 <UnityConcludeTest>:
    UNITY_OUTPUT_CHAR(':');
}

//-----------------------------------------------
void UnityConcludeTest(void)
{
   81e44:	b508      	push	{r3, lr}
    if (Unity.CurrentTestIgnored)
   81e46:	f648 43b0 	movw	r3, #36016	; 0x8cb0
   81e4a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81e4e:	69d8      	ldr	r0, [r3, #28]
   81e50:	b140      	cbz	r0, 81e64 <UnityConcludeTest+0x20>
    {
        Unity.TestIgnores++;
   81e52:	f648 40b0 	movw	r0, #36016	; 0x8cb0
   81e56:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81e5a:	6941      	ldr	r1, [r0, #20]
   81e5c:	f101 0101 	add.w	r1, r1, #1
   81e60:	6141      	str	r1, [r0, #20]
   81e62:	e022      	b.n	81eaa <UnityConcludeTest+0x66>
    }
    else if (!Unity.CurrentTestFailed)
   81e64:	f648 41b0 	movw	r1, #36016	; 0x8cb0
   81e68:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81e6c:	698a      	ldr	r2, [r1, #24]
   81e6e:	b9a2      	cbnz	r2, 81e9a <UnityConcludeTest+0x56>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
   81e70:	f648 41b0 	movw	r1, #36016	; 0x8cb0
   81e74:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81e78:	6808      	ldr	r0, [r1, #0]
   81e7a:	6889      	ldr	r1, [r1, #8]
   81e7c:	f641 3289 	movw	r2, #7049	; 0x1b89
   81e80:	f2c0 0208 	movt	r2, #8
   81e84:	4790      	blx	r2
        UnityPrint(UnityStrPass);
   81e86:	f647 3014 	movw	r0, #31508	; 0x7b14
   81e8a:	f2c0 0008 	movt	r0, #8
   81e8e:	f641 1305 	movw	r3, #6405	; 0x1905
   81e92:	f2c0 0308 	movt	r3, #8
   81e96:	4798      	blx	r3
   81e98:	e007      	b.n	81eaa <UnityConcludeTest+0x66>
    }
    else
    {
        Unity.TestFailures++;
   81e9a:	f648 43b0 	movw	r3, #36016	; 0x8cb0
   81e9e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81ea2:	6918      	ldr	r0, [r3, #16]
   81ea4:	f100 0001 	add.w	r0, r0, #1
   81ea8:	6118      	str	r0, [r3, #16]
    }

    Unity.CurrentTestFailed = 0;
   81eaa:	f648 43b0 	movw	r3, #36016	; 0x8cb0
   81eae:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81eb2:	f04f 0200 	mov.w	r2, #0
   81eb6:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   81eb8:	61da      	str	r2, [r3, #28]
    UNITY_PRINT_EOL;
   81eba:	f240 0010 	movw	r0, #16
   81ebe:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81ec2:	6800      	ldr	r0, [r0, #0]
   81ec4:	6881      	ldr	r1, [r0, #8]
   81ec6:	688b      	ldr	r3, [r1, #8]
   81ec8:	f103 32ff 	add.w	r2, r3, #4294967295
   81ecc:	608a      	str	r2, [r1, #8]
   81ece:	2a00      	cmp	r2, #0
   81ed0:	da26      	bge.n	81f20 <UnityConcludeTest+0xdc>
   81ed2:	6882      	ldr	r2, [r0, #8]
   81ed4:	6891      	ldr	r1, [r2, #8]
   81ed6:	6993      	ldr	r3, [r2, #24]
   81ed8:	4299      	cmp	r1, r3
   81eda:	db19      	blt.n	81f10 <UnityConcludeTest+0xcc>
   81edc:	6810      	ldr	r0, [r2, #0]
   81ede:	f04f 020a 	mov.w	r2, #10
   81ee2:	7002      	strb	r2, [r0, #0]
   81ee4:	f240 0110 	movw	r1, #16
   81ee8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81eec:	6808      	ldr	r0, [r1, #0]
   81eee:	6882      	ldr	r2, [r0, #8]
   81ef0:	6813      	ldr	r3, [r2, #0]
   81ef2:	7819      	ldrb	r1, [r3, #0]
   81ef4:	290a      	cmp	r1, #10
   81ef6:	d003      	beq.n	81f00 <UnityConcludeTest+0xbc>
   81ef8:	f103 0301 	add.w	r3, r3, #1
   81efc:	6013      	str	r3, [r2, #0]
   81efe:	bd08      	pop	{r3, pc}
   81f00:	f04f 010a 	mov.w	r1, #10
   81f04:	f645 4391 	movw	r3, #23697	; 0x5c91
   81f08:	f2c0 0308 	movt	r3, #8
   81f0c:	4798      	blx	r3
   81f0e:	bd08      	pop	{r3, pc}
   81f10:	f04f 010a 	mov.w	r1, #10
   81f14:	f645 4391 	movw	r3, #23697	; 0x5c91
   81f18:	f2c0 0308 	movt	r3, #8
   81f1c:	4798      	blx	r3
   81f1e:	bd08      	pop	{r3, pc}
   81f20:	6880      	ldr	r0, [r0, #8]
   81f22:	6801      	ldr	r1, [r0, #0]
   81f24:	f04f 030a 	mov.w	r3, #10
   81f28:	700b      	strb	r3, [r1, #0]
   81f2a:	f240 0210 	movw	r2, #16
   81f2e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81f32:	6810      	ldr	r0, [r2, #0]
   81f34:	6881      	ldr	r1, [r0, #8]
   81f36:	680b      	ldr	r3, [r1, #0]
   81f38:	f103 0301 	add.w	r3, r3, #1
   81f3c:	600b      	str	r3, [r1, #0]
   81f3e:	bd08      	pop	{r3, pc}

00081f40 <UnityAssertEqualNumber>:
void UnityAssertEqualNumber(const _U_SINT expected,
                            const _U_SINT actual,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber,
                            const UNITY_DISPLAY_STYLE_T style)
{
   81f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81f44:	4606      	mov	r6, r0
   81f46:	460d      	mov	r5, r1
   81f48:	4690      	mov	r8, r2
   81f4a:	f89d 7020 	ldrb.w	r7, [sp, #32]
    UNITY_SKIP_EXECUTION;
   81f4e:	f648 44b0 	movw	r4, #36016	; 0x8cb0
   81f52:	f2c2 0407 	movt	r4, #8199	; 0x2007
   81f56:	69a4      	ldr	r4, [r4, #24]
   81f58:	bb14      	cbnz	r4, 81fa0 <UnityAssertEqualNumber+0x60>
   81f5a:	f648 42b0 	movw	r2, #36016	; 0x8cb0
   81f5e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81f62:	69d4      	ldr	r4, [r2, #28]
   81f64:	b9e4      	cbnz	r4, 81fa0 <UnityAssertEqualNumber+0x60>

    if (expected != actual)
   81f66:	4288      	cmp	r0, r1
   81f68:	d01a      	beq.n	81fa0 <UnityAssertEqualNumber+0x60>
    {
        UnityTestResultsFailBegin(lineNumber);
   81f6a:	4618      	mov	r0, r3
   81f6c:	4b0d      	ldr	r3, [pc, #52]	; (81fa4 <UnityAssertEqualNumber+0x64>)
   81f6e:	4798      	blx	r3
        UnityPrint(UnityStrExpected);
   81f70:	480d      	ldr	r0, [pc, #52]	; (81fa8 <UnityAssertEqualNumber+0x68>)
   81f72:	f8df 904c 	ldr.w	r9, [pc, #76]	; 81fc0 <UnityAssertEqualNumber+0x80>
   81f76:	47c8      	blx	r9
        UnityPrintNumberByStyle(expected, style);
   81f78:	4630      	mov	r0, r6
   81f7a:	4639      	mov	r1, r7
   81f7c:	4e0b      	ldr	r6, [pc, #44]	; (81fac <UnityAssertEqualNumber+0x6c>)
   81f7e:	47b0      	blx	r6
        UnityPrint(UnityStrWas);
   81f80:	480b      	ldr	r0, [pc, #44]	; (81fb0 <UnityAssertEqualNumber+0x70>)
   81f82:	47c8      	blx	r9
        UnityPrintNumberByStyle(actual, style);
   81f84:	4628      	mov	r0, r5
   81f86:	4639      	mov	r1, r7
   81f88:	47b0      	blx	r6
        UnityAddMsgIfSpecified(msg);
   81f8a:	4640      	mov	r0, r8
   81f8c:	4909      	ldr	r1, [pc, #36]	; (81fb4 <UnityAssertEqualNumber+0x74>)
   81f8e:	4788      	blx	r1
        UNITY_FAIL_AND_BAIL;
   81f90:	4809      	ldr	r0, [pc, #36]	; (81fb8 <UnityAssertEqualNumber+0x78>)
   81f92:	f04f 0101 	mov.w	r1, #1
   81f96:	6181      	str	r1, [r0, #24]
   81f98:	f100 0020 	add.w	r0, r0, #32
   81f9c:	4d07      	ldr	r5, [pc, #28]	; (81fbc <UnityAssertEqualNumber+0x7c>)
   81f9e:	47a8      	blx	r5
   81fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81fa4:	00081d45 	.word	0x00081d45
   81fa8:	00087ad0 	.word	0x00087ad0
   81fac:	000818b5 	.word	0x000818b5
   81fb0:	00087ac0 	.word	0x00087ac0
   81fb4:	00081df5 	.word	0x00081df5
   81fb8:	20078cb0 	.word	0x20078cb0
   81fbc:	00085245 	.word	0x00085245
   81fc0:	00081905 	.word	0x00081905

00081fc4 <setUp>:

//-----------------------------------------------
#if defined(UNITY_WEAK_ATTRIBUTE)
    void setUp(void);
    void tearDown(void);
    UNITY_WEAK_ATTRIBUTE void setUp(void) { }
   81fc4:	4770      	bx	lr
   81fc6:	bf00      	nop

00081fc8 <tearDown>:
    UNITY_WEAK_ATTRIBUTE void tearDown(void) { }
   81fc8:	4770      	bx	lr
   81fca:	bf00      	nop

00081fcc <UnityDefaultTestRun>:
    void setUp(void);
    void tearDown(void);
#endif
//-----------------------------------------------
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
   81fcc:	b500      	push	{lr}
   81fce:	b083      	sub	sp, #12
   81fd0:	9001      	str	r0, [sp, #4]
    Unity.CurrentTestName = FuncName;
   81fd2:	f648 40b0 	movw	r0, #36016	; 0x8cb0
   81fd6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81fda:	6041      	str	r1, [r0, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
   81fdc:	6082      	str	r2, [r0, #8]
    Unity.NumberOfTests++;
   81fde:	68c3      	ldr	r3, [r0, #12]
   81fe0:	f103 0301 	add.w	r3, r3, #1
   81fe4:	60c3      	str	r3, [r0, #12]
    if (TEST_PROTECT())
   81fe6:	f100 0020 	add.w	r0, r0, #32
   81fea:	f245 2139 	movw	r1, #21049	; 0x5239
   81fee:	f2c0 0108 	movt	r1, #8
   81ff2:	4788      	blx	r1
   81ff4:	b930      	cbnz	r0, 82004 <UnityDefaultTestRun+0x38>
    {
        setUp();
   81ff6:	f641 70c5 	movw	r0, #8133	; 0x1fc5
   81ffa:	f2c0 0008 	movt	r0, #8
   81ffe:	4780      	blx	r0
        Func();
   82000:	9a01      	ldr	r2, [sp, #4]
   82002:	4790      	blx	r2
    }
    if (TEST_PROTECT() && !(Unity.CurrentTestIgnored))
   82004:	480c      	ldr	r0, [pc, #48]	; (82038 <UnityDefaultTestRun+0x6c>)
   82006:	f245 2339 	movw	r3, #21049	; 0x5239
   8200a:	f2c0 0308 	movt	r3, #8
   8200e:	4798      	blx	r3
   82010:	b950      	cbnz	r0, 82028 <UnityDefaultTestRun+0x5c>
   82012:	f648 41b0 	movw	r1, #36016	; 0x8cb0
   82016:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8201a:	69c8      	ldr	r0, [r1, #28]
   8201c:	b920      	cbnz	r0, 82028 <UnityDefaultTestRun+0x5c>
    {
        tearDown();
   8201e:	f641 72c9 	movw	r2, #8137	; 0x1fc9
   82022:	f2c0 0208 	movt	r2, #8
   82026:	4790      	blx	r2
    }
    UnityConcludeTest();
   82028:	f641 6345 	movw	r3, #7749	; 0x1e45
   8202c:	f2c0 0308 	movt	r3, #8
   82030:	4798      	blx	r3
}
   82032:	b003      	add	sp, #12
   82034:	bd00      	pop	{pc}
   82036:	bf00      	nop
   82038:	20078cd0 	.word	0x20078cd0

0008203c <UnityBegin>:

//-----------------------------------------------
void UnityBegin(const char* filename)
{
    Unity.TestFile = filename;
   8203c:	f648 43b0 	movw	r3, #36016	; 0x8cb0
   82040:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82044:	6018      	str	r0, [r3, #0]
    Unity.CurrentTestName = NULL;
   82046:	f04f 0200 	mov.w	r2, #0
   8204a:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
   8204c:	609a      	str	r2, [r3, #8]
    Unity.NumberOfTests = 0;
   8204e:	60da      	str	r2, [r3, #12]
    Unity.TestFailures = 0;
   82050:	611a      	str	r2, [r3, #16]
    Unity.TestIgnores = 0;
   82052:	615a      	str	r2, [r3, #20]
    Unity.CurrentTestFailed = 0;
   82054:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   82056:	61da      	str	r2, [r3, #28]
   82058:	4770      	bx	lr
   8205a:	bf00      	nop

0008205c <UnityEnd>:
    UNITY_OUTPUT_START();
}

//-----------------------------------------------
int UnityEnd(void)
{
   8205c:	b570      	push	{r4, r5, r6, lr}
    UNITY_PRINT_EOL;
   8205e:	f240 0310 	movw	r3, #16
   82062:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82066:	6818      	ldr	r0, [r3, #0]
   82068:	6882      	ldr	r2, [r0, #8]
   8206a:	6891      	ldr	r1, [r2, #8]
   8206c:	f101 34ff 	add.w	r4, r1, #4294967295
   82070:	6094      	str	r4, [r2, #8]
   82072:	2c00      	cmp	r4, #0
   82074:	da26      	bge.n	820c4 <UnityEnd+0x68>
   82076:	6882      	ldr	r2, [r0, #8]
   82078:	6895      	ldr	r5, [r2, #8]
   8207a:	6996      	ldr	r6, [r2, #24]
   8207c:	42b5      	cmp	r5, r6
   8207e:	db19      	blt.n	820b4 <UnityEnd+0x58>
   82080:	6810      	ldr	r0, [r2, #0]
   82082:	f04f 020a 	mov.w	r2, #10
   82086:	7002      	strb	r2, [r0, #0]
   82088:	f240 0110 	movw	r1, #16
   8208c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82090:	6808      	ldr	r0, [r1, #0]
   82092:	6882      	ldr	r2, [r0, #8]
   82094:	6814      	ldr	r4, [r2, #0]
   82096:	7825      	ldrb	r5, [r4, #0]
   82098:	2d0a      	cmp	r5, #10
   8209a:	d003      	beq.n	820a4 <UnityEnd+0x48>
   8209c:	f104 0401 	add.w	r4, r4, #1
   820a0:	6014      	str	r4, [r2, #0]
   820a2:	e01e      	b.n	820e2 <UnityEnd+0x86>
   820a4:	f04f 010a 	mov.w	r1, #10
   820a8:	f645 4691 	movw	r6, #23697	; 0x5c91
   820ac:	f2c0 0608 	movt	r6, #8
   820b0:	47b0      	blx	r6
   820b2:	e016      	b.n	820e2 <UnityEnd+0x86>
   820b4:	f04f 010a 	mov.w	r1, #10
   820b8:	f645 4391 	movw	r3, #23697	; 0x5c91
   820bc:	f2c0 0308 	movt	r3, #8
   820c0:	4798      	blx	r3
   820c2:	e00e      	b.n	820e2 <UnityEnd+0x86>
   820c4:	6880      	ldr	r0, [r0, #8]
   820c6:	6805      	ldr	r5, [r0, #0]
   820c8:	f04f 060a 	mov.w	r6, #10
   820cc:	702e      	strb	r6, [r5, #0]
   820ce:	f240 0310 	movw	r3, #16
   820d2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   820d6:	681a      	ldr	r2, [r3, #0]
   820d8:	6891      	ldr	r1, [r2, #8]
   820da:	680c      	ldr	r4, [r1, #0]
   820dc:	f104 0401 	add.w	r4, r4, #1
   820e0:	600c      	str	r4, [r1, #0]
    UnityPrint(UnityStrBreaker);
   820e2:	f647 20dc 	movw	r0, #31452	; 0x7adc
   820e6:	f2c0 0008 	movt	r0, #8
   820ea:	f641 1305 	movw	r3, #6405	; 0x1905
   820ee:	f2c0 0308 	movt	r3, #8
   820f2:	4798      	blx	r3
    UNITY_PRINT_EOL;
   820f4:	f240 0010 	movw	r0, #16
   820f8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   820fc:	6800      	ldr	r0, [r0, #0]
   820fe:	6882      	ldr	r2, [r0, #8]
   82100:	6891      	ldr	r1, [r2, #8]
   82102:	f101 34ff 	add.w	r4, r1, #4294967295
   82106:	6094      	str	r4, [r2, #8]
   82108:	2c00      	cmp	r4, #0
   8210a:	da26      	bge.n	8215a <UnityEnd+0xfe>
   8210c:	6882      	ldr	r2, [r0, #8]
   8210e:	6895      	ldr	r5, [r2, #8]
   82110:	6996      	ldr	r6, [r2, #24]
   82112:	42b5      	cmp	r5, r6
   82114:	db19      	blt.n	8214a <UnityEnd+0xee>
   82116:	6810      	ldr	r0, [r2, #0]
   82118:	f04f 020a 	mov.w	r2, #10
   8211c:	7002      	strb	r2, [r0, #0]
   8211e:	f240 0110 	movw	r1, #16
   82122:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82126:	6808      	ldr	r0, [r1, #0]
   82128:	6882      	ldr	r2, [r0, #8]
   8212a:	6814      	ldr	r4, [r2, #0]
   8212c:	7825      	ldrb	r5, [r4, #0]
   8212e:	2d0a      	cmp	r5, #10
   82130:	d003      	beq.n	8213a <UnityEnd+0xde>
   82132:	f104 0401 	add.w	r4, r4, #1
   82136:	6014      	str	r4, [r2, #0]
   82138:	e01e      	b.n	82178 <UnityEnd+0x11c>
   8213a:	f04f 010a 	mov.w	r1, #10
   8213e:	f645 4691 	movw	r6, #23697	; 0x5c91
   82142:	f2c0 0608 	movt	r6, #8
   82146:	47b0      	blx	r6
   82148:	e016      	b.n	82178 <UnityEnd+0x11c>
   8214a:	f04f 010a 	mov.w	r1, #10
   8214e:	f645 4391 	movw	r3, #23697	; 0x5c91
   82152:	f2c0 0308 	movt	r3, #8
   82156:	4798      	blx	r3
   82158:	e00e      	b.n	82178 <UnityEnd+0x11c>
   8215a:	6885      	ldr	r5, [r0, #8]
   8215c:	682e      	ldr	r6, [r5, #0]
   8215e:	f04f 030a 	mov.w	r3, #10
   82162:	7033      	strb	r3, [r6, #0]
   82164:	f240 0010 	movw	r0, #16
   82168:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8216c:	6802      	ldr	r2, [r0, #0]
   8216e:	6891      	ldr	r1, [r2, #8]
   82170:	680c      	ldr	r4, [r1, #0]
   82172:	f104 0401 	add.w	r4, r4, #1
   82176:	600c      	str	r4, [r1, #0]
    UnityPrintNumber((_U_SINT)(Unity.NumberOfTests));
   82178:	f648 46b0 	movw	r6, #36016	; 0x8cb0
   8217c:	f2c2 0607 	movt	r6, #8199	; 0x2007
   82180:	68f0      	ldr	r0, [r6, #12]
   82182:	f241 35b5 	movw	r5, #5045	; 0x13b5
   82186:	f2c0 0508 	movt	r5, #8
   8218a:	47a8      	blx	r5
    UnityPrint(UnityStrResultsTests);
   8218c:	f647 300c 	movw	r0, #31500	; 0x7b0c
   82190:	f2c0 0008 	movt	r0, #8
   82194:	f641 1405 	movw	r4, #6405	; 0x1905
   82198:	f2c0 0408 	movt	r4, #8
   8219c:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestFailures));
   8219e:	6930      	ldr	r0, [r6, #16]
   821a0:	47a8      	blx	r5
    UnityPrint(UnityStrResultsFailures);
   821a2:	f647 20f4 	movw	r0, #31476	; 0x7af4
   821a6:	f2c0 0008 	movt	r0, #8
   821aa:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestIgnores));
   821ac:	6970      	ldr	r0, [r6, #20]
   821ae:	47a8      	blx	r5
    UnityPrint(UnityStrResultsIgnored);
   821b0:	f647 3000 	movw	r0, #31488	; 0x7b00
   821b4:	f2c0 0008 	movt	r0, #8
   821b8:	47a0      	blx	r4
    UNITY_PRINT_EOL;
   821ba:	f240 0310 	movw	r3, #16
   821be:	f2c2 0307 	movt	r3, #8199	; 0x2007
   821c2:	6818      	ldr	r0, [r3, #0]
   821c4:	6882      	ldr	r2, [r0, #8]
   821c6:	6891      	ldr	r1, [r2, #8]
   821c8:	f101 33ff 	add.w	r3, r1, #4294967295
   821cc:	6093      	str	r3, [r2, #8]
   821ce:	2b00      	cmp	r3, #0
   821d0:	da26      	bge.n	82220 <UnityEnd+0x1c4>
   821d2:	6882      	ldr	r2, [r0, #8]
   821d4:	6891      	ldr	r1, [r2, #8]
   821d6:	6993      	ldr	r3, [r2, #24]
   821d8:	4299      	cmp	r1, r3
   821da:	db19      	blt.n	82210 <UnityEnd+0x1b4>
   821dc:	6810      	ldr	r0, [r2, #0]
   821de:	f04f 020a 	mov.w	r2, #10
   821e2:	7002      	strb	r2, [r0, #0]
   821e4:	f240 0110 	movw	r1, #16
   821e8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   821ec:	6808      	ldr	r0, [r1, #0]
   821ee:	6882      	ldr	r2, [r0, #8]
   821f0:	6813      	ldr	r3, [r2, #0]
   821f2:	7819      	ldrb	r1, [r3, #0]
   821f4:	290a      	cmp	r1, #10
   821f6:	d003      	beq.n	82200 <UnityEnd+0x1a4>
   821f8:	f103 0301 	add.w	r3, r3, #1
   821fc:	6013      	str	r3, [r2, #0]
   821fe:	e01e      	b.n	8223e <UnityEnd+0x1e2>
   82200:	f04f 010a 	mov.w	r1, #10
   82204:	f645 4391 	movw	r3, #23697	; 0x5c91
   82208:	f2c0 0308 	movt	r3, #8
   8220c:	4798      	blx	r3
   8220e:	e016      	b.n	8223e <UnityEnd+0x1e2>
   82210:	f04f 010a 	mov.w	r1, #10
   82214:	f645 4391 	movw	r3, #23697	; 0x5c91
   82218:	f2c0 0308 	movt	r3, #8
   8221c:	4798      	blx	r3
   8221e:	e00e      	b.n	8223e <UnityEnd+0x1e2>
   82220:	6880      	ldr	r0, [r0, #8]
   82222:	6801      	ldr	r1, [r0, #0]
   82224:	f04f 020a 	mov.w	r2, #10
   82228:	700a      	strb	r2, [r1, #0]
   8222a:	f240 0310 	movw	r3, #16
   8222e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82232:	6818      	ldr	r0, [r3, #0]
   82234:	6881      	ldr	r1, [r0, #8]
   82236:	680a      	ldr	r2, [r1, #0]
   82238:	f102 0201 	add.w	r2, r2, #1
   8223c:	600a      	str	r2, [r1, #0]
    if (Unity.TestFailures == 0U)
   8223e:	f648 40b0 	movw	r0, #36016	; 0x8cb0
   82242:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82246:	6902      	ldr	r2, [r0, #16]
   82248:	b92a      	cbnz	r2, 82256 <UnityEnd+0x1fa>
    {
        UnityPrintOk();
   8224a:	f641 632d 	movw	r3, #7725	; 0x1e2d
   8224e:	f2c0 0308 	movt	r3, #8
   82252:	4798      	blx	r3
   82254:	e004      	b.n	82260 <UnityEnd+0x204>
    }
    else
    {
        UnityPrintFail();
   82256:	f641 6115 	movw	r1, #7701	; 0x1e15
   8225a:	f2c0 0108 	movt	r1, #8
   8225e:	4788      	blx	r1
    }
    UNITY_PRINT_EOL;
   82260:	f240 0010 	movw	r0, #16
   82264:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82268:	6800      	ldr	r0, [r0, #0]
   8226a:	6882      	ldr	r2, [r0, #8]
   8226c:	6891      	ldr	r1, [r2, #8]
   8226e:	f101 33ff 	add.w	r3, r1, #4294967295
   82272:	6093      	str	r3, [r2, #8]
   82274:	2b00      	cmp	r3, #0
   82276:	da26      	bge.n	822c6 <UnityEnd+0x26a>
   82278:	6882      	ldr	r2, [r0, #8]
   8227a:	6891      	ldr	r1, [r2, #8]
   8227c:	6993      	ldr	r3, [r2, #24]
   8227e:	4299      	cmp	r1, r3
   82280:	db19      	blt.n	822b6 <UnityEnd+0x25a>
   82282:	6810      	ldr	r0, [r2, #0]
   82284:	f04f 020a 	mov.w	r2, #10
   82288:	7002      	strb	r2, [r0, #0]
   8228a:	f240 0110 	movw	r1, #16
   8228e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82292:	6808      	ldr	r0, [r1, #0]
   82294:	6882      	ldr	r2, [r0, #8]
   82296:	6813      	ldr	r3, [r2, #0]
   82298:	7819      	ldrb	r1, [r3, #0]
   8229a:	290a      	cmp	r1, #10
   8229c:	d003      	beq.n	822a6 <UnityEnd+0x24a>
   8229e:	f103 0301 	add.w	r3, r3, #1
   822a2:	6013      	str	r3, [r2, #0]
   822a4:	e01e      	b.n	822e4 <UnityEnd+0x288>
   822a6:	f04f 010a 	mov.w	r1, #10
   822aa:	f645 4391 	movw	r3, #23697	; 0x5c91
   822ae:	f2c0 0308 	movt	r3, #8
   822b2:	4798      	blx	r3
   822b4:	e016      	b.n	822e4 <UnityEnd+0x288>
   822b6:	f04f 010a 	mov.w	r1, #10
   822ba:	f645 4391 	movw	r3, #23697	; 0x5c91
   822be:	f2c0 0308 	movt	r3, #8
   822c2:	4798      	blx	r3
   822c4:	e00e      	b.n	822e4 <UnityEnd+0x288>
   822c6:	6880      	ldr	r0, [r0, #8]
   822c8:	6801      	ldr	r1, [r0, #0]
   822ca:	f04f 020a 	mov.w	r2, #10
   822ce:	700a      	strb	r2, [r1, #0]
   822d0:	f240 0310 	movw	r3, #16
   822d4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   822d8:	6818      	ldr	r0, [r3, #0]
   822da:	6881      	ldr	r1, [r0, #8]
   822dc:	680a      	ldr	r2, [r1, #0]
   822de:	f102 0201 	add.w	r2, r2, #1
   822e2:	600a      	str	r2, [r1, #0]
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
}
   822e4:	f648 40b0 	movw	r0, #36016	; 0x8cb0
   822e8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   822ec:	6900      	ldr	r0, [r0, #16]
   822ee:	bd70      	pop	{r4, r5, r6, pc}

000822f0 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   822f0:	f100 0308 	add.w	r3, r0, #8
   822f4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   822f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   822fa:	8102      	strh	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   822fc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   822fe:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   82300:	f04f 0100 	mov.w	r1, #0
   82304:	6001      	str	r1, [r0, #0]
   82306:	4770      	bx	lr

00082308 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   82308:	f04f 0300 	mov.w	r3, #0
   8230c:	6103      	str	r3, [r0, #16]
   8230e:	4770      	bx	lr

00082310 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   82310:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   82312:	685a      	ldr	r2, [r3, #4]
   82314:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   82316:	6842      	ldr	r2, [r0, #4]
   82318:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8231a:	685a      	ldr	r2, [r3, #4]
   8231c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8231e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   82320:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   82322:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   82324:	6801      	ldr	r1, [r0, #0]
   82326:	f101 0101 	add.w	r1, r1, #1
   8232a:	6001      	str	r1, [r0, #0]
   8232c:	4770      	bx	lr
   8232e:	bf00      	nop

00082330 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   82330:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   82332:	880c      	ldrh	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   82334:	f64f 73ff 	movw	r3, #65535	; 0xffff
   82338:	429c      	cmp	r4, r3
   8233a:	d101      	bne.n	82340 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   8233c:	6903      	ldr	r3, [r0, #16]
   8233e:	e00c      	b.n	8235a <vListInsert+0x2a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   82340:	f100 0308 	add.w	r3, r0, #8
   82344:	68c2      	ldr	r2, [r0, #12]
   82346:	8812      	ldrh	r2, [r2, #0]
   82348:	b292      	uxth	r2, r2
   8234a:	4294      	cmp	r4, r2
   8234c:	d305      	bcc.n	8235a <vListInsert+0x2a>
   8234e:	685b      	ldr	r3, [r3, #4]
   82350:	685a      	ldr	r2, [r3, #4]
   82352:	8812      	ldrh	r2, [r2, #0]
   82354:	b292      	uxth	r2, r2
   82356:	4294      	cmp	r4, r2
   82358:	d2f9      	bcs.n	8234e <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   8235a:	685a      	ldr	r2, [r3, #4]
   8235c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8235e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   82360:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   82362:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   82364:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   82366:	6801      	ldr	r1, [r0, #0]
   82368:	f101 0101 	add.w	r1, r1, #1
   8236c:	6001      	str	r1, [r0, #0]
}
   8236e:	bc10      	pop	{r4}
   82370:	4770      	bx	lr
   82372:	bf00      	nop

00082374 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   82374:	6843      	ldr	r3, [r0, #4]
   82376:	6882      	ldr	r2, [r0, #8]
   82378:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   8237a:	6881      	ldr	r1, [r0, #8]
   8237c:	6843      	ldr	r3, [r0, #4]
   8237e:	604b      	str	r3, [r1, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   82380:	6901      	ldr	r1, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   82382:	684a      	ldr	r2, [r1, #4]
   82384:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   82386:	bf04      	itt	eq
   82388:	6882      	ldreq	r2, [r0, #8]
   8238a:	604a      	streq	r2, [r1, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   8238c:	f04f 0300 	mov.w	r3, #0
   82390:	6103      	str	r3, [r0, #16]
	( pxList->uxNumberOfItems )--;
   82392:	6808      	ldr	r0, [r1, #0]
   82394:	f100 32ff 	add.w	r2, r0, #4294967295
   82398:	600a      	str	r2, [r1, #0]

	return pxList->uxNumberOfItems;
   8239a:	6808      	ldr	r0, [r1, #0]
}
   8239c:	4770      	bx	lr
   8239e:	bf00      	nop

000823a0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   823a0:	4803      	ldr	r0, [pc, #12]	; (823b0 <prvPortStartFirstTask+0x10>)
   823a2:	6800      	ldr	r0, [r0, #0]
   823a4:	6800      	ldr	r0, [r0, #0]
   823a6:	f380 8808 	msr	MSP, r0
   823aa:	b662      	cpsie	i
   823ac:	df00      	svc	0
   823ae:	bf00      	nop
   823b0:	e000ed08 	.word	0xe000ed08

000823b4 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   823b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   823b8:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   823bc:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   823c0:	f04f 0100 	mov.w	r1, #0
   823c4:	f840 1c0c 	str.w	r1, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   823c8:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   823cc:	f1a0 0040 	sub.w	r0, r0, #64	; 0x40
   823d0:	4770      	bx	lr
   823d2:	bf00      	nop

000823d4 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   823d4:	4b06      	ldr	r3, [pc, #24]	; (823f0 <pxCurrentTCBConst2>)
   823d6:	6819      	ldr	r1, [r3, #0]
   823d8:	6808      	ldr	r0, [r1, #0]
   823da:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   823de:	f380 8809 	msr	PSP, r0
   823e2:	f04f 0000 	mov.w	r0, #0
   823e6:	f380 8811 	msr	BASEPRI, r0
   823ea:	f04e 0e0d 	orr.w	lr, lr, #13
   823ee:	4770      	bx	lr

000823f0 <pxCurrentTCBConst2>:
   823f0:	20078b48 	.word	0x20078b48

000823f4 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   823f4:	f64e 5304 	movw	r3, #60676	; 0xed04
   823f8:	f2ce 0300 	movt	r3, #57344	; 0xe000
   823fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   82400:	601a      	str	r2, [r3, #0]
   82402:	4770      	bx	lr

00082404 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   82404:	f3ef 8011 	mrs	r0, BASEPRI
   82408:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   8240c:	f381 8811 	msr	BASEPRI, r1
   82410:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   82412:	f04f 0000 	mov.w	r0, #0
   82416:	bf00      	nop

00082418 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   82418:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   8241a:	f242 4305 	movw	r3, #9221	; 0x2405
   8241e:	f2c0 0308 	movt	r3, #8
   82422:	4798      	blx	r3
	uxCriticalNesting++;
   82424:	f240 0000 	movw	r0, #0
   82428:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8242c:	6802      	ldr	r2, [r0, #0]
   8242e:	f102 0201 	add.w	r2, r2, #1
   82432:	6002      	str	r2, [r0, #0]
   82434:	bd08      	pop	{r3, pc}
   82436:	bf00      	nop

00082438 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   82438:	f380 8811 	msr	BASEPRI, r0
   8243c:	4770      	bx	lr
   8243e:	bf00      	nop

00082440 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   82440:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   82442:	f240 0200 	movw	r2, #0
   82446:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8244a:	6813      	ldr	r3, [r2, #0]
   8244c:	f103 30ff 	add.w	r0, r3, #4294967295
   82450:	6010      	str	r0, [r2, #0]
	if( uxCriticalNesting == 0 )
   82452:	b930      	cbnz	r0, 82462 <vPortExitCritical+0x22>
	{
		portENABLE_INTERRUPTS();
   82454:	f04f 0000 	mov.w	r0, #0
   82458:	f242 4139 	movw	r1, #9273	; 0x2439
   8245c:	f2c0 0108 	movt	r1, #8
   82460:	4788      	blx	r1
   82462:	bd08      	pop	{r3, pc}

00082464 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   82464:	f3ef 8009 	mrs	r0, PSP
   82468:	4b0c      	ldr	r3, [pc, #48]	; (8249c <pxCurrentTCBConst>)
   8246a:	681a      	ldr	r2, [r3, #0]
   8246c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82470:	6010      	str	r0, [r2, #0]
   82472:	e92d 4008 	stmdb	sp!, {r3, lr}
   82476:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   8247a:	f380 8811 	msr	BASEPRI, r0
   8247e:	f001 f89b 	bl	835b8 <vTaskSwitchContext>
   82482:	f04f 0000 	mov.w	r0, #0
   82486:	f380 8811 	msr	BASEPRI, r0
   8248a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8248e:	6819      	ldr	r1, [r3, #0]
   82490:	6808      	ldr	r0, [r1, #0]
   82492:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82496:	f380 8809 	msr	PSP, r0
   8249a:	4770      	bx	lr

0008249c <pxCurrentTCBConst>:
   8249c:	20078b48 	.word	0x20078b48

000824a0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   824a0:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   824a2:	f64e 5304 	movw	r3, #60676	; 0xed04
   824a6:	f2ce 0300 	movt	r3, #57344	; 0xe000
   824aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   824ae:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   824b0:	f242 4005 	movw	r0, #9221	; 0x2405
   824b4:	f2c0 0008 	movt	r0, #8
   824b8:	4780      	blx	r0
	{
		vTaskIncrementTick();
   824ba:	f243 1175 	movw	r1, #12661	; 0x3175
   824be:	f2c0 0108 	movt	r1, #8
   824c2:	4788      	blx	r1
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   824c4:	f04f 0000 	mov.w	r0, #0
   824c8:	f242 4339 	movw	r3, #9273	; 0x2439
   824cc:	f2c0 0308 	movt	r3, #8
   824d0:	4798      	blx	r3
   824d2:	bd08      	pop	{r3, pc}

000824d4 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   824d4:	f24e 0314 	movw	r3, #57364	; 0xe014
   824d8:	f2ce 0300 	movt	r3, #57344	; 0xe000
   824dc:	f644 021f 	movw	r2, #18463	; 0x481f
   824e0:	f2c0 0201 	movt	r2, #1
   824e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   824e6:	f24e 0010 	movw	r0, #57360	; 0xe010
   824ea:	f2ce 0000 	movt	r0, #57344	; 0xe000
   824ee:	f04f 0107 	mov.w	r1, #7
   824f2:	6001      	str	r1, [r0, #0]
   824f4:	4770      	bx	lr
   824f6:	bf00      	nop

000824f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   824f8:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   824fa:	f64e 5320 	movw	r3, #60704	; 0xed20
   824fe:	f2ce 0300 	movt	r3, #57344	; 0xe000
   82502:	681a      	ldr	r2, [r3, #0]
   82504:	f442 0070 	orr.w	r0, r2, #15728640	; 0xf00000
   82508:	6018      	str	r0, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   8250a:	6819      	ldr	r1, [r3, #0]
   8250c:	f041 4470 	orr.w	r4, r1, #4026531840	; 0xf0000000
   82510:	601c      	str	r4, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   82512:	f242 43d5 	movw	r3, #9429	; 0x24d5
   82516:	f2c0 0308 	movt	r3, #8
   8251a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   8251c:	f04f 0400 	mov.w	r4, #0
   82520:	f240 0200 	movw	r2, #0
   82524:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82528:	6014      	str	r4, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   8252a:	f242 30a1 	movw	r0, #9121	; 0x23a1
   8252e:	f2c0 0008 	movt	r0, #8
   82532:	4780      	blx	r0

	/* Should not get here! */
	return 0;
}
   82534:	4620      	mov	r0, r4
   82536:	bd10      	pop	{r4, pc}

00082538 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   82538:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   8253a:	f648 2224 	movw	r2, #35364	; 0x8a24
   8253e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82542:	e000      	b.n	82546 <prvInsertBlockIntoFreeList+0xe>
   82544:	461a      	mov	r2, r3
   82546:	6813      	ldr	r3, [r2, #0]
   82548:	4283      	cmp	r3, r0
   8254a:	d3fb      	bcc.n	82544 <prvInsertBlockIntoFreeList+0xc>
   8254c:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   8254e:	6854      	ldr	r4, [r2, #4]
   82550:	1915      	adds	r5, r2, r4
   82552:	4285      	cmp	r5, r0
   82554:	d103      	bne.n	8255e <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   82556:	6868      	ldr	r0, [r5, #4]
   82558:	1904      	adds	r4, r0, r4
   8255a:	6054      	str	r4, [r2, #4]
   8255c:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   8255e:	6842      	ldr	r2, [r0, #4]
   82560:	1884      	adds	r4, r0, r2
   82562:	42a3      	cmp	r3, r4
   82564:	d10f      	bne.n	82586 <prvInsertBlockIntoFreeList+0x4e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   82566:	f648 2420 	movw	r4, #35360	; 0x8a20
   8256a:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8256e:	6824      	ldr	r4, [r4, #0]
   82570:	429c      	cmp	r4, r3
   82572:	d006      	beq.n	82582 <prvInsertBlockIntoFreeList+0x4a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   82574:	685b      	ldr	r3, [r3, #4]
   82576:	189a      	adds	r2, r3, r2
   82578:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   8257a:	680b      	ldr	r3, [r1, #0]
   8257c:	681a      	ldr	r2, [r3, #0]
   8257e:	6002      	str	r2, [r0, #0]
   82580:	e002      	b.n	82588 <prvInsertBlockIntoFreeList+0x50>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   82582:	6003      	str	r3, [r0, #0]
   82584:	e000      	b.n	82588 <prvInsertBlockIntoFreeList+0x50>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   82586:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   82588:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   8258a:	bf18      	it	ne
   8258c:	6008      	strne	r0, [r1, #0]
	}
}
   8258e:	bc30      	pop	{r4, r5}
   82590:	4770      	bx	lr
   82592:	bf00      	nop

00082594 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   82594:	b538      	push	{r3, r4, r5, lr}
   82596:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   82598:	f243 1339 	movw	r3, #12601	; 0x3139
   8259c:	f2c0 0308 	movt	r3, #8
   825a0:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   825a2:	f648 2020 	movw	r0, #35360	; 0x8a20
   825a6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   825aa:	6801      	ldr	r1, [r0, #0]
   825ac:	bb11      	cbnz	r1, 825f4 <pvPortMalloc+0x60>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   825ae:	f648 2224 	movw	r2, #35364	; 0x8a24
   825b2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   825b6:	f640 2320 	movw	r3, #2592	; 0xa20
   825ba:	f2c2 0307 	movt	r3, #8199	; 0x2007
   825be:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   825c0:	f04f 0100 	mov.w	r1, #0
   825c4:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   825c6:	f503 42ff 	add.w	r2, r3, #32640	; 0x7f80
   825ca:	f102 0070 	add.w	r0, r2, #112	; 0x70
   825ce:	f648 2520 	movw	r5, #35360	; 0x8a20
   825d2:	f2c2 0507 	movt	r5, #8199	; 0x2007
   825d6:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   825d8:	6751      	str	r1, [r2, #116]	; 0x74
	pxEnd->pxNextFreeBlock = NULL;
   825da:	6711      	str	r1, [r2, #112]	; 0x70

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   825dc:	f647 71f0 	movw	r1, #32752	; 0x7ff0
   825e0:	6059      	str	r1, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   825e2:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   825e4:	f240 0304 	movw	r3, #4
   825e8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   825ec:	681a      	ldr	r2, [r3, #0]
   825ee:	f1a2 0210 	sub.w	r2, r2, #16
   825f2:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   825f4:	2c00      	cmp	r4, #0
   825f6:	d03c      	beq.n	82672 <pvPortMalloc+0xde>
		{
			xWantedSize += heapSTRUCT_SIZE;
   825f8:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   825fc:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   82600:	bf1c      	itt	ne
   82602:	f022 0207 	bicne.w	r2, r2, #7
   82606:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   82608:	f102 30ff 	add.w	r0, r2, #4294967295
   8260c:	f647 75fe 	movw	r5, #32766	; 0x7ffe
   82610:	42a8      	cmp	r0, r5
   82612:	d831      	bhi.n	82678 <pvPortMalloc+0xe4>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   82614:	f648 2124 	movw	r1, #35364	; 0x8a24
   82618:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8261c:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   8261e:	e001      	b.n	82624 <pvPortMalloc+0x90>
   82620:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   82622:	4604      	mov	r4, r0
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   82624:	6863      	ldr	r3, [r4, #4]
   82626:	429a      	cmp	r2, r3
   82628:	d902      	bls.n	82630 <pvPortMalloc+0x9c>
   8262a:	6820      	ldr	r0, [r4, #0]
   8262c:	2800      	cmp	r0, #0
   8262e:	d1f7      	bne.n	82620 <pvPortMalloc+0x8c>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   82630:	f648 2520 	movw	r5, #35360	; 0x8a20
   82634:	f2c2 0507 	movt	r5, #8199	; 0x2007
   82638:	682b      	ldr	r3, [r5, #0]
   8263a:	429c      	cmp	r4, r3
   8263c:	d01f      	beq.n	8267e <pvPortMalloc+0xea>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   8263e:	680d      	ldr	r5, [r1, #0]
   82640:	f105 0510 	add.w	r5, r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   82644:	6820      	ldr	r0, [r4, #0]
   82646:	6008      	str	r0, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   82648:	6861      	ldr	r1, [r4, #4]
   8264a:	1a8b      	subs	r3, r1, r2
   8264c:	2b20      	cmp	r3, #32
   8264e:	d907      	bls.n	82660 <pvPortMalloc+0xcc>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   82650:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   82652:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   82654:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   82656:	f242 5239 	movw	r2, #9529	; 0x2539
   8265a:	f2c0 0208 	movt	r2, #8
   8265e:	4790      	blx	r2
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   82660:	f240 0004 	movw	r0, #4
   82664:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82668:	6803      	ldr	r3, [r0, #0]
   8266a:	6861      	ldr	r1, [r4, #4]
   8266c:	1a5a      	subs	r2, r3, r1
   8266e:	6002      	str	r2, [r0, #0]
   82670:	e007      	b.n	82682 <pvPortMalloc+0xee>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   82672:	f04f 0500 	mov.w	r5, #0
   82676:	e004      	b.n	82682 <pvPortMalloc+0xee>
   82678:	f04f 0500 	mov.w	r5, #0
   8267c:	e001      	b.n	82682 <pvPortMalloc+0xee>
   8267e:	f04f 0500 	mov.w	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   82682:	f243 3011 	movw	r0, #13073	; 0x3311
   82686:	f2c0 0008 	movt	r0, #8
   8268a:	4780      	blx	r0
		}
	}
	#endif

	return pvReturn;
}
   8268c:	4628      	mov	r0, r5
   8268e:	bd38      	pop	{r3, r4, r5, pc}

00082690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   82690:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   82692:	4604      	mov	r4, r0
   82694:	b1c8      	cbz	r0, 826ca <vPortFree+0x3a>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   82696:	f243 1339 	movw	r3, #12601	; 0x3139
   8269a:	f2c0 0308 	movt	r3, #8
   8269e:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   826a0:	f240 0004 	movw	r0, #4
   826a4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   826a8:	6801      	ldr	r1, [r0, #0]
   826aa:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   826ae:	188b      	adds	r3, r1, r2
   826b0:	6003      	str	r3, [r0, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   826b2:	f1a4 0010 	sub.w	r0, r4, #16
   826b6:	f242 5139 	movw	r1, #9529	; 0x2539
   826ba:	f2c0 0108 	movt	r1, #8
   826be:	4788      	blx	r1
		}
		xTaskResumeAll();
   826c0:	f243 3011 	movw	r0, #13073	; 0x3311
   826c4:	f2c0 0008 	movt	r0, #8
   826c8:	4780      	blx	r0
   826ca:	bd10      	pop	{r4, pc}

000826cc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   826cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   826ce:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   826d0:	f242 4319 	movw	r3, #9241	; 0x2419
   826d4:	f2c0 0308 	movt	r3, #8
   826d8:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   826da:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   826dc:	2800      	cmp	r0, #0
   826de:	dd1a      	ble.n	82716 <prvUnlockQueue+0x4a>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   826e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   826e2:	b919      	cbnz	r1, 826ec <prvUnlockQueue+0x20>
   826e4:	e017      	b.n	82716 <prvUnlockQueue+0x4a>
   826e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   826e8:	b951      	cbnz	r1, 82700 <prvUnlockQueue+0x34>
   826ea:	e014      	b.n	82716 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   826ec:	f104 0624 	add.w	r6, r4, #36	; 0x24
   826f0:	f243 7549 	movw	r5, #14153	; 0x3749
   826f4:	f2c0 0508 	movt	r5, #8
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   826f8:	f643 07d5 	movw	r7, #14549	; 0x38d5
   826fc:	f2c0 0708 	movt	r7, #8
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   82700:	4630      	mov	r0, r6
   82702:	47a8      	blx	r5
   82704:	b100      	cbz	r0, 82708 <prvUnlockQueue+0x3c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   82706:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   82708:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   8270a:	f102 33ff 	add.w	r3, r2, #4294967295
   8270e:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   82710:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   82712:	2800      	cmp	r0, #0
   82714:	dce7      	bgt.n	826e6 <prvUnlockQueue+0x1a>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   82716:	f04f 32ff 	mov.w	r2, #4294967295
   8271a:	64a2      	str	r2, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   8271c:	f242 4341 	movw	r3, #9281	; 0x2441
   82720:	f2c0 0308 	movt	r3, #8
   82724:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   82726:	f242 4019 	movw	r0, #9241	; 0x2419
   8272a:	f2c0 0008 	movt	r0, #8
   8272e:	4780      	blx	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   82730:	6c61      	ldr	r1, [r4, #68]	; 0x44
   82732:	2900      	cmp	r1, #0
   82734:	dd1a      	ble.n	8276c <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   82736:	6922      	ldr	r2, [r4, #16]
   82738:	b91a      	cbnz	r2, 82742 <prvUnlockQueue+0x76>
   8273a:	e017      	b.n	8276c <prvUnlockQueue+0xa0>
   8273c:	6922      	ldr	r2, [r4, #16]
   8273e:	b952      	cbnz	r2, 82756 <prvUnlockQueue+0x8a>
   82740:	e014      	b.n	8276c <prvUnlockQueue+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   82742:	f104 0610 	add.w	r6, r4, #16
   82746:	f243 7549 	movw	r5, #14153	; 0x3749
   8274a:	f2c0 0508 	movt	r5, #8
				{
					vTaskMissedYield();
   8274e:	f643 07d5 	movw	r7, #14549	; 0x38d5
   82752:	f2c0 0708 	movt	r7, #8
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   82756:	4630      	mov	r0, r6
   82758:	47a8      	blx	r5
   8275a:	b100      	cbz	r0, 8275e <prvUnlockQueue+0x92>
				{
					vTaskMissedYield();
   8275c:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   8275e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   82760:	f103 30ff 	add.w	r0, r3, #4294967295
   82764:	6460      	str	r0, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   82766:	6c61      	ldr	r1, [r4, #68]	; 0x44
   82768:	2900      	cmp	r1, #0
   8276a:	dce7      	bgt.n	8273c <prvUnlockQueue+0x70>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   8276c:	f04f 33ff 	mov.w	r3, #4294967295
   82770:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   82772:	f242 4041 	movw	r0, #9281	; 0x2441
   82776:	f2c0 0008 	movt	r0, #8
   8277a:	4780      	blx	r0
   8277c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8277e:	bf00      	nop

00082780 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   82780:	b538      	push	{r3, r4, r5, lr}
   82782:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   82784:	6805      	ldr	r5, [r0, #0]
   82786:	b175      	cbz	r5, 827a6 <prvCopyDataFromQueue+0x26>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   82788:	6c02      	ldr	r2, [r0, #64]	; 0x40
   8278a:	68c4      	ldr	r4, [r0, #12]
   8278c:	18a4      	adds	r4, r4, r2
   8278e:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   82790:	6840      	ldr	r0, [r0, #4]
   82792:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   82794:	bf28      	it	cs
   82796:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   82798:	4608      	mov	r0, r1
   8279a:	68d9      	ldr	r1, [r3, #12]
   8279c:	f245 2305 	movw	r3, #20997	; 0x5205
   827a0:	f2c0 0308 	movt	r3, #8
   827a4:	4798      	blx	r3
   827a6:	bd38      	pop	{r3, r4, r5, pc}

000827a8 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   827a8:	b510      	push	{r4, lr}
   827aa:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   827ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
   827ae:	b963      	cbnz	r3, 827ca <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   827b0:	6801      	ldr	r1, [r0, #0]
   827b2:	2900      	cmp	r1, #0
   827b4:	d12e      	bne.n	82814 <prvCopyDataToQueue+0x6c>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   827b6:	6840      	ldr	r0, [r0, #4]
   827b8:	f643 13c1 	movw	r3, #14785	; 0x39c1
   827bc:	f2c0 0308 	movt	r3, #8
   827c0:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   827c2:	f04f 0000 	mov.w	r0, #0
   827c6:	6060      	str	r0, [r4, #4]
   827c8:	e024      	b.n	82814 <prvCopyDataToQueue+0x6c>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   827ca:	b982      	cbnz	r2, 827ee <prvCopyDataToQueue+0x46>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   827cc:	6880      	ldr	r0, [r0, #8]
   827ce:	461a      	mov	r2, r3
   827d0:	f245 2305 	movw	r3, #20997	; 0x5205
   827d4:	f2c0 0308 	movt	r3, #8
   827d8:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   827da:	68a2      	ldr	r2, [r4, #8]
   827dc:	6c21      	ldr	r1, [r4, #64]	; 0x40
   827de:	1850      	adds	r0, r2, r1
   827e0:	60a0      	str	r0, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   827e2:	6863      	ldr	r3, [r4, #4]
   827e4:	4298      	cmp	r0, r3
   827e6:	d315      	bcc.n	82814 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   827e8:	6822      	ldr	r2, [r4, #0]
   827ea:	60a2      	str	r2, [r4, #8]
   827ec:	e012      	b.n	82814 <prvCopyDataToQueue+0x6c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   827ee:	68c0      	ldr	r0, [r0, #12]
   827f0:	461a      	mov	r2, r3
   827f2:	f245 2305 	movw	r3, #20997	; 0x5205
   827f6:	f2c0 0308 	movt	r3, #8
   827fa:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   827fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
   827fe:	f1c2 0000 	rsb	r0, r2, #0
   82802:	68e1      	ldr	r1, [r4, #12]
   82804:	180b      	adds	r3, r1, r0
   82806:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   82808:	6822      	ldr	r2, [r4, #0]
   8280a:	4293      	cmp	r3, r2
   8280c:	d202      	bcs.n	82814 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   8280e:	6861      	ldr	r1, [r4, #4]
   82810:	1808      	adds	r0, r1, r0
   82812:	60e0      	str	r0, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   82814:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   82816:	f102 0201 	add.w	r2, r2, #1
   8281a:	63a2      	str	r2, [r4, #56]	; 0x38
   8281c:	bd10      	pop	{r4, pc}
   8281e:	bf00      	nop

00082820 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   82820:	b538      	push	{r3, r4, r5, lr}
   82822:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   82824:	4604      	mov	r4, r0
   82826:	b930      	cbnz	r0, 82836 <xQueueGenericReset+0x16>
   82828:	f242 4405 	movw	r4, #9221	; 0x2405
   8282c:	f2c0 0408 	movt	r4, #8
   82830:	47a0      	blx	r4
   82832:	bf00      	nop
   82834:	e7fd      	b.n	82832 <xQueueGenericReset+0x12>

	taskENTER_CRITICAL();
   82836:	f242 4319 	movw	r3, #9241	; 0x2419
   8283a:	f2c0 0308 	movt	r3, #8
   8283e:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   82840:	6823      	ldr	r3, [r4, #0]
   82842:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   82844:	6c22      	ldr	r2, [r4, #64]	; 0x40
   82846:	fb00 3102 	mla	r1, r0, r2, r3
   8284a:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   8284c:	f04f 0100 	mov.w	r1, #0
   82850:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   82852:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   82854:	f100 30ff 	add.w	r0, r0, #4294967295
   82858:	fb02 3300 	mla	r3, r2, r0, r3
   8285c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   8285e:	f04f 32ff 	mov.w	r2, #4294967295
   82862:	6462      	str	r2, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   82864:	64a2      	str	r2, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   82866:	b985      	cbnz	r5, 8288a <xQueueGenericReset+0x6a>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   82868:	6921      	ldr	r1, [r4, #16]
   8286a:	b1c1      	cbz	r1, 8289e <xQueueGenericReset+0x7e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   8286c:	f104 0010 	add.w	r0, r4, #16
   82870:	f243 7349 	movw	r3, #14153	; 0x3749
   82874:	f2c0 0308 	movt	r3, #8
   82878:	4798      	blx	r3
   8287a:	2801      	cmp	r0, #1
   8287c:	d10f      	bne.n	8289e <xQueueGenericReset+0x7e>
				{
					portYIELD_WITHIN_API();
   8287e:	f242 30f5 	movw	r0, #9205	; 0x23f5
   82882:	f2c0 0008 	movt	r0, #8
   82886:	4780      	blx	r0
   82888:	e009      	b.n	8289e <xQueueGenericReset+0x7e>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   8288a:	f104 0010 	add.w	r0, r4, #16
   8288e:	f242 25f1 	movw	r5, #8945	; 0x22f1
   82892:	f2c0 0508 	movt	r5, #8
   82896:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   82898:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8289c:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   8289e:	f242 4241 	movw	r2, #9281	; 0x2441
   828a2:	f2c0 0208 	movt	r2, #8
   828a6:	4790      	blx	r2

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   828a8:	f04f 0001 	mov.w	r0, #1
   828ac:	bd38      	pop	{r3, r4, r5, pc}
   828ae:	bf00      	nop

000828b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   828b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   828b2:	460d      	mov	r5, r1
   828b4:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   828b6:	4606      	mov	r6, r0
   828b8:	b1e0      	cbz	r0, 828f4 <xQueueGenericCreate+0x44>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   828ba:	f04f 0050 	mov.w	r0, #80	; 0x50
   828be:	f242 5395 	movw	r3, #9621	; 0x2595
   828c2:	f2c0 0308 	movt	r3, #8
   828c6:	4798      	blx	r3
		if( pxNewQueue != NULL )
   828c8:	4604      	mov	r4, r0
   828ca:	b198      	cbz	r0, 828f4 <xQueueGenericCreate+0x44>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   828cc:	fb06 f005 	mul.w	r0, r6, r5

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   828d0:	f100 0001 	add.w	r0, r0, #1
   828d4:	f242 5195 	movw	r1, #9621	; 0x2595
   828d8:	f2c0 0108 	movt	r1, #8
   828dc:	4788      	blx	r1
   828de:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   828e0:	b970      	cbnz	r0, 82900 <xQueueGenericCreate+0x50>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   828e2:	4620      	mov	r0, r4
   828e4:	f242 6291 	movw	r2, #9873	; 0x2691
   828e8:	f2c0 0208 	movt	r2, #8
   828ec:	4790      	blx	r2
   828ee:	e001      	b.n	828f4 <xQueueGenericCreate+0x44>
			}
		}
	}

	configASSERT( xReturn );
   828f0:	bf00      	nop
   828f2:	e7fd      	b.n	828f0 <xQueueGenericCreate+0x40>
   828f4:	f242 4005 	movw	r0, #9221	; 0x2405
   828f8:	f2c0 0008 	movt	r0, #8
   828fc:	4780      	blx	r0
   828fe:	e7f7      	b.n	828f0 <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   82900:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   82902:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   82904:	4620      	mov	r0, r4
   82906:	f04f 0101 	mov.w	r1, #1
   8290a:	f642 0321 	movw	r3, #10273	; 0x2821
   8290e:	f2c0 0308 	movt	r3, #8
   82912:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   82914:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   82918:	4620      	mov	r0, r4
   8291a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0008291c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   8291c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82920:	b085      	sub	sp, #20
   82922:	468a      	mov	sl, r1
   82924:	469b      	mov	fp, r3
   82926:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   8292a:	4604      	mov	r4, r0
   8292c:	b930      	cbnz	r0, 8293c <xQueueGenericSend+0x20>
   8292e:	f242 4405 	movw	r4, #9221	; 0x2405
   82932:	f2c0 0408 	movt	r4, #8
   82936:	47a0      	blx	r4
   82938:	bf00      	nop
   8293a:	e7fd      	b.n	82938 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8293c:	b941      	cbnz	r1, 82950 <xQueueGenericSend+0x34>
   8293e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   82940:	b14b      	cbz	r3, 82956 <xQueueGenericSend+0x3a>
   82942:	f242 4005 	movw	r0, #9221	; 0x2405
   82946:	f2c0 0008 	movt	r0, #8
   8294a:	4780      	blx	r0
   8294c:	bf00      	nop
   8294e:	e7fd      	b.n	8294c <xQueueGenericSend+0x30>
   82950:	f04f 0700 	mov.w	r7, #0
   82954:	e001      	b.n	8295a <xQueueGenericSend+0x3e>
   82956:	f04f 0700 	mov.w	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   8295a:	f242 4619 	movw	r6, #9241	; 0x2419
   8295e:	f2c0 0608 	movt	r6, #8
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   82962:	f243 71f1 	movw	r1, #14321	; 0x37f1
   82966:	f2c0 0108 	movt	r1, #8
   8296a:	9100      	str	r1, [sp, #0]
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   8296c:	f242 4541 	movw	r5, #9281	; 0x2441
   82970:	f2c0 0508 	movt	r5, #8
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   82974:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   82976:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   82978:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8297a:	429a      	cmp	r2, r3
   8297c:	d21f      	bcs.n	829be <xQueueGenericSend+0xa2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   8297e:	4620      	mov	r0, r4
   82980:	4651      	mov	r1, sl
   82982:	465a      	mov	r2, fp
   82984:	f242 73a9 	movw	r3, #10153	; 0x27a9
   82988:	f2c0 0308 	movt	r3, #8
   8298c:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8298e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   82990:	b169      	cbz	r1, 829ae <xQueueGenericSend+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   82992:	f104 0024 	add.w	r0, r4, #36	; 0x24
   82996:	f243 7249 	movw	r2, #14153	; 0x3749
   8299a:	f2c0 0208 	movt	r2, #8
   8299e:	4790      	blx	r2
   829a0:	2801      	cmp	r0, #1
   829a2:	d104      	bne.n	829ae <xQueueGenericSend+0x92>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   829a4:	f242 30f5 	movw	r0, #9205	; 0x23f5
   829a8:	f2c0 0008 	movt	r0, #8
   829ac:	4780      	blx	r0
					}
				}

				taskEXIT_CRITICAL();
   829ae:	f242 4341 	movw	r3, #9281	; 0x2441
   829b2:	f2c0 0308 	movt	r3, #8
   829b6:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   829b8:	f04f 0001 	mov.w	r0, #1
   829bc:	e06a      	b.n	82a94 <xQueueGenericSend+0x178>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   829be:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   829c2:	b938      	cbnz	r0, 829d4 <xQueueGenericSend+0xb8>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   829c4:	f242 4341 	movw	r3, #9281	; 0x2441
   829c8:	f2c0 0308 	movt	r3, #8
   829cc:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   829ce:	f04f 0000 	mov.w	r0, #0
   829d2:	e05f      	b.n	82a94 <xQueueGenericSend+0x178>
				}
				else if( xEntryTimeSet == pdFALSE )
   829d4:	b927      	cbnz	r7, 829e0 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   829d6:	a802      	add	r0, sp, #8
   829d8:	9f00      	ldr	r7, [sp, #0]
   829da:	47b8      	blx	r7
					xEntryTimeSet = pdTRUE;
   829dc:	f04f 0701 	mov.w	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   829e0:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   829e2:	f243 1139 	movw	r1, #12601	; 0x3139
   829e6:	f2c0 0108 	movt	r1, #8
   829ea:	4788      	blx	r1
		prvLockQueue( pxQueue );
   829ec:	47b0      	blx	r6
   829ee:	6c62      	ldr	r2, [r4, #68]	; 0x44
   829f0:	f1b2 3fff 	cmp.w	r2, #4294967295
   829f4:	bf04      	itt	eq
   829f6:	2200      	moveq	r2, #0
   829f8:	6462      	streq	r2, [r4, #68]	; 0x44
   829fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   829fc:	f1b3 3fff 	cmp.w	r3, #4294967295
   82a00:	bf04      	itt	eq
   82a02:	2300      	moveq	r3, #0
   82a04:	64a3      	streq	r3, [r4, #72]	; 0x48
   82a06:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   82a08:	a802      	add	r0, sp, #8
   82a0a:	f10d 0106 	add.w	r1, sp, #6
   82a0e:	f643 0221 	movw	r2, #14369	; 0x3821
   82a12:	f2c0 0208 	movt	r2, #8
   82a16:	4790      	blx	r2
   82a18:	bb78      	cbnz	r0, 82a7a <xQueueGenericSend+0x15e>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   82a1a:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   82a1c:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   82a20:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   82a24:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   82a26:	45c1      	cmp	r9, r8
   82a28:	d11b      	bne.n	82a62 <xQueueGenericSend+0x146>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   82a2a:	f104 0010 	add.w	r0, r4, #16
   82a2e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   82a32:	f243 6379 	movw	r3, #13945	; 0x3679
   82a36:	f2c0 0308 	movt	r3, #8
   82a3a:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   82a3c:	4620      	mov	r0, r4
   82a3e:	f242 61cd 	movw	r1, #9933	; 0x26cd
   82a42:	f2c0 0108 	movt	r1, #8
   82a46:	4788      	blx	r1
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   82a48:	f243 3011 	movw	r0, #13073	; 0x3311
   82a4c:	f2c0 0008 	movt	r0, #8
   82a50:	4780      	blx	r0
   82a52:	2800      	cmp	r0, #0
   82a54:	d18e      	bne.n	82974 <xQueueGenericSend+0x58>
				{
					portYIELD_WITHIN_API();
   82a56:	f242 32f5 	movw	r2, #9205	; 0x23f5
   82a5a:	f2c0 0208 	movt	r2, #8
   82a5e:	4790      	blx	r2
   82a60:	e788      	b.n	82974 <xQueueGenericSend+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   82a62:	4620      	mov	r0, r4
   82a64:	f242 63cd 	movw	r3, #9933	; 0x26cd
   82a68:	f2c0 0308 	movt	r3, #8
   82a6c:	4798      	blx	r3
				( void ) xTaskResumeAll();
   82a6e:	f243 3211 	movw	r2, #13073	; 0x3311
   82a72:	f2c0 0208 	movt	r2, #8
   82a76:	4790      	blx	r2
   82a78:	e77c      	b.n	82974 <xQueueGenericSend+0x58>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   82a7a:	4620      	mov	r0, r4
   82a7c:	f242 61cd 	movw	r1, #9933	; 0x26cd
   82a80:	f2c0 0108 	movt	r1, #8
   82a84:	4788      	blx	r1
			( void ) xTaskResumeAll();
   82a86:	f243 3011 	movw	r0, #13073	; 0x3311
   82a8a:	f2c0 0008 	movt	r0, #8
   82a8e:	4780      	blx	r0

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   82a90:	f04f 0000 	mov.w	r0, #0
		}
	}
}
   82a94:	b005      	add	sp, #20
   82a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a9a:	bf00      	nop

00082a9c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   82a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82aa0:	460e      	mov	r6, r1
   82aa2:	4615      	mov	r5, r2
   82aa4:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   82aa6:	4604      	mov	r4, r0
   82aa8:	b930      	cbnz	r0, 82ab8 <xQueueGenericSendFromISR+0x1c>
   82aaa:	f242 4505 	movw	r5, #9221	; 0x2405
   82aae:	f2c0 0508 	movt	r5, #8
   82ab2:	47a8      	blx	r5
   82ab4:	bf00      	nop
   82ab6:	e7fd      	b.n	82ab4 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   82ab8:	b941      	cbnz	r1, 82acc <xQueueGenericSendFromISR+0x30>
   82aba:	6c03      	ldr	r3, [r0, #64]	; 0x40
   82abc:	b133      	cbz	r3, 82acc <xQueueGenericSendFromISR+0x30>
   82abe:	f242 4005 	movw	r0, #9221	; 0x2405
   82ac2:	f2c0 0008 	movt	r0, #8
   82ac6:	4780      	blx	r0
   82ac8:	bf00      	nop
   82aca:	e7fd      	b.n	82ac8 <xQueueGenericSendFromISR+0x2c>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   82acc:	f242 4105 	movw	r1, #9221	; 0x2405
   82ad0:	f2c0 0108 	movt	r1, #8
   82ad4:	4788      	blx	r1
   82ad6:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   82ad8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   82ada:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   82adc:	429a      	cmp	r2, r3
   82ade:	d221      	bcs.n	82b24 <xQueueGenericSendFromISR+0x88>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   82ae0:	4620      	mov	r0, r4
   82ae2:	4631      	mov	r1, r6
   82ae4:	4642      	mov	r2, r8
   82ae6:	f242 73a9 	movw	r3, #10153	; 0x27a9
   82aea:	f2c0 0308 	movt	r3, #8
   82aee:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   82af0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   82af2:	f1b0 3fff 	cmp.w	r0, #4294967295
   82af6:	d10e      	bne.n	82b16 <xQueueGenericSendFromISR+0x7a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   82af8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   82afa:	b1b2      	cbz	r2, 82b2a <xQueueGenericSendFromISR+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   82afc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   82b00:	f243 7449 	movw	r4, #14153	; 0x3749
   82b04:	f2c0 0408 	movt	r4, #8
   82b08:	47a0      	blx	r4
   82b0a:	b188      	cbz	r0, 82b30 <xQueueGenericSendFromISR+0x94>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   82b0c:	b19d      	cbz	r5, 82b36 <xQueueGenericSendFromISR+0x9a>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   82b0e:	f04f 0401 	mov.w	r4, #1
   82b12:	602c      	str	r4, [r5, #0]
   82b14:	e011      	b.n	82b3a <xQueueGenericSendFromISR+0x9e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   82b16:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   82b18:	f101 0101 	add.w	r1, r1, #1
   82b1c:	64a1      	str	r1, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   82b1e:	f04f 0401 	mov.w	r4, #1
   82b22:	e00a      	b.n	82b3a <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   82b24:	f04f 0400 	mov.w	r4, #0
   82b28:	e007      	b.n	82b3a <xQueueGenericSendFromISR+0x9e>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   82b2a:	f04f 0401 	mov.w	r4, #1
   82b2e:	e004      	b.n	82b3a <xQueueGenericSendFromISR+0x9e>
   82b30:	f04f 0401 	mov.w	r4, #1
   82b34:	e001      	b.n	82b3a <xQueueGenericSendFromISR+0x9e>
   82b36:	f04f 0401 	mov.w	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   82b3a:	4638      	mov	r0, r7
   82b3c:	f242 4339 	movw	r3, #9273	; 0x2439
   82b40:	f2c0 0308 	movt	r3, #8
   82b44:	4798      	blx	r3

	return xReturn;
}
   82b46:	4620      	mov	r0, r4
   82b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082b4c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   82b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82b50:	b085      	sub	sp, #20
   82b52:	4689      	mov	r9, r1
   82b54:	469a      	mov	sl, r3
   82b56:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   82b5a:	4604      	mov	r4, r0
   82b5c:	b930      	cbnz	r0, 82b6c <xQueueGenericReceive+0x20>
   82b5e:	f242 4405 	movw	r4, #9221	; 0x2405
   82b62:	f2c0 0408 	movt	r4, #8
   82b66:	47a0      	blx	r4
   82b68:	bf00      	nop
   82b6a:	e7fd      	b.n	82b68 <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   82b6c:	b941      	cbnz	r1, 82b80 <xQueueGenericReceive+0x34>
   82b6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   82b70:	b14b      	cbz	r3, 82b86 <xQueueGenericReceive+0x3a>
   82b72:	f242 4005 	movw	r0, #9221	; 0x2405
   82b76:	f2c0 0008 	movt	r0, #8
   82b7a:	4780      	blx	r0
   82b7c:	bf00      	nop
   82b7e:	e7fd      	b.n	82b7c <xQueueGenericReceive+0x30>
   82b80:	f04f 0700 	mov.w	r7, #0
   82b84:	e001      	b.n	82b8a <xQueueGenericReceive+0x3e>
   82b86:	f04f 0700 	mov.w	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   82b8a:	f242 4619 	movw	r6, #9241	; 0x2419
   82b8e:	f2c0 0608 	movt	r6, #8
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   82b92:	f243 7bf1 	movw	fp, #14321	; 0x37f1
   82b96:	f2c0 0b08 	movt	fp, #8
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   82b9a:	f242 4541 	movw	r5, #9281	; 0x2441
   82b9e:	f2c0 0508 	movt	r5, #8
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   82ba2:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   82ba4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   82ba6:	2900      	cmp	r1, #0
   82ba8:	d03f      	beq.n	82c2a <xQueueGenericReceive+0xde>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   82baa:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   82bac:	4620      	mov	r0, r4
   82bae:	4649      	mov	r1, r9
   82bb0:	f242 7381 	movw	r3, #10113	; 0x2781
   82bb4:	f2c0 0308 	movt	r3, #8
   82bb8:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   82bba:	f1ba 0f00 	cmp.w	sl, #0
   82bbe:	d11c      	bne.n	82bfa <xQueueGenericReceive+0xae>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   82bc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   82bc2:	f103 30ff 	add.w	r0, r3, #4294967295
   82bc6:	63a0      	str	r0, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   82bc8:	6821      	ldr	r1, [r4, #0]
   82bca:	b929      	cbnz	r1, 82bd8 <xQueueGenericReceive+0x8c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   82bcc:	f643 02e5 	movw	r2, #14565	; 0x38e5
   82bd0:	f2c0 0208 	movt	r2, #8
   82bd4:	4790      	blx	r2
   82bd6:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   82bd8:	6923      	ldr	r3, [r4, #16]
   82bda:	b1f3      	cbz	r3, 82c1a <xQueueGenericReceive+0xce>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   82bdc:	f104 0010 	add.w	r0, r4, #16
   82be0:	f243 7149 	movw	r1, #14153	; 0x3749
   82be4:	f2c0 0108 	movt	r1, #8
   82be8:	4788      	blx	r1
   82bea:	2801      	cmp	r0, #1
   82bec:	d115      	bne.n	82c1a <xQueueGenericReceive+0xce>
						{
							portYIELD_WITHIN_API();
   82bee:	f242 30f5 	movw	r0, #9205	; 0x23f5
   82bf2:	f2c0 0008 	movt	r0, #8
   82bf6:	4780      	blx	r0
   82bf8:	e00f      	b.n	82c1a <xQueueGenericReceive+0xce>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   82bfa:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   82bfc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   82bfe:	b160      	cbz	r0, 82c1a <xQueueGenericReceive+0xce>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   82c00:	f104 0024 	add.w	r0, r4, #36	; 0x24
   82c04:	f243 7149 	movw	r1, #14153	; 0x3749
   82c08:	f2c0 0108 	movt	r1, #8
   82c0c:	4788      	blx	r1
   82c0e:	b120      	cbz	r0, 82c1a <xQueueGenericReceive+0xce>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   82c10:	f242 32f5 	movw	r2, #9205	; 0x23f5
   82c14:	f2c0 0208 	movt	r2, #8
   82c18:	4790      	blx	r2
						}
					}
				}

				taskEXIT_CRITICAL();
   82c1a:	f242 4241 	movw	r2, #9281	; 0x2441
   82c1e:	f2c0 0208 	movt	r2, #8
   82c22:	4790      	blx	r2
				return pdPASS;
   82c24:	f04f 0001 	mov.w	r0, #1
   82c28:	e074      	b.n	82d14 <xQueueGenericReceive+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   82c2a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   82c2e:	b93a      	cbnz	r2, 82c40 <xQueueGenericReceive+0xf4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   82c30:	f242 4241 	movw	r2, #9281	; 0x2441
   82c34:	f2c0 0208 	movt	r2, #8
   82c38:	4790      	blx	r2
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   82c3a:	f04f 0000 	mov.w	r0, #0
   82c3e:	e069      	b.n	82d14 <xQueueGenericReceive+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
   82c40:	b91f      	cbnz	r7, 82c4a <xQueueGenericReceive+0xfe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   82c42:	a802      	add	r0, sp, #8
   82c44:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   82c46:	f04f 0701 	mov.w	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   82c4a:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   82c4c:	f243 1339 	movw	r3, #12601	; 0x3139
   82c50:	f2c0 0308 	movt	r3, #8
   82c54:	4798      	blx	r3
		prvLockQueue( pxQueue );
   82c56:	47b0      	blx	r6
   82c58:	6c60      	ldr	r0, [r4, #68]	; 0x44
   82c5a:	f1b0 3fff 	cmp.w	r0, #4294967295
   82c5e:	bf04      	itt	eq
   82c60:	2000      	moveq	r0, #0
   82c62:	6460      	streq	r0, [r4, #68]	; 0x44
   82c64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   82c66:	f1b1 3fff 	cmp.w	r1, #4294967295
   82c6a:	bf04      	itt	eq
   82c6c:	2100      	moveq	r1, #0
   82c6e:	64a1      	streq	r1, [r4, #72]	; 0x48
   82c70:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   82c72:	a802      	add	r0, sp, #8
   82c74:	f10d 0106 	add.w	r1, sp, #6
   82c78:	f643 0221 	movw	r2, #14369	; 0x3821
   82c7c:	f2c0 0208 	movt	r2, #8
   82c80:	4790      	blx	r2
   82c82:	2800      	cmp	r0, #0
   82c84:	d139      	bne.n	82cfa <xQueueGenericReceive+0x1ae>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   82c86:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   82c88:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   82c8c:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   82c8e:	f1b8 0f00 	cmp.w	r8, #0
   82c92:	d126      	bne.n	82ce2 <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   82c94:	6823      	ldr	r3, [r4, #0]
   82c96:	b93b      	cbnz	r3, 82ca8 <xQueueGenericReceive+0x15c>
					{
						portENTER_CRITICAL();
   82c98:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   82c9a:	6860      	ldr	r0, [r4, #4]
   82c9c:	f643 1119 	movw	r1, #14617	; 0x3919
   82ca0:	f2c0 0108 	movt	r1, #8
   82ca4:	4788      	blx	r1
						}
						portEXIT_CRITICAL();
   82ca6:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   82ca8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   82cac:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   82cb0:	f243 6279 	movw	r2, #13945	; 0x3679
   82cb4:	f2c0 0208 	movt	r2, #8
   82cb8:	4790      	blx	r2
				prvUnlockQueue( pxQueue );
   82cba:	4620      	mov	r0, r4
   82cbc:	f242 63cd 	movw	r3, #9933	; 0x26cd
   82cc0:	f2c0 0308 	movt	r3, #8
   82cc4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   82cc6:	f243 3011 	movw	r0, #13073	; 0x3311
   82cca:	f2c0 0008 	movt	r0, #8
   82cce:	4780      	blx	r0
   82cd0:	2800      	cmp	r0, #0
   82cd2:	f47f af66 	bne.w	82ba2 <xQueueGenericReceive+0x56>
				{
					portYIELD_WITHIN_API();
   82cd6:	f242 31f5 	movw	r1, #9205	; 0x23f5
   82cda:	f2c0 0108 	movt	r1, #8
   82cde:	4788      	blx	r1
   82ce0:	e75f      	b.n	82ba2 <xQueueGenericReceive+0x56>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   82ce2:	4620      	mov	r0, r4
   82ce4:	f242 61cd 	movw	r1, #9933	; 0x26cd
   82ce8:	f2c0 0108 	movt	r1, #8
   82cec:	4788      	blx	r1
				( void ) xTaskResumeAll();
   82cee:	f243 3211 	movw	r2, #13073	; 0x3311
   82cf2:	f2c0 0208 	movt	r2, #8
   82cf6:	4790      	blx	r2
   82cf8:	e753      	b.n	82ba2 <xQueueGenericReceive+0x56>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   82cfa:	4620      	mov	r0, r4
   82cfc:	f242 63cd 	movw	r3, #9933	; 0x26cd
   82d00:	f2c0 0308 	movt	r3, #8
   82d04:	4798      	blx	r3
			( void ) xTaskResumeAll();
   82d06:	f243 3011 	movw	r0, #13073	; 0x3311
   82d0a:	f2c0 0008 	movt	r0, #8
   82d0e:	4780      	blx	r0
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   82d10:	f04f 0000 	mov.w	r0, #0
		}
	}
}
   82d14:	b005      	add	sp, #20
   82d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82d1a:	bf00      	nop

00082d1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   82d1c:	b538      	push	{r3, r4, r5, lr}
   82d1e:	4604      	mov	r4, r0
   82d20:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   82d22:	f242 4319 	movw	r3, #9241	; 0x2419
   82d26:	f2c0 0308 	movt	r3, #8
   82d2a:	4798      	blx	r3
   82d2c:	6c60      	ldr	r0, [r4, #68]	; 0x44
   82d2e:	f1b0 3fff 	cmp.w	r0, #4294967295
   82d32:	bf04      	itt	eq
   82d34:	2000      	moveq	r0, #0
   82d36:	6460      	streq	r0, [r4, #68]	; 0x44
   82d38:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   82d3a:	f1b1 3fff 	cmp.w	r1, #4294967295
   82d3e:	bf04      	itt	eq
   82d40:	2100      	moveq	r1, #0
   82d42:	64a1      	streq	r1, [r4, #72]	; 0x48
   82d44:	f242 4241 	movw	r2, #9281	; 0x2441
   82d48:	f2c0 0208 	movt	r2, #8
   82d4c:	4790      	blx	r2
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   82d4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   82d50:	b93b      	cbnz	r3, 82d62 <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   82d52:	f104 0024 	add.w	r0, r4, #36	; 0x24
   82d56:	4629      	mov	r1, r5
   82d58:	f243 62f1 	movw	r2, #14065	; 0x36f1
   82d5c:	f2c0 0208 	movt	r2, #8
   82d60:	4790      	blx	r2
		}
		prvUnlockQueue( pxQueue );
   82d62:	4620      	mov	r0, r4
   82d64:	f242 61cd 	movw	r1, #9933	; 0x26cd
   82d68:	f2c0 0108 	movt	r1, #8
   82d6c:	4788      	blx	r1
   82d6e:	bd38      	pop	{r3, r4, r5, pc}

00082d70 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   82d70:	b510      	push	{r4, lr}
   82d72:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   82d74:	f648 3348 	movw	r3, #35656	; 0x8b48
   82d78:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82d7c:	6818      	ldr	r0, [r3, #0]
   82d7e:	8084      	strh	r4, [r0, #4]

	if( xTimeToWake < xTickCount )
   82d80:	f648 3164 	movw	r1, #35684	; 0x8b64
   82d84:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82d88:	880a      	ldrh	r2, [r1, #0]
   82d8a:	b293      	uxth	r3, r2
   82d8c:	429c      	cmp	r4, r3
   82d8e:	d211      	bcs.n	82db4 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   82d90:	f648 3368 	movw	r3, #35688	; 0x8b68
   82d94:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82d98:	6818      	ldr	r0, [r3, #0]
   82d9a:	f648 3148 	movw	r1, #35656	; 0x8b48
   82d9e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82da2:	6809      	ldr	r1, [r1, #0]
   82da4:	f101 0104 	add.w	r1, r1, #4
   82da8:	f242 3231 	movw	r2, #9009	; 0x2331
   82dac:	f2c0 0208 	movt	r2, #8
   82db0:	4790      	blx	r2
   82db2:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   82db4:	f648 2044 	movw	r0, #35396	; 0x8a44
   82db8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82dbc:	6800      	ldr	r0, [r0, #0]
   82dbe:	f648 3148 	movw	r1, #35656	; 0x8b48
   82dc2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82dc6:	6809      	ldr	r1, [r1, #0]
   82dc8:	f101 0104 	add.w	r1, r1, #4
   82dcc:	f242 3231 	movw	r2, #9009	; 0x2331
   82dd0:	f2c0 0208 	movt	r2, #8
   82dd4:	4790      	blx	r2

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   82dd6:	f240 0308 	movw	r3, #8
   82dda:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82dde:	8818      	ldrh	r0, [r3, #0]
   82de0:	b281      	uxth	r1, r0
   82de2:	428c      	cmp	r4, r1
   82de4:	d204      	bcs.n	82df0 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
   82de6:	f240 0208 	movw	r2, #8
   82dea:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82dee:	8014      	strh	r4, [r2, #0]
   82df0:	bd10      	pop	{r4, pc}
   82df2:	bf00      	nop

00082df4 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   82df4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82df8:	460f      	mov	r7, r1
   82dfa:	4690      	mov	r8, r2
   82dfc:	469a      	mov	sl, r3
   82dfe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   82e00:	9e0c      	ldr	r6, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   82e02:	4681      	mov	r9, r0
   82e04:	b930      	cbnz	r0, 82e14 <xTaskGenericCreate+0x20>
   82e06:	f242 4705 	movw	r7, #9221	; 0x2405
   82e0a:	f2c0 0708 	movt	r7, #8
   82e0e:	47b8      	blx	r7
   82e10:	bf00      	nop
   82e12:	e7fd      	b.n	82e10 <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   82e14:	2d09      	cmp	r5, #9
   82e16:	d906      	bls.n	82e26 <xTaskGenericCreate+0x32>
   82e18:	f242 4505 	movw	r5, #9221	; 0x2405
   82e1c:	f2c0 0508 	movt	r5, #8
   82e20:	47a8      	blx	r5
   82e22:	bf00      	nop
   82e24:	e7fd      	b.n	82e22 <xTaskGenericCreate+0x2e>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   82e26:	f04f 0050 	mov.w	r0, #80	; 0x50
   82e2a:	f242 5395 	movw	r3, #9621	; 0x2595
   82e2e:	f2c0 0308 	movt	r3, #8
   82e32:	4798      	blx	r3

	if( pxNewTCB != NULL )
   82e34:	4604      	mov	r4, r0
   82e36:	2800      	cmp	r0, #0
   82e38:	f000 8136 	beq.w	830a8 <xTaskGenericCreate+0x2b4>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   82e3c:	2e00      	cmp	r6, #0
   82e3e:	f040 8131 	bne.w	830a4 <xTaskGenericCreate+0x2b0>
   82e42:	ea4f 0088 	mov.w	r0, r8, lsl #2
   82e46:	f242 5195 	movw	r1, #9621	; 0x2595
   82e4a:	f2c0 0108 	movt	r1, #8
   82e4e:	4788      	blx	r1
   82e50:	4606      	mov	r6, r0
   82e52:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   82e54:	b930      	cbnz	r0, 82e64 <xTaskGenericCreate+0x70>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   82e56:	4620      	mov	r0, r4
   82e58:	f242 6291 	movw	r2, #9873	; 0x2691
   82e5c:	f2c0 0208 	movt	r2, #8
   82e60:	4790      	blx	r2
   82e62:	e121      	b.n	830a8 <xTaskGenericCreate+0x2b4>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   82e64:	4630      	mov	r0, r6
   82e66:	f04f 01a5 	mov.w	r1, #165	; 0xa5
   82e6a:	ea4f 0288 	mov.w	r2, r8, lsl #2
   82e6e:	f245 2617 	movw	r6, #21015	; 0x5217
   82e72:	f2c0 0608 	movt	r6, #8
   82e76:	47b0      	blx	r6
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   82e78:	f108 38ff 	add.w	r8, r8, #4294967295
   82e7c:	6b20      	ldr	r0, [r4, #48]	; 0x30
   82e7e:	eb00 0288 	add.w	r2, r0, r8, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   82e82:	f022 0b07 	bic.w	fp, r2, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   82e86:	f104 0034 	add.w	r0, r4, #52	; 0x34
   82e8a:	4639      	mov	r1, r7
   82e8c:	f04f 0210 	mov.w	r2, #16
   82e90:	f245 3751 	movw	r7, #21329	; 0x5351
   82e94:	f2c0 0708 	movt	r7, #8
   82e98:	47b8      	blx	r7
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   82e9a:	f04f 0300 	mov.w	r3, #0
   82e9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   82ea2:	2d09      	cmp	r5, #9
   82ea4:	bf34      	ite	cc
   82ea6:	462e      	movcc	r6, r5
   82ea8:	2609      	movcs	r6, #9
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   82eaa:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   82eac:	64e6      	str	r6, [r4, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   82eae:	f104 0704 	add.w	r7, r4, #4
   82eb2:	4638      	mov	r0, r7
   82eb4:	f242 3809 	movw	r8, #8969	; 0x2309
   82eb8:	f2c0 0808 	movt	r8, #8
   82ebc:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   82ebe:	f104 0018 	add.w	r0, r4, #24
   82ec2:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   82ec4:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   82ec6:	f1c6 060a 	rsb	r6, r6, #10
   82eca:	8326      	strh	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   82ecc:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   82ece:	4658      	mov	r0, fp
   82ed0:	4649      	mov	r1, r9
   82ed2:	4652      	mov	r2, sl
   82ed4:	f242 33b5 	movw	r3, #9141	; 0x23b5
   82ed8:	f2c0 0308 	movt	r3, #8
   82edc:	4798      	blx	r3
   82ede:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   82ee0:	f010 0f07 	tst.w	r0, #7
   82ee4:	d006      	beq.n	82ef4 <xTaskGenericCreate+0x100>
   82ee6:	f242 4405 	movw	r4, #9221	; 0x2405
   82eea:	f2c0 0408 	movt	r4, #8
   82eee:	47a0      	blx	r4
   82ef0:	bf00      	nop
   82ef2:	e7fd      	b.n	82ef0 <xTaskGenericCreate+0xfc>

		if( ( void * ) pxCreatedTask != NULL )
   82ef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82ef6:	b101      	cbz	r1, 82efa <xTaskGenericCreate+0x106>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   82ef8:	600c      	str	r4, [r1, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   82efa:	f242 4019 	movw	r0, #9241	; 0x2419
   82efe:	f2c0 0008 	movt	r0, #8
   82f02:	4780      	blx	r0
		{
			uxCurrentNumberOfTasks++;
   82f04:	f648 3388 	movw	r3, #35720	; 0x8b88
   82f08:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82f0c:	681a      	ldr	r2, [r3, #0]
   82f0e:	f102 0201 	add.w	r2, r2, #1
   82f12:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   82f14:	f648 3148 	movw	r1, #35656	; 0x8b48
   82f18:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82f1c:	6808      	ldr	r0, [r1, #0]
   82f1e:	2800      	cmp	r0, #0
   82f20:	d158      	bne.n	82fd4 <xTaskGenericCreate+0x1e0>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   82f22:	f648 3148 	movw	r1, #35656	; 0x8b48
   82f26:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82f2a:	600c      	str	r4, [r1, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   82f2c:	f648 3088 	movw	r0, #35720	; 0x8b88
   82f30:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82f34:	6803      	ldr	r3, [r0, #0]
   82f36:	2b01      	cmp	r3, #1
   82f38:	d15f      	bne.n	82ffa <xTaskGenericCreate+0x206>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   82f3a:	f648 297c 	movw	r9, #35452	; 0x8a7c
   82f3e:	f2c2 0907 	movt	r9, #8199	; 0x2007
   82f42:	4648      	mov	r0, r9
   82f44:	f242 26f1 	movw	r6, #8945	; 0x22f1
   82f48:	f2c0 0608 	movt	r6, #8
   82f4c:	47b0      	blx	r6
   82f4e:	f109 0014 	add.w	r0, r9, #20
   82f52:	47b0      	blx	r6
   82f54:	f109 0028 	add.w	r0, r9, #40	; 0x28
   82f58:	47b0      	blx	r6
   82f5a:	f109 003c 	add.w	r0, r9, #60	; 0x3c
   82f5e:	47b0      	blx	r6
   82f60:	f109 0050 	add.w	r0, r9, #80	; 0x50
   82f64:	47b0      	blx	r6
   82f66:	f109 0064 	add.w	r0, r9, #100	; 0x64
   82f6a:	47b0      	blx	r6
   82f6c:	f109 0078 	add.w	r0, r9, #120	; 0x78
   82f70:	47b0      	blx	r6
   82f72:	f109 008c 	add.w	r0, r9, #140	; 0x8c
   82f76:	47b0      	blx	r6
   82f78:	f109 00a0 	add.w	r0, r9, #160	; 0xa0
   82f7c:	47b0      	blx	r6
   82f7e:	f109 00b4 	add.w	r0, r9, #180	; 0xb4
   82f82:	47b0      	blx	r6
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   82f84:	f648 3970 	movw	r9, #35696	; 0x8b70
   82f88:	f2c2 0907 	movt	r9, #8199	; 0x2007
   82f8c:	4648      	mov	r0, r9
   82f8e:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   82f90:	f648 2864 	movw	r8, #35428	; 0x8a64
   82f94:	f2c2 0807 	movt	r8, #8199	; 0x2007
   82f98:	4640      	mov	r0, r8
   82f9a:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   82f9c:	f648 304c 	movw	r0, #35660	; 0x8b4c
   82fa0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82fa4:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   82fa6:	f648 2050 	movw	r0, #35408	; 0x8a50
   82faa:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82fae:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   82fb0:	f648 2030 	movw	r0, #35376	; 0x8a30
   82fb4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82fb8:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   82fba:	f648 2244 	movw	r2, #35396	; 0x8a44
   82fbe:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82fc2:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   82fc6:	f648 3168 	movw	r1, #35688	; 0x8b68
   82fca:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82fce:	f8c1 8000 	str.w	r8, [r1]
   82fd2:	e012      	b.n	82ffa <xTaskGenericCreate+0x206>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   82fd4:	f648 2348 	movw	r3, #35400	; 0x8a48
   82fd8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82fdc:	681a      	ldr	r2, [r3, #0]
   82fde:	b962      	cbnz	r2, 82ffa <xTaskGenericCreate+0x206>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   82fe0:	f648 3148 	movw	r1, #35656	; 0x8b48
   82fe4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82fe8:	6808      	ldr	r0, [r1, #0]
   82fea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   82fec:	429d      	cmp	r5, r3
   82fee:	d304      	bcc.n	82ffa <xTaskGenericCreate+0x206>
					{
						pxCurrentTCB = pxNewTCB;
   82ff0:	f648 3248 	movw	r2, #35656	; 0x8b48
   82ff4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82ff8:	6014      	str	r4, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   82ffa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   82ffc:	f648 338c 	movw	r3, #35724	; 0x8b8c
   83000:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83004:	681a      	ldr	r2, [r3, #0]
   83006:	4290      	cmp	r0, r2
   83008:	d904      	bls.n	83014 <xTaskGenericCreate+0x220>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   8300a:	f648 318c 	movw	r1, #35724	; 0x8b8c
   8300e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83012:	6008      	str	r0, [r1, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   83014:	f648 336c 	movw	r3, #35692	; 0x8b6c
   83018:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8301c:	681a      	ldr	r2, [r3, #0]
   8301e:	6462      	str	r2, [r4, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
   83020:	f102 0201 	add.w	r2, r2, #1
   83024:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   83026:	f648 2178 	movw	r1, #35448	; 0x8a78
   8302a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8302e:	680b      	ldr	r3, [r1, #0]
   83030:	4298      	cmp	r0, r3
   83032:	d904      	bls.n	8303e <xTaskGenericCreate+0x24a>
   83034:	f648 2278 	movw	r2, #35448	; 0x8a78
   83038:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8303c:	6010      	str	r0, [r2, #0]
   8303e:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   83042:	f648 207c 	movw	r0, #35452	; 0x8a7c
   83046:	4603      	mov	r3, r0
   83048:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8304c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   83050:	4639      	mov	r1, r7
   83052:	f242 3211 	movw	r2, #8977	; 0x2311
   83056:	f2c0 0208 	movt	r2, #8
   8305a:	4790      	blx	r2

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   8305c:	f242 4141 	movw	r1, #9281	; 0x2441
   83060:	f2c0 0108 	movt	r1, #8
   83064:	4788      	blx	r1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   83066:	f648 2048 	movw	r0, #35400	; 0x8a48
   8306a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8306e:	6803      	ldr	r3, [r0, #0]
   83070:	b183      	cbz	r3, 83094 <xTaskGenericCreate+0x2a0>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   83072:	f648 3248 	movw	r2, #35656	; 0x8b48
   83076:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8307a:	6811      	ldr	r1, [r2, #0]
   8307c:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
   8307e:	4285      	cmp	r5, r0
   83080:	d90c      	bls.n	8309c <xTaskGenericCreate+0x2a8>
			{
				portYIELD_WITHIN_API();
   83082:	f242 33f5 	movw	r3, #9205	; 0x23f5
   83086:	f2c0 0308 	movt	r3, #8
   8308a:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   8308c:	f04f 0001 	mov.w	r0, #1
   83090:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83094:	f04f 0001 	mov.w	r0, #1
   83098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8309c:	f04f 0001 	mov.w	r0, #1
   830a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   830a4:	6306      	str	r6, [r0, #48]	; 0x30
   830a6:	e6dd      	b.n	82e64 <xTaskGenericCreate+0x70>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   830a8:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   830ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000830b0 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   830b0:	b510      	push	{r4, lr}
   830b2:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   830b4:	f04f 0300 	mov.w	r3, #0
   830b8:	9300      	str	r3, [sp, #0]
   830ba:	9301      	str	r3, [sp, #4]
   830bc:	9302      	str	r3, [sp, #8]
   830be:	9303      	str	r3, [sp, #12]
   830c0:	f243 405d 	movw	r0, #13405	; 0x345d
   830c4:	f2c0 0008 	movt	r0, #8
   830c8:	f647 3130 	movw	r1, #31536	; 0x7b30
   830cc:	f2c0 0108 	movt	r1, #8
   830d0:	f44f 7280 	mov.w	r2, #256	; 0x100
   830d4:	f642 54f5 	movw	r4, #11765	; 0x2df5
   830d8:	f2c0 0408 	movt	r4, #8
   830dc:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   830de:	2801      	cmp	r0, #1
   830e0:	d11f      	bne.n	83122 <vTaskStartScheduler+0x72>
		{
			xReturn = xTimerCreateTimerTask();
   830e2:	f643 3301 	movw	r3, #15105	; 0x3b01
   830e6:	f2c0 0308 	movt	r3, #8
   830ea:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   830ec:	2801      	cmp	r0, #1
   830ee:	d118      	bne.n	83122 <vTaskStartScheduler+0x72>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   830f0:	f242 4105 	movw	r1, #9221	; 0x2405
   830f4:	f2c0 0108 	movt	r1, #8
   830f8:	4788      	blx	r1

		xSchedulerRunning = pdTRUE;
   830fa:	f648 2348 	movw	r3, #35400	; 0x8a48
   830fe:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83102:	f04f 0201 	mov.w	r2, #1
   83106:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   83108:	f648 3064 	movw	r0, #35684	; 0x8b64
   8310c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83110:	f04f 0100 	mov.w	r1, #0
   83114:	8001      	strh	r1, [r0, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   83116:	f242 43f9 	movw	r3, #9465	; 0x24f9
   8311a:	f2c0 0308 	movt	r3, #8
   8311e:	4798      	blx	r3
   83120:	e007      	b.n	83132 <vTaskStartScheduler+0x82>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   83122:	b930      	cbnz	r0, 83132 <vTaskStartScheduler+0x82>
   83124:	f242 4005 	movw	r0, #9221	; 0x2405
   83128:	f2c0 0008 	movt	r0, #8
   8312c:	4780      	blx	r0
   8312e:	bf00      	nop
   83130:	e7fd      	b.n	8312e <vTaskStartScheduler+0x7e>
}
   83132:	b004      	add	sp, #16
   83134:	bd10      	pop	{r4, pc}
   83136:	bf00      	nop

00083138 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   83138:	f648 3344 	movw	r3, #35652	; 0x8b44
   8313c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83140:	681a      	ldr	r2, [r3, #0]
   83142:	f102 0201 	add.w	r2, r2, #1
   83146:	601a      	str	r2, [r3, #0]
   83148:	4770      	bx	lr
   8314a:	bf00      	nop

0008314c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   8314c:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   8314e:	f242 4319 	movw	r3, #9241	; 0x2419
   83152:	f2c0 0308 	movt	r3, #8
   83156:	4798      	blx	r3
	{
		xTicks = xTickCount;
   83158:	f648 3064 	movw	r0, #35684	; 0x8b64
   8315c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83160:	8804      	ldrh	r4, [r0, #0]
   83162:	b2a4      	uxth	r4, r4
	}
	taskEXIT_CRITICAL();
   83164:	f242 4141 	movw	r1, #9281	; 0x2441
   83168:	f2c0 0108 	movt	r1, #8
   8316c:	4788      	blx	r1

	return xTicks;
}
   8316e:	4620      	mov	r0, r4
   83170:	bd10      	pop	{r4, pc}
   83172:	bf00      	nop

00083174 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   83174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   83178:	f648 3344 	movw	r3, #35652	; 0x8b44
   8317c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83180:	6818      	ldr	r0, [r3, #0]
   83182:	2800      	cmp	r0, #0
   83184:	f040 80b9 	bne.w	832fa <vTaskIncrementTick+0x186>
	{
		++xTickCount;
   83188:	f648 3364 	movw	r3, #35684	; 0x8b64
   8318c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83190:	8818      	ldrh	r0, [r3, #0]
   83192:	f100 0001 	add.w	r0, r0, #1
   83196:	b281      	uxth	r1, r0
   83198:	8019      	strh	r1, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   8319a:	881a      	ldrh	r2, [r3, #0]
   8319c:	b293      	uxth	r3, r2
   8319e:	2b00      	cmp	r3, #0
   831a0:	d139      	bne.n	83216 <vTaskIncrementTick+0xa2>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   831a2:	f648 2044 	movw	r0, #35396	; 0x8a44
   831a6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   831aa:	6801      	ldr	r1, [r0, #0]
   831ac:	680a      	ldr	r2, [r1, #0]
   831ae:	b132      	cbz	r2, 831be <vTaskIncrementTick+0x4a>
   831b0:	f242 4505 	movw	r5, #9221	; 0x2405
   831b4:	f2c0 0508 	movt	r5, #8
   831b8:	47a8      	blx	r5
   831ba:	bf00      	nop
   831bc:	e7fd      	b.n	831ba <vTaskIncrementTick+0x46>

			pxTemp = pxDelayedTaskList;
   831be:	f648 2344 	movw	r3, #35396	; 0x8a44
   831c2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   831c6:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   831c8:	f648 3268 	movw	r2, #35688	; 0x8b68
   831cc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   831d0:	6810      	ldr	r0, [r2, #0]
   831d2:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   831d4:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   831d6:	f648 3260 	movw	r2, #35680	; 0x8b60
   831da:	f2c2 0207 	movt	r2, #8199	; 0x2007
   831de:	6811      	ldr	r1, [r2, #0]
   831e0:	f101 0101 	add.w	r1, r1, #1
   831e4:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   831e6:	681b      	ldr	r3, [r3, #0]
   831e8:	6818      	ldr	r0, [r3, #0]
   831ea:	b938      	cbnz	r0, 831fc <vTaskIncrementTick+0x88>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   831ec:	f240 0308 	movw	r3, #8
   831f0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   831f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   831f8:	8018      	strh	r0, [r3, #0]
   831fa:	e00c      	b.n	83216 <vTaskIncrementTick+0xa2>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   831fc:	f648 2244 	movw	r2, #35396	; 0x8a44
   83200:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83204:	6811      	ldr	r1, [r2, #0]
   83206:	68cb      	ldr	r3, [r1, #12]
   83208:	68d8      	ldr	r0, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   8320a:	8882      	ldrh	r2, [r0, #4]
   8320c:	f240 0108 	movw	r1, #8
   83210:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83214:	800a      	strh	r2, [r1, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   83216:	f648 3264 	movw	r2, #35684	; 0x8b64
   8321a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8321e:	8811      	ldrh	r1, [r2, #0]
   83220:	b288      	uxth	r0, r1
   83222:	f240 0308 	movw	r3, #8
   83226:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8322a:	881a      	ldrh	r2, [r3, #0]
   8322c:	b291      	uxth	r1, r2
   8322e:	4288      	cmp	r0, r1
   83230:	d36b      	bcc.n	8330a <vTaskIncrementTick+0x196>
   83232:	f648 2044 	movw	r0, #35396	; 0x8a44
   83236:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8323a:	6803      	ldr	r3, [r0, #0]
   8323c:	681a      	ldr	r2, [r3, #0]
   8323e:	b182      	cbz	r2, 83262 <vTaskIncrementTick+0xee>
   83240:	f648 2444 	movw	r4, #35396	; 0x8a44
   83244:	f2c2 0407 	movt	r4, #8199	; 0x2007
   83248:	6821      	ldr	r1, [r4, #0]
   8324a:	68c8      	ldr	r0, [r1, #12]
   8324c:	68c4      	ldr	r4, [r0, #12]
   8324e:	88a3      	ldrh	r3, [r4, #4]
   83250:	f648 3264 	movw	r2, #35684	; 0x8b64
   83254:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83258:	8811      	ldrh	r1, [r2, #0]
   8325a:	b288      	uxth	r0, r1
   8325c:	4283      	cmp	r3, r0
   8325e:	d91b      	bls.n	83298 <vTaskIncrementTick+0x124>
   83260:	e013      	b.n	8328a <vTaskIncrementTick+0x116>
   83262:	f240 0308 	movw	r3, #8
   83266:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8326a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8326e:	8019      	strh	r1, [r3, #0]
   83270:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83274:	6834      	ldr	r4, [r6, #0]
   83276:	68e2      	ldr	r2, [r4, #12]
   83278:	68d4      	ldr	r4, [r2, #12]
   8327a:	88a3      	ldrh	r3, [r4, #4]
   8327c:	4648      	mov	r0, r9
   8327e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83282:	8801      	ldrh	r1, [r0, #0]
   83284:	b28a      	uxth	r2, r1
   83286:	4293      	cmp	r3, r2
   83288:	d91c      	bls.n	832c4 <vTaskIncrementTick+0x150>
   8328a:	f240 0008 	movw	r0, #8
   8328e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83292:	8003      	strh	r3, [r0, #0]
   83294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83298:	f242 3775 	movw	r7, #9077	; 0x2375
   8329c:	f2c0 0708 	movt	r7, #8
   832a0:	f648 2878 	movw	r8, #35448	; 0x8a78
   832a4:	f2c2 0807 	movt	r8, #8199	; 0x2007
   832a8:	f648 2b7c 	movw	fp, #35452	; 0x8a7c
   832ac:	f2c2 0b07 	movt	fp, #8199	; 0x2007
   832b0:	f242 3a11 	movw	sl, #8977	; 0x2311
   832b4:	f2c0 0a08 	movt	sl, #8
   832b8:	f648 2644 	movw	r6, #35396	; 0x8a44
   832bc:	f2c2 0607 	movt	r6, #8199	; 0x2007
   832c0:	f648 3964 	movw	r9, #35684	; 0x8b64
   832c4:	f104 0504 	add.w	r5, r4, #4
   832c8:	4628      	mov	r0, r5
   832ca:	47b8      	blx	r7
   832cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   832ce:	b113      	cbz	r3, 832d6 <vTaskIncrementTick+0x162>
   832d0:	f104 0018 	add.w	r0, r4, #24
   832d4:	47b8      	blx	r7
   832d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   832d8:	f8d8 2000 	ldr.w	r2, [r8]
   832dc:	4291      	cmp	r1, r2
   832de:	bf88      	it	hi
   832e0:	f8c8 1000 	strhi.w	r1, [r8]
   832e4:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   832e8:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   832ec:	4629      	mov	r1, r5
   832ee:	47d0      	blx	sl
   832f0:	6833      	ldr	r3, [r6, #0]
   832f2:	6819      	ldr	r1, [r3, #0]
   832f4:	2900      	cmp	r1, #0
   832f6:	d1bd      	bne.n	83274 <vTaskIncrementTick+0x100>
   832f8:	e7b3      	b.n	83262 <vTaskIncrementTick+0xee>
	}
	else
	{
		++uxMissedTicks;
   832fa:	f648 212c 	movw	r1, #35372	; 0x8a2c
   832fe:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83302:	680a      	ldr	r2, [r1, #0]
   83304:	f102 0201 	add.w	r2, r2, #1
   83308:	600a      	str	r2, [r1, #0]
   8330a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8330e:	bf00      	nop

00083310 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   83310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   83314:	f648 3344 	movw	r3, #35652	; 0x8b44
   83318:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8331c:	6818      	ldr	r0, [r3, #0]
   8331e:	b930      	cbnz	r0, 8332e <xTaskResumeAll+0x1e>
   83320:	f242 4505 	movw	r5, #9221	; 0x2405
   83324:	f2c0 0508 	movt	r5, #8
   83328:	47a8      	blx	r5
   8332a:	bf00      	nop
   8332c:	e7fd      	b.n	8332a <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   8332e:	f242 4119 	movw	r1, #9241	; 0x2419
   83332:	f2c0 0108 	movt	r1, #8
   83336:	4788      	blx	r1
	{
		--uxSchedulerSuspended;
   83338:	f648 3444 	movw	r4, #35652	; 0x8b44
   8333c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   83340:	6822      	ldr	r2, [r4, #0]
   83342:	f102 33ff 	add.w	r3, r2, #4294967295
   83346:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   83348:	6820      	ldr	r0, [r4, #0]
   8334a:	2800      	cmp	r0, #0
   8334c:	d178      	bne.n	83440 <xTaskResumeAll+0x130>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   8334e:	f648 3188 	movw	r1, #35720	; 0x8b88
   83352:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83356:	680c      	ldr	r4, [r1, #0]
   83358:	bb4c      	cbnz	r4, 833ae <xTaskResumeAll+0x9e>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   8335a:	f04f 0400 	mov.w	r4, #0
   8335e:	e074      	b.n	8344a <xTaskResumeAll+0x13a>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   83360:	f8d8 200c 	ldr.w	r2, [r8, #12]
   83364:	68d4      	ldr	r4, [r2, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   83366:	f104 0018 	add.w	r0, r4, #24
   8336a:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8336c:	f104 0904 	add.w	r9, r4, #4
   83370:	4648      	mov	r0, r9
   83372:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   83374:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83376:	6830      	ldr	r0, [r6, #0]
   83378:	4283      	cmp	r3, r0
   8337a:	bf88      	it	hi
   8337c:	6033      	strhi	r3, [r6, #0]
   8337e:	4651      	mov	r1, sl
   83380:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83384:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   83388:	eb01 0082 	add.w	r0, r1, r2, lsl #2
   8338c:	4649      	mov	r1, r9
   8338e:	f242 3311 	movw	r3, #8977	; 0x2311
   83392:	f2c0 0308 	movt	r3, #8
   83396:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   83398:	f648 3048 	movw	r0, #35656	; 0x8b48
   8339c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   833a0:	6801      	ldr	r1, [r0, #0]
   833a2:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
   833a4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   833a6:	4294      	cmp	r4, r2
   833a8:	bf28      	it	cs
   833aa:	2501      	movcs	r5, #1
   833ac:	e00f      	b.n	833ce <xTaskResumeAll+0xbe>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   833ae:	f04f 0500 	mov.w	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   833b2:	f648 384c 	movw	r8, #35660	; 0x8b4c
   833b6:	f2c2 0807 	movt	r8, #8199	; 0x2007
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   833ba:	f242 3775 	movw	r7, #9077	; 0x2375
   833be:	f2c0 0708 	movt	r7, #8
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   833c2:	f648 2678 	movw	r6, #35448	; 0x8a78
   833c6:	f2c2 0607 	movt	r6, #8199	; 0x2007
   833ca:	f648 2a7c 	movw	sl, #35452	; 0x8a7c
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   833ce:	f8d8 2000 	ldr.w	r2, [r8]
   833d2:	2a00      	cmp	r2, #0
   833d4:	d1c4      	bne.n	83360 <xTaskResumeAll+0x50>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   833d6:	f648 232c 	movw	r3, #35372	; 0x8a2c
   833da:	f2c2 0307 	movt	r3, #8199	; 0x2007
   833de:	6818      	ldr	r0, [r3, #0]
   833e0:	b1b0      	cbz	r0, 83410 <xTaskResumeAll+0x100>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   833e2:	f648 222c 	movw	r2, #35372	; 0x8a2c
   833e6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   833ea:	6813      	ldr	r3, [r2, #0]
   833ec:	b1cb      	cbz	r3, 83422 <xTaskResumeAll+0x112>
					{
						vTaskIncrementTick();
   833ee:	f243 1575 	movw	r5, #12661	; 0x3175
   833f2:	f2c0 0508 	movt	r5, #8
						--uxMissedTicks;
   833f6:	f648 242c 	movw	r4, #35372	; 0x8a2c
   833fa:	f2c2 0407 	movt	r4, #8199	; 0x2007
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   833fe:	47a8      	blx	r5
						--uxMissedTicks;
   83400:	6820      	ldr	r0, [r4, #0]
   83402:	f100 31ff 	add.w	r1, r0, #4294967295
   83406:	6021      	str	r1, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   83408:	6822      	ldr	r2, [r4, #0]
   8340a:	2a00      	cmp	r2, #0
   8340c:	d1f7      	bne.n	833fe <xTaskResumeAll+0xee>
   8340e:	e008      	b.n	83422 <xTaskResumeAll+0x112>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   83410:	2d01      	cmp	r5, #1
   83412:	d006      	beq.n	83422 <xTaskResumeAll+0x112>
   83414:	f648 3184 	movw	r1, #35716	; 0x8b84
   83418:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8341c:	680c      	ldr	r4, [r1, #0]
   8341e:	2c01      	cmp	r4, #1
   83420:	d111      	bne.n	83446 <xTaskResumeAll+0x136>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   83422:	f648 3384 	movw	r3, #35716	; 0x8b84
   83426:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8342a:	f04f 0400 	mov.w	r4, #0
   8342e:	601c      	str	r4, [r3, #0]
					portYIELD_WITHIN_API();
   83430:	f242 30f5 	movw	r0, #9205	; 0x23f5
   83434:	f2c0 0008 	movt	r0, #8
   83438:	4780      	blx	r0
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   8343a:	f04f 0401 	mov.w	r4, #1
   8343e:	e004      	b.n	8344a <xTaskResumeAll+0x13a>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   83440:	f04f 0400 	mov.w	r4, #0
   83444:	e001      	b.n	8344a <xTaskResumeAll+0x13a>
   83446:	f04f 0400 	mov.w	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   8344a:	f242 4141 	movw	r1, #9281	; 0x2441
   8344e:	f2c0 0108 	movt	r1, #8
   83452:	4788      	blx	r1

	return xAlreadyYielded;
}
   83454:	4620      	mov	r0, r4
   83456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8345a:	bf00      	nop

0008345c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   8345c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   83460:	f648 254c 	movw	r5, #35404	; 0x8a4c
   83464:	f2c2 0507 	movt	r5, #8199	; 0x2007
		{
			vTaskSuspendAll();
   83468:	f243 1839 	movw	r8, #12601	; 0x3139
   8346c:	f2c0 0808 	movt	r8, #8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   83470:	f648 2650 	movw	r6, #35408	; 0x8a50
   83474:	f2c2 0607 	movt	r6, #8199	; 0x2007
			xTaskResumeAll();
   83478:	f243 3711 	movw	r7, #13073	; 0x3311
   8347c:	e02d      	b.n	834da <prvIdleTask+0x7e>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   8347e:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   83480:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   83482:	463b      	mov	r3, r7
   83484:	f2c0 0308 	movt	r3, #8
   83488:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   8348a:	b334      	cbz	r4, 834da <prvIdleTask+0x7e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   8348c:	f242 4019 	movw	r0, #9241	; 0x2419
   83490:	f2c0 0008 	movt	r0, #8
   83494:	4780      	blx	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   83496:	68f1      	ldr	r1, [r6, #12]
   83498:	68cc      	ldr	r4, [r1, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8349a:	f104 0004 	add.w	r0, r4, #4
   8349e:	f242 3275 	movw	r2, #9077	; 0x2375
   834a2:	f2c0 0208 	movt	r2, #8
   834a6:	4790      	blx	r2
					--uxCurrentNumberOfTasks;
   834a8:	f648 3388 	movw	r3, #35720	; 0x8b88
   834ac:	f2c2 0307 	movt	r3, #8199	; 0x2007
   834b0:	6818      	ldr	r0, [r3, #0]
   834b2:	f100 31ff 	add.w	r1, r0, #4294967295
   834b6:	6019      	str	r1, [r3, #0]
					--uxTasksDeleted;
   834b8:	682a      	ldr	r2, [r5, #0]
   834ba:	f102 33ff 	add.w	r3, r2, #4294967295
   834be:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   834c0:	f242 4041 	movw	r0, #9281	; 0x2441
   834c4:	f2c0 0008 	movt	r0, #8
   834c8:	4780      	blx	r0
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   834ca:	6b20      	ldr	r0, [r4, #48]	; 0x30
   834cc:	f242 6991 	movw	r9, #9873	; 0x2691
   834d0:	f2c0 0908 	movt	r9, #8
   834d4:	47c8      	blx	r9
		vPortFree( pxTCB );
   834d6:	4620      	mov	r0, r4
   834d8:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   834da:	682b      	ldr	r3, [r5, #0]
   834dc:	2b00      	cmp	r3, #0
   834de:	d1ce      	bne.n	8347e <prvIdleTask+0x22>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   834e0:	f648 207c 	movw	r0, #35452	; 0x8a7c
   834e4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   834e8:	6801      	ldr	r1, [r0, #0]
   834ea:	2901      	cmp	r1, #1
   834ec:	d9f5      	bls.n	834da <prvIdleTask+0x7e>
			{
				taskYIELD();
   834ee:	f242 32f5 	movw	r2, #9205	; 0x23f5
   834f2:	f2c0 0208 	movt	r2, #8
   834f6:	4790      	blx	r2
   834f8:	e7ef      	b.n	834da <prvIdleTask+0x7e>
   834fa:	bf00      	nop

000834fc <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   834fc:	b538      	push	{r3, r4, r5, lr}
   834fe:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   83500:	4605      	mov	r5, r0
   83502:	b930      	cbnz	r0, 83512 <vTaskDelayUntil+0x16>
   83504:	f242 4405 	movw	r4, #9221	; 0x2405
   83508:	f2c0 0408 	movt	r4, #8
   8350c:	47a0      	blx	r4
   8350e:	bf00      	nop
   83510:	e7fd      	b.n	8350e <vTaskDelayUntil+0x12>
		configASSERT( ( xTimeIncrement > 0U ) );
   83512:	b931      	cbnz	r1, 83522 <vTaskDelayUntil+0x26>
   83514:	f242 4505 	movw	r5, #9221	; 0x2405
   83518:	f2c0 0508 	movt	r5, #8
   8351c:	47a8      	blx	r5
   8351e:	bf00      	nop
   83520:	e7fd      	b.n	8351e <vTaskDelayUntil+0x22>

		vTaskSuspendAll();
   83522:	f243 1339 	movw	r3, #12601	; 0x3139
   83526:	f2c0 0308 	movt	r3, #8
   8352a:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   8352c:	8828      	ldrh	r0, [r5, #0]
   8352e:	1901      	adds	r1, r0, r4
   83530:	b28c      	uxth	r4, r1

			if( xTickCount < *pxPreviousWakeTime )
   83532:	f648 3264 	movw	r2, #35684	; 0x8b64
   83536:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8353a:	8813      	ldrh	r3, [r2, #0]
   8353c:	b299      	uxth	r1, r3
   8353e:	4288      	cmp	r0, r1
   83540:	d90b      	bls.n	8355a <vTaskDelayUntil+0x5e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   83542:	42a0      	cmp	r0, r4
   83544:	d934      	bls.n	835b0 <vTaskDelayUntil+0xb4>
   83546:	f648 3164 	movw	r1, #35684	; 0x8b64
   8354a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8354e:	8808      	ldrh	r0, [r1, #0]
   83550:	b282      	uxth	r2, r0
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   83552:	802c      	strh	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   83554:	4294      	cmp	r4, r2
   83556:	d91d      	bls.n	83594 <vTaskDelayUntil+0x98>
   83558:	e00a      	b.n	83570 <vTaskDelayUntil+0x74>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   8355a:	42a0      	cmp	r0, r4
   8355c:	d826      	bhi.n	835ac <vTaskDelayUntil+0xb0>
   8355e:	f648 3064 	movw	r0, #35684	; 0x8b64
   83562:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83566:	8802      	ldrh	r2, [r0, #0]
   83568:	b293      	uxth	r3, r2
   8356a:	429c      	cmp	r4, r3
   8356c:	d81e      	bhi.n	835ac <vTaskDelayUntil+0xb0>
   8356e:	e01f      	b.n	835b0 <vTaskDelayUntil+0xb4>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   83570:	f648 3348 	movw	r3, #35656	; 0x8b48
   83574:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83578:	6818      	ldr	r0, [r3, #0]
   8357a:	f100 0004 	add.w	r0, r0, #4
   8357e:	f242 3175 	movw	r1, #9077	; 0x2375
   83582:	f2c0 0108 	movt	r1, #8
   83586:	4788      	blx	r1
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   83588:	4620      	mov	r0, r4
   8358a:	f642 5271 	movw	r2, #11633	; 0x2d71
   8358e:	f2c0 0208 	movt	r2, #8
   83592:	4790      	blx	r2
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   83594:	f243 3011 	movw	r0, #13073	; 0x3311
   83598:	f2c0 0008 	movt	r0, #8
   8359c:	4780      	blx	r0

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   8359e:	b948      	cbnz	r0, 835b4 <vTaskDelayUntil+0xb8>
		{
			portYIELD_WITHIN_API();
   835a0:	f242 33f5 	movw	r3, #9205	; 0x23f5
   835a4:	f2c0 0308 	movt	r3, #8
   835a8:	4798      	blx	r3
   835aa:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   835ac:	802c      	strh	r4, [r5, #0]
   835ae:	e7df      	b.n	83570 <vTaskDelayUntil+0x74>
   835b0:	802c      	strh	r4, [r5, #0]
   835b2:	e7ef      	b.n	83594 <vTaskDelayUntil+0x98>
   835b4:	bd38      	pop	{r3, r4, r5, pc}
   835b6:	bf00      	nop

000835b8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   835b8:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   835ba:	f648 3344 	movw	r3, #35652	; 0x8b44
   835be:	f2c2 0307 	movt	r3, #8199	; 0x2007
   835c2:	6818      	ldr	r0, [r3, #0]
   835c4:	b9a8      	cbnz	r0, 835f2 <vTaskSwitchContext+0x3a>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   835c6:	f648 2178 	movw	r1, #35448	; 0x8a78
   835ca:	f2c2 0107 	movt	r1, #8199	; 0x2007
   835ce:	680a      	ldr	r2, [r1, #0]
   835d0:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   835d4:	ea4f 0083 	mov.w	r0, r3, lsl #2
   835d8:	f648 217c 	movw	r1, #35452	; 0x8a7c
   835dc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   835e0:	580a      	ldr	r2, [r1, r0]
   835e2:	bb52      	cbnz	r2, 8363a <vTaskSwitchContext+0x82>
   835e4:	f648 2378 	movw	r3, #35448	; 0x8a78
   835e8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   835ec:	6818      	ldr	r0, [r3, #0]
   835ee:	b988      	cbnz	r0, 83614 <vTaskSwitchContext+0x5c>
   835f0:	e009      	b.n	83606 <vTaskSwitchContext+0x4e>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   835f2:	f648 3184 	movw	r1, #35716	; 0x8b84
   835f6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   835fa:	f04f 0001 	mov.w	r0, #1
   835fe:	6008      	str	r0, [r1, #0]
   83600:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   83602:	681a      	ldr	r2, [r3, #0]
   83604:	b972      	cbnz	r2, 83624 <vTaskSwitchContext+0x6c>
   83606:	f242 4305 	movw	r3, #9221	; 0x2405
   8360a:	f2c0 0308 	movt	r3, #8
   8360e:	4798      	blx	r3
   83610:	bf00      	nop
   83612:	e7fd      	b.n	83610 <vTaskSwitchContext+0x58>
   83614:	f648 2378 	movw	r3, #35448	; 0x8a78
   83618:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8361c:	f648 217c 	movw	r1, #35452	; 0x8a7c
   83620:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83624:	681a      	ldr	r2, [r3, #0]
   83626:	f102 30ff 	add.w	r0, r2, #4294967295
   8362a:	6018      	str	r0, [r3, #0]
   8362c:	681a      	ldr	r2, [r3, #0]
   8362e:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   83632:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
   83636:	2a00      	cmp	r2, #0
   83638:	d0e3      	beq.n	83602 <vTaskSwitchContext+0x4a>
   8363a:	f648 2378 	movw	r3, #35448	; 0x8a78
   8363e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83642:	6819      	ldr	r1, [r3, #0]
   83644:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   83648:	f648 227c 	movw	r2, #35452	; 0x8a7c
   8364c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83650:	eb02 0380 	add.w	r3, r2, r0, lsl #2
   83654:	6859      	ldr	r1, [r3, #4]
   83656:	6848      	ldr	r0, [r1, #4]
   83658:	6058      	str	r0, [r3, #4]
   8365a:	f103 0208 	add.w	r2, r3, #8
   8365e:	4290      	cmp	r0, r2
   83660:	bf04      	itt	eq
   83662:	6840      	ldreq	r0, [r0, #4]
   83664:	6058      	streq	r0, [r3, #4]
   83666:	685b      	ldr	r3, [r3, #4]
   83668:	68d9      	ldr	r1, [r3, #12]
   8366a:	f648 3048 	movw	r0, #35656	; 0x8b48
   8366e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83672:	6001      	str	r1, [r0, #0]
   83674:	bd08      	pop	{r3, pc}
   83676:	bf00      	nop

00083678 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   83678:	b538      	push	{r3, r4, r5, lr}
   8367a:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   8367c:	b930      	cbnz	r0, 8368c <vTaskPlaceOnEventList+0x14>
   8367e:	f242 4405 	movw	r4, #9221	; 0x2405
   83682:	f2c0 0408 	movt	r4, #8
   83686:	47a0      	blx	r4
   83688:	bf00      	nop
   8368a:	e7fd      	b.n	83688 <vTaskPlaceOnEventList+0x10>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8368c:	f648 3548 	movw	r5, #35656	; 0x8b48
   83690:	f2c2 0507 	movt	r5, #8199	; 0x2007
   83694:	6829      	ldr	r1, [r5, #0]
   83696:	f101 0118 	add.w	r1, r1, #24
   8369a:	f242 3231 	movw	r2, #9009	; 0x2331
   8369e:	f2c0 0208 	movt	r2, #8
   836a2:	4790      	blx	r2

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   836a4:	6828      	ldr	r0, [r5, #0]
   836a6:	f100 0004 	add.w	r0, r0, #4
   836aa:	f242 3175 	movw	r1, #9077	; 0x2375
   836ae:	f2c0 0108 	movt	r1, #8
   836b2:	4788      	blx	r1
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   836b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   836b8:	4284      	cmp	r4, r0
   836ba:	d10c      	bne.n	836d6 <vTaskPlaceOnEventList+0x5e>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   836bc:	6829      	ldr	r1, [r5, #0]
   836be:	f648 2030 	movw	r0, #35376	; 0x8a30
   836c2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   836c6:	f101 0104 	add.w	r1, r1, #4
   836ca:	f242 3211 	movw	r2, #8977	; 0x2311
   836ce:	f2c0 0208 	movt	r2, #8
   836d2:	4790      	blx	r2
   836d4:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   836d6:	f648 3364 	movw	r3, #35684	; 0x8b64
   836da:	f2c2 0307 	movt	r3, #8199	; 0x2007
   836de:	881a      	ldrh	r2, [r3, #0]
   836e0:	18a1      	adds	r1, r4, r2
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   836e2:	b288      	uxth	r0, r1
   836e4:	f642 5371 	movw	r3, #11633	; 0x2d71
   836e8:	f2c0 0308 	movt	r3, #8
   836ec:	4798      	blx	r3
   836ee:	bd38      	pop	{r3, r4, r5, pc}

000836f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   836f0:	b538      	push	{r3, r4, r5, lr}
   836f2:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   836f4:	b930      	cbnz	r0, 83704 <vTaskPlaceOnEventListRestricted+0x14>
   836f6:	f242 4405 	movw	r4, #9221	; 0x2405
   836fa:	f2c0 0408 	movt	r4, #8
   836fe:	47a0      	blx	r4
   83700:	bf00      	nop
   83702:	e7fd      	b.n	83700 <vTaskPlaceOnEventListRestricted+0x10>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   83704:	f648 3448 	movw	r4, #35656	; 0x8b48
   83708:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8370c:	6821      	ldr	r1, [r4, #0]
   8370e:	f101 0118 	add.w	r1, r1, #24
   83712:	f242 3211 	movw	r2, #8977	; 0x2311
   83716:	f2c0 0208 	movt	r2, #8
   8371a:	4790      	blx	r2

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   8371c:	6820      	ldr	r0, [r4, #0]
   8371e:	f100 0004 	add.w	r0, r0, #4
   83722:	f242 3175 	movw	r1, #9077	; 0x2375
   83726:	f2c0 0108 	movt	r1, #8
   8372a:	4788      	blx	r1
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   8372c:	f648 3064 	movw	r0, #35684	; 0x8b64
   83730:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83734:	8803      	ldrh	r3, [r0, #0]
   83736:	18ea      	adds	r2, r5, r3
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   83738:	b290      	uxth	r0, r2
   8373a:	f642 5171 	movw	r1, #11633	; 0x2d71
   8373e:	f2c0 0108 	movt	r1, #8
   83742:	4788      	blx	r1
   83744:	bd38      	pop	{r3, r4, r5, pc}
   83746:	bf00      	nop

00083748 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   83748:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   8374a:	68c3      	ldr	r3, [r0, #12]
   8374c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   8374e:	b934      	cbnz	r4, 8375e <xTaskRemoveFromEventList+0x16>
   83750:	f242 4405 	movw	r4, #9221	; 0x2405
   83754:	f2c0 0408 	movt	r4, #8
   83758:	47a0      	blx	r4
   8375a:	bf00      	nop
   8375c:	e7fd      	b.n	8375a <xTaskRemoveFromEventList+0x12>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   8375e:	f104 0518 	add.w	r5, r4, #24
   83762:	4628      	mov	r0, r5
   83764:	f242 3175 	movw	r1, #9077	; 0x2375
   83768:	f2c0 0108 	movt	r1, #8
   8376c:	4788      	blx	r1

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8376e:	f648 3044 	movw	r0, #35652	; 0x8b44
   83772:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83776:	6802      	ldr	r2, [r0, #0]
   83778:	bb22      	cbnz	r2, 837c4 <xTaskRemoveFromEventList+0x7c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   8377a:	f104 0504 	add.w	r5, r4, #4
   8377e:	4628      	mov	r0, r5
   83780:	f242 3175 	movw	r1, #9077	; 0x2375
   83784:	f2c0 0108 	movt	r1, #8
   83788:	4788      	blx	r1
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   8378a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8378c:	f648 2278 	movw	r2, #35448	; 0x8a78
   83790:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83794:	6813      	ldr	r3, [r2, #0]
   83796:	4298      	cmp	r0, r3
   83798:	d904      	bls.n	837a4 <xTaskRemoveFromEventList+0x5c>
   8379a:	f648 2178 	movw	r1, #35448	; 0x8a78
   8379e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   837a2:	6008      	str	r0, [r1, #0]
   837a4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   837a8:	f648 207c 	movw	r0, #35452	; 0x8a7c
   837ac:	4602      	mov	r2, r0
   837ae:	f2c2 0207 	movt	r2, #8199	; 0x2007
   837b2:	eb02 0083 	add.w	r0, r2, r3, lsl #2
   837b6:	4629      	mov	r1, r5
   837b8:	f242 3311 	movw	r3, #8977	; 0x2311
   837bc:	f2c0 0308 	movt	r3, #8
   837c0:	4798      	blx	r3
   837c2:	e009      	b.n	837d8 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   837c4:	f648 304c 	movw	r0, #35660	; 0x8b4c
   837c8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   837cc:	4629      	mov	r1, r5
   837ce:	f242 3311 	movw	r3, #8977	; 0x2311
   837d2:	f2c0 0308 	movt	r3, #8
   837d6:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   837d8:	f648 3148 	movw	r1, #35656	; 0x8b48
   837dc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   837e0:	680a      	ldr	r2, [r1, #0]
   837e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   837e4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   837e6:	4298      	cmp	r0, r3
   837e8:	bf34      	ite	cc
   837ea:	2000      	movcc	r0, #0
   837ec:	2001      	movcs	r0, #1
   837ee:	bd38      	pop	{r3, r4, r5, pc}

000837f0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   837f0:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   837f2:	4603      	mov	r3, r0
   837f4:	b930      	cbnz	r0, 83804 <vTaskSetTimeOutState+0x14>
   837f6:	f242 4305 	movw	r3, #9221	; 0x2405
   837fa:	f2c0 0308 	movt	r3, #8
   837fe:	4798      	blx	r3
   83800:	bf00      	nop
   83802:	e7fd      	b.n	83800 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   83804:	f648 3260 	movw	r2, #35680	; 0x8b60
   83808:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8380c:	6810      	ldr	r0, [r2, #0]
   8380e:	6018      	str	r0, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   83810:	f648 3164 	movw	r1, #35684	; 0x8b64
   83814:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83818:	880a      	ldrh	r2, [r1, #0]
   8381a:	809a      	strh	r2, [r3, #4]
   8381c:	bd08      	pop	{r3, pc}
   8381e:	bf00      	nop

00083820 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   83820:	b538      	push	{r3, r4, r5, lr}
   83822:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   83824:	4604      	mov	r4, r0
   83826:	b930      	cbnz	r0, 83836 <xTaskCheckForTimeOut+0x16>
   83828:	f242 4305 	movw	r3, #9221	; 0x2405
   8382c:	f2c0 0308 	movt	r3, #8
   83830:	4798      	blx	r3
   83832:	bf00      	nop
   83834:	e7fd      	b.n	83832 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   83836:	b931      	cbnz	r1, 83846 <xTaskCheckForTimeOut+0x26>
   83838:	f242 4505 	movw	r5, #9221	; 0x2405
   8383c:	f2c0 0508 	movt	r5, #8
   83840:	47a8      	blx	r5
   83842:	bf00      	nop
   83844:	e7fd      	b.n	83842 <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
   83846:	f242 4319 	movw	r3, #9241	; 0x2419
   8384a:	f2c0 0308 	movt	r3, #8
   8384e:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   83850:	8828      	ldrh	r0, [r5, #0]
   83852:	f64f 72ff 	movw	r2, #65535	; 0xffff
   83856:	4290      	cmp	r0, r2
   83858:	d02c      	beq.n	838b4 <xTaskCheckForTimeOut+0x94>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   8385a:	f648 3160 	movw	r1, #35680	; 0x8b60
   8385e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83862:	680b      	ldr	r3, [r1, #0]
   83864:	6822      	ldr	r2, [r4, #0]
   83866:	429a      	cmp	r2, r3
   83868:	d008      	beq.n	8387c <xTaskCheckForTimeOut+0x5c>
   8386a:	f648 3164 	movw	r1, #35684	; 0x8b64
   8386e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83872:	880b      	ldrh	r3, [r1, #0]
   83874:	b29a      	uxth	r2, r3
   83876:	88a1      	ldrh	r1, [r4, #4]
   83878:	4291      	cmp	r1, r2
   8387a:	d91e      	bls.n	838ba <xTaskCheckForTimeOut+0x9a>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   8387c:	f648 3364 	movw	r3, #35684	; 0x8b64
   83880:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83884:	8819      	ldrh	r1, [r3, #0]
   83886:	88a2      	ldrh	r2, [r4, #4]
   83888:	1a8b      	subs	r3, r1, r2
   8388a:	b299      	uxth	r1, r3
   8388c:	4288      	cmp	r0, r1
   8388e:	d917      	bls.n	838c0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   83890:	f648 3364 	movw	r3, #35684	; 0x8b64
   83894:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83898:	8819      	ldrh	r1, [r3, #0]
   8389a:	b28b      	uxth	r3, r1
   8389c:	1ad2      	subs	r2, r2, r3
   8389e:	1880      	adds	r0, r0, r2
   838a0:	8028      	strh	r0, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   838a2:	4620      	mov	r0, r4
   838a4:	f243 74f1 	movw	r4, #14321	; 0x37f1
   838a8:	f2c0 0408 	movt	r4, #8
   838ac:	47a0      	blx	r4
			xReturn = pdFALSE;
   838ae:	f04f 0400 	mov.w	r4, #0
   838b2:	e007      	b.n	838c4 <xTaskCheckForTimeOut+0xa4>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   838b4:	f04f 0400 	mov.w	r4, #0
   838b8:	e004      	b.n	838c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   838ba:	f04f 0401 	mov.w	r4, #1
   838be:	e001      	b.n	838c4 <xTaskCheckForTimeOut+0xa4>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   838c0:	f04f 0401 	mov.w	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   838c4:	f242 4141 	movw	r1, #9281	; 0x2441
   838c8:	f2c0 0108 	movt	r1, #8
   838cc:	4788      	blx	r1

	return xReturn;
}
   838ce:	4620      	mov	r0, r4
   838d0:	bd38      	pop	{r3, r4, r5, pc}
   838d2:	bf00      	nop

000838d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   838d4:	f648 3384 	movw	r3, #35716	; 0x8b84
   838d8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   838dc:	f04f 0201 	mov.w	r2, #1
   838e0:	601a      	str	r2, [r3, #0]
   838e2:	4770      	bx	lr

000838e4 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   838e4:	f648 3348 	movw	r3, #35656	; 0x8b48
   838e8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   838ec:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   838ee:	4770      	bx	lr

000838f0 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   838f0:	f648 2348 	movw	r3, #35400	; 0x8a48
   838f4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   838f8:	6818      	ldr	r0, [r3, #0]
   838fa:	b148      	cbz	r0, 83910 <xTaskGetSchedulerState+0x20>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   838fc:	f648 3144 	movw	r1, #35652	; 0x8b44
   83900:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83904:	680a      	ldr	r2, [r1, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   83906:	2a00      	cmp	r2, #0
   83908:	bf14      	ite	ne
   8390a:	2002      	movne	r0, #2
   8390c:	2001      	moveq	r0, #1
   8390e:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   83910:	f04f 0000 	mov.w	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   83914:	4770      	bx	lr
   83916:	bf00      	nop

00083918 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   83918:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   8391a:	4604      	mov	r4, r0
   8391c:	2800      	cmp	r0, #0
   8391e:	d04e      	beq.n	839be <vTaskPriorityInherit+0xa6>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   83920:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   83922:	f648 3248 	movw	r2, #35656	; 0x8b48
   83926:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8392a:	6810      	ldr	r0, [r2, #0]
   8392c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   8392e:	428b      	cmp	r3, r1
   83930:	d245      	bcs.n	839be <vTaskPriorityInherit+0xa6>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   83932:	f648 3248 	movw	r2, #35656	; 0x8b48
   83936:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8393a:	6810      	ldr	r0, [r2, #0]
   8393c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   8393e:	f1c1 020a 	rsb	r2, r1, #10
   83942:	8322      	strh	r2, [r4, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   83944:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   83948:	f648 207c 	movw	r0, #35452	; 0x8a7c
   8394c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83950:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   83954:	6962      	ldr	r2, [r4, #20]
   83956:	428a      	cmp	r2, r1
   83958:	d12a      	bne.n	839b0 <vTaskPriorityInherit+0x98>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   8395a:	f104 0504 	add.w	r5, r4, #4
   8395e:	4628      	mov	r0, r5
   83960:	f242 3275 	movw	r2, #9077	; 0x2375
   83964:	f2c0 0208 	movt	r2, #8
   83968:	4790      	blx	r2
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   8396a:	f648 3348 	movw	r3, #35656	; 0x8b48
   8396e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83972:	6818      	ldr	r0, [r3, #0]
   83974:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   83976:	62e1      	str	r1, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   83978:	f648 2278 	movw	r2, #35448	; 0x8a78
   8397c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83980:	6813      	ldr	r3, [r2, #0]
   83982:	4299      	cmp	r1, r3
   83984:	d904      	bls.n	83990 <vTaskPriorityInherit+0x78>
   83986:	f648 2078 	movw	r0, #35448	; 0x8a78
   8398a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8398e:	6001      	str	r1, [r0, #0]
   83990:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83994:	f648 227c 	movw	r2, #35452	; 0x8a7c
   83998:	4613      	mov	r3, r2
   8399a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8399e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   839a2:	4629      	mov	r1, r5
   839a4:	f242 3211 	movw	r2, #8977	; 0x2311
   839a8:	f2c0 0208 	movt	r2, #8
   839ac:	4790      	blx	r2
   839ae:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   839b0:	f648 3348 	movw	r3, #35656	; 0x8b48
   839b4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   839b8:	6818      	ldr	r0, [r3, #0]
   839ba:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   839bc:	62e1      	str	r1, [r4, #44]	; 0x2c
   839be:	bd38      	pop	{r3, r4, r5, pc}

000839c0 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   839c0:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   839c2:	4604      	mov	r4, r0
   839c4:	b350      	cbz	r0, 83a1c <vTaskPriorityDisinherit+0x5c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   839c6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   839c8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   839ca:	429a      	cmp	r2, r3
   839cc:	d026      	beq.n	83a1c <vTaskPriorityDisinherit+0x5c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   839ce:	f100 0504 	add.w	r5, r0, #4
   839d2:	4628      	mov	r0, r5
   839d4:	f242 3175 	movw	r1, #9077	; 0x2375
   839d8:	f2c0 0108 	movt	r1, #8
   839dc:	4788      	blx	r1
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   839de:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   839e0:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   839e2:	f1c0 020a 	rsb	r2, r0, #10
   839e6:	8322      	strh	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   839e8:	f648 2378 	movw	r3, #35448	; 0x8a78
   839ec:	f2c2 0307 	movt	r3, #8199	; 0x2007
   839f0:	6819      	ldr	r1, [r3, #0]
   839f2:	4288      	cmp	r0, r1
   839f4:	d904      	bls.n	83a00 <vTaskPriorityDisinherit+0x40>
   839f6:	f648 2278 	movw	r2, #35448	; 0x8a78
   839fa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   839fe:	6010      	str	r0, [r2, #0]
   83a00:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   83a04:	f648 207c 	movw	r0, #35452	; 0x8a7c
   83a08:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83a0c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   83a10:	4629      	mov	r1, r5
   83a12:	f242 3211 	movw	r2, #8977	; 0x2311
   83a16:	f2c0 0208 	movt	r2, #8
   83a1a:	4790      	blx	r2
   83a1c:	bd38      	pop	{r3, r4, r5, pc}
   83a1e:	bf00      	nop

00083a20 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   83a20:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   83a22:	f242 4319 	movw	r3, #9241	; 0x2419
   83a26:	f2c0 0308 	movt	r3, #8
   83a2a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   83a2c:	f648 30c0 	movw	r0, #35776	; 0x8bc0
   83a30:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83a34:	6801      	ldr	r1, [r0, #0]
   83a36:	bb49      	cbnz	r1, 83a8c <prvCheckForValidListAndQueue+0x6c>
		{
			vListInitialise( &xActiveTimerList1 );
   83a38:	f648 3594 	movw	r5, #35732	; 0x8b94
   83a3c:	f2c2 0507 	movt	r5, #8199	; 0x2007
   83a40:	4628      	mov	r0, r5
   83a42:	f242 26f1 	movw	r6, #8945	; 0x22f1
   83a46:	f2c0 0608 	movt	r6, #8
   83a4a:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   83a4c:	f648 34a8 	movw	r4, #35752	; 0x8ba8
   83a50:	f2c2 0407 	movt	r4, #8199	; 0x2007
   83a54:	4620      	mov	r0, r4
   83a56:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   83a58:	f648 3290 	movw	r2, #35728	; 0x8b90
   83a5c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83a60:	6015      	str	r5, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   83a62:	f648 33c4 	movw	r3, #35780	; 0x8bc4
   83a66:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83a6a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   83a6c:	f04f 0005 	mov.w	r0, #5
   83a70:	f04f 010c 	mov.w	r1, #12
   83a74:	f04f 0200 	mov.w	r2, #0
   83a78:	f642 03b1 	movw	r3, #10417	; 0x28b1
   83a7c:	f2c0 0308 	movt	r3, #8
   83a80:	4798      	blx	r3
   83a82:	f648 31c0 	movw	r1, #35776	; 0x8bc0
   83a86:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83a8a:	6008      	str	r0, [r1, #0]
		}
	}
	taskEXIT_CRITICAL();
   83a8c:	f242 4041 	movw	r0, #9281	; 0x2441
   83a90:	f2c0 0008 	movt	r0, #8
   83a94:	4780      	blx	r0
   83a96:	bd70      	pop	{r4, r5, r6, pc}

00083a98 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   83a98:	b510      	push	{r4, lr}
   83a9a:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   83a9c:	8081      	strh	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   83a9e:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   83aa0:	4291      	cmp	r1, r2
   83aa2:	d813      	bhi.n	83acc <prvInsertTimerInActiveList+0x34>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   83aa4:	1ad0      	subs	r0, r2, r3
   83aa6:	8b21      	ldrh	r1, [r4, #24]
   83aa8:	b283      	uxth	r3, r0
   83aaa:	4299      	cmp	r1, r3
   83aac:	d921      	bls.n	83af2 <prvInsertTimerInActiveList+0x5a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   83aae:	f648 32c4 	movw	r2, #35780	; 0x8bc4
   83ab2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83ab6:	6810      	ldr	r0, [r2, #0]
   83ab8:	f104 0104 	add.w	r1, r4, #4
   83abc:	f242 3331 	movw	r3, #9009	; 0x2331
   83ac0:	f2c0 0308 	movt	r3, #8
   83ac4:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   83ac6:	f04f 0000 	mov.w	r0, #0
   83aca:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   83acc:	429a      	cmp	r2, r3
   83ace:	d201      	bcs.n	83ad4 <prvInsertTimerInActiveList+0x3c>
   83ad0:	4299      	cmp	r1, r3
   83ad2:	d211      	bcs.n	83af8 <prvInsertTimerInActiveList+0x60>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   83ad4:	f648 3390 	movw	r3, #35728	; 0x8b90
   83ad8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83adc:	6818      	ldr	r0, [r3, #0]
   83ade:	f104 0104 	add.w	r1, r4, #4
   83ae2:	f242 3231 	movw	r2, #9009	; 0x2331
   83ae6:	f2c0 0208 	movt	r2, #8
   83aea:	4790      	blx	r2
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   83aec:	f04f 0000 	mov.w	r0, #0
   83af0:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   83af2:	f04f 0001 	mov.w	r0, #1
   83af6:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   83af8:	f04f 0001 	mov.w	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   83afc:	bd10      	pop	{r4, pc}
   83afe:	bf00      	nop

00083b00 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   83b00:	b510      	push	{r4, lr}
   83b02:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   83b04:	f643 2321 	movw	r3, #14881	; 0x3a21
   83b08:	f2c0 0308 	movt	r3, #8
   83b0c:	4798      	blx	r3

	if( xTimerQueue != NULL )
   83b0e:	f648 30c0 	movw	r0, #35776	; 0x8bc0
   83b12:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83b16:	6801      	ldr	r1, [r0, #0]
   83b18:	b1b9      	cbz	r1, 83b4a <xTimerCreateTimerTask+0x4a>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   83b1a:	f04f 0209 	mov.w	r2, #9
   83b1e:	9200      	str	r2, [sp, #0]
   83b20:	f04f 0300 	mov.w	r3, #0
   83b24:	9301      	str	r3, [sp, #4]
   83b26:	9302      	str	r3, [sp, #8]
   83b28:	9303      	str	r3, [sp, #12]
   83b2a:	f643 40a9 	movw	r0, #15529	; 0x3ca9
   83b2e:	f2c0 0008 	movt	r0, #8
   83b32:	f647 313c 	movw	r1, #31548	; 0x7b3c
   83b36:	f2c0 0108 	movt	r1, #8
   83b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
   83b3e:	f642 54f5 	movw	r4, #11765	; 0x2df5
   83b42:	f2c0 0408 	movt	r4, #8
   83b46:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   83b48:	b930      	cbnz	r0, 83b58 <xTimerCreateTimerTask+0x58>
   83b4a:	f242 4405 	movw	r4, #9221	; 0x2405
   83b4e:	f2c0 0408 	movt	r4, #8
   83b52:	47a0      	blx	r4
   83b54:	bf00      	nop
   83b56:	e7fd      	b.n	83b54 <xTimerCreateTimerTask+0x54>
	return xReturn;
}
   83b58:	b004      	add	sp, #16
   83b5a:	bd10      	pop	{r4, pc}

00083b5c <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   83b5c:	b510      	push	{r4, lr}
   83b5e:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   83b60:	f648 34c0 	movw	r4, #35776	; 0x8bc0
   83b64:	f2c2 0407 	movt	r4, #8199	; 0x2007
   83b68:	6824      	ldr	r4, [r4, #0]
   83b6a:	b33c      	cbz	r4, 83bbc <xTimerGenericCommand+0x60>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   83b6c:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   83b6e:	f8ad 2008 	strh.w	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   83b72:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   83b74:	b9bb      	cbnz	r3, 83ba6 <xTimerGenericCommand+0x4a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   83b76:	f643 03f1 	movw	r3, #14577	; 0x38f1
   83b7a:	f2c0 0308 	movt	r3, #8
   83b7e:	4798      	blx	r3
   83b80:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   83b82:	f648 33c0 	movw	r3, #35776	; 0x8bc0
   83b86:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83b8a:	6818      	ldr	r0, [r3, #0]
   83b8c:	a901      	add	r1, sp, #4
   83b8e:	bf07      	ittee	eq
   83b90:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
   83b94:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   83b96:	2200      	movne	r2, #0
   83b98:	4613      	movne	r3, r2
   83b9a:	f642 141d 	movw	r4, #10525	; 0x291d
   83b9e:	f2c0 0408 	movt	r4, #8
   83ba2:	47a0      	blx	r4
   83ba4:	e00c      	b.n	83bc0 <xTimerGenericCommand+0x64>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   83ba6:	4620      	mov	r0, r4
   83ba8:	a901      	add	r1, sp, #4
   83baa:	461a      	mov	r2, r3
   83bac:	f04f 0300 	mov.w	r3, #0
   83bb0:	f642 249d 	movw	r4, #10909	; 0x2a9d
   83bb4:	f2c0 0408 	movt	r4, #8
   83bb8:	47a0      	blx	r4
   83bba:	e001      	b.n	83bc0 <xTimerGenericCommand+0x64>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   83bbc:	f04f 0000 	mov.w	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   83bc0:	b004      	add	sp, #16
   83bc2:	bd10      	pop	{r4, pc}

00083bc4 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   83bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83bc8:	b085      	sub	sp, #20
   83bca:	4682      	mov	sl, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   83bcc:	f243 134d 	movw	r3, #12621	; 0x314d
   83bd0:	f2c0 0308 	movt	r3, #8
   83bd4:	4798      	blx	r3
   83bd6:	4681      	mov	r9, r0

	if( xTimeNow < xLastTime )
   83bd8:	f648 30bc 	movw	r0, #35772	; 0x8bbc
   83bdc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83be0:	8801      	ldrh	r1, [r0, #0]
   83be2:	4549      	cmp	r1, r9
   83be4:	d951      	bls.n	83c8a <prvSampleTimeNow+0xc6>
   83be6:	e02d      	b.n	83c44 <prvSampleTimeNow+0x80>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   83be8:	68dc      	ldr	r4, [r3, #12]
   83bea:	8826      	ldrh	r6, [r4, #0]
   83bec:	b2b6      	uxth	r6, r6

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   83bee:	68dd      	ldr	r5, [r3, #12]
   83bf0:	68ec      	ldr	r4, [r5, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   83bf2:	f104 0504 	add.w	r5, r4, #4
   83bf6:	4628      	mov	r0, r5
   83bf8:	47c0      	blx	r8

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   83bfa:	6a61      	ldr	r1, [r4, #36]	; 0x24
   83bfc:	4620      	mov	r0, r4
   83bfe:	4788      	blx	r1

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   83c00:	69e0      	ldr	r0, [r4, #28]
   83c02:	2801      	cmp	r0, #1
   83c04:	d12d      	bne.n	83c62 <prvSampleTimeNow+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   83c06:	8b23      	ldrh	r3, [r4, #24]
   83c08:	18f2      	adds	r2, r6, r3
   83c0a:	b291      	uxth	r1, r2
			if( xReloadTime > xNextExpireTime )
   83c0c:	42b1      	cmp	r1, r6
   83c0e:	d909      	bls.n	83c24 <prvSampleTimeNow+0x60>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   83c10:	80a1      	strh	r1, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   83c12:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   83c14:	6838      	ldr	r0, [r7, #0]
   83c16:	4629      	mov	r1, r5
   83c18:	f242 3331 	movw	r3, #9009	; 0x2331
   83c1c:	f2c0 0308 	movt	r3, #8
   83c20:	4798      	blx	r3
   83c22:	e01e      	b.n	83c62 <prvSampleTimeNow+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   83c24:	f8cd b000 	str.w	fp, [sp]
   83c28:	4620      	mov	r0, r4
   83c2a:	4659      	mov	r1, fp
   83c2c:	4632      	mov	r2, r6
   83c2e:	465b      	mov	r3, fp
   83c30:	9c03      	ldr	r4, [sp, #12]
   83c32:	47a0      	blx	r4
				configASSERT( xResult );
   83c34:	b9a8      	cbnz	r0, 83c62 <prvSampleTimeNow+0x9e>
   83c36:	f242 4705 	movw	r7, #9221	; 0x2405
   83c3a:	f2c0 0708 	movt	r7, #8
   83c3e:	47b8      	blx	r7
   83c40:	bf00      	nop
   83c42:	e7fd      	b.n	83c40 <prvSampleTimeNow+0x7c>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   83c44:	f648 3790 	movw	r7, #35728	; 0x8b90
   83c48:	f2c2 0707 	movt	r7, #8199	; 0x2007
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   83c4c:	f242 3875 	movw	r8, #9077	; 0x2375
   83c50:	f2c0 0808 	movt	r8, #8
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   83c54:	f04f 0b00 	mov.w	fp, #0
   83c58:	f643 335d 	movw	r3, #15197	; 0x3b5d
   83c5c:	f2c0 0308 	movt	r3, #8
   83c60:	9303      	str	r3, [sp, #12]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   83c62:	683b      	ldr	r3, [r7, #0]
   83c64:	6818      	ldr	r0, [r3, #0]
   83c66:	2800      	cmp	r0, #0
   83c68:	d1be      	bne.n	83be8 <prvSampleTimeNow+0x24>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   83c6a:	f648 32c4 	movw	r2, #35780	; 0x8bc4
   83c6e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83c72:	6811      	ldr	r1, [r2, #0]
   83c74:	f648 3090 	movw	r0, #35728	; 0x8b90
   83c78:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83c7c:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   83c7e:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   83c80:	f04f 0301 	mov.w	r3, #1
   83c84:	f8ca 3000 	str.w	r3, [sl]
   83c88:	e003      	b.n	83c92 <prvSampleTimeNow+0xce>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   83c8a:	f04f 0200 	mov.w	r2, #0
   83c8e:	f8ca 2000 	str.w	r2, [sl]
	}

	xLastTime = xTimeNow;
   83c92:	f648 32bc 	movw	r2, #35772	; 0x8bbc
   83c96:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83c9a:	f8a2 9000 	strh.w	r9, [r2]

	return xTimeNow;
}
   83c9e:	4648      	mov	r0, r9
   83ca0:	b005      	add	sp, #20
   83ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83ca6:	bf00      	nop

00083ca8 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   83ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83cac:	b089      	sub	sp, #36	; 0x24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   83cae:	f648 3b90 	movw	fp, #35728	; 0x8b90
   83cb2:	f2c2 0b07 	movt	fp, #8199	; 0x2007
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   83cb6:	f243 1339 	movw	r3, #12601	; 0x3139
   83cba:	f2c0 0308 	movt	r3, #8
   83cbe:	9303      	str	r3, [sp, #12]
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   83cc0:	f643 3ac5 	movw	sl, #15301	; 0x3bc5
   83cc4:	f2c0 0a08 	movt	sl, #8
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   83cc8:	f8db 0000 	ldr.w	r0, [fp]
   83ccc:	6802      	ldr	r2, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
   83cce:	2a00      	cmp	r2, #0
   83cd0:	f000 80cd 	beq.w	83e6e <prvTimerTask+0x1c6>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   83cd4:	68c7      	ldr	r7, [r0, #12]
   83cd6:	883b      	ldrh	r3, [r7, #0]
   83cd8:	b29d      	uxth	r5, r3
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   83cda:	9803      	ldr	r0, [sp, #12]
   83cdc:	4780      	blx	r0
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   83cde:	a804      	add	r0, sp, #16
   83ce0:	47d0      	blx	sl
   83ce2:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   83ce4:	9a04      	ldr	r2, [sp, #16]
   83ce6:	2a00      	cmp	r2, #0
   83ce8:	d152      	bne.n	83d90 <prvTimerTask+0xe8>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   83cea:	4285      	cmp	r5, r0
   83cec:	d838      	bhi.n	83d60 <prvTimerTask+0xb8>
			{
				xTaskResumeAll();
   83cee:	f243 3011 	movw	r0, #13073	; 0x3311
   83cf2:	f2c0 0008 	movt	r0, #8
   83cf6:	4780      	blx	r0
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   83cf8:	f8db 2000 	ldr.w	r2, [fp]
   83cfc:	68d1      	ldr	r1, [r2, #12]
   83cfe:	68cc      	ldr	r4, [r1, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   83d00:	f104 0004 	add.w	r0, r4, #4
   83d04:	f242 3775 	movw	r7, #9077	; 0x2375
   83d08:	f2c0 0708 	movt	r7, #8
   83d0c:	47b8      	blx	r7
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   83d0e:	69e3      	ldr	r3, [r4, #28]
   83d10:	2b01      	cmp	r3, #1
   83d12:	d11f      	bne.n	83d54 <prvTimerTask+0xac>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   83d14:	8b20      	ldrh	r0, [r4, #24]
   83d16:	182a      	adds	r2, r5, r0
   83d18:	4620      	mov	r0, r4
   83d1a:	b291      	uxth	r1, r2
   83d1c:	4632      	mov	r2, r6
   83d1e:	462b      	mov	r3, r5
   83d20:	f643 2699 	movw	r6, #15001	; 0x3a99
   83d24:	f2c0 0608 	movt	r6, #8
   83d28:	47b0      	blx	r6
   83d2a:	2801      	cmp	r0, #1
   83d2c:	d112      	bne.n	83d54 <prvTimerTask+0xac>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   83d2e:	f04f 0300 	mov.w	r3, #0
   83d32:	9300      	str	r3, [sp, #0]
   83d34:	4620      	mov	r0, r4
   83d36:	4619      	mov	r1, r3
   83d38:	462a      	mov	r2, r5
   83d3a:	f643 355d 	movw	r5, #15197	; 0x3b5d
   83d3e:	f2c0 0508 	movt	r5, #8
   83d42:	47a8      	blx	r5
			configASSERT( xResult );
   83d44:	b930      	cbnz	r0, 83d54 <prvTimerTask+0xac>
   83d46:	f242 4705 	movw	r7, #9221	; 0x2405
   83d4a:	f2c0 0708 	movt	r7, #8
   83d4e:	47b8      	blx	r7
   83d50:	bf00      	nop
   83d52:	e7fd      	b.n	83d50 <prvTimerTask+0xa8>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   83d54:	6a61      	ldr	r1, [r4, #36]	; 0x24
   83d56:	4620      	mov	r0, r4
   83d58:	4788      	blx	r1
   83d5a:	e01e      	b.n	83d9a <prvTimerTask+0xf2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   83d5c:	f04f 0500 	mov.w	r5, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   83d60:	1bae      	subs	r6, r5, r6
   83d62:	f648 34c0 	movw	r4, #35776	; 0x8bc0
   83d66:	f2c2 0407 	movt	r4, #8199	; 0x2007
   83d6a:	6820      	ldr	r0, [r4, #0]
   83d6c:	b2b1      	uxth	r1, r6
   83d6e:	f642 551d 	movw	r5, #11549	; 0x2d1d
   83d72:	f2c0 0508 	movt	r5, #8
   83d76:	47a8      	blx	r5

				if( xTaskResumeAll() == pdFALSE )
   83d78:	f243 3711 	movw	r7, #13073	; 0x3311
   83d7c:	f2c0 0708 	movt	r7, #8
   83d80:	47b8      	blx	r7
   83d82:	b950      	cbnz	r0, 83d9a <prvTimerTask+0xf2>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   83d84:	f242 33f5 	movw	r3, #9205	; 0x23f5
   83d88:	f2c0 0308 	movt	r3, #8
   83d8c:	4798      	blx	r3
   83d8e:	e004      	b.n	83d9a <prvTimerTask+0xf2>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   83d90:	f243 3111 	movw	r1, #13073	; 0x3311
   83d94:	f2c0 0108 	movt	r1, #8
   83d98:	4788      	blx	r1
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   83d9a:	a804      	add	r0, sp, #16
   83d9c:	47d0      	blx	sl
   83d9e:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   83da0:	f648 36c0 	movw	r6, #35776	; 0x8bc0
   83da4:	f2c2 0607 	movt	r6, #8199	; 0x2007
   83da8:	f642 354d 	movw	r5, #11085	; 0x2b4d
   83dac:	f2c0 0508 	movt	r5, #8
		if( pxTimer != NULL )
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   83db0:	f242 3875 	movw	r8, #9077	; 0x2375
   83db4:	f2c0 0808 	movt	r8, #8
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   83db8:	f643 2999 	movw	r9, #15001	; 0x3a99
   83dbc:	f2c0 0908 	movt	r9, #8
   83dc0:	e04c      	b.n	83e5c <prvTimerTask+0x1b4>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   83dc2:	9c07      	ldr	r4, [sp, #28]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   83dc4:	b124      	cbz	r4, 83dd0 <prvTimerTask+0x128>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   83dc6:	6963      	ldr	r3, [r4, #20]
   83dc8:	b113      	cbz	r3, 83dd0 <prvTimerTask+0x128>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   83dca:	f104 0004 	add.w	r0, r4, #4
   83dce:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   83dd0:	9805      	ldr	r0, [sp, #20]
   83dd2:	2802      	cmp	r0, #2
   83dd4:	d02a      	beq.n	83e2c <prvTimerTask+0x184>
   83dd6:	2803      	cmp	r0, #3
   83dd8:	d03a      	beq.n	83e50 <prvTimerTask+0x1a8>
   83dda:	2800      	cmp	r0, #0
   83ddc:	d13e      	bne.n	83e5c <prvTimerTask+0x1b4>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   83dde:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   83de2:	8b22      	ldrh	r2, [r4, #24]
   83de4:	1899      	adds	r1, r3, r2
   83de6:	4620      	mov	r0, r4
   83de8:	b289      	uxth	r1, r1
   83dea:	463a      	mov	r2, r7
   83dec:	47c8      	blx	r9
   83dee:	2801      	cmp	r0, #1
   83df0:	d134      	bne.n	83e5c <prvTimerTask+0x1b4>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   83df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   83df4:	4620      	mov	r0, r4
   83df6:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   83df8:	69e0      	ldr	r0, [r4, #28]
   83dfa:	2801      	cmp	r0, #1
   83dfc:	d12e      	bne.n	83e5c <prvTimerTask+0x1b4>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   83dfe:	8b22      	ldrh	r2, [r4, #24]
   83e00:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   83e04:	1852      	adds	r2, r2, r1
   83e06:	f04f 0300 	mov.w	r3, #0
   83e0a:	9300      	str	r3, [sp, #0]
   83e0c:	4620      	mov	r0, r4
   83e0e:	4619      	mov	r1, r3
   83e10:	b292      	uxth	r2, r2
   83e12:	f643 345d 	movw	r4, #15197	; 0x3b5d
   83e16:	f2c0 0408 	movt	r4, #8
   83e1a:	47a0      	blx	r4
						configASSERT( xResult );
   83e1c:	b9f0      	cbnz	r0, 83e5c <prvTimerTask+0x1b4>
   83e1e:	f242 4505 	movw	r5, #9221	; 0x2405
   83e22:	f2c0 0508 	movt	r5, #8
   83e26:	47a8      	blx	r5
   83e28:	bf00      	nop
   83e2a:	e7fd      	b.n	83e28 <prvTimerTask+0x180>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   83e2c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   83e30:	8320      	strh	r0, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   83e32:	b930      	cbnz	r0, 83e42 <prvTimerTask+0x19a>
   83e34:	f242 4605 	movw	r6, #9221	; 0x2405
   83e38:	f2c0 0608 	movt	r6, #8
   83e3c:	47b0      	blx	r6
   83e3e:	bf00      	nop
   83e40:	e7fd      	b.n	83e3e <prvTimerTask+0x196>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   83e42:	1839      	adds	r1, r7, r0
   83e44:	4620      	mov	r0, r4
   83e46:	b289      	uxth	r1, r1
   83e48:	463a      	mov	r2, r7
   83e4a:	463b      	mov	r3, r7
   83e4c:	47c8      	blx	r9
   83e4e:	e005      	b.n	83e5c <prvTimerTask+0x1b4>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   83e50:	4620      	mov	r0, r4
   83e52:	f242 6391 	movw	r3, #9873	; 0x2691
   83e56:	f2c0 0308 	movt	r3, #8
   83e5a:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   83e5c:	6830      	ldr	r0, [r6, #0]
   83e5e:	a905      	add	r1, sp, #20
   83e60:	f04f 0200 	mov.w	r2, #0
   83e64:	4613      	mov	r3, r2
   83e66:	47a8      	blx	r5
   83e68:	2800      	cmp	r0, #0
   83e6a:	d1aa      	bne.n	83dc2 <prvTimerTask+0x11a>
   83e6c:	e72c      	b.n	83cc8 <prvTimerTask+0x20>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   83e6e:	9903      	ldr	r1, [sp, #12]
   83e70:	4788      	blx	r1
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   83e72:	a804      	add	r0, sp, #16
   83e74:	47d0      	blx	sl
   83e76:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   83e78:	9c04      	ldr	r4, [sp, #16]
   83e7a:	2c00      	cmp	r4, #0
   83e7c:	f43f af6e 	beq.w	83d5c <prvTimerTask+0xb4>
   83e80:	e786      	b.n	83d90 <prvTimerTask+0xe8>
   83e82:	bf00      	nop

00083e84 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   83e84:	b4f0      	push	{r4, r5, r6, r7}
   83e86:	b08c      	sub	sp, #48	; 0x30
   83e88:	4606      	mov	r6, r0
   83e8a:	460f      	mov	r7, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   83e8c:	ac01      	add	r4, sp, #4
   83e8e:	f647 3544 	movw	r5, #31556	; 0x7b44
   83e92:	f2c0 0508 	movt	r5, #8
   83e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   83e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   83e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   83e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   83e9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   83ea2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   83ea6:	9b01      	ldr	r3, [sp, #4]
   83ea8:	fbb7 f0f3 	udiv	r0, r7, r3
   83eac:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   83eb0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83eb4:	d952      	bls.n	83f5c <pwm_clocks_generate+0xd8>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   83eb6:	9902      	ldr	r1, [sp, #8]
   83eb8:	fbb7 f2f1 	udiv	r2, r7, r1
   83ebc:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   83ec0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83ec4:	d94d      	bls.n	83f62 <pwm_clocks_generate+0xde>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   83ec6:	9b03      	ldr	r3, [sp, #12]
   83ec8:	fbb7 f0f3 	udiv	r0, r7, r3
   83ecc:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   83ed0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83ed4:	d948      	bls.n	83f68 <pwm_clocks_generate+0xe4>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   83ed6:	9904      	ldr	r1, [sp, #16]
   83ed8:	fbb7 f2f1 	udiv	r2, r7, r1
   83edc:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   83ee0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83ee4:	d943      	bls.n	83f6e <pwm_clocks_generate+0xea>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   83ee6:	9b05      	ldr	r3, [sp, #20]
   83ee8:	fbb7 f0f3 	udiv	r0, r7, r3
   83eec:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   83ef0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83ef4:	d93e      	bls.n	83f74 <pwm_clocks_generate+0xf0>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   83ef6:	9906      	ldr	r1, [sp, #24]
   83ef8:	fbb7 f2f1 	udiv	r2, r7, r1
   83efc:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   83f00:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83f04:	d939      	bls.n	83f7a <pwm_clocks_generate+0xf6>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   83f06:	9b07      	ldr	r3, [sp, #28]
   83f08:	fbb7 f0f3 	udiv	r0, r7, r3
   83f0c:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   83f10:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83f14:	d934      	bls.n	83f80 <pwm_clocks_generate+0xfc>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   83f16:	9908      	ldr	r1, [sp, #32]
   83f18:	fbb7 f2f1 	udiv	r2, r7, r1
   83f1c:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   83f20:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83f24:	d92f      	bls.n	83f86 <pwm_clocks_generate+0x102>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   83f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83f28:	fbb7 f0f3 	udiv	r0, r7, r3
   83f2c:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   83f30:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83f34:	d92a      	bls.n	83f8c <pwm_clocks_generate+0x108>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   83f36:	990a      	ldr	r1, [sp, #40]	; 0x28
   83f38:	fbb7 f2f1 	udiv	r2, r7, r1
   83f3c:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   83f40:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83f44:	d925      	bls.n	83f92 <pwm_clocks_generate+0x10e>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   83f46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83f48:	fbb7 f0f3 	udiv	r0, r7, r3
   83f4c:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   83f50:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83f54:	d920      	bls.n	83f98 <pwm_clocks_generate+0x114>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   83f56:	f64f 70ff 	movw	r0, #65535	; 0xffff
   83f5a:	e021      	b.n	83fa0 <pwm_clocks_generate+0x11c>
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   83f5c:	f04f 0200 	mov.w	r2, #0
   83f60:	e01c      	b.n	83f9c <pwm_clocks_generate+0x118>
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
			break;
		}
		ul_pre++;
   83f62:	f04f 0201 	mov.w	r2, #1
   83f66:	e019      	b.n	83f9c <pwm_clocks_generate+0x118>
   83f68:	f04f 0202 	mov.w	r2, #2
   83f6c:	e016      	b.n	83f9c <pwm_clocks_generate+0x118>
   83f6e:	f04f 0203 	mov.w	r2, #3
   83f72:	e013      	b.n	83f9c <pwm_clocks_generate+0x118>
   83f74:	f04f 0204 	mov.w	r2, #4
   83f78:	e010      	b.n	83f9c <pwm_clocks_generate+0x118>
   83f7a:	f04f 0205 	mov.w	r2, #5
   83f7e:	e00d      	b.n	83f9c <pwm_clocks_generate+0x118>
   83f80:	f04f 0206 	mov.w	r2, #6
   83f84:	e00a      	b.n	83f9c <pwm_clocks_generate+0x118>
   83f86:	f04f 0207 	mov.w	r2, #7
   83f8a:	e007      	b.n	83f9c <pwm_clocks_generate+0x118>
   83f8c:	f04f 0208 	mov.w	r2, #8
   83f90:	e004      	b.n	83f9c <pwm_clocks_generate+0x118>
   83f92:	f04f 0209 	mov.w	r2, #9
   83f96:	e001      	b.n	83f9c <pwm_clocks_generate+0x118>
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   83f98:	f04f 020a 	mov.w	r2, #10
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
   83f9c:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
	}
}
   83fa0:	b00c      	add	sp, #48	; 0x30
   83fa2:	bcf0      	pop	{r4, r5, r6, r7}
   83fa4:	4770      	bx	lr
   83fa6:	bf00      	nop

00083fa8 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   83fa8:	b570      	push	{r4, r5, r6, lr}
   83faa:	4606      	mov	r6, r0
   83fac:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   83fae:	6808      	ldr	r0, [r1, #0]
   83fb0:	b158      	cbz	r0, 83fca <pwm_init+0x22>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   83fb2:	6889      	ldr	r1, [r1, #8]
   83fb4:	f643 6385 	movw	r3, #16005	; 0x3e85
   83fb8:	f2c0 0308 	movt	r3, #8
   83fbc:	4798      	blx	r3
		if (result == PWM_INVALID_ARGUMENT) {
   83fbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   83fc2:	4288      	cmp	r0, r1
   83fc4:	d014      	beq.n	83ff0 <pwm_init+0x48>
			return result;
		}

		clock = result;
   83fc6:	4605      	mov	r5, r0
   83fc8:	e001      	b.n	83fce <pwm_init+0x26>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   83fca:	f04f 0500 	mov.w	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   83fce:	6860      	ldr	r0, [r4, #4]
   83fd0:	b158      	cbz	r0, 83fea <pwm_init+0x42>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   83fd2:	68a1      	ldr	r1, [r4, #8]
   83fd4:	f643 6285 	movw	r2, #16005	; 0x3e85
   83fd8:	f2c0 0208 	movt	r2, #8
   83fdc:	4790      	blx	r2

		if (result == PWM_INVALID_ARGUMENT) {
   83fde:	f64f 73ff 	movw	r3, #65535	; 0xffff
   83fe2:	4298      	cmp	r0, r3
   83fe4:	d004      	beq.n	83ff0 <pwm_init+0x48>
			return result;
		}

		clock |= (result << 16);
   83fe6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   83fea:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   83fec:	f04f 0000 	mov.w	r0, #0
}
   83ff0:	bd70      	pop	{r4, r5, r6, pc}
   83ff2:	bf00      	nop

00083ff4 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   83ff4:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   83ff6:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   83ff8:	8a8d      	ldrh	r5, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   83ffa:	684a      	ldr	r2, [r1, #4]
   83ffc:	f002 040f 	and.w	r4, r2, #15
   84000:	4325      	orrs	r5, r4
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   84002:	890e      	ldrh	r6, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   84004:	4335      	orrs	r5, r6
   84006:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   84008:	ea45 2542 	orr.w	r5, r5, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   8400c:	7d8c      	ldrb	r4, [r1, #22]
   8400e:	ea45 4604 	orr.w	r6, r5, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   84012:	7dca      	ldrb	r2, [r1, #23]
   84014:	ea46 4542 	orr.w	r5, r6, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   84018:	7e0c      	ldrb	r4, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8401a:	ea45 4684 	orr.w	r6, r5, r4, lsl #18
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   8401e:	f103 0210 	add.w	r2, r3, #16
   84022:	ea4f 1542 	mov.w	r5, r2, lsl #5
   84026:	1944      	adds	r4, r0, r5
   84028:	5146      	str	r6, [r0, r5]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   8402a:	68ce      	ldr	r6, [r1, #12]
   8402c:	6066      	str	r6, [r4, #4]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   8402e:	690a      	ldr	r2, [r1, #16]
   84030:	eb00 1543 	add.w	r5, r0, r3, lsl #5
   84034:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   84038:	7d8c      	ldrb	r4, [r1, #22]
   8403a:	b13c      	cbz	r4, 8404c <pwm_channel_init+0x58>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   8403c:	8b8e      	ldrh	r6, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   8403e:	8b4a      	ldrh	r2, [r1, #26]
   84040:	ea42 4506 	orr.w	r5, r2, r6, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   84044:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   84048:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   8404c:	6c85      	ldr	r5, [r0, #72]	; 0x48
   8404e:	f04f 1601 	mov.w	r6, #65537	; 0x10001
   84052:	fa06 f603 	lsl.w	r6, r6, r3
   84056:	ea6f 0206 	mvn.w	r2, r6
   8405a:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   8405c:	7fce      	ldrb	r6, [r1, #31]
   8405e:	fa06 f603 	lsl.w	r6, r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   84062:	7f8c      	ldrb	r4, [r1, #30]
   84064:	fa04 f403 	lsl.w	r4, r4, r3
   84068:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8406c:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   8406e:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   84070:	6c45      	ldr	r5, [r0, #68]	; 0x44
   84072:	402a      	ands	r2, r5
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   84074:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   84078:	fa05 f503 	lsl.w	r5, r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   8407c:	f891 4020 	ldrb.w	r4, [r1, #32]
   84080:	fa04 f403 	lsl.w	r4, r4, r3
   84084:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   84088:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   8408a:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   8408c:	f04f 0201 	mov.w	r2, #1
   84090:	fa02 f203 	lsl.w	r2, r2, r3
	if (p_channel->b_sync_ch) {
   84094:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   84098:	b11c      	cbz	r4, 840a2 <pwm_channel_init+0xae>
		p_pwm->PWM_SCM |= channel;
   8409a:	6a04      	ldr	r4, [r0, #32]
   8409c:	4314      	orrs	r4, r2
   8409e:	6204      	str	r4, [r0, #32]
   840a0:	e003      	b.n	840aa <pwm_channel_init+0xb6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   840a2:	6a04      	ldr	r4, [r0, #32]
   840a4:	ea24 0402 	bic.w	r4, r4, r2
   840a8:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   840aa:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   840ae:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   840b0:	6e84      	ldr	r4, [r0, #104]	; 0x68
   840b2:	bf0c      	ite	eq
   840b4:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   840b6:	4394      	bicne	r4, r2
   840b8:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   840ba:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   840be:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   840c0:	6e84      	ldr	r4, [r0, #104]	; 0x68
   840c2:	bf0c      	ite	eq
   840c4:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   840c8:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   840cc:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   840ce:	2b03      	cmp	r3, #3
   840d0:	d80f      	bhi.n	840f2 <pwm_channel_init+0xfe>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   840d2:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   840d4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   840d8:	f04f 02ff 	mov.w	r2, #255	; 0xff
   840dc:	fa02 f203 	lsl.w	r2, r2, r3
   840e0:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   840e4:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   840e8:	fa01 f303 	lsl.w	r3, r1, r3
   840ec:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE1 = fault_enable_reg;
   840ee:	66c2      	str	r2, [r0, #108]	; 0x6c
   840f0:	e010      	b.n	84114 <pwm_channel_init+0x120>
	} else {
		ch_num -= 4;
   840f2:	f1a3 0304 	sub.w	r3, r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   840f6:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   840f8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   840fc:	f04f 02ff 	mov.w	r2, #255	; 0xff
   84100:	fa02 f203 	lsl.w	r2, r2, r3
   84104:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   84108:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   8410c:	fa01 f303 	lsl.w	r3, r1, r3
   84110:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE2 = fault_enable_reg;
   84112:	6702      	str	r2, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   84114:	f04f 0000 	mov.w	r0, #0
   84118:	bc70      	pop	{r4, r5, r6}
   8411a:	4770      	bx	lr

0008411c <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   8411c:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   8411e:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   84120:	690b      	ldr	r3, [r1, #16]
   84122:	4293      	cmp	r3, r2
   84124:	d307      	bcc.n	84136 <pwm_channel_update_duty+0x1a>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   84126:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   84128:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   8412c:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   84130:	f04f 0000 	mov.w	r0, #0
   84134:	e001      	b.n	8413a <pwm_channel_update_duty+0x1e>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   84136:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   8413a:	bc10      	pop	{r4}
   8413c:	4770      	bx	lr
   8413e:	bf00      	nop

00084140 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   84140:	f04f 0301 	mov.w	r3, #1
   84144:	fa03 f101 	lsl.w	r1, r3, r1
   84148:	6041      	str	r1, [r0, #4]
   8414a:	4770      	bx	lr

0008414c <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   8414c:	f04f 0301 	mov.w	r3, #1
   84150:	fa03 f101 	lsl.w	r1, r3, r1
   84154:	6081      	str	r1, [r0, #8]
   84156:	4770      	bx	lr

00084158 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   84158:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8415a:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   8415e:	f2c0 5001 	movt	r0, #1281	; 0x501
   84162:	f644 33bd 	movw	r3, #19389	; 0x4bbd
   84166:	f2c0 0308 	movt	r3, #8
   8416a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8416c:	f04f 0000 	mov.w	r0, #0
   84170:	f04f 013e 	mov.w	r1, #62	; 0x3e
   84174:	f244 7295 	movw	r2, #18325	; 0x4795
   84178:	f2c0 0208 	movt	r2, #8
   8417c:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8417e:	f644 0405 	movw	r4, #18437	; 0x4805
   84182:	f2c0 0408 	movt	r4, #8
   84186:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   84188:	2800      	cmp	r0, #0
   8418a:	d0fc      	beq.n	84186 <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8418c:	f644 0015 	movw	r0, #18453	; 0x4815
   84190:	f2c0 0008 	movt	r0, #8
   84194:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   84196:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   8419a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8419e:	f643 7301 	movw	r3, #16129	; 0x3f01
   841a2:	f2c2 030d 	movt	r3, #8205	; 0x200d
   841a6:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   841a8:	f644 0425 	movw	r4, #18469	; 0x4825
   841ac:	f2c0 0408 	movt	r4, #8
   841b0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   841b2:	2800      	cmp	r0, #0
   841b4:	d0fc      	beq.n	841b0 <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   841b6:	f04f 0010 	mov.w	r0, #16
   841ba:	f244 62f5 	movw	r2, #18165	; 0x46f5
   841be:	f2c0 0208 	movt	r2, #8
   841c2:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   841c4:	f644 10f5 	movw	r0, #18933	; 0x49f5
   841c8:	f2c0 0008 	movt	r0, #8
   841cc:	4780      	blx	r0

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   841ce:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   841d2:	f2c0 5001 	movt	r0, #1281	; 0x501
   841d6:	f644 31bd 	movw	r1, #19389	; 0x4bbd
   841da:	f2c0 0108 	movt	r1, #8
   841de:	4788      	blx	r1
   841e0:	bd10      	pop	{r4, pc}
   841e2:	bf00      	nop

000841e4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   841e4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   841e6:	f641 2350 	movw	r3, #6736	; 0x1a50
   841ea:	f2c4 030e 	movt	r3, #16398	; 0x400e
   841ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   841f2:	605a      	str	r2, [r3, #4]
   841f4:	f04f 000b 	mov.w	r0, #11
   841f8:	f644 0435 	movw	r4, #18485	; 0x4835
   841fc:	f2c0 0408 	movt	r4, #8
   84200:	47a0      	blx	r4
   84202:	f04f 000c 	mov.w	r0, #12
   84206:	47a0      	blx	r4
   84208:	f04f 000d 	mov.w	r0, #13
   8420c:	47a0      	blx	r4
   8420e:	f04f 000e 	mov.w	r0, #14
   84212:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   84214:	f04f 003b 	mov.w	r0, #59	; 0x3b
   84218:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8421c:	f244 4449 	movw	r4, #17481	; 0x4449
   84220:	f2c0 0408 	movt	r4, #8
   84224:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   84226:	f04f 0055 	mov.w	r0, #85	; 0x55
   8422a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8422e:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   84230:	f04f 0056 	mov.w	r0, #86	; 0x56
   84234:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84238:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8423a:	f04f 0068 	mov.w	r0, #104	; 0x68
   8423e:	f04f 0179 	mov.w	r1, #121	; 0x79
   84242:	f6c2 0100 	movt	r1, #10240	; 0x2800
   84246:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   84248:	f04f 005c 	mov.w	r0, #92	; 0x5c
   8424c:	f04f 0101 	mov.w	r1, #1
   84250:	f6c2 0100 	movt	r1, #10240	; 0x2800
   84254:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   84256:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   8425a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8425e:	f44f 7140 	mov.w	r1, #768	; 0x300
   84262:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   84266:	f244 336d 	movw	r3, #17261	; 0x436d
   8426a:	f2c0 0308 	movt	r3, #8
   8426e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   84270:	f04f 002b 	mov.w	r0, #43	; 0x2b
   84274:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   84278:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8427a:	f04f 002a 	mov.w	r0, #42	; 0x2a
   8427e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   84282:	47a0      	blx	r4
   84284:	bd10      	pop	{r4, pc}
   84286:	bf00      	nop

00084288 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   84288:	b10a      	cbz	r2, 8428e <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   8428a:	6641      	str	r1, [r0, #100]	; 0x64
   8428c:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8428e:	6601      	str	r1, [r0, #96]	; 0x60
   84290:	4770      	bx	lr
   84292:	bf00      	nop

00084294 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   84294:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   84296:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8429a:	d016      	beq.n	842ca <pio_set_peripheral+0x36>
   8429c:	d804      	bhi.n	842a8 <pio_set_peripheral+0x14>
   8429e:	b1c9      	cbz	r1, 842d4 <pio_set_peripheral+0x40>
   842a0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   842a4:	d115      	bne.n	842d2 <pio_set_peripheral+0x3e>
   842a6:	e009      	b.n	842bc <pio_set_peripheral+0x28>
   842a8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   842ac:	d012      	beq.n	842d4 <pio_set_peripheral+0x40>
   842ae:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   842b2:	d00f      	beq.n	842d4 <pio_set_peripheral+0x40>
   842b4:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   842b8:	d10b      	bne.n	842d2 <pio_set_peripheral+0x3e>
   842ba:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   842bc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   842be:	6f01      	ldr	r1, [r0, #112]	; 0x70
   842c0:	400b      	ands	r3, r1
   842c2:	ea23 0302 	bic.w	r3, r3, r2
   842c6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   842c8:	e003      	b.n	842d2 <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   842ca:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   842cc:	ea42 0103 	orr.w	r1, r2, r3
   842d0:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   842d2:	6042      	str	r2, [r0, #4]
   842d4:	4770      	bx	lr
   842d6:	bf00      	nop

000842d8 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   842d8:	6441      	str	r1, [r0, #68]	; 0x44
   842da:	4770      	bx	lr

000842dc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   842dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   842de:	4604      	mov	r4, r0
   842e0:	460d      	mov	r5, r1
   842e2:	4616      	mov	r6, r2
   842e4:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   842e6:	f244 23d9 	movw	r3, #17113	; 0x42d9
   842ea:	f2c0 0308 	movt	r3, #8
   842ee:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   842f0:	4620      	mov	r0, r4
   842f2:	4629      	mov	r1, r5
   842f4:	9a06      	ldr	r2, [sp, #24]
   842f6:	f244 2389 	movw	r3, #17033	; 0x4289
   842fa:	f2c0 0308 	movt	r3, #8
   842fe:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   84300:	b10f      	cbz	r7, 84306 <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   84302:	6525      	str	r5, [r4, #80]	; 0x50
   84304:	e000      	b.n	84308 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   84306:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   84308:	b10e      	cbz	r6, 8430e <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   8430a:	6325      	str	r5, [r4, #48]	; 0x30
   8430c:	e000      	b.n	84310 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8430e:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   84310:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   84312:	6025      	str	r5, [r4, #0]
   84314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84316:	bf00      	nop

00084318 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   84318:	b570      	push	{r4, r5, r6, lr}
   8431a:	4604      	mov	r4, r0
   8431c:	460d      	mov	r5, r1
   8431e:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   84320:	f244 23d9 	movw	r3, #17113	; 0x42d9
   84324:	f2c0 0308 	movt	r3, #8
   84328:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   8432a:	4620      	mov	r0, r4
   8432c:	4629      	mov	r1, r5
   8432e:	f006 0201 	and.w	r2, r6, #1
   84332:	f244 2389 	movw	r3, #17033	; 0x4289
   84336:	f2c0 0308 	movt	r3, #8
   8433a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8433c:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   84340:	bf14      	ite	ne
   84342:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   84344:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   84346:	f016 0f02 	tst.w	r6, #2
   8434a:	d002      	beq.n	84352 <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   8434c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   84350:	e004      	b.n	8435c <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   84352:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_DIFSR = ul_mask;
   84356:	bf18      	it	ne
   84358:	f8c4 5084 	strne.w	r5, [r4, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8435c:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   8435e:	6025      	str	r5, [r4, #0]
   84360:	bd70      	pop	{r4, r5, r6, pc}
   84362:	bf00      	nop

00084364 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   84364:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   84366:	4770      	bx	lr

00084368 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   84368:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8436a:	4770      	bx	lr

0008436c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   8436c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8436e:	b083      	sub	sp, #12
   84370:	4607      	mov	r7, r0
   84372:	460e      	mov	r6, r1
   84374:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   84376:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8437a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8437e:	d036      	beq.n	843ee <pio_configure_pin_group+0x82>
   84380:	d806      	bhi.n	84390 <pio_configure_pin_group+0x24>
   84382:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   84386:	d00a      	beq.n	8439e <pio_configure_pin_group+0x32>
   84388:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   8438c:	d14d      	bne.n	8442a <pio_configure_pin_group+0xbe>
   8438e:	e01a      	b.n	843c6 <pio_configure_pin_group+0x5a>
   84390:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   84394:	d033      	beq.n	843fe <pio_configure_pin_group+0x92>
   84396:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8439a:	d146      	bne.n	8442a <pio_configure_pin_group+0xbe>
   8439c:	e02f      	b.n	843fe <pio_configure_pin_group+0x92>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8439e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   843a2:	4632      	mov	r2, r6
   843a4:	f244 2395 	movw	r3, #17045	; 0x4295
   843a8:	f2c0 0308 	movt	r3, #8
   843ac:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   843ae:	4638      	mov	r0, r7
   843b0:	4631      	mov	r1, r6
   843b2:	f005 0201 	and.w	r2, r5, #1
   843b6:	f244 2389 	movw	r3, #17033	; 0x4289
   843ba:	f2c0 0308 	movt	r3, #8
   843be:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   843c0:	f04f 0001 	mov.w	r0, #1
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   843c4:	e033      	b.n	8442e <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   843c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   843ca:	4632      	mov	r2, r6
   843cc:	f244 2395 	movw	r3, #17045	; 0x4295
   843d0:	f2c0 0308 	movt	r3, #8
   843d4:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   843d6:	4638      	mov	r0, r7
   843d8:	4631      	mov	r1, r6
   843da:	f005 0201 	and.w	r2, r5, #1
   843de:	f244 2389 	movw	r3, #17033	; 0x4289
   843e2:	f2c0 0308 	movt	r3, #8
   843e6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   843e8:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   843ec:	e01f      	b.n	8442e <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   843ee:	f244 3319 	movw	r3, #17177	; 0x4319
   843f2:	f2c0 0308 	movt	r3, #8
   843f6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   843f8:	f04f 0001 	mov.w	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   843fc:	e017      	b.n	8442e <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   843fe:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   84402:	f005 0001 	and.w	r0, r5, #1
   84406:	9000      	str	r0, [sp, #0]
   84408:	4638      	mov	r0, r7
   8440a:	4631      	mov	r1, r6
   8440c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   84410:	bf14      	ite	ne
   84412:	2200      	movne	r2, #0
   84414:	2201      	moveq	r2, #1
   84416:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8441a:	f244 24dd 	movw	r4, #17117	; 0x42dd
   8441e:	f2c0 0408 	movt	r4, #8
   84422:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   84424:	f04f 0001 	mov.w	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   84428:	e001      	b.n	8442e <pio_configure_pin_group+0xc2>

	default:
		return 0;
   8442a:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   8442e:	b003      	add	sp, #12
   84430:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84432:	bf00      	nop

00084434 <pio_get_pin_group>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84434:	ea4f 1050 	mov.w	r0, r0, lsr #5
   84438:	f500 1100 	add.w	r1, r0, #2097152	; 0x200000
   8443c:	f201 7207 	addw	r2, r1, #1799	; 0x707
#endif
	return p_pio;
}
   84440:	ea4f 2042 	mov.w	r0, r2, lsl #9
   84444:	4770      	bx	lr
   84446:	bf00      	nop

00084448 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   84448:	b5f0      	push	{r4, r5, r6, r7, lr}
   8444a:	b083      	sub	sp, #12
   8444c:	4607      	mov	r7, r0
   8444e:	460d      	mov	r5, r1
	Pio *p_pio = pio_get_pin_group(ul_pin);
   84450:	f244 4335 	movw	r3, #17461	; 0x4435
   84454:	f2c0 0308 	movt	r3, #8
   84458:	4798      	blx	r3
   8445a:	4606      	mov	r6, r0

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8445c:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   84460:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   84464:	d041      	beq.n	844ea <pio_configure_pin+0xa2>
   84466:	d806      	bhi.n	84476 <pio_configure_pin+0x2e>
   84468:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8446c:	d00a      	beq.n	84484 <pio_configure_pin+0x3c>
   8446e:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   84472:	d162      	bne.n	8453a <pio_configure_pin+0xf2>
   84474:	e020      	b.n	844b8 <pio_configure_pin+0x70>
   84476:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   8447a:	d044      	beq.n	84506 <pio_configure_pin+0xbe>
   8447c:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   84480:	d15b      	bne.n	8453a <pio_configure_pin+0xf2>
   84482:	e040      	b.n	84506 <pio_configure_pin+0xbe>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   84484:	f007 001f 	and.w	r0, r7, #31
   84488:	f04f 0401 	mov.w	r4, #1
   8448c:	fa04 f700 	lsl.w	r7, r4, r0
   84490:	4630      	mov	r0, r6
   84492:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   84496:	463a      	mov	r2, r7
   84498:	f244 2395 	movw	r3, #17045	; 0x4295
   8449c:	f2c0 0308 	movt	r3, #8
   844a0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   844a2:	4630      	mov	r0, r6
   844a4:	4639      	mov	r1, r7
   844a6:	ea05 0204 	and.w	r2, r5, r4
   844aa:	f244 2389 	movw	r3, #17033	; 0x4289
   844ae:	f2c0 0308 	movt	r3, #8
   844b2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   844b4:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   844b6:	e042      	b.n	8453e <pio_configure_pin+0xf6>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   844b8:	f007 071f 	and.w	r7, r7, #31
   844bc:	f04f 0401 	mov.w	r4, #1
   844c0:	fa04 f707 	lsl.w	r7, r4, r7
   844c4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   844c8:	463a      	mov	r2, r7
   844ca:	f244 2395 	movw	r3, #17045	; 0x4295
   844ce:	f2c0 0308 	movt	r3, #8
   844d2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   844d4:	4630      	mov	r0, r6
   844d6:	4639      	mov	r1, r7
   844d8:	ea05 0204 	and.w	r2, r5, r4
   844dc:	f244 2389 	movw	r3, #17033	; 0x4289
   844e0:	f2c0 0308 	movt	r3, #8
   844e4:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   844e6:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   844e8:	e029      	b.n	8453e <pio_configure_pin+0xf6>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   844ea:	f007 021f 	and.w	r2, r7, #31
   844ee:	f04f 0401 	mov.w	r4, #1
   844f2:	fa04 f102 	lsl.w	r1, r4, r2
   844f6:	462a      	mov	r2, r5
   844f8:	f244 3319 	movw	r3, #17177	; 0x4319
   844fc:	f2c0 0308 	movt	r3, #8
   84500:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   84502:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   84504:	e01b      	b.n	8453e <pio_configure_pin+0xf6>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   84506:	f007 011f 	and.w	r1, r7, #31
   8450a:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8450e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   84512:	ea05 0004 	and.w	r0, r5, r4
   84516:	9000      	str	r0, [sp, #0]
   84518:	4630      	mov	r0, r6
   8451a:	fa04 f101 	lsl.w	r1, r4, r1
   8451e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   84522:	bf14      	ite	ne
   84524:	2200      	movne	r2, #0
   84526:	2201      	moveq	r2, #1
   84528:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8452c:	f244 25dd 	movw	r5, #17117	; 0x42dd
   84530:	f2c0 0508 	movt	r5, #8
   84534:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   84536:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   84538:	e001      	b.n	8453e <pio_configure_pin+0xf6>

	default:
		return 0;
   8453a:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   8453e:	b003      	add	sp, #12
   84540:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84542:	bf00      	nop

00084544 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   84544:	b570      	push	{r4, r5, r6, lr}
   84546:	4606      	mov	r6, r0
   84548:	460c      	mov	r4, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8454a:	f244 3365 	movw	r3, #17253	; 0x4365
   8454e:	f2c0 0308 	movt	r3, #8
   84552:	4798      	blx	r3
   84554:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   84556:	4630      	mov	r0, r6
   84558:	f244 3169 	movw	r1, #17257	; 0x4369
   8455c:	f2c0 0108 	movt	r1, #8
   84560:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   84562:	4005      	ands	r5, r0
   84564:	f000 808c 	beq.w	84680 <pio_handler_process+0x13c>
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   84568:	f648 30c8 	movw	r0, #35784	; 0x8bc8
   8456c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84570:	6800      	ldr	r0, [r0, #0]
   84572:	42a0      	cmp	r0, r4
   84574:	d10c      	bne.n	84590 <pio_handler_process+0x4c>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   84576:	f648 32c8 	movw	r2, #35784	; 0x8bc8
   8457a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8457e:	6851      	ldr	r1, [r2, #4]
   84580:	420d      	tst	r5, r1
   84582:	d005      	beq.n	84590 <pio_handler_process+0x4c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   84584:	4616      	mov	r6, r2
   84586:	68d3      	ldr	r3, [r2, #12]
   84588:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8458a:	6871      	ldr	r1, [r6, #4]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8458c:	438d      	bics	r5, r1
   8458e:	d077      	beq.n	84680 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   84590:	f648 30c8 	movw	r0, #35784	; 0x8bc8
   84594:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84598:	6900      	ldr	r0, [r0, #16]
   8459a:	42a0      	cmp	r0, r4
   8459c:	d10c      	bne.n	845b8 <pio_handler_process+0x74>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8459e:	f648 32c8 	movw	r2, #35784	; 0x8bc8
   845a2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   845a6:	6951      	ldr	r1, [r2, #20]
   845a8:	420d      	tst	r5, r1
   845aa:	d005      	beq.n	845b8 <pio_handler_process+0x74>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   845ac:	4616      	mov	r6, r2
   845ae:	69d3      	ldr	r3, [r2, #28]
   845b0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   845b2:	6971      	ldr	r1, [r6, #20]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   845b4:	438d      	bics	r5, r1
   845b6:	d063      	beq.n	84680 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   845b8:	f648 30c8 	movw	r0, #35784	; 0x8bc8
   845bc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   845c0:	6a00      	ldr	r0, [r0, #32]
   845c2:	42a0      	cmp	r0, r4
   845c4:	d10c      	bne.n	845e0 <pio_handler_process+0x9c>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   845c6:	f648 32c8 	movw	r2, #35784	; 0x8bc8
   845ca:	f2c2 0207 	movt	r2, #8199	; 0x2007
   845ce:	6a51      	ldr	r1, [r2, #36]	; 0x24
   845d0:	420d      	tst	r5, r1
   845d2:	d005      	beq.n	845e0 <pio_handler_process+0x9c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   845d4:	4616      	mov	r6, r2
   845d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   845d8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   845da:	6a71      	ldr	r1, [r6, #36]	; 0x24

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   845dc:	438d      	bics	r5, r1
   845de:	d04f      	beq.n	84680 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   845e0:	f648 30c8 	movw	r0, #35784	; 0x8bc8
   845e4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   845e8:	6b00      	ldr	r0, [r0, #48]	; 0x30
   845ea:	42a0      	cmp	r0, r4
   845ec:	d10c      	bne.n	84608 <pio_handler_process+0xc4>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   845ee:	f648 32c8 	movw	r2, #35784	; 0x8bc8
   845f2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   845f6:	6b51      	ldr	r1, [r2, #52]	; 0x34
   845f8:	420d      	tst	r5, r1
   845fa:	d005      	beq.n	84608 <pio_handler_process+0xc4>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   845fc:	4616      	mov	r6, r2
   845fe:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   84600:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   84602:	6b71      	ldr	r1, [r6, #52]	; 0x34

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   84604:	438d      	bics	r5, r1
   84606:	d03b      	beq.n	84680 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   84608:	f648 30c8 	movw	r0, #35784	; 0x8bc8
   8460c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84610:	6c00      	ldr	r0, [r0, #64]	; 0x40
   84612:	42a0      	cmp	r0, r4
   84614:	d10c      	bne.n	84630 <pio_handler_process+0xec>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   84616:	f648 32c8 	movw	r2, #35784	; 0x8bc8
   8461a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8461e:	6c51      	ldr	r1, [r2, #68]	; 0x44
   84620:	420d      	tst	r5, r1
   84622:	d005      	beq.n	84630 <pio_handler_process+0xec>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   84624:	4616      	mov	r6, r2
   84626:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   84628:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8462a:	6c71      	ldr	r1, [r6, #68]	; 0x44

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8462c:	438d      	bics	r5, r1
   8462e:	d027      	beq.n	84680 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   84630:	f648 30c8 	movw	r0, #35784	; 0x8bc8
   84634:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84638:	6d00      	ldr	r0, [r0, #80]	; 0x50
   8463a:	42a0      	cmp	r0, r4
   8463c:	d10c      	bne.n	84658 <pio_handler_process+0x114>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8463e:	f648 32c8 	movw	r2, #35784	; 0x8bc8
   84642:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84646:	6d51      	ldr	r1, [r2, #84]	; 0x54
   84648:	420d      	tst	r5, r1
   8464a:	d005      	beq.n	84658 <pio_handler_process+0x114>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8464c:	4616      	mov	r6, r2
   8464e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   84650:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   84652:	6d71      	ldr	r1, [r6, #84]	; 0x54

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   84654:	438d      	bics	r5, r1
   84656:	d013      	beq.n	84680 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   84658:	f648 30c8 	movw	r0, #35784	; 0x8bc8
   8465c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84660:	6e00      	ldr	r0, [r0, #96]	; 0x60
   84662:	42a0      	cmp	r0, r4
   84664:	d10c      	bne.n	84680 <pio_handler_process+0x13c>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   84666:	f648 32c8 	movw	r2, #35784	; 0x8bc8
   8466a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8466e:	6e51      	ldr	r1, [r2, #100]	; 0x64
   84670:	4229      	tst	r1, r5
   84672:	d005      	beq.n	84680 <pio_handler_process+0x13c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   84674:	f648 33c8 	movw	r3, #35784	; 0x8bc8
   84678:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8467c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   8467e:	4790      	blx	r2
   84680:	bd70      	pop	{r4, r5, r6, pc}
   84682:	bf00      	nop

00084684 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   84684:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   84686:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   8468a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8468e:	f04f 010b 	mov.w	r1, #11
   84692:	f244 5345 	movw	r3, #17733	; 0x4545
   84696:	f2c0 0308 	movt	r3, #8
   8469a:	4798      	blx	r3
   8469c:	bd08      	pop	{r3, pc}
   8469e:	bf00      	nop

000846a0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   846a0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   846a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   846a6:	f2c4 000e 	movt	r0, #16398	; 0x400e
   846aa:	f04f 010c 	mov.w	r1, #12
   846ae:	f244 5345 	movw	r3, #17733	; 0x4545
   846b2:	f2c0 0308 	movt	r3, #8
   846b6:	4798      	blx	r3
   846b8:	bd08      	pop	{r3, pc}
   846ba:	bf00      	nop

000846bc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   846bc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   846be:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   846c2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   846c6:	f04f 010d 	mov.w	r1, #13
   846ca:	f244 5345 	movw	r3, #17733	; 0x4545
   846ce:	f2c0 0308 	movt	r3, #8
   846d2:	4798      	blx	r3
   846d4:	bd08      	pop	{r3, pc}
   846d6:	bf00      	nop

000846d8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   846d8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   846da:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   846de:	f2c4 000e 	movt	r0, #16398	; 0x400e
   846e2:	f04f 010e 	mov.w	r1, #14
   846e6:	f244 5345 	movw	r3, #17733	; 0x4545
   846ea:	f2c0 0308 	movt	r3, #8
   846ee:	4798      	blx	r3
   846f0:	bd08      	pop	{r3, pc}
   846f2:	bf00      	nop

000846f4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   846f4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   846f8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   846fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   846fe:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   84702:	4308      	orrs	r0, r1
   84704:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84706:	6e98      	ldr	r0, [r3, #104]	; 0x68
   84708:	f010 0f08 	tst.w	r0, #8
   8470c:	d007      	beq.n	8471e <pmc_switch_mck_to_pllack+0x2a>
   8470e:	e010      	b.n	84732 <pmc_switch_mck_to_pllack+0x3e>
   84710:	f100 33ff 	add.w	r3, r0, #4294967295
   84714:	6e90      	ldr	r0, [r2, #104]	; 0x68
   84716:	f010 0f08 	tst.w	r0, #8
   8471a:	d038      	beq.n	8478e <pmc_switch_mck_to_pllack+0x9a>
   8471c:	e009      	b.n	84732 <pmc_switch_mck_to_pllack+0x3e>
   8471e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   84722:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   84726:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8472a:	6e91      	ldr	r1, [r2, #104]	; 0x68
   8472c:	f011 0f08 	tst.w	r1, #8
   84730:	d0ee      	beq.n	84710 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   84732:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   84736:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8473a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   8473c:	f022 0303 	bic.w	r3, r2, #3
   84740:	f043 0002 	orr.w	r0, r3, #2
   84744:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84746:	6e89      	ldr	r1, [r1, #104]	; 0x68
   84748:	f011 0f08 	tst.w	r1, #8
   8474c:	d009      	beq.n	84762 <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   8474e:	f04f 0000 	mov.w	r0, #0
   84752:	4770      	bx	lr
   84754:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84758:	6e91      	ldr	r1, [r2, #104]	; 0x68
   8475a:	f011 0f08 	tst.w	r1, #8
   8475e:	d013      	beq.n	84788 <pmc_switch_mck_to_pllack+0x94>
   84760:	e009      	b.n	84776 <pmc_switch_mck_to_pllack+0x82>
   84762:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84766:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8476a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8476e:	6e90      	ldr	r0, [r2, #104]	; 0x68
   84770:	f010 0f08 	tst.w	r0, #8
   84774:	d0ee      	beq.n	84754 <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   84776:	f04f 0000 	mov.w	r0, #0
   8477a:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8477c:	f04f 0001 	mov.w	r0, #1
   84780:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   84782:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   84786:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   84788:	3b01      	subs	r3, #1
   8478a:	d1f0      	bne.n	8476e <pmc_switch_mck_to_pllack+0x7a>
   8478c:	e7f9      	b.n	84782 <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   8478e:	1e58      	subs	r0, r3, #1
   84790:	d1cb      	bne.n	8472a <pmc_switch_mck_to_pllack+0x36>
   84792:	e7f3      	b.n	8477c <pmc_switch_mck_to_pllack+0x88>

00084794 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   84794:	b188      	cbz	r0, 847ba <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   84796:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   8479a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8479e:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   847a0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   847a4:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   847a8:	4002      	ands	r2, r0
   847aa:	f04f 0302 	mov.w	r3, #2
   847ae:	f2c0 1337 	movt	r3, #311	; 0x137
   847b2:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   847b6:	6208      	str	r0, [r1, #32]
   847b8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   847ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   847be:	f2c4 030e 	movt	r3, #16398	; 0x400e
   847c2:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   847c4:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   847c8:	f020 0203 	bic.w	r2, r0, #3
   847cc:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   847d0:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   847d4:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   847d8:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   847dc:	6218      	str	r0, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   847de:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   847e2:	f2c4 020e 	movt	r2, #16398	; 0x400e
   847e6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   847e8:	f013 0f01 	tst.w	r3, #1
   847ec:	d0fb      	beq.n	847e6 <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   847ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   847f2:	f2c4 010e 	movt	r1, #16398	; 0x400e
   847f6:	6a08      	ldr	r0, [r1, #32]
   847f8:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   847fc:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   84800:	620b      	str	r3, [r1, #32]
   84802:	4770      	bx	lr

00084804 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   84804:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   84808:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8480c:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8480e:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   84812:	4770      	bx	lr

00084814 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   84814:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   84818:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8481c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   84820:	629a      	str	r2, [r3, #40]	; 0x28
   84822:	4770      	bx	lr

00084824 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   84824:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   84828:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8482c:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8482e:	f000 0002 	and.w	r0, r0, #2
   84832:	4770      	bx	lr

00084834 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   84834:	282c      	cmp	r0, #44	; 0x2c
   84836:	d835      	bhi.n	848a4 <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   84838:	281f      	cmp	r0, #31
   8483a:	d817      	bhi.n	8486c <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8483c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   84840:	f2c4 010e 	movt	r1, #16398	; 0x400e
   84844:	698a      	ldr	r2, [r1, #24]
   84846:	f04f 0301 	mov.w	r3, #1
   8484a:	fa03 f300 	lsl.w	r3, r3, r0
   8484e:	401a      	ands	r2, r3
   84850:	4293      	cmp	r3, r2
   84852:	d02a      	beq.n	848aa <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   84854:	f04f 0101 	mov.w	r1, #1
   84858:	fa01 f000 	lsl.w	r0, r1, r0
   8485c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   84860:	f2c4 020e 	movt	r2, #16398	; 0x400e
   84864:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   84866:	f04f 0000 	mov.w	r0, #0
   8486a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8486c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   84870:	f2c4 030e 	movt	r3, #16398	; 0x400e
   84874:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
   84878:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8487c:	f04f 0101 	mov.w	r1, #1
   84880:	fa01 f100 	lsl.w	r1, r1, r0
   84884:	400a      	ands	r2, r1
   84886:	4291      	cmp	r1, r2
   84888:	d012      	beq.n	848b0 <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   8488a:	f04f 0301 	mov.w	r3, #1
   8488e:	fa03 f000 	lsl.w	r0, r3, r0
   84892:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   84896:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8489a:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   8489e:	f04f 0000 	mov.w	r0, #0
   848a2:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   848a4:	f04f 0001 	mov.w	r0, #1
   848a8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   848aa:	f04f 0000 	mov.w	r0, #0
   848ae:	4770      	bx	lr
   848b0:	f04f 0000 	mov.w	r0, #0
}
   848b4:	4770      	bx	lr
   848b6:	bf00      	nop

000848b8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   848b8:	e7fe      	b.n	848b8 <Dummy_Handler>
   848ba:	bf00      	nop

000848bc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   848bc:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   848be:	f240 0300 	movw	r3, #0
   848c2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   848c6:	f647 32ec 	movw	r2, #31724	; 0x7bec
   848ca:	f2c0 0208 	movt	r2, #8
   848ce:	429a      	cmp	r2, r3
   848d0:	d003      	beq.n	848da <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   848d2:	4840      	ldr	r0, [pc, #256]	; (849d4 <Reset_Handler+0x118>)
   848d4:	4940      	ldr	r1, [pc, #256]	; (849d8 <Reset_Handler+0x11c>)
   848d6:	4281      	cmp	r1, r0
   848d8:	d304      	bcc.n	848e4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   848da:	4b40      	ldr	r3, [pc, #256]	; (849dc <Reset_Handler+0x120>)
   848dc:	4a40      	ldr	r2, [pc, #256]	; (849e0 <Reset_Handler+0x124>)
   848de:	429a      	cmp	r2, r3
   848e0:	d325      	bcc.n	8492e <Reset_Handler+0x72>
   848e2:	e042      	b.n	8496a <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   848e4:	4d3f      	ldr	r5, [pc, #252]	; (849e4 <Reset_Handler+0x128>)
   848e6:	4c40      	ldr	r4, [pc, #256]	; (849e8 <Reset_Handler+0x12c>)
   848e8:	1b63      	subs	r3, r4, r5
   848ea:	f023 0503 	bic.w	r5, r3, #3
   848ee:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   848f2:	f240 0200 	movw	r2, #0
   848f6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   848fa:	f647 31ec 	movw	r1, #31724	; 0x7bec
   848fe:	f2c0 0108 	movt	r1, #8
   84902:	f105 0004 	add.w	r0, r5, #4
   84906:	f3c5 0480 	ubfx	r4, r5, #2, #1
   8490a:	585d      	ldr	r5, [r3, r1]
   8490c:	509d      	str	r5, [r3, r2]
   8490e:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   84912:	4283      	cmp	r3, r0
   84914:	d155      	bne.n	849c2 <Reset_Handler+0x106>
   84916:	e7e0      	b.n	848da <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   84918:	585d      	ldr	r5, [r3, r1]
   8491a:	509d      	str	r5, [r3, r2]
   8491c:	f103 0304 	add.w	r3, r3, #4
   84920:	585c      	ldr	r4, [r3, r1]
   84922:	509c      	str	r4, [r3, r2]
   84924:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   84928:	4283      	cmp	r3, r0
   8492a:	d1f5      	bne.n	84918 <Reset_Handler+0x5c>
   8492c:	e7d5      	b.n	848da <Reset_Handler+0x1e>
   8492e:	4d2f      	ldr	r5, [pc, #188]	; (849ec <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   84930:	492f      	ldr	r1, [pc, #188]	; (849f0 <Reset_Handler+0x134>)
   84932:	1b48      	subs	r0, r1, r5
   84934:	f020 0403 	bic.w	r4, r0, #3
   84938:	f640 03d0 	movw	r3, #2256	; 0x8d0
   8493c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84940:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   84942:	f04f 0100 	mov.w	r1, #0
   84946:	1b50      	subs	r0, r2, r5
   84948:	f1a0 0004 	sub.w	r0, r0, #4
   8494c:	f3c0 0480 	ubfx	r4, r0, #2, #1
   84950:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   84954:	4295      	cmp	r5, r2
   84956:	d12d      	bne.n	849b4 <Reset_Handler+0xf8>
   84958:	e007      	b.n	8496a <Reset_Handler+0xae>
   8495a:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   8495e:	6069      	str	r1, [r5, #4]
   84960:	f105 0508 	add.w	r5, r5, #8
   84964:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   84966:	4295      	cmp	r5, r2
   84968:	d1f7      	bne.n	8495a <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8496a:	f240 0500 	movw	r5, #0
   8496e:	f2c0 0508 	movt	r5, #8
   84972:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   84976:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   8497a:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   8497e:	f2ce 0000 	movt	r0, #57344	; 0xe000
   84982:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   84984:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   84988:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   8498c:	d207      	bcs.n	8499e <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8498e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   84992:	f2ce 0300 	movt	r3, #57344	; 0xe000
   84996:	689d      	ldr	r5, [r3, #8]
   84998:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   8499c:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8499e:	f245 1179 	movw	r1, #20857	; 0x5179
   849a2:	f2c0 0108 	movt	r1, #8
   849a6:	4788      	blx	r1

	/* Branch to main function */
	main();
   849a8:	f640 407d 	movw	r0, #3197	; 0xc7d
   849ac:	f2c0 0008 	movt	r0, #8
   849b0:	4780      	blx	r0
   849b2:	e7fe      	b.n	849b2 <Reset_Handler+0xf6>
   849b4:	2c00      	cmp	r4, #0
   849b6:	d0d0      	beq.n	8495a <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   849b8:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   849bc:	4295      	cmp	r5, r2
   849be:	d1cc      	bne.n	8495a <Reset_Handler+0x9e>
   849c0:	e7d3      	b.n	8496a <Reset_Handler+0xae>
   849c2:	2c00      	cmp	r4, #0
   849c4:	d0a8      	beq.n	84918 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   849c6:	585c      	ldr	r4, [r3, r1]
   849c8:	509c      	str	r4, [r3, r2]
   849ca:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   849ce:	4283      	cmp	r3, r0
   849d0:	d1a2      	bne.n	84918 <Reset_Handler+0x5c>
   849d2:	e782      	b.n	848da <Reset_Handler+0x1e>
   849d4:	200708d0 	.word	0x200708d0
   849d8:	20070000 	.word	0x20070000
   849dc:	20078d30 	.word	0x20078d30
   849e0:	200708d0 	.word	0x200708d0
   849e4:	20070004 	.word	0x20070004
   849e8:	200708d3 	.word	0x200708d3
   849ec:	200708cc 	.word	0x200708cc
   849f0:	20078d2b 	.word	0x20078d2b

000849f4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   849f4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   849f8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   849fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
   849fe:	f000 0103 	and.w	r1, r0, #3
   84a02:	2903      	cmp	r1, #3
   84a04:	f200 80b1 	bhi.w	84b6a <SystemCoreClockUpdate+0x176>
   84a08:	e8df f001 	tbb	[pc, r1]
   84a0c:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   84a10:	f641 2010 	movw	r0, #6672	; 0x1a10
   84a14:	f2c4 000e 	movt	r0, #16398	; 0x400e
   84a18:	6941      	ldr	r1, [r0, #20]
   84a1a:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   84a1e:	f240 030c 	movw	r3, #12
   84a22:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84a26:	bf14      	ite	ne
   84a28:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   84a2c:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   84a30:	601a      	str	r2, [r3, #0]
   84a32:	e09a      	b.n	84b6a <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   84a34:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   84a38:	f2c4 030e 	movt	r3, #16398	; 0x400e
   84a3c:	6a18      	ldr	r0, [r3, #32]
   84a3e:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   84a42:	d009      	beq.n	84a58 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   84a44:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   84a48:	f2c0 03b7 	movt	r3, #183	; 0xb7
   84a4c:	f240 020c 	movw	r2, #12
   84a50:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84a54:	6013      	str	r3, [r2, #0]
   84a56:	e088      	b.n	84b6a <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   84a58:	f44f 6110 	mov.w	r1, #2304	; 0x900
   84a5c:	f2c0 013d 	movt	r1, #61	; 0x3d
   84a60:	f240 020c 	movw	r2, #12
   84a64:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84a68:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   84a6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   84a6e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   84a72:	6a18      	ldr	r0, [r3, #32]
   84a74:	f000 0170 	and.w	r1, r0, #112	; 0x70
   84a78:	2910      	cmp	r1, #16
   84a7a:	d002      	beq.n	84a82 <SystemCoreClockUpdate+0x8e>
   84a7c:	2920      	cmp	r1, #32
   84a7e:	d174      	bne.n	84b6a <SystemCoreClockUpdate+0x176>
   84a80:	e009      	b.n	84a96 <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   84a82:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   84a86:	f2c0 007a 	movt	r0, #122	; 0x7a
   84a8a:	f240 010c 	movw	r1, #12
   84a8e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84a92:	6008      	str	r0, [r1, #0]
				break;
   84a94:	e069      	b.n	84b6a <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   84a96:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   84a9a:	f2c0 03b7 	movt	r3, #183	; 0xb7
   84a9e:	f240 020c 	movw	r2, #12
   84aa2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84aa6:	6013      	str	r3, [r2, #0]
				break;
   84aa8:	e05f      	b.n	84b6a <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   84aaa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   84aae:	f2c4 020e 	movt	r2, #16398	; 0x400e
   84ab2:	6a13      	ldr	r3, [r2, #32]
   84ab4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   84ab8:	d009      	beq.n	84ace <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   84aba:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   84abe:	f2c0 01b7 	movt	r1, #183	; 0xb7
   84ac2:	f240 020c 	movw	r2, #12
   84ac6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84aca:	6011      	str	r1, [r2, #0]
   84acc:	e027      	b.n	84b1e <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   84ace:	f44f 6010 	mov.w	r0, #2304	; 0x900
   84ad2:	f2c0 003d 	movt	r0, #61	; 0x3d
   84ad6:	f240 010c 	movw	r1, #12
   84ada:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84ade:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   84ae0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   84ae4:	f2c4 020e 	movt	r2, #16398	; 0x400e
   84ae8:	6a13      	ldr	r3, [r2, #32]
   84aea:	f003 0070 	and.w	r0, r3, #112	; 0x70
   84aee:	2810      	cmp	r0, #16
   84af0:	d002      	beq.n	84af8 <SystemCoreClockUpdate+0x104>
   84af2:	2820      	cmp	r0, #32
   84af4:	d113      	bne.n	84b1e <SystemCoreClockUpdate+0x12a>
   84af6:	e009      	b.n	84b0c <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   84af8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   84afc:	f2c0 037a 	movt	r3, #122	; 0x7a
   84b00:	f240 000c 	movw	r0, #12
   84b04:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84b08:	6003      	str	r3, [r0, #0]
				break;
   84b0a:	e008      	b.n	84b1e <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   84b0c:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   84b10:	f2c0 01b7 	movt	r1, #183	; 0xb7
   84b14:	f240 020c 	movw	r2, #12
   84b18:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84b1c:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   84b1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   84b22:	f2c4 030e 	movt	r3, #16398	; 0x400e
   84b26:	6b18      	ldr	r0, [r3, #48]	; 0x30
   84b28:	f000 0103 	and.w	r1, r0, #3
   84b2c:	2902      	cmp	r1, #2
   84b2e:	d113      	bne.n	84b58 <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   84b30:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   84b34:	f2c4 010e 	movt	r1, #16398	; 0x400e
   84b38:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   84b3a:	6a89      	ldr	r1, [r1, #40]	; 0x28
   84b3c:	f240 030c 	movw	r3, #12
   84b40:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   84b44:	f3c0 400a 	ubfx	r0, r0, #16, #11
   84b48:	681a      	ldr	r2, [r3, #0]
   84b4a:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   84b4e:	b2c9      	uxtb	r1, r1
   84b50:	fbb0 f2f1 	udiv	r2, r0, r1
   84b54:	601a      	str	r2, [r3, #0]
   84b56:	e008      	b.n	84b6a <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   84b58:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   84b5c:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   84b60:	f240 020c 	movw	r2, #12
   84b64:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84b68:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   84b6a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   84b6e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   84b72:	6b10      	ldr	r0, [r2, #48]	; 0x30
   84b74:	f000 0170 	and.w	r1, r0, #112	; 0x70
   84b78:	2970      	cmp	r1, #112	; 0x70
   84b7a:	d10e      	bne.n	84b9a <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   84b7c:	f240 030c 	movw	r3, #12
   84b80:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84b84:	6818      	ldr	r0, [r3, #0]
   84b86:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   84b8a:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   84b8e:	fba2 0100 	umull	r0, r1, r2, r0
   84b92:	ea4f 0051 	mov.w	r0, r1, lsr #1
   84b96:	6018      	str	r0, [r3, #0]
   84b98:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   84b9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   84b9e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   84ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   84ba4:	f240 000c 	movw	r0, #12
   84ba8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84bac:	f3c2 1102 	ubfx	r1, r2, #4, #3
   84bb0:	6803      	ldr	r3, [r0, #0]
   84bb2:	fa23 f301 	lsr.w	r3, r3, r1
   84bb6:	6003      	str	r3, [r0, #0]
   84bb8:	4770      	bx	lr
   84bba:	bf00      	nop

00084bbc <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   84bbc:	f64e 23bf 	movw	r3, #60095	; 0xeabf
   84bc0:	f2c0 1321 	movt	r3, #289	; 0x121
   84bc4:	4298      	cmp	r0, r3
   84bc6:	d80c      	bhi.n	84be2 <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   84bc8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   84bcc:	f2c4 030e 	movt	r3, #16398	; 0x400e
   84bd0:	f04f 0000 	mov.w	r0, #0
   84bd4:	6018      	str	r0, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   84bd6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   84bda:	f2c4 010e 	movt	r1, #16398	; 0x400e
   84bde:	6008      	str	r0, [r1, #0]
   84be0:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   84be2:	f24f 017f 	movw	r1, #61567	; 0xf07f
   84be6:	f2c0 21fa 	movt	r1, #762	; 0x2fa
   84bea:	4288      	cmp	r0, r1
   84bec:	d80c      	bhi.n	84c08 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   84bee:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   84bf2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   84bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
   84bfa:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   84bfc:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   84c00:	f2c4 020e 	movt	r2, #16398	; 0x400e
   84c04:	6011      	str	r1, [r2, #0]
   84c06:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   84c08:	f648 73ff 	movw	r3, #36863	; 0x8fff
   84c0c:	f2c0 33d0 	movt	r3, #976	; 0x3d0
   84c10:	4298      	cmp	r0, r3
   84c12:	d80c      	bhi.n	84c2e <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   84c14:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   84c18:	f2c4 010e 	movt	r1, #16398	; 0x400e
   84c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
   84c20:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   84c22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   84c26:	f2c4 030e 	movt	r3, #16398	; 0x400e
   84c2a:	601a      	str	r2, [r3, #0]
   84c2c:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   84c2e:	f24b 31ff 	movw	r1, #46079	; 0xb3ff
   84c32:	f2c0 41c4 	movt	r1, #1220	; 0x4c4
   84c36:	4288      	cmp	r0, r1
   84c38:	d80c      	bhi.n	84c54 <system_init_flash+0x98>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   84c3a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   84c3e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   84c42:	f44f 7240 	mov.w	r2, #768	; 0x300
   84c46:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   84c48:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   84c4c:	f2c4 000e 	movt	r0, #16398	; 0x400e
   84c50:	6002      	str	r2, [r0, #0]
   84c52:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   84c54:	f644 237f 	movw	r3, #19071	; 0x4a7f
   84c58:	f2c0 535d 	movt	r3, #1373	; 0x55d
   84c5c:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   84c5e:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   84c62:	f2c4 000e 	movt	r0, #16398	; 0x400e
   84c66:	bf94      	ite	ls
   84c68:	f44f 6280 	movls.w	r2, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   84c6c:	f44f 62a0 	movhi.w	r2, #1280	; 0x500
   84c70:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   84c72:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   84c76:	f2c4 010e 	movt	r1, #16398	; 0x400e
   84c7a:	600a      	str	r2, [r1, #0]
   84c7c:	4770      	bx	lr
   84c7e:	bf00      	nop

00084c80 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   84c80:	f648 4338 	movw	r3, #35896	; 0x8c38
   84c84:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84c88:	6819      	ldr	r1, [r3, #0]
   84c8a:	b941      	cbnz	r1, 84c9e <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
   84c8c:	f648 4338 	movw	r3, #35896	; 0x8c38
   84c90:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84c94:	f64a 5230 	movw	r2, #44336	; 0xad30
   84c98:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84c9c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   84c9e:	f648 4138 	movw	r1, #35896	; 0x8c38
   84ca2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84ca6:	680b      	ldr	r3, [r1, #0]

	if (((int)prev_heap + incr) > ramend) {
   84ca8:	1818      	adds	r0, r3, r0
   84caa:	f647 72fc 	movw	r2, #32764	; 0x7ffc
   84cae:	f2c2 0208 	movt	r2, #8200	; 0x2008
   84cb2:	4282      	cmp	r2, r0
   84cb4:	db06      	blt.n	84cc4 <_sbrk+0x44>
		return (caddr_t) -1;	
	}

	heap += incr;
   84cb6:	4601      	mov	r1, r0
   84cb8:	f648 4038 	movw	r0, #35896	; 0x8c38
   84cbc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84cc0:	6001      	str	r1, [r0, #0]

	return (caddr_t) prev_heap;
   84cc2:	e001      	b.n	84cc8 <_sbrk+0x48>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   84cc4:	f04f 33ff 	mov.w	r3, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   84cc8:	4618      	mov	r0, r3
   84cca:	4770      	bx	lr

00084ccc <_close>:
}

extern int _close(int file)
{
	return -1;
}
   84ccc:	f04f 30ff 	mov.w	r0, #4294967295
   84cd0:	4770      	bx	lr
   84cd2:	bf00      	nop

00084cd4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   84cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   84cd8:	604b      	str	r3, [r1, #4]

	return 0;
}
   84cda:	f04f 0000 	mov.w	r0, #0
   84cde:	4770      	bx	lr

00084ce0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   84ce0:	f04f 0001 	mov.w	r0, #1
   84ce4:	4770      	bx	lr
   84ce6:	bf00      	nop

00084ce8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   84ce8:	f04f 0000 	mov.w	r0, #0
   84cec:	4770      	bx	lr
   84cee:	bf00      	nop

00084cf0 <__aeabi_drsub>:
   84cf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   84cf4:	e002      	b.n	84cfc <__adddf3>
   84cf6:	bf00      	nop

00084cf8 <__aeabi_dsub>:
   84cf8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00084cfc <__adddf3>:
   84cfc:	b530      	push	{r4, r5, lr}
   84cfe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   84d02:	ea4f 0543 	mov.w	r5, r3, lsl #1
   84d06:	ea94 0f05 	teq	r4, r5
   84d0a:	bf08      	it	eq
   84d0c:	ea90 0f02 	teqeq	r0, r2
   84d10:	bf1f      	itttt	ne
   84d12:	ea54 0c00 	orrsne.w	ip, r4, r0
   84d16:	ea55 0c02 	orrsne.w	ip, r5, r2
   84d1a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   84d1e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   84d22:	f000 80e2 	beq.w	84eea <__adddf3+0x1ee>
   84d26:	ea4f 5454 	mov.w	r4, r4, lsr #21
   84d2a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   84d2e:	bfb8      	it	lt
   84d30:	426d      	neglt	r5, r5
   84d32:	dd0c      	ble.n	84d4e <__adddf3+0x52>
   84d34:	442c      	add	r4, r5
   84d36:	ea80 0202 	eor.w	r2, r0, r2
   84d3a:	ea81 0303 	eor.w	r3, r1, r3
   84d3e:	ea82 0000 	eor.w	r0, r2, r0
   84d42:	ea83 0101 	eor.w	r1, r3, r1
   84d46:	ea80 0202 	eor.w	r2, r0, r2
   84d4a:	ea81 0303 	eor.w	r3, r1, r3
   84d4e:	2d36      	cmp	r5, #54	; 0x36
   84d50:	bf88      	it	hi
   84d52:	bd30      	pophi	{r4, r5, pc}
   84d54:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   84d58:	ea4f 3101 	mov.w	r1, r1, lsl #12
   84d5c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   84d60:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   84d64:	d002      	beq.n	84d6c <__adddf3+0x70>
   84d66:	4240      	negs	r0, r0
   84d68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84d6c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   84d70:	ea4f 3303 	mov.w	r3, r3, lsl #12
   84d74:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   84d78:	d002      	beq.n	84d80 <__adddf3+0x84>
   84d7a:	4252      	negs	r2, r2
   84d7c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   84d80:	ea94 0f05 	teq	r4, r5
   84d84:	f000 80a7 	beq.w	84ed6 <__adddf3+0x1da>
   84d88:	f1a4 0401 	sub.w	r4, r4, #1
   84d8c:	f1d5 0e20 	rsbs	lr, r5, #32
   84d90:	db0d      	blt.n	84dae <__adddf3+0xb2>
   84d92:	fa02 fc0e 	lsl.w	ip, r2, lr
   84d96:	fa22 f205 	lsr.w	r2, r2, r5
   84d9a:	1880      	adds	r0, r0, r2
   84d9c:	f141 0100 	adc.w	r1, r1, #0
   84da0:	fa03 f20e 	lsl.w	r2, r3, lr
   84da4:	1880      	adds	r0, r0, r2
   84da6:	fa43 f305 	asr.w	r3, r3, r5
   84daa:	4159      	adcs	r1, r3
   84dac:	e00e      	b.n	84dcc <__adddf3+0xd0>
   84dae:	f1a5 0520 	sub.w	r5, r5, #32
   84db2:	f10e 0e20 	add.w	lr, lr, #32
   84db6:	2a01      	cmp	r2, #1
   84db8:	fa03 fc0e 	lsl.w	ip, r3, lr
   84dbc:	bf28      	it	cs
   84dbe:	f04c 0c02 	orrcs.w	ip, ip, #2
   84dc2:	fa43 f305 	asr.w	r3, r3, r5
   84dc6:	18c0      	adds	r0, r0, r3
   84dc8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   84dcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84dd0:	d507      	bpl.n	84de2 <__adddf3+0xe6>
   84dd2:	f04f 0e00 	mov.w	lr, #0
   84dd6:	f1dc 0c00 	rsbs	ip, ip, #0
   84dda:	eb7e 0000 	sbcs.w	r0, lr, r0
   84dde:	eb6e 0101 	sbc.w	r1, lr, r1
   84de2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   84de6:	d31b      	bcc.n	84e20 <__adddf3+0x124>
   84de8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   84dec:	d30c      	bcc.n	84e08 <__adddf3+0x10c>
   84dee:	0849      	lsrs	r1, r1, #1
   84df0:	ea5f 0030 	movs.w	r0, r0, rrx
   84df4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   84df8:	f104 0401 	add.w	r4, r4, #1
   84dfc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   84e00:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   84e04:	f080 809a 	bcs.w	84f3c <__adddf3+0x240>
   84e08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   84e0c:	bf08      	it	eq
   84e0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   84e12:	f150 0000 	adcs.w	r0, r0, #0
   84e16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84e1a:	ea41 0105 	orr.w	r1, r1, r5
   84e1e:	bd30      	pop	{r4, r5, pc}
   84e20:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   84e24:	4140      	adcs	r0, r0
   84e26:	eb41 0101 	adc.w	r1, r1, r1
   84e2a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84e2e:	f1a4 0401 	sub.w	r4, r4, #1
   84e32:	d1e9      	bne.n	84e08 <__adddf3+0x10c>
   84e34:	f091 0f00 	teq	r1, #0
   84e38:	bf04      	itt	eq
   84e3a:	4601      	moveq	r1, r0
   84e3c:	2000      	moveq	r0, #0
   84e3e:	fab1 f381 	clz	r3, r1
   84e42:	bf08      	it	eq
   84e44:	3320      	addeq	r3, #32
   84e46:	f1a3 030b 	sub.w	r3, r3, #11
   84e4a:	f1b3 0220 	subs.w	r2, r3, #32
   84e4e:	da0c      	bge.n	84e6a <__adddf3+0x16e>
   84e50:	320c      	adds	r2, #12
   84e52:	dd08      	ble.n	84e66 <__adddf3+0x16a>
   84e54:	f102 0c14 	add.w	ip, r2, #20
   84e58:	f1c2 020c 	rsb	r2, r2, #12
   84e5c:	fa01 f00c 	lsl.w	r0, r1, ip
   84e60:	fa21 f102 	lsr.w	r1, r1, r2
   84e64:	e00c      	b.n	84e80 <__adddf3+0x184>
   84e66:	f102 0214 	add.w	r2, r2, #20
   84e6a:	bfd8      	it	le
   84e6c:	f1c2 0c20 	rsble	ip, r2, #32
   84e70:	fa01 f102 	lsl.w	r1, r1, r2
   84e74:	fa20 fc0c 	lsr.w	ip, r0, ip
   84e78:	bfdc      	itt	le
   84e7a:	ea41 010c 	orrle.w	r1, r1, ip
   84e7e:	4090      	lslle	r0, r2
   84e80:	1ae4      	subs	r4, r4, r3
   84e82:	bfa2      	ittt	ge
   84e84:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   84e88:	4329      	orrge	r1, r5
   84e8a:	bd30      	popge	{r4, r5, pc}
   84e8c:	ea6f 0404 	mvn.w	r4, r4
   84e90:	3c1f      	subs	r4, #31
   84e92:	da1c      	bge.n	84ece <__adddf3+0x1d2>
   84e94:	340c      	adds	r4, #12
   84e96:	dc0e      	bgt.n	84eb6 <__adddf3+0x1ba>
   84e98:	f104 0414 	add.w	r4, r4, #20
   84e9c:	f1c4 0220 	rsb	r2, r4, #32
   84ea0:	fa20 f004 	lsr.w	r0, r0, r4
   84ea4:	fa01 f302 	lsl.w	r3, r1, r2
   84ea8:	ea40 0003 	orr.w	r0, r0, r3
   84eac:	fa21 f304 	lsr.w	r3, r1, r4
   84eb0:	ea45 0103 	orr.w	r1, r5, r3
   84eb4:	bd30      	pop	{r4, r5, pc}
   84eb6:	f1c4 040c 	rsb	r4, r4, #12
   84eba:	f1c4 0220 	rsb	r2, r4, #32
   84ebe:	fa20 f002 	lsr.w	r0, r0, r2
   84ec2:	fa01 f304 	lsl.w	r3, r1, r4
   84ec6:	ea40 0003 	orr.w	r0, r0, r3
   84eca:	4629      	mov	r1, r5
   84ecc:	bd30      	pop	{r4, r5, pc}
   84ece:	fa21 f004 	lsr.w	r0, r1, r4
   84ed2:	4629      	mov	r1, r5
   84ed4:	bd30      	pop	{r4, r5, pc}
   84ed6:	f094 0f00 	teq	r4, #0
   84eda:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   84ede:	bf06      	itte	eq
   84ee0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   84ee4:	3401      	addeq	r4, #1
   84ee6:	3d01      	subne	r5, #1
   84ee8:	e74e      	b.n	84d88 <__adddf3+0x8c>
   84eea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   84eee:	bf18      	it	ne
   84ef0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   84ef4:	d029      	beq.n	84f4a <__adddf3+0x24e>
   84ef6:	ea94 0f05 	teq	r4, r5
   84efa:	bf08      	it	eq
   84efc:	ea90 0f02 	teqeq	r0, r2
   84f00:	d005      	beq.n	84f0e <__adddf3+0x212>
   84f02:	ea54 0c00 	orrs.w	ip, r4, r0
   84f06:	bf04      	itt	eq
   84f08:	4619      	moveq	r1, r3
   84f0a:	4610      	moveq	r0, r2
   84f0c:	bd30      	pop	{r4, r5, pc}
   84f0e:	ea91 0f03 	teq	r1, r3
   84f12:	bf1e      	ittt	ne
   84f14:	2100      	movne	r1, #0
   84f16:	2000      	movne	r0, #0
   84f18:	bd30      	popne	{r4, r5, pc}
   84f1a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   84f1e:	d105      	bne.n	84f2c <__adddf3+0x230>
   84f20:	0040      	lsls	r0, r0, #1
   84f22:	4149      	adcs	r1, r1
   84f24:	bf28      	it	cs
   84f26:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   84f2a:	bd30      	pop	{r4, r5, pc}
   84f2c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   84f30:	bf3c      	itt	cc
   84f32:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   84f36:	bd30      	popcc	{r4, r5, pc}
   84f38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84f3c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   84f40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   84f44:	f04f 0000 	mov.w	r0, #0
   84f48:	bd30      	pop	{r4, r5, pc}
   84f4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   84f4e:	bf1a      	itte	ne
   84f50:	4619      	movne	r1, r3
   84f52:	4610      	movne	r0, r2
   84f54:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   84f58:	bf1c      	itt	ne
   84f5a:	460b      	movne	r3, r1
   84f5c:	4602      	movne	r2, r0
   84f5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   84f62:	bf06      	itte	eq
   84f64:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   84f68:	ea91 0f03 	teqeq	r1, r3
   84f6c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   84f70:	bd30      	pop	{r4, r5, pc}
   84f72:	bf00      	nop

00084f74 <__aeabi_ui2d>:
   84f74:	f090 0f00 	teq	r0, #0
   84f78:	bf04      	itt	eq
   84f7a:	2100      	moveq	r1, #0
   84f7c:	4770      	bxeq	lr
   84f7e:	b530      	push	{r4, r5, lr}
   84f80:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84f84:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84f88:	f04f 0500 	mov.w	r5, #0
   84f8c:	f04f 0100 	mov.w	r1, #0
   84f90:	e750      	b.n	84e34 <__adddf3+0x138>
   84f92:	bf00      	nop

00084f94 <__aeabi_i2d>:
   84f94:	f090 0f00 	teq	r0, #0
   84f98:	bf04      	itt	eq
   84f9a:	2100      	moveq	r1, #0
   84f9c:	4770      	bxeq	lr
   84f9e:	b530      	push	{r4, r5, lr}
   84fa0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84fa4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84fa8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   84fac:	bf48      	it	mi
   84fae:	4240      	negmi	r0, r0
   84fb0:	f04f 0100 	mov.w	r1, #0
   84fb4:	e73e      	b.n	84e34 <__adddf3+0x138>
   84fb6:	bf00      	nop

00084fb8 <__aeabi_f2d>:
   84fb8:	0042      	lsls	r2, r0, #1
   84fba:	ea4f 01e2 	mov.w	r1, r2, asr #3
   84fbe:	ea4f 0131 	mov.w	r1, r1, rrx
   84fc2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   84fc6:	bf1f      	itttt	ne
   84fc8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   84fcc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   84fd0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   84fd4:	4770      	bxne	lr
   84fd6:	f092 0f00 	teq	r2, #0
   84fda:	bf14      	ite	ne
   84fdc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   84fe0:	4770      	bxeq	lr
   84fe2:	b530      	push	{r4, r5, lr}
   84fe4:	f44f 7460 	mov.w	r4, #896	; 0x380
   84fe8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84fec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   84ff0:	e720      	b.n	84e34 <__adddf3+0x138>
   84ff2:	bf00      	nop

00084ff4 <__aeabi_ul2d>:
   84ff4:	ea50 0201 	orrs.w	r2, r0, r1
   84ff8:	bf08      	it	eq
   84ffa:	4770      	bxeq	lr
   84ffc:	b530      	push	{r4, r5, lr}
   84ffe:	f04f 0500 	mov.w	r5, #0
   85002:	e00a      	b.n	8501a <__aeabi_l2d+0x16>

00085004 <__aeabi_l2d>:
   85004:	ea50 0201 	orrs.w	r2, r0, r1
   85008:	bf08      	it	eq
   8500a:	4770      	bxeq	lr
   8500c:	b530      	push	{r4, r5, lr}
   8500e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   85012:	d502      	bpl.n	8501a <__aeabi_l2d+0x16>
   85014:	4240      	negs	r0, r0
   85016:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8501a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8501e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   85022:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   85026:	f43f aedc 	beq.w	84de2 <__adddf3+0xe6>
   8502a:	f04f 0203 	mov.w	r2, #3
   8502e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   85032:	bf18      	it	ne
   85034:	3203      	addne	r2, #3
   85036:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8503a:	bf18      	it	ne
   8503c:	3203      	addne	r2, #3
   8503e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   85042:	f1c2 0320 	rsb	r3, r2, #32
   85046:	fa00 fc03 	lsl.w	ip, r0, r3
   8504a:	fa20 f002 	lsr.w	r0, r0, r2
   8504e:	fa01 fe03 	lsl.w	lr, r1, r3
   85052:	ea40 000e 	orr.w	r0, r0, lr
   85056:	fa21 f102 	lsr.w	r1, r1, r2
   8505a:	4414      	add	r4, r2
   8505c:	e6c1      	b.n	84de2 <__adddf3+0xe6>
   8505e:	bf00      	nop

00085060 <__aeabi_d2iz>:
   85060:	ea4f 0241 	mov.w	r2, r1, lsl #1
   85064:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   85068:	d215      	bcs.n	85096 <__aeabi_d2iz+0x36>
   8506a:	d511      	bpl.n	85090 <__aeabi_d2iz+0x30>
   8506c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   85070:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   85074:	d912      	bls.n	8509c <__aeabi_d2iz+0x3c>
   85076:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8507a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8507e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   85082:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   85086:	fa23 f002 	lsr.w	r0, r3, r2
   8508a:	bf18      	it	ne
   8508c:	4240      	negne	r0, r0
   8508e:	4770      	bx	lr
   85090:	f04f 0000 	mov.w	r0, #0
   85094:	4770      	bx	lr
   85096:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8509a:	d105      	bne.n	850a8 <__aeabi_d2iz+0x48>
   8509c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   850a0:	bf08      	it	eq
   850a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   850a6:	4770      	bx	lr
   850a8:	f04f 0000 	mov.w	r0, #0
   850ac:	4770      	bx	lr
   850ae:	bf00      	nop

000850b0 <__register_exitproc>:
   850b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   850b4:	4698      	mov	r8, r3
   850b6:	4b23      	ldr	r3, [pc, #140]	; (85144 <__register_exitproc+0x94>)
   850b8:	4606      	mov	r6, r0
   850ba:	681c      	ldr	r4, [r3, #0]
   850bc:	460f      	mov	r7, r1
   850be:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   850c2:	4691      	mov	r9, r2
   850c4:	b918      	cbnz	r0, 850ce <__register_exitproc+0x1e>
   850c6:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   850ca:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   850ce:	6841      	ldr	r1, [r0, #4]
   850d0:	291f      	cmp	r1, #31
   850d2:	dd16      	ble.n	85102 <__register_exitproc+0x52>
   850d4:	481c      	ldr	r0, [pc, #112]	; (85148 <__register_exitproc+0x98>)
   850d6:	b918      	cbnz	r0, 850e0 <__register_exitproc+0x30>
   850d8:	f04f 30ff 	mov.w	r0, #4294967295
   850dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   850e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   850e4:	f001 fbce 	bl	86884 <malloc>
   850e8:	2800      	cmp	r0, #0
   850ea:	d0f5      	beq.n	850d8 <__register_exitproc+0x28>
   850ec:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   850f0:	2500      	movs	r5, #0
   850f2:	6045      	str	r5, [r0, #4]
   850f4:	6002      	str	r2, [r0, #0]
   850f6:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   850fa:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   850fe:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   85102:	b1b6      	cbz	r6, 85132 <__register_exitproc+0x82>
   85104:	6844      	ldr	r4, [r0, #4]
   85106:	2201      	movs	r2, #1
   85108:	fa02 f204 	lsl.w	r2, r2, r4
   8510c:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   85110:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   85114:	4311      	orrs	r1, r2
   85116:	2e02      	cmp	r6, #2
   85118:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   8511c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   85120:	461c      	mov	r4, r3
   85122:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   85126:	d104      	bne.n	85132 <__register_exitproc+0x82>
   85128:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   8512c:	431a      	orrs	r2, r3
   8512e:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   85132:	6841      	ldr	r1, [r0, #4]
   85134:	1c8b      	adds	r3, r1, #2
   85136:	1c4a      	adds	r2, r1, #1
   85138:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   8513c:	6042      	str	r2, [r0, #4]
   8513e:	2000      	movs	r0, #0
   85140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85144:	00087b70 	.word	0x00087b70
   85148:	00086885 	.word	0x00086885

0008514c <__libc_fini_array>:
   8514c:	b570      	push	{r4, r5, r6, lr}
   8514e:	4b08      	ldr	r3, [pc, #32]	; (85170 <__libc_fini_array+0x24>)
   85150:	4c08      	ldr	r4, [pc, #32]	; (85174 <__libc_fini_array+0x28>)
   85152:	2500      	movs	r5, #0
   85154:	1ae0      	subs	r0, r4, r3
   85156:	1084      	asrs	r4, r0, #2
   85158:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   8515c:	3d04      	subs	r5, #4
   8515e:	b11c      	cbz	r4, 85168 <__libc_fini_array+0x1c>
   85160:	5972      	ldr	r2, [r6, r5]
   85162:	4790      	blx	r2
   85164:	3c01      	subs	r4, #1
   85166:	e7f9      	b.n	8515c <__libc_fini_array+0x10>
   85168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   8516c:	f002 bd32 	b.w	87bd4 <_fini>
   85170:	00087be0 	.word	0x00087be0
   85174:	00087be4 	.word	0x00087be4

00085178 <__libc_init_array>:
   85178:	b538      	push	{r3, r4, r5, lr}
   8517a:	4d0e      	ldr	r5, [pc, #56]	; (851b4 <__libc_init_array+0x3c>)
   8517c:	4b0e      	ldr	r3, [pc, #56]	; (851b8 <__libc_init_array+0x40>)
   8517e:	2400      	movs	r4, #0
   85180:	1ae8      	subs	r0, r5, r3
   85182:	1085      	asrs	r5, r0, #2
   85184:	42ac      	cmp	r4, r5
   85186:	d005      	beq.n	85194 <__libc_init_array+0x1c>
   85188:	490b      	ldr	r1, [pc, #44]	; (851b8 <__libc_init_array+0x40>)
   8518a:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   8518e:	4790      	blx	r2
   85190:	3401      	adds	r4, #1
   85192:	e7f7      	b.n	85184 <__libc_init_array+0xc>
   85194:	f002 fd14 	bl	87bc0 <_init>
   85198:	4908      	ldr	r1, [pc, #32]	; (851bc <__libc_init_array+0x44>)
   8519a:	4a09      	ldr	r2, [pc, #36]	; (851c0 <__libc_init_array+0x48>)
   8519c:	1a54      	subs	r4, r2, r1
   8519e:	10a5      	asrs	r5, r4, #2
   851a0:	2400      	movs	r4, #0
   851a2:	42ac      	cmp	r4, r5
   851a4:	d005      	beq.n	851b2 <__libc_init_array+0x3a>
   851a6:	4b05      	ldr	r3, [pc, #20]	; (851bc <__libc_init_array+0x44>)
   851a8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   851ac:	4780      	blx	r0
   851ae:	3401      	adds	r4, #1
   851b0:	e7f7      	b.n	851a2 <__libc_init_array+0x2a>
   851b2:	bd38      	pop	{r3, r4, r5, pc}
   851b4:	00087bcc 	.word	0x00087bcc
   851b8:	00087bcc 	.word	0x00087bcc
   851bc:	00087bcc 	.word	0x00087bcc
   851c0:	00087bd4 	.word	0x00087bd4

000851c4 <iprintf>:
   851c4:	b40f      	push	{r0, r1, r2, r3}
   851c6:	b507      	push	{r0, r1, r2, lr}
   851c8:	4906      	ldr	r1, [pc, #24]	; (851e4 <iprintf+0x20>)
   851ca:	ab04      	add	r3, sp, #16
   851cc:	6808      	ldr	r0, [r1, #0]
   851ce:	f853 2b04 	ldr.w	r2, [r3], #4
   851d2:	6881      	ldr	r1, [r0, #8]
   851d4:	9301      	str	r3, [sp, #4]
   851d6:	f000 f905 	bl	853e4 <_vfiprintf_r>
   851da:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
   851de:	b004      	add	sp, #16
   851e0:	4770      	bx	lr
   851e2:	bf00      	nop
   851e4:	20070010 	.word	0x20070010

000851e8 <_iprintf_r>:
   851e8:	b40e      	push	{r1, r2, r3}
   851ea:	b503      	push	{r0, r1, lr}
   851ec:	ab03      	add	r3, sp, #12
   851ee:	f853 2b04 	ldr.w	r2, [r3], #4
   851f2:	6881      	ldr	r1, [r0, #8]
   851f4:	9301      	str	r3, [sp, #4]
   851f6:	f000 f8f5 	bl	853e4 <_vfiprintf_r>
   851fa:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
   851fe:	b003      	add	sp, #12
   85200:	4770      	bx	lr
   85202:	bf00      	nop

00085204 <memcpy>:
   85204:	b510      	push	{r4, lr}
   85206:	2300      	movs	r3, #0
   85208:	4293      	cmp	r3, r2
   8520a:	d003      	beq.n	85214 <memcpy+0x10>
   8520c:	5ccc      	ldrb	r4, [r1, r3]
   8520e:	54c4      	strb	r4, [r0, r3]
   85210:	3301      	adds	r3, #1
   85212:	e7f9      	b.n	85208 <memcpy+0x4>
   85214:	bd10      	pop	{r4, pc}

00085216 <memset>:
   85216:	1882      	adds	r2, r0, r2
   85218:	4603      	mov	r3, r0
   8521a:	4293      	cmp	r3, r2
   8521c:	d002      	beq.n	85224 <memset+0xe>
   8521e:	f803 1b01 	strb.w	r1, [r3], #1
   85222:	e7fa      	b.n	8521a <memset+0x4>
   85224:	4770      	bx	lr

00085226 <setbuf>:
   85226:	2900      	cmp	r1, #0
   85228:	bf0c      	ite	eq
   8522a:	2202      	moveq	r2, #2
   8522c:	2200      	movne	r2, #0
   8522e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   85232:	f000 b80f 	b.w	85254 <setvbuf>
	...

00085238 <setjmp>:
   85238:	46ec      	mov	ip, sp
   8523a:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   8523e:	f04f 0000 	mov.w	r0, #0
   85242:	4770      	bx	lr

00085244 <longjmp>:
   85244:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   85248:	46e5      	mov	sp, ip
   8524a:	0008      	movs	r0, r1
   8524c:	bf08      	it	eq
   8524e:	2001      	moveq	r0, #1
   85250:	4770      	bx	lr
   85252:	bf00      	nop

00085254 <setvbuf>:
   85254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85258:	461d      	mov	r5, r3
   8525a:	4b37      	ldr	r3, [pc, #220]	; (85338 <setvbuf+0xe4>)
   8525c:	4604      	mov	r4, r0
   8525e:	6818      	ldr	r0, [r3, #0]
   85260:	460e      	mov	r6, r1
   85262:	4617      	mov	r7, r2
   85264:	4698      	mov	r8, r3
   85266:	b118      	cbz	r0, 85270 <setvbuf+0x1c>
   85268:	6b82      	ldr	r2, [r0, #56]	; 0x38
   8526a:	b90a      	cbnz	r2, 85270 <setvbuf+0x1c>
   8526c:	f000 fec8 	bl	86000 <__sinit>
   85270:	2f02      	cmp	r7, #2
   85272:	d85d      	bhi.n	85330 <setvbuf+0xdc>
   85274:	2d00      	cmp	r5, #0
   85276:	db5b      	blt.n	85330 <setvbuf+0xdc>
   85278:	4621      	mov	r1, r4
   8527a:	f8d8 0000 	ldr.w	r0, [r8]
   8527e:	f000 fdcd 	bl	85e1c <_fflush_r>
   85282:	89a1      	ldrh	r1, [r4, #12]
   85284:	2000      	movs	r0, #0
   85286:	f001 0380 	and.w	r3, r1, #128	; 0x80
   8528a:	b21a      	sxth	r2, r3
   8528c:	6060      	str	r0, [r4, #4]
   8528e:	61a0      	str	r0, [r4, #24]
   85290:	b122      	cbz	r2, 8529c <setvbuf+0x48>
   85292:	4829      	ldr	r0, [pc, #164]	; (85338 <setvbuf+0xe4>)
   85294:	6921      	ldr	r1, [r4, #16]
   85296:	6800      	ldr	r0, [r0, #0]
   85298:	f000 fff0 	bl	8627c <_free_r>
   8529c:	89a1      	ldrh	r1, [r4, #12]
   8529e:	2f02      	cmp	r7, #2
   852a0:	f021 0383 	bic.w	r3, r1, #131	; 0x83
   852a4:	81a3      	strh	r3, [r4, #12]
   852a6:	d012      	beq.n	852ce <setvbuf+0x7a>
   852a8:	bb36      	cbnz	r6, 852f8 <setvbuf+0xa4>
   852aa:	2d00      	cmp	r5, #0
   852ac:	bf08      	it	eq
   852ae:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   852b2:	4628      	mov	r0, r5
   852b4:	f001 fae6 	bl	86884 <malloc>
   852b8:	4606      	mov	r6, r0
   852ba:	b9c8      	cbnz	r0, 852f0 <setvbuf+0x9c>
   852bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   852c0:	f001 fae0 	bl	86884 <malloc>
   852c4:	4606      	mov	r6, r0
   852c6:	b988      	cbnz	r0, 852ec <setvbuf+0x98>
   852c8:	f04f 30ff 	mov.w	r0, #4294967295
   852cc:	e000      	b.n	852d0 <setvbuf+0x7c>
   852ce:	2000      	movs	r0, #0
   852d0:	89a1      	ldrh	r1, [r4, #12]
   852d2:	2200      	movs	r2, #0
   852d4:	f041 0302 	orr.w	r3, r1, #2
   852d8:	81a3      	strh	r3, [r4, #12]
   852da:	f104 0143 	add.w	r1, r4, #67	; 0x43
   852de:	2301      	movs	r3, #1
   852e0:	60a2      	str	r2, [r4, #8]
   852e2:	6021      	str	r1, [r4, #0]
   852e4:	6121      	str	r1, [r4, #16]
   852e6:	6163      	str	r3, [r4, #20]
   852e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   852ec:	f44f 6580 	mov.w	r5, #1024	; 0x400
   852f0:	89a2      	ldrh	r2, [r4, #12]
   852f2:	f042 0080 	orr.w	r0, r2, #128	; 0x80
   852f6:	81a0      	strh	r0, [r4, #12]
   852f8:	2f01      	cmp	r7, #1
   852fa:	d105      	bne.n	85308 <setvbuf+0xb4>
   852fc:	89a1      	ldrh	r1, [r4, #12]
   852fe:	426a      	negs	r2, r5
   85300:	f041 0301 	orr.w	r3, r1, #1
   85304:	81a3      	strh	r3, [r4, #12]
   85306:	61a2      	str	r2, [r4, #24]
   85308:	480b      	ldr	r0, [pc, #44]	; (85338 <setvbuf+0xe4>)
   8530a:	89a2      	ldrh	r2, [r4, #12]
   8530c:	6801      	ldr	r1, [r0, #0]
   8530e:	4b0b      	ldr	r3, [pc, #44]	; (8533c <setvbuf+0xe8>)
   85310:	f002 0008 	and.w	r0, r2, #8
   85314:	b200      	sxth	r0, r0
   85316:	63cb      	str	r3, [r1, #60]	; 0x3c
   85318:	6026      	str	r6, [r4, #0]
   8531a:	6126      	str	r6, [r4, #16]
   8531c:	6165      	str	r5, [r4, #20]
   8531e:	b148      	cbz	r0, 85334 <setvbuf+0xe0>
   85320:	f012 0f03 	tst.w	r2, #3
   85324:	bf18      	it	ne
   85326:	2500      	movne	r5, #0
   85328:	60a5      	str	r5, [r4, #8]
   8532a:	2000      	movs	r0, #0
   8532c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85330:	f04f 30ff 	mov.w	r0, #4294967295
   85334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85338:	20070010 	.word	0x20070010
   8533c:	00085f75 	.word	0x00085f75

00085340 <strlen>:
   85340:	4603      	mov	r3, r0
   85342:	f813 2b01 	ldrb.w	r2, [r3], #1
   85346:	2a00      	cmp	r2, #0
   85348:	d1fb      	bne.n	85342 <strlen+0x2>
   8534a:	1a18      	subs	r0, r3, r0
   8534c:	3801      	subs	r0, #1
   8534e:	4770      	bx	lr

00085350 <strncpy>:
   85350:	b530      	push	{r4, r5, lr}
   85352:	3901      	subs	r1, #1
   85354:	4603      	mov	r3, r0
   85356:	461c      	mov	r4, r3
   85358:	b13a      	cbz	r2, 8536a <strncpy+0x1a>
   8535a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   8535e:	3a01      	subs	r2, #1
   85360:	f803 5b01 	strb.w	r5, [r3], #1
   85364:	461c      	mov	r4, r3
   85366:	2d00      	cmp	r5, #0
   85368:	d1f5      	bne.n	85356 <strncpy+0x6>
   8536a:	1899      	adds	r1, r3, r2
   8536c:	428c      	cmp	r4, r1
   8536e:	d003      	beq.n	85378 <strncpy+0x28>
   85370:	2200      	movs	r2, #0
   85372:	f804 2b01 	strb.w	r2, [r4], #1
   85376:	e7f9      	b.n	8536c <strncpy+0x1c>
   85378:	bd30      	pop	{r4, r5, pc}
	...

0008537c <__sprint_r>:
   8537c:	6893      	ldr	r3, [r2, #8]
   8537e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85382:	4681      	mov	r9, r0
   85384:	460f      	mov	r7, r1
   85386:	4614      	mov	r4, r2
   85388:	b91b      	cbnz	r3, 85392 <__sprint_r+0x16>
   8538a:	6053      	str	r3, [r2, #4]
   8538c:	4618      	mov	r0, r3
   8538e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85392:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   85394:	049b      	lsls	r3, r3, #18
   85396:	d51e      	bpl.n	853d6 <__sprint_r+0x5a>
   85398:	6815      	ldr	r5, [r2, #0]
   8539a:	68a0      	ldr	r0, [r4, #8]
   8539c:	3508      	adds	r5, #8
   8539e:	b1c8      	cbz	r0, 853d4 <__sprint_r+0x58>
   853a0:	f855 1c04 	ldr.w	r1, [r5, #-4]
   853a4:	f855 ac08 	ldr.w	sl, [r5, #-8]
   853a8:	ea4f 0891 	mov.w	r8, r1, lsr #2
   853ac:	2600      	movs	r6, #0
   853ae:	4546      	cmp	r6, r8
   853b0:	da09      	bge.n	853c6 <__sprint_r+0x4a>
   853b2:	4648      	mov	r0, r9
   853b4:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
   853b8:	463a      	mov	r2, r7
   853ba:	f000 fe9d 	bl	860f8 <_fputwc_r>
   853be:	1c43      	adds	r3, r0, #1
   853c0:	d00b      	beq.n	853da <__sprint_r+0x5e>
   853c2:	3601      	adds	r6, #1
   853c4:	e7f3      	b.n	853ae <__sprint_r+0x32>
   853c6:	68a2      	ldr	r2, [r4, #8]
   853c8:	ea4f 0888 	mov.w	r8, r8, lsl #2
   853cc:	ebc8 0302 	rsb	r3, r8, r2
   853d0:	60a3      	str	r3, [r4, #8]
   853d2:	e7e2      	b.n	8539a <__sprint_r+0x1e>
   853d4:	e001      	b.n	853da <__sprint_r+0x5e>
   853d6:	f001 f807 	bl	863e8 <__sfvwrite_r>
   853da:	2100      	movs	r1, #0
   853dc:	60a1      	str	r1, [r4, #8]
   853de:	6061      	str	r1, [r4, #4]
   853e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000853e4 <_vfiprintf_r>:
   853e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   853e8:	4689      	mov	r9, r1
   853ea:	b0a9      	sub	sp, #164	; 0xa4
   853ec:	4614      	mov	r4, r2
   853ee:	461d      	mov	r5, r3
   853f0:	461e      	mov	r6, r3
   853f2:	4682      	mov	sl, r0
   853f4:	b118      	cbz	r0, 853fe <_vfiprintf_r+0x1a>
   853f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   853f8:	b90b      	cbnz	r3, 853fe <_vfiprintf_r+0x1a>
   853fa:	f000 fe01 	bl	86000 <__sinit>
   853fe:	f8b9 000c 	ldrh.w	r0, [r9, #12]
   85402:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
   85406:	b211      	sxth	r1, r2
   85408:	b949      	cbnz	r1, 8541e <_vfiprintf_r+0x3a>
   8540a:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
   8540e:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
   85412:	f8a9 300c 	strh.w	r3, [r9, #12]
   85416:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   8541a:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
   8541e:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   85422:	f001 0308 	and.w	r3, r1, #8
   85426:	b218      	sxth	r0, r3
   85428:	b148      	cbz	r0, 8543e <_vfiprintf_r+0x5a>
   8542a:	f8d9 2010 	ldr.w	r2, [r9, #16]
   8542e:	b132      	cbz	r2, 8543e <_vfiprintf_r+0x5a>
   85430:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   85434:	f001 031a 	and.w	r3, r1, #26
   85438:	2b0a      	cmp	r3, #10
   8543a:	d116      	bne.n	8546a <_vfiprintf_r+0x86>
   8543c:	e009      	b.n	85452 <_vfiprintf_r+0x6e>
   8543e:	4650      	mov	r0, sl
   85440:	4649      	mov	r1, r9
   85442:	f000 fc7f 	bl	85d44 <__swsetup_r>
   85446:	2800      	cmp	r0, #0
   85448:	d0f2      	beq.n	85430 <_vfiprintf_r+0x4c>
   8544a:	f04f 32ff 	mov.w	r2, #4294967295
   8544e:	9203      	str	r2, [sp, #12]
   85450:	e3d3      	b.n	85bfa <_vfiprintf_r+0x816>
   85452:	f9b9 000e 	ldrsh.w	r0, [r9, #14]
   85456:	2800      	cmp	r0, #0
   85458:	db07      	blt.n	8546a <_vfiprintf_r+0x86>
   8545a:	4650      	mov	r0, sl
   8545c:	4649      	mov	r1, r9
   8545e:	4622      	mov	r2, r4
   85460:	462b      	mov	r3, r5
   85462:	f000 fbce 	bl	85c02 <__sbprintf>
   85466:	9003      	str	r0, [sp, #12]
   85468:	e3c7      	b.n	85bfa <_vfiprintf_r+0x816>
   8546a:	2200      	movs	r2, #0
   8546c:	ad18      	add	r5, sp, #96	; 0x60
   8546e:	950b      	str	r5, [sp, #44]	; 0x2c
   85470:	920d      	str	r2, [sp, #52]	; 0x34
   85472:	920c      	str	r2, [sp, #48]	; 0x30
   85474:	9401      	str	r4, [sp, #4]
   85476:	9205      	str	r2, [sp, #20]
   85478:	9203      	str	r2, [sp, #12]
   8547a:	46a8      	mov	r8, r5
   8547c:	9901      	ldr	r1, [sp, #4]
   8547e:	460c      	mov	r4, r1
   85480:	f811 3b01 	ldrb.w	r3, [r1], #1
   85484:	b10b      	cbz	r3, 8548a <_vfiprintf_r+0xa6>
   85486:	2b25      	cmp	r3, #37	; 0x25
   85488:	d1f9      	bne.n	8547e <_vfiprintf_r+0x9a>
   8548a:	9a01      	ldr	r2, [sp, #4]
   8548c:	1aa5      	subs	r5, r4, r2
   8548e:	d019      	beq.n	854c4 <_vfiprintf_r+0xe0>
   85490:	990c      	ldr	r1, [sp, #48]	; 0x30
   85492:	980d      	ldr	r0, [sp, #52]	; 0x34
   85494:	1c4b      	adds	r3, r1, #1
   85496:	e888 0024 	stmia.w	r8, {r2, r5}
   8549a:	2b07      	cmp	r3, #7
   8549c:	eb00 0205 	add.w	r2, r0, r5
   854a0:	920d      	str	r2, [sp, #52]	; 0x34
   854a2:	f108 0808 	add.w	r8, r8, #8
   854a6:	930c      	str	r3, [sp, #48]	; 0x30
   854a8:	dd09      	ble.n	854be <_vfiprintf_r+0xda>
   854aa:	4650      	mov	r0, sl
   854ac:	4649      	mov	r1, r9
   854ae:	aa0b      	add	r2, sp, #44	; 0x2c
   854b0:	f7ff ff64 	bl	8537c <__sprint_r>
   854b4:	2800      	cmp	r0, #0
   854b6:	f040 8398 	bne.w	85bea <_vfiprintf_r+0x806>
   854ba:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   854be:	9803      	ldr	r0, [sp, #12]
   854c0:	1942      	adds	r2, r0, r5
   854c2:	9203      	str	r2, [sp, #12]
   854c4:	7821      	ldrb	r1, [r4, #0]
   854c6:	2900      	cmp	r1, #0
   854c8:	f000 8388 	beq.w	85bdc <_vfiprintf_r+0x7f8>
   854cc:	2200      	movs	r2, #0
   854ce:	3401      	adds	r4, #1
   854d0:	9401      	str	r4, [sp, #4]
   854d2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   854d6:	f04f 3cff 	mov.w	ip, #4294967295
   854da:	9204      	str	r2, [sp, #16]
   854dc:	4617      	mov	r7, r2
   854de:	9801      	ldr	r0, [sp, #4]
   854e0:	f810 3b01 	ldrb.w	r3, [r0], #1
   854e4:	9001      	str	r0, [sp, #4]
   854e6:	2b63      	cmp	r3, #99	; 0x63
   854e8:	f000 80b3 	beq.w	85652 <_vfiprintf_r+0x26e>
   854ec:	dc33      	bgt.n	85556 <_vfiprintf_r+0x172>
   854ee:	2b39      	cmp	r3, #57	; 0x39
   854f0:	dc1a      	bgt.n	85528 <_vfiprintf_r+0x144>
   854f2:	2b31      	cmp	r3, #49	; 0x31
   854f4:	f280 8091 	bge.w	8561a <_vfiprintf_r+0x236>
   854f8:	2b2b      	cmp	r3, #43	; 0x2b
   854fa:	d101      	bne.n	85500 <_vfiprintf_r+0x11c>
   854fc:	461a      	mov	r2, r3
   854fe:	e7ee      	b.n	854de <_vfiprintf_r+0xfa>
   85500:	dc0a      	bgt.n	85518 <_vfiprintf_r+0x134>
   85502:	2b23      	cmp	r3, #35	; 0x23
   85504:	d055      	beq.n	855b2 <_vfiprintf_r+0x1ce>
   85506:	2b2a      	cmp	r3, #42	; 0x2a
   85508:	d056      	beq.n	855b8 <_vfiprintf_r+0x1d4>
   8550a:	2b20      	cmp	r3, #32
   8550c:	f040 81f5 	bne.w	858fa <_vfiprintf_r+0x516>
   85510:	2a00      	cmp	r2, #0
   85512:	bf08      	it	eq
   85514:	2220      	moveq	r2, #32
   85516:	e7e2      	b.n	854de <_vfiprintf_r+0xfa>
   85518:	2b2e      	cmp	r3, #46	; 0x2e
   8551a:	d058      	beq.n	855ce <_vfiprintf_r+0x1ea>
   8551c:	2b30      	cmp	r3, #48	; 0x30
   8551e:	d079      	beq.n	85614 <_vfiprintf_r+0x230>
   85520:	2b2d      	cmp	r3, #45	; 0x2d
   85522:	f040 81ea 	bne.w	858fa <_vfiprintf_r+0x516>
   85526:	e04f      	b.n	855c8 <_vfiprintf_r+0x1e4>
   85528:	2b4f      	cmp	r3, #79	; 0x4f
   8552a:	f000 80de 	beq.w	856ea <_vfiprintf_r+0x306>
   8552e:	dc07      	bgt.n	85540 <_vfiprintf_r+0x15c>
   85530:	2b44      	cmp	r3, #68	; 0x44
   85532:	f040 81e2 	bne.w	858fa <_vfiprintf_r+0x516>
   85536:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8553a:	f047 0710 	orr.w	r7, r7, #16
   8553e:	e090      	b.n	85662 <_vfiprintf_r+0x27e>
   85540:	2b55      	cmp	r3, #85	; 0x55
   85542:	f000 811f 	beq.w	85784 <_vfiprintf_r+0x3a0>
   85546:	2b58      	cmp	r3, #88	; 0x58
   85548:	f040 81d7 	bne.w	858fa <_vfiprintf_r+0x516>
   8554c:	4dae      	ldr	r5, [pc, #696]	; (85808 <_vfiprintf_r+0x424>)
   8554e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   85552:	9505      	str	r5, [sp, #20]
   85554:	e130      	b.n	857b8 <_vfiprintf_r+0x3d4>
   85556:	2b6f      	cmp	r3, #111	; 0x6f
   85558:	f000 80c9 	beq.w	856ee <_vfiprintf_r+0x30a>
   8555c:	dc10      	bgt.n	85580 <_vfiprintf_r+0x19c>
   8555e:	2b69      	cmp	r3, #105	; 0x69
   85560:	d024      	beq.n	855ac <_vfiprintf_r+0x1c8>
   85562:	dc07      	bgt.n	85574 <_vfiprintf_r+0x190>
   85564:	2b64      	cmp	r3, #100	; 0x64
   85566:	d021      	beq.n	855ac <_vfiprintf_r+0x1c8>
   85568:	2b68      	cmp	r3, #104	; 0x68
   8556a:	f040 81c6 	bne.w	858fa <_vfiprintf_r+0x516>
   8556e:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   85572:	e7b4      	b.n	854de <_vfiprintf_r+0xfa>
   85574:	2b6c      	cmp	r3, #108	; 0x6c
   85576:	d05f      	beq.n	85638 <_vfiprintf_r+0x254>
   85578:	2b6e      	cmp	r3, #110	; 0x6e
   8557a:	f040 81be 	bne.w	858fa <_vfiprintf_r+0x516>
   8557e:	e096      	b.n	856ae <_vfiprintf_r+0x2ca>
   85580:	2b73      	cmp	r3, #115	; 0x73
   85582:	f000 80df 	beq.w	85744 <_vfiprintf_r+0x360>
   85586:	dc06      	bgt.n	85596 <_vfiprintf_r+0x1b2>
   85588:	2b70      	cmp	r3, #112	; 0x70
   8558a:	f000 80cd 	beq.w	85728 <_vfiprintf_r+0x344>
   8558e:	2b71      	cmp	r3, #113	; 0x71
   85590:	f040 81b3 	bne.w	858fa <_vfiprintf_r+0x516>
   85594:	e05a      	b.n	8564c <_vfiprintf_r+0x268>
   85596:	2b75      	cmp	r3, #117	; 0x75
   85598:	f000 80f6 	beq.w	85788 <_vfiprintf_r+0x3a4>
   8559c:	2b78      	cmp	r3, #120	; 0x78
   8559e:	f040 81ac 	bne.w	858fa <_vfiprintf_r+0x516>
   855a2:	4d9a      	ldr	r5, [pc, #616]	; (8580c <_vfiprintf_r+0x428>)
   855a4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   855a8:	9505      	str	r5, [sp, #20]
   855aa:	e105      	b.n	857b8 <_vfiprintf_r+0x3d4>
   855ac:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   855b0:	e057      	b.n	85662 <_vfiprintf_r+0x27e>
   855b2:	f047 0701 	orr.w	r7, r7, #1
   855b6:	e792      	b.n	854de <_vfiprintf_r+0xfa>
   855b8:	1d33      	adds	r3, r6, #4
   855ba:	6836      	ldr	r6, [r6, #0]
   855bc:	2e00      	cmp	r6, #0
   855be:	9604      	str	r6, [sp, #16]
   855c0:	da15      	bge.n	855ee <_vfiprintf_r+0x20a>
   855c2:	4270      	negs	r0, r6
   855c4:	9004      	str	r0, [sp, #16]
   855c6:	461e      	mov	r6, r3
   855c8:	f047 0704 	orr.w	r7, r7, #4
   855cc:	e787      	b.n	854de <_vfiprintf_r+0xfa>
   855ce:	9901      	ldr	r1, [sp, #4]
   855d0:	f811 3b01 	ldrb.w	r3, [r1], #1
   855d4:	2b2a      	cmp	r3, #42	; 0x2a
   855d6:	9101      	str	r1, [sp, #4]
   855d8:	d10b      	bne.n	855f2 <_vfiprintf_r+0x20e>
   855da:	f8d6 c000 	ldr.w	ip, [r6]
   855de:	1d33      	adds	r3, r6, #4
   855e0:	f1bc 0f00 	cmp.w	ip, #0
   855e4:	da03      	bge.n	855ee <_vfiprintf_r+0x20a>
   855e6:	461e      	mov	r6, r3
   855e8:	f04f 3cff 	mov.w	ip, #4294967295
   855ec:	e777      	b.n	854de <_vfiprintf_r+0xfa>
   855ee:	461e      	mov	r6, r3
   855f0:	e775      	b.n	854de <_vfiprintf_r+0xfa>
   855f2:	f04f 0c00 	mov.w	ip, #0
   855f6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   855fa:	2809      	cmp	r0, #9
   855fc:	d807      	bhi.n	8560e <_vfiprintf_r+0x22a>
   855fe:	9901      	ldr	r1, [sp, #4]
   85600:	230a      	movs	r3, #10
   85602:	fb03 0c0c 	mla	ip, r3, ip, r0
   85606:	f811 3b01 	ldrb.w	r3, [r1], #1
   8560a:	9101      	str	r1, [sp, #4]
   8560c:	e7f3      	b.n	855f6 <_vfiprintf_r+0x212>
   8560e:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   85612:	e768      	b.n	854e6 <_vfiprintf_r+0x102>
   85614:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   85618:	e761      	b.n	854de <_vfiprintf_r+0xfa>
   8561a:	9801      	ldr	r0, [sp, #4]
   8561c:	2100      	movs	r1, #0
   8561e:	3b30      	subs	r3, #48	; 0x30
   85620:	240a      	movs	r4, #10
   85622:	fb04 3101 	mla	r1, r4, r1, r3
   85626:	f810 3b01 	ldrb.w	r3, [r0], #1
   8562a:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   8562e:	2c09      	cmp	r4, #9
   85630:	9001      	str	r0, [sp, #4]
   85632:	d9f4      	bls.n	8561e <_vfiprintf_r+0x23a>
   85634:	9104      	str	r1, [sp, #16]
   85636:	e756      	b.n	854e6 <_vfiprintf_r+0x102>
   85638:	9901      	ldr	r1, [sp, #4]
   8563a:	780b      	ldrb	r3, [r1, #0]
   8563c:	2b6c      	cmp	r3, #108	; 0x6c
   8563e:	d102      	bne.n	85646 <_vfiprintf_r+0x262>
   85640:	1c48      	adds	r0, r1, #1
   85642:	9001      	str	r0, [sp, #4]
   85644:	e002      	b.n	8564c <_vfiprintf_r+0x268>
   85646:	f047 0710 	orr.w	r7, r7, #16
   8564a:	e748      	b.n	854de <_vfiprintf_r+0xfa>
   8564c:	f047 0720 	orr.w	r7, r7, #32
   85650:	e745      	b.n	854de <_vfiprintf_r+0xfa>
   85652:	6832      	ldr	r2, [r6, #0]
   85654:	2500      	movs	r5, #0
   85656:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   8565a:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8565e:	3604      	adds	r6, #4
   85660:	e155      	b.n	8590e <_vfiprintf_r+0x52a>
   85662:	06ba      	lsls	r2, r7, #26
   85664:	d507      	bpl.n	85676 <_vfiprintf_r+0x292>
   85666:	3607      	adds	r6, #7
   85668:	f026 0507 	bic.w	r5, r6, #7
   8566c:	f105 0608 	add.w	r6, r5, #8
   85670:	e9d5 4500 	ldrd	r4, r5, [r5]
   85674:	e00f      	b.n	85696 <_vfiprintf_r+0x2b2>
   85676:	f017 0f10 	tst.w	r7, #16
   8567a:	f106 0104 	add.w	r1, r6, #4
   8567e:	d001      	beq.n	85684 <_vfiprintf_r+0x2a0>
   85680:	6832      	ldr	r2, [r6, #0]
   85682:	e005      	b.n	85690 <_vfiprintf_r+0x2ac>
   85684:	f017 0f40 	tst.w	r7, #64	; 0x40
   85688:	6832      	ldr	r2, [r6, #0]
   8568a:	d001      	beq.n	85690 <_vfiprintf_r+0x2ac>
   8568c:	b214      	sxth	r4, r2
   8568e:	e000      	b.n	85692 <_vfiprintf_r+0x2ae>
   85690:	4614      	mov	r4, r2
   85692:	17e5      	asrs	r5, r4, #31
   85694:	460e      	mov	r6, r1
   85696:	2c00      	cmp	r4, #0
   85698:	f175 0200 	sbcs.w	r2, r5, #0
   8569c:	f280 80b8 	bge.w	85810 <_vfiprintf_r+0x42c>
   856a0:	232d      	movs	r3, #45	; 0x2d
   856a2:	4264      	negs	r4, r4
   856a4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   856a8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   856ac:	e0b0      	b.n	85810 <_vfiprintf_r+0x42c>
   856ae:	f017 0f20 	tst.w	r7, #32
   856b2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   856b6:	f106 0204 	add.w	r2, r6, #4
   856ba:	d005      	beq.n	856c8 <_vfiprintf_r+0x2e4>
   856bc:	9c03      	ldr	r4, [sp, #12]
   856be:	6835      	ldr	r5, [r6, #0]
   856c0:	17e0      	asrs	r0, r4, #31
   856c2:	602c      	str	r4, [r5, #0]
   856c4:	6068      	str	r0, [r5, #4]
   856c6:	e004      	b.n	856d2 <_vfiprintf_r+0x2ee>
   856c8:	06fb      	lsls	r3, r7, #27
   856ca:	d504      	bpl.n	856d6 <_vfiprintf_r+0x2f2>
   856cc:	6833      	ldr	r3, [r6, #0]
   856ce:	9903      	ldr	r1, [sp, #12]
   856d0:	6019      	str	r1, [r3, #0]
   856d2:	4616      	mov	r6, r2
   856d4:	e6d2      	b.n	8547c <_vfiprintf_r+0x98>
   856d6:	6830      	ldr	r0, [r6, #0]
   856d8:	9c03      	ldr	r4, [sp, #12]
   856da:	f017 0f40 	tst.w	r7, #64	; 0x40
   856de:	f106 0604 	add.w	r6, r6, #4
   856e2:	bf14      	ite	ne
   856e4:	8004      	strhne	r4, [r0, #0]
   856e6:	6004      	streq	r4, [r0, #0]
   856e8:	e6c8      	b.n	8547c <_vfiprintf_r+0x98>
   856ea:	f047 0710 	orr.w	r7, r7, #16
   856ee:	f017 0020 	ands.w	r0, r7, #32
   856f2:	d008      	beq.n	85706 <_vfiprintf_r+0x322>
   856f4:	1df3      	adds	r3, r6, #7
   856f6:	f023 0507 	bic.w	r5, r3, #7
   856fa:	f105 0608 	add.w	r6, r5, #8
   856fe:	e9d5 4500 	ldrd	r4, r5, [r5]
   85702:	2000      	movs	r0, #0
   85704:	e07c      	b.n	85800 <_vfiprintf_r+0x41c>
   85706:	f017 0110 	ands.w	r1, r7, #16
   8570a:	f106 0204 	add.w	r2, r6, #4
   8570e:	d106      	bne.n	8571e <_vfiprintf_r+0x33a>
   85710:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   85714:	d003      	beq.n	8571e <_vfiprintf_r+0x33a>
   85716:	8834      	ldrh	r4, [r6, #0]
   85718:	2500      	movs	r5, #0
   8571a:	4616      	mov	r6, r2
   8571c:	e7f1      	b.n	85702 <_vfiprintf_r+0x31e>
   8571e:	6836      	ldr	r6, [r6, #0]
   85720:	2500      	movs	r5, #0
   85722:	4634      	mov	r4, r6
   85724:	4616      	mov	r6, r2
   85726:	e06b      	b.n	85800 <_vfiprintf_r+0x41c>
   85728:	4b38      	ldr	r3, [pc, #224]	; (8580c <_vfiprintf_r+0x428>)
   8572a:	2130      	movs	r1, #48	; 0x30
   8572c:	2278      	movs	r2, #120	; 0x78
   8572e:	6834      	ldr	r4, [r6, #0]
   85730:	2500      	movs	r5, #0
   85732:	f047 0702 	orr.w	r7, r7, #2
   85736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   8573a:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   8573e:	3604      	adds	r6, #4
   85740:	9305      	str	r3, [sp, #20]
   85742:	e05c      	b.n	857fe <_vfiprintf_r+0x41a>
   85744:	4631      	mov	r1, r6
   85746:	2500      	movs	r5, #0
   85748:	f8d1 b000 	ldr.w	fp, [r1]
   8574c:	3604      	adds	r6, #4
   8574e:	45ac      	cmp	ip, r5
   85750:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   85754:	4658      	mov	r0, fp
   85756:	db11      	blt.n	8577c <_vfiprintf_r+0x398>
   85758:	4662      	mov	r2, ip
   8575a:	4629      	mov	r1, r5
   8575c:	f8cd c000 	str.w	ip, [sp]
   85760:	f001 faa2 	bl	86ca8 <memchr>
   85764:	f8dd c000 	ldr.w	ip, [sp]
   85768:	2800      	cmp	r0, #0
   8576a:	f000 80d4 	beq.w	85916 <_vfiprintf_r+0x532>
   8576e:	ebcb 0400 	rsb	r4, fp, r0
   85772:	4564      	cmp	r4, ip
   85774:	f340 80d1 	ble.w	8591a <_vfiprintf_r+0x536>
   85778:	4664      	mov	r4, ip
   8577a:	e0ce      	b.n	8591a <_vfiprintf_r+0x536>
   8577c:	f7ff fde0 	bl	85340 <strlen>
   85780:	4604      	mov	r4, r0
   85782:	e0ca      	b.n	8591a <_vfiprintf_r+0x536>
   85784:	f047 0710 	orr.w	r7, r7, #16
   85788:	06bd      	lsls	r5, r7, #26
   8578a:	d506      	bpl.n	8579a <_vfiprintf_r+0x3b6>
   8578c:	1df0      	adds	r0, r6, #7
   8578e:	f020 0407 	bic.w	r4, r0, #7
   85792:	f104 0608 	add.w	r6, r4, #8
   85796:	cc30      	ldmia	r4, {r4, r5}
   85798:	e00c      	b.n	857b4 <_vfiprintf_r+0x3d0>
   8579a:	f017 0f10 	tst.w	r7, #16
   8579e:	f106 0304 	add.w	r3, r6, #4
   857a2:	d103      	bne.n	857ac <_vfiprintf_r+0x3c8>
   857a4:	067c      	lsls	r4, r7, #25
   857a6:	d501      	bpl.n	857ac <_vfiprintf_r+0x3c8>
   857a8:	8834      	ldrh	r4, [r6, #0]
   857aa:	e001      	b.n	857b0 <_vfiprintf_r+0x3cc>
   857ac:	6835      	ldr	r5, [r6, #0]
   857ae:	462c      	mov	r4, r5
   857b0:	2500      	movs	r5, #0
   857b2:	461e      	mov	r6, r3
   857b4:	2001      	movs	r0, #1
   857b6:	e023      	b.n	85800 <_vfiprintf_r+0x41c>
   857b8:	06b8      	lsls	r0, r7, #26
   857ba:	d507      	bpl.n	857cc <_vfiprintf_r+0x3e8>
   857bc:	1df4      	adds	r4, r6, #7
   857be:	f024 0107 	bic.w	r1, r4, #7
   857c2:	f101 0608 	add.w	r6, r1, #8
   857c6:	e9d1 4500 	ldrd	r4, r5, [r1]
   857ca:	e00c      	b.n	857e6 <_vfiprintf_r+0x402>
   857cc:	f017 0f10 	tst.w	r7, #16
   857d0:	f106 0004 	add.w	r0, r6, #4
   857d4:	d103      	bne.n	857de <_vfiprintf_r+0x3fa>
   857d6:	0679      	lsls	r1, r7, #25
   857d8:	d501      	bpl.n	857de <_vfiprintf_r+0x3fa>
   857da:	8834      	ldrh	r4, [r6, #0]
   857dc:	e001      	b.n	857e2 <_vfiprintf_r+0x3fe>
   857de:	6836      	ldr	r6, [r6, #0]
   857e0:	4634      	mov	r4, r6
   857e2:	2500      	movs	r5, #0
   857e4:	4606      	mov	r6, r0
   857e6:	07fa      	lsls	r2, r7, #31
   857e8:	d509      	bpl.n	857fe <_vfiprintf_r+0x41a>
   857ea:	ea54 0205 	orrs.w	r2, r4, r5
   857ee:	d006      	beq.n	857fe <_vfiprintf_r+0x41a>
   857f0:	2230      	movs	r2, #48	; 0x30
   857f2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   857f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   857fa:	f047 0702 	orr.w	r7, r7, #2
   857fe:	2002      	movs	r0, #2
   85800:	2100      	movs	r1, #0
   85802:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   85806:	e004      	b.n	85812 <_vfiprintf_r+0x42e>
   85808:	00087b96 	.word	0x00087b96
   8580c:	00087ba7 	.word	0x00087ba7
   85810:	2001      	movs	r0, #1
   85812:	f1bc 0f00 	cmp.w	ip, #0
   85816:	bfa8      	it	ge
   85818:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   8581c:	ea54 0105 	orrs.w	r1, r4, r5
   85820:	d102      	bne.n	85828 <_vfiprintf_r+0x444>
   85822:	f1bc 0f00 	cmp.w	ip, #0
   85826:	d058      	beq.n	858da <_vfiprintf_r+0x4f6>
   85828:	2801      	cmp	r0, #1
   8582a:	d01d      	beq.n	85868 <_vfiprintf_r+0x484>
   8582c:	2802      	cmp	r0, #2
   8582e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   85832:	d041      	beq.n	858b8 <_vfiprintf_r+0x4d4>
   85834:	f004 0207 	and.w	r2, r4, #7
   85838:	08e4      	lsrs	r4, r4, #3
   8583a:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   8583e:	08e9      	lsrs	r1, r5, #3
   85840:	4604      	mov	r4, r0
   85842:	460d      	mov	r5, r1
   85844:	3230      	adds	r2, #48	; 0x30
   85846:	ea54 0105 	orrs.w	r1, r4, r5
   8584a:	469b      	mov	fp, r3
   8584c:	701a      	strb	r2, [r3, #0]
   8584e:	f103 33ff 	add.w	r3, r3, #4294967295
   85852:	d1ef      	bne.n	85834 <_vfiprintf_r+0x450>
   85854:	07f8      	lsls	r0, r7, #31
   85856:	465d      	mov	r5, fp
   85858:	d54a      	bpl.n	858f0 <_vfiprintf_r+0x50c>
   8585a:	2a30      	cmp	r2, #48	; 0x30
   8585c:	d048      	beq.n	858f0 <_vfiprintf_r+0x50c>
   8585e:	2230      	movs	r2, #48	; 0x30
   85860:	469b      	mov	fp, r3
   85862:	f805 2c01 	strb.w	r2, [r5, #-1]
   85866:	e043      	b.n	858f0 <_vfiprintf_r+0x50c>
   85868:	2d00      	cmp	r5, #0
   8586a:	bf08      	it	eq
   8586c:	2c0a      	cmpeq	r4, #10
   8586e:	d203      	bcs.n	85878 <_vfiprintf_r+0x494>
   85870:	3430      	adds	r4, #48	; 0x30
   85872:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   85876:	e036      	b.n	858e6 <_vfiprintf_r+0x502>
   85878:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8587c:	9302      	str	r3, [sp, #8]
   8587e:	4620      	mov	r0, r4
   85880:	4629      	mov	r1, r5
   85882:	220a      	movs	r2, #10
   85884:	2300      	movs	r3, #0
   85886:	f8cd c000 	str.w	ip, [sp]
   8588a:	f001 fd0f 	bl	872ac <__aeabi_uldivmod>
   8588e:	9802      	ldr	r0, [sp, #8]
   85890:	3230      	adds	r2, #48	; 0x30
   85892:	f800 2901 	strb.w	r2, [r0], #-1
   85896:	4629      	mov	r1, r5
   85898:	220a      	movs	r2, #10
   8589a:	2300      	movs	r3, #0
   8589c:	f8dd b008 	ldr.w	fp, [sp, #8]
   858a0:	9002      	str	r0, [sp, #8]
   858a2:	4620      	mov	r0, r4
   858a4:	f001 fd02 	bl	872ac <__aeabi_uldivmod>
   858a8:	4604      	mov	r4, r0
   858aa:	460d      	mov	r5, r1
   858ac:	ea54 0105 	orrs.w	r1, r4, r5
   858b0:	f8dd c000 	ldr.w	ip, [sp]
   858b4:	d1e3      	bne.n	8587e <_vfiprintf_r+0x49a>
   858b6:	e01b      	b.n	858f0 <_vfiprintf_r+0x50c>
   858b8:	9905      	ldr	r1, [sp, #20]
   858ba:	f004 000f 	and.w	r0, r4, #15
   858be:	0924      	lsrs	r4, r4, #4
   858c0:	5c0a      	ldrb	r2, [r1, r0]
   858c2:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   858c6:	0929      	lsrs	r1, r5, #4
   858c8:	4604      	mov	r4, r0
   858ca:	460d      	mov	r5, r1
   858cc:	469b      	mov	fp, r3
   858ce:	f803 2901 	strb.w	r2, [r3], #-1
   858d2:	ea54 0205 	orrs.w	r2, r4, r5
   858d6:	d1ef      	bne.n	858b8 <_vfiprintf_r+0x4d4>
   858d8:	e00a      	b.n	858f0 <_vfiprintf_r+0x50c>
   858da:	b938      	cbnz	r0, 858ec <_vfiprintf_r+0x508>
   858dc:	07f9      	lsls	r1, r7, #31
   858de:	d505      	bpl.n	858ec <_vfiprintf_r+0x508>
   858e0:	2030      	movs	r0, #48	; 0x30
   858e2:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   858e6:	f10d 0b5f 	add.w	fp, sp, #95	; 0x5f
   858ea:	e001      	b.n	858f0 <_vfiprintf_r+0x50c>
   858ec:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
   858f0:	ad18      	add	r5, sp, #96	; 0x60
   858f2:	ebcb 0405 	rsb	r4, fp, r5
   858f6:	4665      	mov	r5, ip
   858f8:	e00f      	b.n	8591a <_vfiprintf_r+0x536>
   858fa:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   858fe:	2b00      	cmp	r3, #0
   85900:	f000 816c 	beq.w	85bdc <_vfiprintf_r+0x7f8>
   85904:	2500      	movs	r5, #0
   85906:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   8590a:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8590e:	2401      	movs	r4, #1
   85910:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
   85914:	e001      	b.n	8591a <_vfiprintf_r+0x536>
   85916:	4664      	mov	r4, ip
   85918:	4605      	mov	r5, r0
   8591a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8591e:	42ac      	cmp	r4, r5
   85920:	bfac      	ite	ge
   85922:	4621      	movge	r1, r4
   85924:	4629      	movlt	r1, r5
   85926:	9102      	str	r1, [sp, #8]
   85928:	b113      	cbz	r3, 85930 <_vfiprintf_r+0x54c>
   8592a:	9802      	ldr	r0, [sp, #8]
   8592c:	1c42      	adds	r2, r0, #1
   8592e:	9202      	str	r2, [sp, #8]
   85930:	f017 0102 	ands.w	r1, r7, #2
   85934:	9106      	str	r1, [sp, #24]
   85936:	d002      	beq.n	8593e <_vfiprintf_r+0x55a>
   85938:	9b02      	ldr	r3, [sp, #8]
   8593a:	1c98      	adds	r0, r3, #2
   8593c:	9002      	str	r0, [sp, #8]
   8593e:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   85942:	9207      	str	r2, [sp, #28]
   85944:	d13a      	bne.n	859bc <_vfiprintf_r+0x5d8>
   85946:	9904      	ldr	r1, [sp, #16]
   85948:	9b02      	ldr	r3, [sp, #8]
   8594a:	1acb      	subs	r3, r1, r3
   8594c:	2b00      	cmp	r3, #0
   8594e:	dd35      	ble.n	859bc <_vfiprintf_r+0x5d8>
   85950:	48a0      	ldr	r0, [pc, #640]	; (85bd4 <_vfiprintf_r+0x7f0>)
   85952:	2b10      	cmp	r3, #16
   85954:	f8c8 0000 	str.w	r0, [r8]
   85958:	dd1a      	ble.n	85990 <_vfiprintf_r+0x5ac>
   8595a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8595c:	2010      	movs	r0, #16
   8595e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85960:	f8c8 0004 	str.w	r0, [r8, #4]
   85964:	1c48      	adds	r0, r1, #1
   85966:	3210      	adds	r2, #16
   85968:	2807      	cmp	r0, #7
   8596a:	920d      	str	r2, [sp, #52]	; 0x34
   8596c:	f108 0808 	add.w	r8, r8, #8
   85970:	900c      	str	r0, [sp, #48]	; 0x30
   85972:	dd0b      	ble.n	8598c <_vfiprintf_r+0x5a8>
   85974:	4650      	mov	r0, sl
   85976:	4649      	mov	r1, r9
   85978:	aa0b      	add	r2, sp, #44	; 0x2c
   8597a:	9300      	str	r3, [sp, #0]
   8597c:	f7ff fcfe 	bl	8537c <__sprint_r>
   85980:	9b00      	ldr	r3, [sp, #0]
   85982:	2800      	cmp	r0, #0
   85984:	f040 8131 	bne.w	85bea <_vfiprintf_r+0x806>
   85988:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8598c:	3b10      	subs	r3, #16
   8598e:	e7df      	b.n	85950 <_vfiprintf_r+0x56c>
   85990:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85992:	f8c8 3004 	str.w	r3, [r8, #4]
   85996:	18d1      	adds	r1, r2, r3
   85998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8599a:	910d      	str	r1, [sp, #52]	; 0x34
   8599c:	1c58      	adds	r0, r3, #1
   8599e:	2807      	cmp	r0, #7
   859a0:	f108 0808 	add.w	r8, r8, #8
   859a4:	900c      	str	r0, [sp, #48]	; 0x30
   859a6:	dd09      	ble.n	859bc <_vfiprintf_r+0x5d8>
   859a8:	4650      	mov	r0, sl
   859aa:	4649      	mov	r1, r9
   859ac:	aa0b      	add	r2, sp, #44	; 0x2c
   859ae:	f7ff fce5 	bl	8537c <__sprint_r>
   859b2:	2800      	cmp	r0, #0
   859b4:	f040 8119 	bne.w	85bea <_vfiprintf_r+0x806>
   859b8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   859bc:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   859c0:	b1d2      	cbz	r2, 859f8 <_vfiprintf_r+0x614>
   859c2:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   859c6:	f8c8 1000 	str.w	r1, [r8]
   859ca:	990c      	ldr	r1, [sp, #48]	; 0x30
   859cc:	2301      	movs	r3, #1
   859ce:	980d      	ldr	r0, [sp, #52]	; 0x34
   859d0:	f8c8 3004 	str.w	r3, [r8, #4]
   859d4:	1c4b      	adds	r3, r1, #1
   859d6:	1c42      	adds	r2, r0, #1
   859d8:	2b07      	cmp	r3, #7
   859da:	920d      	str	r2, [sp, #52]	; 0x34
   859dc:	f108 0808 	add.w	r8, r8, #8
   859e0:	930c      	str	r3, [sp, #48]	; 0x30
   859e2:	dd09      	ble.n	859f8 <_vfiprintf_r+0x614>
   859e4:	4650      	mov	r0, sl
   859e6:	4649      	mov	r1, r9
   859e8:	aa0b      	add	r2, sp, #44	; 0x2c
   859ea:	f7ff fcc7 	bl	8537c <__sprint_r>
   859ee:	2800      	cmp	r0, #0
   859f0:	f040 80fb 	bne.w	85bea <_vfiprintf_r+0x806>
   859f4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   859f8:	9806      	ldr	r0, [sp, #24]
   859fa:	b1c8      	cbz	r0, 85a30 <_vfiprintf_r+0x64c>
   859fc:	aa0a      	add	r2, sp, #40	; 0x28
   859fe:	f8c8 2000 	str.w	r2, [r8]
   85a02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85a04:	2102      	movs	r1, #2
   85a06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85a08:	f8c8 1004 	str.w	r1, [r8, #4]
   85a0c:	1c51      	adds	r1, r2, #1
   85a0e:	1c98      	adds	r0, r3, #2
   85a10:	2907      	cmp	r1, #7
   85a12:	900d      	str	r0, [sp, #52]	; 0x34
   85a14:	f108 0808 	add.w	r8, r8, #8
   85a18:	910c      	str	r1, [sp, #48]	; 0x30
   85a1a:	dd09      	ble.n	85a30 <_vfiprintf_r+0x64c>
   85a1c:	4650      	mov	r0, sl
   85a1e:	4649      	mov	r1, r9
   85a20:	aa0b      	add	r2, sp, #44	; 0x2c
   85a22:	f7ff fcab 	bl	8537c <__sprint_r>
   85a26:	2800      	cmp	r0, #0
   85a28:	f040 80df 	bne.w	85bea <_vfiprintf_r+0x806>
   85a2c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   85a30:	9b07      	ldr	r3, [sp, #28]
   85a32:	2b80      	cmp	r3, #128	; 0x80
   85a34:	d13a      	bne.n	85aac <_vfiprintf_r+0x6c8>
   85a36:	9804      	ldr	r0, [sp, #16]
   85a38:	9a02      	ldr	r2, [sp, #8]
   85a3a:	1a83      	subs	r3, r0, r2
   85a3c:	2b00      	cmp	r3, #0
   85a3e:	dd35      	ble.n	85aac <_vfiprintf_r+0x6c8>
   85a40:	4965      	ldr	r1, [pc, #404]	; (85bd8 <_vfiprintf_r+0x7f4>)
   85a42:	2b10      	cmp	r3, #16
   85a44:	f8c8 1000 	str.w	r1, [r8]
   85a48:	dd1a      	ble.n	85a80 <_vfiprintf_r+0x69c>
   85a4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85a4c:	2110      	movs	r1, #16
   85a4e:	980d      	ldr	r0, [sp, #52]	; 0x34
   85a50:	f8c8 1004 	str.w	r1, [r8, #4]
   85a54:	1c51      	adds	r1, r2, #1
   85a56:	3010      	adds	r0, #16
   85a58:	2907      	cmp	r1, #7
   85a5a:	900d      	str	r0, [sp, #52]	; 0x34
   85a5c:	f108 0808 	add.w	r8, r8, #8
   85a60:	910c      	str	r1, [sp, #48]	; 0x30
   85a62:	dd0b      	ble.n	85a7c <_vfiprintf_r+0x698>
   85a64:	4650      	mov	r0, sl
   85a66:	4649      	mov	r1, r9
   85a68:	aa0b      	add	r2, sp, #44	; 0x2c
   85a6a:	9300      	str	r3, [sp, #0]
   85a6c:	f7ff fc86 	bl	8537c <__sprint_r>
   85a70:	9b00      	ldr	r3, [sp, #0]
   85a72:	2800      	cmp	r0, #0
   85a74:	f040 80b9 	bne.w	85bea <_vfiprintf_r+0x806>
   85a78:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   85a7c:	3b10      	subs	r3, #16
   85a7e:	e7df      	b.n	85a40 <_vfiprintf_r+0x65c>
   85a80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85a82:	980d      	ldr	r0, [sp, #52]	; 0x34
   85a84:	1c51      	adds	r1, r2, #1
   85a86:	f8c8 3004 	str.w	r3, [r8, #4]
   85a8a:	2907      	cmp	r1, #7
   85a8c:	4403      	add	r3, r0
   85a8e:	930d      	str	r3, [sp, #52]	; 0x34
   85a90:	f108 0808 	add.w	r8, r8, #8
   85a94:	910c      	str	r1, [sp, #48]	; 0x30
   85a96:	dd09      	ble.n	85aac <_vfiprintf_r+0x6c8>
   85a98:	4650      	mov	r0, sl
   85a9a:	4649      	mov	r1, r9
   85a9c:	aa0b      	add	r2, sp, #44	; 0x2c
   85a9e:	f7ff fc6d 	bl	8537c <__sprint_r>
   85aa2:	2800      	cmp	r0, #0
   85aa4:	f040 80a1 	bne.w	85bea <_vfiprintf_r+0x806>
   85aa8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   85aac:	1b2d      	subs	r5, r5, r4
   85aae:	2d00      	cmp	r5, #0
   85ab0:	dd32      	ble.n	85b18 <_vfiprintf_r+0x734>
   85ab2:	4849      	ldr	r0, [pc, #292]	; (85bd8 <_vfiprintf_r+0x7f4>)
   85ab4:	2d10      	cmp	r5, #16
   85ab6:	f8c8 0000 	str.w	r0, [r8]
   85aba:	dd18      	ble.n	85aee <_vfiprintf_r+0x70a>
   85abc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85abe:	980d      	ldr	r0, [sp, #52]	; 0x34
   85ac0:	1c53      	adds	r3, r2, #1
   85ac2:	2110      	movs	r1, #16
   85ac4:	3010      	adds	r0, #16
   85ac6:	2b07      	cmp	r3, #7
   85ac8:	f8c8 1004 	str.w	r1, [r8, #4]
   85acc:	900d      	str	r0, [sp, #52]	; 0x34
   85ace:	f108 0808 	add.w	r8, r8, #8
   85ad2:	930c      	str	r3, [sp, #48]	; 0x30
   85ad4:	dd09      	ble.n	85aea <_vfiprintf_r+0x706>
   85ad6:	4650      	mov	r0, sl
   85ad8:	4649      	mov	r1, r9
   85ada:	aa0b      	add	r2, sp, #44	; 0x2c
   85adc:	f7ff fc4e 	bl	8537c <__sprint_r>
   85ae0:	2800      	cmp	r0, #0
   85ae2:	f040 8082 	bne.w	85bea <_vfiprintf_r+0x806>
   85ae6:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   85aea:	3d10      	subs	r5, #16
   85aec:	e7e1      	b.n	85ab2 <_vfiprintf_r+0x6ce>
   85aee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85af0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85af2:	1c51      	adds	r1, r2, #1
   85af4:	f8c8 5004 	str.w	r5, [r8, #4]
   85af8:	2907      	cmp	r1, #7
   85afa:	441d      	add	r5, r3
   85afc:	950d      	str	r5, [sp, #52]	; 0x34
   85afe:	f108 0808 	add.w	r8, r8, #8
   85b02:	910c      	str	r1, [sp, #48]	; 0x30
   85b04:	dd08      	ble.n	85b18 <_vfiprintf_r+0x734>
   85b06:	4650      	mov	r0, sl
   85b08:	4649      	mov	r1, r9
   85b0a:	aa0b      	add	r2, sp, #44	; 0x2c
   85b0c:	f7ff fc36 	bl	8537c <__sprint_r>
   85b10:	2800      	cmp	r0, #0
   85b12:	d16a      	bne.n	85bea <_vfiprintf_r+0x806>
   85b14:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   85b18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85b1a:	980d      	ldr	r0, [sp, #52]	; 0x34
   85b1c:	1c51      	adds	r1, r2, #1
   85b1e:	f8c8 4004 	str.w	r4, [r8, #4]
   85b22:	2907      	cmp	r1, #7
   85b24:	4404      	add	r4, r0
   85b26:	f8c8 b000 	str.w	fp, [r8]
   85b2a:	940d      	str	r4, [sp, #52]	; 0x34
   85b2c:	f108 0308 	add.w	r3, r8, #8
   85b30:	910c      	str	r1, [sp, #48]	; 0x30
   85b32:	dd07      	ble.n	85b44 <_vfiprintf_r+0x760>
   85b34:	4650      	mov	r0, sl
   85b36:	4649      	mov	r1, r9
   85b38:	aa0b      	add	r2, sp, #44	; 0x2c
   85b3a:	f7ff fc1f 	bl	8537c <__sprint_r>
   85b3e:	2800      	cmp	r0, #0
   85b40:	d153      	bne.n	85bea <_vfiprintf_r+0x806>
   85b42:	ab18      	add	r3, sp, #96	; 0x60
   85b44:	077a      	lsls	r2, r7, #29
   85b46:	d40b      	bmi.n	85b60 <_vfiprintf_r+0x77c>
   85b48:	9b03      	ldr	r3, [sp, #12]
   85b4a:	9a02      	ldr	r2, [sp, #8]
   85b4c:	9904      	ldr	r1, [sp, #16]
   85b4e:	980d      	ldr	r0, [sp, #52]	; 0x34
   85b50:	428a      	cmp	r2, r1
   85b52:	bfac      	ite	ge
   85b54:	189b      	addge	r3, r3, r2
   85b56:	185b      	addlt	r3, r3, r1
   85b58:	9303      	str	r3, [sp, #12]
   85b5a:	2800      	cmp	r0, #0
   85b5c:	d035      	beq.n	85bca <_vfiprintf_r+0x7e6>
   85b5e:	e02e      	b.n	85bbe <_vfiprintf_r+0x7da>
   85b60:	9c04      	ldr	r4, [sp, #16]
   85b62:	9802      	ldr	r0, [sp, #8]
   85b64:	1a24      	subs	r4, r4, r0
   85b66:	2c00      	cmp	r4, #0
   85b68:	ddee      	ble.n	85b48 <_vfiprintf_r+0x764>
   85b6a:	4a1a      	ldr	r2, [pc, #104]	; (85bd4 <_vfiprintf_r+0x7f0>)
   85b6c:	2c10      	cmp	r4, #16
   85b6e:	601a      	str	r2, [r3, #0]
   85b70:	dd14      	ble.n	85b9c <_vfiprintf_r+0x7b8>
   85b72:	980c      	ldr	r0, [sp, #48]	; 0x30
   85b74:	2210      	movs	r2, #16
   85b76:	990d      	ldr	r1, [sp, #52]	; 0x34
   85b78:	605a      	str	r2, [r3, #4]
   85b7a:	1c42      	adds	r2, r0, #1
   85b7c:	3110      	adds	r1, #16
   85b7e:	3308      	adds	r3, #8
   85b80:	2a07      	cmp	r2, #7
   85b82:	910d      	str	r1, [sp, #52]	; 0x34
   85b84:	920c      	str	r2, [sp, #48]	; 0x30
   85b86:	dd07      	ble.n	85b98 <_vfiprintf_r+0x7b4>
   85b88:	4650      	mov	r0, sl
   85b8a:	4649      	mov	r1, r9
   85b8c:	aa0b      	add	r2, sp, #44	; 0x2c
   85b8e:	f7ff fbf5 	bl	8537c <__sprint_r>
   85b92:	2800      	cmp	r0, #0
   85b94:	d129      	bne.n	85bea <_vfiprintf_r+0x806>
   85b96:	ab18      	add	r3, sp, #96	; 0x60
   85b98:	3c10      	subs	r4, #16
   85b9a:	e7e6      	b.n	85b6a <_vfiprintf_r+0x786>
   85b9c:	990c      	ldr	r1, [sp, #48]	; 0x30
   85b9e:	605c      	str	r4, [r3, #4]
   85ba0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85ba2:	1c48      	adds	r0, r1, #1
   85ba4:	191c      	adds	r4, r3, r4
   85ba6:	2807      	cmp	r0, #7
   85ba8:	940d      	str	r4, [sp, #52]	; 0x34
   85baa:	900c      	str	r0, [sp, #48]	; 0x30
   85bac:	ddcc      	ble.n	85b48 <_vfiprintf_r+0x764>
   85bae:	4650      	mov	r0, sl
   85bb0:	4649      	mov	r1, r9
   85bb2:	aa0b      	add	r2, sp, #44	; 0x2c
   85bb4:	f7ff fbe2 	bl	8537c <__sprint_r>
   85bb8:	2800      	cmp	r0, #0
   85bba:	d0c5      	beq.n	85b48 <_vfiprintf_r+0x764>
   85bbc:	e015      	b.n	85bea <_vfiprintf_r+0x806>
   85bbe:	4650      	mov	r0, sl
   85bc0:	4649      	mov	r1, r9
   85bc2:	aa0b      	add	r2, sp, #44	; 0x2c
   85bc4:	f7ff fbda 	bl	8537c <__sprint_r>
   85bc8:	b978      	cbnz	r0, 85bea <_vfiprintf_r+0x806>
   85bca:	2500      	movs	r5, #0
   85bcc:	950c      	str	r5, [sp, #48]	; 0x30
   85bce:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   85bd2:	e453      	b.n	8547c <_vfiprintf_r+0x98>
   85bd4:	00087b76 	.word	0x00087b76
   85bd8:	00087b86 	.word	0x00087b86
   85bdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85bde:	b122      	cbz	r2, 85bea <_vfiprintf_r+0x806>
   85be0:	4650      	mov	r0, sl
   85be2:	4649      	mov	r1, r9
   85be4:	aa0b      	add	r2, sp, #44	; 0x2c
   85be6:	f7ff fbc9 	bl	8537c <__sprint_r>
   85bea:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   85bee:	f001 0040 	and.w	r0, r1, #64	; 0x40
   85bf2:	b203      	sxth	r3, r0
   85bf4:	2b00      	cmp	r3, #0
   85bf6:	f47f ac28 	bne.w	8544a <_vfiprintf_r+0x66>
   85bfa:	9803      	ldr	r0, [sp, #12]
   85bfc:	b029      	add	sp, #164	; 0xa4
   85bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085c02 <__sbprintf>:
   85c02:	b570      	push	{r4, r5, r6, lr}
   85c04:	460c      	mov	r4, r1
   85c06:	8989      	ldrh	r1, [r1, #12]
   85c08:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   85c0c:	f021 0502 	bic.w	r5, r1, #2
   85c10:	6e61      	ldr	r1, [r4, #100]	; 0x64
   85c12:	f8ad 500c 	strh.w	r5, [sp, #12]
   85c16:	9119      	str	r1, [sp, #100]	; 0x64
   85c18:	89e5      	ldrh	r5, [r4, #14]
   85c1a:	69e1      	ldr	r1, [r4, #28]
   85c1c:	f8ad 500e 	strh.w	r5, [sp, #14]
   85c20:	9107      	str	r1, [sp, #28]
   85c22:	6a65      	ldr	r5, [r4, #36]	; 0x24
   85c24:	a91a      	add	r1, sp, #104	; 0x68
   85c26:	9100      	str	r1, [sp, #0]
   85c28:	9104      	str	r1, [sp, #16]
   85c2a:	2100      	movs	r1, #0
   85c2c:	9509      	str	r5, [sp, #36]	; 0x24
   85c2e:	9106      	str	r1, [sp, #24]
   85c30:	f44f 6580 	mov.w	r5, #1024	; 0x400
   85c34:	4669      	mov	r1, sp
   85c36:	9502      	str	r5, [sp, #8]
   85c38:	9505      	str	r5, [sp, #20]
   85c3a:	4606      	mov	r6, r0
   85c3c:	f7ff fbd2 	bl	853e4 <_vfiprintf_r>
   85c40:	1e05      	subs	r5, r0, #0
   85c42:	db07      	blt.n	85c54 <__sbprintf+0x52>
   85c44:	4630      	mov	r0, r6
   85c46:	4669      	mov	r1, sp
   85c48:	f000 f8e8 	bl	85e1c <_fflush_r>
   85c4c:	2800      	cmp	r0, #0
   85c4e:	bf18      	it	ne
   85c50:	f04f 35ff 	movne.w	r5, #4294967295
   85c54:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   85c58:	f003 0040 	and.w	r0, r3, #64	; 0x40
   85c5c:	b202      	sxth	r2, r0
   85c5e:	b11a      	cbz	r2, 85c68 <__sbprintf+0x66>
   85c60:	89a1      	ldrh	r1, [r4, #12]
   85c62:	f041 0340 	orr.w	r3, r1, #64	; 0x40
   85c66:	81a3      	strh	r3, [r4, #12]
   85c68:	4628      	mov	r0, r5
   85c6a:	b01a      	add	sp, #104	; 0x68
   85c6c:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
   85c70:	bd70      	pop	{r4, r5, r6, pc}

00085c72 <vfiprintf>:
   85c72:	b530      	push	{r4, r5, lr}
   85c74:	4613      	mov	r3, r2
   85c76:	4a05      	ldr	r2, [pc, #20]	; (85c8c <vfiprintf+0x1a>)
   85c78:	4605      	mov	r5, r0
   85c7a:	460c      	mov	r4, r1
   85c7c:	6810      	ldr	r0, [r2, #0]
   85c7e:	4629      	mov	r1, r5
   85c80:	4622      	mov	r2, r4
   85c82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   85c86:	f7ff bbad 	b.w	853e4 <_vfiprintf_r>
   85c8a:	bf00      	nop
   85c8c:	20070010 	.word	0x20070010

00085c90 <__swbuf_r>:
   85c90:	b570      	push	{r4, r5, r6, lr}
   85c92:	460d      	mov	r5, r1
   85c94:	4614      	mov	r4, r2
   85c96:	4606      	mov	r6, r0
   85c98:	b118      	cbz	r0, 85ca2 <__swbuf_r+0x12>
   85c9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85c9c:	b90b      	cbnz	r3, 85ca2 <__swbuf_r+0x12>
   85c9e:	f000 f9af 	bl	86000 <__sinit>
   85ca2:	89a1      	ldrh	r1, [r4, #12]
   85ca4:	69a0      	ldr	r0, [r4, #24]
   85ca6:	f001 0208 	and.w	r2, r1, #8
   85caa:	b213      	sxth	r3, r2
   85cac:	60a0      	str	r0, [r4, #8]
   85cae:	b10b      	cbz	r3, 85cb4 <__swbuf_r+0x24>
   85cb0:	6920      	ldr	r0, [r4, #16]
   85cb2:	b958      	cbnz	r0, 85ccc <__swbuf_r+0x3c>
   85cb4:	4630      	mov	r0, r6
   85cb6:	4621      	mov	r1, r4
   85cb8:	f000 f844 	bl	85d44 <__swsetup_r>
   85cbc:	b130      	cbz	r0, 85ccc <__swbuf_r+0x3c>
   85cbe:	89a5      	ldrh	r5, [r4, #12]
   85cc0:	2009      	movs	r0, #9
   85cc2:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   85cc6:	81a1      	strh	r1, [r4, #12]
   85cc8:	6030      	str	r0, [r6, #0]
   85cca:	e017      	b.n	85cfc <__swbuf_r+0x6c>
   85ccc:	89a1      	ldrh	r1, [r4, #12]
   85cce:	b2ed      	uxtb	r5, r5
   85cd0:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
   85cd4:	b213      	sxth	r3, r2
   85cd6:	b933      	cbnz	r3, 85ce6 <__swbuf_r+0x56>
   85cd8:	f441 5000 	orr.w	r0, r1, #8192	; 0x2000
   85cdc:	6e61      	ldr	r1, [r4, #100]	; 0x64
   85cde:	81a0      	strh	r0, [r4, #12]
   85ce0:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
   85ce4:	6662      	str	r2, [r4, #100]	; 0x64
   85ce6:	6820      	ldr	r0, [r4, #0]
   85ce8:	6923      	ldr	r3, [r4, #16]
   85cea:	6961      	ldr	r1, [r4, #20]
   85cec:	1ac0      	subs	r0, r0, r3
   85cee:	4288      	cmp	r0, r1
   85cf0:	db07      	blt.n	85d02 <__swbuf_r+0x72>
   85cf2:	4630      	mov	r0, r6
   85cf4:	4621      	mov	r1, r4
   85cf6:	f000 f891 	bl	85e1c <_fflush_r>
   85cfa:	b110      	cbz	r0, 85d02 <__swbuf_r+0x72>
   85cfc:	f04f 35ff 	mov.w	r5, #4294967295
   85d00:	e015      	b.n	85d2e <__swbuf_r+0x9e>
   85d02:	68a2      	ldr	r2, [r4, #8]
   85d04:	6821      	ldr	r1, [r4, #0]
   85d06:	1e53      	subs	r3, r2, #1
   85d08:	60a3      	str	r3, [r4, #8]
   85d0a:	f801 5b01 	strb.w	r5, [r1], #1
   85d0e:	6962      	ldr	r2, [r4, #20]
   85d10:	3001      	adds	r0, #1
   85d12:	4290      	cmp	r0, r2
   85d14:	6021      	str	r1, [r4, #0]
   85d16:	d004      	beq.n	85d22 <__swbuf_r+0x92>
   85d18:	89a3      	ldrh	r3, [r4, #12]
   85d1a:	07db      	lsls	r3, r3, #31
   85d1c:	d507      	bpl.n	85d2e <__swbuf_r+0x9e>
   85d1e:	2d0a      	cmp	r5, #10
   85d20:	d105      	bne.n	85d2e <__swbuf_r+0x9e>
   85d22:	4630      	mov	r0, r6
   85d24:	4621      	mov	r1, r4
   85d26:	f000 f879 	bl	85e1c <_fflush_r>
   85d2a:	2800      	cmp	r0, #0
   85d2c:	d1e6      	bne.n	85cfc <__swbuf_r+0x6c>
   85d2e:	4628      	mov	r0, r5
   85d30:	bd70      	pop	{r4, r5, r6, pc}

00085d32 <__swbuf>:
   85d32:	460a      	mov	r2, r1
   85d34:	4902      	ldr	r1, [pc, #8]	; (85d40 <__swbuf+0xe>)
   85d36:	4603      	mov	r3, r0
   85d38:	6808      	ldr	r0, [r1, #0]
   85d3a:	4619      	mov	r1, r3
   85d3c:	f7ff bfa8 	b.w	85c90 <__swbuf_r>
   85d40:	20070010 	.word	0x20070010

00085d44 <__swsetup_r>:
   85d44:	b538      	push	{r3, r4, r5, lr}
   85d46:	4b2c      	ldr	r3, [pc, #176]	; (85df8 <__swsetup_r+0xb4>)
   85d48:	4605      	mov	r5, r0
   85d4a:	6818      	ldr	r0, [r3, #0]
   85d4c:	460c      	mov	r4, r1
   85d4e:	b118      	cbz	r0, 85d58 <__swsetup_r+0x14>
   85d50:	6b82      	ldr	r2, [r0, #56]	; 0x38
   85d52:	b90a      	cbnz	r2, 85d58 <__swsetup_r+0x14>
   85d54:	f000 f954 	bl	86000 <__sinit>
   85d58:	89a0      	ldrh	r0, [r4, #12]
   85d5a:	f000 0108 	and.w	r1, r0, #8
   85d5e:	b20b      	sxth	r3, r1
   85d60:	bb0b      	cbnz	r3, 85da6 <__swsetup_r+0x62>
   85d62:	f000 0210 	and.w	r2, r0, #16
   85d66:	b211      	sxth	r1, r2
   85d68:	b911      	cbnz	r1, 85d70 <__swsetup_r+0x2c>
   85d6a:	f04f 30ff 	mov.w	r0, #4294967295
   85d6e:	bd38      	pop	{r3, r4, r5, pc}
   85d70:	f000 0004 	and.w	r0, r0, #4
   85d74:	b203      	sxth	r3, r0
   85d76:	b193      	cbz	r3, 85d9e <__swsetup_r+0x5a>
   85d78:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85d7a:	b141      	cbz	r1, 85d8e <__swsetup_r+0x4a>
   85d7c:	f104 0240 	add.w	r2, r4, #64	; 0x40
   85d80:	4291      	cmp	r1, r2
   85d82:	d002      	beq.n	85d8a <__swsetup_r+0x46>
   85d84:	4628      	mov	r0, r5
   85d86:	f000 fa79 	bl	8627c <_free_r>
   85d8a:	2100      	movs	r1, #0
   85d8c:	6321      	str	r1, [r4, #48]	; 0x30
   85d8e:	89a0      	ldrh	r0, [r4, #12]
   85d90:	6921      	ldr	r1, [r4, #16]
   85d92:	f020 0324 	bic.w	r3, r0, #36	; 0x24
   85d96:	2200      	movs	r2, #0
   85d98:	81a3      	strh	r3, [r4, #12]
   85d9a:	6062      	str	r2, [r4, #4]
   85d9c:	6021      	str	r1, [r4, #0]
   85d9e:	89a0      	ldrh	r0, [r4, #12]
   85da0:	f040 0308 	orr.w	r3, r0, #8
   85da4:	81a3      	strh	r3, [r4, #12]
   85da6:	6922      	ldr	r2, [r4, #16]
   85da8:	b94a      	cbnz	r2, 85dbe <__swsetup_r+0x7a>
   85daa:	89a1      	ldrh	r1, [r4, #12]
   85dac:	f401 7020 	and.w	r0, r1, #640	; 0x280
   85db0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   85db4:	d003      	beq.n	85dbe <__swsetup_r+0x7a>
   85db6:	4628      	mov	r0, r5
   85db8:	4621      	mov	r1, r4
   85dba:	f000 fcf7 	bl	867ac <__smakebuf_r>
   85dbe:	89a3      	ldrh	r3, [r4, #12]
   85dc0:	f013 0201 	ands.w	r2, r3, #1
   85dc4:	d005      	beq.n	85dd2 <__swsetup_r+0x8e>
   85dc6:	6961      	ldr	r1, [r4, #20]
   85dc8:	2200      	movs	r2, #0
   85dca:	4248      	negs	r0, r1
   85dcc:	60a2      	str	r2, [r4, #8]
   85dce:	61a0      	str	r0, [r4, #24]
   85dd0:	e007      	b.n	85de2 <__swsetup_r+0x9e>
   85dd2:	f003 0102 	and.w	r1, r3, #2
   85dd6:	b208      	sxth	r0, r1
   85dd8:	b908      	cbnz	r0, 85dde <__swsetup_r+0x9a>
   85dda:	6963      	ldr	r3, [r4, #20]
   85ddc:	e000      	b.n	85de0 <__swsetup_r+0x9c>
   85dde:	4613      	mov	r3, r2
   85de0:	60a3      	str	r3, [r4, #8]
   85de2:	6923      	ldr	r3, [r4, #16]
   85de4:	b933      	cbnz	r3, 85df4 <__swsetup_r+0xb0>
   85de6:	89a2      	ldrh	r2, [r4, #12]
   85de8:	f002 0180 	and.w	r1, r2, #128	; 0x80
   85dec:	b208      	sxth	r0, r1
   85dee:	2800      	cmp	r0, #0
   85df0:	d1bb      	bne.n	85d6a <__swsetup_r+0x26>
   85df2:	bd38      	pop	{r3, r4, r5, pc}
   85df4:	2000      	movs	r0, #0
   85df6:	bd38      	pop	{r3, r4, r5, pc}
   85df8:	20070010 	.word	0x20070010

00085dfc <register_fini>:
   85dfc:	4b02      	ldr	r3, [pc, #8]	; (85e08 <register_fini+0xc>)
   85dfe:	b113      	cbz	r3, 85e06 <register_fini+0xa>
   85e00:	4802      	ldr	r0, [pc, #8]	; (85e0c <register_fini+0x10>)
   85e02:	f000 b805 	b.w	85e10 <atexit>
   85e06:	4770      	bx	lr
   85e08:	00000000 	.word	0x00000000
   85e0c:	0008514d 	.word	0x0008514d

00085e10 <atexit>:
   85e10:	4601      	mov	r1, r0
   85e12:	2000      	movs	r0, #0
   85e14:	4602      	mov	r2, r0
   85e16:	4603      	mov	r3, r0
   85e18:	f7ff b94a 	b.w	850b0 <__register_exitproc>

00085e1c <_fflush_r>:
   85e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85e20:	460c      	mov	r4, r1
   85e22:	4605      	mov	r5, r0
   85e24:	b118      	cbz	r0, 85e2e <_fflush_r+0x12>
   85e26:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85e28:	b90b      	cbnz	r3, 85e2e <_fflush_r+0x12>
   85e2a:	f000 f8e9 	bl	86000 <__sinit>
   85e2e:	89a2      	ldrh	r2, [r4, #12]
   85e30:	b332      	cbz	r2, 85e80 <_fflush_r+0x64>
   85e32:	f002 0008 	and.w	r0, r2, #8
   85e36:	b201      	sxth	r1, r0
   85e38:	2900      	cmp	r1, #0
   85e3a:	d162      	bne.n	85f02 <_fflush_r+0xe6>
   85e3c:	6861      	ldr	r1, [r4, #4]
   85e3e:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
   85e42:	2900      	cmp	r1, #0
   85e44:	81a0      	strh	r0, [r4, #12]
   85e46:	dc02      	bgt.n	85e4e <_fflush_r+0x32>
   85e48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   85e4a:	2b00      	cmp	r3, #0
   85e4c:	dd18      	ble.n	85e80 <_fflush_r+0x64>
   85e4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   85e50:	b1b6      	cbz	r6, 85e80 <_fflush_r+0x64>
   85e52:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   85e56:	2000      	movs	r0, #0
   85e58:	b212      	sxth	r2, r2
   85e5a:	682f      	ldr	r7, [r5, #0]
   85e5c:	6028      	str	r0, [r5, #0]
   85e5e:	b10a      	cbz	r2, 85e64 <_fflush_r+0x48>
   85e60:	6d22      	ldr	r2, [r4, #80]	; 0x50
   85e62:	e010      	b.n	85e86 <_fflush_r+0x6a>
   85e64:	2301      	movs	r3, #1
   85e66:	4628      	mov	r0, r5
   85e68:	69e1      	ldr	r1, [r4, #28]
   85e6a:	47b0      	blx	r6
   85e6c:	4602      	mov	r2, r0
   85e6e:	3001      	adds	r0, #1
   85e70:	d109      	bne.n	85e86 <_fflush_r+0x6a>
   85e72:	6829      	ldr	r1, [r5, #0]
   85e74:	b139      	cbz	r1, 85e86 <_fflush_r+0x6a>
   85e76:	291d      	cmp	r1, #29
   85e78:	d001      	beq.n	85e7e <_fflush_r+0x62>
   85e7a:	2916      	cmp	r1, #22
   85e7c:	d14e      	bne.n	85f1c <_fflush_r+0x100>
   85e7e:	602f      	str	r7, [r5, #0]
   85e80:	2000      	movs	r0, #0
   85e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85e86:	89a6      	ldrh	r6, [r4, #12]
   85e88:	f006 0104 	and.w	r1, r6, #4
   85e8c:	b20b      	sxth	r3, r1
   85e8e:	b12b      	cbz	r3, 85e9c <_fflush_r+0x80>
   85e90:	6860      	ldr	r0, [r4, #4]
   85e92:	6b26      	ldr	r6, [r4, #48]	; 0x30
   85e94:	1a12      	subs	r2, r2, r0
   85e96:	b10e      	cbz	r6, 85e9c <_fflush_r+0x80>
   85e98:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   85e9a:	1a52      	subs	r2, r2, r1
   85e9c:	69e1      	ldr	r1, [r4, #28]
   85e9e:	2300      	movs	r3, #0
   85ea0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   85ea2:	4628      	mov	r0, r5
   85ea4:	47b0      	blx	r6
   85ea6:	1c41      	adds	r1, r0, #1
   85ea8:	d105      	bne.n	85eb6 <_fflush_r+0x9a>
   85eaa:	682a      	ldr	r2, [r5, #0]
   85eac:	b11a      	cbz	r2, 85eb6 <_fflush_r+0x9a>
   85eae:	2a1d      	cmp	r2, #29
   85eb0:	d001      	beq.n	85eb6 <_fflush_r+0x9a>
   85eb2:	2a16      	cmp	r2, #22
   85eb4:	d11f      	bne.n	85ef6 <_fflush_r+0xda>
   85eb6:	89a3      	ldrh	r3, [r4, #12]
   85eb8:	2100      	movs	r1, #0
   85eba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
   85ebe:	81a2      	strh	r2, [r4, #12]
   85ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   85ec4:	6922      	ldr	r2, [r4, #16]
   85ec6:	6061      	str	r1, [r4, #4]
   85ec8:	b219      	sxth	r1, r3
   85eca:	6022      	str	r2, [r4, #0]
   85ecc:	b121      	cbz	r1, 85ed8 <_fflush_r+0xbc>
   85ece:	1c42      	adds	r2, r0, #1
   85ed0:	d101      	bne.n	85ed6 <_fflush_r+0xba>
   85ed2:	682a      	ldr	r2, [r5, #0]
   85ed4:	b902      	cbnz	r2, 85ed8 <_fflush_r+0xbc>
   85ed6:	6520      	str	r0, [r4, #80]	; 0x50
   85ed8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85eda:	602f      	str	r7, [r5, #0]
   85edc:	2900      	cmp	r1, #0
   85ede:	d0cf      	beq.n	85e80 <_fflush_r+0x64>
   85ee0:	f104 0040 	add.w	r0, r4, #64	; 0x40
   85ee4:	4281      	cmp	r1, r0
   85ee6:	d002      	beq.n	85eee <_fflush_r+0xd2>
   85ee8:	4628      	mov	r0, r5
   85eea:	f000 f9c7 	bl	8627c <_free_r>
   85eee:	2000      	movs	r0, #0
   85ef0:	6320      	str	r0, [r4, #48]	; 0x30
   85ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85ef6:	89a3      	ldrh	r3, [r4, #12]
   85ef8:	f043 0140 	orr.w	r1, r3, #64	; 0x40
   85efc:	81a1      	strh	r1, [r4, #12]
   85efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85f02:	6926      	ldr	r6, [r4, #16]
   85f04:	2e00      	cmp	r6, #0
   85f06:	d0bb      	beq.n	85e80 <_fflush_r+0x64>
   85f08:	0792      	lsls	r2, r2, #30
   85f0a:	6823      	ldr	r3, [r4, #0]
   85f0c:	bf0c      	ite	eq
   85f0e:	6962      	ldreq	r2, [r4, #20]
   85f10:	2200      	movne	r2, #0
   85f12:	ebc6 0803 	rsb	r8, r6, r3
   85f16:	6026      	str	r6, [r4, #0]
   85f18:	60a2      	str	r2, [r4, #8]
   85f1a:	e012      	b.n	85f42 <_fflush_r+0x126>
   85f1c:	89a3      	ldrh	r3, [r4, #12]
   85f1e:	f043 0040 	orr.w	r0, r3, #64	; 0x40
   85f22:	81a0      	strh	r0, [r4, #12]
   85f24:	f04f 30ff 	mov.w	r0, #4294967295
   85f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85f2c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85f2e:	4628      	mov	r0, r5
   85f30:	69e1      	ldr	r1, [r4, #28]
   85f32:	4632      	mov	r2, r6
   85f34:	4643      	mov	r3, r8
   85f36:	47b8      	blx	r7
   85f38:	2800      	cmp	r0, #0
   85f3a:	ddef      	ble.n	85f1c <_fflush_r+0x100>
   85f3c:	1836      	adds	r6, r6, r0
   85f3e:	ebc0 0808 	rsb	r8, r0, r8
   85f42:	f1b8 0f00 	cmp.w	r8, #0
   85f46:	dcf1      	bgt.n	85f2c <_fflush_r+0x110>
   85f48:	e79a      	b.n	85e80 <_fflush_r+0x64>

00085f4a <fflush>:
   85f4a:	4601      	mov	r1, r0
   85f4c:	b920      	cbnz	r0, 85f58 <fflush+0xe>
   85f4e:	4804      	ldr	r0, [pc, #16]	; (85f60 <fflush+0x16>)
   85f50:	4904      	ldr	r1, [pc, #16]	; (85f64 <fflush+0x1a>)
   85f52:	6800      	ldr	r0, [r0, #0]
   85f54:	f000 bbc4 	b.w	866e0 <_fwalk_reent>
   85f58:	4b03      	ldr	r3, [pc, #12]	; (85f68 <fflush+0x1e>)
   85f5a:	6818      	ldr	r0, [r3, #0]
   85f5c:	f7ff bf5e 	b.w	85e1c <_fflush_r>
   85f60:	00087b70 	.word	0x00087b70
   85f64:	00085e1d 	.word	0x00085e1d
   85f68:	20070010 	.word	0x20070010

00085f6c <__fp_lock>:
   85f6c:	2000      	movs	r0, #0
   85f6e:	4770      	bx	lr

00085f70 <__fp_unlock>:
   85f70:	2000      	movs	r0, #0
   85f72:	4770      	bx	lr

00085f74 <_cleanup_r>:
   85f74:	4901      	ldr	r1, [pc, #4]	; (85f7c <_cleanup_r+0x8>)
   85f76:	f000 bb92 	b.w	8669e <_fwalk>
   85f7a:	bf00      	nop
   85f7c:	00087211 	.word	0x00087211

00085f80 <std.isra.0>:
   85f80:	2300      	movs	r3, #0
   85f82:	b510      	push	{r4, lr}
   85f84:	4604      	mov	r4, r0
   85f86:	6003      	str	r3, [r0, #0]
   85f88:	6043      	str	r3, [r0, #4]
   85f8a:	6083      	str	r3, [r0, #8]
   85f8c:	8181      	strh	r1, [r0, #12]
   85f8e:	6643      	str	r3, [r0, #100]	; 0x64
   85f90:	81c2      	strh	r2, [r0, #14]
   85f92:	6103      	str	r3, [r0, #16]
   85f94:	6143      	str	r3, [r0, #20]
   85f96:	6183      	str	r3, [r0, #24]
   85f98:	4619      	mov	r1, r3
   85f9a:	2208      	movs	r2, #8
   85f9c:	f100 005c 	add.w	r0, r0, #92	; 0x5c
   85fa0:	f7ff f939 	bl	85216 <memset>
   85fa4:	4804      	ldr	r0, [pc, #16]	; (85fb8 <std.isra.0+0x38>)
   85fa6:	4905      	ldr	r1, [pc, #20]	; (85fbc <std.isra.0+0x3c>)
   85fa8:	4a05      	ldr	r2, [pc, #20]	; (85fc0 <std.isra.0+0x40>)
   85faa:	4b06      	ldr	r3, [pc, #24]	; (85fc4 <std.isra.0+0x44>)
   85fac:	61e4      	str	r4, [r4, #28]
   85fae:	6220      	str	r0, [r4, #32]
   85fb0:	6261      	str	r1, [r4, #36]	; 0x24
   85fb2:	62a2      	str	r2, [r4, #40]	; 0x28
   85fb4:	62e3      	str	r3, [r4, #44]	; 0x2c
   85fb6:	bd10      	pop	{r4, pc}
   85fb8:	00086ff9 	.word	0x00086ff9
   85fbc:	0008701f 	.word	0x0008701f
   85fc0:	0008705b 	.word	0x0008705b
   85fc4:	0008707f 	.word	0x0008707f

00085fc8 <__sfmoreglue>:
   85fc8:	b570      	push	{r4, r5, r6, lr}
   85fca:	2568      	movs	r5, #104	; 0x68
   85fcc:	434d      	muls	r5, r1
   85fce:	460e      	mov	r6, r1
   85fd0:	f105 010c 	add.w	r1, r5, #12
   85fd4:	f000 fc66 	bl	868a4 <_malloc_r>
   85fd8:	4604      	mov	r4, r0
   85fda:	b140      	cbz	r0, 85fee <__sfmoreglue+0x26>
   85fdc:	f100 000c 	add.w	r0, r0, #12
   85fe0:	2100      	movs	r1, #0
   85fe2:	e884 0042 	stmia.w	r4, {r1, r6}
   85fe6:	60a0      	str	r0, [r4, #8]
   85fe8:	462a      	mov	r2, r5
   85fea:	f7ff f914 	bl	85216 <memset>
   85fee:	4620      	mov	r0, r4
   85ff0:	bd70      	pop	{r4, r5, r6, pc}

00085ff2 <_cleanup>:
   85ff2:	4b02      	ldr	r3, [pc, #8]	; (85ffc <_cleanup+0xa>)
   85ff4:	6818      	ldr	r0, [r3, #0]
   85ff6:	f7ff bfbd 	b.w	85f74 <_cleanup_r>
   85ffa:	bf00      	nop
   85ffc:	00087b70 	.word	0x00087b70

00086000 <__sinit>:
   86000:	b538      	push	{r3, r4, r5, lr}
   86002:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86004:	4604      	mov	r4, r0
   86006:	b9eb      	cbnz	r3, 86044 <__sinit+0x44>
   86008:	4a0f      	ldr	r2, [pc, #60]	; (86048 <__sinit+0x48>)
   8600a:	2501      	movs	r5, #1
   8600c:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
   86010:	63c2      	str	r2, [r0, #60]	; 0x3c
   86012:	6385      	str	r5, [r0, #56]	; 0x38
   86014:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
   86018:	2003      	movs	r0, #3
   8601a:	461a      	mov	r2, r3
   8601c:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   86020:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
   86024:	6860      	ldr	r0, [r4, #4]
   86026:	2104      	movs	r1, #4
   86028:	f7ff ffaa 	bl	85f80 <std.isra.0>
   8602c:	68a0      	ldr	r0, [r4, #8]
   8602e:	2109      	movs	r1, #9
   86030:	462a      	mov	r2, r5
   86032:	f7ff ffa5 	bl	85f80 <std.isra.0>
   86036:	68e0      	ldr	r0, [r4, #12]
   86038:	2112      	movs	r1, #18
   8603a:	2202      	movs	r2, #2
   8603c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   86040:	f7ff bf9e 	b.w	85f80 <std.isra.0>
   86044:	bd38      	pop	{r3, r4, r5, pc}
   86046:	bf00      	nop
   86048:	00085f75 	.word	0x00085f75

0008604c <__sfp>:
   8604c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8604e:	4b1d      	ldr	r3, [pc, #116]	; (860c4 <__sfp+0x78>)
   86050:	4607      	mov	r7, r0
   86052:	681e      	ldr	r6, [r3, #0]
   86054:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   86056:	b910      	cbnz	r0, 8605e <__sfp+0x12>
   86058:	4630      	mov	r0, r6
   8605a:	f7ff ffd1 	bl	86000 <__sinit>
   8605e:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
   86062:	68b4      	ldr	r4, [r6, #8]
   86064:	6871      	ldr	r1, [r6, #4]
   86066:	3901      	subs	r1, #1
   86068:	d404      	bmi.n	86074 <__sfp+0x28>
   8606a:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   8606e:	b185      	cbz	r5, 86092 <__sfp+0x46>
   86070:	3468      	adds	r4, #104	; 0x68
   86072:	e7f8      	b.n	86066 <__sfp+0x1a>
   86074:	6832      	ldr	r2, [r6, #0]
   86076:	b10a      	cbz	r2, 8607c <__sfp+0x30>
   86078:	6836      	ldr	r6, [r6, #0]
   8607a:	e7f2      	b.n	86062 <__sfp+0x16>
   8607c:	4638      	mov	r0, r7
   8607e:	2104      	movs	r1, #4
   86080:	f7ff ffa2 	bl	85fc8 <__sfmoreglue>
   86084:	6030      	str	r0, [r6, #0]
   86086:	2800      	cmp	r0, #0
   86088:	d1f6      	bne.n	86078 <__sfp+0x2c>
   8608a:	240c      	movs	r4, #12
   8608c:	603c      	str	r4, [r7, #0]
   8608e:	4604      	mov	r4, r0
   86090:	e015      	b.n	860be <__sfp+0x72>
   86092:	f64f 73ff 	movw	r3, #65535	; 0xffff
   86096:	2001      	movs	r0, #1
   86098:	81a0      	strh	r0, [r4, #12]
   8609a:	81e3      	strh	r3, [r4, #14]
   8609c:	6665      	str	r5, [r4, #100]	; 0x64
   8609e:	6025      	str	r5, [r4, #0]
   860a0:	60a5      	str	r5, [r4, #8]
   860a2:	6065      	str	r5, [r4, #4]
   860a4:	6125      	str	r5, [r4, #16]
   860a6:	6165      	str	r5, [r4, #20]
   860a8:	61a5      	str	r5, [r4, #24]
   860aa:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   860ae:	4629      	mov	r1, r5
   860b0:	2208      	movs	r2, #8
   860b2:	f7ff f8b0 	bl	85216 <memset>
   860b6:	6325      	str	r5, [r4, #48]	; 0x30
   860b8:	6365      	str	r5, [r4, #52]	; 0x34
   860ba:	6465      	str	r5, [r4, #68]	; 0x44
   860bc:	64a5      	str	r5, [r4, #72]	; 0x48
   860be:	4620      	mov	r0, r4
   860c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   860c2:	bf00      	nop
   860c4:	00087b70 	.word	0x00087b70

000860c8 <__sfp_lock_acquire>:
   860c8:	4770      	bx	lr

000860ca <__sfp_lock_release>:
   860ca:	4770      	bx	lr

000860cc <__sinit_lock_acquire>:
   860cc:	4770      	bx	lr

000860ce <__sinit_lock_release>:
   860ce:	4770      	bx	lr

000860d0 <__fp_lock_all>:
   860d0:	4b02      	ldr	r3, [pc, #8]	; (860dc <__fp_lock_all+0xc>)
   860d2:	4903      	ldr	r1, [pc, #12]	; (860e0 <__fp_lock_all+0x10>)
   860d4:	6818      	ldr	r0, [r3, #0]
   860d6:	f000 bae2 	b.w	8669e <_fwalk>
   860da:	bf00      	nop
   860dc:	20070010 	.word	0x20070010
   860e0:	00085f6d 	.word	0x00085f6d

000860e4 <__fp_unlock_all>:
   860e4:	4b02      	ldr	r3, [pc, #8]	; (860f0 <__fp_unlock_all+0xc>)
   860e6:	4903      	ldr	r1, [pc, #12]	; (860f4 <__fp_unlock_all+0x10>)
   860e8:	6818      	ldr	r0, [r3, #0]
   860ea:	f000 bad8 	b.w	8669e <_fwalk>
   860ee:	bf00      	nop
   860f0:	20070010 	.word	0x20070010
   860f4:	00085f71 	.word	0x00085f71

000860f8 <_fputwc_r>:
   860f8:	8993      	ldrh	r3, [r2, #12]
   860fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   860fe:	4614      	mov	r4, r2
   86100:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
   86104:	4680      	mov	r8, r0
   86106:	b210      	sxth	r0, r2
   86108:	460e      	mov	r6, r1
   8610a:	b930      	cbnz	r0, 8611a <_fputwc_r+0x22>
   8610c:	6e67      	ldr	r7, [r4, #100]	; 0x64
   8610e:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
   86112:	f447 5300 	orr.w	r3, r7, #8192	; 0x2000
   86116:	81a1      	strh	r1, [r4, #12]
   86118:	6663      	str	r3, [r4, #100]	; 0x64
   8611a:	f000 fb29 	bl	86770 <__locale_mb_cur_max>
   8611e:	2801      	cmp	r0, #1
   86120:	d106      	bne.n	86130 <_fputwc_r+0x38>
   86122:	b12e      	cbz	r6, 86130 <_fputwc_r+0x38>
   86124:	2eff      	cmp	r6, #255	; 0xff
   86126:	d803      	bhi.n	86130 <_fputwc_r+0x38>
   86128:	f88d 6004 	strb.w	r6, [sp, #4]
   8612c:	4607      	mov	r7, r0
   8612e:	e00f      	b.n	86150 <_fputwc_r+0x58>
   86130:	4632      	mov	r2, r6
   86132:	4640      	mov	r0, r8
   86134:	a901      	add	r1, sp, #4
   86136:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8613a:	f000 ffaf 	bl	8709c <_wcrtomb_r>
   8613e:	1c42      	adds	r2, r0, #1
   86140:	4607      	mov	r7, r0
   86142:	d105      	bne.n	86150 <_fputwc_r+0x58>
   86144:	89a2      	ldrh	r2, [r4, #12]
   86146:	f042 0040 	orr.w	r0, r2, #64	; 0x40
   8614a:	81a0      	strh	r0, [r4, #12]
   8614c:	4638      	mov	r0, r7
   8614e:	e031      	b.n	861b4 <_fputwc_r+0xbc>
   86150:	2500      	movs	r5, #0
   86152:	42bd      	cmp	r5, r7
   86154:	d02a      	beq.n	861ac <_fputwc_r+0xb4>
   86156:	68a1      	ldr	r1, [r4, #8]
   86158:	ab01      	add	r3, sp, #4
   8615a:	1e4a      	subs	r2, r1, #1
   8615c:	2a00      	cmp	r2, #0
   8615e:	60a2      	str	r2, [r4, #8]
   86160:	da1a      	bge.n	86198 <_fputwc_r+0xa0>
   86162:	69a0      	ldr	r0, [r4, #24]
   86164:	4282      	cmp	r2, r0
   86166:	db0c      	blt.n	86182 <_fputwc_r+0x8a>
   86168:	6821      	ldr	r1, [r4, #0]
   8616a:	5d5a      	ldrb	r2, [r3, r5]
   8616c:	700a      	strb	r2, [r1, #0]
   8616e:	6823      	ldr	r3, [r4, #0]
   86170:	7819      	ldrb	r1, [r3, #0]
   86172:	290a      	cmp	r1, #10
   86174:	d003      	beq.n	8617e <_fputwc_r+0x86>
   86176:	3301      	adds	r3, #1
   86178:	2200      	movs	r2, #0
   8617a:	6023      	str	r3, [r4, #0]
   8617c:	e013      	b.n	861a6 <_fputwc_r+0xae>
   8617e:	4640      	mov	r0, r8
   86180:	e001      	b.n	86186 <_fputwc_r+0x8e>
   86182:	5d59      	ldrb	r1, [r3, r5]
   86184:	4640      	mov	r0, r8
   86186:	4622      	mov	r2, r4
   86188:	f7ff fd82 	bl	85c90 <__swbuf_r>
   8618c:	f1b0 31ff 	subs.w	r1, r0, #4294967295
   86190:	4248      	negs	r0, r1
   86192:	eb50 0201 	adcs.w	r2, r0, r1
   86196:	e006      	b.n	861a6 <_fputwc_r+0xae>
   86198:	6820      	ldr	r0, [r4, #0]
   8619a:	5d59      	ldrb	r1, [r3, r5]
   8619c:	7001      	strb	r1, [r0, #0]
   8619e:	6822      	ldr	r2, [r4, #0]
   861a0:	1c53      	adds	r3, r2, #1
   861a2:	6023      	str	r3, [r4, #0]
   861a4:	e000      	b.n	861a8 <_fputwc_r+0xb0>
   861a6:	b91a      	cbnz	r2, 861b0 <_fputwc_r+0xb8>
   861a8:	3501      	adds	r5, #1
   861aa:	e7d2      	b.n	86152 <_fputwc_r+0x5a>
   861ac:	4630      	mov	r0, r6
   861ae:	e001      	b.n	861b4 <_fputwc_r+0xbc>
   861b0:	f04f 30ff 	mov.w	r0, #4294967295
   861b4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

000861b8 <fputwc>:
   861b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   861ba:	4c08      	ldr	r4, [pc, #32]	; (861dc <fputwc+0x24>)
   861bc:	4607      	mov	r7, r0
   861be:	6820      	ldr	r0, [r4, #0]
   861c0:	460e      	mov	r6, r1
   861c2:	b118      	cbz	r0, 861cc <fputwc+0x14>
   861c4:	6b85      	ldr	r5, [r0, #56]	; 0x38
   861c6:	b90d      	cbnz	r5, 861cc <fputwc+0x14>
   861c8:	f7ff ff1a 	bl	86000 <__sinit>
   861cc:	6820      	ldr	r0, [r4, #0]
   861ce:	4639      	mov	r1, r7
   861d0:	4632      	mov	r2, r6
   861d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   861d6:	f7ff bf8f 	b.w	860f8 <_fputwc_r>
   861da:	bf00      	nop
   861dc:	20070010 	.word	0x20070010

000861e0 <_malloc_trim_r>:
   861e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   861e2:	4d23      	ldr	r5, [pc, #140]	; (86270 <_malloc_trim_r+0x90>)
   861e4:	460e      	mov	r6, r1
   861e6:	4604      	mov	r4, r0
   861e8:	f000 fd86 	bl	86cf8 <__malloc_lock>
   861ec:	68ab      	ldr	r3, [r5, #8]
   861ee:	685f      	ldr	r7, [r3, #4]
   861f0:	f027 0703 	bic.w	r7, r7, #3
   861f4:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
   861f8:	1b81      	subs	r1, r0, r6
   861fa:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   861fe:	f022 060f 	bic.w	r6, r2, #15
   86202:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   86206:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   8620a:	da04      	bge.n	86216 <_malloc_trim_r+0x36>
   8620c:	4620      	mov	r0, r4
   8620e:	f000 fd74 	bl	86cfa <__malloc_unlock>
   86212:	2000      	movs	r0, #0
   86214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86216:	2100      	movs	r1, #0
   86218:	4620      	mov	r0, r4
   8621a:	f000 fedd 	bl	86fd8 <_sbrk_r>
   8621e:	68ab      	ldr	r3, [r5, #8]
   86220:	19d9      	adds	r1, r3, r7
   86222:	4288      	cmp	r0, r1
   86224:	d1f2      	bne.n	8620c <_malloc_trim_r+0x2c>
   86226:	4271      	negs	r1, r6
   86228:	4620      	mov	r0, r4
   8622a:	f000 fed5 	bl	86fd8 <_sbrk_r>
   8622e:	3001      	adds	r0, #1
   86230:	d110      	bne.n	86254 <_malloc_trim_r+0x74>
   86232:	2100      	movs	r1, #0
   86234:	4620      	mov	r0, r4
   86236:	f000 fecf 	bl	86fd8 <_sbrk_r>
   8623a:	68ab      	ldr	r3, [r5, #8]
   8623c:	1ac2      	subs	r2, r0, r3
   8623e:	2a0f      	cmp	r2, #15
   86240:	dde4      	ble.n	8620c <_malloc_trim_r+0x2c>
   86242:	490c      	ldr	r1, [pc, #48]	; (86274 <_malloc_trim_r+0x94>)
   86244:	f042 0201 	orr.w	r2, r2, #1
   86248:	6809      	ldr	r1, [r1, #0]
   8624a:	605a      	str	r2, [r3, #4]
   8624c:	1a40      	subs	r0, r0, r1
   8624e:	490a      	ldr	r1, [pc, #40]	; (86278 <_malloc_trim_r+0x98>)
   86250:	6008      	str	r0, [r1, #0]
   86252:	e7db      	b.n	8620c <_malloc_trim_r+0x2c>
   86254:	4b08      	ldr	r3, [pc, #32]	; (86278 <_malloc_trim_r+0x98>)
   86256:	68a8      	ldr	r0, [r5, #8]
   86258:	681a      	ldr	r2, [r3, #0]
   8625a:	1bbf      	subs	r7, r7, r6
   8625c:	f047 0701 	orr.w	r7, r7, #1
   86260:	6047      	str	r7, [r0, #4]
   86262:	1b96      	subs	r6, r2, r6
   86264:	4620      	mov	r0, r4
   86266:	601e      	str	r6, [r3, #0]
   86268:	f000 fd47 	bl	86cfa <__malloc_unlock>
   8626c:	2001      	movs	r0, #1
   8626e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86270:	200704bc 	.word	0x200704bc
   86274:	200708c4 	.word	0x200708c4
   86278:	20078c40 	.word	0x20078c40

0008627c <_free_r>:
   8627c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8627e:	4606      	mov	r6, r0
   86280:	460d      	mov	r5, r1
   86282:	2900      	cmp	r1, #0
   86284:	f000 80a6 	beq.w	863d4 <_free_r+0x158>
   86288:	f000 fd36 	bl	86cf8 <__malloc_lock>
   8628c:	f855 cc04 	ldr.w	ip, [r5, #-4]
   86290:	4f51      	ldr	r7, [pc, #324]	; (863d8 <_free_r+0x15c>)
   86292:	f1a5 0308 	sub.w	r3, r5, #8
   86296:	f02c 0201 	bic.w	r2, ip, #1
   8629a:	189c      	adds	r4, r3, r2
   8629c:	68b9      	ldr	r1, [r7, #8]
   8629e:	6860      	ldr	r0, [r4, #4]
   862a0:	428c      	cmp	r4, r1
   862a2:	f020 0003 	bic.w	r0, r0, #3
   862a6:	f00c 0101 	and.w	r1, ip, #1
   862aa:	d11c      	bne.n	862e6 <_free_r+0x6a>
   862ac:	1882      	adds	r2, r0, r2
   862ae:	b939      	cbnz	r1, 862c0 <_free_r+0x44>
   862b0:	f855 1c08 	ldr.w	r1, [r5, #-8]
   862b4:	1a5b      	subs	r3, r3, r1
   862b6:	6898      	ldr	r0, [r3, #8]
   862b8:	1852      	adds	r2, r2, r1
   862ba:	68d9      	ldr	r1, [r3, #12]
   862bc:	60c1      	str	r1, [r0, #12]
   862be:	6088      	str	r0, [r1, #8]
   862c0:	4845      	ldr	r0, [pc, #276]	; (863d8 <_free_r+0x15c>)
   862c2:	f042 0101 	orr.w	r1, r2, #1
   862c6:	6059      	str	r1, [r3, #4]
   862c8:	6083      	str	r3, [r0, #8]
   862ca:	4b44      	ldr	r3, [pc, #272]	; (863dc <_free_r+0x160>)
   862cc:	6819      	ldr	r1, [r3, #0]
   862ce:	428a      	cmp	r2, r1
   862d0:	d304      	bcc.n	862dc <_free_r+0x60>
   862d2:	4a43      	ldr	r2, [pc, #268]	; (863e0 <_free_r+0x164>)
   862d4:	4630      	mov	r0, r6
   862d6:	6811      	ldr	r1, [r2, #0]
   862d8:	f7ff ff82 	bl	861e0 <_malloc_trim_r>
   862dc:	4630      	mov	r0, r6
   862de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   862e2:	f000 bd0a 	b.w	86cfa <__malloc_unlock>
   862e6:	6060      	str	r0, [r4, #4]
   862e8:	b959      	cbnz	r1, 86302 <_free_r+0x86>
   862ea:	f855 5c08 	ldr.w	r5, [r5, #-8]
   862ee:	3708      	adds	r7, #8
   862f0:	1b5b      	subs	r3, r3, r5
   862f2:	1952      	adds	r2, r2, r5
   862f4:	689d      	ldr	r5, [r3, #8]
   862f6:	42bd      	cmp	r5, r7
   862f8:	d005      	beq.n	86306 <_free_r+0x8a>
   862fa:	68df      	ldr	r7, [r3, #12]
   862fc:	60ef      	str	r7, [r5, #12]
   862fe:	60bd      	str	r5, [r7, #8]
   86300:	e002      	b.n	86308 <_free_r+0x8c>
   86302:	2100      	movs	r1, #0
   86304:	e000      	b.n	86308 <_free_r+0x8c>
   86306:	2101      	movs	r1, #1
   86308:	1825      	adds	r5, r4, r0
   8630a:	686d      	ldr	r5, [r5, #4]
   8630c:	f015 0f01 	tst.w	r5, #1
   86310:	d10f      	bne.n	86332 <_free_r+0xb6>
   86312:	1812      	adds	r2, r2, r0
   86314:	b949      	cbnz	r1, 8632a <_free_r+0xae>
   86316:	68a0      	ldr	r0, [r4, #8]
   86318:	4d32      	ldr	r5, [pc, #200]	; (863e4 <_free_r+0x168>)
   8631a:	42a8      	cmp	r0, r5
   8631c:	d105      	bne.n	8632a <_free_r+0xae>
   8631e:	60eb      	str	r3, [r5, #12]
   86320:	60ab      	str	r3, [r5, #8]
   86322:	60d8      	str	r0, [r3, #12]
   86324:	6098      	str	r0, [r3, #8]
   86326:	2101      	movs	r1, #1
   86328:	e003      	b.n	86332 <_free_r+0xb6>
   8632a:	68e0      	ldr	r0, [r4, #12]
   8632c:	68a4      	ldr	r4, [r4, #8]
   8632e:	60e0      	str	r0, [r4, #12]
   86330:	6084      	str	r4, [r0, #8]
   86332:	f042 0001 	orr.w	r0, r2, #1
   86336:	6058      	str	r0, [r3, #4]
   86338:	509a      	str	r2, [r3, r2]
   8633a:	2900      	cmp	r1, #0
   8633c:	d1ce      	bne.n	862dc <_free_r+0x60>
   8633e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   86342:	d20c      	bcs.n	8635e <_free_r+0xe2>
   86344:	08d2      	lsrs	r2, r2, #3
   86346:	1090      	asrs	r0, r2, #2
   86348:	2401      	movs	r4, #1
   8634a:	fa04 f400 	lsl.w	r4, r4, r0
   8634e:	4922      	ldr	r1, [pc, #136]	; (863d8 <_free_r+0x15c>)
   86350:	6848      	ldr	r0, [r1, #4]
   86352:	4320      	orrs	r0, r4
   86354:	6048      	str	r0, [r1, #4]
   86356:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   8635a:	6881      	ldr	r1, [r0, #8]
   8635c:	e035      	b.n	863ca <_free_r+0x14e>
   8635e:	0a54      	lsrs	r4, r2, #9
   86360:	2c04      	cmp	r4, #4
   86362:	d802      	bhi.n	8636a <_free_r+0xee>
   86364:	0994      	lsrs	r4, r2, #6
   86366:	3438      	adds	r4, #56	; 0x38
   86368:	e016      	b.n	86398 <_free_r+0x11c>
   8636a:	2c14      	cmp	r4, #20
   8636c:	d801      	bhi.n	86372 <_free_r+0xf6>
   8636e:	345b      	adds	r4, #91	; 0x5b
   86370:	e012      	b.n	86398 <_free_r+0x11c>
   86372:	2c54      	cmp	r4, #84	; 0x54
   86374:	d802      	bhi.n	8637c <_free_r+0x100>
   86376:	0b14      	lsrs	r4, r2, #12
   86378:	346e      	adds	r4, #110	; 0x6e
   8637a:	e00d      	b.n	86398 <_free_r+0x11c>
   8637c:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
   86380:	d802      	bhi.n	86388 <_free_r+0x10c>
   86382:	0bd4      	lsrs	r4, r2, #15
   86384:	3477      	adds	r4, #119	; 0x77
   86386:	e007      	b.n	86398 <_free_r+0x11c>
   86388:	f240 5554 	movw	r5, #1364	; 0x554
   8638c:	42ac      	cmp	r4, r5
   8638e:	d802      	bhi.n	86396 <_free_r+0x11a>
   86390:	0c94      	lsrs	r4, r2, #18
   86392:	347c      	adds	r4, #124	; 0x7c
   86394:	e000      	b.n	86398 <_free_r+0x11c>
   86396:	247e      	movs	r4, #126	; 0x7e
   86398:	4d0f      	ldr	r5, [pc, #60]	; (863d8 <_free_r+0x15c>)
   8639a:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   8639e:	6881      	ldr	r1, [r0, #8]
   863a0:	4281      	cmp	r1, r0
   863a2:	d10c      	bne.n	863be <_free_r+0x142>
   863a4:	2201      	movs	r2, #1
   863a6:	10a4      	asrs	r4, r4, #2
   863a8:	fa02 f404 	lsl.w	r4, r2, r4
   863ac:	6868      	ldr	r0, [r5, #4]
   863ae:	ea44 0200 	orr.w	r2, r4, r0
   863b2:	606a      	str	r2, [r5, #4]
   863b4:	4608      	mov	r0, r1
   863b6:	e008      	b.n	863ca <_free_r+0x14e>
   863b8:	6889      	ldr	r1, [r1, #8]
   863ba:	4281      	cmp	r1, r0
   863bc:	d004      	beq.n	863c8 <_free_r+0x14c>
   863be:	684c      	ldr	r4, [r1, #4]
   863c0:	f024 0403 	bic.w	r4, r4, #3
   863c4:	42a2      	cmp	r2, r4
   863c6:	d3f7      	bcc.n	863b8 <_free_r+0x13c>
   863c8:	68c8      	ldr	r0, [r1, #12]
   863ca:	60d8      	str	r0, [r3, #12]
   863cc:	6099      	str	r1, [r3, #8]
   863ce:	6083      	str	r3, [r0, #8]
   863d0:	60cb      	str	r3, [r1, #12]
   863d2:	e783      	b.n	862dc <_free_r+0x60>
   863d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   863d6:	bf00      	nop
   863d8:	200704bc 	.word	0x200704bc
   863dc:	200708c8 	.word	0x200708c8
   863e0:	20078c3c 	.word	0x20078c3c
   863e4:	200704c4 	.word	0x200704c4

000863e8 <__sfvwrite_r>:
   863e8:	6893      	ldr	r3, [r2, #8]
   863ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   863ee:	4606      	mov	r6, r0
   863f0:	460c      	mov	r4, r1
   863f2:	4691      	mov	r9, r2
   863f4:	b90b      	cbnz	r3, 863fa <__sfvwrite_r+0x12>
   863f6:	2000      	movs	r0, #0
   863f8:	e14f      	b.n	8669a <__sfvwrite_r+0x2b2>
   863fa:	8988      	ldrh	r0, [r1, #12]
   863fc:	f000 0108 	and.w	r1, r0, #8
   86400:	b20a      	sxth	r2, r1
   86402:	b10a      	cbz	r2, 86408 <__sfvwrite_r+0x20>
   86404:	6923      	ldr	r3, [r4, #16]
   86406:	b95b      	cbnz	r3, 86420 <__sfvwrite_r+0x38>
   86408:	4630      	mov	r0, r6
   8640a:	4621      	mov	r1, r4
   8640c:	f7ff fc9a 	bl	85d44 <__swsetup_r>
   86410:	b130      	cbz	r0, 86420 <__sfvwrite_r+0x38>
   86412:	89a1      	ldrh	r1, [r4, #12]
   86414:	2209      	movs	r2, #9
   86416:	f041 0040 	orr.w	r0, r1, #64	; 0x40
   8641a:	81a0      	strh	r0, [r4, #12]
   8641c:	6032      	str	r2, [r6, #0]
   8641e:	e13a      	b.n	86696 <__sfvwrite_r+0x2ae>
   86420:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
   86424:	f8d9 8000 	ldr.w	r8, [r9]
   86428:	f00a 0c02 	and.w	ip, sl, #2
   8642c:	fa0f f58c 	sxth.w	r5, ip
   86430:	b315      	cbz	r5, 86478 <__sfvwrite_r+0x90>
   86432:	f04f 0a00 	mov.w	sl, #0
   86436:	4657      	mov	r7, sl
   86438:	b937      	cbnz	r7, 86448 <__sfvwrite_r+0x60>
   8643a:	f8d8 a000 	ldr.w	sl, [r8]
   8643e:	f8d8 7004 	ldr.w	r7, [r8, #4]
   86442:	f108 0808 	add.w	r8, r8, #8
   86446:	e7f7      	b.n	86438 <__sfvwrite_r+0x50>
   86448:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   8644c:	bf34      	ite	cc
   8644e:	463b      	movcc	r3, r7
   86450:	f44f 6380 	movcs.w	r3, #1024	; 0x400
   86454:	4630      	mov	r0, r6
   86456:	69e1      	ldr	r1, [r4, #28]
   86458:	4652      	mov	r2, sl
   8645a:	6a65      	ldr	r5, [r4, #36]	; 0x24
   8645c:	47a8      	blx	r5
   8645e:	2800      	cmp	r0, #0
   86460:	f340 8115 	ble.w	8668e <__sfvwrite_r+0x2a6>
   86464:	f8d9 1008 	ldr.w	r1, [r9, #8]
   86468:	4482      	add	sl, r0
   8646a:	1a3f      	subs	r7, r7, r0
   8646c:	1a08      	subs	r0, r1, r0
   8646e:	f8c9 0008 	str.w	r0, [r9, #8]
   86472:	2800      	cmp	r0, #0
   86474:	d1e0      	bne.n	86438 <__sfvwrite_r+0x50>
   86476:	e7be      	b.n	863f6 <__sfvwrite_r+0xe>
   86478:	f01a 0a01 	ands.w	sl, sl, #1
   8647c:	d004      	beq.n	86488 <__sfvwrite_r+0xa0>
   8647e:	46ab      	mov	fp, r5
   86480:	9501      	str	r5, [sp, #4]
   86482:	462f      	mov	r7, r5
   86484:	46aa      	mov	sl, r5
   86486:	e0c7      	b.n	86618 <__sfvwrite_r+0x230>
   86488:	4655      	mov	r5, sl
   8648a:	b935      	cbnz	r5, 8649a <__sfvwrite_r+0xb2>
   8648c:	f8d8 a000 	ldr.w	sl, [r8]
   86490:	f8d8 5004 	ldr.w	r5, [r8, #4]
   86494:	f108 0808 	add.w	r8, r8, #8
   86498:	e7f7      	b.n	8648a <__sfvwrite_r+0xa2>
   8649a:	89a2      	ldrh	r2, [r4, #12]
   8649c:	f8d4 b008 	ldr.w	fp, [r4, #8]
   864a0:	f402 7000 	and.w	r0, r2, #512	; 0x200
   864a4:	b203      	sxth	r3, r0
   864a6:	2b00      	cmp	r3, #0
   864a8:	d052      	beq.n	86550 <__sfvwrite_r+0x168>
   864aa:	455d      	cmp	r5, fp
   864ac:	d340      	bcc.n	86530 <__sfvwrite_r+0x148>
   864ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
   864b2:	d03b      	beq.n	8652c <__sfvwrite_r+0x144>
   864b4:	6963      	ldr	r3, [r4, #20]
   864b6:	f04f 0b03 	mov.w	fp, #3
   864ba:	fb0b f303 	mul.w	r3, fp, r3
   864be:	6921      	ldr	r1, [r4, #16]
   864c0:	6827      	ldr	r7, [r4, #0]
   864c2:	2002      	movs	r0, #2
   864c4:	1a7f      	subs	r7, r7, r1
   864c6:	fb93 fcf0 	sdiv	ip, r3, r0
   864ca:	1c7b      	adds	r3, r7, #1
   864cc:	1958      	adds	r0, r3, r5
   864ce:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   864d2:	4584      	cmp	ip, r0
   864d4:	bf28      	it	cs
   864d6:	4660      	movcs	r0, ip
   864d8:	b213      	sxth	r3, r2
   864da:	9001      	str	r0, [sp, #4]
   864dc:	4630      	mov	r0, r6
   864de:	b17b      	cbz	r3, 86500 <__sfvwrite_r+0x118>
   864e0:	9901      	ldr	r1, [sp, #4]
   864e2:	f000 f9df 	bl	868a4 <_malloc_r>
   864e6:	4683      	mov	fp, r0
   864e8:	b198      	cbz	r0, 86512 <__sfvwrite_r+0x12a>
   864ea:	6921      	ldr	r1, [r4, #16]
   864ec:	463a      	mov	r2, r7
   864ee:	f7fe fe89 	bl	85204 <memcpy>
   864f2:	89a1      	ldrh	r1, [r4, #12]
   864f4:	f421 6090 	bic.w	r0, r1, #1152	; 0x480
   864f8:	f040 0280 	orr.w	r2, r0, #128	; 0x80
   864fc:	81a2      	strh	r2, [r4, #12]
   864fe:	e00b      	b.n	86518 <__sfvwrite_r+0x130>
   86500:	9a01      	ldr	r2, [sp, #4]
   86502:	f000 fbfb 	bl	86cfc <_realloc_r>
   86506:	4683      	mov	fp, r0
   86508:	b930      	cbnz	r0, 86518 <__sfvwrite_r+0x130>
   8650a:	4630      	mov	r0, r6
   8650c:	6921      	ldr	r1, [r4, #16]
   8650e:	f7ff feb5 	bl	8627c <_free_r>
   86512:	230c      	movs	r3, #12
   86514:	6033      	str	r3, [r6, #0]
   86516:	e0ba      	b.n	8668e <__sfvwrite_r+0x2a6>
   86518:	9901      	ldr	r1, [sp, #4]
   8651a:	eb0b 0307 	add.w	r3, fp, r7
   8651e:	1bcf      	subs	r7, r1, r7
   86520:	f8c4 b010 	str.w	fp, [r4, #16]
   86524:	6023      	str	r3, [r4, #0]
   86526:	6161      	str	r1, [r4, #20]
   86528:	46ab      	mov	fp, r5
   8652a:	60a7      	str	r7, [r4, #8]
   8652c:	455d      	cmp	r5, fp
   8652e:	d200      	bcs.n	86532 <__sfvwrite_r+0x14a>
   86530:	46ab      	mov	fp, r5
   86532:	465a      	mov	r2, fp
   86534:	4651      	mov	r1, sl
   86536:	6820      	ldr	r0, [r4, #0]
   86538:	f000 fbc4 	bl	86cc4 <memmove>
   8653c:	68a0      	ldr	r0, [r4, #8]
   8653e:	6823      	ldr	r3, [r4, #0]
   86540:	ebcb 0200 	rsb	r2, fp, r0
   86544:	eb03 010b 	add.w	r1, r3, fp
   86548:	60a2      	str	r2, [r4, #8]
   8654a:	6021      	str	r1, [r4, #0]
   8654c:	46ab      	mov	fp, r5
   8654e:	e02a      	b.n	865a6 <__sfvwrite_r+0x1be>
   86550:	6820      	ldr	r0, [r4, #0]
   86552:	6921      	ldr	r1, [r4, #16]
   86554:	4288      	cmp	r0, r1
   86556:	d90f      	bls.n	86578 <__sfvwrite_r+0x190>
   86558:	455d      	cmp	r5, fp
   8655a:	d90d      	bls.n	86578 <__sfvwrite_r+0x190>
   8655c:	4651      	mov	r1, sl
   8655e:	465a      	mov	r2, fp
   86560:	f000 fbb0 	bl	86cc4 <memmove>
   86564:	6822      	ldr	r2, [r4, #0]
   86566:	4621      	mov	r1, r4
   86568:	eb02 000b 	add.w	r0, r2, fp
   8656c:	6020      	str	r0, [r4, #0]
   8656e:	4630      	mov	r0, r6
   86570:	f7ff fc54 	bl	85e1c <_fflush_r>
   86574:	b1b8      	cbz	r0, 865a6 <__sfvwrite_r+0x1be>
   86576:	e08a      	b.n	8668e <__sfvwrite_r+0x2a6>
   86578:	6963      	ldr	r3, [r4, #20]
   8657a:	429d      	cmp	r5, r3
   8657c:	d308      	bcc.n	86590 <__sfvwrite_r+0x1a8>
   8657e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   86580:	4630      	mov	r0, r6
   86582:	69e1      	ldr	r1, [r4, #28]
   86584:	4652      	mov	r2, sl
   86586:	47b8      	blx	r7
   86588:	f1b0 0b00 	subs.w	fp, r0, #0
   8658c:	dc0b      	bgt.n	865a6 <__sfvwrite_r+0x1be>
   8658e:	e07e      	b.n	8668e <__sfvwrite_r+0x2a6>
   86590:	4651      	mov	r1, sl
   86592:	462a      	mov	r2, r5
   86594:	f000 fb96 	bl	86cc4 <memmove>
   86598:	68a2      	ldr	r2, [r4, #8]
   8659a:	6823      	ldr	r3, [r4, #0]
   8659c:	1b50      	subs	r0, r2, r5
   8659e:	1959      	adds	r1, r3, r5
   865a0:	46ab      	mov	fp, r5
   865a2:	60a0      	str	r0, [r4, #8]
   865a4:	6021      	str	r1, [r4, #0]
   865a6:	f8d9 0008 	ldr.w	r0, [r9, #8]
   865aa:	44da      	add	sl, fp
   865ac:	ebcb 0200 	rsb	r2, fp, r0
   865b0:	ebcb 0505 	rsb	r5, fp, r5
   865b4:	f8c9 2008 	str.w	r2, [r9, #8]
   865b8:	2a00      	cmp	r2, #0
   865ba:	f47f af66 	bne.w	8648a <__sfvwrite_r+0xa2>
   865be:	e71a      	b.n	863f6 <__sfvwrite_r+0xe>
   865c0:	9801      	ldr	r0, [sp, #4]
   865c2:	2800      	cmp	r0, #0
   865c4:	d032      	beq.n	8662c <__sfvwrite_r+0x244>
   865c6:	6820      	ldr	r0, [r4, #0]
   865c8:	6921      	ldr	r1, [r4, #16]
   865ca:	45d3      	cmp	fp, sl
   865cc:	bf34      	ite	cc
   865ce:	465b      	movcc	r3, fp
   865d0:	4653      	movcs	r3, sl
   865d2:	4288      	cmp	r0, r1
   865d4:	68a5      	ldr	r5, [r4, #8]
   865d6:	f8d4 e014 	ldr.w	lr, [r4, #20]
   865da:	d937      	bls.n	8664c <__sfvwrite_r+0x264>
   865dc:	4475      	add	r5, lr
   865de:	42ab      	cmp	r3, r5
   865e0:	dd34      	ble.n	8664c <__sfvwrite_r+0x264>
   865e2:	4639      	mov	r1, r7
   865e4:	462a      	mov	r2, r5
   865e6:	f000 fb6d 	bl	86cc4 <memmove>
   865ea:	6820      	ldr	r0, [r4, #0]
   865ec:	4621      	mov	r1, r4
   865ee:	1943      	adds	r3, r0, r5
   865f0:	6023      	str	r3, [r4, #0]
   865f2:	4630      	mov	r0, r6
   865f4:	f7ff fc12 	bl	85e1c <_fflush_r>
   865f8:	2800      	cmp	r0, #0
   865fa:	d148      	bne.n	8668e <__sfvwrite_r+0x2a6>
   865fc:	ebbb 0b05 	subs.w	fp, fp, r5
   86600:	d03d      	beq.n	8667e <__sfvwrite_r+0x296>
   86602:	f8d9 2008 	ldr.w	r2, [r9, #8]
   86606:	197f      	adds	r7, r7, r5
   86608:	ebc5 0a0a 	rsb	sl, r5, sl
   8660c:	1b55      	subs	r5, r2, r5
   8660e:	f8c9 5008 	str.w	r5, [r9, #8]
   86612:	2d00      	cmp	r5, #0
   86614:	f43f aeef 	beq.w	863f6 <__sfvwrite_r+0xe>
   86618:	f1ba 0f00 	cmp.w	sl, #0
   8661c:	d1d0      	bne.n	865c0 <__sfvwrite_r+0x1d8>
   8661e:	2100      	movs	r1, #0
   86620:	e898 0480 	ldmia.w	r8, {r7, sl}
   86624:	9101      	str	r1, [sp, #4]
   86626:	f108 0808 	add.w	r8, r8, #8
   8662a:	e7f5      	b.n	86618 <__sfvwrite_r+0x230>
   8662c:	4638      	mov	r0, r7
   8662e:	210a      	movs	r1, #10
   86630:	4652      	mov	r2, sl
   86632:	f000 fb39 	bl	86ca8 <memchr>
   86636:	b120      	cbz	r0, 86642 <__sfvwrite_r+0x25a>
   86638:	f100 0101 	add.w	r1, r0, #1
   8663c:	ebc7 0b01 	rsb	fp, r7, r1
   86640:	e001      	b.n	86646 <__sfvwrite_r+0x25e>
   86642:	f10a 0b01 	add.w	fp, sl, #1
   86646:	2201      	movs	r2, #1
   86648:	9201      	str	r2, [sp, #4]
   8664a:	e7bc      	b.n	865c6 <__sfvwrite_r+0x1de>
   8664c:	4573      	cmp	r3, lr
   8664e:	db08      	blt.n	86662 <__sfvwrite_r+0x27a>
   86650:	6a65      	ldr	r5, [r4, #36]	; 0x24
   86652:	4630      	mov	r0, r6
   86654:	69e1      	ldr	r1, [r4, #28]
   86656:	463a      	mov	r2, r7
   86658:	4673      	mov	r3, lr
   8665a:	47a8      	blx	r5
   8665c:	1e05      	subs	r5, r0, #0
   8665e:	dccd      	bgt.n	865fc <__sfvwrite_r+0x214>
   86660:	e015      	b.n	8668e <__sfvwrite_r+0x2a6>
   86662:	461a      	mov	r2, r3
   86664:	4639      	mov	r1, r7
   86666:	9300      	str	r3, [sp, #0]
   86668:	f000 fb2c 	bl	86cc4 <memmove>
   8666c:	9b00      	ldr	r3, [sp, #0]
   8666e:	6825      	ldr	r5, [r4, #0]
   86670:	68a0      	ldr	r0, [r4, #8]
   86672:	18e9      	adds	r1, r5, r3
   86674:	1ac2      	subs	r2, r0, r3
   86676:	60a2      	str	r2, [r4, #8]
   86678:	6021      	str	r1, [r4, #0]
   8667a:	461d      	mov	r5, r3
   8667c:	e7be      	b.n	865fc <__sfvwrite_r+0x214>
   8667e:	4630      	mov	r0, r6
   86680:	4621      	mov	r1, r4
   86682:	f7ff fbcb 	bl	85e1c <_fflush_r>
   86686:	b910      	cbnz	r0, 8668e <__sfvwrite_r+0x2a6>
   86688:	f8cd b004 	str.w	fp, [sp, #4]
   8668c:	e7b9      	b.n	86602 <__sfvwrite_r+0x21a>
   8668e:	89a2      	ldrh	r2, [r4, #12]
   86690:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   86694:	81a3      	strh	r3, [r4, #12]
   86696:	f04f 30ff 	mov.w	r0, #4294967295
   8669a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008669e <_fwalk>:
   8669e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   866a2:	4604      	mov	r4, r0
   866a4:	4688      	mov	r8, r1
   866a6:	f7ff fd0f 	bl	860c8 <__sfp_lock_acquire>
   866aa:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
   866ae:	2600      	movs	r6, #0
   866b0:	b18c      	cbz	r4, 866d6 <_fwalk+0x38>
   866b2:	68a5      	ldr	r5, [r4, #8]
   866b4:	6867      	ldr	r7, [r4, #4]
   866b6:	3f01      	subs	r7, #1
   866b8:	d40b      	bmi.n	866d2 <_fwalk+0x34>
   866ba:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   866be:	b133      	cbz	r3, 866ce <_fwalk+0x30>
   866c0:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   866c4:	1c43      	adds	r3, r0, #1
   866c6:	d002      	beq.n	866ce <_fwalk+0x30>
   866c8:	4628      	mov	r0, r5
   866ca:	47c0      	blx	r8
   866cc:	4306      	orrs	r6, r0
   866ce:	3568      	adds	r5, #104	; 0x68
   866d0:	e7f1      	b.n	866b6 <_fwalk+0x18>
   866d2:	6824      	ldr	r4, [r4, #0]
   866d4:	e7ec      	b.n	866b0 <_fwalk+0x12>
   866d6:	f7ff fcf8 	bl	860ca <__sfp_lock_release>
   866da:	4630      	mov	r0, r6
   866dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000866e0 <_fwalk_reent>:
   866e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   866e4:	4680      	mov	r8, r0
   866e6:	4689      	mov	r9, r1
   866e8:	f7ff fcee 	bl	860c8 <__sfp_lock_acquire>
   866ec:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
   866f0:	2600      	movs	r6, #0
   866f2:	b194      	cbz	r4, 8671a <_fwalk_reent+0x3a>
   866f4:	68a5      	ldr	r5, [r4, #8]
   866f6:	6867      	ldr	r7, [r4, #4]
   866f8:	3f01      	subs	r7, #1
   866fa:	d40c      	bmi.n	86716 <_fwalk_reent+0x36>
   866fc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   86700:	b13b      	cbz	r3, 86712 <_fwalk_reent+0x32>
   86702:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   86706:	1c43      	adds	r3, r0, #1
   86708:	d003      	beq.n	86712 <_fwalk_reent+0x32>
   8670a:	4640      	mov	r0, r8
   8670c:	4629      	mov	r1, r5
   8670e:	47c8      	blx	r9
   86710:	4306      	orrs	r6, r0
   86712:	3568      	adds	r5, #104	; 0x68
   86714:	e7f0      	b.n	866f8 <_fwalk_reent+0x18>
   86716:	6824      	ldr	r4, [r4, #0]
   86718:	e7eb      	b.n	866f2 <_fwalk_reent+0x12>
   8671a:	f7ff fcd6 	bl	860ca <__sfp_lock_release>
   8671e:	4630      	mov	r0, r6
   86720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00086724 <_setlocale_r>:
   86724:	b510      	push	{r4, lr}
   86726:	4614      	mov	r4, r2
   86728:	b90a      	cbnz	r2, 8672e <_setlocale_r+0xa>
   8672a:	480c      	ldr	r0, [pc, #48]	; (8675c <_setlocale_r+0x38>)
   8672c:	bd10      	pop	{r4, pc}
   8672e:	4610      	mov	r0, r2
   86730:	490b      	ldr	r1, [pc, #44]	; (86760 <_setlocale_r+0x3c>)
   86732:	f000 fca8 	bl	87086 <strcmp>
   86736:	2800      	cmp	r0, #0
   86738:	d0f7      	beq.n	8672a <_setlocale_r+0x6>
   8673a:	4620      	mov	r0, r4
   8673c:	4907      	ldr	r1, [pc, #28]	; (8675c <_setlocale_r+0x38>)
   8673e:	f000 fca2 	bl	87086 <strcmp>
   86742:	2800      	cmp	r0, #0
   86744:	d0f1      	beq.n	8672a <_setlocale_r+0x6>
   86746:	4620      	mov	r0, r4
   86748:	4906      	ldr	r1, [pc, #24]	; (86764 <_setlocale_r+0x40>)
   8674a:	f000 fc9c 	bl	87086 <strcmp>
   8674e:	4b03      	ldr	r3, [pc, #12]	; (8675c <_setlocale_r+0x38>)
   86750:	2800      	cmp	r0, #0
   86752:	bf0c      	ite	eq
   86754:	4618      	moveq	r0, r3
   86756:	2000      	movne	r0, #0
   86758:	bd10      	pop	{r4, pc}
   8675a:	bf00      	nop
   8675c:	00087b74 	.word	0x00087b74
   86760:	00087bb8 	.word	0x00087bb8
   86764:	00087bbf 	.word	0x00087bbf

00086768 <__locale_charset>:
   86768:	4800      	ldr	r0, [pc, #0]	; (8676c <__locale_charset+0x4>)
   8676a:	4770      	bx	lr
   8676c:	20070440 	.word	0x20070440

00086770 <__locale_mb_cur_max>:
   86770:	4b01      	ldr	r3, [pc, #4]	; (86778 <__locale_mb_cur_max+0x8>)
   86772:	6a18      	ldr	r0, [r3, #32]
   86774:	4770      	bx	lr
   86776:	bf00      	nop
   86778:	20070440 	.word	0x20070440

0008677c <__locale_msgcharset>:
   8677c:	4800      	ldr	r0, [pc, #0]	; (86780 <__locale_msgcharset+0x4>)
   8677e:	4770      	bx	lr
   86780:	20070464 	.word	0x20070464

00086784 <__locale_cjk_lang>:
   86784:	2000      	movs	r0, #0
   86786:	4770      	bx	lr

00086788 <_localeconv_r>:
   86788:	4800      	ldr	r0, [pc, #0]	; (8678c <_localeconv_r+0x4>)
   8678a:	4770      	bx	lr
   8678c:	20070484 	.word	0x20070484

00086790 <setlocale>:
   86790:	460a      	mov	r2, r1
   86792:	4903      	ldr	r1, [pc, #12]	; (867a0 <setlocale+0x10>)
   86794:	4603      	mov	r3, r0
   86796:	6808      	ldr	r0, [r1, #0]
   86798:	4619      	mov	r1, r3
   8679a:	f7ff bfc3 	b.w	86724 <_setlocale_r>
   8679e:	bf00      	nop
   867a0:	20070010 	.word	0x20070010

000867a4 <localeconv>:
   867a4:	4800      	ldr	r0, [pc, #0]	; (867a8 <localeconv+0x4>)
   867a6:	4770      	bx	lr
   867a8:	20070484 	.word	0x20070484

000867ac <__smakebuf_r>:
   867ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   867ae:	898b      	ldrh	r3, [r1, #12]
   867b0:	460c      	mov	r4, r1
   867b2:	f003 0102 	and.w	r1, r3, #2
   867b6:	b20a      	sxth	r2, r1
   867b8:	b091      	sub	sp, #68	; 0x44
   867ba:	4606      	mov	r6, r0
   867bc:	2a00      	cmp	r2, #0
   867be:	d13f      	bne.n	86840 <__smakebuf_r+0x94>
   867c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   867c4:	2900      	cmp	r1, #0
   867c6:	da0d      	bge.n	867e4 <__smakebuf_r+0x38>
   867c8:	89a7      	ldrh	r7, [r4, #12]
   867ca:	f007 0280 	and.w	r2, r7, #128	; 0x80
   867ce:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
   867d2:	b210      	sxth	r0, r2
   867d4:	2800      	cmp	r0, #0
   867d6:	bf0c      	ite	eq
   867d8:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   867dc:	2540      	movne	r5, #64	; 0x40
   867de:	81a3      	strh	r3, [r4, #12]
   867e0:	2700      	movs	r7, #0
   867e2:	e020      	b.n	86826 <__smakebuf_r+0x7a>
   867e4:	aa01      	add	r2, sp, #4
   867e6:	f000 fd1b 	bl	87220 <_fstat_r>
   867ea:	2800      	cmp	r0, #0
   867ec:	dbec      	blt.n	867c8 <__smakebuf_r+0x1c>
   867ee:	9802      	ldr	r0, [sp, #8]
   867f0:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
   867f4:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
   867f8:	425f      	negs	r7, r3
   867fa:	415f      	adcs	r7, r3
   867fc:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   86800:	d10b      	bne.n	8681a <__smakebuf_r+0x6e>
   86802:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   86804:	4a1d      	ldr	r2, [pc, #116]	; (8687c <__smakebuf_r+0xd0>)
   86806:	4291      	cmp	r1, r2
   86808:	d107      	bne.n	8681a <__smakebuf_r+0x6e>
   8680a:	89a3      	ldrh	r3, [r4, #12]
   8680c:	f44f 6580 	mov.w	r5, #1024	; 0x400
   86810:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
   86814:	81a1      	strh	r1, [r4, #12]
   86816:	64e5      	str	r5, [r4, #76]	; 0x4c
   86818:	e005      	b.n	86826 <__smakebuf_r+0x7a>
   8681a:	89a0      	ldrh	r0, [r4, #12]
   8681c:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
   86820:	81a5      	strh	r5, [r4, #12]
   86822:	f44f 6580 	mov.w	r5, #1024	; 0x400
   86826:	4630      	mov	r0, r6
   86828:	4629      	mov	r1, r5
   8682a:	f000 f83b 	bl	868a4 <_malloc_r>
   8682e:	b970      	cbnz	r0, 8684e <__smakebuf_r+0xa2>
   86830:	89a3      	ldrh	r3, [r4, #12]
   86832:	f403 7200 	and.w	r2, r3, #512	; 0x200
   86836:	b210      	sxth	r0, r2
   86838:	b9e8      	cbnz	r0, 86876 <__smakebuf_r+0xca>
   8683a:	f043 0102 	orr.w	r1, r3, #2
   8683e:	81a1      	strh	r1, [r4, #12]
   86840:	f104 0343 	add.w	r3, r4, #67	; 0x43
   86844:	2201      	movs	r2, #1
   86846:	6023      	str	r3, [r4, #0]
   86848:	6123      	str	r3, [r4, #16]
   8684a:	6162      	str	r2, [r4, #20]
   8684c:	e013      	b.n	86876 <__smakebuf_r+0xca>
   8684e:	89a2      	ldrh	r2, [r4, #12]
   86850:	490b      	ldr	r1, [pc, #44]	; (86880 <__smakebuf_r+0xd4>)
   86852:	f042 0380 	orr.w	r3, r2, #128	; 0x80
   86856:	63f1      	str	r1, [r6, #60]	; 0x3c
   86858:	81a3      	strh	r3, [r4, #12]
   8685a:	6020      	str	r0, [r4, #0]
   8685c:	6120      	str	r0, [r4, #16]
   8685e:	6165      	str	r5, [r4, #20]
   86860:	b14f      	cbz	r7, 86876 <__smakebuf_r+0xca>
   86862:	4630      	mov	r0, r6
   86864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86868:	f000 fcec 	bl	87244 <_isatty_r>
   8686c:	b118      	cbz	r0, 86876 <__smakebuf_r+0xca>
   8686e:	89a0      	ldrh	r0, [r4, #12]
   86870:	f040 0101 	orr.w	r1, r0, #1
   86874:	81a1      	strh	r1, [r4, #12]
   86876:	b011      	add	sp, #68	; 0x44
   86878:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8687a:	bf00      	nop
   8687c:	0008705b 	.word	0x0008705b
   86880:	00085f75 	.word	0x00085f75

00086884 <malloc>:
   86884:	4b02      	ldr	r3, [pc, #8]	; (86890 <malloc+0xc>)
   86886:	4601      	mov	r1, r0
   86888:	6818      	ldr	r0, [r3, #0]
   8688a:	f000 b80b 	b.w	868a4 <_malloc_r>
   8688e:	bf00      	nop
   86890:	20070010 	.word	0x20070010

00086894 <free>:
   86894:	4b02      	ldr	r3, [pc, #8]	; (868a0 <free+0xc>)
   86896:	4601      	mov	r1, r0
   86898:	6818      	ldr	r0, [r3, #0]
   8689a:	f7ff bcef 	b.w	8627c <_free_r>
   8689e:	bf00      	nop
   868a0:	20070010 	.word	0x20070010

000868a4 <_malloc_r>:
   868a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   868a8:	f101 040b 	add.w	r4, r1, #11
   868ac:	2c16      	cmp	r4, #22
   868ae:	4606      	mov	r6, r0
   868b0:	d903      	bls.n	868ba <_malloc_r+0x16>
   868b2:	f034 0407 	bics.w	r4, r4, #7
   868b6:	d501      	bpl.n	868bc <_malloc_r+0x18>
   868b8:	e002      	b.n	868c0 <_malloc_r+0x1c>
   868ba:	2410      	movs	r4, #16
   868bc:	428c      	cmp	r4, r1
   868be:	d202      	bcs.n	868c6 <_malloc_r+0x22>
   868c0:	250c      	movs	r5, #12
   868c2:	6035      	str	r5, [r6, #0]
   868c4:	e1d9      	b.n	86c7a <_malloc_r+0x3d6>
   868c6:	4630      	mov	r0, r6
   868c8:	f000 fa16 	bl	86cf8 <__malloc_lock>
   868cc:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   868d0:	d214      	bcs.n	868fc <_malloc_r+0x58>
   868d2:	4da0      	ldr	r5, [pc, #640]	; (86b54 <_malloc_r+0x2b0>)
   868d4:	08e1      	lsrs	r1, r4, #3
   868d6:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   868da:	68c5      	ldr	r5, [r0, #12]
   868dc:	4285      	cmp	r5, r0
   868de:	d105      	bne.n	868ec <_malloc_r+0x48>
   868e0:	f105 0308 	add.w	r3, r5, #8
   868e4:	696d      	ldr	r5, [r5, #20]
   868e6:	1c8a      	adds	r2, r1, #2
   868e8:	429d      	cmp	r5, r3
   868ea:	d044      	beq.n	86976 <_malloc_r+0xd2>
   868ec:	68e8      	ldr	r0, [r5, #12]
   868ee:	68a9      	ldr	r1, [r5, #8]
   868f0:	686a      	ldr	r2, [r5, #4]
   868f2:	60c8      	str	r0, [r1, #12]
   868f4:	f022 0303 	bic.w	r3, r2, #3
   868f8:	6081      	str	r1, [r0, #8]
   868fa:	e059      	b.n	869b0 <_malloc_r+0x10c>
   868fc:	0a62      	lsrs	r2, r4, #9
   868fe:	d101      	bne.n	86904 <_malloc_r+0x60>
   86900:	08e2      	lsrs	r2, r4, #3
   86902:	e01b      	b.n	8693c <_malloc_r+0x98>
   86904:	2a04      	cmp	r2, #4
   86906:	d802      	bhi.n	8690e <_malloc_r+0x6a>
   86908:	09a2      	lsrs	r2, r4, #6
   8690a:	3238      	adds	r2, #56	; 0x38
   8690c:	e016      	b.n	8693c <_malloc_r+0x98>
   8690e:	2a14      	cmp	r2, #20
   86910:	d801      	bhi.n	86916 <_malloc_r+0x72>
   86912:	325b      	adds	r2, #91	; 0x5b
   86914:	e012      	b.n	8693c <_malloc_r+0x98>
   86916:	2a54      	cmp	r2, #84	; 0x54
   86918:	d802      	bhi.n	86920 <_malloc_r+0x7c>
   8691a:	0b22      	lsrs	r2, r4, #12
   8691c:	326e      	adds	r2, #110	; 0x6e
   8691e:	e00d      	b.n	8693c <_malloc_r+0x98>
   86920:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   86924:	d802      	bhi.n	8692c <_malloc_r+0x88>
   86926:	0be2      	lsrs	r2, r4, #15
   86928:	3277      	adds	r2, #119	; 0x77
   8692a:	e007      	b.n	8693c <_malloc_r+0x98>
   8692c:	f240 5354 	movw	r3, #1364	; 0x554
   86930:	429a      	cmp	r2, r3
   86932:	d802      	bhi.n	8693a <_malloc_r+0x96>
   86934:	0ca2      	lsrs	r2, r4, #18
   86936:	327c      	adds	r2, #124	; 0x7c
   86938:	e000      	b.n	8693c <_malloc_r+0x98>
   8693a:	227e      	movs	r2, #126	; 0x7e
   8693c:	4885      	ldr	r0, [pc, #532]	; (86b54 <_malloc_r+0x2b0>)
   8693e:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
   86942:	68dd      	ldr	r5, [r3, #12]
   86944:	429d      	cmp	r5, r3
   86946:	d015      	beq.n	86974 <_malloc_r+0xd0>
   86948:	6869      	ldr	r1, [r5, #4]
   8694a:	f021 0103 	bic.w	r1, r1, #3
   8694e:	1b08      	subs	r0, r1, r4
   86950:	280f      	cmp	r0, #15
   86952:	dd01      	ble.n	86958 <_malloc_r+0xb4>
   86954:	3a01      	subs	r2, #1
   86956:	e00d      	b.n	86974 <_malloc_r+0xd0>
   86958:	2800      	cmp	r0, #0
   8695a:	db09      	blt.n	86970 <_malloc_r+0xcc>
   8695c:	68eb      	ldr	r3, [r5, #12]
   8695e:	68aa      	ldr	r2, [r5, #8]
   86960:	60d3      	str	r3, [r2, #12]
   86962:	609a      	str	r2, [r3, #8]
   86964:	186b      	adds	r3, r5, r1
   86966:	685a      	ldr	r2, [r3, #4]
   86968:	f042 0001 	orr.w	r0, r2, #1
   8696c:	6058      	str	r0, [r3, #4]
   8696e:	e190      	b.n	86c92 <_malloc_r+0x3ee>
   86970:	68ed      	ldr	r5, [r5, #12]
   86972:	e7e7      	b.n	86944 <_malloc_r+0xa0>
   86974:	3201      	adds	r2, #1
   86976:	4977      	ldr	r1, [pc, #476]	; (86b54 <_malloc_r+0x2b0>)
   86978:	690d      	ldr	r5, [r1, #16]
   8697a:	f101 0708 	add.w	r7, r1, #8
   8697e:	42bd      	cmp	r5, r7
   86980:	d068      	beq.n	86a54 <_malloc_r+0x1b0>
   86982:	6868      	ldr	r0, [r5, #4]
   86984:	f020 0303 	bic.w	r3, r0, #3
   86988:	1b18      	subs	r0, r3, r4
   8698a:	280f      	cmp	r0, #15
   8698c:	dd0c      	ble.n	869a8 <_malloc_r+0x104>
   8698e:	192b      	adds	r3, r5, r4
   86990:	614b      	str	r3, [r1, #20]
   86992:	610b      	str	r3, [r1, #16]
   86994:	f044 0401 	orr.w	r4, r4, #1
   86998:	f040 0101 	orr.w	r1, r0, #1
   8699c:	606c      	str	r4, [r5, #4]
   8699e:	60df      	str	r7, [r3, #12]
   869a0:	609f      	str	r7, [r3, #8]
   869a2:	6059      	str	r1, [r3, #4]
   869a4:	5018      	str	r0, [r3, r0]
   869a6:	e174      	b.n	86c92 <_malloc_r+0x3ee>
   869a8:	2800      	cmp	r0, #0
   869aa:	614f      	str	r7, [r1, #20]
   869ac:	610f      	str	r7, [r1, #16]
   869ae:	db01      	blt.n	869b4 <_malloc_r+0x110>
   869b0:	18eb      	adds	r3, r5, r3
   869b2:	e7d8      	b.n	86966 <_malloc_r+0xc2>
   869b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   869b8:	d20f      	bcs.n	869da <_malloc_r+0x136>
   869ba:	08db      	lsrs	r3, r3, #3
   869bc:	1098      	asrs	r0, r3, #2
   869be:	2701      	movs	r7, #1
   869c0:	fa07 f700 	lsl.w	r7, r7, r0
   869c4:	6848      	ldr	r0, [r1, #4]
   869c6:	4307      	orrs	r7, r0
   869c8:	604f      	str	r7, [r1, #4]
   869ca:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   869ce:	688b      	ldr	r3, [r1, #8]
   869d0:	60e9      	str	r1, [r5, #12]
   869d2:	60ab      	str	r3, [r5, #8]
   869d4:	60dd      	str	r5, [r3, #12]
   869d6:	608d      	str	r5, [r1, #8]
   869d8:	e03c      	b.n	86a54 <_malloc_r+0x1b0>
   869da:	0a58      	lsrs	r0, r3, #9
   869dc:	2804      	cmp	r0, #4
   869de:	d802      	bhi.n	869e6 <_malloc_r+0x142>
   869e0:	0998      	lsrs	r0, r3, #6
   869e2:	3038      	adds	r0, #56	; 0x38
   869e4:	e016      	b.n	86a14 <_malloc_r+0x170>
   869e6:	2814      	cmp	r0, #20
   869e8:	d801      	bhi.n	869ee <_malloc_r+0x14a>
   869ea:	305b      	adds	r0, #91	; 0x5b
   869ec:	e012      	b.n	86a14 <_malloc_r+0x170>
   869ee:	2854      	cmp	r0, #84	; 0x54
   869f0:	d802      	bhi.n	869f8 <_malloc_r+0x154>
   869f2:	0b18      	lsrs	r0, r3, #12
   869f4:	306e      	adds	r0, #110	; 0x6e
   869f6:	e00d      	b.n	86a14 <_malloc_r+0x170>
   869f8:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   869fc:	d802      	bhi.n	86a04 <_malloc_r+0x160>
   869fe:	0bd8      	lsrs	r0, r3, #15
   86a00:	3077      	adds	r0, #119	; 0x77
   86a02:	e007      	b.n	86a14 <_malloc_r+0x170>
   86a04:	f240 5754 	movw	r7, #1364	; 0x554
   86a08:	42b8      	cmp	r0, r7
   86a0a:	d802      	bhi.n	86a12 <_malloc_r+0x16e>
   86a0c:	0c98      	lsrs	r0, r3, #18
   86a0e:	307c      	adds	r0, #124	; 0x7c
   86a10:	e000      	b.n	86a14 <_malloc_r+0x170>
   86a12:	207e      	movs	r0, #126	; 0x7e
   86a14:	f8df e13c 	ldr.w	lr, [pc, #316]	; 86b54 <_malloc_r+0x2b0>
   86a18:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
   86a1c:	68b9      	ldr	r1, [r7, #8]
   86a1e:	42b9      	cmp	r1, r7
   86a20:	d10e      	bne.n	86a40 <_malloc_r+0x19c>
   86a22:	1087      	asrs	r7, r0, #2
   86a24:	2301      	movs	r3, #1
   86a26:	fa03 f007 	lsl.w	r0, r3, r7
   86a2a:	f8de 7004 	ldr.w	r7, [lr, #4]
   86a2e:	ea40 0307 	orr.w	r3, r0, r7
   86a32:	f8ce 3004 	str.w	r3, [lr, #4]
   86a36:	4608      	mov	r0, r1
   86a38:	e008      	b.n	86a4c <_malloc_r+0x1a8>
   86a3a:	6889      	ldr	r1, [r1, #8]
   86a3c:	42b9      	cmp	r1, r7
   86a3e:	d004      	beq.n	86a4a <_malloc_r+0x1a6>
   86a40:	6848      	ldr	r0, [r1, #4]
   86a42:	f020 0003 	bic.w	r0, r0, #3
   86a46:	4283      	cmp	r3, r0
   86a48:	d3f7      	bcc.n	86a3a <_malloc_r+0x196>
   86a4a:	68c8      	ldr	r0, [r1, #12]
   86a4c:	60e8      	str	r0, [r5, #12]
   86a4e:	60a9      	str	r1, [r5, #8]
   86a50:	60cd      	str	r5, [r1, #12]
   86a52:	6085      	str	r5, [r0, #8]
   86a54:	1095      	asrs	r5, r2, #2
   86a56:	2001      	movs	r0, #1
   86a58:	fa00 f305 	lsl.w	r3, r0, r5
   86a5c:	4f3d      	ldr	r7, [pc, #244]	; (86b54 <_malloc_r+0x2b0>)
   86a5e:	6879      	ldr	r1, [r7, #4]
   86a60:	428b      	cmp	r3, r1
   86a62:	d85d      	bhi.n	86b20 <_malloc_r+0x27c>
   86a64:	420b      	tst	r3, r1
   86a66:	d105      	bne.n	86a74 <_malloc_r+0x1d0>
   86a68:	f022 0203 	bic.w	r2, r2, #3
   86a6c:	005b      	lsls	r3, r3, #1
   86a6e:	3204      	adds	r2, #4
   86a70:	420b      	tst	r3, r1
   86a72:	d0fb      	beq.n	86a6c <_malloc_r+0x1c8>
   86a74:	4d37      	ldr	r5, [pc, #220]	; (86b54 <_malloc_r+0x2b0>)
   86a76:	4610      	mov	r0, r2
   86a78:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
   86a7c:	4677      	mov	r7, lr
   86a7e:	68fd      	ldr	r5, [r7, #12]
   86a80:	42bd      	cmp	r5, r7
   86a82:	d02d      	beq.n	86ae0 <_malloc_r+0x23c>
   86a84:	6869      	ldr	r1, [r5, #4]
   86a86:	f021 0c03 	bic.w	ip, r1, #3
   86a8a:	ebc4 010c 	rsb	r1, r4, ip
   86a8e:	290f      	cmp	r1, #15
   86a90:	dd13      	ble.n	86aba <_malloc_r+0x216>
   86a92:	192b      	adds	r3, r5, r4
   86a94:	f044 0401 	orr.w	r4, r4, #1
   86a98:	68ea      	ldr	r2, [r5, #12]
   86a9a:	606c      	str	r4, [r5, #4]
   86a9c:	f855 0f08 	ldr.w	r0, [r5, #8]!
   86aa0:	5059      	str	r1, [r3, r1]
   86aa2:	60c2      	str	r2, [r0, #12]
   86aa4:	6090      	str	r0, [r2, #8]
   86aa6:	4a2b      	ldr	r2, [pc, #172]	; (86b54 <_malloc_r+0x2b0>)
   86aa8:	f041 0001 	orr.w	r0, r1, #1
   86aac:	6153      	str	r3, [r2, #20]
   86aae:	6113      	str	r3, [r2, #16]
   86ab0:	3208      	adds	r2, #8
   86ab2:	60da      	str	r2, [r3, #12]
   86ab4:	609a      	str	r2, [r3, #8]
   86ab6:	6058      	str	r0, [r3, #4]
   86ab8:	e00c      	b.n	86ad4 <_malloc_r+0x230>
   86aba:	2900      	cmp	r1, #0
   86abc:	db0e      	blt.n	86adc <_malloc_r+0x238>
   86abe:	eb05 000c 	add.w	r0, r5, ip
   86ac2:	6842      	ldr	r2, [r0, #4]
   86ac4:	68e9      	ldr	r1, [r5, #12]
   86ac6:	f042 0301 	orr.w	r3, r2, #1
   86aca:	6043      	str	r3, [r0, #4]
   86acc:	f855 0f08 	ldr.w	r0, [r5, #8]!
   86ad0:	60c1      	str	r1, [r0, #12]
   86ad2:	6088      	str	r0, [r1, #8]
   86ad4:	4630      	mov	r0, r6
   86ad6:	f000 f910 	bl	86cfa <__malloc_unlock>
   86ada:	e0de      	b.n	86c9a <_malloc_r+0x3f6>
   86adc:	68ed      	ldr	r5, [r5, #12]
   86ade:	e7cf      	b.n	86a80 <_malloc_r+0x1dc>
   86ae0:	3001      	adds	r0, #1
   86ae2:	0781      	lsls	r1, r0, #30
   86ae4:	f105 0708 	add.w	r7, r5, #8
   86ae8:	d1c9      	bne.n	86a7e <_malloc_r+0x1da>
   86aea:	4671      	mov	r1, lr
   86aec:	0795      	lsls	r5, r2, #30
   86aee:	d105      	bne.n	86afc <_malloc_r+0x258>
   86af0:	4a18      	ldr	r2, [pc, #96]	; (86b54 <_malloc_r+0x2b0>)
   86af2:	6855      	ldr	r5, [r2, #4]
   86af4:	ea25 0503 	bic.w	r5, r5, r3
   86af8:	6055      	str	r5, [r2, #4]
   86afa:	e005      	b.n	86b08 <_malloc_r+0x264>
   86afc:	f1a1 0708 	sub.w	r7, r1, #8
   86b00:	6809      	ldr	r1, [r1, #0]
   86b02:	3a01      	subs	r2, #1
   86b04:	42b9      	cmp	r1, r7
   86b06:	d0f1      	beq.n	86aec <_malloc_r+0x248>
   86b08:	4f12      	ldr	r7, [pc, #72]	; (86b54 <_malloc_r+0x2b0>)
   86b0a:	005b      	lsls	r3, r3, #1
   86b0c:	687f      	ldr	r7, [r7, #4]
   86b0e:	42bb      	cmp	r3, r7
   86b10:	d806      	bhi.n	86b20 <_malloc_r+0x27c>
   86b12:	b12b      	cbz	r3, 86b20 <_malloc_r+0x27c>
   86b14:	4602      	mov	r2, r0
   86b16:	423b      	tst	r3, r7
   86b18:	d1ac      	bne.n	86a74 <_malloc_r+0x1d0>
   86b1a:	3204      	adds	r2, #4
   86b1c:	005b      	lsls	r3, r3, #1
   86b1e:	e7fa      	b.n	86b16 <_malloc_r+0x272>
   86b20:	4b0c      	ldr	r3, [pc, #48]	; (86b54 <_malloc_r+0x2b0>)
   86b22:	689f      	ldr	r7, [r3, #8]
   86b24:	4619      	mov	r1, r3
   86b26:	6878      	ldr	r0, [r7, #4]
   86b28:	f020 0903 	bic.w	r9, r0, #3
   86b2c:	45a1      	cmp	r9, r4
   86b2e:	d304      	bcc.n	86b3a <_malloc_r+0x296>
   86b30:	ebc4 0009 	rsb	r0, r4, r9
   86b34:	280f      	cmp	r0, #15
   86b36:	f300 80a2 	bgt.w	86c7e <_malloc_r+0x3da>
   86b3a:	4a07      	ldr	r2, [pc, #28]	; (86b58 <_malloc_r+0x2b4>)
   86b3c:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
   86b40:	6815      	ldr	r5, [r2, #0]
   86b42:	3301      	adds	r3, #1
   86b44:	eb07 0a09 	add.w	sl, r7, r9
   86b48:	eb04 0805 	add.w	r8, r4, r5
   86b4c:	d106      	bne.n	86b5c <_malloc_r+0x2b8>
   86b4e:	f108 0810 	add.w	r8, r8, #16
   86b52:	e00b      	b.n	86b6c <_malloc_r+0x2c8>
   86b54:	200704bc 	.word	0x200704bc
   86b58:	20078c3c 	.word	0x20078c3c
   86b5c:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   86b60:	f100 010f 	add.w	r1, r0, #15
   86b64:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   86b68:	f022 080f 	bic.w	r8, r2, #15
   86b6c:	4630      	mov	r0, r6
   86b6e:	4641      	mov	r1, r8
   86b70:	f000 fa32 	bl	86fd8 <_sbrk_r>
   86b74:	1c42      	adds	r2, r0, #1
   86b76:	4605      	mov	r5, r0
   86b78:	d071      	beq.n	86c5e <_malloc_r+0x3ba>
   86b7a:	4550      	cmp	r0, sl
   86b7c:	d202      	bcs.n	86b84 <_malloc_r+0x2e0>
   86b7e:	4b48      	ldr	r3, [pc, #288]	; (86ca0 <_malloc_r+0x3fc>)
   86b80:	429f      	cmp	r7, r3
   86b82:	d16c      	bne.n	86c5e <_malloc_r+0x3ba>
   86b84:	4847      	ldr	r0, [pc, #284]	; (86ca4 <_malloc_r+0x400>)
   86b86:	4555      	cmp	r5, sl
   86b88:	6841      	ldr	r1, [r0, #4]
   86b8a:	4a45      	ldr	r2, [pc, #276]	; (86ca0 <_malloc_r+0x3fc>)
   86b8c:	eb08 0301 	add.w	r3, r8, r1
   86b90:	6043      	str	r3, [r0, #4]
   86b92:	d107      	bne.n	86ba4 <_malloc_r+0x300>
   86b94:	0529      	lsls	r1, r5, #20
   86b96:	d105      	bne.n	86ba4 <_malloc_r+0x300>
   86b98:	6895      	ldr	r5, [r2, #8]
   86b9a:	44c8      	add	r8, r9
   86b9c:	f048 0001 	orr.w	r0, r8, #1
   86ba0:	6068      	str	r0, [r5, #4]
   86ba2:	e051      	b.n	86c48 <_malloc_r+0x3a4>
   86ba4:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   86ba8:	1c42      	adds	r2, r0, #1
   86baa:	d103      	bne.n	86bb4 <_malloc_r+0x310>
   86bac:	4a3c      	ldr	r2, [pc, #240]	; (86ca0 <_malloc_r+0x3fc>)
   86bae:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
   86bb2:	e005      	b.n	86bc0 <_malloc_r+0x31c>
   86bb4:	ebca 0a05 	rsb	sl, sl, r5
   86bb8:	eb03 010a 	add.w	r1, r3, sl
   86bbc:	4b39      	ldr	r3, [pc, #228]	; (86ca4 <_malloc_r+0x400>)
   86bbe:	6059      	str	r1, [r3, #4]
   86bc0:	f015 0007 	ands.w	r0, r5, #7
   86bc4:	bf1c      	itt	ne
   86bc6:	f1c0 0008 	rsbne	r0, r0, #8
   86bca:	182d      	addne	r5, r5, r0
   86bcc:	eb05 0c08 	add.w	ip, r5, r8
   86bd0:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   86bd4:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
   86bd8:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
   86bdc:	4641      	mov	r1, r8
   86bde:	4630      	mov	r0, r6
   86be0:	f000 f9fa 	bl	86fd8 <_sbrk_r>
   86be4:	4a2f      	ldr	r2, [pc, #188]	; (86ca4 <_malloc_r+0x400>)
   86be6:	1c43      	adds	r3, r0, #1
   86be8:	6853      	ldr	r3, [r2, #4]
   86bea:	bf08      	it	eq
   86bec:	f04f 0800 	moveq.w	r8, #0
   86bf0:	eb08 0103 	add.w	r1, r8, r3
   86bf4:	bf08      	it	eq
   86bf6:	4628      	moveq	r0, r5
   86bf8:	6051      	str	r1, [r2, #4]
   86bfa:	1b40      	subs	r0, r0, r5
   86bfc:	4a28      	ldr	r2, [pc, #160]	; (86ca0 <_malloc_r+0x3fc>)
   86bfe:	eb00 0308 	add.w	r3, r0, r8
   86c02:	f043 0101 	orr.w	r1, r3, #1
   86c06:	4297      	cmp	r7, r2
   86c08:	6095      	str	r5, [r2, #8]
   86c0a:	6069      	str	r1, [r5, #4]
   86c0c:	d01c      	beq.n	86c48 <_malloc_r+0x3a4>
   86c0e:	f1b9 0f0f 	cmp.w	r9, #15
   86c12:	d802      	bhi.n	86c1a <_malloc_r+0x376>
   86c14:	2201      	movs	r2, #1
   86c16:	606a      	str	r2, [r5, #4]
   86c18:	e021      	b.n	86c5e <_malloc_r+0x3ba>
   86c1a:	687d      	ldr	r5, [r7, #4]
   86c1c:	f1a9 090c 	sub.w	r9, r9, #12
   86c20:	f029 0907 	bic.w	r9, r9, #7
   86c24:	f005 0201 	and.w	r2, r5, #1
   86c28:	2105      	movs	r1, #5
   86c2a:	eb07 0309 	add.w	r3, r7, r9
   86c2e:	ea49 0002 	orr.w	r0, r9, r2
   86c32:	f1b9 0f0f 	cmp.w	r9, #15
   86c36:	6078      	str	r0, [r7, #4]
   86c38:	6059      	str	r1, [r3, #4]
   86c3a:	6099      	str	r1, [r3, #8]
   86c3c:	d904      	bls.n	86c48 <_malloc_r+0x3a4>
   86c3e:	4630      	mov	r0, r6
   86c40:	f107 0108 	add.w	r1, r7, #8
   86c44:	f7ff fb1a 	bl	8627c <_free_r>
   86c48:	4a16      	ldr	r2, [pc, #88]	; (86ca4 <_malloc_r+0x400>)
   86c4a:	6853      	ldr	r3, [r2, #4]
   86c4c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   86c4e:	6b15      	ldr	r5, [r2, #48]	; 0x30
   86c50:	428b      	cmp	r3, r1
   86c52:	bf88      	it	hi
   86c54:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   86c56:	42ab      	cmp	r3, r5
   86c58:	bf84      	itt	hi
   86c5a:	4d12      	ldrhi	r5, [pc, #72]	; (86ca4 <_malloc_r+0x400>)
   86c5c:	632b      	strhi	r3, [r5, #48]	; 0x30
   86c5e:	4810      	ldr	r0, [pc, #64]	; (86ca0 <_malloc_r+0x3fc>)
   86c60:	6882      	ldr	r2, [r0, #8]
   86c62:	6853      	ldr	r3, [r2, #4]
   86c64:	f023 0103 	bic.w	r1, r3, #3
   86c68:	42a1      	cmp	r1, r4
   86c6a:	ebc4 0001 	rsb	r0, r4, r1
   86c6e:	d301      	bcc.n	86c74 <_malloc_r+0x3d0>
   86c70:	280f      	cmp	r0, #15
   86c72:	dc04      	bgt.n	86c7e <_malloc_r+0x3da>
   86c74:	4630      	mov	r0, r6
   86c76:	f000 f840 	bl	86cfa <__malloc_unlock>
   86c7a:	2500      	movs	r5, #0
   86c7c:	e00d      	b.n	86c9a <_malloc_r+0x3f6>
   86c7e:	4a08      	ldr	r2, [pc, #32]	; (86ca0 <_malloc_r+0x3fc>)
   86c80:	f044 0301 	orr.w	r3, r4, #1
   86c84:	6895      	ldr	r5, [r2, #8]
   86c86:	f040 0101 	orr.w	r1, r0, #1
   86c8a:	192c      	adds	r4, r5, r4
   86c8c:	606b      	str	r3, [r5, #4]
   86c8e:	6094      	str	r4, [r2, #8]
   86c90:	6061      	str	r1, [r4, #4]
   86c92:	4630      	mov	r0, r6
   86c94:	f000 f831 	bl	86cfa <__malloc_unlock>
   86c98:	3508      	adds	r5, #8
   86c9a:	4628      	mov	r0, r5
   86c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86ca0:	200704bc 	.word	0x200704bc
   86ca4:	20078c3c 	.word	0x20078c3c

00086ca8 <memchr>:
   86ca8:	b510      	push	{r4, lr}
   86caa:	b2c9      	uxtb	r1, r1
   86cac:	4603      	mov	r3, r0
   86cae:	1882      	adds	r2, r0, r2
   86cb0:	4293      	cmp	r3, r2
   86cb2:	4618      	mov	r0, r3
   86cb4:	d004      	beq.n	86cc0 <memchr+0x18>
   86cb6:	7804      	ldrb	r4, [r0, #0]
   86cb8:	3301      	adds	r3, #1
   86cba:	428c      	cmp	r4, r1
   86cbc:	d1f8      	bne.n	86cb0 <memchr+0x8>
   86cbe:	e000      	b.n	86cc2 <memchr+0x1a>
   86cc0:	2000      	movs	r0, #0
   86cc2:	bd10      	pop	{r4, pc}

00086cc4 <memmove>:
   86cc4:	4281      	cmp	r1, r0
   86cc6:	b570      	push	{r4, r5, r6, lr}
   86cc8:	d20e      	bcs.n	86ce8 <memmove+0x24>
   86cca:	188c      	adds	r4, r1, r2
   86ccc:	42a0      	cmp	r0, r4
   86cce:	d20b      	bcs.n	86ce8 <memmove+0x24>
   86cd0:	1885      	adds	r5, r0, r2
   86cd2:	4613      	mov	r3, r2
   86cd4:	f113 33ff 	adds.w	r3, r3, #4294967295
   86cd8:	d305      	bcc.n	86ce6 <memmove+0x22>
   86cda:	4251      	negs	r1, r2
   86cdc:	1866      	adds	r6, r4, r1
   86cde:	5cf6      	ldrb	r6, [r6, r3]
   86ce0:	1869      	adds	r1, r5, r1
   86ce2:	54ce      	strb	r6, [r1, r3]
   86ce4:	e7f6      	b.n	86cd4 <memmove+0x10>
   86ce6:	bd70      	pop	{r4, r5, r6, pc}
   86ce8:	2300      	movs	r3, #0
   86cea:	4293      	cmp	r3, r2
   86cec:	d003      	beq.n	86cf6 <memmove+0x32>
   86cee:	5ccc      	ldrb	r4, [r1, r3]
   86cf0:	54c4      	strb	r4, [r0, r3]
   86cf2:	3301      	adds	r3, #1
   86cf4:	e7f9      	b.n	86cea <memmove+0x26>
   86cf6:	bd70      	pop	{r4, r5, r6, pc}

00086cf8 <__malloc_lock>:
   86cf8:	4770      	bx	lr

00086cfa <__malloc_unlock>:
   86cfa:	4770      	bx	lr

00086cfc <_realloc_r>:
   86cfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86d00:	4681      	mov	r9, r0
   86d02:	4616      	mov	r6, r2
   86d04:	460c      	mov	r4, r1
   86d06:	b921      	cbnz	r1, 86d12 <_realloc_r+0x16>
   86d08:	4611      	mov	r1, r2
   86d0a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86d0e:	f7ff bdc9 	b.w	868a4 <_malloc_r>
   86d12:	f7ff fff1 	bl	86cf8 <__malloc_lock>
   86d16:	f106 070b 	add.w	r7, r6, #11
   86d1a:	f854 5c04 	ldr.w	r5, [r4, #-4]
   86d1e:	2f16      	cmp	r7, #22
   86d20:	f1a4 0b08 	sub.w	fp, r4, #8
   86d24:	f025 0803 	bic.w	r8, r5, #3
   86d28:	d903      	bls.n	86d32 <_realloc_r+0x36>
   86d2a:	f037 0707 	bics.w	r7, r7, #7
   86d2e:	d501      	bpl.n	86d34 <_realloc_r+0x38>
   86d30:	e002      	b.n	86d38 <_realloc_r+0x3c>
   86d32:	2710      	movs	r7, #16
   86d34:	42b7      	cmp	r7, r6
   86d36:	d204      	bcs.n	86d42 <_realloc_r+0x46>
   86d38:	200c      	movs	r0, #12
   86d3a:	f8c9 0000 	str.w	r0, [r9]
   86d3e:	2600      	movs	r6, #0
   86d40:	e145      	b.n	86fce <_realloc_r+0x2d2>
   86d42:	45b8      	cmp	r8, r7
   86d44:	f280 811a 	bge.w	86f7c <_realloc_r+0x280>
   86d48:	4aa2      	ldr	r2, [pc, #648]	; (86fd4 <_realloc_r+0x2d8>)
   86d4a:	eb0b 0308 	add.w	r3, fp, r8
   86d4e:	6891      	ldr	r1, [r2, #8]
   86d50:	428b      	cmp	r3, r1
   86d52:	d006      	beq.n	86d62 <_realloc_r+0x66>
   86d54:	6858      	ldr	r0, [r3, #4]
   86d56:	f020 0201 	bic.w	r2, r0, #1
   86d5a:	1898      	adds	r0, r3, r2
   86d5c:	6842      	ldr	r2, [r0, #4]
   86d5e:	07d0      	lsls	r0, r2, #31
   86d60:	d426      	bmi.n	86db0 <_realloc_r+0xb4>
   86d62:	685a      	ldr	r2, [r3, #4]
   86d64:	428b      	cmp	r3, r1
   86d66:	f022 0003 	bic.w	r0, r2, #3
   86d6a:	eb00 0a08 	add.w	sl, r0, r8
   86d6e:	d118      	bne.n	86da2 <_realloc_r+0xa6>
   86d70:	f107 0210 	add.w	r2, r7, #16
   86d74:	4592      	cmp	sl, r2
   86d76:	db1d      	blt.n	86db4 <_realloc_r+0xb8>
   86d78:	ebc7 0a0a 	rsb	sl, r7, sl
   86d7c:	eb0b 0507 	add.w	r5, fp, r7
   86d80:	f04a 0101 	orr.w	r1, sl, #1
   86d84:	6069      	str	r1, [r5, #4]
   86d86:	f854 2c04 	ldr.w	r2, [r4, #-4]
   86d8a:	4e92      	ldr	r6, [pc, #584]	; (86fd4 <_realloc_r+0x2d8>)
   86d8c:	f002 0301 	and.w	r3, r2, #1
   86d90:	431f      	orrs	r7, r3
   86d92:	60b5      	str	r5, [r6, #8]
   86d94:	f844 7c04 	str.w	r7, [r4, #-4]
   86d98:	4648      	mov	r0, r9
   86d9a:	f7ff ffae 	bl	86cfa <__malloc_unlock>
   86d9e:	4626      	mov	r6, r4
   86da0:	e115      	b.n	86fce <_realloc_r+0x2d2>
   86da2:	45ba      	cmp	sl, r7
   86da4:	db06      	blt.n	86db4 <_realloc_r+0xb8>
   86da6:	68dd      	ldr	r5, [r3, #12]
   86da8:	689e      	ldr	r6, [r3, #8]
   86daa:	60f5      	str	r5, [r6, #12]
   86dac:	60ae      	str	r6, [r5, #8]
   86dae:	e0e6      	b.n	86f7e <_realloc_r+0x282>
   86db0:	2000      	movs	r0, #0
   86db2:	4603      	mov	r3, r0
   86db4:	07ea      	lsls	r2, r5, #31
   86db6:	f100 8091 	bmi.w	86edc <_realloc_r+0x1e0>
   86dba:	f854 5c08 	ldr.w	r5, [r4, #-8]
   86dbe:	ebc5 050b 	rsb	r5, r5, fp
   86dc2:	686a      	ldr	r2, [r5, #4]
   86dc4:	f022 0203 	bic.w	r2, r2, #3
   86dc8:	2b00      	cmp	r3, #0
   86dca:	d051      	beq.n	86e70 <_realloc_r+0x174>
   86dcc:	eb02 0a08 	add.w	sl, r2, r8
   86dd0:	428b      	cmp	r3, r1
   86dd2:	4482      	add	sl, r0
   86dd4:	d145      	bne.n	86e62 <_realloc_r+0x166>
   86dd6:	f107 0310 	add.w	r3, r7, #16
   86dda:	459a      	cmp	sl, r3
   86ddc:	db48      	blt.n	86e70 <_realloc_r+0x174>
   86dde:	462e      	mov	r6, r5
   86de0:	68e9      	ldr	r1, [r5, #12]
   86de2:	f856 3f08 	ldr.w	r3, [r6, #8]!
   86de6:	f1a8 0204 	sub.w	r2, r8, #4
   86dea:	2a24      	cmp	r2, #36	; 0x24
   86dec:	60d9      	str	r1, [r3, #12]
   86dee:	608b      	str	r3, [r1, #8]
   86df0:	d825      	bhi.n	86e3e <_realloc_r+0x142>
   86df2:	2a13      	cmp	r2, #19
   86df4:	d91b      	bls.n	86e2e <_realloc_r+0x132>
   86df6:	6821      	ldr	r1, [r4, #0]
   86df8:	2a1b      	cmp	r2, #27
   86dfa:	60a9      	str	r1, [r5, #8]
   86dfc:	6863      	ldr	r3, [r4, #4]
   86dfe:	60eb      	str	r3, [r5, #12]
   86e00:	d803      	bhi.n	86e0a <_realloc_r+0x10e>
   86e02:	f105 0010 	add.w	r0, r5, #16
   86e06:	3408      	adds	r4, #8
   86e08:	e012      	b.n	86e30 <_realloc_r+0x134>
   86e0a:	68a0      	ldr	r0, [r4, #8]
   86e0c:	2a24      	cmp	r2, #36	; 0x24
   86e0e:	6128      	str	r0, [r5, #16]
   86e10:	68e1      	ldr	r1, [r4, #12]
   86e12:	6169      	str	r1, [r5, #20]
   86e14:	d003      	beq.n	86e1e <_realloc_r+0x122>
   86e16:	f105 0018 	add.w	r0, r5, #24
   86e1a:	3410      	adds	r4, #16
   86e1c:	e008      	b.n	86e30 <_realloc_r+0x134>
   86e1e:	6922      	ldr	r2, [r4, #16]
   86e20:	f105 0020 	add.w	r0, r5, #32
   86e24:	61aa      	str	r2, [r5, #24]
   86e26:	6963      	ldr	r3, [r4, #20]
   86e28:	3418      	adds	r4, #24
   86e2a:	61eb      	str	r3, [r5, #28]
   86e2c:	e000      	b.n	86e30 <_realloc_r+0x134>
   86e2e:	4630      	mov	r0, r6
   86e30:	6821      	ldr	r1, [r4, #0]
   86e32:	6001      	str	r1, [r0, #0]
   86e34:	6862      	ldr	r2, [r4, #4]
   86e36:	6042      	str	r2, [r0, #4]
   86e38:	68a3      	ldr	r3, [r4, #8]
   86e3a:	6083      	str	r3, [r0, #8]
   86e3c:	e003      	b.n	86e46 <_realloc_r+0x14a>
   86e3e:	4630      	mov	r0, r6
   86e40:	4621      	mov	r1, r4
   86e42:	f7ff ff3f 	bl	86cc4 <memmove>
   86e46:	ebc7 0a0a 	rsb	sl, r7, sl
   86e4a:	19e8      	adds	r0, r5, r7
   86e4c:	f04a 0201 	orr.w	r2, sl, #1
   86e50:	6042      	str	r2, [r0, #4]
   86e52:	686b      	ldr	r3, [r5, #4]
   86e54:	495f      	ldr	r1, [pc, #380]	; (86fd4 <_realloc_r+0x2d8>)
   86e56:	6088      	str	r0, [r1, #8]
   86e58:	f003 0001 	and.w	r0, r3, #1
   86e5c:	4307      	orrs	r7, r0
   86e5e:	606f      	str	r7, [r5, #4]
   86e60:	e088      	b.n	86f74 <_realloc_r+0x278>
   86e62:	45ba      	cmp	sl, r7
   86e64:	db04      	blt.n	86e70 <_realloc_r+0x174>
   86e66:	68d9      	ldr	r1, [r3, #12]
   86e68:	6898      	ldr	r0, [r3, #8]
   86e6a:	60c1      	str	r1, [r0, #12]
   86e6c:	6088      	str	r0, [r1, #8]
   86e6e:	e003      	b.n	86e78 <_realloc_r+0x17c>
   86e70:	eb02 0a08 	add.w	sl, r2, r8
   86e74:	45ba      	cmp	sl, r7
   86e76:	db31      	blt.n	86edc <_realloc_r+0x1e0>
   86e78:	4628      	mov	r0, r5
   86e7a:	68eb      	ldr	r3, [r5, #12]
   86e7c:	f850 1f08 	ldr.w	r1, [r0, #8]!
   86e80:	f1a8 0204 	sub.w	r2, r8, #4
   86e84:	2a24      	cmp	r2, #36	; 0x24
   86e86:	60cb      	str	r3, [r1, #12]
   86e88:	6099      	str	r1, [r3, #8]
   86e8a:	d823      	bhi.n	86ed4 <_realloc_r+0x1d8>
   86e8c:	2a13      	cmp	r2, #19
   86e8e:	d91a      	bls.n	86ec6 <_realloc_r+0x1ca>
   86e90:	6820      	ldr	r0, [r4, #0]
   86e92:	2a1b      	cmp	r2, #27
   86e94:	60a8      	str	r0, [r5, #8]
   86e96:	6866      	ldr	r6, [r4, #4]
   86e98:	60ee      	str	r6, [r5, #12]
   86e9a:	d803      	bhi.n	86ea4 <_realloc_r+0x1a8>
   86e9c:	f105 0010 	add.w	r0, r5, #16
   86ea0:	3408      	adds	r4, #8
   86ea2:	e010      	b.n	86ec6 <_realloc_r+0x1ca>
   86ea4:	68a3      	ldr	r3, [r4, #8]
   86ea6:	2a24      	cmp	r2, #36	; 0x24
   86ea8:	612b      	str	r3, [r5, #16]
   86eaa:	68e1      	ldr	r1, [r4, #12]
   86eac:	6169      	str	r1, [r5, #20]
   86eae:	d003      	beq.n	86eb8 <_realloc_r+0x1bc>
   86eb0:	f105 0018 	add.w	r0, r5, #24
   86eb4:	3410      	adds	r4, #16
   86eb6:	e006      	b.n	86ec6 <_realloc_r+0x1ca>
   86eb8:	6922      	ldr	r2, [r4, #16]
   86eba:	61aa      	str	r2, [r5, #24]
   86ebc:	6960      	ldr	r0, [r4, #20]
   86ebe:	3418      	adds	r4, #24
   86ec0:	61e8      	str	r0, [r5, #28]
   86ec2:	f105 0020 	add.w	r0, r5, #32
   86ec6:	6826      	ldr	r6, [r4, #0]
   86ec8:	6006      	str	r6, [r0, #0]
   86eca:	6863      	ldr	r3, [r4, #4]
   86ecc:	6043      	str	r3, [r0, #4]
   86ece:	68a1      	ldr	r1, [r4, #8]
   86ed0:	6081      	str	r1, [r0, #8]
   86ed2:	e055      	b.n	86f80 <_realloc_r+0x284>
   86ed4:	4621      	mov	r1, r4
   86ed6:	f7ff fef5 	bl	86cc4 <memmove>
   86eda:	e051      	b.n	86f80 <_realloc_r+0x284>
   86edc:	4631      	mov	r1, r6
   86ede:	4648      	mov	r0, r9
   86ee0:	f7ff fce0 	bl	868a4 <_malloc_r>
   86ee4:	4606      	mov	r6, r0
   86ee6:	2800      	cmp	r0, #0
   86ee8:	d044      	beq.n	86f74 <_realloc_r+0x278>
   86eea:	f854 1c04 	ldr.w	r1, [r4, #-4]
   86eee:	f1a0 0208 	sub.w	r2, r0, #8
   86ef2:	f021 0301 	bic.w	r3, r1, #1
   86ef6:	eb0b 0103 	add.w	r1, fp, r3
   86efa:	428a      	cmp	r2, r1
   86efc:	d106      	bne.n	86f0c <_realloc_r+0x210>
   86efe:	f850 6c04 	ldr.w	r6, [r0, #-4]
   86f02:	f026 0503 	bic.w	r5, r6, #3
   86f06:	eb05 0a08 	add.w	sl, r5, r8
   86f0a:	e038      	b.n	86f7e <_realloc_r+0x282>
   86f0c:	f1a8 0204 	sub.w	r2, r8, #4
   86f10:	2a24      	cmp	r2, #36	; 0x24
   86f12:	d828      	bhi.n	86f66 <_realloc_r+0x26a>
   86f14:	2a13      	cmp	r2, #19
   86f16:	d91e      	bls.n	86f56 <_realloc_r+0x25a>
   86f18:	6823      	ldr	r3, [r4, #0]
   86f1a:	2a1b      	cmp	r2, #27
   86f1c:	6003      	str	r3, [r0, #0]
   86f1e:	6861      	ldr	r1, [r4, #4]
   86f20:	6041      	str	r1, [r0, #4]
   86f22:	d804      	bhi.n	86f2e <_realloc_r+0x232>
   86f24:	f100 0008 	add.w	r0, r0, #8
   86f28:	f104 0208 	add.w	r2, r4, #8
   86f2c:	e014      	b.n	86f58 <_realloc_r+0x25c>
   86f2e:	68a0      	ldr	r0, [r4, #8]
   86f30:	2a24      	cmp	r2, #36	; 0x24
   86f32:	60b0      	str	r0, [r6, #8]
   86f34:	68e3      	ldr	r3, [r4, #12]
   86f36:	60f3      	str	r3, [r6, #12]
   86f38:	d004      	beq.n	86f44 <_realloc_r+0x248>
   86f3a:	f106 0010 	add.w	r0, r6, #16
   86f3e:	f104 0210 	add.w	r2, r4, #16
   86f42:	e009      	b.n	86f58 <_realloc_r+0x25c>
   86f44:	6922      	ldr	r2, [r4, #16]
   86f46:	f106 0018 	add.w	r0, r6, #24
   86f4a:	6132      	str	r2, [r6, #16]
   86f4c:	6961      	ldr	r1, [r4, #20]
   86f4e:	f104 0218 	add.w	r2, r4, #24
   86f52:	6171      	str	r1, [r6, #20]
   86f54:	e000      	b.n	86f58 <_realloc_r+0x25c>
   86f56:	4622      	mov	r2, r4
   86f58:	6813      	ldr	r3, [r2, #0]
   86f5a:	6003      	str	r3, [r0, #0]
   86f5c:	6851      	ldr	r1, [r2, #4]
   86f5e:	6041      	str	r1, [r0, #4]
   86f60:	6892      	ldr	r2, [r2, #8]
   86f62:	6082      	str	r2, [r0, #8]
   86f64:	e002      	b.n	86f6c <_realloc_r+0x270>
   86f66:	4621      	mov	r1, r4
   86f68:	f7ff feac 	bl	86cc4 <memmove>
   86f6c:	4648      	mov	r0, r9
   86f6e:	4621      	mov	r1, r4
   86f70:	f7ff f984 	bl	8627c <_free_r>
   86f74:	4648      	mov	r0, r9
   86f76:	f7ff fec0 	bl	86cfa <__malloc_unlock>
   86f7a:	e028      	b.n	86fce <_realloc_r+0x2d2>
   86f7c:	46c2      	mov	sl, r8
   86f7e:	465d      	mov	r5, fp
   86f80:	ebc7 000a 	rsb	r0, r7, sl
   86f84:	280f      	cmp	r0, #15
   86f86:	686a      	ldr	r2, [r5, #4]
   86f88:	d911      	bls.n	86fae <_realloc_r+0x2b2>
   86f8a:	f002 0601 	and.w	r6, r2, #1
   86f8e:	19e9      	adds	r1, r5, r7
   86f90:	f040 0301 	orr.w	r3, r0, #1
   86f94:	4337      	orrs	r7, r6
   86f96:	606f      	str	r7, [r5, #4]
   86f98:	1808      	adds	r0, r1, r0
   86f9a:	604b      	str	r3, [r1, #4]
   86f9c:	6842      	ldr	r2, [r0, #4]
   86f9e:	3108      	adds	r1, #8
   86fa0:	f042 0601 	orr.w	r6, r2, #1
   86fa4:	6046      	str	r6, [r0, #4]
   86fa6:	4648      	mov	r0, r9
   86fa8:	f7ff f968 	bl	8627c <_free_r>
   86fac:	e00a      	b.n	86fc4 <_realloc_r+0x2c8>
   86fae:	f002 0601 	and.w	r6, r2, #1
   86fb2:	ea4a 0306 	orr.w	r3, sl, r6
   86fb6:	606b      	str	r3, [r5, #4]
   86fb8:	eb05 010a 	add.w	r1, r5, sl
   86fbc:	6848      	ldr	r0, [r1, #4]
   86fbe:	f040 0201 	orr.w	r2, r0, #1
   86fc2:	604a      	str	r2, [r1, #4]
   86fc4:	4648      	mov	r0, r9
   86fc6:	f7ff fe98 	bl	86cfa <__malloc_unlock>
   86fca:	f105 0608 	add.w	r6, r5, #8
   86fce:	4630      	mov	r0, r6
   86fd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86fd4:	200704bc 	.word	0x200704bc

00086fd8 <_sbrk_r>:
   86fd8:	b538      	push	{r3, r4, r5, lr}
   86fda:	4c06      	ldr	r4, [pc, #24]	; (86ff4 <_sbrk_r+0x1c>)
   86fdc:	2300      	movs	r3, #0
   86fde:	4605      	mov	r5, r0
   86fe0:	4608      	mov	r0, r1
   86fe2:	6023      	str	r3, [r4, #0]
   86fe4:	f7fd fe4c 	bl	84c80 <_sbrk>
   86fe8:	1c43      	adds	r3, r0, #1
   86fea:	d102      	bne.n	86ff2 <_sbrk_r+0x1a>
   86fec:	6821      	ldr	r1, [r4, #0]
   86fee:	b101      	cbz	r1, 86ff2 <_sbrk_r+0x1a>
   86ff0:	6029      	str	r1, [r5, #0]
   86ff2:	bd38      	pop	{r3, r4, r5, pc}
   86ff4:	20078d2c 	.word	0x20078d2c

00086ff8 <__sread>:
   86ff8:	b510      	push	{r4, lr}
   86ffa:	460c      	mov	r4, r1
   86ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   87000:	f000 f942 	bl	87288 <_read_r>
   87004:	2800      	cmp	r0, #0
   87006:	db03      	blt.n	87010 <__sread+0x18>
   87008:	6d22      	ldr	r2, [r4, #80]	; 0x50
   8700a:	1813      	adds	r3, r2, r0
   8700c:	6523      	str	r3, [r4, #80]	; 0x50
   8700e:	bd10      	pop	{r4, pc}
   87010:	89a3      	ldrh	r3, [r4, #12]
   87012:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
   87016:	81a1      	strh	r1, [r4, #12]
   87018:	bd10      	pop	{r4, pc}

0008701a <__seofread>:
   8701a:	2000      	movs	r0, #0
   8701c:	4770      	bx	lr

0008701e <__swrite>:
   8701e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87022:	461d      	mov	r5, r3
   87024:	898b      	ldrh	r3, [r1, #12]
   87026:	460c      	mov	r4, r1
   87028:	f403 7180 	and.w	r1, r3, #256	; 0x100
   8702c:	4616      	mov	r6, r2
   8702e:	b20a      	sxth	r2, r1
   87030:	4607      	mov	r7, r0
   87032:	b12a      	cbz	r2, 87040 <__swrite+0x22>
   87034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   87038:	2200      	movs	r2, #0
   8703a:	2302      	movs	r3, #2
   8703c:	f000 f912 	bl	87264 <_lseek_r>
   87040:	89a0      	ldrh	r0, [r4, #12]
   87042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   87046:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
   8704a:	81a3      	strh	r3, [r4, #12]
   8704c:	4638      	mov	r0, r7
   8704e:	4632      	mov	r2, r6
   87050:	462b      	mov	r3, r5
   87052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   87056:	f000 b877 	b.w	87148 <_write_r>

0008705a <__sseek>:
   8705a:	b510      	push	{r4, lr}
   8705c:	460c      	mov	r4, r1
   8705e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   87062:	f000 f8ff 	bl	87264 <_lseek_r>
   87066:	1c43      	adds	r3, r0, #1
   87068:	89a3      	ldrh	r3, [r4, #12]
   8706a:	d103      	bne.n	87074 <__sseek+0x1a>
   8706c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
   87070:	81a2      	strh	r2, [r4, #12]
   87072:	bd10      	pop	{r4, pc}
   87074:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
   87078:	81a1      	strh	r1, [r4, #12]
   8707a:	6520      	str	r0, [r4, #80]	; 0x50
   8707c:	bd10      	pop	{r4, pc}

0008707e <__sclose>:
   8707e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   87082:	f000 b873 	b.w	8716c <_close_r>

00087086 <strcmp>:
   87086:	f810 2b01 	ldrb.w	r2, [r0], #1
   8708a:	f811 3b01 	ldrb.w	r3, [r1], #1
   8708e:	2a01      	cmp	r2, #1
   87090:	bf28      	it	cs
   87092:	429a      	cmpcs	r2, r3
   87094:	d0f7      	beq.n	87086 <strcmp>
   87096:	eba2 0003 	sub.w	r0, r2, r3
   8709a:	4770      	bx	lr

0008709c <_wcrtomb_r>:
   8709c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   870a0:	461d      	mov	r5, r3
   870a2:	4b10      	ldr	r3, [pc, #64]	; (870e4 <_wcrtomb_r+0x48>)
   870a4:	b086      	sub	sp, #24
   870a6:	4604      	mov	r4, r0
   870a8:	4690      	mov	r8, r2
   870aa:	460e      	mov	r6, r1
   870ac:	681f      	ldr	r7, [r3, #0]
   870ae:	b939      	cbnz	r1, 870c0 <_wcrtomb_r+0x24>
   870b0:	f7ff fb5a 	bl	86768 <__locale_charset>
   870b4:	9500      	str	r5, [sp, #0]
   870b6:	4603      	mov	r3, r0
   870b8:	a903      	add	r1, sp, #12
   870ba:	4620      	mov	r0, r4
   870bc:	4632      	mov	r2, r6
   870be:	e006      	b.n	870ce <_wcrtomb_r+0x32>
   870c0:	f7ff fb52 	bl	86768 <__locale_charset>
   870c4:	9500      	str	r5, [sp, #0]
   870c6:	4603      	mov	r3, r0
   870c8:	4631      	mov	r1, r6
   870ca:	4620      	mov	r0, r4
   870cc:	4642      	mov	r2, r8
   870ce:	47b8      	blx	r7
   870d0:	1c43      	adds	r3, r0, #1
   870d2:	d103      	bne.n	870dc <_wcrtomb_r+0x40>
   870d4:	2100      	movs	r1, #0
   870d6:	228a      	movs	r2, #138	; 0x8a
   870d8:	6029      	str	r1, [r5, #0]
   870da:	6022      	str	r2, [r4, #0]
   870dc:	b006      	add	sp, #24
   870de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   870e2:	bf00      	nop
   870e4:	200708cc 	.word	0x200708cc

000870e8 <wcrtomb>:
   870e8:	b530      	push	{r4, r5, lr}
   870ea:	4613      	mov	r3, r2
   870ec:	4a04      	ldr	r2, [pc, #16]	; (87100 <wcrtomb+0x18>)
   870ee:	4605      	mov	r5, r0
   870f0:	460c      	mov	r4, r1
   870f2:	6810      	ldr	r0, [r2, #0]
   870f4:	4629      	mov	r1, r5
   870f6:	4622      	mov	r2, r4
   870f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   870fc:	f7ff bfce 	b.w	8709c <_wcrtomb_r>
   87100:	20070010 	.word	0x20070010

00087104 <__ascii_wctomb>:
   87104:	b149      	cbz	r1, 8711a <__ascii_wctomb+0x16>
   87106:	2aff      	cmp	r2, #255	; 0xff
   87108:	d904      	bls.n	87114 <__ascii_wctomb+0x10>
   8710a:	238a      	movs	r3, #138	; 0x8a
   8710c:	6003      	str	r3, [r0, #0]
   8710e:	f04f 30ff 	mov.w	r0, #4294967295
   87112:	4770      	bx	lr
   87114:	700a      	strb	r2, [r1, #0]
   87116:	2001      	movs	r0, #1
   87118:	4770      	bx	lr
   8711a:	4608      	mov	r0, r1
   8711c:	4770      	bx	lr

0008711e <_wctomb_r>:
   8711e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   87122:	4698      	mov	r8, r3
   87124:	4b07      	ldr	r3, [pc, #28]	; (87144 <_wctomb_r+0x26>)
   87126:	4605      	mov	r5, r0
   87128:	460f      	mov	r7, r1
   8712a:	4616      	mov	r6, r2
   8712c:	681c      	ldr	r4, [r3, #0]
   8712e:	f7ff fb1b 	bl	86768 <__locale_charset>
   87132:	f8cd 8000 	str.w	r8, [sp]
   87136:	4603      	mov	r3, r0
   87138:	4639      	mov	r1, r7
   8713a:	4628      	mov	r0, r5
   8713c:	4632      	mov	r2, r6
   8713e:	47a0      	blx	r4
   87140:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   87144:	200708cc 	.word	0x200708cc

00087148 <_write_r>:
   87148:	b538      	push	{r3, r4, r5, lr}
   8714a:	4c07      	ldr	r4, [pc, #28]	; (87168 <_write_r+0x20>)
   8714c:	4605      	mov	r5, r0
   8714e:	2000      	movs	r0, #0
   87150:	6020      	str	r0, [r4, #0]
   87152:	4608      	mov	r0, r1
   87154:	4611      	mov	r1, r2
   87156:	461a      	mov	r2, r3
   87158:	f7f9 f8fa 	bl	80350 <_write>
   8715c:	1c43      	adds	r3, r0, #1
   8715e:	d102      	bne.n	87166 <_write_r+0x1e>
   87160:	6823      	ldr	r3, [r4, #0]
   87162:	b103      	cbz	r3, 87166 <_write_r+0x1e>
   87164:	602b      	str	r3, [r5, #0]
   87166:	bd38      	pop	{r3, r4, r5, pc}
   87168:	20078d2c 	.word	0x20078d2c

0008716c <_close_r>:
   8716c:	b538      	push	{r3, r4, r5, lr}
   8716e:	4c06      	ldr	r4, [pc, #24]	; (87188 <_close_r+0x1c>)
   87170:	2300      	movs	r3, #0
   87172:	4605      	mov	r5, r0
   87174:	4608      	mov	r0, r1
   87176:	6023      	str	r3, [r4, #0]
   87178:	f7fd fda8 	bl	84ccc <_close>
   8717c:	1c43      	adds	r3, r0, #1
   8717e:	d102      	bne.n	87186 <_close_r+0x1a>
   87180:	6821      	ldr	r1, [r4, #0]
   87182:	b101      	cbz	r1, 87186 <_close_r+0x1a>
   87184:	6029      	str	r1, [r5, #0]
   87186:	bd38      	pop	{r3, r4, r5, pc}
   87188:	20078d2c 	.word	0x20078d2c

0008718c <_fclose_r>:
   8718c:	b570      	push	{r4, r5, r6, lr}
   8718e:	4605      	mov	r5, r0
   87190:	460c      	mov	r4, r1
   87192:	2900      	cmp	r1, #0
   87194:	d039      	beq.n	8720a <_fclose_r+0x7e>
   87196:	f7fe ff97 	bl	860c8 <__sfp_lock_acquire>
   8719a:	b125      	cbz	r5, 871a6 <_fclose_r+0x1a>
   8719c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8719e:	b913      	cbnz	r3, 871a6 <_fclose_r+0x1a>
   871a0:	4628      	mov	r0, r5
   871a2:	f7fe ff2d 	bl	86000 <__sinit>
   871a6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   871aa:	b35e      	cbz	r6, 87204 <_fclose_r+0x78>
   871ac:	4628      	mov	r0, r5
   871ae:	4621      	mov	r1, r4
   871b0:	f7fe fe34 	bl	85e1c <_fflush_r>
   871b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   871b6:	4606      	mov	r6, r0
   871b8:	b13a      	cbz	r2, 871ca <_fclose_r+0x3e>
   871ba:	4628      	mov	r0, r5
   871bc:	69e1      	ldr	r1, [r4, #28]
   871be:	4790      	blx	r2
   871c0:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   871c4:	bf28      	it	cs
   871c6:	f04f 36ff 	movcs.w	r6, #4294967295
   871ca:	89a0      	ldrh	r0, [r4, #12]
   871cc:	f000 0180 	and.w	r1, r0, #128	; 0x80
   871d0:	b20b      	sxth	r3, r1
   871d2:	b11b      	cbz	r3, 871dc <_fclose_r+0x50>
   871d4:	4628      	mov	r0, r5
   871d6:	6921      	ldr	r1, [r4, #16]
   871d8:	f7ff f850 	bl	8627c <_free_r>
   871dc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   871de:	b141      	cbz	r1, 871f2 <_fclose_r+0x66>
   871e0:	f104 0240 	add.w	r2, r4, #64	; 0x40
   871e4:	4291      	cmp	r1, r2
   871e6:	d002      	beq.n	871ee <_fclose_r+0x62>
   871e8:	4628      	mov	r0, r5
   871ea:	f7ff f847 	bl	8627c <_free_r>
   871ee:	2000      	movs	r0, #0
   871f0:	6320      	str	r0, [r4, #48]	; 0x30
   871f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   871f4:	b121      	cbz	r1, 87200 <_fclose_r+0x74>
   871f6:	4628      	mov	r0, r5
   871f8:	f7ff f840 	bl	8627c <_free_r>
   871fc:	2100      	movs	r1, #0
   871fe:	6461      	str	r1, [r4, #68]	; 0x44
   87200:	2300      	movs	r3, #0
   87202:	81a3      	strh	r3, [r4, #12]
   87204:	f7fe ff61 	bl	860ca <__sfp_lock_release>
   87208:	e000      	b.n	8720c <_fclose_r+0x80>
   8720a:	460e      	mov	r6, r1
   8720c:	4630      	mov	r0, r6
   8720e:	bd70      	pop	{r4, r5, r6, pc}

00087210 <fclose>:
   87210:	4b02      	ldr	r3, [pc, #8]	; (8721c <fclose+0xc>)
   87212:	4601      	mov	r1, r0
   87214:	6818      	ldr	r0, [r3, #0]
   87216:	f7ff bfb9 	b.w	8718c <_fclose_r>
   8721a:	bf00      	nop
   8721c:	20070010 	.word	0x20070010

00087220 <_fstat_r>:
   87220:	b538      	push	{r3, r4, r5, lr}
   87222:	4c07      	ldr	r4, [pc, #28]	; (87240 <_fstat_r+0x20>)
   87224:	2300      	movs	r3, #0
   87226:	4605      	mov	r5, r0
   87228:	4608      	mov	r0, r1
   8722a:	4611      	mov	r1, r2
   8722c:	6023      	str	r3, [r4, #0]
   8722e:	f7fd fd51 	bl	84cd4 <_fstat>
   87232:	1c43      	adds	r3, r0, #1
   87234:	d102      	bne.n	8723c <_fstat_r+0x1c>
   87236:	6821      	ldr	r1, [r4, #0]
   87238:	b101      	cbz	r1, 8723c <_fstat_r+0x1c>
   8723a:	6029      	str	r1, [r5, #0]
   8723c:	bd38      	pop	{r3, r4, r5, pc}
   8723e:	bf00      	nop
   87240:	20078d2c 	.word	0x20078d2c

00087244 <_isatty_r>:
   87244:	b538      	push	{r3, r4, r5, lr}
   87246:	4c06      	ldr	r4, [pc, #24]	; (87260 <_isatty_r+0x1c>)
   87248:	2300      	movs	r3, #0
   8724a:	4605      	mov	r5, r0
   8724c:	4608      	mov	r0, r1
   8724e:	6023      	str	r3, [r4, #0]
   87250:	f7fd fd46 	bl	84ce0 <_isatty>
   87254:	1c43      	adds	r3, r0, #1
   87256:	d102      	bne.n	8725e <_isatty_r+0x1a>
   87258:	6821      	ldr	r1, [r4, #0]
   8725a:	b101      	cbz	r1, 8725e <_isatty_r+0x1a>
   8725c:	6029      	str	r1, [r5, #0]
   8725e:	bd38      	pop	{r3, r4, r5, pc}
   87260:	20078d2c 	.word	0x20078d2c

00087264 <_lseek_r>:
   87264:	b538      	push	{r3, r4, r5, lr}
   87266:	4c07      	ldr	r4, [pc, #28]	; (87284 <_lseek_r+0x20>)
   87268:	4605      	mov	r5, r0
   8726a:	2000      	movs	r0, #0
   8726c:	6020      	str	r0, [r4, #0]
   8726e:	4608      	mov	r0, r1
   87270:	4611      	mov	r1, r2
   87272:	461a      	mov	r2, r3
   87274:	f7fd fd38 	bl	84ce8 <_lseek>
   87278:	1c43      	adds	r3, r0, #1
   8727a:	d102      	bne.n	87282 <_lseek_r+0x1e>
   8727c:	6823      	ldr	r3, [r4, #0]
   8727e:	b103      	cbz	r3, 87282 <_lseek_r+0x1e>
   87280:	602b      	str	r3, [r5, #0]
   87282:	bd38      	pop	{r3, r4, r5, pc}
   87284:	20078d2c 	.word	0x20078d2c

00087288 <_read_r>:
   87288:	b538      	push	{r3, r4, r5, lr}
   8728a:	4c07      	ldr	r4, [pc, #28]	; (872a8 <_read_r+0x20>)
   8728c:	4605      	mov	r5, r0
   8728e:	2000      	movs	r0, #0
   87290:	6020      	str	r0, [r4, #0]
   87292:	4608      	mov	r0, r1
   87294:	4611      	mov	r1, r2
   87296:	461a      	mov	r2, r3
   87298:	f7f9 f816 	bl	802c8 <_read>
   8729c:	1c43      	adds	r3, r0, #1
   8729e:	d102      	bne.n	872a6 <_read_r+0x1e>
   872a0:	6823      	ldr	r3, [r4, #0]
   872a2:	b103      	cbz	r3, 872a6 <_read_r+0x1e>
   872a4:	602b      	str	r3, [r5, #0]
   872a6:	bd38      	pop	{r3, r4, r5, pc}
   872a8:	20078d2c 	.word	0x20078d2c

000872ac <__aeabi_uldivmod>:
   872ac:	b94b      	cbnz	r3, 872c2 <__aeabi_uldivmod+0x16>
   872ae:	b942      	cbnz	r2, 872c2 <__aeabi_uldivmod+0x16>
   872b0:	2900      	cmp	r1, #0
   872b2:	bf08      	it	eq
   872b4:	2800      	cmpeq	r0, #0
   872b6:	d002      	beq.n	872be <__aeabi_uldivmod+0x12>
   872b8:	f04f 31ff 	mov.w	r1, #4294967295
   872bc:	4608      	mov	r0, r1
   872be:	f000 b83b 	b.w	87338 <__aeabi_idiv0>
   872c2:	b082      	sub	sp, #8
   872c4:	46ec      	mov	ip, sp
   872c6:	e92d 5000 	stmdb	sp!, {ip, lr}
   872ca:	f000 f81d 	bl	87308 <__gnu_uldivmod_helper>
   872ce:	f8dd e004 	ldr.w	lr, [sp, #4]
   872d2:	b002      	add	sp, #8
   872d4:	bc0c      	pop	{r2, r3}
   872d6:	4770      	bx	lr

000872d8 <__gnu_ldivmod_helper>:
   872d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   872dc:	4616      	mov	r6, r2
   872de:	4698      	mov	r8, r3
   872e0:	4604      	mov	r4, r0
   872e2:	460d      	mov	r5, r1
   872e4:	f000 f82a 	bl	8733c <__divdi3>
   872e8:	fb06 fc01 	mul.w	ip, r6, r1
   872ec:	fba6 2300 	umull	r2, r3, r6, r0
   872f0:	fb00 c708 	mla	r7, r0, r8, ip
   872f4:	18fb      	adds	r3, r7, r3
   872f6:	1aa2      	subs	r2, r4, r2
   872f8:	eb65 0303 	sbc.w	r3, r5, r3
   872fc:	9c06      	ldr	r4, [sp, #24]
   872fe:	e9c4 2300 	strd	r2, r3, [r4]
   87302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87306:	bf00      	nop

00087308 <__gnu_uldivmod_helper>:
   87308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8730c:	4690      	mov	r8, r2
   8730e:	4606      	mov	r6, r0
   87310:	460f      	mov	r7, r1
   87312:	461d      	mov	r5, r3
   87314:	f000 f970 	bl	875f8 <__udivdi3>
   87318:	fb00 f305 	mul.w	r3, r0, r5
   8731c:	fba0 4508 	umull	r4, r5, r0, r8
   87320:	fb08 3801 	mla	r8, r8, r1, r3
   87324:	9b06      	ldr	r3, [sp, #24]
   87326:	4445      	add	r5, r8
   87328:	1b34      	subs	r4, r6, r4
   8732a:	eb67 0505 	sbc.w	r5, r7, r5
   8732e:	e9c3 4500 	strd	r4, r5, [r3]
   87332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87336:	bf00      	nop

00087338 <__aeabi_idiv0>:
   87338:	4770      	bx	lr
   8733a:	bf00      	nop

0008733c <__divdi3>:
   8733c:	2900      	cmp	r1, #0
   8733e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   87342:	461d      	mov	r5, r3
   87344:	f2c0 809d 	blt.w	87482 <__divdi3+0x146>
   87348:	2400      	movs	r4, #0
   8734a:	2d00      	cmp	r5, #0
   8734c:	f2c0 8094 	blt.w	87478 <__divdi3+0x13c>
   87350:	4680      	mov	r8, r0
   87352:	460f      	mov	r7, r1
   87354:	4694      	mov	ip, r2
   87356:	461e      	mov	r6, r3
   87358:	bbe3      	cbnz	r3, 873d4 <__divdi3+0x98>
   8735a:	428a      	cmp	r2, r1
   8735c:	d955      	bls.n	8740a <__divdi3+0xce>
   8735e:	fab2 f782 	clz	r7, r2
   87362:	b147      	cbz	r7, 87376 <__divdi3+0x3a>
   87364:	f1c7 0520 	rsb	r5, r7, #32
   87368:	fa20 f605 	lsr.w	r6, r0, r5
   8736c:	fa01 f107 	lsl.w	r1, r1, r7
   87370:	40ba      	lsls	r2, r7
   87372:	40b8      	lsls	r0, r7
   87374:	4331      	orrs	r1, r6
   87376:	0c17      	lsrs	r7, r2, #16
   87378:	fbb1 f6f7 	udiv	r6, r1, r7
   8737c:	fa1f fc82 	uxth.w	ip, r2
   87380:	fb07 1116 	mls	r1, r7, r6, r1
   87384:	fb0c f506 	mul.w	r5, ip, r6
   87388:	0c03      	lsrs	r3, r0, #16
   8738a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8738e:	429d      	cmp	r5, r3
   87390:	d908      	bls.n	873a4 <__divdi3+0x68>
   87392:	1e71      	subs	r1, r6, #1
   87394:	189b      	adds	r3, r3, r2
   87396:	f080 8113 	bcs.w	875c0 <__divdi3+0x284>
   8739a:	429d      	cmp	r5, r3
   8739c:	f240 8110 	bls.w	875c0 <__divdi3+0x284>
   873a0:	3e02      	subs	r6, #2
   873a2:	189b      	adds	r3, r3, r2
   873a4:	1b59      	subs	r1, r3, r5
   873a6:	fbb1 f5f7 	udiv	r5, r1, r7
   873aa:	fb07 1315 	mls	r3, r7, r5, r1
   873ae:	fb0c fc05 	mul.w	ip, ip, r5
   873b2:	b280      	uxth	r0, r0
   873b4:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
   873b8:	458c      	cmp	ip, r1
   873ba:	d907      	bls.n	873cc <__divdi3+0x90>
   873bc:	1e6b      	subs	r3, r5, #1
   873be:	188a      	adds	r2, r1, r2
   873c0:	f080 8100 	bcs.w	875c4 <__divdi3+0x288>
   873c4:	4594      	cmp	ip, r2
   873c6:	f240 80fd 	bls.w	875c4 <__divdi3+0x288>
   873ca:	3d02      	subs	r5, #2
   873cc:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
   873d0:	2500      	movs	r5, #0
   873d2:	e003      	b.n	873dc <__divdi3+0xa0>
   873d4:	428b      	cmp	r3, r1
   873d6:	d90c      	bls.n	873f2 <__divdi3+0xb6>
   873d8:	2500      	movs	r5, #0
   873da:	4629      	mov	r1, r5
   873dc:	460a      	mov	r2, r1
   873de:	462b      	mov	r3, r5
   873e0:	b114      	cbz	r4, 873e8 <__divdi3+0xac>
   873e2:	4252      	negs	r2, r2
   873e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   873e8:	4610      	mov	r0, r2
   873ea:	4619      	mov	r1, r3
   873ec:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   873f0:	4770      	bx	lr
   873f2:	fab3 f583 	clz	r5, r3
   873f6:	2d00      	cmp	r5, #0
   873f8:	f040 8087 	bne.w	8750a <__divdi3+0x1ce>
   873fc:	428b      	cmp	r3, r1
   873fe:	d301      	bcc.n	87404 <__divdi3+0xc8>
   87400:	4282      	cmp	r2, r0
   87402:	d8ea      	bhi.n	873da <__divdi3+0x9e>
   87404:	2500      	movs	r5, #0
   87406:	2101      	movs	r1, #1
   87408:	e7e8      	b.n	873dc <__divdi3+0xa0>
   8740a:	b912      	cbnz	r2, 87412 <__divdi3+0xd6>
   8740c:	2601      	movs	r6, #1
   8740e:	fbb6 f2f2 	udiv	r2, r6, r2
   87412:	fab2 f682 	clz	r6, r2
   87416:	2e00      	cmp	r6, #0
   87418:	d139      	bne.n	8748e <__divdi3+0x152>
   8741a:	1a8e      	subs	r6, r1, r2
   8741c:	0c13      	lsrs	r3, r2, #16
   8741e:	fa1f fc82 	uxth.w	ip, r2
   87422:	2501      	movs	r5, #1
   87424:	fbb6 f7f3 	udiv	r7, r6, r3
   87428:	fb03 6117 	mls	r1, r3, r7, r6
   8742c:	fb0c f807 	mul.w	r8, ip, r7
   87430:	ea4f 4910 	mov.w	r9, r0, lsr #16
   87434:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
   87438:	45b0      	cmp	r8, r6
   8743a:	d906      	bls.n	8744a <__divdi3+0x10e>
   8743c:	1e79      	subs	r1, r7, #1
   8743e:	18b6      	adds	r6, r6, r2
   87440:	d202      	bcs.n	87448 <__divdi3+0x10c>
   87442:	45b0      	cmp	r8, r6
   87444:	f200 80d3 	bhi.w	875ee <__divdi3+0x2b2>
   87448:	460f      	mov	r7, r1
   8744a:	ebc8 0606 	rsb	r6, r8, r6
   8744e:	fbb6 f1f3 	udiv	r1, r6, r3
   87452:	fb03 6311 	mls	r3, r3, r1, r6
   87456:	fb0c fc01 	mul.w	ip, ip, r1
   8745a:	b280      	uxth	r0, r0
   8745c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   87460:	459c      	cmp	ip, r3
   87462:	d906      	bls.n	87472 <__divdi3+0x136>
   87464:	1e4e      	subs	r6, r1, #1
   87466:	189a      	adds	r2, r3, r2
   87468:	d202      	bcs.n	87470 <__divdi3+0x134>
   8746a:	4594      	cmp	ip, r2
   8746c:	f200 80c2 	bhi.w	875f4 <__divdi3+0x2b8>
   87470:	4631      	mov	r1, r6
   87472:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   87476:	e7b1      	b.n	873dc <__divdi3+0xa0>
   87478:	43e4      	mvns	r4, r4
   8747a:	4252      	negs	r2, r2
   8747c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   87480:	e766      	b.n	87350 <__divdi3+0x14>
   87482:	4240      	negs	r0, r0
   87484:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   87488:	f04f 34ff 	mov.w	r4, #4294967295
   8748c:	e75d      	b.n	8734a <__divdi3+0xe>
   8748e:	40b2      	lsls	r2, r6
   87490:	f1c6 0920 	rsb	r9, r6, #32
   87494:	fa21 f709 	lsr.w	r7, r1, r9
   87498:	fa20 f909 	lsr.w	r9, r0, r9
   8749c:	fa01 f106 	lsl.w	r1, r1, r6
   874a0:	0c13      	lsrs	r3, r2, #16
   874a2:	fbb7 f8f3 	udiv	r8, r7, r3
   874a6:	fa1f fc82 	uxth.w	ip, r2
   874aa:	fb03 7718 	mls	r7, r3, r8, r7
   874ae:	fb0c f508 	mul.w	r5, ip, r8
   874b2:	ea49 0901 	orr.w	r9, r9, r1
   874b6:	ea4f 4119 	mov.w	r1, r9, lsr #16
   874ba:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
   874be:	40b0      	lsls	r0, r6
   874c0:	42bd      	cmp	r5, r7
   874c2:	d90a      	bls.n	874da <__divdi3+0x19e>
   874c4:	18bf      	adds	r7, r7, r2
   874c6:	f108 36ff 	add.w	r6, r8, #4294967295
   874ca:	f080 808e 	bcs.w	875ea <__divdi3+0x2ae>
   874ce:	42bd      	cmp	r5, r7
   874d0:	f240 808b 	bls.w	875ea <__divdi3+0x2ae>
   874d4:	f1a8 0802 	sub.w	r8, r8, #2
   874d8:	18bf      	adds	r7, r7, r2
   874da:	1b79      	subs	r1, r7, r5
   874dc:	fbb1 f5f3 	udiv	r5, r1, r3
   874e0:	fb03 1715 	mls	r7, r3, r5, r1
   874e4:	fb0c f605 	mul.w	r6, ip, r5
   874e8:	fa1f f989 	uxth.w	r9, r9
   874ec:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
   874f0:	428e      	cmp	r6, r1
   874f2:	d906      	bls.n	87502 <__divdi3+0x1c6>
   874f4:	1e6f      	subs	r7, r5, #1
   874f6:	1889      	adds	r1, r1, r2
   874f8:	d271      	bcs.n	875de <__divdi3+0x2a2>
   874fa:	428e      	cmp	r6, r1
   874fc:	d96f      	bls.n	875de <__divdi3+0x2a2>
   874fe:	3d02      	subs	r5, #2
   87500:	1889      	adds	r1, r1, r2
   87502:	1b8e      	subs	r6, r1, r6
   87504:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
   87508:	e78c      	b.n	87424 <__divdi3+0xe8>
   8750a:	f1c5 0120 	rsb	r1, r5, #32
   8750e:	fa22 f301 	lsr.w	r3, r2, r1
   87512:	fa06 f605 	lsl.w	r6, r6, r5
   87516:	fa27 f201 	lsr.w	r2, r7, r1
   8751a:	fa07 f705 	lsl.w	r7, r7, r5
   8751e:	fa20 f101 	lsr.w	r1, r0, r1
   87522:	431e      	orrs	r6, r3
   87524:	ea4f 4916 	mov.w	r9, r6, lsr #16
   87528:	fbb2 f8f9 	udiv	r8, r2, r9
   8752c:	fa1f fa86 	uxth.w	sl, r6
   87530:	fb09 2218 	mls	r2, r9, r8, r2
   87534:	fb0a fb08 	mul.w	fp, sl, r8
   87538:	430f      	orrs	r7, r1
   8753a:	0c3b      	lsrs	r3, r7, #16
   8753c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   87540:	4593      	cmp	fp, r2
   87542:	fa0c fc05 	lsl.w	ip, ip, r5
   87546:	d908      	bls.n	8755a <__divdi3+0x21e>
   87548:	1992      	adds	r2, r2, r6
   8754a:	f108 31ff 	add.w	r1, r8, #4294967295
   8754e:	d24a      	bcs.n	875e6 <__divdi3+0x2aa>
   87550:	4593      	cmp	fp, r2
   87552:	d948      	bls.n	875e6 <__divdi3+0x2aa>
   87554:	f1a8 0802 	sub.w	r8, r8, #2
   87558:	1992      	adds	r2, r2, r6
   8755a:	ebcb 0302 	rsb	r3, fp, r2
   8755e:	fbb3 f1f9 	udiv	r1, r3, r9
   87562:	fb09 3211 	mls	r2, r9, r1, r3
   87566:	fb0a fa01 	mul.w	sl, sl, r1
   8756a:	b2bf      	uxth	r7, r7
   8756c:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
   87570:	459a      	cmp	sl, r3
   87572:	d906      	bls.n	87582 <__divdi3+0x246>
   87574:	1e4a      	subs	r2, r1, #1
   87576:	199b      	adds	r3, r3, r6
   87578:	d233      	bcs.n	875e2 <__divdi3+0x2a6>
   8757a:	459a      	cmp	sl, r3
   8757c:	d931      	bls.n	875e2 <__divdi3+0x2a6>
   8757e:	3902      	subs	r1, #2
   87580:	199b      	adds	r3, r3, r6
   87582:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
   87586:	0c0f      	lsrs	r7, r1, #16
   87588:	fa1f f88c 	uxth.w	r8, ip
   8758c:	fb08 f607 	mul.w	r6, r8, r7
   87590:	b28a      	uxth	r2, r1
   87592:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   87596:	fb08 f802 	mul.w	r8, r8, r2
   8759a:	fb0c 6202 	mla	r2, ip, r2, r6
   8759e:	fb0c fc07 	mul.w	ip, ip, r7
   875a2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   875a6:	4296      	cmp	r6, r2
   875a8:	bf88      	it	hi
   875aa:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
   875ae:	ebca 0303 	rsb	r3, sl, r3
   875b2:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
   875b6:	4563      	cmp	r3, ip
   875b8:	d30e      	bcc.n	875d8 <__divdi3+0x29c>
   875ba:	d005      	beq.n	875c8 <__divdi3+0x28c>
   875bc:	2500      	movs	r5, #0
   875be:	e70d      	b.n	873dc <__divdi3+0xa0>
   875c0:	460e      	mov	r6, r1
   875c2:	e6ef      	b.n	873a4 <__divdi3+0x68>
   875c4:	461d      	mov	r5, r3
   875c6:	e701      	b.n	873cc <__divdi3+0x90>
   875c8:	fa00 f005 	lsl.w	r0, r0, r5
   875cc:	fa1f f888 	uxth.w	r8, r8
   875d0:	eb08 4502 	add.w	r5, r8, r2, lsl #16
   875d4:	42a8      	cmp	r0, r5
   875d6:	d2f1      	bcs.n	875bc <__divdi3+0x280>
   875d8:	3901      	subs	r1, #1
   875da:	2500      	movs	r5, #0
   875dc:	e6fe      	b.n	873dc <__divdi3+0xa0>
   875de:	463d      	mov	r5, r7
   875e0:	e78f      	b.n	87502 <__divdi3+0x1c6>
   875e2:	4611      	mov	r1, r2
   875e4:	e7cd      	b.n	87582 <__divdi3+0x246>
   875e6:	4688      	mov	r8, r1
   875e8:	e7b7      	b.n	8755a <__divdi3+0x21e>
   875ea:	46b0      	mov	r8, r6
   875ec:	e775      	b.n	874da <__divdi3+0x19e>
   875ee:	3f02      	subs	r7, #2
   875f0:	18b6      	adds	r6, r6, r2
   875f2:	e72a      	b.n	8744a <__divdi3+0x10e>
   875f4:	3902      	subs	r1, #2
   875f6:	e73c      	b.n	87472 <__divdi3+0x136>

000875f8 <__udivdi3>:
   875f8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   875fc:	4614      	mov	r4, r2
   875fe:	4605      	mov	r5, r0
   87600:	460e      	mov	r6, r1
   87602:	2b00      	cmp	r3, #0
   87604:	d13d      	bne.n	87682 <__udivdi3+0x8a>
   87606:	428a      	cmp	r2, r1
   87608:	d949      	bls.n	8769e <__udivdi3+0xa6>
   8760a:	fab2 f782 	clz	r7, r2
   8760e:	b147      	cbz	r7, 87622 <__udivdi3+0x2a>
   87610:	f1c7 0120 	rsb	r1, r7, #32
   87614:	fa20 f201 	lsr.w	r2, r0, r1
   87618:	fa06 f607 	lsl.w	r6, r6, r7
   8761c:	40bc      	lsls	r4, r7
   8761e:	40bd      	lsls	r5, r7
   87620:	4316      	orrs	r6, r2
   87622:	0c22      	lsrs	r2, r4, #16
   87624:	fbb6 f0f2 	udiv	r0, r6, r2
   87628:	b2a1      	uxth	r1, r4
   8762a:	fb02 6610 	mls	r6, r2, r0, r6
   8762e:	fb01 f300 	mul.w	r3, r1, r0
   87632:	0c2f      	lsrs	r7, r5, #16
   87634:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   87638:	42b3      	cmp	r3, r6
   8763a:	d908      	bls.n	8764e <__udivdi3+0x56>
   8763c:	1e47      	subs	r7, r0, #1
   8763e:	1936      	adds	r6, r6, r4
   87640:	f080 80fa 	bcs.w	87838 <__udivdi3+0x240>
   87644:	42b3      	cmp	r3, r6
   87646:	f240 80f7 	bls.w	87838 <__udivdi3+0x240>
   8764a:	3802      	subs	r0, #2
   8764c:	1936      	adds	r6, r6, r4
   8764e:	1af6      	subs	r6, r6, r3
   87650:	fbb6 f3f2 	udiv	r3, r6, r2
   87654:	fb02 6213 	mls	r2, r2, r3, r6
   87658:	fb01 f103 	mul.w	r1, r1, r3
   8765c:	b2ad      	uxth	r5, r5
   8765e:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
   87662:	4291      	cmp	r1, r2
   87664:	d907      	bls.n	87676 <__udivdi3+0x7e>
   87666:	1e5e      	subs	r6, r3, #1
   87668:	1912      	adds	r2, r2, r4
   8766a:	f080 80e7 	bcs.w	8783c <__udivdi3+0x244>
   8766e:	4291      	cmp	r1, r2
   87670:	f240 80e4 	bls.w	8783c <__udivdi3+0x244>
   87674:	3b02      	subs	r3, #2
   87676:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   8767a:	2100      	movs	r1, #0
   8767c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   87680:	4770      	bx	lr
   87682:	428b      	cmp	r3, r1
   87684:	d843      	bhi.n	8770e <__udivdi3+0x116>
   87686:	fab3 f483 	clz	r4, r3
   8768a:	2c00      	cmp	r4, #0
   8768c:	d142      	bne.n	87714 <__udivdi3+0x11c>
   8768e:	428b      	cmp	r3, r1
   87690:	d302      	bcc.n	87698 <__udivdi3+0xa0>
   87692:	4282      	cmp	r2, r0
   87694:	f200 80e1 	bhi.w	8785a <__udivdi3+0x262>
   87698:	2100      	movs	r1, #0
   8769a:	2001      	movs	r0, #1
   8769c:	e7ee      	b.n	8767c <__udivdi3+0x84>
   8769e:	b912      	cbnz	r2, 876a6 <__udivdi3+0xae>
   876a0:	2701      	movs	r7, #1
   876a2:	fbb7 f4f2 	udiv	r4, r7, r2
   876a6:	fab4 f284 	clz	r2, r4
   876aa:	2a00      	cmp	r2, #0
   876ac:	f040 8089 	bne.w	877c2 <__udivdi3+0x1ca>
   876b0:	1b0a      	subs	r2, r1, r4
   876b2:	0c23      	lsrs	r3, r4, #16
   876b4:	b2a7      	uxth	r7, r4
   876b6:	2101      	movs	r1, #1
   876b8:	fbb2 f6f3 	udiv	r6, r2, r3
   876bc:	fb03 2216 	mls	r2, r3, r6, r2
   876c0:	fb07 f006 	mul.w	r0, r7, r6
   876c4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   876c8:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   876cc:	4290      	cmp	r0, r2
   876ce:	d907      	bls.n	876e0 <__udivdi3+0xe8>
   876d0:	1912      	adds	r2, r2, r4
   876d2:	f106 3cff 	add.w	ip, r6, #4294967295
   876d6:	d202      	bcs.n	876de <__udivdi3+0xe6>
   876d8:	4290      	cmp	r0, r2
   876da:	f200 80d0 	bhi.w	8787e <__udivdi3+0x286>
   876de:	4666      	mov	r6, ip
   876e0:	1a12      	subs	r2, r2, r0
   876e2:	fbb2 f0f3 	udiv	r0, r2, r3
   876e6:	fb03 2310 	mls	r3, r3, r0, r2
   876ea:	fb07 f700 	mul.w	r7, r7, r0
   876ee:	b2ad      	uxth	r5, r5
   876f0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   876f4:	429f      	cmp	r7, r3
   876f6:	d907      	bls.n	87708 <__udivdi3+0x110>
   876f8:	1e42      	subs	r2, r0, #1
   876fa:	191b      	adds	r3, r3, r4
   876fc:	f080 80a0 	bcs.w	87840 <__udivdi3+0x248>
   87700:	429f      	cmp	r7, r3
   87702:	f240 809d 	bls.w	87840 <__udivdi3+0x248>
   87706:	3802      	subs	r0, #2
   87708:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   8770c:	e7b6      	b.n	8767c <__udivdi3+0x84>
   8770e:	2100      	movs	r1, #0
   87710:	4608      	mov	r0, r1
   87712:	e7b3      	b.n	8767c <__udivdi3+0x84>
   87714:	f1c4 0620 	rsb	r6, r4, #32
   87718:	fa22 f706 	lsr.w	r7, r2, r6
   8771c:	fa03 f304 	lsl.w	r3, r3, r4
   87720:	fa21 f506 	lsr.w	r5, r1, r6
   87724:	fa01 f104 	lsl.w	r1, r1, r4
   87728:	fa20 f606 	lsr.w	r6, r0, r6
   8772c:	433b      	orrs	r3, r7
   8772e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   87732:	fbb5 f7fc 	udiv	r7, r5, ip
   87736:	fa1f f883 	uxth.w	r8, r3
   8773a:	fb0c 5517 	mls	r5, ip, r7, r5
   8773e:	fb08 f907 	mul.w	r9, r8, r7
   87742:	ea46 0a01 	orr.w	sl, r6, r1
   87746:	ea4f 411a 	mov.w	r1, sl, lsr #16
   8774a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   8774e:	45a9      	cmp	r9, r5
   87750:	fa02 f204 	lsl.w	r2, r2, r4
   87754:	d904      	bls.n	87760 <__udivdi3+0x168>
   87756:	1e7e      	subs	r6, r7, #1
   87758:	18ed      	adds	r5, r5, r3
   8775a:	f0c0 8081 	bcc.w	87860 <__udivdi3+0x268>
   8775e:	4637      	mov	r7, r6
   87760:	ebc9 0105 	rsb	r1, r9, r5
   87764:	fbb1 f6fc 	udiv	r6, r1, ip
   87768:	fb0c 1516 	mls	r5, ip, r6, r1
   8776c:	fb08 f806 	mul.w	r8, r8, r6
   87770:	fa1f fa8a 	uxth.w	sl, sl
   87774:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
   87778:	4588      	cmp	r8, r1
   8777a:	d903      	bls.n	87784 <__udivdi3+0x18c>
   8777c:	1e75      	subs	r5, r6, #1
   8777e:	18c9      	adds	r1, r1, r3
   87780:	d374      	bcc.n	8786c <__udivdi3+0x274>
   87782:	462e      	mov	r6, r5
   87784:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   87788:	0c37      	lsrs	r7, r6, #16
   8778a:	fa1f fc82 	uxth.w	ip, r2
   8778e:	fb0c f507 	mul.w	r5, ip, r7
   87792:	0c12      	lsrs	r2, r2, #16
   87794:	b2b3      	uxth	r3, r6
   87796:	fb0c fc03 	mul.w	ip, ip, r3
   8779a:	fb02 5303 	mla	r3, r2, r3, r5
   8779e:	fb02 f207 	mul.w	r2, r2, r7
   877a2:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   877a6:	429d      	cmp	r5, r3
   877a8:	bf88      	it	hi
   877aa:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
   877ae:	ebc8 0101 	rsb	r1, r8, r1
   877b2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   877b6:	4291      	cmp	r1, r2
   877b8:	d34c      	bcc.n	87854 <__udivdi3+0x25c>
   877ba:	d043      	beq.n	87844 <__udivdi3+0x24c>
   877bc:	4630      	mov	r0, r6
   877be:	2100      	movs	r1, #0
   877c0:	e75c      	b.n	8767c <__udivdi3+0x84>
   877c2:	4094      	lsls	r4, r2
   877c4:	f1c2 0520 	rsb	r5, r2, #32
   877c8:	fa21 f605 	lsr.w	r6, r1, r5
   877cc:	fa20 f505 	lsr.w	r5, r0, r5
   877d0:	fa01 f102 	lsl.w	r1, r1, r2
   877d4:	0c23      	lsrs	r3, r4, #16
   877d6:	fbb6 fcf3 	udiv	ip, r6, r3
   877da:	b2a7      	uxth	r7, r4
   877dc:	fb03 661c 	mls	r6, r3, ip, r6
   877e0:	fb07 f80c 	mul.w	r8, r7, ip
   877e4:	4329      	orrs	r1, r5
   877e6:	0c0d      	lsrs	r5, r1, #16
   877e8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   877ec:	45b0      	cmp	r8, r6
   877ee:	fa00 f502 	lsl.w	r5, r0, r2
   877f2:	d908      	bls.n	87806 <__udivdi3+0x20e>
   877f4:	1936      	adds	r6, r6, r4
   877f6:	f10c 30ff 	add.w	r0, ip, #4294967295
   877fa:	d23e      	bcs.n	8787a <__udivdi3+0x282>
   877fc:	45b0      	cmp	r8, r6
   877fe:	d93c      	bls.n	8787a <__udivdi3+0x282>
   87800:	f1ac 0c02 	sub.w	ip, ip, #2
   87804:	1936      	adds	r6, r6, r4
   87806:	ebc8 0206 	rsb	r2, r8, r6
   8780a:	fbb2 f0f3 	udiv	r0, r2, r3
   8780e:	fb03 2610 	mls	r6, r3, r0, r2
   87812:	fb07 f800 	mul.w	r8, r7, r0
   87816:	b289      	uxth	r1, r1
   87818:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   8781c:	4590      	cmp	r8, r2
   8781e:	d906      	bls.n	8782e <__udivdi3+0x236>
   87820:	1e46      	subs	r6, r0, #1
   87822:	1912      	adds	r2, r2, r4
   87824:	d227      	bcs.n	87876 <__udivdi3+0x27e>
   87826:	4590      	cmp	r8, r2
   87828:	d925      	bls.n	87876 <__udivdi3+0x27e>
   8782a:	3802      	subs	r0, #2
   8782c:	1912      	adds	r2, r2, r4
   8782e:	ebc8 0202 	rsb	r2, r8, r2
   87832:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
   87836:	e73f      	b.n	876b8 <__udivdi3+0xc0>
   87838:	4638      	mov	r0, r7
   8783a:	e708      	b.n	8764e <__udivdi3+0x56>
   8783c:	4633      	mov	r3, r6
   8783e:	e71a      	b.n	87676 <__udivdi3+0x7e>
   87840:	4610      	mov	r0, r2
   87842:	e761      	b.n	87708 <__udivdi3+0x110>
   87844:	fa00 f004 	lsl.w	r0, r0, r4
   87848:	fa1f fc8c 	uxth.w	ip, ip
   8784c:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
   87850:	4298      	cmp	r0, r3
   87852:	d2b3      	bcs.n	877bc <__udivdi3+0x1c4>
   87854:	1e70      	subs	r0, r6, #1
   87856:	2100      	movs	r1, #0
   87858:	e710      	b.n	8767c <__udivdi3+0x84>
   8785a:	4621      	mov	r1, r4
   8785c:	4620      	mov	r0, r4
   8785e:	e70d      	b.n	8767c <__udivdi3+0x84>
   87860:	45a9      	cmp	r9, r5
   87862:	f67f af7c 	bls.w	8775e <__udivdi3+0x166>
   87866:	3f02      	subs	r7, #2
   87868:	18ed      	adds	r5, r5, r3
   8786a:	e779      	b.n	87760 <__udivdi3+0x168>
   8786c:	4588      	cmp	r8, r1
   8786e:	d988      	bls.n	87782 <__udivdi3+0x18a>
   87870:	3e02      	subs	r6, #2
   87872:	18c9      	adds	r1, r1, r3
   87874:	e786      	b.n	87784 <__udivdi3+0x18c>
   87876:	4630      	mov	r0, r6
   87878:	e7d9      	b.n	8782e <__udivdi3+0x236>
   8787a:	4684      	mov	ip, r0
   8787c:	e7c3      	b.n	87806 <__udivdi3+0x20e>
   8787e:	3e02      	subs	r6, #2
   87880:	1912      	adds	r2, r2, r4
   87882:	e72d      	b.n	876e0 <__udivdi3+0xe8>
   87884:	6e6f7246 	.word	0x6e6f7246
   87888:	6f632074 	.word	0x6f632074
   8788c:	6f72746e 	.word	0x6f72746e
   87890:	72656c6c 	.word	0x72656c6c
   87894:	00000000 	.word	0x00000000
   87898:	6c756f43 	.word	0x6c756f43
   8789c:	6f6e2064 	.word	0x6f6e2064
   878a0:	72632074 	.word	0x72632074
   878a4:	65746165 	.word	0x65746165
   878a8:	73617420 	.word	0x73617420
   878ac:	7246206b 	.word	0x7246206b
   878b0:	20746e6f 	.word	0x20746e6f
   878b4:	746e6f63 	.word	0x746e6f63
   878b8:	6c6c6f72 	.word	0x6c6c6f72
   878bc:	00007265 	.word	0x00007265
   878c0:	6b636142 	.word	0x6b636142
   878c4:	6e6f6320 	.word	0x6e6f6320
   878c8:	6c6f7274 	.word	0x6c6f7274
   878cc:	0072656c 	.word	0x0072656c
   878d0:	6c756f43 	.word	0x6c756f43
   878d4:	6f6e2064 	.word	0x6f6e2064
   878d8:	72632074 	.word	0x72632074
   878dc:	65746165 	.word	0x65746165
   878e0:	73617420 	.word	0x73617420
   878e4:	6142206b 	.word	0x6142206b
   878e8:	63206b63 	.word	0x63206b63
   878ec:	72746e6f 	.word	0x72746e6f
   878f0:	656c6c6f 	.word	0x656c6c6f
   878f4:	00000072 	.word	0x00000072
   878f8:	6d6d6f43 	.word	0x6d6d6f43
   878fc:	63696e75 	.word	0x63696e75
   87900:	6f697461 	.word	0x6f697461
   87904:	0000006e 	.word	0x0000006e
   87908:	6c756f43 	.word	0x6c756f43
   8790c:	6f6e2064 	.word	0x6f6e2064
   87910:	72632074 	.word	0x72632074
   87914:	65746165 	.word	0x65746165
   87918:	73617420 	.word	0x73617420
   8791c:	6f43206b 	.word	0x6f43206b
   87920:	6e756d6d 	.word	0x6e756d6d
   87924:	74616369 	.word	0x74616369
   87928:	006e6f69 	.word	0x006e6f69
   8792c:	74736574 	.word	0x74736574
   87930:	7365742f 	.word	0x7365742f
   87934:	75645f74 	.word	0x75645f74
   87938:	635f7974 	.word	0x635f7974
   8793c:	656c6379 	.word	0x656c6379
   87940:	0000682e 	.word	0x0000682e
   87944:	74736574 	.word	0x74736574
   87948:	7475645f 	.word	0x7475645f
   8794c:	79635f79 	.word	0x79635f79
   87950:	5f656c63 	.word	0x5f656c63
   87954:	00003633 	.word	0x00003633
   87958:	74736574 	.word	0x74736574
   8795c:	7475645f 	.word	0x7475645f
   87960:	79635f79 	.word	0x79635f79
   87964:	5f656c63 	.word	0x5f656c63
   87968:	00003833 	.word	0x00003833
   8796c:	74736574 	.word	0x74736574
   87970:	7475645f 	.word	0x7475645f
   87974:	79635f79 	.word	0x79635f79
   87978:	5f656c63 	.word	0x5f656c63
   8797c:	00003034 	.word	0x00003034
   87980:	74736574 	.word	0x74736574
   87984:	7475645f 	.word	0x7475645f
   87988:	79635f79 	.word	0x79635f79
   8798c:	5f656c63 	.word	0x5f656c63
   87990:	00000039 	.word	0x00000039
   87994:	74736574 	.word	0x74736574
   87998:	7475645f 	.word	0x7475645f
   8799c:	79635f79 	.word	0x79635f79
   879a0:	5f656c63 	.word	0x5f656c63
   879a4:	31434144 	.word	0x31434144
   879a8:	00000000 	.word	0x00000000
   879ac:	74736574 	.word	0x74736574
   879b0:	6470755f 	.word	0x6470755f
   879b4:	5f657461 	.word	0x5f657461
   879b8:	79747564 	.word	0x79747564
   879bc:	6379635f 	.word	0x6379635f
   879c0:	445f656c 	.word	0x445f656c
   879c4:	00314341 	.word	0x00314341
   879c8:	79747544 	.word	0x79747544
   879cc:	63796320 	.word	0x63796320
   879d0:	4420656c 	.word	0x4420656c
   879d4:	3a314341 	.word	0x3a314341
   879d8:	0a642520 	.word	0x0a642520
   879dc:	0000000d 	.word	0x0000000d
   879e0:	79747544 	.word	0x79747544
   879e4:	63796320 	.word	0x63796320
   879e8:	3320656c 	.word	0x3320656c
   879ec:	25203a36 	.word	0x25203a36
   879f0:	000d0a64 	.word	0x000d0a64
   879f4:	79747544 	.word	0x79747544
   879f8:	63796320 	.word	0x63796320
   879fc:	3320656c 	.word	0x3320656c
   87a00:	25203a38 	.word	0x25203a38
   87a04:	000d0a64 	.word	0x000d0a64
   87a08:	79747544 	.word	0x79747544
   87a0c:	63796320 	.word	0x63796320
   87a10:	3420656c 	.word	0x3420656c
   87a14:	25203a30 	.word	0x25203a30
   87a18:	000d0a64 	.word	0x000d0a64
   87a1c:	79747544 	.word	0x79747544
   87a20:	63796320 	.word	0x63796320
   87a24:	3920656c 	.word	0x3920656c
   87a28:	6425203a 	.word	0x6425203a
   87a2c:	00000d0a 	.word	0x00000d0a
   87a30:	46204441 	.word	0x46204441
   87a34:	544e4f52 	.word	0x544e4f52
   87a38:	46454c5f 	.word	0x46454c5f
   87a3c:	25203a54 	.word	0x25203a54
   87a40:	000d0a64 	.word	0x000d0a64
   87a44:	46204441 	.word	0x46204441
   87a48:	544e4f52 	.word	0x544e4f52
   87a4c:	4749525f 	.word	0x4749525f
   87a50:	203a5448 	.word	0x203a5448
   87a54:	0d0a6425 	.word	0x0d0a6425
   87a58:	00000000 	.word	0x00000000
   87a5c:	42204441 	.word	0x42204441
   87a60:	5f4b4341 	.word	0x5f4b4341
   87a64:	5446454c 	.word	0x5446454c
   87a68:	6425203a 	.word	0x6425203a
   87a6c:	00000d0a 	.word	0x00000d0a
   87a70:	42204441 	.word	0x42204441
   87a74:	5f4b4341 	.word	0x5f4b4341
   87a78:	48474952 	.word	0x48474952
   87a7c:	25203a54 	.word	0x25203a54
   87a80:	000d0a64 	.word	0x000d0a64
   87a84:	6e6f7277 	.word	0x6e6f7277
   87a88:	75642067 	.word	0x75642067
   87a8c:	63207974 	.word	0x63207974
   87a90:	656c6379 	.word	0x656c6379
   87a94:	43414420 	.word	0x43414420
   87a98:	00000031 	.word	0x00000031

00087a9c <UnitySizeMask>:
   87a9c:	000000ff 0000ffff 0000ffff ffffffff     ................
   87aac:	ffffffff ffffffff ffffffff              ............

00087ab8 <UnityStrOk>:
   87ab8:	00004b4f                                OK..

00087abc <UnityStrSpacer>:
   87abc:	0000202e                                . ..

00087ac0 <UnityStrWas>:
   87ac0:	73615720 00000020                        Was ...

00087ac8 <UnityStrFail>:
   87ac8:	4c494146 00000000                       FAIL....

00087ad0 <UnityStrExpected>:
   87ad0:	70784520 65746365 00002064               Expected ..

00087adc <UnityStrBreaker>:
   87adc:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   87aec:	2d2d2d2d 002d2d2d                       -------.

00087af4 <UnityStrResultsFailures>:
   87af4:	69614620 6572756c 00002073               Failures ..

00087b00 <UnityStrResultsIgnored>:
   87b00:	6e674920 6465726f 00000020               Ignored ...

00087b0c <UnityStrResultsTests>:
   87b0c:	73655420 00207374                        Tests .

00087b14 <UnityStrPass>:
   87b14:	53534150 00000000 09097325 25096325     PASS....%s..%c.%
   87b24:	75250975 0d752509 0000000a 454c4449     u.%u.%u.....IDLE
   87b34:	00000000 00000a0d 20726d54 00637653     ........Tmr Svc.
   87b44:	00000001 00000002 00000004 00000008     ................
   87b54:	00000010 00000020 00000040 00000080     .... ...@.......
   87b64:	00000100 00000200 00000400              ............

00087b70 <_global_impure_ptr>:
   87b70:	20070018 20200043                                ... C.

00087b76 <blanks.6678>:
   87b76:	20202020 20202020 20202020 20202020                     

00087b86 <zeroes.6679>:
   87b86:	30303030 30303030 30303030 30303030     0000000000000000
   87b96:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   87ba6:	32313000 36353433 61393837 65646362     .0123456789abcde
   87bb6:	4f500066 00584953 b5f8002e                       f.POSIX...

00087bc0 <_init>:
   87bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87bc2:	bf00      	nop
   87bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   87bc6:	bc08      	pop	{r3}
   87bc8:	469e      	mov	lr, r3
   87bca:	4770      	bx	lr

00087bcc <__init_array_start>:
   87bcc:	00085dfd 	.word	0x00085dfd

00087bd0 <__frame_dummy_init_array_entry>:
   87bd0:	0008016d                                m...

00087bd4 <_fini>:
   87bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87bd6:	bf00      	nop
   87bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   87bda:	bc08      	pop	{r3}
   87bdc:	469e      	mov	lr, r3
   87bde:	4770      	bx	lr

00087be0 <__fini_array_start>:
   87be0:	00080145 	.word	0x00080145
