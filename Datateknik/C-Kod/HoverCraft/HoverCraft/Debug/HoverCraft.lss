
HoverCraft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000186c  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000844  20070000  0008186c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000218  20070844  000820b0  00010844  2**2
                  ALLOC
  3 .stack        00002004  20070a5c  000822c8  00010844  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010844  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001086d  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000a5b9  00000000  00000000  000108c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b5c  00000000  00000000  0001ae81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004474  00000000  00000000  0001c9dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000878  00000000  00000000  00020e51  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007d0  00000000  00000000  000216c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00005c05  00000000  00000000  00021e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ad18  00000000  00000000  00027a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00065ab7  00000000  00000000  000327b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001494  00000000  00000000  00098270  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072a60 	.word	0x20072a60
   80004:	00080c9d 	.word	0x00080c9d
   80008:	00080c99 	.word	0x00080c99
   8000c:	00080c99 	.word	0x00080c99
   80010:	00080c99 	.word	0x00080c99
   80014:	00080c99 	.word	0x00080c99
   80018:	00080c99 	.word	0x00080c99
	...
   8002c:	0008038d 	.word	0x0008038d
   80030:	00080c99 	.word	0x00080c99
   80034:	00000000 	.word	0x00000000
   80038:	000803c5 	.word	0x000803c5
   8003c:	00080401 	.word	0x00080401
   80040:	00080c99 	.word	0x00080c99
   80044:	00080c99 	.word	0x00080c99
   80048:	00080c99 	.word	0x00080c99
   8004c:	00080c99 	.word	0x00080c99
   80050:	00080c99 	.word	0x00080c99
   80054:	00080c99 	.word	0x00080c99
   80058:	00080c99 	.word	0x00080c99
   8005c:	00080c99 	.word	0x00080c99
   80060:	00080c99 	.word	0x00080c99
   80064:	00080c99 	.word	0x00080c99
   80068:	00000000 	.word	0x00000000
   8006c:	00080b09 	.word	0x00080b09
   80070:	00080b1d 	.word	0x00080b1d
   80074:	00080b31 	.word	0x00080b31
   80078:	00080b45 	.word	0x00080b45
	...
   80084:	00080c99 	.word	0x00080c99
   80088:	00080c99 	.word	0x00080c99
   8008c:	00080c99 	.word	0x00080c99
   80090:	00080c99 	.word	0x00080c99
   80094:	00080c99 	.word	0x00080c99
   80098:	00080c99 	.word	0x00080c99
   8009c:	00080c99 	.word	0x00080c99
   800a0:	00080c99 	.word	0x00080c99
   800a4:	00000000 	.word	0x00000000
   800a8:	00080c99 	.word	0x00080c99
   800ac:	00080c99 	.word	0x00080c99
   800b0:	00080c99 	.word	0x00080c99
   800b4:	00080c99 	.word	0x00080c99
   800b8:	00080c99 	.word	0x00080c99
   800bc:	00080c99 	.word	0x00080c99
   800c0:	00080c99 	.word	0x00080c99
   800c4:	00080c99 	.word	0x00080c99
   800c8:	00080c99 	.word	0x00080c99
   800cc:	00080c99 	.word	0x00080c99
   800d0:	00080c99 	.word	0x00080c99
   800d4:	00080c99 	.word	0x00080c99
   800d8:	00080c99 	.word	0x00080c99
   800dc:	00080c99 	.word	0x00080c99
   800e0:	00080c99 	.word	0x00080c99
   800e4:	00080c99 	.word	0x00080c99
   800e8:	00080c99 	.word	0x00080c99
   800ec:	00080c99 	.word	0x00080c99
   800f0:	00080c99 	.word	0x00080c99

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070844 	.word	0x20070844
   80110:	00000000 	.word	0x00000000
   80114:	0008186c 	.word	0x0008186c

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	0008186c 	.word	0x0008186c
   8013c:	20070848 	.word	0x20070848
   80140:	0008186c 	.word	0x0008186c
   80144:	00000000 	.word	0x00000000

00080148 <main>:
#include "Util/analogDigitalConverter.h"
#include "Util/pwmInit.h"
#include "test_runner.h"

int main (void)
{
   80148:	b508      	push	{r3, lr}
	board_init();
   8014a:	4b0a      	ldr	r3, [pc, #40]	; (80174 <main+0x2c>)
   8014c:	4798      	blx	r3
	sysclk_init();
   8014e:	4b0a      	ldr	r3, [pc, #40]	; (80178 <main+0x30>)
   80150:	4798      	blx	r3
	initialize_pwm();
   80152:	4b0a      	ldr	r3, [pc, #40]	; (8017c <main+0x34>)
   80154:	4798      	blx	r3
	//test_funtion();

	
	update_dutyCycle_DAC1(999);		// 999 is the highest duty cycle
   80156:	f240 30e7 	movw	r0, #999	; 0x3e7
   8015a:	4b09      	ldr	r3, [pc, #36]	; (80180 <main+0x38>)
   8015c:	4798      	blx	r3
	update_dutyCycle_36(600);
   8015e:	f44f 7016 	mov.w	r0, #600	; 0x258
   80162:	4b08      	ldr	r3, [pc, #32]	; (80184 <main+0x3c>)
   80164:	4798      	blx	r3
	update_dutyCycle_38(600);
   80166:	f44f 7016 	mov.w	r0, #600	; 0x258
   8016a:	4b07      	ldr	r3, [pc, #28]	; (80188 <main+0x40>)
   8016c:	4798      	blx	r3
	//update_dutyCycle_40(500);
	//update_dutyCycle_9(700);
}
   8016e:	2000      	movs	r0, #0
   80170:	bd08      	pop	{r3, pc}
   80172:	bf00      	nop
   80174:	00080819 	.word	0x00080819
   80178:	000807b5 	.word	0x000807b5
   8017c:	0008018d 	.word	0x0008018d
   80180:	000802f5 	.word	0x000802f5
   80184:	00080311 	.word	0x00080311
   80188:	0008032d 	.word	0x0008032d

0008018c <initialize_pwm>:
static pwm_channel_t pwm_channel_40;			// Instance to the PWM pin 40
static pwm_channel_t pwm_channel_9;				// Instance to the PWM pin 9

/* Function for initialize PWM on pins DAC1, 9, 36, 38 and 40 */
void initialize_pwm(void)
{
   8018c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80190:	b085      	sub	sp, #20
	/* General clock settings for the PWM */
	pmc_enable_periph_clk(ID_PWM);
   80192:	2024      	movs	r0, #36	; 0x24
   80194:	4b47      	ldr	r3, [pc, #284]	; (802b4 <initialize_pwm+0x128>)
   80196:	4798      	blx	r3
	pwm_clock_t clock_setting = {
   80198:	4b47      	ldr	r3, [pc, #284]	; (802b8 <initialize_pwm+0x12c>)
   8019a:	9301      	str	r3, [sp, #4]
   8019c:	2400      	movs	r4, #0
   8019e:	9402      	str	r4, [sp, #8]
   801a0:	4b46      	ldr	r3, [pc, #280]	; (802bc <initialize_pwm+0x130>)
   801a2:	9303      	str	r3, [sp, #12]
		.ul_clka = PWM_FREQUENCY * PWM_RESOLUTION,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_main_hz()
	};
	pwm_init(PWM, &clock_setting);
   801a4:	4d46      	ldr	r5, [pc, #280]	; (802c0 <initialize_pwm+0x134>)
   801a6:	4628      	mov	r0, r5
   801a8:	a901      	add	r1, sp, #4
   801aa:	4b46      	ldr	r3, [pc, #280]	; (802c4 <initialize_pwm+0x138>)
   801ac:	4798      	blx	r3
	
	/* Disables the PWM channels for setup */
	pwm_channel_disable(PWM, PWM_CHANNEL_0);
   801ae:	4628      	mov	r0, r5
   801b0:	4621      	mov	r1, r4
   801b2:	4e45      	ldr	r6, [pc, #276]	; (802c8 <initialize_pwm+0x13c>)
   801b4:	47b0      	blx	r6
	pwm_channel_disable(PWM, PWM_CHANNEL_1);
   801b6:	4628      	mov	r0, r5
   801b8:	2101      	movs	r1, #1
   801ba:	47b0      	blx	r6
	pwm_channel_disable(PWM, PWM_CHANNEL_2);
   801bc:	4628      	mov	r0, r5
   801be:	2102      	movs	r1, #2
   801c0:	47b0      	blx	r6
	pwm_channel_disable(PWM, PWM_CHANNEL_3);
   801c2:	4628      	mov	r0, r5
   801c4:	2103      	movs	r1, #3
   801c6:	47b0      	blx	r6
	pwm_channel_disable(PWM, PWM_CHANNEL_4);
   801c8:	4628      	mov	r0, r5
   801ca:	2104      	movs	r1, #4
   801cc:	47b0      	blx	r6
	
	
	/* DAC1 */
	pwm_channel_DAC1.alignment = PWM_ALIGN_LEFT;
   801ce:	493f      	ldr	r1, [pc, #252]	; (802cc <initialize_pwm+0x140>)
   801d0:	810c      	strh	r4, [r1, #8]
	pwm_channel_DAC1.polarity = PWM_POLARITY;
   801d2:	728c      	strb	r4, [r1, #10]
	pwm_channel_DAC1.ul_prescaler = PWM_CMR_CPRE_CLKA;
   801d4:	f04f 0a0b 	mov.w	sl, #11
   801d8:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_DAC1.ul_period = PWM_RESOLUTION;
   801dc:	f240 39e7 	movw	r9, #999	; 0x3e7
   801e0:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_DAC1.ul_duty = 0;
   801e4:	60cc      	str	r4, [r1, #12]
	pwm_channel_DAC1.channel = PWM_CHANNEL_0;
   801e6:	600c      	str	r4, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_DAC1);
   801e8:	4628      	mov	r0, r5
   801ea:	f8df 8100 	ldr.w	r8, [pc, #256]	; 802ec <initialize_pwm+0x160>
   801ee:	47c0      	blx	r8
	pio_set_peripheral(PWM_PIO_B, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_DAC1);
   801f0:	4837      	ldr	r0, [pc, #220]	; (802d0 <initialize_pwm+0x144>)
   801f2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   801f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   801fa:	4f36      	ldr	r7, [pc, #216]	; (802d4 <initialize_pwm+0x148>)
   801fc:	47b8      	blx	r7
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_0);
   801fe:	4628      	mov	r0, r5
   80200:	4621      	mov	r1, r4
   80202:	4e35      	ldr	r6, [pc, #212]	; (802d8 <initialize_pwm+0x14c>)
   80204:	47b0      	blx	r6
	
	/* Pin 36 */
	pwm_channel_36.alignment = PWM_ALIGN_LEFT;
   80206:	4935      	ldr	r1, [pc, #212]	; (802dc <initialize_pwm+0x150>)
   80208:	810c      	strh	r4, [r1, #8]
	pwm_channel_36.polarity = PWM_POLARITY;
   8020a:	728c      	strb	r4, [r1, #10]
	pwm_channel_36.ul_prescaler = PWM_CMR_CPRE_CLKA;
   8020c:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_36.ul_period = PWM_RESOLUTION;
   80210:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_36.ul_duty = 0;
   80214:	60cc      	str	r4, [r1, #12]
	pwm_channel_36.channel = PWM_CHANNEL_1;
   80216:	2301      	movs	r3, #1
   80218:	600b      	str	r3, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_36);
   8021a:	4628      	mov	r0, r5
   8021c:	47c0      	blx	r8
	pio_set_peripheral(PWM_PIO_C, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_36);
   8021e:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 802f0 <initialize_pwm+0x164>
   80222:	4658      	mov	r0, fp
   80224:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80228:	2210      	movs	r2, #16
   8022a:	47b8      	blx	r7
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_1);
   8022c:	4628      	mov	r0, r5
   8022e:	2101      	movs	r1, #1
   80230:	47b0      	blx	r6
	
	/* Pin 38 */
	pwm_channel_38.alignment = PWM_ALIGN_LEFT;
   80232:	492b      	ldr	r1, [pc, #172]	; (802e0 <initialize_pwm+0x154>)
   80234:	810c      	strh	r4, [r1, #8]
	pwm_channel_38.polarity = PWM_POLARITY;
   80236:	728c      	strb	r4, [r1, #10]
	pwm_channel_38.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80238:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_38.ul_period = PWM_RESOLUTION;
   8023c:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_38.ul_duty = 0;
   80240:	60cc      	str	r4, [r1, #12]
	pwm_channel_38.channel = PWM_CHANNEL_2;
   80242:	2302      	movs	r3, #2
   80244:	600b      	str	r3, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_38);
   80246:	4628      	mov	r0, r5
   80248:	47c0      	blx	r8
	pio_set_peripheral(PWM_PIO_C, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_38);
   8024a:	4658      	mov	r0, fp
   8024c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80250:	2240      	movs	r2, #64	; 0x40
   80252:	47b8      	blx	r7
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_2);
   80254:	4628      	mov	r0, r5
   80256:	2102      	movs	r1, #2
   80258:	47b0      	blx	r6
	
	/* Pin 40 */
	pwm_channel_40.alignment = PWM_ALIGN_LEFT;
   8025a:	4922      	ldr	r1, [pc, #136]	; (802e4 <initialize_pwm+0x158>)
   8025c:	810c      	strh	r4, [r1, #8]
	pwm_channel_40.polarity = PWM_POLARITY;
   8025e:	728c      	strb	r4, [r1, #10]
	pwm_channel_40.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80260:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_40.ul_period = PWM_RESOLUTION;
   80264:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_40.ul_duty = 0;
   80268:	60cc      	str	r4, [r1, #12]
	pwm_channel_40.channel = PWM_CHANNEL_3;
   8026a:	2303      	movs	r3, #3
   8026c:	600b      	str	r3, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_40);
   8026e:	4628      	mov	r0, r5
   80270:	47c0      	blx	r8
	pio_set_peripheral(PWM_PIO_C, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_40);
   80272:	4658      	mov	r0, fp
   80274:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80278:	f44f 7280 	mov.w	r2, #256	; 0x100
   8027c:	47b8      	blx	r7
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_3);
   8027e:	4628      	mov	r0, r5
   80280:	2103      	movs	r1, #3
   80282:	47b0      	blx	r6
	
	/* Pin 9 */
	pwm_channel_9.alignment = PWM_ALIGN_LEFT;
   80284:	4918      	ldr	r1, [pc, #96]	; (802e8 <initialize_pwm+0x15c>)
   80286:	810c      	strh	r4, [r1, #8]
	pwm_channel_9.polarity = PWM_POLARITY;
   80288:	728c      	strb	r4, [r1, #10]
	pwm_channel_9.ul_prescaler = PWM_CMR_CPRE_CLKA;
   8028a:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_9.ul_period = PWM_RESOLUTION;
   8028e:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_9.ul_duty = 0;
   80292:	60cc      	str	r4, [r1, #12]
	pwm_channel_9.channel = PWM_CHANNEL_4;
   80294:	2404      	movs	r4, #4
   80296:	600c      	str	r4, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_9);
   80298:	4628      	mov	r0, r5
   8029a:	47c0      	blx	r8
	pio_set_peripheral(PWM_PIO_C, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_9);
   8029c:	4658      	mov	r0, fp
   8029e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   802a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   802a6:	47b8      	blx	r7
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   802a8:	4628      	mov	r0, r5
   802aa:	4621      	mov	r1, r4
   802ac:	47b0      	blx	r6
}
   802ae:	b005      	add	sp, #20
   802b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   802b4:	00080c41 	.word	0x00080c41
   802b8:	000f3e58 	.word	0x000f3e58
   802bc:	0a037a00 	.word	0x0a037a00
   802c0:	40094000 	.word	0x40094000
   802c4:	00080635 	.word	0x00080635
   802c8:	000807a9 	.word	0x000807a9
   802cc:	20070888 	.word	0x20070888
   802d0:	400e1000 	.word	0x400e1000
   802d4:	00080899 	.word	0x00080899
   802d8:	0008079d 	.word	0x0008079d
   802dc:	200708d8 	.word	0x200708d8
   802e0:	20070900 	.word	0x20070900
   802e4:	200708b0 	.word	0x200708b0
   802e8:	20070860 	.word	0x20070860
   802ec:	00080675 	.word	0x00080675
   802f0:	400e1200 	.word	0x400e1200

000802f4 <update_dutyCycle_DAC1>:

/* Updates the dutycycle of the PWM signal on DAC1 */
void update_dutyCycle_DAC1(uint32_t dutyCycle)
{
   802f4:	b508      	push	{r3, lr}
   802f6:	4602      	mov	r2, r0
	pwm_channel_update_duty(PWM, &pwm_channel_DAC1, dutyCycle);
   802f8:	4802      	ldr	r0, [pc, #8]	; (80304 <update_dutyCycle_DAC1+0x10>)
   802fa:	4903      	ldr	r1, [pc, #12]	; (80308 <update_dutyCycle_DAC1+0x14>)
   802fc:	4b03      	ldr	r3, [pc, #12]	; (8030c <update_dutyCycle_DAC1+0x18>)
   802fe:	4798      	blx	r3
   80300:	bd08      	pop	{r3, pc}
   80302:	bf00      	nop
   80304:	40094000 	.word	0x40094000
   80308:	20070888 	.word	0x20070888
   8030c:	00080779 	.word	0x00080779

00080310 <update_dutyCycle_36>:
}

/* Update the dutycycle of the PWM signal on pin 36 */
void update_dutyCycle_36(uint32_t dutycycle)
{
   80310:	b508      	push	{r3, lr}
   80312:	4602      	mov	r2, r0
	pwm_channel_update_duty(PWM, &pwm_channel_36, dutycycle);
   80314:	4802      	ldr	r0, [pc, #8]	; (80320 <update_dutyCycle_36+0x10>)
   80316:	4903      	ldr	r1, [pc, #12]	; (80324 <update_dutyCycle_36+0x14>)
   80318:	4b03      	ldr	r3, [pc, #12]	; (80328 <update_dutyCycle_36+0x18>)
   8031a:	4798      	blx	r3
   8031c:	bd08      	pop	{r3, pc}
   8031e:	bf00      	nop
   80320:	40094000 	.word	0x40094000
   80324:	200708d8 	.word	0x200708d8
   80328:	00080779 	.word	0x00080779

0008032c <update_dutyCycle_38>:
}

/* Updates the dutycycle of the PMW signal on pin 38 */
void update_dutyCycle_38(uint32_t dutycycle)
{
   8032c:	b508      	push	{r3, lr}
   8032e:	4602      	mov	r2, r0
	pwm_channel_update_duty(PWM, &pwm_channel_38, dutycycle);
   80330:	4802      	ldr	r0, [pc, #8]	; (8033c <update_dutyCycle_38+0x10>)
   80332:	4903      	ldr	r1, [pc, #12]	; (80340 <update_dutyCycle_38+0x14>)
   80334:	4b03      	ldr	r3, [pc, #12]	; (80344 <update_dutyCycle_38+0x18>)
   80336:	4798      	blx	r3
   80338:	bd08      	pop	{r3, pc}
   8033a:	bf00      	nop
   8033c:	40094000 	.word	0x40094000
   80340:	20070900 	.word	0x20070900
   80344:	00080779 	.word	0x00080779

00080348 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80348:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   8034a:	685a      	ldr	r2, [r3, #4]
   8034c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   8034e:	6842      	ldr	r2, [r0, #4]
   80350:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80352:	685a      	ldr	r2, [r3, #4]
   80354:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80356:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80358:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8035a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   8035c:	6803      	ldr	r3, [r0, #0]
   8035e:	3301      	adds	r3, #1
   80360:	6003      	str	r3, [r0, #0]
   80362:	4770      	bx	lr

00080364 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80364:	6843      	ldr	r3, [r0, #4]
   80366:	6882      	ldr	r2, [r0, #8]
   80368:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   8036a:	6883      	ldr	r3, [r0, #8]
   8036c:	6842      	ldr	r2, [r0, #4]
   8036e:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80370:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80372:	685a      	ldr	r2, [r3, #4]
   80374:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80376:	bf04      	itt	eq
   80378:	6882      	ldreq	r2, [r0, #8]
   8037a:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   8037c:	2200      	movs	r2, #0
   8037e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80380:	681a      	ldr	r2, [r3, #0]
   80382:	3a01      	subs	r2, #1
   80384:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80386:	6818      	ldr	r0, [r3, #0]
}
   80388:	4770      	bx	lr
   8038a:	bf00      	nop

0008038c <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   8038c:	4b06      	ldr	r3, [pc, #24]	; (803a8 <pxCurrentTCBConst2>)
   8038e:	6819      	ldr	r1, [r3, #0]
   80390:	6808      	ldr	r0, [r1, #0]
   80392:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80396:	f380 8809 	msr	PSP, r0
   8039a:	f04f 0000 	mov.w	r0, #0
   8039e:	f380 8811 	msr	BASEPRI, r0
   803a2:	f04e 0e0d 	orr.w	lr, lr, #13
   803a6:	4770      	bx	lr

000803a8 <pxCurrentTCBConst2>:
   803a8:	2007099c 	.word	0x2007099c

000803ac <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   803ac:	f3ef 8011 	mrs	r0, BASEPRI
   803b0:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   803b4:	f381 8811 	msr	BASEPRI, r1
   803b8:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   803ba:	2000      	movs	r0, #0

000803bc <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   803bc:	f380 8811 	msr	BASEPRI, r0
   803c0:	4770      	bx	lr
   803c2:	bf00      	nop

000803c4 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   803c4:	f3ef 8009 	mrs	r0, PSP
   803c8:	4b0c      	ldr	r3, [pc, #48]	; (803fc <pxCurrentTCBConst>)
   803ca:	681a      	ldr	r2, [r3, #0]
   803cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   803d0:	6010      	str	r0, [r2, #0]
   803d2:	e92d 4008 	stmdb	sp!, {r3, lr}
   803d6:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   803da:	f380 8811 	msr	BASEPRI, r0
   803de:	f000 f8b5 	bl	8054c <vTaskSwitchContext>
   803e2:	f04f 0000 	mov.w	r0, #0
   803e6:	f380 8811 	msr	BASEPRI, r0
   803ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   803ee:	6819      	ldr	r1, [r3, #0]
   803f0:	6808      	ldr	r0, [r1, #0]
   803f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   803f6:	f380 8809 	msr	PSP, r0
   803fa:	4770      	bx	lr

000803fc <pxCurrentTCBConst>:
   803fc:	2007099c 	.word	0x2007099c

00080400 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80400:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80406:	4b05      	ldr	r3, [pc, #20]	; (8041c <SysTick_Handler+0x1c>)
   80408:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   8040a:	4b05      	ldr	r3, [pc, #20]	; (80420 <SysTick_Handler+0x20>)
   8040c:	4798      	blx	r3
	{
		vTaskIncrementTick();
   8040e:	4b05      	ldr	r3, [pc, #20]	; (80424 <SysTick_Handler+0x24>)
   80410:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80412:	2000      	movs	r0, #0
   80414:	4b04      	ldr	r3, [pc, #16]	; (80428 <SysTick_Handler+0x28>)
   80416:	4798      	blx	r3
   80418:	bd08      	pop	{r3, pc}
   8041a:	bf00      	nop
   8041c:	e000ed04 	.word	0xe000ed04
   80420:	000803ad 	.word	0x000803ad
   80424:	0008042d 	.word	0x0008042d
   80428:	000803bd 	.word	0x000803bd

0008042c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   8042c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80430:	4b3a      	ldr	r3, [pc, #232]	; (8051c <vTaskIncrementTick+0xf0>)
   80432:	681b      	ldr	r3, [r3, #0]
   80434:	2b00      	cmp	r3, #0
   80436:	d16b      	bne.n	80510 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   80438:	4b39      	ldr	r3, [pc, #228]	; (80520 <vTaskIncrementTick+0xf4>)
   8043a:	681a      	ldr	r2, [r3, #0]
   8043c:	3201      	adds	r2, #1
   8043e:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   80440:	681b      	ldr	r3, [r3, #0]
   80442:	bb03      	cbnz	r3, 80486 <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80444:	4b37      	ldr	r3, [pc, #220]	; (80524 <vTaskIncrementTick+0xf8>)
   80446:	681b      	ldr	r3, [r3, #0]
   80448:	681b      	ldr	r3, [r3, #0]
   8044a:	b11b      	cbz	r3, 80454 <vTaskIncrementTick+0x28>
   8044c:	4b36      	ldr	r3, [pc, #216]	; (80528 <vTaskIncrementTick+0xfc>)
   8044e:	4798      	blx	r3
   80450:	bf00      	nop
   80452:	e7fd      	b.n	80450 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   80454:	4b33      	ldr	r3, [pc, #204]	; (80524 <vTaskIncrementTick+0xf8>)
   80456:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   80458:	4a34      	ldr	r2, [pc, #208]	; (8052c <vTaskIncrementTick+0x100>)
   8045a:	6810      	ldr	r0, [r2, #0]
   8045c:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   8045e:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   80460:	4a33      	ldr	r2, [pc, #204]	; (80530 <vTaskIncrementTick+0x104>)
   80462:	6811      	ldr	r1, [r2, #0]
   80464:	3101      	adds	r1, #1
   80466:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   80468:	681b      	ldr	r3, [r3, #0]
   8046a:	681b      	ldr	r3, [r3, #0]
   8046c:	b923      	cbnz	r3, 80478 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   8046e:	f04f 32ff 	mov.w	r2, #4294967295
   80472:	4b30      	ldr	r3, [pc, #192]	; (80534 <vTaskIncrementTick+0x108>)
   80474:	601a      	str	r2, [r3, #0]
   80476:	e006      	b.n	80486 <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   80478:	4b2a      	ldr	r3, [pc, #168]	; (80524 <vTaskIncrementTick+0xf8>)
   8047a:	681b      	ldr	r3, [r3, #0]
   8047c:	68db      	ldr	r3, [r3, #12]
   8047e:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   80480:	685a      	ldr	r2, [r3, #4]
   80482:	4b2c      	ldr	r3, [pc, #176]	; (80534 <vTaskIncrementTick+0x108>)
   80484:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   80486:	4b26      	ldr	r3, [pc, #152]	; (80520 <vTaskIncrementTick+0xf4>)
   80488:	681a      	ldr	r2, [r3, #0]
   8048a:	4b2a      	ldr	r3, [pc, #168]	; (80534 <vTaskIncrementTick+0x108>)
   8048c:	681b      	ldr	r3, [r3, #0]
   8048e:	429a      	cmp	r2, r3
   80490:	d342      	bcc.n	80518 <vTaskIncrementTick+0xec>
   80492:	4b24      	ldr	r3, [pc, #144]	; (80524 <vTaskIncrementTick+0xf8>)
   80494:	681b      	ldr	r3, [r3, #0]
   80496:	681b      	ldr	r3, [r3, #0]
   80498:	b14b      	cbz	r3, 804ae <vTaskIncrementTick+0x82>
   8049a:	4b22      	ldr	r3, [pc, #136]	; (80524 <vTaskIncrementTick+0xf8>)
   8049c:	681b      	ldr	r3, [r3, #0]
   8049e:	68db      	ldr	r3, [r3, #12]
   804a0:	68dc      	ldr	r4, [r3, #12]
   804a2:	6863      	ldr	r3, [r4, #4]
   804a4:	4a1e      	ldr	r2, [pc, #120]	; (80520 <vTaskIncrementTick+0xf4>)
   804a6:	6812      	ldr	r2, [r2, #0]
   804a8:	4293      	cmp	r3, r2
   804aa:	d913      	bls.n	804d4 <vTaskIncrementTick+0xa8>
   804ac:	e00e      	b.n	804cc <vTaskIncrementTick+0xa0>
   804ae:	f04f 32ff 	mov.w	r2, #4294967295
   804b2:	4b20      	ldr	r3, [pc, #128]	; (80534 <vTaskIncrementTick+0x108>)
   804b4:	601a      	str	r2, [r3, #0]
   804b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   804ba:	4b1a      	ldr	r3, [pc, #104]	; (80524 <vTaskIncrementTick+0xf8>)
   804bc:	681b      	ldr	r3, [r3, #0]
   804be:	68db      	ldr	r3, [r3, #12]
   804c0:	68dc      	ldr	r4, [r3, #12]
   804c2:	6863      	ldr	r3, [r4, #4]
   804c4:	4a16      	ldr	r2, [pc, #88]	; (80520 <vTaskIncrementTick+0xf4>)
   804c6:	6812      	ldr	r2, [r2, #0]
   804c8:	4293      	cmp	r3, r2
   804ca:	d907      	bls.n	804dc <vTaskIncrementTick+0xb0>
   804cc:	4a19      	ldr	r2, [pc, #100]	; (80534 <vTaskIncrementTick+0x108>)
   804ce:	6013      	str	r3, [r2, #0]
   804d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   804d4:	4e18      	ldr	r6, [pc, #96]	; (80538 <vTaskIncrementTick+0x10c>)
   804d6:	4f19      	ldr	r7, [pc, #100]	; (8053c <vTaskIncrementTick+0x110>)
   804d8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80548 <vTaskIncrementTick+0x11c>
   804dc:	1d25      	adds	r5, r4, #4
   804de:	4628      	mov	r0, r5
   804e0:	47b0      	blx	r6
   804e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   804e4:	b113      	cbz	r3, 804ec <vTaskIncrementTick+0xc0>
   804e6:	f104 0018 	add.w	r0, r4, #24
   804ea:	47b0      	blx	r6
   804ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   804ee:	683a      	ldr	r2, [r7, #0]
   804f0:	4293      	cmp	r3, r2
   804f2:	bf88      	it	hi
   804f4:	603b      	strhi	r3, [r7, #0]
   804f6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   804fa:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   804fe:	4629      	mov	r1, r5
   80500:	4b0f      	ldr	r3, [pc, #60]	; (80540 <vTaskIncrementTick+0x114>)
   80502:	4798      	blx	r3
   80504:	4b07      	ldr	r3, [pc, #28]	; (80524 <vTaskIncrementTick+0xf8>)
   80506:	681b      	ldr	r3, [r3, #0]
   80508:	681b      	ldr	r3, [r3, #0]
   8050a:	2b00      	cmp	r3, #0
   8050c:	d1d5      	bne.n	804ba <vTaskIncrementTick+0x8e>
   8050e:	e7ce      	b.n	804ae <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
   80510:	4b0c      	ldr	r3, [pc, #48]	; (80544 <vTaskIncrementTick+0x118>)
   80512:	681a      	ldr	r2, [r3, #0]
   80514:	3201      	adds	r2, #1
   80516:	601a      	str	r2, [r3, #0]
   80518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8051c:	20070998 	.word	0x20070998
   80520:	200709a4 	.word	0x200709a4
   80524:	2007092c 	.word	0x2007092c
   80528:	000803ad 	.word	0x000803ad
   8052c:	200709a8 	.word	0x200709a8
   80530:	200709a0 	.word	0x200709a0
   80534:	20070000 	.word	0x20070000
   80538:	00080365 	.word	0x00080365
   8053c:	20070930 	.word	0x20070930
   80540:	00080349 	.word	0x00080349
   80544:	20070928 	.word	0x20070928
   80548:	20070934 	.word	0x20070934

0008054c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   8054c:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   8054e:	4b1d      	ldr	r3, [pc, #116]	; (805c4 <vTaskSwitchContext+0x78>)
   80550:	681b      	ldr	r3, [r3, #0]
   80552:	b95b      	cbnz	r3, 8056c <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   80554:	4b1c      	ldr	r3, [pc, #112]	; (805c8 <vTaskSwitchContext+0x7c>)
   80556:	681b      	ldr	r3, [r3, #0]
   80558:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8055c:	009b      	lsls	r3, r3, #2
   8055e:	4a1b      	ldr	r2, [pc, #108]	; (805cc <vTaskSwitchContext+0x80>)
   80560:	58d3      	ldr	r3, [r2, r3]
   80562:	b9cb      	cbnz	r3, 80598 <vTaskSwitchContext+0x4c>
   80564:	4b18      	ldr	r3, [pc, #96]	; (805c8 <vTaskSwitchContext+0x7c>)
   80566:	681b      	ldr	r3, [r3, #0]
   80568:	b953      	cbnz	r3, 80580 <vTaskSwitchContext+0x34>
   8056a:	e005      	b.n	80578 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   8056c:	2201      	movs	r2, #1
   8056e:	4b18      	ldr	r3, [pc, #96]	; (805d0 <vTaskSwitchContext+0x84>)
   80570:	601a      	str	r2, [r3, #0]
   80572:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   80574:	681a      	ldr	r2, [r3, #0]
   80576:	b92a      	cbnz	r2, 80584 <vTaskSwitchContext+0x38>
   80578:	4b16      	ldr	r3, [pc, #88]	; (805d4 <vTaskSwitchContext+0x88>)
   8057a:	4798      	blx	r3
   8057c:	bf00      	nop
   8057e:	e7fd      	b.n	8057c <vTaskSwitchContext+0x30>
   80580:	4b11      	ldr	r3, [pc, #68]	; (805c8 <vTaskSwitchContext+0x7c>)
   80582:	4912      	ldr	r1, [pc, #72]	; (805cc <vTaskSwitchContext+0x80>)
   80584:	681a      	ldr	r2, [r3, #0]
   80586:	3a01      	subs	r2, #1
   80588:	601a      	str	r2, [r3, #0]
   8058a:	681a      	ldr	r2, [r3, #0]
   8058c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80590:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   80594:	2a00      	cmp	r2, #0
   80596:	d0ed      	beq.n	80574 <vTaskSwitchContext+0x28>
   80598:	4b0b      	ldr	r3, [pc, #44]	; (805c8 <vTaskSwitchContext+0x7c>)
   8059a:	681b      	ldr	r3, [r3, #0]
   8059c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   805a0:	4a0a      	ldr	r2, [pc, #40]	; (805cc <vTaskSwitchContext+0x80>)
   805a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   805a6:	685a      	ldr	r2, [r3, #4]
   805a8:	6852      	ldr	r2, [r2, #4]
   805aa:	605a      	str	r2, [r3, #4]
   805ac:	f103 0108 	add.w	r1, r3, #8
   805b0:	428a      	cmp	r2, r1
   805b2:	bf04      	itt	eq
   805b4:	6852      	ldreq	r2, [r2, #4]
   805b6:	605a      	streq	r2, [r3, #4]
   805b8:	685b      	ldr	r3, [r3, #4]
   805ba:	68da      	ldr	r2, [r3, #12]
   805bc:	4b06      	ldr	r3, [pc, #24]	; (805d8 <vTaskSwitchContext+0x8c>)
   805be:	601a      	str	r2, [r3, #0]
   805c0:	bd08      	pop	{r3, pc}
   805c2:	bf00      	nop
   805c4:	20070998 	.word	0x20070998
   805c8:	20070930 	.word	0x20070930
   805cc:	20070934 	.word	0x20070934
   805d0:	200709ac 	.word	0x200709ac
   805d4:	000803ad 	.word	0x000803ad
   805d8:	2007099c 	.word	0x2007099c

000805dc <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   805dc:	b4f0      	push	{r4, r5, r6, r7}
   805de:	b08c      	sub	sp, #48	; 0x30
   805e0:	4607      	mov	r7, r0
   805e2:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   805e4:	ac01      	add	r4, sp, #4
   805e6:	4d12      	ldr	r5, [pc, #72]	; (80630 <pwm_clocks_generate+0x54>)
   805e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   805ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   805ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   805ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   805f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   805f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   805f8:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   805fa:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   805fc:	f852 4f04 	ldr.w	r4, [r2, #4]!
   80600:	fbb6 f4f4 	udiv	r4, r6, r4
   80604:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   80608:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   8060c:	d903      	bls.n	80616 <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   8060e:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   80610:	2b0b      	cmp	r3, #11
   80612:	d1f3      	bne.n	805fc <pwm_clocks_generate+0x20>
   80614:	e004      	b.n	80620 <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   80616:	2b0a      	cmp	r3, #10
   80618:	d805      	bhi.n	80626 <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   8061a:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   8061e:	e004      	b.n	8062a <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   80620:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80624:	e001      	b.n	8062a <pwm_clocks_generate+0x4e>
   80626:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   8062a:	b00c      	add	sp, #48	; 0x30
   8062c:	bcf0      	pop	{r4, r5, r6, r7}
   8062e:	4770      	bx	lr
   80630:	00081814 	.word	0x00081814

00080634 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80634:	b570      	push	{r4, r5, r6, lr}
   80636:	4606      	mov	r6, r0
   80638:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   8063a:	6808      	ldr	r0, [r1, #0]
   8063c:	b140      	cbz	r0, 80650 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   8063e:	6889      	ldr	r1, [r1, #8]
   80640:	4b0b      	ldr	r3, [pc, #44]	; (80670 <pwm_init+0x3c>)
   80642:	4798      	blx	r3
   80644:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   80646:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8064a:	4298      	cmp	r0, r3
   8064c:	d101      	bne.n	80652 <pwm_init+0x1e>
   8064e:	e00e      	b.n	8066e <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   80650:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80652:	6860      	ldr	r0, [r4, #4]
   80654:	b140      	cbz	r0, 80668 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   80656:	68a1      	ldr	r1, [r4, #8]
   80658:	4b05      	ldr	r3, [pc, #20]	; (80670 <pwm_init+0x3c>)
   8065a:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   8065c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80660:	4298      	cmp	r0, r3
   80662:	d004      	beq.n	8066e <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   80664:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80668:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   8066a:	2000      	movs	r0, #0
   8066c:	bd70      	pop	{r4, r5, r6, pc}
}
   8066e:	bd70      	pop	{r4, r5, r6, pc}
   80670:	000805dd 	.word	0x000805dd

00080674 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80674:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   80676:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80678:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8067a:	684a      	ldr	r2, [r1, #4]
   8067c:	f002 020f 	and.w	r2, r2, #15
   80680:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   80682:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80684:	432c      	orrs	r4, r5
   80686:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   80688:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   8068c:	7d8a      	ldrb	r2, [r1, #22]
   8068e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   80692:	7dca      	ldrb	r2, [r1, #23]
   80694:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   80698:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8069a:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   8069e:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   806a2:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   806a6:	68cc      	ldr	r4, [r1, #12]
   806a8:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   806ac:	690c      	ldr	r4, [r1, #16]
   806ae:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   806b2:	7d8a      	ldrb	r2, [r1, #22]
   806b4:	b13a      	cbz	r2, 806c6 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   806b6:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   806b8:	8b4a      	ldrh	r2, [r1, #26]
   806ba:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   806be:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   806c2:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   806c6:	6c85      	ldr	r5, [r0, #72]	; 0x48
   806c8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   806cc:	409a      	lsls	r2, r3
   806ce:	43d2      	mvns	r2, r2
   806d0:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   806d2:	7fce      	ldrb	r6, [r1, #31]
   806d4:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   806d6:	7f8c      	ldrb	r4, [r1, #30]
   806d8:	409c      	lsls	r4, r3
   806da:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   806de:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   806e0:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   806e2:	6c44      	ldr	r4, [r0, #68]	; 0x44
   806e4:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   806e6:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   806ea:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   806ec:	f891 4020 	ldrb.w	r4, [r1, #32]
   806f0:	409c      	lsls	r4, r3
   806f2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   806f6:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   806f8:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   806fa:	2201      	movs	r2, #1
   806fc:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   806fe:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   80702:	b11c      	cbz	r4, 8070c <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   80704:	6a04      	ldr	r4, [r0, #32]
   80706:	4314      	orrs	r4, r2
   80708:	6204      	str	r4, [r0, #32]
   8070a:	e003      	b.n	80714 <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   8070c:	6a04      	ldr	r4, [r0, #32]
   8070e:	ea24 0402 	bic.w	r4, r4, r2
   80712:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80714:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   80718:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   8071a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8071c:	bf0c      	ite	eq
   8071e:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   80720:	4394      	bicne	r4, r2
   80722:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   80724:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   80728:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   8072a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8072c:	bf0c      	ite	eq
   8072e:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80732:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   80736:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   80738:	2b03      	cmp	r3, #3
   8073a:	d80c      	bhi.n	80756 <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   8073c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   8073e:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   80740:	22ff      	movs	r2, #255	; 0xff
   80742:	409a      	lsls	r2, r3
   80744:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80748:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   8074c:	fa01 f303 	lsl.w	r3, r1, r3
   80750:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   80752:	66c3      	str	r3, [r0, #108]	; 0x6c
   80754:	e00c      	b.n	80770 <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   80756:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   80758:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   8075a:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   8075c:	22ff      	movs	r2, #255	; 0xff
   8075e:	409a      	lsls	r2, r3
   80760:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80764:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80768:	fa01 f303 	lsl.w	r3, r1, r3
   8076c:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   8076e:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   80770:	2000      	movs	r0, #0
   80772:	bc70      	pop	{r4, r5, r6}
   80774:	4770      	bx	lr
   80776:	bf00      	nop

00080778 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   80778:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   8077a:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   8077c:	690b      	ldr	r3, [r1, #16]
   8077e:	4293      	cmp	r3, r2
   80780:	d306      	bcc.n	80790 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   80782:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   80784:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   80788:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   8078c:	2000      	movs	r0, #0
   8078e:	e001      	b.n	80794 <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   80790:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   80794:	f85d 4b04 	ldr.w	r4, [sp], #4
   80798:	4770      	bx	lr
   8079a:	bf00      	nop

0008079c <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   8079c:	2301      	movs	r3, #1
   8079e:	fa03 f101 	lsl.w	r1, r3, r1
   807a2:	6041      	str	r1, [r0, #4]
   807a4:	4770      	bx	lr
   807a6:	bf00      	nop

000807a8 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   807a8:	2301      	movs	r3, #1
   807aa:	fa03 f101 	lsl.w	r1, r3, r1
   807ae:	6081      	str	r1, [r0, #8]
   807b0:	4770      	bx	lr
   807b2:	bf00      	nop

000807b4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   807b4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   807b6:	480e      	ldr	r0, [pc, #56]	; (807f0 <sysclk_init+0x3c>)
   807b8:	4b0e      	ldr	r3, [pc, #56]	; (807f4 <sysclk_init+0x40>)
   807ba:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   807bc:	2000      	movs	r0, #0
   807be:	213e      	movs	r1, #62	; 0x3e
   807c0:	4b0d      	ldr	r3, [pc, #52]	; (807f8 <sysclk_init+0x44>)
   807c2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   807c4:	4c0d      	ldr	r4, [pc, #52]	; (807fc <sysclk_init+0x48>)
   807c6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   807c8:	2800      	cmp	r0, #0
   807ca:	d0fc      	beq.n	807c6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   807cc:	4b0c      	ldr	r3, [pc, #48]	; (80800 <sysclk_init+0x4c>)
   807ce:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   807d0:	4a0c      	ldr	r2, [pc, #48]	; (80804 <sysclk_init+0x50>)
   807d2:	4b0d      	ldr	r3, [pc, #52]	; (80808 <sysclk_init+0x54>)
   807d4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   807d6:	4c0d      	ldr	r4, [pc, #52]	; (8080c <sysclk_init+0x58>)
   807d8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   807da:	2800      	cmp	r0, #0
   807dc:	d0fc      	beq.n	807d8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   807de:	2010      	movs	r0, #16
   807e0:	4b0b      	ldr	r3, [pc, #44]	; (80810 <sysclk_init+0x5c>)
   807e2:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   807e4:	4b0b      	ldr	r3, [pc, #44]	; (80814 <sysclk_init+0x60>)
   807e6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   807e8:	4801      	ldr	r0, [pc, #4]	; (807f0 <sysclk_init+0x3c>)
   807ea:	4b02      	ldr	r3, [pc, #8]	; (807f4 <sysclk_init+0x40>)
   807ec:	4798      	blx	r3
   807ee:	bd10      	pop	{r4, pc}
   807f0:	0501bd00 	.word	0x0501bd00
   807f4:	00080e69 	.word	0x00080e69
   807f8:	00080bbd 	.word	0x00080bbd
   807fc:	00080c11 	.word	0x00080c11
   80800:	00080c21 	.word	0x00080c21
   80804:	200d3f01 	.word	0x200d3f01
   80808:	400e0600 	.word	0x400e0600
   8080c:	00080c31 	.word	0x00080c31
   80810:	00080b59 	.word	0x00080b59
   80814:	00080d4d 	.word	0x00080d4d

00080818 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80818:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8081a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8081e:	4b17      	ldr	r3, [pc, #92]	; (8087c <board_init+0x64>)
   80820:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80822:	200b      	movs	r0, #11
   80824:	4c16      	ldr	r4, [pc, #88]	; (80880 <board_init+0x68>)
   80826:	47a0      	blx	r4
   80828:	200c      	movs	r0, #12
   8082a:	47a0      	blx	r4
   8082c:	200d      	movs	r0, #13
   8082e:	47a0      	blx	r4
   80830:	200e      	movs	r0, #14
   80832:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80834:	203b      	movs	r0, #59	; 0x3b
   80836:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8083a:	4c12      	ldr	r4, [pc, #72]	; (80884 <board_init+0x6c>)
   8083c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8083e:	2055      	movs	r0, #85	; 0x55
   80840:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80844:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80846:	2056      	movs	r0, #86	; 0x56
   80848:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8084c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8084e:	2068      	movs	r0, #104	; 0x68
   80850:	490d      	ldr	r1, [pc, #52]	; (80888 <board_init+0x70>)
   80852:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80854:	205c      	movs	r0, #92	; 0x5c
   80856:	490d      	ldr	r1, [pc, #52]	; (8088c <board_init+0x74>)
   80858:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8085a:	480d      	ldr	r0, [pc, #52]	; (80890 <board_init+0x78>)
   8085c:	f44f 7140 	mov.w	r1, #768	; 0x300
   80860:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80864:	4b0b      	ldr	r3, [pc, #44]	; (80894 <board_init+0x7c>)
   80866:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80868:	202b      	movs	r0, #43	; 0x2b
   8086a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8086e:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80870:	202a      	movs	r0, #42	; 0x2a
   80872:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80876:	47a0      	blx	r4
   80878:	bd10      	pop	{r4, pc}
   8087a:	bf00      	nop
   8087c:	400e1a50 	.word	0x400e1a50
   80880:	00080c41 	.word	0x00080c41
   80884:	0008093d 	.word	0x0008093d
   80888:	28000079 	.word	0x28000079
   8088c:	28000001 	.word	0x28000001
   80890:	400e0e00 	.word	0x400e0e00
   80894:	00080a11 	.word	0x00080a11

00080898 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80898:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8089a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8089e:	d016      	beq.n	808ce <pio_set_peripheral+0x36>
   808a0:	d804      	bhi.n	808ac <pio_set_peripheral+0x14>
   808a2:	b1c1      	cbz	r1, 808d6 <pio_set_peripheral+0x3e>
   808a4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   808a8:	d00a      	beq.n	808c0 <pio_set_peripheral+0x28>
   808aa:	e013      	b.n	808d4 <pio_set_peripheral+0x3c>
   808ac:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   808b0:	d011      	beq.n	808d6 <pio_set_peripheral+0x3e>
   808b2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   808b6:	d00e      	beq.n	808d6 <pio_set_peripheral+0x3e>
   808b8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   808bc:	d10a      	bne.n	808d4 <pio_set_peripheral+0x3c>
   808be:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   808c0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   808c2:	6f01      	ldr	r1, [r0, #112]	; 0x70
   808c4:	400b      	ands	r3, r1
   808c6:	ea23 0302 	bic.w	r3, r3, r2
   808ca:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   808cc:	e002      	b.n	808d4 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   808ce:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   808d0:	4313      	orrs	r3, r2
   808d2:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   808d4:	6042      	str	r2, [r0, #4]
   808d6:	4770      	bx	lr

000808d8 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   808d8:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   808da:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   808de:	bf14      	ite	ne
   808e0:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   808e2:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   808e4:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   808e8:	bf14      	ite	ne
   808ea:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   808ec:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   808ee:	f012 0f02 	tst.w	r2, #2
   808f2:	d002      	beq.n	808fa <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   808f4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   808f8:	e004      	b.n	80904 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   808fa:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   808fe:	bf18      	it	ne
   80900:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80904:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80906:	6001      	str	r1, [r0, #0]
   80908:	4770      	bx	lr
   8090a:	bf00      	nop

0008090c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8090c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8090e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80910:	9c01      	ldr	r4, [sp, #4]
   80912:	b10c      	cbz	r4, 80918 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80914:	6641      	str	r1, [r0, #100]	; 0x64
   80916:	e000      	b.n	8091a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80918:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8091a:	b10b      	cbz	r3, 80920 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   8091c:	6501      	str	r1, [r0, #80]	; 0x50
   8091e:	e000      	b.n	80922 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80920:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80922:	b10a      	cbz	r2, 80928 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80924:	6301      	str	r1, [r0, #48]	; 0x30
   80926:	e000      	b.n	8092a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80928:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8092a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8092c:	6001      	str	r1, [r0, #0]
}
   8092e:	f85d 4b04 	ldr.w	r4, [sp], #4
   80932:	4770      	bx	lr

00080934 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80934:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80936:	4770      	bx	lr

00080938 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80938:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8093a:	4770      	bx	lr

0008093c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8093c:	b570      	push	{r4, r5, r6, lr}
   8093e:	b082      	sub	sp, #8
   80940:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80942:	0944      	lsrs	r4, r0, #5
   80944:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80948:	f204 7407 	addw	r4, r4, #1799	; 0x707
   8094c:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8094e:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80952:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80956:	d030      	beq.n	809ba <pio_configure_pin+0x7e>
   80958:	d806      	bhi.n	80968 <pio_configure_pin+0x2c>
   8095a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8095e:	d00a      	beq.n	80976 <pio_configure_pin+0x3a>
   80960:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80964:	d018      	beq.n	80998 <pio_configure_pin+0x5c>
   80966:	e049      	b.n	809fc <pio_configure_pin+0xc0>
   80968:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   8096c:	d030      	beq.n	809d0 <pio_configure_pin+0x94>
   8096e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80972:	d02d      	beq.n	809d0 <pio_configure_pin+0x94>
   80974:	e042      	b.n	809fc <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80976:	f000 001f 	and.w	r0, r0, #31
   8097a:	2401      	movs	r4, #1
   8097c:	4084      	lsls	r4, r0
   8097e:	4630      	mov	r0, r6
   80980:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80984:	4622      	mov	r2, r4
   80986:	4b1f      	ldr	r3, [pc, #124]	; (80a04 <pio_configure_pin+0xc8>)
   80988:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8098a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8098e:	bf14      	ite	ne
   80990:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80992:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80994:	2001      	movs	r0, #1
   80996:	e032      	b.n	809fe <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80998:	f000 001f 	and.w	r0, r0, #31
   8099c:	2401      	movs	r4, #1
   8099e:	4084      	lsls	r4, r0
   809a0:	4630      	mov	r0, r6
   809a2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   809a6:	4622      	mov	r2, r4
   809a8:	4b16      	ldr	r3, [pc, #88]	; (80a04 <pio_configure_pin+0xc8>)
   809aa:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   809ac:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   809b0:	bf14      	ite	ne
   809b2:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   809b4:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   809b6:	2001      	movs	r0, #1
   809b8:	e021      	b.n	809fe <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   809ba:	f000 011f 	and.w	r1, r0, #31
   809be:	2401      	movs	r4, #1
   809c0:	4630      	mov	r0, r6
   809c2:	fa04 f101 	lsl.w	r1, r4, r1
   809c6:	462a      	mov	r2, r5
   809c8:	4b0f      	ldr	r3, [pc, #60]	; (80a08 <pio_configure_pin+0xcc>)
   809ca:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   809cc:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   809ce:	e016      	b.n	809fe <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   809d0:	f000 011f 	and.w	r1, r0, #31
   809d4:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   809d6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   809da:	ea05 0304 	and.w	r3, r5, r4
   809de:	9300      	str	r3, [sp, #0]
   809e0:	4630      	mov	r0, r6
   809e2:	fa04 f101 	lsl.w	r1, r4, r1
   809e6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   809ea:	bf14      	ite	ne
   809ec:	2200      	movne	r2, #0
   809ee:	2201      	moveq	r2, #1
   809f0:	f3c5 0380 	ubfx	r3, r5, #2, #1
   809f4:	4d05      	ldr	r5, [pc, #20]	; (80a0c <pio_configure_pin+0xd0>)
   809f6:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   809f8:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   809fa:	e000      	b.n	809fe <pio_configure_pin+0xc2>

	default:
		return 0;
   809fc:	2000      	movs	r0, #0
	}

	return 1;
}
   809fe:	b002      	add	sp, #8
   80a00:	bd70      	pop	{r4, r5, r6, pc}
   80a02:	bf00      	nop
   80a04:	00080899 	.word	0x00080899
   80a08:	000808d9 	.word	0x000808d9
   80a0c:	0008090d 	.word	0x0008090d

00080a10 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80a10:	b5f0      	push	{r4, r5, r6, r7, lr}
   80a12:	b083      	sub	sp, #12
   80a14:	4607      	mov	r7, r0
   80a16:	460e      	mov	r6, r1
   80a18:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80a1a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80a1e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80a22:	d026      	beq.n	80a72 <pio_configure_pin_group+0x62>
   80a24:	d806      	bhi.n	80a34 <pio_configure_pin_group+0x24>
   80a26:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80a2a:	d00a      	beq.n	80a42 <pio_configure_pin_group+0x32>
   80a2c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80a30:	d013      	beq.n	80a5a <pio_configure_pin_group+0x4a>
   80a32:	e034      	b.n	80a9e <pio_configure_pin_group+0x8e>
   80a34:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80a38:	d01f      	beq.n	80a7a <pio_configure_pin_group+0x6a>
   80a3a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80a3e:	d01c      	beq.n	80a7a <pio_configure_pin_group+0x6a>
   80a40:	e02d      	b.n	80a9e <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80a42:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a46:	4632      	mov	r2, r6
   80a48:	4b16      	ldr	r3, [pc, #88]	; (80aa4 <pio_configure_pin_group+0x94>)
   80a4a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a4c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a50:	bf14      	ite	ne
   80a52:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a54:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80a56:	2001      	movs	r0, #1
   80a58:	e022      	b.n	80aa0 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80a5a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80a5e:	4632      	mov	r2, r6
   80a60:	4b10      	ldr	r3, [pc, #64]	; (80aa4 <pio_configure_pin_group+0x94>)
   80a62:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a64:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a68:	bf14      	ite	ne
   80a6a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a6c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80a6e:	2001      	movs	r0, #1
   80a70:	e016      	b.n	80aa0 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80a72:	4b0d      	ldr	r3, [pc, #52]	; (80aa8 <pio_configure_pin_group+0x98>)
   80a74:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a76:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80a78:	e012      	b.n	80aa0 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80a7a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80a7e:	f005 0301 	and.w	r3, r5, #1
   80a82:	9300      	str	r3, [sp, #0]
   80a84:	4638      	mov	r0, r7
   80a86:	4631      	mov	r1, r6
   80a88:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80a8c:	bf14      	ite	ne
   80a8e:	2200      	movne	r2, #0
   80a90:	2201      	moveq	r2, #1
   80a92:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80a96:	4c05      	ldr	r4, [pc, #20]	; (80aac <pio_configure_pin_group+0x9c>)
   80a98:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80a9a:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80a9c:	e000      	b.n	80aa0 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80a9e:	2000      	movs	r0, #0
	}

	return 1;
}
   80aa0:	b003      	add	sp, #12
   80aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80aa4:	00080899 	.word	0x00080899
   80aa8:	000808d9 	.word	0x000808d9
   80aac:	0008090d 	.word	0x0008090d

00080ab0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80ab4:	4604      	mov	r4, r0
   80ab6:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80ab8:	4b10      	ldr	r3, [pc, #64]	; (80afc <pio_handler_process+0x4c>)
   80aba:	4798      	blx	r3
   80abc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80abe:	4620      	mov	r0, r4
   80ac0:	4b0f      	ldr	r3, [pc, #60]	; (80b00 <pio_handler_process+0x50>)
   80ac2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80ac4:	4005      	ands	r5, r0
   80ac6:	d017      	beq.n	80af8 <pio_handler_process+0x48>
   80ac8:	4f0e      	ldr	r7, [pc, #56]	; (80b04 <pio_handler_process+0x54>)
   80aca:	f107 040c 	add.w	r4, r7, #12
   80ace:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80ad0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80ad4:	42b3      	cmp	r3, r6
   80ad6:	d10a      	bne.n	80aee <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80ad8:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80adc:	4229      	tst	r1, r5
   80ade:	d006      	beq.n	80aee <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80ae0:	6823      	ldr	r3, [r4, #0]
   80ae2:	4630      	mov	r0, r6
   80ae4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80ae6:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80aea:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80aee:	42bc      	cmp	r4, r7
   80af0:	d002      	beq.n	80af8 <pio_handler_process+0x48>
   80af2:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80af4:	2d00      	cmp	r5, #0
   80af6:	d1eb      	bne.n	80ad0 <pio_handler_process+0x20>
   80af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80afc:	00080935 	.word	0x00080935
   80b00:	00080939 	.word	0x00080939
   80b04:	200709b0 	.word	0x200709b0

00080b08 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80b08:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80b0a:	4802      	ldr	r0, [pc, #8]	; (80b14 <PIOA_Handler+0xc>)
   80b0c:	210b      	movs	r1, #11
   80b0e:	4b02      	ldr	r3, [pc, #8]	; (80b18 <PIOA_Handler+0x10>)
   80b10:	4798      	blx	r3
   80b12:	bd08      	pop	{r3, pc}
   80b14:	400e0e00 	.word	0x400e0e00
   80b18:	00080ab1 	.word	0x00080ab1

00080b1c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80b1c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80b1e:	4802      	ldr	r0, [pc, #8]	; (80b28 <PIOB_Handler+0xc>)
   80b20:	210c      	movs	r1, #12
   80b22:	4b02      	ldr	r3, [pc, #8]	; (80b2c <PIOB_Handler+0x10>)
   80b24:	4798      	blx	r3
   80b26:	bd08      	pop	{r3, pc}
   80b28:	400e1000 	.word	0x400e1000
   80b2c:	00080ab1 	.word	0x00080ab1

00080b30 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80b30:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80b32:	4802      	ldr	r0, [pc, #8]	; (80b3c <PIOC_Handler+0xc>)
   80b34:	210d      	movs	r1, #13
   80b36:	4b02      	ldr	r3, [pc, #8]	; (80b40 <PIOC_Handler+0x10>)
   80b38:	4798      	blx	r3
   80b3a:	bd08      	pop	{r3, pc}
   80b3c:	400e1200 	.word	0x400e1200
   80b40:	00080ab1 	.word	0x00080ab1

00080b44 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80b44:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80b46:	4802      	ldr	r0, [pc, #8]	; (80b50 <PIOD_Handler+0xc>)
   80b48:	210e      	movs	r1, #14
   80b4a:	4b02      	ldr	r3, [pc, #8]	; (80b54 <PIOD_Handler+0x10>)
   80b4c:	4798      	blx	r3
   80b4e:	bd08      	pop	{r3, pc}
   80b50:	400e1400 	.word	0x400e1400
   80b54:	00080ab1 	.word	0x00080ab1

00080b58 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80b58:	4b17      	ldr	r3, [pc, #92]	; (80bb8 <pmc_switch_mck_to_pllack+0x60>)
   80b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80b5c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   80b60:	4310      	orrs	r0, r2
   80b62:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80b66:	f013 0f08 	tst.w	r3, #8
   80b6a:	d109      	bne.n	80b80 <pmc_switch_mck_to_pllack+0x28>
   80b6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b70:	4911      	ldr	r1, [pc, #68]	; (80bb8 <pmc_switch_mck_to_pllack+0x60>)
   80b72:	e001      	b.n	80b78 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80b74:	3b01      	subs	r3, #1
   80b76:	d019      	beq.n	80bac <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b78:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80b7a:	f012 0f08 	tst.w	r2, #8
   80b7e:	d0f9      	beq.n	80b74 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80b80:	4b0d      	ldr	r3, [pc, #52]	; (80bb8 <pmc_switch_mck_to_pllack+0x60>)
   80b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80b84:	f022 0203 	bic.w	r2, r2, #3
   80b88:	f042 0202 	orr.w	r2, r2, #2
   80b8c:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b8e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80b90:	f010 0008 	ands.w	r0, r0, #8
   80b94:	d10c      	bne.n	80bb0 <pmc_switch_mck_to_pllack+0x58>
   80b96:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b9a:	4907      	ldr	r1, [pc, #28]	; (80bb8 <pmc_switch_mck_to_pllack+0x60>)
   80b9c:	e001      	b.n	80ba2 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80b9e:	3b01      	subs	r3, #1
   80ba0:	d008      	beq.n	80bb4 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80ba2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80ba4:	f012 0f08 	tst.w	r2, #8
   80ba8:	d0f9      	beq.n	80b9e <pmc_switch_mck_to_pllack+0x46>
   80baa:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80bac:	2001      	movs	r0, #1
   80bae:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80bb0:	2000      	movs	r0, #0
   80bb2:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80bb4:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80bb6:	4770      	bx	lr
   80bb8:	400e0600 	.word	0x400e0600

00080bbc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80bbc:	b138      	cbz	r0, 80bce <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80bbe:	4911      	ldr	r1, [pc, #68]	; (80c04 <pmc_switch_mainck_to_xtal+0x48>)
   80bc0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80bc2:	4a11      	ldr	r2, [pc, #68]	; (80c08 <pmc_switch_mainck_to_xtal+0x4c>)
   80bc4:	401a      	ands	r2, r3
   80bc6:	4b11      	ldr	r3, [pc, #68]	; (80c0c <pmc_switch_mainck_to_xtal+0x50>)
   80bc8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80bca:	620b      	str	r3, [r1, #32]
   80bcc:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80bce:	4a0d      	ldr	r2, [pc, #52]	; (80c04 <pmc_switch_mainck_to_xtal+0x48>)
   80bd0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80bd2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80bd6:	f023 0303 	bic.w	r3, r3, #3
   80bda:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80bde:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80be2:	0209      	lsls	r1, r1, #8
   80be4:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80be6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80be8:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80bea:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80bec:	f013 0f01 	tst.w	r3, #1
   80bf0:	d0fb      	beq.n	80bea <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80bf2:	4a04      	ldr	r2, [pc, #16]	; (80c04 <pmc_switch_mainck_to_xtal+0x48>)
   80bf4:	6a13      	ldr	r3, [r2, #32]
   80bf6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80bfe:	6213      	str	r3, [r2, #32]
   80c00:	4770      	bx	lr
   80c02:	bf00      	nop
   80c04:	400e0600 	.word	0x400e0600
   80c08:	fec8fffc 	.word	0xfec8fffc
   80c0c:	01370002 	.word	0x01370002

00080c10 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80c10:	4b02      	ldr	r3, [pc, #8]	; (80c1c <pmc_osc_is_ready_mainck+0xc>)
   80c12:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80c14:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80c18:	4770      	bx	lr
   80c1a:	bf00      	nop
   80c1c:	400e0600 	.word	0x400e0600

00080c20 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80c20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80c24:	4b01      	ldr	r3, [pc, #4]	; (80c2c <pmc_disable_pllack+0xc>)
   80c26:	629a      	str	r2, [r3, #40]	; 0x28
   80c28:	4770      	bx	lr
   80c2a:	bf00      	nop
   80c2c:	400e0600 	.word	0x400e0600

00080c30 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80c30:	4b02      	ldr	r3, [pc, #8]	; (80c3c <pmc_is_locked_pllack+0xc>)
   80c32:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80c34:	f000 0002 	and.w	r0, r0, #2
   80c38:	4770      	bx	lr
   80c3a:	bf00      	nop
   80c3c:	400e0600 	.word	0x400e0600

00080c40 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80c40:	282c      	cmp	r0, #44	; 0x2c
   80c42:	d820      	bhi.n	80c86 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80c44:	281f      	cmp	r0, #31
   80c46:	d80d      	bhi.n	80c64 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80c48:	4b12      	ldr	r3, [pc, #72]	; (80c94 <pmc_enable_periph_clk+0x54>)
   80c4a:	699a      	ldr	r2, [r3, #24]
   80c4c:	2301      	movs	r3, #1
   80c4e:	4083      	lsls	r3, r0
   80c50:	401a      	ands	r2, r3
   80c52:	4293      	cmp	r3, r2
   80c54:	d019      	beq.n	80c8a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80c56:	2301      	movs	r3, #1
   80c58:	fa03 f000 	lsl.w	r0, r3, r0
   80c5c:	4b0d      	ldr	r3, [pc, #52]	; (80c94 <pmc_enable_periph_clk+0x54>)
   80c5e:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80c60:	2000      	movs	r0, #0
   80c62:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c64:	4b0b      	ldr	r3, [pc, #44]	; (80c94 <pmc_enable_periph_clk+0x54>)
   80c66:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
   80c6a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c6c:	2301      	movs	r3, #1
   80c6e:	4083      	lsls	r3, r0
   80c70:	401a      	ands	r2, r3
   80c72:	4293      	cmp	r3, r2
   80c74:	d00b      	beq.n	80c8e <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80c76:	2301      	movs	r3, #1
   80c78:	fa03 f000 	lsl.w	r0, r3, r0
   80c7c:	4b05      	ldr	r3, [pc, #20]	; (80c94 <pmc_enable_periph_clk+0x54>)
   80c7e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80c82:	2000      	movs	r0, #0
   80c84:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80c86:	2001      	movs	r0, #1
   80c88:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80c8a:	2000      	movs	r0, #0
   80c8c:	4770      	bx	lr
   80c8e:	2000      	movs	r0, #0
}
   80c90:	4770      	bx	lr
   80c92:	bf00      	nop
   80c94:	400e0600 	.word	0x400e0600

00080c98 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80c98:	e7fe      	b.n	80c98 <Dummy_Handler>
   80c9a:	bf00      	nop

00080c9c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80c9c:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80c9e:	4b1e      	ldr	r3, [pc, #120]	; (80d18 <Reset_Handler+0x7c>)
   80ca0:	4a1e      	ldr	r2, [pc, #120]	; (80d1c <Reset_Handler+0x80>)
   80ca2:	429a      	cmp	r2, r3
   80ca4:	d003      	beq.n	80cae <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80ca6:	4b1e      	ldr	r3, [pc, #120]	; (80d20 <Reset_Handler+0x84>)
   80ca8:	4a1b      	ldr	r2, [pc, #108]	; (80d18 <Reset_Handler+0x7c>)
   80caa:	429a      	cmp	r2, r3
   80cac:	d304      	bcc.n	80cb8 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80cae:	4b1d      	ldr	r3, [pc, #116]	; (80d24 <Reset_Handler+0x88>)
   80cb0:	4a1d      	ldr	r2, [pc, #116]	; (80d28 <Reset_Handler+0x8c>)
   80cb2:	429a      	cmp	r2, r3
   80cb4:	d30f      	bcc.n	80cd6 <Reset_Handler+0x3a>
   80cb6:	e01a      	b.n	80cee <Reset_Handler+0x52>
   80cb8:	4b1c      	ldr	r3, [pc, #112]	; (80d2c <Reset_Handler+0x90>)
   80cba:	4c1d      	ldr	r4, [pc, #116]	; (80d30 <Reset_Handler+0x94>)
   80cbc:	1ae4      	subs	r4, r4, r3
   80cbe:	f024 0403 	bic.w	r4, r4, #3
   80cc2:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80cc4:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80cc6:	4814      	ldr	r0, [pc, #80]	; (80d18 <Reset_Handler+0x7c>)
   80cc8:	4914      	ldr	r1, [pc, #80]	; (80d1c <Reset_Handler+0x80>)
   80cca:	585a      	ldr	r2, [r3, r1]
   80ccc:	501a      	str	r2, [r3, r0]
   80cce:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80cd0:	42a3      	cmp	r3, r4
   80cd2:	d1fa      	bne.n	80cca <Reset_Handler+0x2e>
   80cd4:	e7eb      	b.n	80cae <Reset_Handler+0x12>
   80cd6:	4b17      	ldr	r3, [pc, #92]	; (80d34 <Reset_Handler+0x98>)
   80cd8:	4917      	ldr	r1, [pc, #92]	; (80d38 <Reset_Handler+0x9c>)
   80cda:	1ac9      	subs	r1, r1, r3
   80cdc:	f021 0103 	bic.w	r1, r1, #3
   80ce0:	1d1a      	adds	r2, r3, #4
   80ce2:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80ce4:	2200      	movs	r2, #0
   80ce6:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80cea:	428b      	cmp	r3, r1
   80cec:	d1fb      	bne.n	80ce6 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80cee:	4a13      	ldr	r2, [pc, #76]	; (80d3c <Reset_Handler+0xa0>)
   80cf0:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80cf4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80cf8:	4911      	ldr	r1, [pc, #68]	; (80d40 <Reset_Handler+0xa4>)
   80cfa:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80cfc:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80d00:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80d04:	d203      	bcs.n	80d0e <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80d06:	688a      	ldr	r2, [r1, #8]
   80d08:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80d0c:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80d0e:	4b0d      	ldr	r3, [pc, #52]	; (80d44 <Reset_Handler+0xa8>)
   80d10:	4798      	blx	r3

	/* Branch to main function */
	main();
   80d12:	4b0d      	ldr	r3, [pc, #52]	; (80d48 <Reset_Handler+0xac>)
   80d14:	4798      	blx	r3
   80d16:	e7fe      	b.n	80d16 <Reset_Handler+0x7a>
   80d18:	20070000 	.word	0x20070000
   80d1c:	0008186c 	.word	0x0008186c
   80d20:	20070844 	.word	0x20070844
   80d24:	20070a5c 	.word	0x20070a5c
   80d28:	20070844 	.word	0x20070844
   80d2c:	20070004 	.word	0x20070004
   80d30:	20070847 	.word	0x20070847
   80d34:	20070840 	.word	0x20070840
   80d38:	20070a57 	.word	0x20070a57
   80d3c:	00080000 	.word	0x00080000
   80d40:	e000ed00 	.word	0xe000ed00
   80d44:	00080f25 	.word	0x00080f25
   80d48:	00080149 	.word	0x00080149

00080d4c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80d4c:	4b3e      	ldr	r3, [pc, #248]	; (80e48 <SystemCoreClockUpdate+0xfc>)
   80d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80d50:	f003 0303 	and.w	r3, r3, #3
   80d54:	2b03      	cmp	r3, #3
   80d56:	d85f      	bhi.n	80e18 <SystemCoreClockUpdate+0xcc>
   80d58:	e8df f003 	tbb	[pc, r3]
   80d5c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80d60:	4b3a      	ldr	r3, [pc, #232]	; (80e4c <SystemCoreClockUpdate+0x100>)
   80d62:	695b      	ldr	r3, [r3, #20]
   80d64:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80d68:	bf14      	ite	ne
   80d6a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80d6e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80d72:	4b37      	ldr	r3, [pc, #220]	; (80e50 <SystemCoreClockUpdate+0x104>)
   80d74:	601a      	str	r2, [r3, #0]
   80d76:	e04f      	b.n	80e18 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80d78:	4b33      	ldr	r3, [pc, #204]	; (80e48 <SystemCoreClockUpdate+0xfc>)
   80d7a:	6a1b      	ldr	r3, [r3, #32]
   80d7c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80d80:	d003      	beq.n	80d8a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80d82:	4a34      	ldr	r2, [pc, #208]	; (80e54 <SystemCoreClockUpdate+0x108>)
   80d84:	4b32      	ldr	r3, [pc, #200]	; (80e50 <SystemCoreClockUpdate+0x104>)
   80d86:	601a      	str	r2, [r3, #0]
   80d88:	e046      	b.n	80e18 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80d8a:	4a33      	ldr	r2, [pc, #204]	; (80e58 <SystemCoreClockUpdate+0x10c>)
   80d8c:	4b30      	ldr	r3, [pc, #192]	; (80e50 <SystemCoreClockUpdate+0x104>)
   80d8e:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80d90:	4b2d      	ldr	r3, [pc, #180]	; (80e48 <SystemCoreClockUpdate+0xfc>)
   80d92:	6a1b      	ldr	r3, [r3, #32]
   80d94:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80d98:	2b10      	cmp	r3, #16
   80d9a:	d002      	beq.n	80da2 <SystemCoreClockUpdate+0x56>
   80d9c:	2b20      	cmp	r3, #32
   80d9e:	d004      	beq.n	80daa <SystemCoreClockUpdate+0x5e>
   80da0:	e03a      	b.n	80e18 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80da2:	4a2e      	ldr	r2, [pc, #184]	; (80e5c <SystemCoreClockUpdate+0x110>)
   80da4:	4b2a      	ldr	r3, [pc, #168]	; (80e50 <SystemCoreClockUpdate+0x104>)
   80da6:	601a      	str	r2, [r3, #0]
				break;
   80da8:	e036      	b.n	80e18 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80daa:	4a2a      	ldr	r2, [pc, #168]	; (80e54 <SystemCoreClockUpdate+0x108>)
   80dac:	4b28      	ldr	r3, [pc, #160]	; (80e50 <SystemCoreClockUpdate+0x104>)
   80dae:	601a      	str	r2, [r3, #0]
				break;
   80db0:	e032      	b.n	80e18 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80db2:	4b25      	ldr	r3, [pc, #148]	; (80e48 <SystemCoreClockUpdate+0xfc>)
   80db4:	6a1b      	ldr	r3, [r3, #32]
   80db6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80dba:	d003      	beq.n	80dc4 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80dbc:	4a25      	ldr	r2, [pc, #148]	; (80e54 <SystemCoreClockUpdate+0x108>)
   80dbe:	4b24      	ldr	r3, [pc, #144]	; (80e50 <SystemCoreClockUpdate+0x104>)
   80dc0:	601a      	str	r2, [r3, #0]
   80dc2:	e012      	b.n	80dea <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80dc4:	4a24      	ldr	r2, [pc, #144]	; (80e58 <SystemCoreClockUpdate+0x10c>)
   80dc6:	4b22      	ldr	r3, [pc, #136]	; (80e50 <SystemCoreClockUpdate+0x104>)
   80dc8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80dca:	4b1f      	ldr	r3, [pc, #124]	; (80e48 <SystemCoreClockUpdate+0xfc>)
   80dcc:	6a1b      	ldr	r3, [r3, #32]
   80dce:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80dd2:	2b10      	cmp	r3, #16
   80dd4:	d002      	beq.n	80ddc <SystemCoreClockUpdate+0x90>
   80dd6:	2b20      	cmp	r3, #32
   80dd8:	d004      	beq.n	80de4 <SystemCoreClockUpdate+0x98>
   80dda:	e006      	b.n	80dea <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80ddc:	4a1f      	ldr	r2, [pc, #124]	; (80e5c <SystemCoreClockUpdate+0x110>)
   80dde:	4b1c      	ldr	r3, [pc, #112]	; (80e50 <SystemCoreClockUpdate+0x104>)
   80de0:	601a      	str	r2, [r3, #0]
				break;
   80de2:	e002      	b.n	80dea <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80de4:	4a1b      	ldr	r2, [pc, #108]	; (80e54 <SystemCoreClockUpdate+0x108>)
   80de6:	4b1a      	ldr	r3, [pc, #104]	; (80e50 <SystemCoreClockUpdate+0x104>)
   80de8:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80dea:	4b17      	ldr	r3, [pc, #92]	; (80e48 <SystemCoreClockUpdate+0xfc>)
   80dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80dee:	f003 0303 	and.w	r3, r3, #3
   80df2:	2b02      	cmp	r3, #2
   80df4:	d10d      	bne.n	80e12 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80df6:	4b14      	ldr	r3, [pc, #80]	; (80e48 <SystemCoreClockUpdate+0xfc>)
   80df8:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80dfa:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80dfc:	4b14      	ldr	r3, [pc, #80]	; (80e50 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80dfe:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80e02:	681a      	ldr	r2, [r3, #0]
   80e04:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80e08:	b2c9      	uxtb	r1, r1
   80e0a:	fbb2 f2f1 	udiv	r2, r2, r1
   80e0e:	601a      	str	r2, [r3, #0]
   80e10:	e002      	b.n	80e18 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80e12:	4a13      	ldr	r2, [pc, #76]	; (80e60 <SystemCoreClockUpdate+0x114>)
   80e14:	4b0e      	ldr	r3, [pc, #56]	; (80e50 <SystemCoreClockUpdate+0x104>)
   80e16:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80e18:	4b0b      	ldr	r3, [pc, #44]	; (80e48 <SystemCoreClockUpdate+0xfc>)
   80e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80e1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80e20:	2b70      	cmp	r3, #112	; 0x70
   80e22:	d107      	bne.n	80e34 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80e24:	4b0a      	ldr	r3, [pc, #40]	; (80e50 <SystemCoreClockUpdate+0x104>)
   80e26:	681a      	ldr	r2, [r3, #0]
   80e28:	490e      	ldr	r1, [pc, #56]	; (80e64 <SystemCoreClockUpdate+0x118>)
   80e2a:	fba1 0202 	umull	r0, r2, r1, r2
   80e2e:	0852      	lsrs	r2, r2, #1
   80e30:	601a      	str	r2, [r3, #0]
   80e32:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80e34:	4b04      	ldr	r3, [pc, #16]	; (80e48 <SystemCoreClockUpdate+0xfc>)
   80e36:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80e38:	4b05      	ldr	r3, [pc, #20]	; (80e50 <SystemCoreClockUpdate+0x104>)
   80e3a:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80e3e:	681a      	ldr	r2, [r3, #0]
   80e40:	40ca      	lsrs	r2, r1
   80e42:	601a      	str	r2, [r3, #0]
   80e44:	4770      	bx	lr
   80e46:	bf00      	nop
   80e48:	400e0600 	.word	0x400e0600
   80e4c:	400e1a10 	.word	0x400e1a10
   80e50:	20070004 	.word	0x20070004
   80e54:	00b71b00 	.word	0x00b71b00
   80e58:	003d0900 	.word	0x003d0900
   80e5c:	007a1200 	.word	0x007a1200
   80e60:	0e4e1c00 	.word	0x0e4e1c00
   80e64:	aaaaaaab 	.word	0xaaaaaaab

00080e68 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   80e68:	4b1b      	ldr	r3, [pc, #108]	; (80ed8 <system_init_flash+0x70>)
   80e6a:	4298      	cmp	r0, r3
   80e6c:	d806      	bhi.n	80e7c <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   80e6e:	2300      	movs	r3, #0
   80e70:	4a1a      	ldr	r2, [pc, #104]	; (80edc <system_init_flash+0x74>)
   80e72:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   80e74:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80e78:	6013      	str	r3, [r2, #0]
   80e7a:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   80e7c:	4b18      	ldr	r3, [pc, #96]	; (80ee0 <system_init_flash+0x78>)
   80e7e:	4298      	cmp	r0, r3
   80e80:	d807      	bhi.n	80e92 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   80e82:	f44f 7380 	mov.w	r3, #256	; 0x100
   80e86:	4a15      	ldr	r2, [pc, #84]	; (80edc <system_init_flash+0x74>)
   80e88:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   80e8a:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80e8e:	6013      	str	r3, [r2, #0]
   80e90:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   80e92:	4b14      	ldr	r3, [pc, #80]	; (80ee4 <system_init_flash+0x7c>)
   80e94:	4298      	cmp	r0, r3
   80e96:	d807      	bhi.n	80ea8 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   80e98:	f44f 7300 	mov.w	r3, #512	; 0x200
   80e9c:	4a0f      	ldr	r2, [pc, #60]	; (80edc <system_init_flash+0x74>)
   80e9e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   80ea0:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80ea4:	6013      	str	r3, [r2, #0]
   80ea6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   80ea8:	4b0f      	ldr	r3, [pc, #60]	; (80ee8 <system_init_flash+0x80>)
   80eaa:	4298      	cmp	r0, r3
   80eac:	d807      	bhi.n	80ebe <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   80eae:	f44f 7340 	mov.w	r3, #768	; 0x300
   80eb2:	4a0a      	ldr	r2, [pc, #40]	; (80edc <system_init_flash+0x74>)
   80eb4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   80eb6:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80eba:	6013      	str	r3, [r2, #0]
   80ebc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   80ebe:	4b0b      	ldr	r3, [pc, #44]	; (80eec <system_init_flash+0x84>)
   80ec0:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80ec2:	bf94      	ite	ls
   80ec4:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   80ec8:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
   80ecc:	4a03      	ldr	r2, [pc, #12]	; (80edc <system_init_flash+0x74>)
   80ece:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   80ed0:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80ed4:	6013      	str	r3, [r2, #0]
   80ed6:	4770      	bx	lr
   80ed8:	0121eabf 	.word	0x0121eabf
   80edc:	400e0a00 	.word	0x400e0a00
   80ee0:	02faf07f 	.word	0x02faf07f
   80ee4:	03d08fff 	.word	0x03d08fff
   80ee8:	04c4b3ff 	.word	0x04c4b3ff
   80eec:	055d4a7f 	.word	0x055d4a7f

00080ef0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80ef0:	4b09      	ldr	r3, [pc, #36]	; (80f18 <_sbrk+0x28>)
   80ef2:	681b      	ldr	r3, [r3, #0]
   80ef4:	b913      	cbnz	r3, 80efc <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80ef6:	4a09      	ldr	r2, [pc, #36]	; (80f1c <_sbrk+0x2c>)
   80ef8:	4b07      	ldr	r3, [pc, #28]	; (80f18 <_sbrk+0x28>)
   80efa:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80efc:	4b06      	ldr	r3, [pc, #24]	; (80f18 <_sbrk+0x28>)
   80efe:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80f00:	181a      	adds	r2, r3, r0
   80f02:	4907      	ldr	r1, [pc, #28]	; (80f20 <_sbrk+0x30>)
   80f04:	4291      	cmp	r1, r2
   80f06:	db04      	blt.n	80f12 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80f08:	4610      	mov	r0, r2
   80f0a:	4a03      	ldr	r2, [pc, #12]	; (80f18 <_sbrk+0x28>)
   80f0c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80f0e:	4618      	mov	r0, r3
   80f10:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80f12:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80f16:	4770      	bx	lr
   80f18:	20070a20 	.word	0x20070a20
   80f1c:	20072a60 	.word	0x20072a60
   80f20:	20087ffc 	.word	0x20087ffc

00080f24 <__libc_init_array>:
   80f24:	b570      	push	{r4, r5, r6, lr}
   80f26:	4e0f      	ldr	r6, [pc, #60]	; (80f64 <__libc_init_array+0x40>)
   80f28:	4d0f      	ldr	r5, [pc, #60]	; (80f68 <__libc_init_array+0x44>)
   80f2a:	1b76      	subs	r6, r6, r5
   80f2c:	10b6      	asrs	r6, r6, #2
   80f2e:	d007      	beq.n	80f40 <__libc_init_array+0x1c>
   80f30:	3d04      	subs	r5, #4
   80f32:	2400      	movs	r4, #0
   80f34:	3401      	adds	r4, #1
   80f36:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80f3a:	4798      	blx	r3
   80f3c:	42a6      	cmp	r6, r4
   80f3e:	d1f9      	bne.n	80f34 <__libc_init_array+0x10>
   80f40:	4e0a      	ldr	r6, [pc, #40]	; (80f6c <__libc_init_array+0x48>)
   80f42:	4d0b      	ldr	r5, [pc, #44]	; (80f70 <__libc_init_array+0x4c>)
   80f44:	f000 fc80 	bl	81848 <_init>
   80f48:	1b76      	subs	r6, r6, r5
   80f4a:	10b6      	asrs	r6, r6, #2
   80f4c:	d008      	beq.n	80f60 <__libc_init_array+0x3c>
   80f4e:	3d04      	subs	r5, #4
   80f50:	2400      	movs	r4, #0
   80f52:	3401      	adds	r4, #1
   80f54:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80f58:	4798      	blx	r3
   80f5a:	42a6      	cmp	r6, r4
   80f5c:	d1f9      	bne.n	80f52 <__libc_init_array+0x2e>
   80f5e:	bd70      	pop	{r4, r5, r6, pc}
   80f60:	bd70      	pop	{r4, r5, r6, pc}
   80f62:	bf00      	nop
   80f64:	00081854 	.word	0x00081854
   80f68:	00081854 	.word	0x00081854
   80f6c:	0008185c 	.word	0x0008185c
   80f70:	00081854 	.word	0x00081854

00080f74 <register_fini>:
   80f74:	4b02      	ldr	r3, [pc, #8]	; (80f80 <register_fini+0xc>)
   80f76:	b113      	cbz	r3, 80f7e <register_fini+0xa>
   80f78:	4802      	ldr	r0, [pc, #8]	; (80f84 <register_fini+0x10>)
   80f7a:	f000 b805 	b.w	80f88 <atexit>
   80f7e:	4770      	bx	lr
   80f80:	00000000 	.word	0x00000000
   80f84:	00080f95 	.word	0x00080f95

00080f88 <atexit>:
   80f88:	4601      	mov	r1, r0
   80f8a:	2000      	movs	r0, #0
   80f8c:	4602      	mov	r2, r0
   80f8e:	4603      	mov	r3, r0
   80f90:	f000 bbec 	b.w	8176c <__register_exitproc>

00080f94 <__libc_fini_array>:
   80f94:	b538      	push	{r3, r4, r5, lr}
   80f96:	4d09      	ldr	r5, [pc, #36]	; (80fbc <__libc_fini_array+0x28>)
   80f98:	4c09      	ldr	r4, [pc, #36]	; (80fc0 <__libc_fini_array+0x2c>)
   80f9a:	1b64      	subs	r4, r4, r5
   80f9c:	10a4      	asrs	r4, r4, #2
   80f9e:	bf18      	it	ne
   80fa0:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   80fa4:	d005      	beq.n	80fb2 <__libc_fini_array+0x1e>
   80fa6:	3c01      	subs	r4, #1
   80fa8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   80fac:	4798      	blx	r3
   80fae:	2c00      	cmp	r4, #0
   80fb0:	d1f9      	bne.n	80fa6 <__libc_fini_array+0x12>
   80fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80fb6:	f000 bc51 	b.w	8185c <_fini>
   80fba:	bf00      	nop
   80fbc:	00081868 	.word	0x00081868
   80fc0:	0008186c 	.word	0x0008186c

00080fc4 <_malloc_trim_r>:
   80fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80fc6:	4d23      	ldr	r5, [pc, #140]	; (81054 <_malloc_trim_r+0x90>)
   80fc8:	460f      	mov	r7, r1
   80fca:	4604      	mov	r4, r0
   80fcc:	f000 fbb8 	bl	81740 <__malloc_lock>
   80fd0:	68ab      	ldr	r3, [r5, #8]
   80fd2:	685e      	ldr	r6, [r3, #4]
   80fd4:	f026 0603 	bic.w	r6, r6, #3
   80fd8:	1bf1      	subs	r1, r6, r7
   80fda:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   80fde:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   80fe2:	f021 010f 	bic.w	r1, r1, #15
   80fe6:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   80fea:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   80fee:	db07      	blt.n	81000 <_malloc_trim_r+0x3c>
   80ff0:	4620      	mov	r0, r4
   80ff2:	2100      	movs	r1, #0
   80ff4:	f000 fba8 	bl	81748 <_sbrk_r>
   80ff8:	68ab      	ldr	r3, [r5, #8]
   80ffa:	4433      	add	r3, r6
   80ffc:	4298      	cmp	r0, r3
   80ffe:	d004      	beq.n	8100a <_malloc_trim_r+0x46>
   81000:	4620      	mov	r0, r4
   81002:	f000 fb9f 	bl	81744 <__malloc_unlock>
   81006:	2000      	movs	r0, #0
   81008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8100a:	4620      	mov	r0, r4
   8100c:	4279      	negs	r1, r7
   8100e:	f000 fb9b 	bl	81748 <_sbrk_r>
   81012:	3001      	adds	r0, #1
   81014:	d00d      	beq.n	81032 <_malloc_trim_r+0x6e>
   81016:	4b10      	ldr	r3, [pc, #64]	; (81058 <_malloc_trim_r+0x94>)
   81018:	68aa      	ldr	r2, [r5, #8]
   8101a:	6819      	ldr	r1, [r3, #0]
   8101c:	1bf6      	subs	r6, r6, r7
   8101e:	f046 0601 	orr.w	r6, r6, #1
   81022:	4620      	mov	r0, r4
   81024:	1bc9      	subs	r1, r1, r7
   81026:	6056      	str	r6, [r2, #4]
   81028:	6019      	str	r1, [r3, #0]
   8102a:	f000 fb8b 	bl	81744 <__malloc_unlock>
   8102e:	2001      	movs	r0, #1
   81030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81032:	4620      	mov	r0, r4
   81034:	2100      	movs	r1, #0
   81036:	f000 fb87 	bl	81748 <_sbrk_r>
   8103a:	68ab      	ldr	r3, [r5, #8]
   8103c:	1ac2      	subs	r2, r0, r3
   8103e:	2a0f      	cmp	r2, #15
   81040:	ddde      	ble.n	81000 <_malloc_trim_r+0x3c>
   81042:	4d06      	ldr	r5, [pc, #24]	; (8105c <_malloc_trim_r+0x98>)
   81044:	4904      	ldr	r1, [pc, #16]	; (81058 <_malloc_trim_r+0x94>)
   81046:	682d      	ldr	r5, [r5, #0]
   81048:	f042 0201 	orr.w	r2, r2, #1
   8104c:	1b40      	subs	r0, r0, r5
   8104e:	605a      	str	r2, [r3, #4]
   81050:	6008      	str	r0, [r1, #0]
   81052:	e7d5      	b.n	81000 <_malloc_trim_r+0x3c>
   81054:	20070434 	.word	0x20070434
   81058:	20070a30 	.word	0x20070a30
   8105c:	20070840 	.word	0x20070840

00081060 <_free_r>:
   81060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81064:	460d      	mov	r5, r1
   81066:	4606      	mov	r6, r0
   81068:	2900      	cmp	r1, #0
   8106a:	d055      	beq.n	81118 <_free_r+0xb8>
   8106c:	f000 fb68 	bl	81740 <__malloc_lock>
   81070:	f855 1c04 	ldr.w	r1, [r5, #-4]
   81074:	f8df c170 	ldr.w	ip, [pc, #368]	; 811e8 <_free_r+0x188>
   81078:	f1a5 0408 	sub.w	r4, r5, #8
   8107c:	f021 0301 	bic.w	r3, r1, #1
   81080:	18e2      	adds	r2, r4, r3
   81082:	f8dc 0008 	ldr.w	r0, [ip, #8]
   81086:	6857      	ldr	r7, [r2, #4]
   81088:	4290      	cmp	r0, r2
   8108a:	f027 0703 	bic.w	r7, r7, #3
   8108e:	d068      	beq.n	81162 <_free_r+0x102>
   81090:	f011 0101 	ands.w	r1, r1, #1
   81094:	6057      	str	r7, [r2, #4]
   81096:	d032      	beq.n	810fe <_free_r+0x9e>
   81098:	2100      	movs	r1, #0
   8109a:	19d0      	adds	r0, r2, r7
   8109c:	6840      	ldr	r0, [r0, #4]
   8109e:	07c0      	lsls	r0, r0, #31
   810a0:	d406      	bmi.n	810b0 <_free_r+0x50>
   810a2:	443b      	add	r3, r7
   810a4:	6890      	ldr	r0, [r2, #8]
   810a6:	2900      	cmp	r1, #0
   810a8:	d04d      	beq.n	81146 <_free_r+0xe6>
   810aa:	68d2      	ldr	r2, [r2, #12]
   810ac:	60c2      	str	r2, [r0, #12]
   810ae:	6090      	str	r0, [r2, #8]
   810b0:	f043 0201 	orr.w	r2, r3, #1
   810b4:	6062      	str	r2, [r4, #4]
   810b6:	50e3      	str	r3, [r4, r3]
   810b8:	b9e1      	cbnz	r1, 810f4 <_free_r+0x94>
   810ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   810be:	d32d      	bcc.n	8111c <_free_r+0xbc>
   810c0:	0a5a      	lsrs	r2, r3, #9
   810c2:	2a04      	cmp	r2, #4
   810c4:	d869      	bhi.n	8119a <_free_r+0x13a>
   810c6:	0998      	lsrs	r0, r3, #6
   810c8:	3038      	adds	r0, #56	; 0x38
   810ca:	0041      	lsls	r1, r0, #1
   810cc:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   810d0:	f8dc 2008 	ldr.w	r2, [ip, #8]
   810d4:	4944      	ldr	r1, [pc, #272]	; (811e8 <_free_r+0x188>)
   810d6:	4562      	cmp	r2, ip
   810d8:	d065      	beq.n	811a6 <_free_r+0x146>
   810da:	6851      	ldr	r1, [r2, #4]
   810dc:	f021 0103 	bic.w	r1, r1, #3
   810e0:	428b      	cmp	r3, r1
   810e2:	d202      	bcs.n	810ea <_free_r+0x8a>
   810e4:	6892      	ldr	r2, [r2, #8]
   810e6:	4594      	cmp	ip, r2
   810e8:	d1f7      	bne.n	810da <_free_r+0x7a>
   810ea:	68d3      	ldr	r3, [r2, #12]
   810ec:	60e3      	str	r3, [r4, #12]
   810ee:	60a2      	str	r2, [r4, #8]
   810f0:	609c      	str	r4, [r3, #8]
   810f2:	60d4      	str	r4, [r2, #12]
   810f4:	4630      	mov	r0, r6
   810f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   810fa:	f000 bb23 	b.w	81744 <__malloc_unlock>
   810fe:	f855 5c08 	ldr.w	r5, [r5, #-8]
   81102:	f10c 0808 	add.w	r8, ip, #8
   81106:	1b64      	subs	r4, r4, r5
   81108:	68a0      	ldr	r0, [r4, #8]
   8110a:	442b      	add	r3, r5
   8110c:	4540      	cmp	r0, r8
   8110e:	d042      	beq.n	81196 <_free_r+0x136>
   81110:	68e5      	ldr	r5, [r4, #12]
   81112:	60c5      	str	r5, [r0, #12]
   81114:	60a8      	str	r0, [r5, #8]
   81116:	e7c0      	b.n	8109a <_free_r+0x3a>
   81118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8111c:	08db      	lsrs	r3, r3, #3
   8111e:	109a      	asrs	r2, r3, #2
   81120:	2001      	movs	r0, #1
   81122:	4090      	lsls	r0, r2
   81124:	f8dc 1004 	ldr.w	r1, [ip, #4]
   81128:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   8112c:	689a      	ldr	r2, [r3, #8]
   8112e:	4301      	orrs	r1, r0
   81130:	60a2      	str	r2, [r4, #8]
   81132:	60e3      	str	r3, [r4, #12]
   81134:	f8cc 1004 	str.w	r1, [ip, #4]
   81138:	4630      	mov	r0, r6
   8113a:	609c      	str	r4, [r3, #8]
   8113c:	60d4      	str	r4, [r2, #12]
   8113e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   81142:	f000 baff 	b.w	81744 <__malloc_unlock>
   81146:	4d29      	ldr	r5, [pc, #164]	; (811ec <_free_r+0x18c>)
   81148:	42a8      	cmp	r0, r5
   8114a:	d1ae      	bne.n	810aa <_free_r+0x4a>
   8114c:	f043 0201 	orr.w	r2, r3, #1
   81150:	f8cc 4014 	str.w	r4, [ip, #20]
   81154:	f8cc 4010 	str.w	r4, [ip, #16]
   81158:	60e0      	str	r0, [r4, #12]
   8115a:	60a0      	str	r0, [r4, #8]
   8115c:	6062      	str	r2, [r4, #4]
   8115e:	50e3      	str	r3, [r4, r3]
   81160:	e7c8      	b.n	810f4 <_free_r+0x94>
   81162:	441f      	add	r7, r3
   81164:	07cb      	lsls	r3, r1, #31
   81166:	d407      	bmi.n	81178 <_free_r+0x118>
   81168:	f855 1c08 	ldr.w	r1, [r5, #-8]
   8116c:	1a64      	subs	r4, r4, r1
   8116e:	68e3      	ldr	r3, [r4, #12]
   81170:	68a2      	ldr	r2, [r4, #8]
   81172:	440f      	add	r7, r1
   81174:	60d3      	str	r3, [r2, #12]
   81176:	609a      	str	r2, [r3, #8]
   81178:	4b1d      	ldr	r3, [pc, #116]	; (811f0 <_free_r+0x190>)
   8117a:	f047 0201 	orr.w	r2, r7, #1
   8117e:	681b      	ldr	r3, [r3, #0]
   81180:	6062      	str	r2, [r4, #4]
   81182:	429f      	cmp	r7, r3
   81184:	f8cc 4008 	str.w	r4, [ip, #8]
   81188:	d3b4      	bcc.n	810f4 <_free_r+0x94>
   8118a:	4b1a      	ldr	r3, [pc, #104]	; (811f4 <_free_r+0x194>)
   8118c:	4630      	mov	r0, r6
   8118e:	6819      	ldr	r1, [r3, #0]
   81190:	f7ff ff18 	bl	80fc4 <_malloc_trim_r>
   81194:	e7ae      	b.n	810f4 <_free_r+0x94>
   81196:	2101      	movs	r1, #1
   81198:	e77f      	b.n	8109a <_free_r+0x3a>
   8119a:	2a14      	cmp	r2, #20
   8119c:	d80b      	bhi.n	811b6 <_free_r+0x156>
   8119e:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   811a2:	0041      	lsls	r1, r0, #1
   811a4:	e792      	b.n	810cc <_free_r+0x6c>
   811a6:	1080      	asrs	r0, r0, #2
   811a8:	2501      	movs	r5, #1
   811aa:	4085      	lsls	r5, r0
   811ac:	6848      	ldr	r0, [r1, #4]
   811ae:	4613      	mov	r3, r2
   811b0:	4328      	orrs	r0, r5
   811b2:	6048      	str	r0, [r1, #4]
   811b4:	e79a      	b.n	810ec <_free_r+0x8c>
   811b6:	2a54      	cmp	r2, #84	; 0x54
   811b8:	d803      	bhi.n	811c2 <_free_r+0x162>
   811ba:	0b18      	lsrs	r0, r3, #12
   811bc:	306e      	adds	r0, #110	; 0x6e
   811be:	0041      	lsls	r1, r0, #1
   811c0:	e784      	b.n	810cc <_free_r+0x6c>
   811c2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   811c6:	d803      	bhi.n	811d0 <_free_r+0x170>
   811c8:	0bd8      	lsrs	r0, r3, #15
   811ca:	3077      	adds	r0, #119	; 0x77
   811cc:	0041      	lsls	r1, r0, #1
   811ce:	e77d      	b.n	810cc <_free_r+0x6c>
   811d0:	f240 5154 	movw	r1, #1364	; 0x554
   811d4:	428a      	cmp	r2, r1
   811d6:	d803      	bhi.n	811e0 <_free_r+0x180>
   811d8:	0c98      	lsrs	r0, r3, #18
   811da:	307c      	adds	r0, #124	; 0x7c
   811dc:	0041      	lsls	r1, r0, #1
   811de:	e775      	b.n	810cc <_free_r+0x6c>
   811e0:	21fc      	movs	r1, #252	; 0xfc
   811e2:	207e      	movs	r0, #126	; 0x7e
   811e4:	e772      	b.n	810cc <_free_r+0x6c>
   811e6:	bf00      	nop
   811e8:	20070434 	.word	0x20070434
   811ec:	2007043c 	.word	0x2007043c
   811f0:	2007083c 	.word	0x2007083c
   811f4:	20070a2c 	.word	0x20070a2c

000811f8 <malloc>:
   811f8:	4b02      	ldr	r3, [pc, #8]	; (81204 <malloc+0xc>)
   811fa:	4601      	mov	r1, r0
   811fc:	6818      	ldr	r0, [r3, #0]
   811fe:	f000 b803 	b.w	81208 <_malloc_r>
   81202:	bf00      	nop
   81204:	20070430 	.word	0x20070430

00081208 <_malloc_r>:
   81208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8120c:	f101 050b 	add.w	r5, r1, #11
   81210:	2d16      	cmp	r5, #22
   81212:	b083      	sub	sp, #12
   81214:	4606      	mov	r6, r0
   81216:	d927      	bls.n	81268 <_malloc_r+0x60>
   81218:	f035 0507 	bics.w	r5, r5, #7
   8121c:	d427      	bmi.n	8126e <_malloc_r+0x66>
   8121e:	42a9      	cmp	r1, r5
   81220:	d825      	bhi.n	8126e <_malloc_r+0x66>
   81222:	4630      	mov	r0, r6
   81224:	f000 fa8c 	bl	81740 <__malloc_lock>
   81228:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8122c:	d226      	bcs.n	8127c <_malloc_r+0x74>
   8122e:	4fc1      	ldr	r7, [pc, #772]	; (81534 <_malloc_r+0x32c>)
   81230:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   81234:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   81238:	68dc      	ldr	r4, [r3, #12]
   8123a:	429c      	cmp	r4, r3
   8123c:	f000 81d2 	beq.w	815e4 <_malloc_r+0x3dc>
   81240:	6863      	ldr	r3, [r4, #4]
   81242:	68e2      	ldr	r2, [r4, #12]
   81244:	f023 0303 	bic.w	r3, r3, #3
   81248:	4423      	add	r3, r4
   8124a:	6858      	ldr	r0, [r3, #4]
   8124c:	68a1      	ldr	r1, [r4, #8]
   8124e:	f040 0501 	orr.w	r5, r0, #1
   81252:	60ca      	str	r2, [r1, #12]
   81254:	4630      	mov	r0, r6
   81256:	6091      	str	r1, [r2, #8]
   81258:	605d      	str	r5, [r3, #4]
   8125a:	f000 fa73 	bl	81744 <__malloc_unlock>
   8125e:	3408      	adds	r4, #8
   81260:	4620      	mov	r0, r4
   81262:	b003      	add	sp, #12
   81264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81268:	2510      	movs	r5, #16
   8126a:	42a9      	cmp	r1, r5
   8126c:	d9d9      	bls.n	81222 <_malloc_r+0x1a>
   8126e:	2400      	movs	r4, #0
   81270:	230c      	movs	r3, #12
   81272:	4620      	mov	r0, r4
   81274:	6033      	str	r3, [r6, #0]
   81276:	b003      	add	sp, #12
   81278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8127c:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   81280:	f000 8089 	beq.w	81396 <_malloc_r+0x18e>
   81284:	f1bc 0f04 	cmp.w	ip, #4
   81288:	f200 8160 	bhi.w	8154c <_malloc_r+0x344>
   8128c:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   81290:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   81294:	ea4f 014c 	mov.w	r1, ip, lsl #1
   81298:	4fa6      	ldr	r7, [pc, #664]	; (81534 <_malloc_r+0x32c>)
   8129a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   8129e:	68cc      	ldr	r4, [r1, #12]
   812a0:	42a1      	cmp	r1, r4
   812a2:	d105      	bne.n	812b0 <_malloc_r+0xa8>
   812a4:	e00c      	b.n	812c0 <_malloc_r+0xb8>
   812a6:	2b00      	cmp	r3, #0
   812a8:	da79      	bge.n	8139e <_malloc_r+0x196>
   812aa:	68e4      	ldr	r4, [r4, #12]
   812ac:	42a1      	cmp	r1, r4
   812ae:	d007      	beq.n	812c0 <_malloc_r+0xb8>
   812b0:	6862      	ldr	r2, [r4, #4]
   812b2:	f022 0203 	bic.w	r2, r2, #3
   812b6:	1b53      	subs	r3, r2, r5
   812b8:	2b0f      	cmp	r3, #15
   812ba:	ddf4      	ble.n	812a6 <_malloc_r+0x9e>
   812bc:	f10c 3cff 	add.w	ip, ip, #4294967295
   812c0:	f10c 0c01 	add.w	ip, ip, #1
   812c4:	4b9b      	ldr	r3, [pc, #620]	; (81534 <_malloc_r+0x32c>)
   812c6:	693c      	ldr	r4, [r7, #16]
   812c8:	f103 0e08 	add.w	lr, r3, #8
   812cc:	4574      	cmp	r4, lr
   812ce:	f000 817e 	beq.w	815ce <_malloc_r+0x3c6>
   812d2:	6861      	ldr	r1, [r4, #4]
   812d4:	f021 0103 	bic.w	r1, r1, #3
   812d8:	1b4a      	subs	r2, r1, r5
   812da:	2a0f      	cmp	r2, #15
   812dc:	f300 8164 	bgt.w	815a8 <_malloc_r+0x3a0>
   812e0:	2a00      	cmp	r2, #0
   812e2:	f8c3 e014 	str.w	lr, [r3, #20]
   812e6:	f8c3 e010 	str.w	lr, [r3, #16]
   812ea:	da69      	bge.n	813c0 <_malloc_r+0x1b8>
   812ec:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   812f0:	f080 813a 	bcs.w	81568 <_malloc_r+0x360>
   812f4:	08c9      	lsrs	r1, r1, #3
   812f6:	108a      	asrs	r2, r1, #2
   812f8:	f04f 0801 	mov.w	r8, #1
   812fc:	fa08 f802 	lsl.w	r8, r8, r2
   81300:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   81304:	685a      	ldr	r2, [r3, #4]
   81306:	6888      	ldr	r0, [r1, #8]
   81308:	ea48 0202 	orr.w	r2, r8, r2
   8130c:	60a0      	str	r0, [r4, #8]
   8130e:	60e1      	str	r1, [r4, #12]
   81310:	605a      	str	r2, [r3, #4]
   81312:	608c      	str	r4, [r1, #8]
   81314:	60c4      	str	r4, [r0, #12]
   81316:	ea4f 03ac 	mov.w	r3, ip, asr #2
   8131a:	2001      	movs	r0, #1
   8131c:	4098      	lsls	r0, r3
   8131e:	4290      	cmp	r0, r2
   81320:	d85b      	bhi.n	813da <_malloc_r+0x1d2>
   81322:	4202      	tst	r2, r0
   81324:	d106      	bne.n	81334 <_malloc_r+0x12c>
   81326:	f02c 0c03 	bic.w	ip, ip, #3
   8132a:	0040      	lsls	r0, r0, #1
   8132c:	4202      	tst	r2, r0
   8132e:	f10c 0c04 	add.w	ip, ip, #4
   81332:	d0fa      	beq.n	8132a <_malloc_r+0x122>
   81334:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   81338:	4644      	mov	r4, r8
   8133a:	46e1      	mov	r9, ip
   8133c:	68e3      	ldr	r3, [r4, #12]
   8133e:	429c      	cmp	r4, r3
   81340:	d107      	bne.n	81352 <_malloc_r+0x14a>
   81342:	e146      	b.n	815d2 <_malloc_r+0x3ca>
   81344:	2a00      	cmp	r2, #0
   81346:	f280 8157 	bge.w	815f8 <_malloc_r+0x3f0>
   8134a:	68db      	ldr	r3, [r3, #12]
   8134c:	429c      	cmp	r4, r3
   8134e:	f000 8140 	beq.w	815d2 <_malloc_r+0x3ca>
   81352:	6859      	ldr	r1, [r3, #4]
   81354:	f021 0103 	bic.w	r1, r1, #3
   81358:	1b4a      	subs	r2, r1, r5
   8135a:	2a0f      	cmp	r2, #15
   8135c:	ddf2      	ble.n	81344 <_malloc_r+0x13c>
   8135e:	461c      	mov	r4, r3
   81360:	f854 cf08 	ldr.w	ip, [r4, #8]!
   81364:	68d9      	ldr	r1, [r3, #12]
   81366:	f045 0901 	orr.w	r9, r5, #1
   8136a:	f042 0801 	orr.w	r8, r2, #1
   8136e:	441d      	add	r5, r3
   81370:	f8c3 9004 	str.w	r9, [r3, #4]
   81374:	4630      	mov	r0, r6
   81376:	f8cc 100c 	str.w	r1, [ip, #12]
   8137a:	f8c1 c008 	str.w	ip, [r1, #8]
   8137e:	617d      	str	r5, [r7, #20]
   81380:	613d      	str	r5, [r7, #16]
   81382:	f8c5 e00c 	str.w	lr, [r5, #12]
   81386:	f8c5 e008 	str.w	lr, [r5, #8]
   8138a:	f8c5 8004 	str.w	r8, [r5, #4]
   8138e:	50aa      	str	r2, [r5, r2]
   81390:	f000 f9d8 	bl	81744 <__malloc_unlock>
   81394:	e764      	b.n	81260 <_malloc_r+0x58>
   81396:	217e      	movs	r1, #126	; 0x7e
   81398:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   8139c:	e77c      	b.n	81298 <_malloc_r+0x90>
   8139e:	4422      	add	r2, r4
   813a0:	6850      	ldr	r0, [r2, #4]
   813a2:	68e3      	ldr	r3, [r4, #12]
   813a4:	68a1      	ldr	r1, [r4, #8]
   813a6:	f040 0501 	orr.w	r5, r0, #1
   813aa:	60cb      	str	r3, [r1, #12]
   813ac:	4630      	mov	r0, r6
   813ae:	6099      	str	r1, [r3, #8]
   813b0:	6055      	str	r5, [r2, #4]
   813b2:	f000 f9c7 	bl	81744 <__malloc_unlock>
   813b6:	3408      	adds	r4, #8
   813b8:	4620      	mov	r0, r4
   813ba:	b003      	add	sp, #12
   813bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   813c0:	4421      	add	r1, r4
   813c2:	684b      	ldr	r3, [r1, #4]
   813c4:	4630      	mov	r0, r6
   813c6:	f043 0301 	orr.w	r3, r3, #1
   813ca:	604b      	str	r3, [r1, #4]
   813cc:	f000 f9ba 	bl	81744 <__malloc_unlock>
   813d0:	3408      	adds	r4, #8
   813d2:	4620      	mov	r0, r4
   813d4:	b003      	add	sp, #12
   813d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   813da:	68bc      	ldr	r4, [r7, #8]
   813dc:	6863      	ldr	r3, [r4, #4]
   813de:	f023 0903 	bic.w	r9, r3, #3
   813e2:	45a9      	cmp	r9, r5
   813e4:	d304      	bcc.n	813f0 <_malloc_r+0x1e8>
   813e6:	ebc5 0309 	rsb	r3, r5, r9
   813ea:	2b0f      	cmp	r3, #15
   813ec:	f300 8091 	bgt.w	81512 <_malloc_r+0x30a>
   813f0:	4b51      	ldr	r3, [pc, #324]	; (81538 <_malloc_r+0x330>)
   813f2:	4a52      	ldr	r2, [pc, #328]	; (8153c <_malloc_r+0x334>)
   813f4:	6819      	ldr	r1, [r3, #0]
   813f6:	6813      	ldr	r3, [r2, #0]
   813f8:	eb05 0a01 	add.w	sl, r5, r1
   813fc:	3301      	adds	r3, #1
   813fe:	eb04 0b09 	add.w	fp, r4, r9
   81402:	f000 8161 	beq.w	816c8 <_malloc_r+0x4c0>
   81406:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   8140a:	f10a 0a0f 	add.w	sl, sl, #15
   8140e:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   81412:	f02a 0a0f 	bic.w	sl, sl, #15
   81416:	4630      	mov	r0, r6
   81418:	4651      	mov	r1, sl
   8141a:	9201      	str	r2, [sp, #4]
   8141c:	f000 f994 	bl	81748 <_sbrk_r>
   81420:	f1b0 3fff 	cmp.w	r0, #4294967295
   81424:	4680      	mov	r8, r0
   81426:	9a01      	ldr	r2, [sp, #4]
   81428:	f000 8101 	beq.w	8162e <_malloc_r+0x426>
   8142c:	4583      	cmp	fp, r0
   8142e:	f200 80fb 	bhi.w	81628 <_malloc_r+0x420>
   81432:	f8df c114 	ldr.w	ip, [pc, #276]	; 81548 <_malloc_r+0x340>
   81436:	45c3      	cmp	fp, r8
   81438:	f8dc 3000 	ldr.w	r3, [ip]
   8143c:	4453      	add	r3, sl
   8143e:	f8cc 3000 	str.w	r3, [ip]
   81442:	f000 814a 	beq.w	816da <_malloc_r+0x4d2>
   81446:	6812      	ldr	r2, [r2, #0]
   81448:	493c      	ldr	r1, [pc, #240]	; (8153c <_malloc_r+0x334>)
   8144a:	3201      	adds	r2, #1
   8144c:	bf1b      	ittet	ne
   8144e:	ebcb 0b08 	rsbne	fp, fp, r8
   81452:	445b      	addne	r3, fp
   81454:	f8c1 8000 	streq.w	r8, [r1]
   81458:	f8cc 3000 	strne.w	r3, [ip]
   8145c:	f018 0307 	ands.w	r3, r8, #7
   81460:	f000 8114 	beq.w	8168c <_malloc_r+0x484>
   81464:	f1c3 0208 	rsb	r2, r3, #8
   81468:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   8146c:	4490      	add	r8, r2
   8146e:	3308      	adds	r3, #8
   81470:	44c2      	add	sl, r8
   81472:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   81476:	ebca 0a03 	rsb	sl, sl, r3
   8147a:	4651      	mov	r1, sl
   8147c:	4630      	mov	r0, r6
   8147e:	f8cd c004 	str.w	ip, [sp, #4]
   81482:	f000 f961 	bl	81748 <_sbrk_r>
   81486:	1c43      	adds	r3, r0, #1
   81488:	f8dd c004 	ldr.w	ip, [sp, #4]
   8148c:	f000 8135 	beq.w	816fa <_malloc_r+0x4f2>
   81490:	ebc8 0200 	rsb	r2, r8, r0
   81494:	4452      	add	r2, sl
   81496:	f042 0201 	orr.w	r2, r2, #1
   8149a:	f8dc 3000 	ldr.w	r3, [ip]
   8149e:	42bc      	cmp	r4, r7
   814a0:	4453      	add	r3, sl
   814a2:	f8c7 8008 	str.w	r8, [r7, #8]
   814a6:	f8cc 3000 	str.w	r3, [ip]
   814aa:	f8c8 2004 	str.w	r2, [r8, #4]
   814ae:	f8df a098 	ldr.w	sl, [pc, #152]	; 81548 <_malloc_r+0x340>
   814b2:	d015      	beq.n	814e0 <_malloc_r+0x2d8>
   814b4:	f1b9 0f0f 	cmp.w	r9, #15
   814b8:	f240 80eb 	bls.w	81692 <_malloc_r+0x48a>
   814bc:	6861      	ldr	r1, [r4, #4]
   814be:	f1a9 020c 	sub.w	r2, r9, #12
   814c2:	f022 0207 	bic.w	r2, r2, #7
   814c6:	f001 0101 	and.w	r1, r1, #1
   814ca:	ea42 0e01 	orr.w	lr, r2, r1
   814ce:	2005      	movs	r0, #5
   814d0:	18a1      	adds	r1, r4, r2
   814d2:	2a0f      	cmp	r2, #15
   814d4:	f8c4 e004 	str.w	lr, [r4, #4]
   814d8:	6048      	str	r0, [r1, #4]
   814da:	6088      	str	r0, [r1, #8]
   814dc:	f200 8111 	bhi.w	81702 <_malloc_r+0x4fa>
   814e0:	4a17      	ldr	r2, [pc, #92]	; (81540 <_malloc_r+0x338>)
   814e2:	68bc      	ldr	r4, [r7, #8]
   814e4:	6811      	ldr	r1, [r2, #0]
   814e6:	428b      	cmp	r3, r1
   814e8:	bf88      	it	hi
   814ea:	6013      	strhi	r3, [r2, #0]
   814ec:	4a15      	ldr	r2, [pc, #84]	; (81544 <_malloc_r+0x33c>)
   814ee:	6811      	ldr	r1, [r2, #0]
   814f0:	428b      	cmp	r3, r1
   814f2:	bf88      	it	hi
   814f4:	6013      	strhi	r3, [r2, #0]
   814f6:	6862      	ldr	r2, [r4, #4]
   814f8:	f022 0203 	bic.w	r2, r2, #3
   814fc:	4295      	cmp	r5, r2
   814fe:	ebc5 0302 	rsb	r3, r5, r2
   81502:	d801      	bhi.n	81508 <_malloc_r+0x300>
   81504:	2b0f      	cmp	r3, #15
   81506:	dc04      	bgt.n	81512 <_malloc_r+0x30a>
   81508:	4630      	mov	r0, r6
   8150a:	f000 f91b 	bl	81744 <__malloc_unlock>
   8150e:	2400      	movs	r4, #0
   81510:	e6a6      	b.n	81260 <_malloc_r+0x58>
   81512:	f045 0201 	orr.w	r2, r5, #1
   81516:	f043 0301 	orr.w	r3, r3, #1
   8151a:	4425      	add	r5, r4
   8151c:	6062      	str	r2, [r4, #4]
   8151e:	4630      	mov	r0, r6
   81520:	60bd      	str	r5, [r7, #8]
   81522:	606b      	str	r3, [r5, #4]
   81524:	f000 f90e 	bl	81744 <__malloc_unlock>
   81528:	3408      	adds	r4, #8
   8152a:	4620      	mov	r0, r4
   8152c:	b003      	add	sp, #12
   8152e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81532:	bf00      	nop
   81534:	20070434 	.word	0x20070434
   81538:	20070a2c 	.word	0x20070a2c
   8153c:	20070840 	.word	0x20070840
   81540:	20070a28 	.word	0x20070a28
   81544:	20070a24 	.word	0x20070a24
   81548:	20070a30 	.word	0x20070a30
   8154c:	f1bc 0f14 	cmp.w	ip, #20
   81550:	d961      	bls.n	81616 <_malloc_r+0x40e>
   81552:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   81556:	f200 808f 	bhi.w	81678 <_malloc_r+0x470>
   8155a:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   8155e:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   81562:	ea4f 014c 	mov.w	r1, ip, lsl #1
   81566:	e697      	b.n	81298 <_malloc_r+0x90>
   81568:	0a4b      	lsrs	r3, r1, #9
   8156a:	2b04      	cmp	r3, #4
   8156c:	d958      	bls.n	81620 <_malloc_r+0x418>
   8156e:	2b14      	cmp	r3, #20
   81570:	f200 80ad 	bhi.w	816ce <_malloc_r+0x4c6>
   81574:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   81578:	0050      	lsls	r0, r2, #1
   8157a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   8157e:	6883      	ldr	r3, [r0, #8]
   81580:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8173c <_malloc_r+0x534>
   81584:	4283      	cmp	r3, r0
   81586:	f000 808a 	beq.w	8169e <_malloc_r+0x496>
   8158a:	685a      	ldr	r2, [r3, #4]
   8158c:	f022 0203 	bic.w	r2, r2, #3
   81590:	4291      	cmp	r1, r2
   81592:	d202      	bcs.n	8159a <_malloc_r+0x392>
   81594:	689b      	ldr	r3, [r3, #8]
   81596:	4298      	cmp	r0, r3
   81598:	d1f7      	bne.n	8158a <_malloc_r+0x382>
   8159a:	68d9      	ldr	r1, [r3, #12]
   8159c:	687a      	ldr	r2, [r7, #4]
   8159e:	60e1      	str	r1, [r4, #12]
   815a0:	60a3      	str	r3, [r4, #8]
   815a2:	608c      	str	r4, [r1, #8]
   815a4:	60dc      	str	r4, [r3, #12]
   815a6:	e6b6      	b.n	81316 <_malloc_r+0x10e>
   815a8:	f045 0701 	orr.w	r7, r5, #1
   815ac:	f042 0101 	orr.w	r1, r2, #1
   815b0:	4425      	add	r5, r4
   815b2:	6067      	str	r7, [r4, #4]
   815b4:	4630      	mov	r0, r6
   815b6:	615d      	str	r5, [r3, #20]
   815b8:	611d      	str	r5, [r3, #16]
   815ba:	f8c5 e00c 	str.w	lr, [r5, #12]
   815be:	f8c5 e008 	str.w	lr, [r5, #8]
   815c2:	6069      	str	r1, [r5, #4]
   815c4:	50aa      	str	r2, [r5, r2]
   815c6:	3408      	adds	r4, #8
   815c8:	f000 f8bc 	bl	81744 <__malloc_unlock>
   815cc:	e648      	b.n	81260 <_malloc_r+0x58>
   815ce:	685a      	ldr	r2, [r3, #4]
   815d0:	e6a1      	b.n	81316 <_malloc_r+0x10e>
   815d2:	f109 0901 	add.w	r9, r9, #1
   815d6:	f019 0f03 	tst.w	r9, #3
   815da:	f104 0408 	add.w	r4, r4, #8
   815de:	f47f aead 	bne.w	8133c <_malloc_r+0x134>
   815e2:	e02d      	b.n	81640 <_malloc_r+0x438>
   815e4:	f104 0308 	add.w	r3, r4, #8
   815e8:	6964      	ldr	r4, [r4, #20]
   815ea:	42a3      	cmp	r3, r4
   815ec:	bf08      	it	eq
   815ee:	f10c 0c02 	addeq.w	ip, ip, #2
   815f2:	f43f ae67 	beq.w	812c4 <_malloc_r+0xbc>
   815f6:	e623      	b.n	81240 <_malloc_r+0x38>
   815f8:	4419      	add	r1, r3
   815fa:	6848      	ldr	r0, [r1, #4]
   815fc:	461c      	mov	r4, r3
   815fe:	f854 2f08 	ldr.w	r2, [r4, #8]!
   81602:	68db      	ldr	r3, [r3, #12]
   81604:	f040 0501 	orr.w	r5, r0, #1
   81608:	604d      	str	r5, [r1, #4]
   8160a:	4630      	mov	r0, r6
   8160c:	60d3      	str	r3, [r2, #12]
   8160e:	609a      	str	r2, [r3, #8]
   81610:	f000 f898 	bl	81744 <__malloc_unlock>
   81614:	e624      	b.n	81260 <_malloc_r+0x58>
   81616:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   8161a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8161e:	e63b      	b.n	81298 <_malloc_r+0x90>
   81620:	098a      	lsrs	r2, r1, #6
   81622:	3238      	adds	r2, #56	; 0x38
   81624:	0050      	lsls	r0, r2, #1
   81626:	e7a8      	b.n	8157a <_malloc_r+0x372>
   81628:	42bc      	cmp	r4, r7
   8162a:	f43f af02 	beq.w	81432 <_malloc_r+0x22a>
   8162e:	68bc      	ldr	r4, [r7, #8]
   81630:	6862      	ldr	r2, [r4, #4]
   81632:	f022 0203 	bic.w	r2, r2, #3
   81636:	e761      	b.n	814fc <_malloc_r+0x2f4>
   81638:	f8d8 8000 	ldr.w	r8, [r8]
   8163c:	4598      	cmp	r8, r3
   8163e:	d17a      	bne.n	81736 <_malloc_r+0x52e>
   81640:	f01c 0f03 	tst.w	ip, #3
   81644:	f1a8 0308 	sub.w	r3, r8, #8
   81648:	f10c 3cff 	add.w	ip, ip, #4294967295
   8164c:	d1f4      	bne.n	81638 <_malloc_r+0x430>
   8164e:	687b      	ldr	r3, [r7, #4]
   81650:	ea23 0300 	bic.w	r3, r3, r0
   81654:	607b      	str	r3, [r7, #4]
   81656:	0040      	lsls	r0, r0, #1
   81658:	4298      	cmp	r0, r3
   8165a:	f63f aebe 	bhi.w	813da <_malloc_r+0x1d2>
   8165e:	2800      	cmp	r0, #0
   81660:	f43f aebb 	beq.w	813da <_malloc_r+0x1d2>
   81664:	4203      	tst	r3, r0
   81666:	46cc      	mov	ip, r9
   81668:	f47f ae64 	bne.w	81334 <_malloc_r+0x12c>
   8166c:	0040      	lsls	r0, r0, #1
   8166e:	4203      	tst	r3, r0
   81670:	f10c 0c04 	add.w	ip, ip, #4
   81674:	d0fa      	beq.n	8166c <_malloc_r+0x464>
   81676:	e65d      	b.n	81334 <_malloc_r+0x12c>
   81678:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   8167c:	d819      	bhi.n	816b2 <_malloc_r+0x4aa>
   8167e:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   81682:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   81686:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8168a:	e605      	b.n	81298 <_malloc_r+0x90>
   8168c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81690:	e6ee      	b.n	81470 <_malloc_r+0x268>
   81692:	2301      	movs	r3, #1
   81694:	f8c8 3004 	str.w	r3, [r8, #4]
   81698:	4644      	mov	r4, r8
   8169a:	2200      	movs	r2, #0
   8169c:	e72e      	b.n	814fc <_malloc_r+0x2f4>
   8169e:	1092      	asrs	r2, r2, #2
   816a0:	2001      	movs	r0, #1
   816a2:	4090      	lsls	r0, r2
   816a4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   816a8:	4619      	mov	r1, r3
   816aa:	4302      	orrs	r2, r0
   816ac:	f8c8 2004 	str.w	r2, [r8, #4]
   816b0:	e775      	b.n	8159e <_malloc_r+0x396>
   816b2:	f240 5354 	movw	r3, #1364	; 0x554
   816b6:	459c      	cmp	ip, r3
   816b8:	d81b      	bhi.n	816f2 <_malloc_r+0x4ea>
   816ba:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   816be:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   816c2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   816c6:	e5e7      	b.n	81298 <_malloc_r+0x90>
   816c8:	f10a 0a10 	add.w	sl, sl, #16
   816cc:	e6a3      	b.n	81416 <_malloc_r+0x20e>
   816ce:	2b54      	cmp	r3, #84	; 0x54
   816d0:	d81f      	bhi.n	81712 <_malloc_r+0x50a>
   816d2:	0b0a      	lsrs	r2, r1, #12
   816d4:	326e      	adds	r2, #110	; 0x6e
   816d6:	0050      	lsls	r0, r2, #1
   816d8:	e74f      	b.n	8157a <_malloc_r+0x372>
   816da:	f3cb 010b 	ubfx	r1, fp, #0, #12
   816de:	2900      	cmp	r1, #0
   816e0:	f47f aeb1 	bne.w	81446 <_malloc_r+0x23e>
   816e4:	eb0a 0109 	add.w	r1, sl, r9
   816e8:	68ba      	ldr	r2, [r7, #8]
   816ea:	f041 0101 	orr.w	r1, r1, #1
   816ee:	6051      	str	r1, [r2, #4]
   816f0:	e6f6      	b.n	814e0 <_malloc_r+0x2d8>
   816f2:	21fc      	movs	r1, #252	; 0xfc
   816f4:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   816f8:	e5ce      	b.n	81298 <_malloc_r+0x90>
   816fa:	2201      	movs	r2, #1
   816fc:	f04f 0a00 	mov.w	sl, #0
   81700:	e6cb      	b.n	8149a <_malloc_r+0x292>
   81702:	f104 0108 	add.w	r1, r4, #8
   81706:	4630      	mov	r0, r6
   81708:	f7ff fcaa 	bl	81060 <_free_r>
   8170c:	f8da 3000 	ldr.w	r3, [sl]
   81710:	e6e6      	b.n	814e0 <_malloc_r+0x2d8>
   81712:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   81716:	d803      	bhi.n	81720 <_malloc_r+0x518>
   81718:	0bca      	lsrs	r2, r1, #15
   8171a:	3277      	adds	r2, #119	; 0x77
   8171c:	0050      	lsls	r0, r2, #1
   8171e:	e72c      	b.n	8157a <_malloc_r+0x372>
   81720:	f240 5254 	movw	r2, #1364	; 0x554
   81724:	4293      	cmp	r3, r2
   81726:	d803      	bhi.n	81730 <_malloc_r+0x528>
   81728:	0c8a      	lsrs	r2, r1, #18
   8172a:	327c      	adds	r2, #124	; 0x7c
   8172c:	0050      	lsls	r0, r2, #1
   8172e:	e724      	b.n	8157a <_malloc_r+0x372>
   81730:	20fc      	movs	r0, #252	; 0xfc
   81732:	227e      	movs	r2, #126	; 0x7e
   81734:	e721      	b.n	8157a <_malloc_r+0x372>
   81736:	687b      	ldr	r3, [r7, #4]
   81738:	e78d      	b.n	81656 <_malloc_r+0x44e>
   8173a:	bf00      	nop
   8173c:	20070434 	.word	0x20070434

00081740 <__malloc_lock>:
   81740:	4770      	bx	lr
   81742:	bf00      	nop

00081744 <__malloc_unlock>:
   81744:	4770      	bx	lr
   81746:	bf00      	nop

00081748 <_sbrk_r>:
   81748:	b538      	push	{r3, r4, r5, lr}
   8174a:	4c07      	ldr	r4, [pc, #28]	; (81768 <_sbrk_r+0x20>)
   8174c:	2300      	movs	r3, #0
   8174e:	4605      	mov	r5, r0
   81750:	4608      	mov	r0, r1
   81752:	6023      	str	r3, [r4, #0]
   81754:	f7ff fbcc 	bl	80ef0 <_sbrk>
   81758:	1c43      	adds	r3, r0, #1
   8175a:	d000      	beq.n	8175e <_sbrk_r+0x16>
   8175c:	bd38      	pop	{r3, r4, r5, pc}
   8175e:	6823      	ldr	r3, [r4, #0]
   81760:	2b00      	cmp	r3, #0
   81762:	d0fb      	beq.n	8175c <_sbrk_r+0x14>
   81764:	602b      	str	r3, [r5, #0]
   81766:	bd38      	pop	{r3, r4, r5, pc}
   81768:	20070a58 	.word	0x20070a58

0008176c <__register_exitproc>:
   8176c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8176e:	4c27      	ldr	r4, [pc, #156]	; (8180c <__register_exitproc+0xa0>)
   81770:	b085      	sub	sp, #20
   81772:	6826      	ldr	r6, [r4, #0]
   81774:	4607      	mov	r7, r0
   81776:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8177a:	2c00      	cmp	r4, #0
   8177c:	d040      	beq.n	81800 <__register_exitproc+0x94>
   8177e:	6865      	ldr	r5, [r4, #4]
   81780:	2d1f      	cmp	r5, #31
   81782:	dd1e      	ble.n	817c2 <__register_exitproc+0x56>
   81784:	4822      	ldr	r0, [pc, #136]	; (81810 <__register_exitproc+0xa4>)
   81786:	b918      	cbnz	r0, 81790 <__register_exitproc+0x24>
   81788:	f04f 30ff 	mov.w	r0, #4294967295
   8178c:	b005      	add	sp, #20
   8178e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81790:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81794:	9103      	str	r1, [sp, #12]
   81796:	9202      	str	r2, [sp, #8]
   81798:	9301      	str	r3, [sp, #4]
   8179a:	f7ff fd2d 	bl	811f8 <malloc>
   8179e:	9903      	ldr	r1, [sp, #12]
   817a0:	4604      	mov	r4, r0
   817a2:	9a02      	ldr	r2, [sp, #8]
   817a4:	9b01      	ldr	r3, [sp, #4]
   817a6:	2800      	cmp	r0, #0
   817a8:	d0ee      	beq.n	81788 <__register_exitproc+0x1c>
   817aa:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   817ae:	2000      	movs	r0, #0
   817b0:	6025      	str	r5, [r4, #0]
   817b2:	6060      	str	r0, [r4, #4]
   817b4:	4605      	mov	r5, r0
   817b6:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   817ba:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   817be:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   817c2:	b93f      	cbnz	r7, 817d4 <__register_exitproc+0x68>
   817c4:	1c6b      	adds	r3, r5, #1
   817c6:	2000      	movs	r0, #0
   817c8:	3502      	adds	r5, #2
   817ca:	6063      	str	r3, [r4, #4]
   817cc:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   817d0:	b005      	add	sp, #20
   817d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   817d4:	2601      	movs	r6, #1
   817d6:	40ae      	lsls	r6, r5
   817d8:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   817dc:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   817e0:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   817e4:	2f02      	cmp	r7, #2
   817e6:	ea42 0206 	orr.w	r2, r2, r6
   817ea:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   817ee:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   817f2:	d1e7      	bne.n	817c4 <__register_exitproc+0x58>
   817f4:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   817f8:	431e      	orrs	r6, r3
   817fa:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   817fe:	e7e1      	b.n	817c4 <__register_exitproc+0x58>
   81800:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   81804:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   81808:	e7b9      	b.n	8177e <__register_exitproc+0x12>
   8180a:	bf00      	nop
   8180c:	00081844 	.word	0x00081844
   81810:	000811f9 	.word	0x000811f9
   81814:	00000001 	.word	0x00000001
   81818:	00000002 	.word	0x00000002
   8181c:	00000004 	.word	0x00000004
   81820:	00000008 	.word	0x00000008
   81824:	00000010 	.word	0x00000010
   81828:	00000020 	.word	0x00000020
   8182c:	00000040 	.word	0x00000040
   81830:	00000080 	.word	0x00000080
   81834:	00000100 	.word	0x00000100
   81838:	00000200 	.word	0x00000200
   8183c:	00000400 	.word	0x00000400
   81840:	00000043 	.word	0x00000043

00081844 <_global_impure_ptr>:
   81844:	20070008                                ... 

00081848 <_init>:
   81848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8184a:	bf00      	nop
   8184c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8184e:	bc08      	pop	{r3}
   81850:	469e      	mov	lr, r3
   81852:	4770      	bx	lr

00081854 <__init_array_start>:
   81854:	00080f75 	.word	0x00080f75

00081858 <__frame_dummy_init_array_entry>:
   81858:	00080119                                ....

0008185c <_fini>:
   8185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8185e:	bf00      	nop
   81860:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81862:	bc08      	pop	{r3}
   81864:	469e      	mov	lr, r3
   81866:	4770      	bx	lr

00081868 <__fini_array_start>:
   81868:	000800f5 	.word	0x000800f5
