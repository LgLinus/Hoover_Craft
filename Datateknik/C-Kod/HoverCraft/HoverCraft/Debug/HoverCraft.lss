
HoverCraft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006c48  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00086c48  00086c48  0000ec48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008d0  20070000  00086c50  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000083e4  200708d0  00087520  000108d0  2**3
                  ALLOC
  4 .stack        00002004  20078cb4  0008f904  000108d0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000108d0  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  000108f9  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002d9d8  00000000  00000000  0001096a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008550  00000000  00000000  0003e342  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001658  00000000  00000000  00046898  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00019f87  00000000  00000000  00047ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001b728  00000000  00000000  00061e77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00069523  00000000  00000000  0007d59f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000ef97  00000000  00000000  000e6ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001298  00000000  00000000  000f5a59  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002e98  00000000  00000000  000f6cf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007acb8 	.word	0x2007acb8
   80004:	000836ed 	.word	0x000836ed
   80008:	000836e9 	.word	0x000836e9
   8000c:	000836e9 	.word	0x000836e9
   80010:	000836e9 	.word	0x000836e9
   80014:	000836e9 	.word	0x000836e9
   80018:	000836e9 	.word	0x000836e9
	...
   8002c:	00081205 	.word	0x00081205
   80030:	000836e9 	.word	0x000836e9
   80034:	00000000 	.word	0x00000000
   80038:	00081295 	.word	0x00081295
   8003c:	000812d1 	.word	0x000812d1
   80040:	000836e9 	.word	0x000836e9
   80044:	000836e9 	.word	0x000836e9
   80048:	000836e9 	.word	0x000836e9
   8004c:	000836e9 	.word	0x000836e9
   80050:	000836e9 	.word	0x000836e9
   80054:	000836e9 	.word	0x000836e9
   80058:	000836e9 	.word	0x000836e9
   8005c:	000836e9 	.word	0x000836e9
   80060:	000836e9 	.word	0x000836e9
   80064:	000836e9 	.word	0x000836e9
   80068:	00000000 	.word	0x00000000
   8006c:	000834b5 	.word	0x000834b5
   80070:	000834d1 	.word	0x000834d1
   80074:	000834ed 	.word	0x000834ed
   80078:	00083509 	.word	0x00083509
	...
   80084:	000836e9 	.word	0x000836e9
   80088:	000836e9 	.word	0x000836e9
   8008c:	000836e9 	.word	0x000836e9
   80090:	000836e9 	.word	0x000836e9
   80094:	000836e9 	.word	0x000836e9
   80098:	000836e9 	.word	0x000836e9
   8009c:	000836e9 	.word	0x000836e9
   800a0:	000836e9 	.word	0x000836e9
   800a4:	00000000 	.word	0x00000000
   800a8:	000836e9 	.word	0x000836e9
   800ac:	000836e9 	.word	0x000836e9
   800b0:	000836e9 	.word	0x000836e9
   800b4:	000836e9 	.word	0x000836e9
   800b8:	000836e9 	.word	0x000836e9
   800bc:	000836e9 	.word	0x000836e9
   800c0:	000836e9 	.word	0x000836e9
   800c4:	000836e9 	.word	0x000836e9
   800c8:	000836e9 	.word	0x000836e9
   800cc:	000836e9 	.word	0x000836e9
   800d0:	000836e9 	.word	0x000836e9
   800d4:	000836e9 	.word	0x000836e9
   800d8:	000836e9 	.word	0x000836e9
   800dc:	000836e9 	.word	0x000836e9
   800e0:	000836e9 	.word	0x000836e9
   800e4:	000836e9 	.word	0x000836e9
   800e8:	000836e9 	.word	0x000836e9
   800ec:	000836e9 	.word	0x000836e9
   800f0:	000836e9 	.word	0x000836e9

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	00086c50 	.word	0x00086c50
   80110:	00086c53 	.word	0x00086c53
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	00086c50 	.word	0x00086c50
   8013c:	00086c50 	.word	0x00086c50
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	200708d0 	.word	0x200708d0
   80164:	00000000 	.word	0x00000000
   80168:	00086c50 	.word	0x00086c50

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	00086c50 	.word	0x00086c50
   80198:	200708d4 	.word	0x200708d4
   8019c:	00086c50 	.word	0x00086c50
   801a0:	00000000 	.word	0x00000000

000801a4 <init_adc>:


#include <asf.h>

/* Initialize the A/D converter */
void init_adc(void){
   801a4:	b538      	push	{r3, r4, r5, lr}

	pmc_enable_periph_clk(ID_ADC); // initialize A/D clock
   801a6:	f04f 0025 	mov.w	r0, #37	; 0x25
   801aa:	f243 6365 	movw	r3, #13925	; 0x3665
   801ae:	f2c0 0308 	movt	r3, #8
   801b2:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), sysclk_get_main_hz()/2, 8);
   801b4:	f04f 0400 	mov.w	r4, #0
   801b8:	f2c4 040c 	movt	r4, #16396	; 0x400c
   801bc:	4620      	mov	r0, r4
   801be:	f44f 41f4 	mov.w	r1, #31232	; 0x7a00
   801c2:	f6c0 2103 	movt	r1, #2563	; 0xa03
   801c6:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
   801ca:	f2c0 5201 	movt	r2, #1281	; 0x501
   801ce:	f04f 0308 	mov.w	r3, #8
   801d2:	f240 3559 	movw	r5, #857	; 0x359
   801d6:	f2c0 0508 	movt	r5, #8
   801da:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);
   801dc:	4620      	mov	r0, r4
   801de:	f04f 0100 	mov.w	r1, #0
   801e2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   801e6:	f04f 0301 	mov.w	r3, #1
   801ea:	f240 35a9 	movw	r5, #937	; 0x3a9
   801ee:	f2c0 0508 	movt	r5, #8
   801f2:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12); // Set the A/D resolution to 12 bit
   801f4:	4620      	mov	r0, r4
   801f6:	f04f 0100 	mov.w	r1, #0
   801fa:	f240 3299 	movw	r2, #921	; 0x399
   801fe:	f2c0 0208 	movt	r2, #8
   80202:	4790      	blx	r2
	
	/* Enable the A/D channels */
	adc_enable_channel(ADC, ADC_CHANNEL_3);
   80204:	4620      	mov	r0, r4
   80206:	f04f 0103 	mov.w	r1, #3
   8020a:	f240 35d1 	movw	r5, #977	; 0x3d1
   8020e:	f2c0 0508 	movt	r5, #8
   80212:	47a8      	blx	r5
	adc_enable_channel(ADC, ADC_CHANNEL_4);
   80214:	4620      	mov	r0, r4
   80216:	f04f 0104 	mov.w	r1, #4
   8021a:	47a8      	blx	r5
	adc_enable_channel(ADC, ADC_CHANNEL_5);
   8021c:	4620      	mov	r0, r4
   8021e:	f04f 0105 	mov.w	r1, #5
   80222:	47a8      	blx	r5
	adc_enable_channel(ADC, ADC_CHANNEL_6);
   80224:	4620      	mov	r0, r4
   80226:	f04f 0106 	mov.w	r1, #6
   8022a:	47a8      	blx	r5
   8022c:	bd38      	pop	{r3, r4, r5, pc}
   8022e:	bf00      	nop

00080230 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80234:	460c      	mov	r4, r1
   80236:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80238:	bb48      	cbnz	r0, 8028e <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
   8023a:	2a00      	cmp	r2, #0
   8023c:	dd2b      	ble.n	80296 <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
   8023e:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   80240:	f648 4678 	movw	r6, #35960	; 0x8c78
   80244:	f2c2 0607 	movt	r6, #8199	; 0x2007
   80248:	f648 4570 	movw	r5, #35952	; 0x8c70
   8024c:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80250:	ea6f 0901 	mvn.w	r9, r1
   80254:	eb07 0009 	add.w	r0, r7, r9
   80258:	f000 0901 	and.w	r9, r0, #1
   8025c:	6830      	ldr	r0, [r6, #0]
   8025e:	682b      	ldr	r3, [r5, #0]
   80260:	4798      	blx	r3
		ptr++;
   80262:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80266:	42bc      	cmp	r4, r7
   80268:	d119      	bne.n	8029e <_read+0x6e>
   8026a:	e00d      	b.n	80288 <_read+0x58>
		ptr_get(stdio_base, ptr);
   8026c:	6830      	ldr	r0, [r6, #0]
   8026e:	682b      	ldr	r3, [r5, #0]
   80270:	4621      	mov	r1, r4
   80272:	4798      	blx	r3
		ptr++;
   80274:	f104 0401 	add.w	r4, r4, #1
   80278:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   8027a:	6830      	ldr	r0, [r6, #0]
   8027c:	682a      	ldr	r2, [r5, #0]
   8027e:	4790      	blx	r2
		ptr++;
   80280:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80284:	42bc      	cmp	r4, r7
   80286:	d1f1      	bne.n	8026c <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80288:	4640      	mov	r0, r8
   8028a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8028e:	f04f 30ff 	mov.w	r0, #4294967295
   80292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
   80296:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   8029a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8029e:	f1b9 0f00 	cmp.w	r9, #0
   802a2:	d0e3      	beq.n	8026c <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   802a4:	6830      	ldr	r0, [r6, #0]
   802a6:	682a      	ldr	r2, [r5, #0]
   802a8:	4621      	mov	r1, r4
   802aa:	4790      	blx	r2
		ptr++;
   802ac:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   802b0:	42bc      	cmp	r4, r7
   802b2:	d1db      	bne.n	8026c <_read+0x3c>
   802b4:	e7e8      	b.n	80288 <_read+0x58>
   802b6:	bf00      	nop

000802b8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   802b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   802bc:	460d      	mov	r5, r1
   802be:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   802c0:	f100 30ff 	add.w	r0, r0, #4294967295
   802c4:	2802      	cmp	r0, #2
   802c6:	d824      	bhi.n	80312 <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
   802c8:	b332      	cbz	r2, 80318 <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   802ca:	f648 4678 	movw	r6, #35960	; 0x8c78
   802ce:	f2c2 0607 	movt	r6, #8199	; 0x2007
   802d2:	f648 4774 	movw	r7, #35956	; 0x8c74
   802d6:	f2c2 0707 	movt	r7, #8199	; 0x2007
   802da:	f04f 0400 	mov.w	r4, #0
   802de:	f102 39ff 	add.w	r9, r2, #4294967295
   802e2:	f009 0901 	and.w	r9, r9, #1
   802e6:	6830      	ldr	r0, [r6, #0]
   802e8:	683b      	ldr	r3, [r7, #0]
   802ea:	5d09      	ldrb	r1, [r1, r4]
   802ec:	4798      	blx	r3
   802ee:	42a0      	cmp	r0, r4
   802f0:	da1a      	bge.n	80328 <_write+0x70>
   802f2:	e014      	b.n	8031e <_write+0x66>
   802f4:	6830      	ldr	r0, [r6, #0]
   802f6:	683b      	ldr	r3, [r7, #0]
   802f8:	5d29      	ldrb	r1, [r5, r4]
   802fa:	4798      	blx	r3
   802fc:	2800      	cmp	r0, #0
   802fe:	db0e      	blt.n	8031e <_write+0x66>
			return -1;
		}
		++nChars;
   80300:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80304:	6830      	ldr	r0, [r6, #0]
   80306:	683a      	ldr	r2, [r7, #0]
   80308:	5d29      	ldrb	r1, [r5, r4]
   8030a:	4790      	blx	r2
   8030c:	2800      	cmp	r0, #0
   8030e:	da1d      	bge.n	8034c <_write+0x94>
   80310:	e005      	b.n	8031e <_write+0x66>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80312:	f04f 34ff 	mov.w	r4, #4294967295
   80316:	e004      	b.n	80322 <_write+0x6a>
	}

	for (; len != 0; --len) {
   80318:	f04f 0400 	mov.w	r4, #0
   8031c:	e001      	b.n	80322 <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   8031e:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80322:	4620      	mov	r0, r4
   80324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   80328:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8032c:	45a0      	cmp	r8, r4
   8032e:	d0f8      	beq.n	80322 <_write+0x6a>
   80330:	f1b9 0f00 	cmp.w	r9, #0
   80334:	d0de      	beq.n	802f4 <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80336:	6830      	ldr	r0, [r6, #0]
   80338:	683a      	ldr	r2, [r7, #0]
   8033a:	5d29      	ldrb	r1, [r5, r4]
   8033c:	4790      	blx	r2
   8033e:	2800      	cmp	r0, #0
   80340:	dbed      	blt.n	8031e <_write+0x66>
			return -1;
		}
		++nChars;
   80342:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80346:	45a0      	cmp	r8, r4
   80348:	d1d4      	bne.n	802f4 <_write+0x3c>
   8034a:	e7ea      	b.n	80322 <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   8034c:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80350:	45a0      	cmp	r8, r4
   80352:	d1cf      	bne.n	802f4 <_write+0x3c>
   80354:	e7e5      	b.n	80322 <_write+0x6a>
   80356:	bf00      	nop

00080358 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80358:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   8035a:	f04f 0401 	mov.w	r4, #1
   8035e:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80360:	f04f 0400 	mov.w	r4, #0
   80364:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   80366:	f240 2502 	movw	r5, #514	; 0x202
   8036a:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   8036e:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   80372:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80376:	6845      	ldr	r5, [r0, #4]
   80378:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   8037a:	ea4f 0242 	mov.w	r2, r2, lsl #1
   8037e:	fbb1 f1f2 	udiv	r1, r1, r2
   80382:	f101 32ff 	add.w	r2, r1, #4294967295
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80386:	ea4f 6102 	mov.w	r1, r2, lsl #24
   8038a:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
   8038e:	6043      	str	r3, [r0, #4]
	return 0;
}
   80390:	4620      	mov	r0, r4
   80392:	bc30      	pop	{r4, r5}
   80394:	4770      	bx	lr
   80396:	bf00      	nop

00080398 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   80398:	6843      	ldr	r3, [r0, #4]
   8039a:	f023 0210 	bic.w	r2, r3, #16
   8039e:	6042      	str	r2, [r0, #4]
	p_adc->ADC_MR |= resolution;
   803a0:	6843      	ldr	r3, [r0, #4]
   803a2:	4319      	orrs	r1, r3
   803a4:	6041      	str	r1, [r0, #4]
   803a6:	4770      	bx	lr

000803a8 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   803a8:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   803aa:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   803ac:	4322      	orrs	r2, r4
   803ae:	ea4f 6101 	mov.w	r1, r1, lsl #24
   803b2:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   803b6:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   803b8:	ea4f 7303 	mov.w	r3, r3, lsl #28
   803bc:	f003 5140 	and.w	r1, r3, #805306368	; 0x30000000
   803c0:	430a      	orrs	r2, r1
   803c2:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   803c4:	bc10      	pop	{r4}
   803c6:	4770      	bx	lr

000803c8 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   803c8:	f04f 0302 	mov.w	r3, #2
   803cc:	6003      	str	r3, [r0, #0]
   803ce:	4770      	bx	lr

000803d0 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   803d0:	f04f 0301 	mov.w	r3, #1
   803d4:	fa03 f101 	lsl.w	r1, r3, r1
   803d8:	6101      	str	r1, [r0, #16]
   803da:	4770      	bx	lr

000803dc <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   803dc:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   803de:	4770      	bx	lr

000803e0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   803e0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   803e2:	f04f 03ac 	mov.w	r3, #172	; 0xac
   803e6:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   803e8:	680a      	ldr	r2, [r1, #0]
   803ea:	684c      	ldr	r4, [r1, #4]
   803ec:	fbb2 f3f4 	udiv	r3, r2, r4
   803f0:	ea4f 1313 	mov.w	r3, r3, lsr #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   803f4:	f103 34ff 	add.w	r4, r3, #4294967295
   803f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   803fc:	4294      	cmp	r4, r2
   803fe:	d80c      	bhi.n	8041a <uart_init+0x3a>
		return 1;

	p_uart->UART_BRGR = cd;
   80400:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80402:	6889      	ldr	r1, [r1, #8]
   80404:	6041      	str	r1, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80406:	f240 2302 	movw	r3, #514	; 0x202
   8040a:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8040e:	f04f 0250 	mov.w	r2, #80	; 0x50
   80412:	6002      	str	r2, [r0, #0]

	return 0;
   80414:	f04f 0000 	mov.w	r0, #0
   80418:	e001      	b.n	8041e <uart_init+0x3e>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   8041a:	f04f 0001 	mov.w	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8041e:	bc10      	pop	{r4}
   80420:	4770      	bx	lr
   80422:	bf00      	nop

00080424 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80424:	6943      	ldr	r3, [r0, #20]
   80426:	f013 0f02 	tst.w	r3, #2
   8042a:	d003      	beq.n	80434 <uart_write+0x10>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8042c:	61c1      	str	r1, [r0, #28]
	return 0;
   8042e:	f04f 0000 	mov.w	r0, #0
   80432:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80434:	f04f 0001 	mov.w	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80438:	4770      	bx	lr
   8043a:	bf00      	nop

0008043c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8043c:	6943      	ldr	r3, [r0, #20]
   8043e:	f013 0f01 	tst.w	r3, #1
   80442:	d004      	beq.n	8044e <uart_read+0x12>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80444:	6980      	ldr	r0, [r0, #24]
   80446:	7008      	strb	r0, [r1, #0]
	return 0;
   80448:	f04f 0000 	mov.w	r0, #0
   8044c:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8044e:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80452:	4770      	bx	lr

00080454 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80454:	6943      	ldr	r3, [r0, #20]
   80456:	f013 0f02 	tst.w	r3, #2
   8045a:	d007      	beq.n	8046c <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8045c:	ea4f 51c1 	mov.w	r1, r1, lsl #23
   80460:	ea4f 52d1 	mov.w	r2, r1, lsr #23
   80464:	61c2      	str	r2, [r0, #28]
	return 0;
   80466:	f04f 0000 	mov.w	r0, #0
   8046a:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8046c:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80470:	4770      	bx	lr
   80472:	bf00      	nop

00080474 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80474:	6943      	ldr	r3, [r0, #20]
   80476:	f013 0f01 	tst.w	r3, #1
   8047a:	d008      	beq.n	8048e <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8047c:	6980      	ldr	r0, [r0, #24]
   8047e:	ea4f 52c0 	mov.w	r2, r0, lsl #23
   80482:	ea4f 53d2 	mov.w	r3, r2, lsr #23
   80486:	600b      	str	r3, [r1, #0]

	return 0;
   80488:	f04f 0000 	mov.w	r0, #0
   8048c:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8048e:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80492:	4770      	bx	lr

00080494 <update_fan_cycle_back>:
 		
 	}
 }
 
 /* Update the duty cycles for the fans. */
 void update_fan_cycle_back(int duty_cycle, int activeFan){
   80494:	b510      	push	{r4, lr}
   80496:	f240 33e7 	movw	r3, #999	; 0x3e7
   8049a:	4298      	cmp	r0, r3
   8049c:	bfa8      	it	ge
   8049e:	4618      	movge	r0, r3
   804a0:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
 	{
 		duty_cycle = 0;
 	}
	
	/* Activate the correct fan */
 	if(activeFan==rightFan)
   804a4:	2901      	cmp	r1, #1
   804a6:	d10d      	bne.n	804c4 <update_fan_cycle_back+0x30>
 	{
 		update_duty_cycle_40(duty_cycle);
   804a8:	4620      	mov	r0, r4
   804aa:	f640 73bd 	movw	r3, #4029	; 0xfbd
   804ae:	f2c0 0308 	movt	r3, #8
   804b2:	4798      	blx	r3
 		update_duty_cycle_38(standby_cycle);
   804b4:	f240 104d 	movw	r0, #333	; 0x14d
   804b8:	f640 7191 	movw	r1, #3985	; 0xf91
   804bc:	f2c0 0108 	movt	r1, #8
   804c0:	4788      	blx	r1
   804c2:	bd10      	pop	{r4, pc}
 	}
 	else
 	{
 		update_duty_cycle_38(standby_cycle);
   804c4:	f240 104d 	movw	r0, #333	; 0x14d
   804c8:	f640 7191 	movw	r1, #3985	; 0xf91
   804cc:	f2c0 0108 	movt	r1, #8
   804d0:	4788      	blx	r1
 		update_duty_cycle_40(duty_cycle);
   804d2:	4620      	mov	r0, r4
   804d4:	f640 72bd 	movw	r2, #4029	; 0xfbd
   804d8:	f2c0 0208 	movt	r2, #8
   804dc:	4790      	blx	r2
   804de:	bd10      	pop	{r4, pc}

000804e0 <controll_back>:
	}

}

/* Function responsible of controlling the back fans*/
 void controll_back(int left, int right){
   804e0:	b570      	push	{r4, r5, r6, lr}

 	invalue = left-right;
   804e2:	1a42      	subs	r2, r0, r1
   804e4:	f648 4380 	movw	r3, #35968	; 0x8c80
   804e8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   804ec:	601a      	str	r2, [r3, #0]
	 
 	/* Calculate which fan to control in order to move the hoovercraft correctly */
 	if(left<right)
   804ee:	4288      	cmp	r0, r1
 	{
 		activeFan = leftFan;
   804f0:	f648 40a0 	movw	r0, #36000	; 0x8ca0
   804f4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   804f8:	bfb4      	ite	lt
   804fa:	2100      	movlt	r1, #0
 	}
 	else
 	{
 		activeFan = rightFan;
   804fc:	2101      	movge	r1, #1
   804fe:	6001      	str	r1, [r0, #0]
 	}
 	
 	
 	/* Make room for the new values */
 	if(invalue!=0)
   80500:	2a00      	cmp	r2, #0
   80502:	d074      	beq.n	805ee <controll_back+0x10e>
 	{
 		
 		/* Moving average filter */
 		for(int i = buffert_size-1; i > 0;i--)
 		{
 			current_buffert[i] = current_buffert[i-1];
   80504:	f640 1608 	movw	r6, #2312	; 0x908
   80508:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8050c:	68f1      	ldr	r1, [r6, #12]
   8050e:	6131      	str	r1, [r6, #16]
   80510:	68b0      	ldr	r0, [r6, #8]
   80512:	60f0      	str	r0, [r6, #12]
   80514:	6874      	ldr	r4, [r6, #4]
   80516:	60b4      	str	r4, [r6, #8]
   80518:	6835      	ldr	r5, [r6, #0]
   8051a:	6075      	str	r5, [r6, #4]
 		}
 
 		current_buffert[0] = invalue;
   8051c:	6032      	str	r2, [r6, #0]
 		
 		int sum_current_median = 0;
 		/* Calculate median value */
 		for(int i = 0; i < buffert_size;i++)
 		{
 			sum_current_median +=current_buffert[i];
   8051e:	1952      	adds	r2, r2, r5
   80520:	1913      	adds	r3, r2, r4
   80522:	181e      	adds	r6, r3, r0
   80524:	1870      	adds	r0, r6, r1
 		temp_TI = TI;
 		double temp_TD;
 		temp_TD = TD;
 		
		
 		current_value = sum_current_median/buffert_size;
   80526:	f246 6167 	movw	r1, #26215	; 0x6667
   8052a:	f2c6 6166 	movt	r1, #26214	; 0x6666
   8052e:	fb81 1400 	smull	r1, r4, r1, r0
   80532:	ea4f 75e0 	mov.w	r5, r0, asr #31
		 
 		if (current_value<0)
   80536:	ebd5 0364 	rsbs	r3, r5, r4, asr #1
   8053a:	d405      	bmi.n	80548 <controll_back+0x68>
 		temp_TI = TI;
 		double temp_TD;
 		temp_TD = TD;
 		
		
 		current_value = sum_current_median/buffert_size;
   8053c:	f648 4290 	movw	r2, #35984	; 0x8c90
   80540:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80544:	6013      	str	r3, [r2, #0]
   80546:	e006      	b.n	80556 <controll_back+0x76>
		 
 		if (current_value<0)
 		current_value=current_value*-1;
   80548:	f1c3 0600 	rsb	r6, r3, #0
   8054c:	f648 4090 	movw	r0, #35984	; 0x8c90
   80550:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80554:	6006      	str	r6, [r0, #0]
		 
 		e = (current_value);
   80556:	f648 4190 	movw	r1, #35984	; 0x8c90
   8055a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8055e:	6808      	ldr	r0, [r1, #0]
   80560:	f648 44a4 	movw	r4, #36004	; 0x8ca4
   80564:	f2c2 0407 	movt	r4, #8199	; 0x2007
   80568:	6020      	str	r0, [r4, #0]
 		
 		/* I-part */
 		sum = sum + e;
   8056a:	f640 1504 	movw	r5, #2308	; 0x904
   8056e:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80572:	682b      	ldr	r3, [r5, #0]
   80574:	18c2      	adds	r2, r0, r3
   80576:	602a      	str	r2, [r5, #0]
 		PI = (double) ((CONTROLLER_SCHEDULE_TIME/((double)1000*temp_TI))*sum);
 		/* D-part */
 		/* Calculate derivate */
 		d_buffert[1] = d_buffert[0];
   80578:	f640 06fc 	movw	r6, #2300	; 0x8fc
   8057c:	f2c2 0607 	movt	r6, #8199	; 0x2007
   80580:	6831      	ldr	r1, [r6, #0]
   80582:	6071      	str	r1, [r6, #4]
 		d_buffert[0] = e;
   80584:	6030      	str	r0, [r6, #0]
		int d_diff;
 		d_diff = d_buffert[0]-d_buffert[1];
 		PD = (temp_TD*d_diff)/((double)CONTROLLER_SCHEDULE_TIME/1000);
 		
 		/* Only P -control */
 		PI = 0;
   80586:	f04f 0400 	mov.w	r4, #0
   8058a:	f04f 0500 	mov.w	r5, #0
   8058e:	f648 4398 	movw	r3, #35992	; 0x8c98
   80592:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80596:	e9c3 4500 	strd	r4, r5, [r3]
 		PD = 0;
   8059a:	f648 4288 	movw	r2, #35976	; 0x8c88
   8059e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   805a2:	e9c2 4500 	strd	r4, r5, [r2]
 			
 		/* Regler-part */
 		u = temp_KP*(e + PI + PD);
   805a6:	f643 56c5 	movw	r6, #15813	; 0x3dc5
   805aa:	f2c0 0608 	movt	r6, #8
   805ae:	47b0      	blx	r6
   805b0:	f643 362d 	movw	r6, #15149	; 0x3b2d
   805b4:	f2c0 0608 	movt	r6, #8
   805b8:	4622      	mov	r2, r4
   805ba:	462b      	mov	r3, r5
   805bc:	47b0      	blx	r6
   805be:	4622      	mov	r2, r4
   805c0:	462b      	mov	r3, r5
   805c2:	47b0      	blx	r6
   805c4:	f648 43a8 	movw	r3, #36008	; 0x8ca8
   805c8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   805cc:	e9c3 0100 	strd	r0, r1, [r3]
 
 		
 		update_fan_cycle_back((int)u,activeFan);
   805d0:	f244 22b5 	movw	r2, #17077	; 0x42b5
   805d4:	f2c0 0208 	movt	r2, #8
   805d8:	4790      	blx	r2
   805da:	f648 41a0 	movw	r1, #36000	; 0x8ca0
   805de:	f2c2 0107 	movt	r1, #8199	; 0x2007
   805e2:	6809      	ldr	r1, [r1, #0]
   805e4:	f240 4395 	movw	r3, #1173	; 0x495
   805e8:	f2c0 0308 	movt	r3, #8
   805ec:	4798      	blx	r3
   805ee:	bd70      	pop	{r4, r5, r6, pc}

000805f0 <start_controller_back>:
int current_buffert[buffert_size] = {0};
int current_value;

/* Start the communication task */
void start_controller_back(void *p)
{
   805f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   805f4:	b082      	sub	sp, #8
	
	portTickType xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount(); //Retrieve the startup tick timer
   805f6:	f641 737d 	movw	r3, #8061	; 0x1f7d
   805fa:	f2c0 0308 	movt	r3, #8
   805fe:	4798      	blx	r3
   80600:	f8ad 0006 	strh.w	r0, [sp, #6]
	

	/* Simple infinite loop, printing text with a given delay */
	while(1)
	{
		adc_start(ADC);
   80604:	f04f 0400 	mov.w	r4, #0
   80608:	f2c4 040c 	movt	r4, #16396	; 0x400c
   8060c:	f240 3ac9 	movw	sl, #969	; 0x3c9
   80610:	f2c0 0a08 	movt	sl, #8
		
		// Wait for the end of conversion, check if data is ready
		while ((adc_get_status(ADC) & ADC_ISR_DRDY) != ADC_ISR_DRDY);
   80614:	f240 35dd 	movw	r5, #989	; 0x3dd
   80618:	f2c0 0508 	movt	r5, #8
		int back_left_inductor;
		back_left_inductor = ADC->ADC_CDR[6]; // Retrieve latest vaule from back left inductor
		int back_right_inductor;
		back_right_inductor = ADC->ADC_CDR[5]; // Retrieve latest value from back right inductor
		
		xSemaphoreTake(semaphore_adc_values,portMAX_DELAY); // Take semaphore
   8061c:	f640 183c 	movw	r8, #2364	; 0x93c
   80620:	f2c2 0807 	movt	r8, #8199	; 0x2007
   80624:	f641 197d 	movw	r9, #6525	; 0x197d
   80628:	f2c0 0908 	movt	r9, #8
	

	/* Simple infinite loop, printing text with a given delay */
	while(1)
	{
		adc_start(ADC);
   8062c:	4620      	mov	r0, r4
   8062e:	47d0      	blx	sl
		
		// Wait for the end of conversion, check if data is ready
		while ((adc_get_status(ADC) & ADC_ISR_DRDY) != ADC_ISR_DRDY);
   80630:	4620      	mov	r0, r4
   80632:	47a8      	blx	r5
   80634:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   80638:	d0fa      	beq.n	80630 <start_controller_back+0x40>

		int back_left_inductor;
		back_left_inductor = ADC->ADC_CDR[6]; // Retrieve latest vaule from back left inductor
   8063a:	6ea7      	ldr	r7, [r4, #104]	; 0x68
		int back_right_inductor;
		back_right_inductor = ADC->ADC_CDR[5]; // Retrieve latest value from back right inductor
   8063c:	6e66      	ldr	r6, [r4, #100]	; 0x64
		
		xSemaphoreTake(semaphore_adc_values,portMAX_DELAY); // Take semaphore
   8063e:	f8d8 0000 	ldr.w	r0, [r8]
   80642:	f04f 0100 	mov.w	r1, #0
   80646:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8064a:	460b      	mov	r3, r1
   8064c:	47c8      	blx	r9
		adc_value_back_left = back_left_inductor;
   8064e:	f640 00f4 	movw	r0, #2292	; 0x8f4
   80652:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80656:	6007      	str	r7, [r0, #0]
		adc_value_back_right = back_right_inductor;
   80658:	f640 01f0 	movw	r1, #2288	; 0x8f0
   8065c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80660:	600e      	str	r6, [r1, #0]
		xSemaphoreGive(semaphore_adc_values); // Take semaphore
   80662:	f8d8 0000 	ldr.w	r0, [r8]
   80666:	f04f 0100 	mov.w	r1, #0
   8066a:	460a      	mov	r2, r1
   8066c:	460b      	mov	r3, r1
   8066e:	f241 7c4d 	movw	ip, #5965	; 0x174d
   80672:	f2c0 0c08 	movt	ip, #8
   80676:	47e0      	blx	ip
		controll_back(back_left_inductor,back_right_inductor);
   80678:	4638      	mov	r0, r7
   8067a:	4631      	mov	r1, r6
   8067c:	f240 42e1 	movw	r2, #1249	; 0x4e1
   80680:	f2c0 0208 	movt	r2, #8
   80684:	4790      	blx	r2
		
		vTaskDelayUntil(&xLastWakeTime,CONTROLLER_SCHEDULE_TIME);
   80686:	f10d 0006 	add.w	r0, sp, #6
   8068a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   8068e:	f242 332d 	movw	r3, #9005	; 0x232d
   80692:	f2c0 0308 	movt	r3, #8
   80696:	4798      	blx	r3
	}
   80698:	e7c8      	b.n	8062c <start_controller_back+0x3c>
   8069a:	bf00      	nop

0008069c <update_fan_cycle>:
			
		}
}

/* Update the duty cycles for the fans. */
void update_fan_cycle(int duty_cycle, int active_Fan){
   8069c:	b510      	push	{r4, lr}
   8069e:	f240 33e7 	movw	r3, #999	; 0x3e7
   806a2:	4298      	cmp	r0, r3
   806a4:	bfa8      	it	ge
   806a6:	4618      	movge	r0, r3
   806a8:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
	}
	if(duty_cycle<0)
	{
		duty_cycle = 0;
	}
	if(active_Fan==rightFan)
   806ac:	2901      	cmp	r1, #1
   806ae:	d10d      	bne.n	806cc <update_fan_cycle+0x30>
	{
		update_duty_cycle_36(duty_cycle);
   806b0:	4620      	mov	r0, r4
   806b2:	f640 7365 	movw	r3, #3941	; 0xf65
   806b6:	f2c0 0308 	movt	r3, #8
   806ba:	4798      	blx	r3
		update_duty_cycle_DAC1(standby_cycle);
   806bc:	f240 104d 	movw	r0, #333	; 0x14d
   806c0:	f640 7139 	movw	r1, #3897	; 0xf39
   806c4:	f2c0 0108 	movt	r1, #8
   806c8:	4788      	blx	r1
   806ca:	bd10      	pop	{r4, pc}
	}
	else
	{
		update_duty_cycle_36(standby_cycle);
   806cc:	f240 104d 	movw	r0, #333	; 0x14d
   806d0:	f640 7165 	movw	r1, #3941	; 0xf65
   806d4:	f2c0 0108 	movt	r1, #8
   806d8:	4788      	blx	r1
		update_duty_cycle_DAC1(duty_cycle);
   806da:	4620      	mov	r0, r4
   806dc:	f640 7239 	movw	r2, #3897	; 0xf39
   806e0:	f2c0 0208 	movt	r2, #8
   806e4:	4790      	blx	r2
   806e6:	bd10      	pop	{r4, pc}

000806e8 <controll_front>:
 		vTaskDelayUntil(&xLastWakeTime,CONTROLLER_SCHEDULE_TIME);
 	}
}

/* Function responsible of controlling the front fans*/
void controll_front(int left, int right){
   806e8:	b570      	push	{r4, r5, r6, lr}
	
	invalue = left-right;
   806ea:	1a42      	subs	r2, r0, r1
   806ec:	f648 4380 	movw	r3, #35968	; 0x8c80
   806f0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   806f4:	601a      	str	r2, [r3, #0]
	
	
	/* Calculate which fan to control in order to move the hoovercraft correctly */
	if(left<right)
   806f6:	4288      	cmp	r0, r1
	{
		activeFan = leftFan;
   806f8:	f648 40a0 	movw	r0, #36000	; 0x8ca0
   806fc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80700:	bfb4      	ite	lt
   80702:	2100      	movlt	r1, #0
	}
	else
	{
		activeFan = rightFan;
   80704:	2101      	movge	r1, #1
   80706:	6001      	str	r1, [r0, #0]
	}
	
		
	/* Make room for the new values */
		if(invalue!=0)
   80708:	2a00      	cmp	r2, #0
   8070a:	d07f      	beq.n	8080c <controll_front+0x124>
		{
			
			/* Moving average filter */
			for(int i = buffert_size-1; i > 0;i--)
			{
				current_buffert_front[i] = current_buffert_front[i-1];
   8070c:	f640 161c 	movw	r6, #2332	; 0x91c
   80710:	f2c2 0607 	movt	r6, #8199	; 0x2007
   80714:	68f1      	ldr	r1, [r6, #12]
   80716:	6131      	str	r1, [r6, #16]
   80718:	68b0      	ldr	r0, [r6, #8]
   8071a:	60f0      	str	r0, [r6, #12]
   8071c:	6874      	ldr	r4, [r6, #4]
   8071e:	60b4      	str	r4, [r6, #8]
   80720:	6835      	ldr	r5, [r6, #0]
   80722:	6075      	str	r5, [r6, #4]
			}

			current_buffert_front[0] = invalue;
   80724:	6032      	str	r2, [r6, #0]
			
			int sum_current_median = 0;
			/* Calculate median value */
			for(int i = 0; i < buffert_size;i++)
			{
				sum_current_median +=current_buffert_front[i];
   80726:	1952      	adds	r2, r2, r5
   80728:	1913      	adds	r3, r2, r4
   8072a:	181e      	adds	r6, r3, r0
   8072c:	1870      	adds	r0, r6, r1
			temp_TI = TI;
			double temp_TD;
			temp_TD = TD;
			
			
			current_value = sum_current_median/buffert_size;
   8072e:	f246 6167 	movw	r1, #26215	; 0x6667
   80732:	f2c6 6166 	movt	r1, #26214	; 0x6666
   80736:	fb81 1400 	smull	r1, r4, r1, r0
   8073a:	ea4f 75e0 	mov.w	r5, r0, asr #31
			
			if (current_value<0)
   8073e:	ebd5 0364 	rsbs	r3, r5, r4, asr #1
   80742:	d405      	bmi.n	80750 <controll_front+0x68>
			temp_TI = TI;
			double temp_TD;
			temp_TD = TD;
			
			
			current_value = sum_current_median/buffert_size;
   80744:	f648 4290 	movw	r2, #35984	; 0x8c90
   80748:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8074c:	6013      	str	r3, [r2, #0]
   8074e:	e006      	b.n	8075e <controll_front+0x76>
			
			if (current_value<0)
				current_value=current_value*-1;
   80750:	f1c3 0600 	rsb	r6, r3, #0
   80754:	f648 4090 	movw	r0, #35984	; 0x8c90
   80758:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8075c:	6006      	str	r6, [r0, #0]
				
			e = (current_value);
   8075e:	f648 4190 	movw	r1, #35984	; 0x8c90
   80762:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80766:	6808      	ldr	r0, [r1, #0]
   80768:	f648 44a4 	movw	r4, #36004	; 0x8ca4
   8076c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   80770:	6020      	str	r0, [r4, #0]
			
			/* I-part */
			sum_front = sum_front + e;
   80772:	f640 1530 	movw	r5, #2352	; 0x930
   80776:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8077a:	682b      	ldr	r3, [r5, #0]
   8077c:	18c2      	adds	r2, r0, r3
   8077e:	602a      	str	r2, [r5, #0]
			PI = (double) ((CONTROLLER_SCHEDULE_TIME/((double)1000*temp_TI))*sum_front);
			
			/* D-part */
			/* Calculate derivate */
			d_buffert_front[1] = d_buffert_front[0];
   80780:	f640 1634 	movw	r6, #2356	; 0x934
   80784:	f2c2 0607 	movt	r6, #8199	; 0x2007
   80788:	6831      	ldr	r1, [r6, #0]
   8078a:	6071      	str	r1, [r6, #4]
			d_buffert_front[0] = e;
   8078c:	6030      	str	r0, [r6, #0]
			int d_diff;
			d_diff = d_buffert_front[0]-d_buffert_front[1];
			PD = (temp_TD*d_diff)/((double)CONTROLLER_SCHEDULE_TIME/1000);
			
			/* Only P -control */
			PI = 0;
   8078e:	f04f 0400 	mov.w	r4, #0
   80792:	f04f 0500 	mov.w	r5, #0
   80796:	f648 4398 	movw	r3, #35992	; 0x8c98
   8079a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8079e:	e9c3 4500 	strd	r4, r5, [r3]
			PD = 0;
   807a2:	f648 4288 	movw	r2, #35976	; 0x8c88
   807a6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   807aa:	e9c2 4500 	strd	r4, r5, [r2]
			
			/* Regler-part */
			u = temp_KP*(e + PI + PD);
   807ae:	f643 56c5 	movw	r6, #15813	; 0x3dc5
   807b2:	f2c0 0608 	movt	r6, #8
   807b6:	47b0      	blx	r6
   807b8:	f643 362d 	movw	r6, #15149	; 0x3b2d
   807bc:	f2c0 0608 	movt	r6, #8
   807c0:	4622      	mov	r2, r4
   807c2:	462b      	mov	r3, r5
   807c4:	47b0      	blx	r6
   807c6:	4622      	mov	r2, r4
   807c8:	462b      	mov	r3, r5
   807ca:	47b0      	blx	r6
   807cc:	f04f 0200 	mov.w	r2, #0
   807d0:	f04f 0300 	mov.w	r3, #0
   807d4:	f2c4 0359 	movt	r3, #16473	; 0x4059
   807d8:	f643 6491 	movw	r4, #16017	; 0x3e91
   807dc:	f2c0 0408 	movt	r4, #8
   807e0:	47a0      	blx	r4
   807e2:	f648 43a8 	movw	r3, #36008	; 0x8ca8
   807e6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   807ea:	e9c3 0100 	strd	r0, r1, [r3]

		
			update_fan_cycle((int)u,activeFan);
   807ee:	f244 22b5 	movw	r2, #17077	; 0x42b5
   807f2:	f2c0 0208 	movt	r2, #8
   807f6:	4790      	blx	r2
   807f8:	f648 41a0 	movw	r1, #36000	; 0x8ca0
   807fc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80800:	6809      	ldr	r1, [r1, #0]
   80802:	f240 639d 	movw	r3, #1693	; 0x69d
   80806:	f2c0 0308 	movt	r3, #8
   8080a:	4798      	blx	r3
   8080c:	bd70      	pop	{r4, r5, r6, pc}
   8080e:	bf00      	nop

00080810 <start_controller_front>:
int current_buffert_front[buffert_size] = {0};
int current_value;

/* Start the communication task */
void start_controller_front(void *p)
{
   80810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80814:	b082      	sub	sp, #8
	
 	portTickType xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount(); //Retrieve the startup tick timer
   80816:	f641 737d 	movw	r3, #8061	; 0x1f7d
   8081a:	f2c0 0308 	movt	r3, #8
   8081e:	4798      	blx	r3
   80820:	f8ad 0006 	strh.w	r0, [sp, #6]
	
	/* Simple infinite loop, printing text with a given delay */
 	while(1)
	 {
		//ioport_set_pin_level(PIO_PD1_IDX,HIGH);
		adc_start(ADC);
   80824:	f04f 0400 	mov.w	r4, #0
   80828:	f2c4 040c 	movt	r4, #16396	; 0x400c
   8082c:	f240 3ac9 	movw	sl, #969	; 0x3c9
   80830:	f2c0 0a08 	movt	sl, #8

		// Wait for the end of conversion, check if data is ready
		while ((adc_get_status(ADC) & ADC_ISR_DRDY) != ADC_ISR_DRDY);
   80834:	f240 35dd 	movw	r5, #989	; 0x3dd
   80838:	f2c0 0508 	movt	r5, #8
		int front_left_inductor;
		front_left_inductor = ADC->ADC_CDR[4];
		int front_right_inductor;
		front_right_inductor = ADC->ADC_CDR[3];
			
		xSemaphoreTake(semaphore_adc_values,portMAX_DELAY); // Take semaphore
   8083c:	f640 183c 	movw	r8, #2364	; 0x93c
   80840:	f2c2 0807 	movt	r8, #8199	; 0x2007
   80844:	f641 197d 	movw	r9, #6525	; 0x197d
   80848:	f2c0 0908 	movt	r9, #8
	
	/* Simple infinite loop, printing text with a given delay */
 	while(1)
	 {
		//ioport_set_pin_level(PIO_PD1_IDX,HIGH);
		adc_start(ADC);
   8084c:	4620      	mov	r0, r4
   8084e:	47d0      	blx	sl

		// Wait for the end of conversion, check if data is ready
		while ((adc_get_status(ADC) & ADC_ISR_DRDY) != ADC_ISR_DRDY);
   80850:	4620      	mov	r0, r4
   80852:	47a8      	blx	r5
   80854:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   80858:	d0fa      	beq.n	80850 <start_controller_front+0x40>
		
		int front_left_inductor;
		front_left_inductor = ADC->ADC_CDR[4];
   8085a:	6e27      	ldr	r7, [r4, #96]	; 0x60
		int front_right_inductor;
		front_right_inductor = ADC->ADC_CDR[3];
   8085c:	6de6      	ldr	r6, [r4, #92]	; 0x5c
			
		xSemaphoreTake(semaphore_adc_values,portMAX_DELAY); // Take semaphore
   8085e:	f8d8 0000 	ldr.w	r0, [r8]
   80862:	f04f 0100 	mov.w	r1, #0
   80866:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8086a:	460b      	mov	r3, r1
   8086c:	47c8      	blx	r9
		adc_value_front_left = front_left_inductor;
   8086e:	f640 00f8 	movw	r0, #2296	; 0x8f8
   80872:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80876:	6007      	str	r7, [r0, #0]
		adc_value_front_right = front_right_inductor;
   80878:	f640 01ec 	movw	r1, #2284	; 0x8ec
   8087c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80880:	600e      	str	r6, [r1, #0]
		xSemaphoreGive(semaphore_adc_values); // Take semaphore
   80882:	f8d8 0000 	ldr.w	r0, [r8]
   80886:	f04f 0100 	mov.w	r1, #0
   8088a:	460a      	mov	r2, r1
   8088c:	460b      	mov	r3, r1
   8088e:	f241 7c4d 	movw	ip, #5965	; 0x174d
   80892:	f2c0 0c08 	movt	ip, #8
   80896:	47e0      	blx	ip
		
		controll_front(front_left_inductor,front_right_inductor);
   80898:	4638      	mov	r0, r7
   8089a:	4631      	mov	r1, r6
   8089c:	f240 62e9 	movw	r2, #1769	; 0x6e9
   808a0:	f2c0 0208 	movt	r2, #8
   808a4:	4790      	blx	r2
		
 		vTaskDelayUntil(&xLastWakeTime,CONTROLLER_SCHEDULE_TIME);
   808a6:	f10d 0006 	add.w	r0, sp, #6
   808aa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   808ae:	f242 332d 	movw	r3, #9005	; 0x232d
   808b2:	f2c0 0308 	movt	r3, #8
   808b6:	4798      	blx	r3
 	}
   808b8:	e7c8      	b.n	8084c <start_controller_front+0x3c>
   808ba:	bf00      	nop

000808bc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   808bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   808be:	b083      	sub	sp, #12
   808c0:	4604      	mov	r4, r0
   808c2:	460d      	mov	r5, r1
	uint32_t val;

#ifdef UART
	if (UART == (Uart*)p_usart) {
   808c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   808c8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   808cc:	4298      	cmp	r0, r3
   808ce:	d10d      	bne.n	808ec <usart_serial_getchar+0x30>
		while (uart_read((Uart*)p_usart, data));
   808d0:	f44f 6600 	mov.w	r6, #2048	; 0x800
   808d4:	f2c4 060e 	movt	r6, #16398	; 0x400e
   808d8:	f240 473d 	movw	r7, #1085	; 0x43d
   808dc:	f2c0 0708 	movt	r7, #8
   808e0:	4630      	mov	r0, r6
   808e2:	4629      	mov	r1, r5
   808e4:	47b8      	blx	r7
   808e6:	2800      	cmp	r0, #0
   808e8:	d1fa      	bne.n	808e0 <usart_serial_getchar+0x24>
   808ea:	e02b      	b.n	80944 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   808ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   808f0:	f2c4 0009 	movt	r0, #16393	; 0x4009
   808f4:	4284      	cmp	r4, r0
   808f6:	d10f      	bne.n	80918 <usart_serial_getchar+0x5c>
		while (usart_read(p_usart, &val));
   808f8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   808fc:	f2c4 0609 	movt	r6, #16393	; 0x4009
   80900:	f240 4775 	movw	r7, #1141	; 0x475
   80904:	f2c0 0708 	movt	r7, #8
   80908:	4630      	mov	r0, r6
   8090a:	a901      	add	r1, sp, #4
   8090c:	47b8      	blx	r7
   8090e:	2800      	cmp	r0, #0
   80910:	d1fa      	bne.n	80908 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
   80912:	9b01      	ldr	r3, [sp, #4]
   80914:	702b      	strb	r3, [r5, #0]
   80916:	e02b      	b.n	80970 <usart_serial_getchar+0xb4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80918:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   8091c:	f2c4 0109 	movt	r1, #16393	; 0x4009
   80920:	428c      	cmp	r4, r1
   80922:	d10f      	bne.n	80944 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80924:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   80928:	f2c4 0409 	movt	r4, #16393	; 0x4009
   8092c:	f240 4675 	movw	r6, #1141	; 0x475
   80930:	f2c0 0608 	movt	r6, #8
   80934:	4620      	mov	r0, r4
   80936:	a901      	add	r1, sp, #4
   80938:	47b0      	blx	r6
   8093a:	2800      	cmp	r0, #0
   8093c:	d1fa      	bne.n	80934 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   8093e:	9a01      	ldr	r2, [sp, #4]
   80940:	702a      	strb	r2, [r5, #0]
   80942:	e02a      	b.n	8099a <usart_serial_getchar+0xde>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80944:	f04f 0000 	mov.w	r0, #0
   80948:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8094c:	4284      	cmp	r4, r0
   8094e:	d10f      	bne.n	80970 <usart_serial_getchar+0xb4>
		while (usart_read(p_usart, &val));
   80950:	f04f 0400 	mov.w	r4, #0
   80954:	f2c4 040a 	movt	r4, #16394	; 0x400a
   80958:	f240 4675 	movw	r6, #1141	; 0x475
   8095c:	f2c0 0608 	movt	r6, #8
   80960:	4620      	mov	r0, r4
   80962:	a901      	add	r1, sp, #4
   80964:	47b0      	blx	r6
   80966:	2800      	cmp	r0, #0
   80968:	d1fa      	bne.n	80960 <usart_serial_getchar+0xa4>
		*data = (uint8_t)(val & 0xFF);
   8096a:	9b01      	ldr	r3, [sp, #4]
   8096c:	702b      	strb	r3, [r5, #0]
   8096e:	e014      	b.n	8099a <usart_serial_getchar+0xde>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80970:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80974:	f2c4 010a 	movt	r1, #16394	; 0x400a
   80978:	428c      	cmp	r4, r1
   8097a:	d10e      	bne.n	8099a <usart_serial_getchar+0xde>
		while (usart_read(p_usart, &val));
   8097c:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   80980:	f2c4 040a 	movt	r4, #16394	; 0x400a
   80984:	f240 4675 	movw	r6, #1141	; 0x475
   80988:	f2c0 0608 	movt	r6, #8
   8098c:	4620      	mov	r0, r4
   8098e:	a901      	add	r1, sp, #4
   80990:	47b0      	blx	r6
   80992:	2800      	cmp	r0, #0
   80994:	d1fa      	bne.n	8098c <usart_serial_getchar+0xd0>
		*data = (uint8_t)(val & 0xFF);
   80996:	9a01      	ldr	r2, [sp, #4]
   80998:	702a      	strb	r2, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8099a:	b003      	add	sp, #12
   8099c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8099e:	bf00      	nop

000809a0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   809a0:	b570      	push	{r4, r5, r6, lr}
   809a2:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   809a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   809a8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   809ac:	4298      	cmp	r0, r3
   809ae:	d10f      	bne.n	809d0 <usart_serial_putchar+0x30>
		while (uart_write((Uart*)p_usart, c)!=0);
   809b0:	f44f 6500 	mov.w	r5, #2048	; 0x800
   809b4:	f2c4 050e 	movt	r5, #16398	; 0x400e
   809b8:	f240 4625 	movw	r6, #1061	; 0x425
   809bc:	f2c0 0608 	movt	r6, #8
   809c0:	4628      	mov	r0, r5
   809c2:	4621      	mov	r1, r4
   809c4:	47b0      	blx	r6
   809c6:	2800      	cmp	r0, #0
   809c8:	d1fa      	bne.n	809c0 <usart_serial_putchar+0x20>
		return 1;
   809ca:	f04f 0001 	mov.w	r0, #1
   809ce:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   809d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   809d4:	f2c4 0109 	movt	r1, #16393	; 0x4009
   809d8:	4288      	cmp	r0, r1
   809da:	d10f      	bne.n	809fc <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   809dc:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   809e0:	f2c4 0509 	movt	r5, #16393	; 0x4009
   809e4:	f240 4655 	movw	r6, #1109	; 0x455
   809e8:	f2c0 0608 	movt	r6, #8
   809ec:	4628      	mov	r0, r5
   809ee:	4621      	mov	r1, r4
   809f0:	47b0      	blx	r6
   809f2:	2800      	cmp	r0, #0
   809f4:	d1fa      	bne.n	809ec <usart_serial_putchar+0x4c>
		return 1;
   809f6:	f04f 0001 	mov.w	r0, #1
   809fa:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   809fc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   80a00:	f2c4 0209 	movt	r2, #16393	; 0x4009
   80a04:	4290      	cmp	r0, r2
   80a06:	d10f      	bne.n	80a28 <usart_serial_putchar+0x88>
		while (usart_write(p_usart, c)!=0);
   80a08:	f44f 4540 	mov.w	r5, #49152	; 0xc000
   80a0c:	f2c4 0509 	movt	r5, #16393	; 0x4009
   80a10:	f240 4655 	movw	r6, #1109	; 0x455
   80a14:	f2c0 0608 	movt	r6, #8
   80a18:	4628      	mov	r0, r5
   80a1a:	4621      	mov	r1, r4
   80a1c:	47b0      	blx	r6
   80a1e:	2800      	cmp	r0, #0
   80a20:	d1fa      	bne.n	80a18 <usart_serial_putchar+0x78>
		return 1;
   80a22:	f04f 0001 	mov.w	r0, #1
   80a26:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80a28:	f04f 0300 	mov.w	r3, #0
   80a2c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   80a30:	4298      	cmp	r0, r3
   80a32:	d10f      	bne.n	80a54 <usart_serial_putchar+0xb4>
		while (usart_write(p_usart, c)!=0);
   80a34:	f04f 0500 	mov.w	r5, #0
   80a38:	f2c4 050a 	movt	r5, #16394	; 0x400a
   80a3c:	f240 4655 	movw	r6, #1109	; 0x455
   80a40:	f2c0 0608 	movt	r6, #8
   80a44:	4628      	mov	r0, r5
   80a46:	4621      	mov	r1, r4
   80a48:	47b0      	blx	r6
   80a4a:	2800      	cmp	r0, #0
   80a4c:	d1fa      	bne.n	80a44 <usart_serial_putchar+0xa4>
		return 1;
   80a4e:	f04f 0001 	mov.w	r0, #1
   80a52:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80a54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80a58:	f2c4 010a 	movt	r1, #16394	; 0x400a
   80a5c:	4288      	cmp	r0, r1
   80a5e:	d10f      	bne.n	80a80 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
   80a60:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   80a64:	f2c4 050a 	movt	r5, #16394	; 0x400a
   80a68:	f240 4655 	movw	r6, #1109	; 0x455
   80a6c:	f2c0 0608 	movt	r6, #8
   80a70:	4628      	mov	r0, r5
   80a72:	4621      	mov	r1, r4
   80a74:	47b0      	blx	r6
   80a76:	2800      	cmp	r0, #0
   80a78:	d1fa      	bne.n	80a70 <usart_serial_putchar+0xd0>
		return 1;
   80a7a:	f04f 0001 	mov.w	r0, #1
   80a7e:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80a80:	f04f 0000 	mov.w	r0, #0
}
   80a84:	bd70      	pop	{r4, r5, r6, pc}
   80a86:	bf00      	nop

00080a88 <init_pwm>:
	
}

/* Initialize pwm */
void init_pwm(void)
{
   80a88:	b508      	push	{r3, lr}
	initialize_pwm();
   80a8a:	f640 5345 	movw	r3, #3397	; 0xd45
   80a8e:	f2c0 0308 	movt	r3, #8
   80a92:	4798      	blx	r3
	
	/* Initialize the pwm signals with the given dutycycle (0-999) */
	update_duty_cycle_DAC1(700);		
   80a94:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   80a98:	f640 7139 	movw	r1, #3897	; 0xf39
   80a9c:	f2c0 0108 	movt	r1, #8
   80aa0:	4788      	blx	r1
 	update_duty_cycle_36(800);
   80aa2:	f44f 7048 	mov.w	r0, #800	; 0x320
   80aa6:	f640 7265 	movw	r2, #3941	; 0xf65
   80aaa:	f2c0 0208 	movt	r2, #8
   80aae:	4790      	blx	r2
 	update_duty_cycle_38(500);
   80ab0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   80ab4:	f640 7391 	movw	r3, #3985	; 0xf91
   80ab8:	f2c0 0308 	movt	r3, #8
   80abc:	4798      	blx	r3
 	update_duty_cycle_40(400);
   80abe:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80ac2:	f640 71bd 	movw	r1, #4029	; 0xfbd
   80ac6:	f2c0 0108 	movt	r1, #8
   80aca:	4788      	blx	r1
 	update_duty_cycle_9(900);
   80acc:	f44f 7061 	mov.w	r0, #900	; 0x384
   80ad0:	f640 72e9 	movw	r2, #4073	; 0xfe9
   80ad4:	f2c0 0208 	movt	r2, #8
   80ad8:	4790      	blx	r2
   80ada:	bd08      	pop	{r3, pc}

00080adc <init_tasks>:

}

/* Initialize and create the tasks*/
void init_tasks(void)
{
   80adc:	b510      	push	{r4, lr}
   80ade:	b084      	sub	sp, #16
	/* Create and start the front controller task */
 	if(xTaskCreate(start_controller_front,(const signed char * const) "Front controller", 2048, NULL, 2, NULL) !=pdPASS)
   80ae0:	f04f 0302 	mov.w	r3, #2
   80ae4:	9300      	str	r3, [sp, #0]
   80ae6:	f04f 0300 	mov.w	r3, #0
   80aea:	9301      	str	r3, [sp, #4]
   80aec:	9302      	str	r3, [sp, #8]
   80aee:	9303      	str	r3, [sp, #12]
   80af0:	f640 0011 	movw	r0, #2065	; 0x811
   80af4:	f2c0 0008 	movt	r0, #8
   80af8:	f646 21bc 	movw	r1, #27324	; 0x6abc
   80afc:	f2c0 0108 	movt	r1, #8
   80b00:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80b04:	f641 4425 	movw	r4, #7205	; 0x1c25
   80b08:	f2c0 0408 	movt	r4, #8
   80b0c:	47a0      	blx	r4
   80b0e:	2801      	cmp	r0, #1
   80b10:	d008      	beq.n	80b24 <init_tasks+0x48>
 	{
 		printf("Could not create task Front controller");
   80b12:	f646 20d0 	movw	r0, #27344	; 0x6ad0
   80b16:	f2c0 0008 	movt	r0, #8
   80b1a:	f244 4119 	movw	r1, #17433	; 0x4419
   80b1e:	f2c0 0108 	movt	r1, #8
   80b22:	4788      	blx	r1
 	}
	
	/* Create and start the front controller task */
	if(xTaskCreate(start_controller_back,(const signed char * const) "Back controller", 2048, NULL, 2, NULL) !=pdPASS)
   80b24:	f04f 0002 	mov.w	r0, #2
   80b28:	9000      	str	r0, [sp, #0]
   80b2a:	f04f 0300 	mov.w	r3, #0
   80b2e:	9301      	str	r3, [sp, #4]
   80b30:	9302      	str	r3, [sp, #8]
   80b32:	9303      	str	r3, [sp, #12]
   80b34:	f240 50f1 	movw	r0, #1521	; 0x5f1
   80b38:	f2c0 0008 	movt	r0, #8
   80b3c:	f646 21f8 	movw	r1, #27384	; 0x6af8
   80b40:	f2c0 0108 	movt	r1, #8
   80b44:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80b48:	f641 4425 	movw	r4, #7205	; 0x1c25
   80b4c:	f2c0 0408 	movt	r4, #8
   80b50:	47a0      	blx	r4
   80b52:	2801      	cmp	r0, #1
   80b54:	d008      	beq.n	80b68 <init_tasks+0x8c>
	{
		printf("Could not create task Back controller");
   80b56:	f646 3008 	movw	r0, #27400	; 0x6b08
   80b5a:	f2c0 0008 	movt	r0, #8
   80b5e:	f244 4219 	movw	r2, #17433	; 0x4419
   80b62:	f2c0 0208 	movt	r2, #8
   80b66:	4790      	blx	r2
	}
	
	/* Create and start the communication task */
 	if(xTaskCreate(start_communication,(const signed char * const) "Communication", 2048, NULL, 1, NULL) !=pdPASS)
   80b68:	f04f 0301 	mov.w	r3, #1
   80b6c:	9300      	str	r3, [sp, #0]
   80b6e:	f04f 0300 	mov.w	r3, #0
   80b72:	9301      	str	r3, [sp, #4]
   80b74:	9302      	str	r3, [sp, #8]
   80b76:	9303      	str	r3, [sp, #12]
   80b78:	f241 0015 	movw	r0, #4117	; 0x1015
   80b7c:	f2c0 0008 	movt	r0, #8
   80b80:	f646 3130 	movw	r1, #27440	; 0x6b30
   80b84:	f2c0 0108 	movt	r1, #8
   80b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80b8c:	f641 4425 	movw	r4, #7205	; 0x1c25
   80b90:	f2c0 0408 	movt	r4, #8
   80b94:	47a0      	blx	r4
   80b96:	2801      	cmp	r0, #1
   80b98:	d008      	beq.n	80bac <init_tasks+0xd0>
 	{
 		printf("Could not create task Communication");
   80b9a:	f646 3040 	movw	r0, #27456	; 0x6b40
   80b9e:	f2c0 0008 	movt	r0, #8
   80ba2:	f244 4119 	movw	r1, #17433	; 0x4419
   80ba6:	f2c0 0108 	movt	r1, #8
   80baa:	4788      	blx	r1
 	}
	
	vTaskStartScheduler(); // Start the tasks
   80bac:	f641 60e1 	movw	r0, #7905	; 0x1ee1
   80bb0:	f2c0 0008 	movt	r0, #8
   80bb4:	4780      	blx	r0
}
   80bb6:	b004      	add	sp, #16
   80bb8:	bd10      	pop	{r4, pc}
   80bba:	bf00      	nop

00080bbc <init_sempahores>:

/* Initialize the semaphores */
void init_sempahores(void)
{
   80bbc:	b510      	push	{r4, lr}
	vSemaphoreCreateBinary(semahpore_duty_cycles);
   80bbe:	f04f 0001 	mov.w	r0, #1
   80bc2:	f04f 0100 	mov.w	r1, #0
   80bc6:	f04f 0203 	mov.w	r2, #3
   80bca:	f241 63e1 	movw	r3, #5857	; 0x16e1
   80bce:	f2c0 0308 	movt	r3, #8
   80bd2:	4798      	blx	r3
   80bd4:	f640 1140 	movw	r1, #2368	; 0x940
   80bd8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80bdc:	6008      	str	r0, [r1, #0]
   80bde:	b140      	cbz	r0, 80bf2 <init_sempahores+0x36>
   80be0:	f04f 0100 	mov.w	r1, #0
   80be4:	460a      	mov	r2, r1
   80be6:	460b      	mov	r3, r1
   80be8:	f241 744d 	movw	r4, #5965	; 0x174d
   80bec:	f2c0 0408 	movt	r4, #8
   80bf0:	47a0      	blx	r4
	vSemaphoreCreateBinary(semaphore_adc_values);
   80bf2:	f04f 0001 	mov.w	r0, #1
   80bf6:	f04f 0100 	mov.w	r1, #0
   80bfa:	f04f 0203 	mov.w	r2, #3
   80bfe:	f241 63e1 	movw	r3, #5857	; 0x16e1
   80c02:	f2c0 0308 	movt	r3, #8
   80c06:	4798      	blx	r3
   80c08:	f640 123c 	movw	r2, #2364	; 0x93c
   80c0c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80c10:	6010      	str	r0, [r2, #0]
   80c12:	b140      	cbz	r0, 80c26 <init_sempahores+0x6a>
   80c14:	f04f 0100 	mov.w	r1, #0
   80c18:	460a      	mov	r2, r1
   80c1a:	460b      	mov	r3, r1
   80c1c:	f241 744d 	movw	r4, #5965	; 0x174d
   80c20:	f2c0 0408 	movt	r4, #8
   80c24:	47a0      	blx	r4
   80c26:	bd10      	pop	{r4, pc}

00080c28 <main>:
	
	#endif
}

int main(void)
{
   80c28:	b530      	push	{r4, r5, lr}
   80c2a:	b085      	sub	sp, #20
	/* Setup */
	sysclk_init();
   80c2c:	f642 7389 	movw	r3, #12169	; 0x2f89
   80c30:	f2c0 0308 	movt	r3, #8
   80c34:	4798      	blx	r3
	board_init();
   80c36:	f243 0015 	movw	r0, #12309	; 0x3015
   80c3a:	f2c0 0008 	movt	r0, #8
   80c3e:	4780      	blx	r0
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80c40:	f04f 000b 	mov.w	r0, #11
   80c44:	f243 6465 	movw	r4, #13925	; 0x3665
   80c48:	f2c0 0408 	movt	r4, #8
   80c4c:	47a0      	blx	r4
   80c4e:	f04f 000c 	mov.w	r0, #12
   80c52:	47a0      	blx	r4
   80c54:	f04f 000d 	mov.w	r0, #13
   80c58:	47a0      	blx	r4
   80c5a:	f04f 000e 	mov.w	r0, #14
   80c5e:	47a0      	blx	r4
   80c60:	f04f 0008 	mov.w	r0, #8
   80c64:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80c66:	f44f 6500 	mov.w	r5, #2048	; 0x800
   80c6a:	f2c4 050e 	movt	r5, #16398	; 0x400e
   80c6e:	f648 4178 	movw	r1, #35960	; 0x8c78
   80c72:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80c76:	600d      	str	r5, [r1, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80c78:	f648 4374 	movw	r3, #35956	; 0x8c74
   80c7c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80c80:	f640 12a1 	movw	r2, #2465	; 0x9a1
   80c84:	f2c0 0208 	movt	r2, #8
   80c88:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80c8a:	f648 4070 	movw	r0, #35952	; 0x8c70
   80c8e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80c92:	f640 01bd 	movw	r1, #2237	; 0x8bd
   80c96:	f2c0 0108 	movt	r1, #8
   80c9a:	6001      	str	r1, [r0, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80c9c:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
   80ca0:	f2c0 5301 	movt	r3, #1281	; 0x501
   80ca4:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   80ca6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   80caa:	9201      	str	r2, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   80cac:	f44f 6000 	mov.w	r0, #2048	; 0x800
   80cb0:	9002      	str	r0, [sp, #8]
   80cb2:	f04f 0008 	mov.w	r0, #8
   80cb6:	47a0      	blx	r4
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80cb8:	4628      	mov	r0, r5
   80cba:	4669      	mov	r1, sp
   80cbc:	f240 34e1 	movw	r4, #993	; 0x3e1
   80cc0:	f2c0 0408 	movt	r4, #8
   80cc4:	47a0      	blx	r4
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80cc6:	f240 0510 	movw	r5, #16
   80cca:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80cce:	6829      	ldr	r1, [r5, #0]
   80cd0:	6888      	ldr	r0, [r1, #8]
   80cd2:	f04f 0100 	mov.w	r1, #0
   80cd6:	f244 447b 	movw	r4, #17531	; 0x447b
   80cda:	f2c0 0408 	movt	r4, #8
   80cde:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80ce0:	682b      	ldr	r3, [r5, #0]
   80ce2:	6858      	ldr	r0, [r3, #4]
   80ce4:	f04f 0100 	mov.w	r1, #0
   80ce8:	47a0      	blx	r4
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   80cea:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   80cee:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80cf2:	f44f 7280 	mov.w	r2, #256	; 0x100
   80cf6:	6642      	str	r2, [r0, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80cf8:	6542      	str	r2, [r0, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80cfa:	6242      	str	r2, [r0, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80cfc:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   80d00:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80d02:	f421 7380 	bic.w	r3, r1, #256	; 0x100
   80d06:	6703      	str	r3, [r0, #112]	; 0x70
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	ioport_set_pin_mode(PIO_PA8_IDX,IOPORT_MODE_PULLUP);// No stdout buffer
	#if defined(__GNUC__)
	setbuf(stdout, NULL);
   80d08:	6828      	ldr	r0, [r5, #0]
   80d0a:	6880      	ldr	r0, [r0, #8]
   80d0c:	f04f 0100 	mov.w	r1, #0
   80d10:	47a0      	blx	r4
	board_init();
	ioport_init();
	configure_console();
	
	/* Initialize program */
	init_adc();
   80d12:	f240 12a5 	movw	r2, #421	; 0x1a5
   80d16:	f2c0 0208 	movt	r2, #8
   80d1a:	4790      	blx	r2
	init_pwm();
   80d1c:	f640 2189 	movw	r1, #2697	; 0xa89
   80d20:	f2c0 0108 	movt	r1, #8
   80d24:	4788      	blx	r1
	init_sempahores();
   80d26:	f640 33bd 	movw	r3, #3005	; 0xbbd
   80d2a:	f2c0 0308 	movt	r3, #8
   80d2e:	4798      	blx	r3
	//init_code_pins();
	init_tasks();
   80d30:	f640 20dd 	movw	r0, #2781	; 0xadd
   80d34:	f2c0 0008 	movt	r0, #8
   80d38:	4780      	blx	r0
	
}
   80d3a:	f04f 0000 	mov.w	r0, #0
   80d3e:	b005      	add	sp, #20
   80d40:	bd30      	pop	{r4, r5, pc}
   80d42:	bf00      	nop

00080d44 <initialize_pwm>:
int duty_cycle_9 = 0;
int duty_cycle_DAC1= 0;

/* Function for initialize PWM on pins DAC1, 9, 36, 38 and 40 */
void initialize_pwm(void)
{
   80d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80d48:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_PWM);
   80d4a:	f04f 0024 	mov.w	r0, #36	; 0x24
   80d4e:	f243 6565 	movw	r5, #13925	; 0x3665
   80d52:	f2c0 0508 	movt	r5, #8
   80d56:	47a8      	blx	r5
	pwm_channel_enable(PWM, PWM_CHANNEL_0);
   80d58:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   80d5c:	f2c4 0409 	movt	r4, #16393	; 0x4009
   80d60:	4620      	mov	r0, r4
   80d62:	f04f 0100 	mov.w	r1, #0
   80d66:	f642 7671 	movw	r6, #12145	; 0x2f71
   80d6a:	f2c0 0608 	movt	r6, #8
   80d6e:	47b0      	blx	r6
	pwm_channel_enable(PWM, PWM_CHANNEL_1);
   80d70:	4620      	mov	r0, r4
   80d72:	f04f 0101 	mov.w	r1, #1
   80d76:	47b0      	blx	r6
	pwm_channel_enable(PWM, PWM_CHANNEL_2);
   80d78:	4620      	mov	r0, r4
   80d7a:	f04f 0102 	mov.w	r1, #2
   80d7e:	47b0      	blx	r6
	pwm_channel_enable(PWM, PWM_CHANNEL_3);
   80d80:	4620      	mov	r0, r4
   80d82:	f04f 0103 	mov.w	r1, #3
   80d86:	47b0      	blx	r6
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   80d88:	4620      	mov	r0, r4
   80d8a:	f04f 0104 	mov.w	r1, #4
   80d8e:	47b0      	blx	r6
	
	/* General clock settings for the PWM */
	pmc_enable_periph_clk(ID_PWM);
   80d90:	f04f 0024 	mov.w	r0, #36	; 0x24
   80d94:	47a8      	blx	r5
	pwm_clock_t clock_setting = {
   80d96:	f643 6358 	movw	r3, #15960	; 0x3e58
   80d9a:	f2c0 030f 	movt	r3, #15
   80d9e:	9301      	str	r3, [sp, #4]
   80da0:	f04f 0500 	mov.w	r5, #0
   80da4:	9502      	str	r5, [sp, #8]
   80da6:	f44f 40f4 	mov.w	r0, #31232	; 0x7a00
   80daa:	f6c0 2003 	movt	r0, #2563	; 0xa03
   80dae:	9003      	str	r0, [sp, #12]
		.ul_clka = PWM_FREQUENCY * PWM_RESOLUTION,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_main_hz()
	};
	pwm_init(PWM, &clock_setting);
   80db0:	4620      	mov	r0, r4
   80db2:	a901      	add	r1, sp, #4
   80db4:	f642 52d9 	movw	r2, #11737	; 0x2dd9
   80db8:	f2c0 0208 	movt	r2, #8
   80dbc:	4790      	blx	r2
	
	/* Disables the PWM channels for setup */
	pwm_channel_disable(PWM, PWM_CHANNEL_0);
   80dbe:	4620      	mov	r0, r4
   80dc0:	4629      	mov	r1, r5
   80dc2:	f642 777d 	movw	r7, #12157	; 0x2f7d
   80dc6:	f2c0 0708 	movt	r7, #8
   80dca:	47b8      	blx	r7
	pwm_channel_disable(PWM, PWM_CHANNEL_1);
   80dcc:	4620      	mov	r0, r4
   80dce:	f04f 0101 	mov.w	r1, #1
   80dd2:	47b8      	blx	r7
	pwm_channel_disable(PWM, PWM_CHANNEL_2);
   80dd4:	4620      	mov	r0, r4
   80dd6:	f04f 0102 	mov.w	r1, #2
   80dda:	47b8      	blx	r7
	pwm_channel_disable(PWM, PWM_CHANNEL_3);
   80ddc:	4620      	mov	r0, r4
   80dde:	f04f 0103 	mov.w	r1, #3
   80de2:	47b8      	blx	r7
	pwm_channel_disable(PWM, PWM_CHANNEL_4);
   80de4:	4620      	mov	r0, r4
   80de6:	f04f 0104 	mov.w	r1, #4
   80dea:	47b8      	blx	r7
	
	
	/* DAC1 */
	pwm_channel_DAC1.alignment = PWM_ALIGN_LEFT;
   80dec:	f640 1170 	movw	r1, #2416	; 0x970
   80df0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80df4:	46ab      	mov	fp, r5
   80df6:	810d      	strh	r5, [r1, #8]
	pwm_channel_DAC1.polarity = PWM_POLARITY;
   80df8:	728d      	strb	r5, [r1, #10]
	pwm_channel_DAC1.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80dfa:	f04f 0a0b 	mov.w	sl, #11
   80dfe:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_DAC1.ul_period = PWM_RESOLUTION;
   80e02:	f240 39e7 	movw	r9, #999	; 0x3e7
   80e06:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_DAC1.ul_duty = 0;
   80e0a:	60cd      	str	r5, [r1, #12]
	pwm_channel_DAC1.channel = PWM_CHANNEL_0;
   80e0c:	600d      	str	r5, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_DAC1);
   80e0e:	4620      	mov	r0, r4
   80e10:	f642 6325 	movw	r3, #11813	; 0x2e25
   80e14:	f2c0 0308 	movt	r3, #8
   80e18:	4798      	blx	r3
	pio_set_peripheral(PWM_PIO_B, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_DAC1);
   80e1a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   80e1e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80e22:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80e26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80e2a:	f243 07c5 	movw	r7, #12485	; 0x30c5
   80e2e:	46b8      	mov	r8, r7
   80e30:	f2c0 0808 	movt	r8, #8
   80e34:	47c0      	blx	r8
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_0);
   80e36:	4620      	mov	r0, r4
   80e38:	4629      	mov	r1, r5
   80e3a:	47b0      	blx	r6
	
	/* Pin 36 */
	pwm_channel_36.alignment = PWM_ALIGN_LEFT;
   80e3c:	f640 11c4 	movw	r1, #2500	; 0x9c4
   80e40:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80e44:	810d      	strh	r5, [r1, #8]
	pwm_channel_36.polarity = PWM_POLARITY;
   80e46:	728d      	strb	r5, [r1, #10]
	pwm_channel_36.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80e48:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_36.ul_period = PWM_RESOLUTION;
   80e4c:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_36.ul_duty = 0;
   80e50:	60cd      	str	r5, [r1, #12]
	pwm_channel_36.channel = PWM_CHANNEL_1;
   80e52:	f04f 0001 	mov.w	r0, #1
   80e56:	6008      	str	r0, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_36);
   80e58:	4620      	mov	r0, r4
   80e5a:	f642 6225 	movw	r2, #11813	; 0x2e25
   80e5e:	f2c0 0208 	movt	r2, #8
   80e62:	4790      	blx	r2
	pio_set_peripheral(PWM_PIO_C, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_36);
   80e64:	f44f 5790 	mov.w	r7, #4608	; 0x1200
   80e68:	f2c4 070e 	movt	r7, #16398	; 0x400e
   80e6c:	4638      	mov	r0, r7
   80e6e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80e72:	f04f 0210 	mov.w	r2, #16
   80e76:	47c0      	blx	r8
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_1);
   80e78:	4620      	mov	r0, r4
   80e7a:	f04f 0101 	mov.w	r1, #1
   80e7e:	47b0      	blx	r6
	
	/* Pin 38 */
	pwm_channel_38.alignment = PWM_ALIGN_LEFT;
   80e80:	f640 11f0 	movw	r1, #2544	; 0x9f0
   80e84:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80e88:	810d      	strh	r5, [r1, #8]
	pwm_channel_38.polarity = PWM_POLARITY;
   80e8a:	728d      	strb	r5, [r1, #10]
	pwm_channel_38.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80e8c:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_38.ul_period = PWM_RESOLUTION;
   80e90:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_38.ul_duty = 0;
   80e94:	60cd      	str	r5, [r1, #12]
	pwm_channel_38.channel = PWM_CHANNEL_2;
   80e96:	f04f 0302 	mov.w	r3, #2
   80e9a:	600b      	str	r3, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_38);
   80e9c:	4620      	mov	r0, r4
   80e9e:	f642 6225 	movw	r2, #11813	; 0x2e25
   80ea2:	f2c0 0208 	movt	r2, #8
   80ea6:	4790      	blx	r2
	pio_set_peripheral(PWM_PIO_C, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_38);
   80ea8:	4638      	mov	r0, r7
   80eaa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80eae:	f04f 0240 	mov.w	r2, #64	; 0x40
   80eb2:	47c0      	blx	r8
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_2);
   80eb4:	4620      	mov	r0, r4
   80eb6:	f04f 0102 	mov.w	r1, #2
   80eba:	47b0      	blx	r6
	
	/* Pin 40 */
	pwm_channel_40.alignment = PWM_ALIGN_LEFT;
   80ebc:	f640 119c 	movw	r1, #2460	; 0x99c
   80ec0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80ec4:	810d      	strh	r5, [r1, #8]
	pwm_channel_40.polarity = PWM_POLARITY;
   80ec6:	728d      	strb	r5, [r1, #10]
	pwm_channel_40.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80ec8:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_40.ul_period = PWM_RESOLUTION;
   80ecc:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_40.ul_duty = 0;
   80ed0:	60cd      	str	r5, [r1, #12]
	pwm_channel_40.channel = PWM_CHANNEL_3;
   80ed2:	f04f 0003 	mov.w	r0, #3
   80ed6:	6008      	str	r0, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_40);
   80ed8:	4620      	mov	r0, r4
   80eda:	f642 6325 	movw	r3, #11813	; 0x2e25
   80ede:	f2c0 0308 	movt	r3, #8
   80ee2:	4798      	blx	r3
	pio_set_peripheral(PWM_PIO_C, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_40);
   80ee4:	4638      	mov	r0, r7
   80ee6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80eea:	f44f 7280 	mov.w	r2, #256	; 0x100
   80eee:	47c0      	blx	r8
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_3);
   80ef0:	4620      	mov	r0, r4
   80ef2:	f04f 0103 	mov.w	r1, #3
   80ef6:	47b0      	blx	r6
	
	/* Pin 9 */
	pwm_channel_9.alignment = PWM_ALIGN_LEFT;
   80ef8:	f640 1148 	movw	r1, #2376	; 0x948
   80efc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80f00:	810d      	strh	r5, [r1, #8]
	pwm_channel_9.polarity = PWM_POLARITY;
   80f02:	728d      	strb	r5, [r1, #10]
	pwm_channel_9.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80f04:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_9.ul_period = PWM_RESOLUTION;
   80f08:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_9.ul_duty = 0;
   80f0c:	60cd      	str	r5, [r1, #12]
	pwm_channel_9.channel = PWM_CHANNEL_4;
   80f0e:	f04f 0504 	mov.w	r5, #4
   80f12:	600d      	str	r5, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_9);
   80f14:	4620      	mov	r0, r4
   80f16:	f642 6225 	movw	r2, #11813	; 0x2e25
   80f1a:	f2c0 0208 	movt	r2, #8
   80f1e:	4790      	blx	r2
	pio_set_peripheral(PWM_PIO_C, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_9);
   80f20:	4638      	mov	r0, r7
   80f22:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80f26:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   80f2a:	47c0      	blx	r8
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   80f2c:	4620      	mov	r0, r4
   80f2e:	4629      	mov	r1, r5
   80f30:	47b0      	blx	r6
}
   80f32:	b005      	add	sp, #20
   80f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00080f38 <update_duty_cycle_DAC1>:

/* Updates the dutycycle of the PWM signal on DAC1 */
void update_duty_cycle_DAC1(uint32_t duty_cycle_temp)
{
   80f38:	b508      	push	{r3, lr}
   80f3a:	4602      	mov	r2, r0
	duty_cycle_DAC1 = duty_cycle_temp;
   80f3c:	f640 1398 	movw	r3, #2456	; 0x998
   80f40:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80f44:	6018      	str	r0, [r3, #0]
	pwm_channel_update_duty(PWM, &pwm_channel_DAC1, duty_cycle_temp);
   80f46:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80f4a:	f2c4 0009 	movt	r0, #16393	; 0x4009
   80f4e:	f640 1170 	movw	r1, #2416	; 0x970
   80f52:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80f56:	f642 734d 	movw	r3, #12109	; 0x2f4d
   80f5a:	f2c0 0308 	movt	r3, #8
   80f5e:	4798      	blx	r3
   80f60:	bd08      	pop	{r3, pc}
   80f62:	bf00      	nop

00080f64 <update_duty_cycle_36>:
}

/* Update the dutycycle of the PWM signal on pin 36 */
void update_duty_cycle_36(uint32_t duty_cycle_temp)
{
   80f64:	b508      	push	{r3, lr}
   80f66:	4602      	mov	r2, r0
	duty_cycle_36 = duty_cycle_temp;
   80f68:	f640 231c 	movw	r3, #2588	; 0xa1c
   80f6c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80f70:	6018      	str	r0, [r3, #0]
	pwm_channel_update_duty(PWM, &pwm_channel_36, duty_cycle_temp);
   80f72:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80f76:	f2c4 0009 	movt	r0, #16393	; 0x4009
   80f7a:	f640 11c4 	movw	r1, #2500	; 0x9c4
   80f7e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80f82:	f642 734d 	movw	r3, #12109	; 0x2f4d
   80f86:	f2c0 0308 	movt	r3, #8
   80f8a:	4798      	blx	r3
   80f8c:	bd08      	pop	{r3, pc}
   80f8e:	bf00      	nop

00080f90 <update_duty_cycle_38>:
}

/* Updates the dutycycle of the PMW signal on pin 38 */
void update_duty_cycle_38(uint32_t duty_cycle_temp)
{
   80f90:	b508      	push	{r3, lr}
   80f92:	4602      	mov	r2, r0
	duty_cycle_38 = duty_cycle_temp;
   80f94:	f640 1344 	movw	r3, #2372	; 0x944
   80f98:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80f9c:	6018      	str	r0, [r3, #0]
	pwm_channel_update_duty(PWM, &pwm_channel_38, duty_cycle_temp);
   80f9e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80fa2:	f2c4 0009 	movt	r0, #16393	; 0x4009
   80fa6:	f640 11f0 	movw	r1, #2544	; 0x9f0
   80faa:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80fae:	f642 734d 	movw	r3, #12109	; 0x2f4d
   80fb2:	f2c0 0308 	movt	r3, #8
   80fb6:	4798      	blx	r3
   80fb8:	bd08      	pop	{r3, pc}
   80fba:	bf00      	nop

00080fbc <update_duty_cycle_40>:
}

/* Updates the dutycycle of the PWM signal on pin 40 */
void update_duty_cycle_40(uint32_t duty_cycle_temp)
{
   80fbc:	b508      	push	{r3, lr}
   80fbe:	4602      	mov	r2, r0
	duty_cycle_40 = duty_cycle_temp;
   80fc0:	f640 2318 	movw	r3, #2584	; 0xa18
   80fc4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80fc8:	6018      	str	r0, [r3, #0]
	pwm_channel_update_duty(PWM, &pwm_channel_40, duty_cycle_temp);
   80fca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80fce:	f2c4 0009 	movt	r0, #16393	; 0x4009
   80fd2:	f640 119c 	movw	r1, #2460	; 0x99c
   80fd6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80fda:	f642 734d 	movw	r3, #12109	; 0x2f4d
   80fde:	f2c0 0308 	movt	r3, #8
   80fe2:	4798      	blx	r3
   80fe4:	bd08      	pop	{r3, pc}
   80fe6:	bf00      	nop

00080fe8 <update_duty_cycle_9>:
}

/* Updates the dutycycle of the PWM signal on pin 9 */
void update_duty_cycle_9(uint32_t duty_cycle_temp)
{
   80fe8:	b508      	push	{r3, lr}
   80fea:	4602      	mov	r2, r0
	duty_cycle_9 = duty_cycle_temp;
   80fec:	f640 13ec 	movw	r3, #2540	; 0x9ec
   80ff0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80ff4:	6018      	str	r0, [r3, #0]
	pwm_channel_update_duty(PWM, &pwm_channel_9, duty_cycle_temp);
   80ff6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80ffa:	f2c4 0009 	movt	r0, #16393	; 0x4009
   80ffe:	f640 1148 	movw	r1, #2376	; 0x948
   81002:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81006:	f642 734d 	movw	r3, #12109	; 0x2f4d
   8100a:	f2c0 0308 	movt	r3, #8
   8100e:	4798      	blx	r3
   81010:	bd08      	pop	{r3, pc}
   81012:	bf00      	nop

00081014 <start_communication>:
#include "semaphores.h"
#include "values.h"

/* Start the communication task */
void start_communication(void *p)
{
   81014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81018:	b08d      	sub	sp, #52	; 0x34
	
 	portTickType xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount(); //Retrieve the startup tick timer
   8101a:	f641 737d 	movw	r3, #8061	; 0x1f7d
   8101e:	f2c0 0308 	movt	r3, #8
   81022:	4798      	blx	r3
   81024:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
	
	/* Simple infinite loop, printing text with a given delay */
 	while(1)	
	 {
		
		xSemaphoreTake(semahpore_duty_cycles,portMAX_DELAY); // Take semaphore
   81028:	f640 1040 	movw	r0, #2368	; 0x940
   8102c:	4681      	mov	r9, r0
   8102e:	f2c2 0907 	movt	r9, #8199	; 0x2007
   81032:	f641 117d 	movw	r1, #6525	; 0x197d
   81036:	460e      	mov	r6, r1
   81038:	f2c0 0608 	movt	r6, #8
   8103c:	f8d9 0000 	ldr.w	r0, [r9]
   81040:	f04f 0100 	mov.w	r1, #0
   81044:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81048:	460b      	mov	r3, r1
   8104a:	47b0      	blx	r6
		/* Store the duty cycle values temporarily in this file*/
		int duty_cycle_36_temp;
		duty_cycle_36_temp = duty_cycle_36;
   8104c:	f640 221c 	movw	r2, #2588	; 0xa1c
   81050:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81054:	f8d2 b000 	ldr.w	fp, [r2]
		int duty_cycle_38_temp;
		duty_cycle_38_temp = duty_cycle_38;
   81058:	f640 1444 	movw	r4, #2372	; 0x944
   8105c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   81060:	f8d4 a000 	ldr.w	sl, [r4]
		int duty_cycle_40_temp;
		duty_cycle_40_temp = duty_cycle_40;
   81064:	f640 2518 	movw	r5, #2584	; 0xa18
   81068:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8106c:	f8d5 8000 	ldr.w	r8, [r5]
		int duty_cycle_9_temp;
		duty_cycle_9_temp = duty_cycle_9;
   81070:	f640 17ec 	movw	r7, #2540	; 0x9ec
   81074:	f2c2 0707 	movt	r7, #8199	; 0x2007
   81078:	683b      	ldr	r3, [r7, #0]
   8107a:	9306      	str	r3, [sp, #24]
		int duty_cycle_DAC1_temp;
		duty_cycle_DAC1_temp = duty_cycle_DAC1;
		
		xSemaphoreGive(semahpore_duty_cycles); // Give back the semaphore
   8107c:	f8d9 0000 	ldr.w	r0, [r9]
   81080:	f04f 0100 	mov.w	r1, #0
   81084:	460a      	mov	r2, r1
   81086:	460b      	mov	r3, r1
   81088:	f241 744d 	movw	r4, #5965	; 0x174d
   8108c:	f2c0 0408 	movt	r4, #8
   81090:	47a0      	blx	r4
		
		xSemaphoreTake(semaphore_adc_values,portMAX_DELAY); // Take semaphore
   81092:	f640 153c 	movw	r5, #2364	; 0x93c
   81096:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8109a:	6828      	ldr	r0, [r5, #0]
   8109c:	f04f 0100 	mov.w	r1, #0
   810a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   810a4:	460b      	mov	r3, r1
   810a6:	47b0      	blx	r6
		/* Store the adc values temporarily in this file */
		int adc_value_back_left_temp;
		adc_value_back_left_temp = adc_value_back_left;
   810a8:	f640 00f4 	movw	r0, #2292	; 0x8f4
   810ac:	f2c2 0007 	movt	r0, #8199	; 0x2007
   810b0:	6801      	ldr	r1, [r0, #0]
   810b2:	9107      	str	r1, [sp, #28]
		int adc_value_back_right_temp = adc_value_back_right;
		adc_value_back_right_temp = adc_value_back_right;
   810b4:	f640 02f0 	movw	r2, #2288	; 0x8f0
   810b8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   810bc:	6817      	ldr	r7, [r2, #0]
   810be:	9708      	str	r7, [sp, #32]
		int adc_value_front_left_temp = adc_value_front_left;
		adc_value_front_left_temp = adc_value_front_left;
   810c0:	f640 03f8 	movw	r3, #2296	; 0x8f8
   810c4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   810c8:	6818      	ldr	r0, [r3, #0]
   810ca:	9009      	str	r0, [sp, #36]	; 0x24
		int adc_value_front_right_temp = adc_value_front_right;
		adc_value_front_right_temp = adc_value_front_right;
   810cc:	f640 01ec 	movw	r1, #2284	; 0x8ec
   810d0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   810d4:	680f      	ldr	r7, [r1, #0]
		
		xSemaphoreGive(semaphore_adc_values); // Give back the semaphore
   810d6:	6828      	ldr	r0, [r5, #0]
   810d8:	f04f 0100 	mov.w	r1, #0
   810dc:	460a      	mov	r2, r1
   810de:	460b      	mov	r3, r1
   810e0:	47a0      	blx	r4
		
		/* Print out duty cycle information */
		printf("%d,%d,%d,%d,%d,%d,%d,%d\n\r",duty_cycle_36_temp,duty_cycle_38_temp,duty_cycle_40_temp,duty_cycle_9_temp,
   810e2:	9c06      	ldr	r4, [sp, #24]
   810e4:	9400      	str	r4, [sp, #0]
   810e6:	9d07      	ldr	r5, [sp, #28]
   810e8:	9501      	str	r5, [sp, #4]
   810ea:	9a08      	ldr	r2, [sp, #32]
   810ec:	9202      	str	r2, [sp, #8]
   810ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   810f0:	9303      	str	r3, [sp, #12]
   810f2:	9704      	str	r7, [sp, #16]
   810f4:	f646 3064 	movw	r0, #27492	; 0x6b64
   810f8:	f2c0 0008 	movt	r0, #8
   810fc:	4659      	mov	r1, fp
   810fe:	4652      	mov	r2, sl
   81100:	4643      	mov	r3, r8
   81102:	f244 4719 	movw	r7, #17433	; 0x4419
   81106:	f2c0 0708 	movt	r7, #8
   8110a:	47b8      	blx	r7
		adc_value_back_left_temp,adc_value_back_right_temp,adc_value_front_left_temp,adc_value_front_right_temp);
 		
		
		vTaskDelayUntil(&xLastWakeTime,5); 	
   8110c:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   81110:	f04f 0105 	mov.w	r1, #5
   81114:	f242 342d 	movw	r4, #9005	; 0x232d
   81118:	f2c0 0408 	movt	r4, #8
   8111c:	47a0      	blx	r4
   8111e:	e78d      	b.n	8103c <start_communication+0x28>

00081120 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   81120:	f100 0308 	add.w	r3, r0, #8
   81124:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   81126:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8112a:	8102      	strh	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   8112c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   8112e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   81130:	f04f 0100 	mov.w	r1, #0
   81134:	6001      	str	r1, [r0, #0]
   81136:	4770      	bx	lr

00081138 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   81138:	f04f 0300 	mov.w	r3, #0
   8113c:	6103      	str	r3, [r0, #16]
   8113e:	4770      	bx	lr

00081140 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   81140:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   81142:	685a      	ldr	r2, [r3, #4]
   81144:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   81146:	6842      	ldr	r2, [r0, #4]
   81148:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8114a:	685a      	ldr	r2, [r3, #4]
   8114c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8114e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   81150:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   81152:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81154:	6801      	ldr	r1, [r0, #0]
   81156:	f101 0101 	add.w	r1, r1, #1
   8115a:	6001      	str	r1, [r0, #0]
   8115c:	4770      	bx	lr
   8115e:	bf00      	nop

00081160 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   81160:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   81162:	880c      	ldrh	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   81164:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81168:	429c      	cmp	r4, r3
   8116a:	d101      	bne.n	81170 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   8116c:	6903      	ldr	r3, [r0, #16]
   8116e:	e00c      	b.n	8118a <vListInsert+0x2a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   81170:	f100 0308 	add.w	r3, r0, #8
   81174:	68c2      	ldr	r2, [r0, #12]
   81176:	8812      	ldrh	r2, [r2, #0]
   81178:	b292      	uxth	r2, r2
   8117a:	4294      	cmp	r4, r2
   8117c:	d305      	bcc.n	8118a <vListInsert+0x2a>
   8117e:	685b      	ldr	r3, [r3, #4]
   81180:	685a      	ldr	r2, [r3, #4]
   81182:	8812      	ldrh	r2, [r2, #0]
   81184:	b292      	uxth	r2, r2
   81186:	4294      	cmp	r4, r2
   81188:	d2f9      	bcs.n	8117e <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   8118a:	685a      	ldr	r2, [r3, #4]
   8118c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8118e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   81190:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   81192:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   81194:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81196:	6801      	ldr	r1, [r0, #0]
   81198:	f101 0101 	add.w	r1, r1, #1
   8119c:	6001      	str	r1, [r0, #0]
}
   8119e:	bc10      	pop	{r4}
   811a0:	4770      	bx	lr
   811a2:	bf00      	nop

000811a4 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   811a4:	6843      	ldr	r3, [r0, #4]
   811a6:	6882      	ldr	r2, [r0, #8]
   811a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   811aa:	6881      	ldr	r1, [r0, #8]
   811ac:	6843      	ldr	r3, [r0, #4]
   811ae:	604b      	str	r3, [r1, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   811b0:	6901      	ldr	r1, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   811b2:	684a      	ldr	r2, [r1, #4]
   811b4:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   811b6:	bf04      	itt	eq
   811b8:	6882      	ldreq	r2, [r0, #8]
   811ba:	604a      	streq	r2, [r1, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   811bc:	f04f 0300 	mov.w	r3, #0
   811c0:	6103      	str	r3, [r0, #16]
	( pxList->uxNumberOfItems )--;
   811c2:	6808      	ldr	r0, [r1, #0]
   811c4:	f100 32ff 	add.w	r2, r0, #4294967295
   811c8:	600a      	str	r2, [r1, #0]

	return pxList->uxNumberOfItems;
   811ca:	6808      	ldr	r0, [r1, #0]
}
   811cc:	4770      	bx	lr
   811ce:	bf00      	nop

000811d0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   811d0:	4803      	ldr	r0, [pc, #12]	; (811e0 <prvPortStartFirstTask+0x10>)
   811d2:	6800      	ldr	r0, [r0, #0]
   811d4:	6800      	ldr	r0, [r0, #0]
   811d6:	f380 8808 	msr	MSP, r0
   811da:	b662      	cpsie	i
   811dc:	df00      	svc	0
   811de:	bf00      	nop
   811e0:	e000ed08 	.word	0xe000ed08

000811e4 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   811e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   811e8:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   811ec:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   811f0:	f04f 0100 	mov.w	r1, #0
   811f4:	f840 1c0c 	str.w	r1, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   811f8:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   811fc:	f1a0 0040 	sub.w	r0, r0, #64	; 0x40
   81200:	4770      	bx	lr
   81202:	bf00      	nop

00081204 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   81204:	4b06      	ldr	r3, [pc, #24]	; (81220 <pxCurrentTCBConst2>)
   81206:	6819      	ldr	r1, [r3, #0]
   81208:	6808      	ldr	r0, [r1, #0]
   8120a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8120e:	f380 8809 	msr	PSP, r0
   81212:	f04f 0000 	mov.w	r0, #0
   81216:	f380 8811 	msr	BASEPRI, r0
   8121a:	f04e 0e0d 	orr.w	lr, lr, #13
   8121e:	4770      	bx	lr

00081220 <pxCurrentTCBConst2>:
   81220:	20078b48 	.word	0x20078b48

00081224 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81224:	f64e 5304 	movw	r3, #60676	; 0xed04
   81228:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8122c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81230:	601a      	str	r2, [r3, #0]
   81232:	4770      	bx	lr

00081234 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   81234:	f3ef 8011 	mrs	r0, BASEPRI
   81238:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   8123c:	f381 8811 	msr	BASEPRI, r1
   81240:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   81242:	f04f 0000 	mov.w	r0, #0
   81246:	bf00      	nop

00081248 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   81248:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   8124a:	f241 2335 	movw	r3, #4661	; 0x1235
   8124e:	f2c0 0308 	movt	r3, #8
   81252:	4798      	blx	r3
	uxCriticalNesting++;
   81254:	f240 0000 	movw	r0, #0
   81258:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8125c:	6802      	ldr	r2, [r0, #0]
   8125e:	f102 0201 	add.w	r2, r2, #1
   81262:	6002      	str	r2, [r0, #0]
   81264:	bd08      	pop	{r3, pc}
   81266:	bf00      	nop

00081268 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   81268:	f380 8811 	msr	BASEPRI, r0
   8126c:	4770      	bx	lr
   8126e:	bf00      	nop

00081270 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   81270:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   81272:	f240 0200 	movw	r2, #0
   81276:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8127a:	6813      	ldr	r3, [r2, #0]
   8127c:	f103 30ff 	add.w	r0, r3, #4294967295
   81280:	6010      	str	r0, [r2, #0]
	if( uxCriticalNesting == 0 )
   81282:	b930      	cbnz	r0, 81292 <vPortExitCritical+0x22>
	{
		portENABLE_INTERRUPTS();
   81284:	f04f 0000 	mov.w	r0, #0
   81288:	f241 2169 	movw	r1, #4713	; 0x1269
   8128c:	f2c0 0108 	movt	r1, #8
   81290:	4788      	blx	r1
   81292:	bd08      	pop	{r3, pc}

00081294 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   81294:	f3ef 8009 	mrs	r0, PSP
   81298:	4b0c      	ldr	r3, [pc, #48]	; (812cc <pxCurrentTCBConst>)
   8129a:	681a      	ldr	r2, [r3, #0]
   8129c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   812a0:	6010      	str	r0, [r2, #0]
   812a2:	e92d 4008 	stmdb	sp!, {r3, lr}
   812a6:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   812aa:	f380 8811 	msr	BASEPRI, r0
   812ae:	f001 f89b 	bl	823e8 <vTaskSwitchContext>
   812b2:	f04f 0000 	mov.w	r0, #0
   812b6:	f380 8811 	msr	BASEPRI, r0
   812ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   812be:	6819      	ldr	r1, [r3, #0]
   812c0:	6808      	ldr	r0, [r1, #0]
   812c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   812c6:	f380 8809 	msr	PSP, r0
   812ca:	4770      	bx	lr

000812cc <pxCurrentTCBConst>:
   812cc:	20078b48 	.word	0x20078b48

000812d0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   812d0:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   812d2:	f64e 5304 	movw	r3, #60676	; 0xed04
   812d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
   812da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   812de:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   812e0:	f241 2035 	movw	r0, #4661	; 0x1235
   812e4:	f2c0 0008 	movt	r0, #8
   812e8:	4780      	blx	r0
	{
		vTaskIncrementTick();
   812ea:	f641 71a5 	movw	r1, #8101	; 0x1fa5
   812ee:	f2c0 0108 	movt	r1, #8
   812f2:	4788      	blx	r1
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   812f4:	f04f 0000 	mov.w	r0, #0
   812f8:	f241 2369 	movw	r3, #4713	; 0x1269
   812fc:	f2c0 0308 	movt	r3, #8
   81300:	4798      	blx	r3
   81302:	bd08      	pop	{r3, pc}

00081304 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   81304:	f24e 0314 	movw	r3, #57364	; 0xe014
   81308:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8130c:	f644 021f 	movw	r2, #18463	; 0x481f
   81310:	f2c0 0201 	movt	r2, #1
   81314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   81316:	f24e 0010 	movw	r0, #57360	; 0xe010
   8131a:	f2ce 0000 	movt	r0, #57344	; 0xe000
   8131e:	f04f 0107 	mov.w	r1, #7
   81322:	6001      	str	r1, [r0, #0]
   81324:	4770      	bx	lr
   81326:	bf00      	nop

00081328 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   81328:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   8132a:	f64e 5320 	movw	r3, #60704	; 0xed20
   8132e:	f2ce 0300 	movt	r3, #57344	; 0xe000
   81332:	681a      	ldr	r2, [r3, #0]
   81334:	f442 0070 	orr.w	r0, r2, #15728640	; 0xf00000
   81338:	6018      	str	r0, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   8133a:	6819      	ldr	r1, [r3, #0]
   8133c:	f041 4470 	orr.w	r4, r1, #4026531840	; 0xf0000000
   81340:	601c      	str	r4, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   81342:	f241 3305 	movw	r3, #4869	; 0x1305
   81346:	f2c0 0308 	movt	r3, #8
   8134a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   8134c:	f04f 0400 	mov.w	r4, #0
   81350:	f240 0200 	movw	r2, #0
   81354:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81358:	6014      	str	r4, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   8135a:	f241 10d1 	movw	r0, #4561	; 0x11d1
   8135e:	f2c0 0008 	movt	r0, #8
   81362:	4780      	blx	r0

	/* Should not get here! */
	return 0;
}
   81364:	4620      	mov	r0, r4
   81366:	bd10      	pop	{r4, pc}

00081368 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   81368:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   8136a:	f648 2224 	movw	r2, #35364	; 0x8a24
   8136e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81372:	e000      	b.n	81376 <prvInsertBlockIntoFreeList+0xe>
   81374:	461a      	mov	r2, r3
   81376:	6813      	ldr	r3, [r2, #0]
   81378:	4283      	cmp	r3, r0
   8137a:	d3fb      	bcc.n	81374 <prvInsertBlockIntoFreeList+0xc>
   8137c:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   8137e:	6854      	ldr	r4, [r2, #4]
   81380:	1915      	adds	r5, r2, r4
   81382:	4285      	cmp	r5, r0
   81384:	d103      	bne.n	8138e <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   81386:	6868      	ldr	r0, [r5, #4]
   81388:	1904      	adds	r4, r0, r4
   8138a:	6054      	str	r4, [r2, #4]
   8138c:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   8138e:	6842      	ldr	r2, [r0, #4]
   81390:	1884      	adds	r4, r0, r2
   81392:	42a3      	cmp	r3, r4
   81394:	d10f      	bne.n	813b6 <prvInsertBlockIntoFreeList+0x4e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   81396:	f648 2420 	movw	r4, #35360	; 0x8a20
   8139a:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8139e:	6824      	ldr	r4, [r4, #0]
   813a0:	429c      	cmp	r4, r3
   813a2:	d006      	beq.n	813b2 <prvInsertBlockIntoFreeList+0x4a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   813a4:	685b      	ldr	r3, [r3, #4]
   813a6:	189a      	adds	r2, r3, r2
   813a8:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   813aa:	680b      	ldr	r3, [r1, #0]
   813ac:	681a      	ldr	r2, [r3, #0]
   813ae:	6002      	str	r2, [r0, #0]
   813b0:	e002      	b.n	813b8 <prvInsertBlockIntoFreeList+0x50>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   813b2:	6003      	str	r3, [r0, #0]
   813b4:	e000      	b.n	813b8 <prvInsertBlockIntoFreeList+0x50>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   813b6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   813b8:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   813ba:	bf18      	it	ne
   813bc:	6008      	strne	r0, [r1, #0]
	}
}
   813be:	bc30      	pop	{r4, r5}
   813c0:	4770      	bx	lr
   813c2:	bf00      	nop

000813c4 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   813c4:	b538      	push	{r3, r4, r5, lr}
   813c6:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   813c8:	f641 7369 	movw	r3, #8041	; 0x1f69
   813cc:	f2c0 0308 	movt	r3, #8
   813d0:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   813d2:	f648 2020 	movw	r0, #35360	; 0x8a20
   813d6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   813da:	6801      	ldr	r1, [r0, #0]
   813dc:	bb11      	cbnz	r1, 81424 <pvPortMalloc+0x60>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   813de:	f648 2224 	movw	r2, #35364	; 0x8a24
   813e2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   813e6:	f640 2320 	movw	r3, #2592	; 0xa20
   813ea:	f2c2 0307 	movt	r3, #8199	; 0x2007
   813ee:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   813f0:	f04f 0100 	mov.w	r1, #0
   813f4:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   813f6:	f503 42ff 	add.w	r2, r3, #32640	; 0x7f80
   813fa:	f102 0070 	add.w	r0, r2, #112	; 0x70
   813fe:	f648 2520 	movw	r5, #35360	; 0x8a20
   81402:	f2c2 0507 	movt	r5, #8199	; 0x2007
   81406:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   81408:	6751      	str	r1, [r2, #116]	; 0x74
	pxEnd->pxNextFreeBlock = NULL;
   8140a:	6711      	str	r1, [r2, #112]	; 0x70

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   8140c:	f647 71f0 	movw	r1, #32752	; 0x7ff0
   81410:	6059      	str	r1, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   81412:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   81414:	f240 0304 	movw	r3, #4
   81418:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8141c:	681a      	ldr	r2, [r3, #0]
   8141e:	f1a2 0210 	sub.w	r2, r2, #16
   81422:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   81424:	2c00      	cmp	r4, #0
   81426:	d03c      	beq.n	814a2 <pvPortMalloc+0xde>
		{
			xWantedSize += heapSTRUCT_SIZE;
   81428:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   8142c:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   81430:	bf1c      	itt	ne
   81432:	f022 0207 	bicne.w	r2, r2, #7
   81436:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   81438:	f102 30ff 	add.w	r0, r2, #4294967295
   8143c:	f647 75fe 	movw	r5, #32766	; 0x7ffe
   81440:	42a8      	cmp	r0, r5
   81442:	d831      	bhi.n	814a8 <pvPortMalloc+0xe4>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   81444:	f648 2124 	movw	r1, #35364	; 0x8a24
   81448:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8144c:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   8144e:	e001      	b.n	81454 <pvPortMalloc+0x90>
   81450:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   81452:	4604      	mov	r4, r0
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81454:	6863      	ldr	r3, [r4, #4]
   81456:	429a      	cmp	r2, r3
   81458:	d902      	bls.n	81460 <pvPortMalloc+0x9c>
   8145a:	6820      	ldr	r0, [r4, #0]
   8145c:	2800      	cmp	r0, #0
   8145e:	d1f7      	bne.n	81450 <pvPortMalloc+0x8c>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   81460:	f648 2520 	movw	r5, #35360	; 0x8a20
   81464:	f2c2 0507 	movt	r5, #8199	; 0x2007
   81468:	682b      	ldr	r3, [r5, #0]
   8146a:	429c      	cmp	r4, r3
   8146c:	d01f      	beq.n	814ae <pvPortMalloc+0xea>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   8146e:	680d      	ldr	r5, [r1, #0]
   81470:	f105 0510 	add.w	r5, r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   81474:	6820      	ldr	r0, [r4, #0]
   81476:	6008      	str	r0, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   81478:	6861      	ldr	r1, [r4, #4]
   8147a:	1a8b      	subs	r3, r1, r2
   8147c:	2b20      	cmp	r3, #32
   8147e:	d907      	bls.n	81490 <pvPortMalloc+0xcc>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   81480:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   81482:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   81484:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   81486:	f241 3269 	movw	r2, #4969	; 0x1369
   8148a:	f2c0 0208 	movt	r2, #8
   8148e:	4790      	blx	r2
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   81490:	f240 0004 	movw	r0, #4
   81494:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81498:	6803      	ldr	r3, [r0, #0]
   8149a:	6861      	ldr	r1, [r4, #4]
   8149c:	1a5a      	subs	r2, r3, r1
   8149e:	6002      	str	r2, [r0, #0]
   814a0:	e007      	b.n	814b2 <pvPortMalloc+0xee>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   814a2:	f04f 0500 	mov.w	r5, #0
   814a6:	e004      	b.n	814b2 <pvPortMalloc+0xee>
   814a8:	f04f 0500 	mov.w	r5, #0
   814ac:	e001      	b.n	814b2 <pvPortMalloc+0xee>
   814ae:	f04f 0500 	mov.w	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   814b2:	f242 1041 	movw	r0, #8513	; 0x2141
   814b6:	f2c0 0008 	movt	r0, #8
   814ba:	4780      	blx	r0
		}
	}
	#endif

	return pvReturn;
}
   814bc:	4628      	mov	r0, r5
   814be:	bd38      	pop	{r3, r4, r5, pc}

000814c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   814c0:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   814c2:	4604      	mov	r4, r0
   814c4:	b1c8      	cbz	r0, 814fa <vPortFree+0x3a>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   814c6:	f641 7369 	movw	r3, #8041	; 0x1f69
   814ca:	f2c0 0308 	movt	r3, #8
   814ce:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   814d0:	f240 0004 	movw	r0, #4
   814d4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   814d8:	6801      	ldr	r1, [r0, #0]
   814da:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   814de:	188b      	adds	r3, r1, r2
   814e0:	6003      	str	r3, [r0, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   814e2:	f1a4 0010 	sub.w	r0, r4, #16
   814e6:	f241 3169 	movw	r1, #4969	; 0x1369
   814ea:	f2c0 0108 	movt	r1, #8
   814ee:	4788      	blx	r1
		}
		xTaskResumeAll();
   814f0:	f242 1041 	movw	r0, #8513	; 0x2141
   814f4:	f2c0 0008 	movt	r0, #8
   814f8:	4780      	blx	r0
   814fa:	bd10      	pop	{r4, pc}

000814fc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   814fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   814fe:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   81500:	f241 2349 	movw	r3, #4681	; 0x1249
   81504:	f2c0 0308 	movt	r3, #8
   81508:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   8150a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   8150c:	2800      	cmp	r0, #0
   8150e:	dd1a      	ble.n	81546 <prvUnlockQueue+0x4a>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81510:	6a61      	ldr	r1, [r4, #36]	; 0x24
   81512:	b919      	cbnz	r1, 8151c <prvUnlockQueue+0x20>
   81514:	e017      	b.n	81546 <prvUnlockQueue+0x4a>
   81516:	6a61      	ldr	r1, [r4, #36]	; 0x24
   81518:	b951      	cbnz	r1, 81530 <prvUnlockQueue+0x34>
   8151a:	e014      	b.n	81546 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8151c:	f104 0624 	add.w	r6, r4, #36	; 0x24
   81520:	f242 5579 	movw	r5, #9593	; 0x2579
   81524:	f2c0 0508 	movt	r5, #8
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81528:	f242 7705 	movw	r7, #9989	; 0x2705
   8152c:	f2c0 0708 	movt	r7, #8
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81530:	4630      	mov	r0, r6
   81532:	47a8      	blx	r5
   81534:	b100      	cbz	r0, 81538 <prvUnlockQueue+0x3c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81536:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   81538:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   8153a:	f102 33ff 	add.w	r3, r2, #4294967295
   8153e:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81540:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   81542:	2800      	cmp	r0, #0
   81544:	dce7      	bgt.n	81516 <prvUnlockQueue+0x1a>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   81546:	f04f 32ff 	mov.w	r2, #4294967295
   8154a:	64a2      	str	r2, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   8154c:	f241 2371 	movw	r3, #4721	; 0x1271
   81550:	f2c0 0308 	movt	r3, #8
   81554:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   81556:	f241 2049 	movw	r0, #4681	; 0x1249
   8155a:	f2c0 0008 	movt	r0, #8
   8155e:	4780      	blx	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81560:	6c61      	ldr	r1, [r4, #68]	; 0x44
   81562:	2900      	cmp	r1, #0
   81564:	dd1a      	ble.n	8159c <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81566:	6922      	ldr	r2, [r4, #16]
   81568:	b91a      	cbnz	r2, 81572 <prvUnlockQueue+0x76>
   8156a:	e017      	b.n	8159c <prvUnlockQueue+0xa0>
   8156c:	6922      	ldr	r2, [r4, #16]
   8156e:	b952      	cbnz	r2, 81586 <prvUnlockQueue+0x8a>
   81570:	e014      	b.n	8159c <prvUnlockQueue+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81572:	f104 0610 	add.w	r6, r4, #16
   81576:	f242 5579 	movw	r5, #9593	; 0x2579
   8157a:	f2c0 0508 	movt	r5, #8
				{
					vTaskMissedYield();
   8157e:	f242 7705 	movw	r7, #9989	; 0x2705
   81582:	f2c0 0708 	movt	r7, #8
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81586:	4630      	mov	r0, r6
   81588:	47a8      	blx	r5
   8158a:	b100      	cbz	r0, 8158e <prvUnlockQueue+0x92>
				{
					vTaskMissedYield();
   8158c:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   8158e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81590:	f103 30ff 	add.w	r0, r3, #4294967295
   81594:	6460      	str	r0, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81596:	6c61      	ldr	r1, [r4, #68]	; 0x44
   81598:	2900      	cmp	r1, #0
   8159a:	dce7      	bgt.n	8156c <prvUnlockQueue+0x70>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   8159c:	f04f 33ff 	mov.w	r3, #4294967295
   815a0:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   815a2:	f241 2071 	movw	r0, #4721	; 0x1271
   815a6:	f2c0 0008 	movt	r0, #8
   815aa:	4780      	blx	r0
   815ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   815ae:	bf00      	nop

000815b0 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   815b0:	b538      	push	{r3, r4, r5, lr}
   815b2:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   815b4:	6805      	ldr	r5, [r0, #0]
   815b6:	b175      	cbz	r5, 815d6 <prvCopyDataFromQueue+0x26>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   815b8:	6c02      	ldr	r2, [r0, #64]	; 0x40
   815ba:	68c4      	ldr	r4, [r0, #12]
   815bc:	18a4      	adds	r4, r4, r2
   815be:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   815c0:	6840      	ldr	r0, [r0, #4]
   815c2:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   815c4:	bf28      	it	cs
   815c6:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   815c8:	4608      	mov	r0, r1
   815ca:	68d9      	ldr	r1, [r3, #12]
   815cc:	f244 4359 	movw	r3, #17497	; 0x4459
   815d0:	f2c0 0308 	movt	r3, #8
   815d4:	4798      	blx	r3
   815d6:	bd38      	pop	{r3, r4, r5, pc}

000815d8 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   815d8:	b510      	push	{r4, lr}
   815da:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   815dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
   815de:	b963      	cbnz	r3, 815fa <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   815e0:	6801      	ldr	r1, [r0, #0]
   815e2:	2900      	cmp	r1, #0
   815e4:	d12e      	bne.n	81644 <prvCopyDataToQueue+0x6c>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   815e6:	6840      	ldr	r0, [r0, #4]
   815e8:	f242 73f1 	movw	r3, #10225	; 0x27f1
   815ec:	f2c0 0308 	movt	r3, #8
   815f0:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   815f2:	f04f 0000 	mov.w	r0, #0
   815f6:	6060      	str	r0, [r4, #4]
   815f8:	e024      	b.n	81644 <prvCopyDataToQueue+0x6c>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   815fa:	b982      	cbnz	r2, 8161e <prvCopyDataToQueue+0x46>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   815fc:	6880      	ldr	r0, [r0, #8]
   815fe:	461a      	mov	r2, r3
   81600:	f244 4359 	movw	r3, #17497	; 0x4459
   81604:	f2c0 0308 	movt	r3, #8
   81608:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   8160a:	68a2      	ldr	r2, [r4, #8]
   8160c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   8160e:	1850      	adds	r0, r2, r1
   81610:	60a0      	str	r0, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   81612:	6863      	ldr	r3, [r4, #4]
   81614:	4298      	cmp	r0, r3
   81616:	d315      	bcc.n	81644 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   81618:	6822      	ldr	r2, [r4, #0]
   8161a:	60a2      	str	r2, [r4, #8]
   8161c:	e012      	b.n	81644 <prvCopyDataToQueue+0x6c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   8161e:	68c0      	ldr	r0, [r0, #12]
   81620:	461a      	mov	r2, r3
   81622:	f244 4359 	movw	r3, #17497	; 0x4459
   81626:	f2c0 0308 	movt	r3, #8
   8162a:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   8162c:	6c22      	ldr	r2, [r4, #64]	; 0x40
   8162e:	f1c2 0000 	rsb	r0, r2, #0
   81632:	68e1      	ldr	r1, [r4, #12]
   81634:	180b      	adds	r3, r1, r0
   81636:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   81638:	6822      	ldr	r2, [r4, #0]
   8163a:	4293      	cmp	r3, r2
   8163c:	d202      	bcs.n	81644 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   8163e:	6861      	ldr	r1, [r4, #4]
   81640:	1808      	adds	r0, r1, r0
   81642:	60e0      	str	r0, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   81644:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81646:	f102 0201 	add.w	r2, r2, #1
   8164a:	63a2      	str	r2, [r4, #56]	; 0x38
   8164c:	bd10      	pop	{r4, pc}
   8164e:	bf00      	nop

00081650 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   81650:	b538      	push	{r3, r4, r5, lr}
   81652:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   81654:	4604      	mov	r4, r0
   81656:	b930      	cbnz	r0, 81666 <xQueueGenericReset+0x16>
   81658:	f241 2435 	movw	r4, #4661	; 0x1235
   8165c:	f2c0 0408 	movt	r4, #8
   81660:	47a0      	blx	r4
   81662:	bf00      	nop
   81664:	e7fd      	b.n	81662 <xQueueGenericReset+0x12>

	taskENTER_CRITICAL();
   81666:	f241 2349 	movw	r3, #4681	; 0x1249
   8166a:	f2c0 0308 	movt	r3, #8
   8166e:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   81670:	6823      	ldr	r3, [r4, #0]
   81672:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   81674:	6c22      	ldr	r2, [r4, #64]	; 0x40
   81676:	fb00 3102 	mla	r1, r0, r2, r3
   8167a:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   8167c:	f04f 0100 	mov.w	r1, #0
   81680:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   81682:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   81684:	f100 30ff 	add.w	r0, r0, #4294967295
   81688:	fb02 3300 	mla	r3, r2, r0, r3
   8168c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   8168e:	f04f 32ff 	mov.w	r2, #4294967295
   81692:	6462      	str	r2, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   81694:	64a2      	str	r2, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   81696:	b985      	cbnz	r5, 816ba <xQueueGenericReset+0x6a>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81698:	6921      	ldr	r1, [r4, #16]
   8169a:	b1c1      	cbz	r1, 816ce <xQueueGenericReset+0x7e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   8169c:	f104 0010 	add.w	r0, r4, #16
   816a0:	f242 5379 	movw	r3, #9593	; 0x2579
   816a4:	f2c0 0308 	movt	r3, #8
   816a8:	4798      	blx	r3
   816aa:	2801      	cmp	r0, #1
   816ac:	d10f      	bne.n	816ce <xQueueGenericReset+0x7e>
				{
					portYIELD_WITHIN_API();
   816ae:	f241 2025 	movw	r0, #4645	; 0x1225
   816b2:	f2c0 0008 	movt	r0, #8
   816b6:	4780      	blx	r0
   816b8:	e009      	b.n	816ce <xQueueGenericReset+0x7e>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   816ba:	f104 0010 	add.w	r0, r4, #16
   816be:	f241 1521 	movw	r5, #4385	; 0x1121
   816c2:	f2c0 0508 	movt	r5, #8
   816c6:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   816c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   816cc:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   816ce:	f241 2271 	movw	r2, #4721	; 0x1271
   816d2:	f2c0 0208 	movt	r2, #8
   816d6:	4790      	blx	r2

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   816d8:	f04f 0001 	mov.w	r0, #1
   816dc:	bd38      	pop	{r3, r4, r5, pc}
   816de:	bf00      	nop

000816e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   816e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   816e2:	460d      	mov	r5, r1
   816e4:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   816e6:	4606      	mov	r6, r0
   816e8:	b1e0      	cbz	r0, 81724 <xQueueGenericCreate+0x44>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   816ea:	f04f 0050 	mov.w	r0, #80	; 0x50
   816ee:	f241 33c5 	movw	r3, #5061	; 0x13c5
   816f2:	f2c0 0308 	movt	r3, #8
   816f6:	4798      	blx	r3
		if( pxNewQueue != NULL )
   816f8:	4604      	mov	r4, r0
   816fa:	b198      	cbz	r0, 81724 <xQueueGenericCreate+0x44>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   816fc:	fb06 f005 	mul.w	r0, r6, r5

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   81700:	f100 0001 	add.w	r0, r0, #1
   81704:	f241 31c5 	movw	r1, #5061	; 0x13c5
   81708:	f2c0 0108 	movt	r1, #8
   8170c:	4788      	blx	r1
   8170e:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   81710:	b970      	cbnz	r0, 81730 <xQueueGenericCreate+0x50>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   81712:	4620      	mov	r0, r4
   81714:	f241 42c1 	movw	r2, #5313	; 0x14c1
   81718:	f2c0 0208 	movt	r2, #8
   8171c:	4790      	blx	r2
   8171e:	e001      	b.n	81724 <xQueueGenericCreate+0x44>
			}
		}
	}

	configASSERT( xReturn );
   81720:	bf00      	nop
   81722:	e7fd      	b.n	81720 <xQueueGenericCreate+0x40>
   81724:	f241 2035 	movw	r0, #4661	; 0x1235
   81728:	f2c0 0008 	movt	r0, #8
   8172c:	4780      	blx	r0
   8172e:	e7f7      	b.n	81720 <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   81730:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   81732:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   81734:	4620      	mov	r0, r4
   81736:	f04f 0101 	mov.w	r1, #1
   8173a:	f241 6351 	movw	r3, #5713	; 0x1651
   8173e:	f2c0 0308 	movt	r3, #8
   81742:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   81744:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   81748:	4620      	mov	r0, r4
   8174a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0008174c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   8174c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81750:	b085      	sub	sp, #20
   81752:	468a      	mov	sl, r1
   81754:	469b      	mov	fp, r3
   81756:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   8175a:	4604      	mov	r4, r0
   8175c:	b930      	cbnz	r0, 8176c <xQueueGenericSend+0x20>
   8175e:	f241 2435 	movw	r4, #4661	; 0x1235
   81762:	f2c0 0408 	movt	r4, #8
   81766:	47a0      	blx	r4
   81768:	bf00      	nop
   8176a:	e7fd      	b.n	81768 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8176c:	b941      	cbnz	r1, 81780 <xQueueGenericSend+0x34>
   8176e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81770:	b14b      	cbz	r3, 81786 <xQueueGenericSend+0x3a>
   81772:	f241 2035 	movw	r0, #4661	; 0x1235
   81776:	f2c0 0008 	movt	r0, #8
   8177a:	4780      	blx	r0
   8177c:	bf00      	nop
   8177e:	e7fd      	b.n	8177c <xQueueGenericSend+0x30>
   81780:	f04f 0700 	mov.w	r7, #0
   81784:	e001      	b.n	8178a <xQueueGenericSend+0x3e>
   81786:	f04f 0700 	mov.w	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   8178a:	f241 2649 	movw	r6, #4681	; 0x1249
   8178e:	f2c0 0608 	movt	r6, #8
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81792:	f242 6121 	movw	r1, #9761	; 0x2621
   81796:	f2c0 0108 	movt	r1, #8
   8179a:	9100      	str	r1, [sp, #0]
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   8179c:	f241 2571 	movw	r5, #4721	; 0x1271
   817a0:	f2c0 0508 	movt	r5, #8
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   817a4:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   817a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   817a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   817aa:	429a      	cmp	r2, r3
   817ac:	d21f      	bcs.n	817ee <xQueueGenericSend+0xa2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   817ae:	4620      	mov	r0, r4
   817b0:	4651      	mov	r1, sl
   817b2:	465a      	mov	r2, fp
   817b4:	f241 53d9 	movw	r3, #5593	; 0x15d9
   817b8:	f2c0 0308 	movt	r3, #8
   817bc:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   817be:	6a61      	ldr	r1, [r4, #36]	; 0x24
   817c0:	b169      	cbz	r1, 817de <xQueueGenericSend+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   817c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   817c6:	f242 5279 	movw	r2, #9593	; 0x2579
   817ca:	f2c0 0208 	movt	r2, #8
   817ce:	4790      	blx	r2
   817d0:	2801      	cmp	r0, #1
   817d2:	d104      	bne.n	817de <xQueueGenericSend+0x92>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   817d4:	f241 2025 	movw	r0, #4645	; 0x1225
   817d8:	f2c0 0008 	movt	r0, #8
   817dc:	4780      	blx	r0
					}
				}

				taskEXIT_CRITICAL();
   817de:	f241 2371 	movw	r3, #4721	; 0x1271
   817e2:	f2c0 0308 	movt	r3, #8
   817e6:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   817e8:	f04f 0001 	mov.w	r0, #1
   817ec:	e06a      	b.n	818c4 <xQueueGenericSend+0x178>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   817ee:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   817f2:	b938      	cbnz	r0, 81804 <xQueueGenericSend+0xb8>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   817f4:	f241 2371 	movw	r3, #4721	; 0x1271
   817f8:	f2c0 0308 	movt	r3, #8
   817fc:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   817fe:	f04f 0000 	mov.w	r0, #0
   81802:	e05f      	b.n	818c4 <xQueueGenericSend+0x178>
				}
				else if( xEntryTimeSet == pdFALSE )
   81804:	b927      	cbnz	r7, 81810 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81806:	a802      	add	r0, sp, #8
   81808:	9f00      	ldr	r7, [sp, #0]
   8180a:	47b8      	blx	r7
					xEntryTimeSet = pdTRUE;
   8180c:	f04f 0701 	mov.w	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81810:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81812:	f641 7169 	movw	r1, #8041	; 0x1f69
   81816:	f2c0 0108 	movt	r1, #8
   8181a:	4788      	blx	r1
		prvLockQueue( pxQueue );
   8181c:	47b0      	blx	r6
   8181e:	6c62      	ldr	r2, [r4, #68]	; 0x44
   81820:	f1b2 3fff 	cmp.w	r2, #4294967295
   81824:	bf04      	itt	eq
   81826:	2200      	moveq	r2, #0
   81828:	6462      	streq	r2, [r4, #68]	; 0x44
   8182a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8182c:	f1b3 3fff 	cmp.w	r3, #4294967295
   81830:	bf04      	itt	eq
   81832:	2300      	moveq	r3, #0
   81834:	64a3      	streq	r3, [r4, #72]	; 0x48
   81836:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81838:	a802      	add	r0, sp, #8
   8183a:	f10d 0106 	add.w	r1, sp, #6
   8183e:	f242 6251 	movw	r2, #9809	; 0x2651
   81842:	f2c0 0208 	movt	r2, #8
   81846:	4790      	blx	r2
   81848:	bb78      	cbnz	r0, 818aa <xQueueGenericSend+0x15e>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   8184a:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   8184c:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   81850:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   81854:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   81856:	45c1      	cmp	r9, r8
   81858:	d11b      	bne.n	81892 <xQueueGenericSend+0x146>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   8185a:	f104 0010 	add.w	r0, r4, #16
   8185e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   81862:	f242 43a9 	movw	r3, #9385	; 0x24a9
   81866:	f2c0 0308 	movt	r3, #8
   8186a:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   8186c:	4620      	mov	r0, r4
   8186e:	f241 41fd 	movw	r1, #5373	; 0x14fd
   81872:	f2c0 0108 	movt	r1, #8
   81876:	4788      	blx	r1
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   81878:	f242 1041 	movw	r0, #8513	; 0x2141
   8187c:	f2c0 0008 	movt	r0, #8
   81880:	4780      	blx	r0
   81882:	2800      	cmp	r0, #0
   81884:	d18e      	bne.n	817a4 <xQueueGenericSend+0x58>
				{
					portYIELD_WITHIN_API();
   81886:	f241 2225 	movw	r2, #4645	; 0x1225
   8188a:	f2c0 0208 	movt	r2, #8
   8188e:	4790      	blx	r2
   81890:	e788      	b.n	817a4 <xQueueGenericSend+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81892:	4620      	mov	r0, r4
   81894:	f241 43fd 	movw	r3, #5373	; 0x14fd
   81898:	f2c0 0308 	movt	r3, #8
   8189c:	4798      	blx	r3
				( void ) xTaskResumeAll();
   8189e:	f242 1241 	movw	r2, #8513	; 0x2141
   818a2:	f2c0 0208 	movt	r2, #8
   818a6:	4790      	blx	r2
   818a8:	e77c      	b.n	817a4 <xQueueGenericSend+0x58>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   818aa:	4620      	mov	r0, r4
   818ac:	f241 41fd 	movw	r1, #5373	; 0x14fd
   818b0:	f2c0 0108 	movt	r1, #8
   818b4:	4788      	blx	r1
			( void ) xTaskResumeAll();
   818b6:	f242 1041 	movw	r0, #8513	; 0x2141
   818ba:	f2c0 0008 	movt	r0, #8
   818be:	4780      	blx	r0

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   818c0:	f04f 0000 	mov.w	r0, #0
		}
	}
}
   818c4:	b005      	add	sp, #20
   818c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   818ca:	bf00      	nop

000818cc <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   818cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   818d0:	460e      	mov	r6, r1
   818d2:	4615      	mov	r5, r2
   818d4:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   818d6:	4604      	mov	r4, r0
   818d8:	b930      	cbnz	r0, 818e8 <xQueueGenericSendFromISR+0x1c>
   818da:	f241 2535 	movw	r5, #4661	; 0x1235
   818de:	f2c0 0508 	movt	r5, #8
   818e2:	47a8      	blx	r5
   818e4:	bf00      	nop
   818e6:	e7fd      	b.n	818e4 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   818e8:	b941      	cbnz	r1, 818fc <xQueueGenericSendFromISR+0x30>
   818ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
   818ec:	b133      	cbz	r3, 818fc <xQueueGenericSendFromISR+0x30>
   818ee:	f241 2035 	movw	r0, #4661	; 0x1235
   818f2:	f2c0 0008 	movt	r0, #8
   818f6:	4780      	blx	r0
   818f8:	bf00      	nop
   818fa:	e7fd      	b.n	818f8 <xQueueGenericSendFromISR+0x2c>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   818fc:	f241 2135 	movw	r1, #4661	; 0x1235
   81900:	f2c0 0108 	movt	r1, #8
   81904:	4788      	blx	r1
   81906:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81908:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8190a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8190c:	429a      	cmp	r2, r3
   8190e:	d221      	bcs.n	81954 <xQueueGenericSendFromISR+0x88>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81910:	4620      	mov	r0, r4
   81912:	4631      	mov	r1, r6
   81914:	4642      	mov	r2, r8
   81916:	f241 53d9 	movw	r3, #5593	; 0x15d9
   8191a:	f2c0 0308 	movt	r3, #8
   8191e:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   81920:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   81922:	f1b0 3fff 	cmp.w	r0, #4294967295
   81926:	d10e      	bne.n	81946 <xQueueGenericSendFromISR+0x7a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81928:	6a62      	ldr	r2, [r4, #36]	; 0x24
   8192a:	b1b2      	cbz	r2, 8195a <xQueueGenericSendFromISR+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8192c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81930:	f242 5479 	movw	r4, #9593	; 0x2579
   81934:	f2c0 0408 	movt	r4, #8
   81938:	47a0      	blx	r4
   8193a:	b188      	cbz	r0, 81960 <xQueueGenericSendFromISR+0x94>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   8193c:	b19d      	cbz	r5, 81966 <xQueueGenericSendFromISR+0x9a>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   8193e:	f04f 0401 	mov.w	r4, #1
   81942:	602c      	str	r4, [r5, #0]
   81944:	e011      	b.n	8196a <xQueueGenericSendFromISR+0x9e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   81946:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   81948:	f101 0101 	add.w	r1, r1, #1
   8194c:	64a1      	str	r1, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   8194e:	f04f 0401 	mov.w	r4, #1
   81952:	e00a      	b.n	8196a <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   81954:	f04f 0400 	mov.w	r4, #0
   81958:	e007      	b.n	8196a <xQueueGenericSendFromISR+0x9e>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   8195a:	f04f 0401 	mov.w	r4, #1
   8195e:	e004      	b.n	8196a <xQueueGenericSendFromISR+0x9e>
   81960:	f04f 0401 	mov.w	r4, #1
   81964:	e001      	b.n	8196a <xQueueGenericSendFromISR+0x9e>
   81966:	f04f 0401 	mov.w	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   8196a:	4638      	mov	r0, r7
   8196c:	f241 2369 	movw	r3, #4713	; 0x1269
   81970:	f2c0 0308 	movt	r3, #8
   81974:	4798      	blx	r3

	return xReturn;
}
   81976:	4620      	mov	r0, r4
   81978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0008197c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   8197c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81980:	b085      	sub	sp, #20
   81982:	4689      	mov	r9, r1
   81984:	469a      	mov	sl, r3
   81986:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   8198a:	4604      	mov	r4, r0
   8198c:	b930      	cbnz	r0, 8199c <xQueueGenericReceive+0x20>
   8198e:	f241 2435 	movw	r4, #4661	; 0x1235
   81992:	f2c0 0408 	movt	r4, #8
   81996:	47a0      	blx	r4
   81998:	bf00      	nop
   8199a:	e7fd      	b.n	81998 <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8199c:	b941      	cbnz	r1, 819b0 <xQueueGenericReceive+0x34>
   8199e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   819a0:	b14b      	cbz	r3, 819b6 <xQueueGenericReceive+0x3a>
   819a2:	f241 2035 	movw	r0, #4661	; 0x1235
   819a6:	f2c0 0008 	movt	r0, #8
   819aa:	4780      	blx	r0
   819ac:	bf00      	nop
   819ae:	e7fd      	b.n	819ac <xQueueGenericReceive+0x30>
   819b0:	f04f 0700 	mov.w	r7, #0
   819b4:	e001      	b.n	819ba <xQueueGenericReceive+0x3e>
   819b6:	f04f 0700 	mov.w	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   819ba:	f241 2649 	movw	r6, #4681	; 0x1249
   819be:	f2c0 0608 	movt	r6, #8
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   819c2:	f242 6b21 	movw	fp, #9761	; 0x2621
   819c6:	f2c0 0b08 	movt	fp, #8
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   819ca:	f241 2571 	movw	r5, #4721	; 0x1271
   819ce:	f2c0 0508 	movt	r5, #8
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   819d2:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   819d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   819d6:	2900      	cmp	r1, #0
   819d8:	d03f      	beq.n	81a5a <xQueueGenericReceive+0xde>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   819da:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   819dc:	4620      	mov	r0, r4
   819de:	4649      	mov	r1, r9
   819e0:	f241 53b1 	movw	r3, #5553	; 0x15b1
   819e4:	f2c0 0308 	movt	r3, #8
   819e8:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   819ea:	f1ba 0f00 	cmp.w	sl, #0
   819ee:	d11c      	bne.n	81a2a <xQueueGenericReceive+0xae>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   819f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   819f2:	f103 30ff 	add.w	r0, r3, #4294967295
   819f6:	63a0      	str	r0, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   819f8:	6821      	ldr	r1, [r4, #0]
   819fa:	b929      	cbnz	r1, 81a08 <xQueueGenericReceive+0x8c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   819fc:	f242 7215 	movw	r2, #10005	; 0x2715
   81a00:	f2c0 0208 	movt	r2, #8
   81a04:	4790      	blx	r2
   81a06:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81a08:	6923      	ldr	r3, [r4, #16]
   81a0a:	b1f3      	cbz	r3, 81a4a <xQueueGenericReceive+0xce>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81a0c:	f104 0010 	add.w	r0, r4, #16
   81a10:	f242 5179 	movw	r1, #9593	; 0x2579
   81a14:	f2c0 0108 	movt	r1, #8
   81a18:	4788      	blx	r1
   81a1a:	2801      	cmp	r0, #1
   81a1c:	d115      	bne.n	81a4a <xQueueGenericReceive+0xce>
						{
							portYIELD_WITHIN_API();
   81a1e:	f241 2025 	movw	r0, #4645	; 0x1225
   81a22:	f2c0 0008 	movt	r0, #8
   81a26:	4780      	blx	r0
   81a28:	e00f      	b.n	81a4a <xQueueGenericReceive+0xce>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   81a2a:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81a2c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   81a2e:	b160      	cbz	r0, 81a4a <xQueueGenericReceive+0xce>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81a30:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81a34:	f242 5179 	movw	r1, #9593	; 0x2579
   81a38:	f2c0 0108 	movt	r1, #8
   81a3c:	4788      	blx	r1
   81a3e:	b120      	cbz	r0, 81a4a <xQueueGenericReceive+0xce>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   81a40:	f241 2225 	movw	r2, #4645	; 0x1225
   81a44:	f2c0 0208 	movt	r2, #8
   81a48:	4790      	blx	r2
						}
					}
				}

				taskEXIT_CRITICAL();
   81a4a:	f241 2271 	movw	r2, #4721	; 0x1271
   81a4e:	f2c0 0208 	movt	r2, #8
   81a52:	4790      	blx	r2
				return pdPASS;
   81a54:	f04f 0001 	mov.w	r0, #1
   81a58:	e074      	b.n	81b44 <xQueueGenericReceive+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81a5a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   81a5e:	b93a      	cbnz	r2, 81a70 <xQueueGenericReceive+0xf4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81a60:	f241 2271 	movw	r2, #4721	; 0x1271
   81a64:	f2c0 0208 	movt	r2, #8
   81a68:	4790      	blx	r2
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   81a6a:	f04f 0000 	mov.w	r0, #0
   81a6e:	e069      	b.n	81b44 <xQueueGenericReceive+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
   81a70:	b91f      	cbnz	r7, 81a7a <xQueueGenericReceive+0xfe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81a72:	a802      	add	r0, sp, #8
   81a74:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   81a76:	f04f 0701 	mov.w	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81a7a:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81a7c:	f641 7369 	movw	r3, #8041	; 0x1f69
   81a80:	f2c0 0308 	movt	r3, #8
   81a84:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81a86:	47b0      	blx	r6
   81a88:	6c60      	ldr	r0, [r4, #68]	; 0x44
   81a8a:	f1b0 3fff 	cmp.w	r0, #4294967295
   81a8e:	bf04      	itt	eq
   81a90:	2000      	moveq	r0, #0
   81a92:	6460      	streq	r0, [r4, #68]	; 0x44
   81a94:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   81a96:	f1b1 3fff 	cmp.w	r1, #4294967295
   81a9a:	bf04      	itt	eq
   81a9c:	2100      	moveq	r1, #0
   81a9e:	64a1      	streq	r1, [r4, #72]	; 0x48
   81aa0:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81aa2:	a802      	add	r0, sp, #8
   81aa4:	f10d 0106 	add.w	r1, sp, #6
   81aa8:	f242 6251 	movw	r2, #9809	; 0x2651
   81aac:	f2c0 0208 	movt	r2, #8
   81ab0:	4790      	blx	r2
   81ab2:	2800      	cmp	r0, #0
   81ab4:	d139      	bne.n	81b2a <xQueueGenericReceive+0x1ae>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81ab6:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   81ab8:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   81abc:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81abe:	f1b8 0f00 	cmp.w	r8, #0
   81ac2:	d126      	bne.n	81b12 <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81ac4:	6823      	ldr	r3, [r4, #0]
   81ac6:	b93b      	cbnz	r3, 81ad8 <xQueueGenericReceive+0x15c>
					{
						portENTER_CRITICAL();
   81ac8:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   81aca:	6860      	ldr	r0, [r4, #4]
   81acc:	f242 7149 	movw	r1, #10057	; 0x2749
   81ad0:	f2c0 0108 	movt	r1, #8
   81ad4:	4788      	blx	r1
						}
						portEXIT_CRITICAL();
   81ad6:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81ad8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81adc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   81ae0:	f242 42a9 	movw	r2, #9385	; 0x24a9
   81ae4:	f2c0 0208 	movt	r2, #8
   81ae8:	4790      	blx	r2
				prvUnlockQueue( pxQueue );
   81aea:	4620      	mov	r0, r4
   81aec:	f241 43fd 	movw	r3, #5373	; 0x14fd
   81af0:	f2c0 0308 	movt	r3, #8
   81af4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81af6:	f242 1041 	movw	r0, #8513	; 0x2141
   81afa:	f2c0 0008 	movt	r0, #8
   81afe:	4780      	blx	r0
   81b00:	2800      	cmp	r0, #0
   81b02:	f47f af66 	bne.w	819d2 <xQueueGenericReceive+0x56>
				{
					portYIELD_WITHIN_API();
   81b06:	f241 2125 	movw	r1, #4645	; 0x1225
   81b0a:	f2c0 0108 	movt	r1, #8
   81b0e:	4788      	blx	r1
   81b10:	e75f      	b.n	819d2 <xQueueGenericReceive+0x56>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81b12:	4620      	mov	r0, r4
   81b14:	f241 41fd 	movw	r1, #5373	; 0x14fd
   81b18:	f2c0 0108 	movt	r1, #8
   81b1c:	4788      	blx	r1
				( void ) xTaskResumeAll();
   81b1e:	f242 1241 	movw	r2, #8513	; 0x2141
   81b22:	f2c0 0208 	movt	r2, #8
   81b26:	4790      	blx	r2
   81b28:	e753      	b.n	819d2 <xQueueGenericReceive+0x56>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   81b2a:	4620      	mov	r0, r4
   81b2c:	f241 43fd 	movw	r3, #5373	; 0x14fd
   81b30:	f2c0 0308 	movt	r3, #8
   81b34:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81b36:	f242 1041 	movw	r0, #8513	; 0x2141
   81b3a:	f2c0 0008 	movt	r0, #8
   81b3e:	4780      	blx	r0
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   81b40:	f04f 0000 	mov.w	r0, #0
		}
	}
}
   81b44:	b005      	add	sp, #20
   81b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81b4a:	bf00      	nop

00081b4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   81b4c:	b538      	push	{r3, r4, r5, lr}
   81b4e:	4604      	mov	r4, r0
   81b50:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   81b52:	f241 2349 	movw	r3, #4681	; 0x1249
   81b56:	f2c0 0308 	movt	r3, #8
   81b5a:	4798      	blx	r3
   81b5c:	6c60      	ldr	r0, [r4, #68]	; 0x44
   81b5e:	f1b0 3fff 	cmp.w	r0, #4294967295
   81b62:	bf04      	itt	eq
   81b64:	2000      	moveq	r0, #0
   81b66:	6460      	streq	r0, [r4, #68]	; 0x44
   81b68:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   81b6a:	f1b1 3fff 	cmp.w	r1, #4294967295
   81b6e:	bf04      	itt	eq
   81b70:	2100      	moveq	r1, #0
   81b72:	64a1      	streq	r1, [r4, #72]	; 0x48
   81b74:	f241 2271 	movw	r2, #4721	; 0x1271
   81b78:	f2c0 0208 	movt	r2, #8
   81b7c:	4790      	blx	r2
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   81b7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81b80:	b93b      	cbnz	r3, 81b92 <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81b82:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81b86:	4629      	mov	r1, r5
   81b88:	f242 5221 	movw	r2, #9505	; 0x2521
   81b8c:	f2c0 0208 	movt	r2, #8
   81b90:	4790      	blx	r2
		}
		prvUnlockQueue( pxQueue );
   81b92:	4620      	mov	r0, r4
   81b94:	f241 41fd 	movw	r1, #5373	; 0x14fd
   81b98:	f2c0 0108 	movt	r1, #8
   81b9c:	4788      	blx	r1
   81b9e:	bd38      	pop	{r3, r4, r5, pc}

00081ba0 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   81ba0:	b510      	push	{r4, lr}
   81ba2:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   81ba4:	f648 3348 	movw	r3, #35656	; 0x8b48
   81ba8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81bac:	6818      	ldr	r0, [r3, #0]
   81bae:	8084      	strh	r4, [r0, #4]

	if( xTimeToWake < xTickCount )
   81bb0:	f648 3164 	movw	r1, #35684	; 0x8b64
   81bb4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81bb8:	880a      	ldrh	r2, [r1, #0]
   81bba:	b293      	uxth	r3, r2
   81bbc:	429c      	cmp	r4, r3
   81bbe:	d211      	bcs.n	81be4 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81bc0:	f648 3368 	movw	r3, #35688	; 0x8b68
   81bc4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81bc8:	6818      	ldr	r0, [r3, #0]
   81bca:	f648 3148 	movw	r1, #35656	; 0x8b48
   81bce:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81bd2:	6809      	ldr	r1, [r1, #0]
   81bd4:	f101 0104 	add.w	r1, r1, #4
   81bd8:	f241 1261 	movw	r2, #4449	; 0x1161
   81bdc:	f2c0 0208 	movt	r2, #8
   81be0:	4790      	blx	r2
   81be2:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81be4:	f648 2044 	movw	r0, #35396	; 0x8a44
   81be8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81bec:	6800      	ldr	r0, [r0, #0]
   81bee:	f648 3148 	movw	r1, #35656	; 0x8b48
   81bf2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81bf6:	6809      	ldr	r1, [r1, #0]
   81bf8:	f101 0104 	add.w	r1, r1, #4
   81bfc:	f241 1261 	movw	r2, #4449	; 0x1161
   81c00:	f2c0 0208 	movt	r2, #8
   81c04:	4790      	blx	r2

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   81c06:	f240 0308 	movw	r3, #8
   81c0a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81c0e:	8818      	ldrh	r0, [r3, #0]
   81c10:	b281      	uxth	r1, r0
   81c12:	428c      	cmp	r4, r1
   81c14:	d204      	bcs.n	81c20 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
   81c16:	f240 0208 	movw	r2, #8
   81c1a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81c1e:	8014      	strh	r4, [r2, #0]
   81c20:	bd10      	pop	{r4, pc}
   81c22:	bf00      	nop

00081c24 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   81c24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81c28:	460f      	mov	r7, r1
   81c2a:	4690      	mov	r8, r2
   81c2c:	469a      	mov	sl, r3
   81c2e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   81c30:	9e0c      	ldr	r6, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   81c32:	4681      	mov	r9, r0
   81c34:	b930      	cbnz	r0, 81c44 <xTaskGenericCreate+0x20>
   81c36:	f241 2735 	movw	r7, #4661	; 0x1235
   81c3a:	f2c0 0708 	movt	r7, #8
   81c3e:	47b8      	blx	r7
   81c40:	bf00      	nop
   81c42:	e7fd      	b.n	81c40 <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   81c44:	2d09      	cmp	r5, #9
   81c46:	d906      	bls.n	81c56 <xTaskGenericCreate+0x32>
   81c48:	f241 2535 	movw	r5, #4661	; 0x1235
   81c4c:	f2c0 0508 	movt	r5, #8
   81c50:	47a8      	blx	r5
   81c52:	bf00      	nop
   81c54:	e7fd      	b.n	81c52 <xTaskGenericCreate+0x2e>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   81c56:	f04f 0050 	mov.w	r0, #80	; 0x50
   81c5a:	f241 33c5 	movw	r3, #5061	; 0x13c5
   81c5e:	f2c0 0308 	movt	r3, #8
   81c62:	4798      	blx	r3

	if( pxNewTCB != NULL )
   81c64:	4604      	mov	r4, r0
   81c66:	2800      	cmp	r0, #0
   81c68:	f000 8136 	beq.w	81ed8 <xTaskGenericCreate+0x2b4>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81c6c:	2e00      	cmp	r6, #0
   81c6e:	f040 8131 	bne.w	81ed4 <xTaskGenericCreate+0x2b0>
   81c72:	ea4f 0088 	mov.w	r0, r8, lsl #2
   81c76:	f241 31c5 	movw	r1, #5061	; 0x13c5
   81c7a:	f2c0 0108 	movt	r1, #8
   81c7e:	4788      	blx	r1
   81c80:	4606      	mov	r6, r0
   81c82:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   81c84:	b930      	cbnz	r0, 81c94 <xTaskGenericCreate+0x70>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   81c86:	4620      	mov	r0, r4
   81c88:	f241 42c1 	movw	r2, #5313	; 0x14c1
   81c8c:	f2c0 0208 	movt	r2, #8
   81c90:	4790      	blx	r2
   81c92:	e121      	b.n	81ed8 <xTaskGenericCreate+0x2b4>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   81c94:	4630      	mov	r0, r6
   81c96:	f04f 01a5 	mov.w	r1, #165	; 0xa5
   81c9a:	ea4f 0288 	mov.w	r2, r8, lsl #2
   81c9e:	f244 466b 	movw	r6, #17515	; 0x446b
   81ca2:	f2c0 0608 	movt	r6, #8
   81ca6:	47b0      	blx	r6
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   81ca8:	f108 38ff 	add.w	r8, r8, #4294967295
   81cac:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81cae:	eb00 0288 	add.w	r2, r0, r8, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   81cb2:	f022 0b07 	bic.w	fp, r2, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   81cb6:	f104 0034 	add.w	r0, r4, #52	; 0x34
   81cba:	4639      	mov	r1, r7
   81cbc:	f04f 0210 	mov.w	r2, #16
   81cc0:	f244 5789 	movw	r7, #17801	; 0x4589
   81cc4:	f2c0 0708 	movt	r7, #8
   81cc8:	47b8      	blx	r7
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   81cca:	f04f 0300 	mov.w	r3, #0
   81cce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   81cd2:	2d09      	cmp	r5, #9
   81cd4:	bf34      	ite	cc
   81cd6:	462e      	movcc	r6, r5
   81cd8:	2609      	movcs	r6, #9
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   81cda:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   81cdc:	64e6      	str	r6, [r4, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   81cde:	f104 0704 	add.w	r7, r4, #4
   81ce2:	4638      	mov	r0, r7
   81ce4:	f241 1839 	movw	r8, #4409	; 0x1139
   81ce8:	f2c0 0808 	movt	r8, #8
   81cec:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   81cee:	f104 0018 	add.w	r0, r4, #24
   81cf2:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   81cf4:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   81cf6:	f1c6 060a 	rsb	r6, r6, #10
   81cfa:	8326      	strh	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   81cfc:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   81cfe:	4658      	mov	r0, fp
   81d00:	4649      	mov	r1, r9
   81d02:	4652      	mov	r2, sl
   81d04:	f241 13e5 	movw	r3, #4581	; 0x11e5
   81d08:	f2c0 0308 	movt	r3, #8
   81d0c:	4798      	blx	r3
   81d0e:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   81d10:	f010 0f07 	tst.w	r0, #7
   81d14:	d006      	beq.n	81d24 <xTaskGenericCreate+0x100>
   81d16:	f241 2435 	movw	r4, #4661	; 0x1235
   81d1a:	f2c0 0408 	movt	r4, #8
   81d1e:	47a0      	blx	r4
   81d20:	bf00      	nop
   81d22:	e7fd      	b.n	81d20 <xTaskGenericCreate+0xfc>

		if( ( void * ) pxCreatedTask != NULL )
   81d24:	990b      	ldr	r1, [sp, #44]	; 0x2c
   81d26:	b101      	cbz	r1, 81d2a <xTaskGenericCreate+0x106>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   81d28:	600c      	str	r4, [r1, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   81d2a:	f241 2049 	movw	r0, #4681	; 0x1249
   81d2e:	f2c0 0008 	movt	r0, #8
   81d32:	4780      	blx	r0
		{
			uxCurrentNumberOfTasks++;
   81d34:	f648 3388 	movw	r3, #35720	; 0x8b88
   81d38:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81d3c:	681a      	ldr	r2, [r3, #0]
   81d3e:	f102 0201 	add.w	r2, r2, #1
   81d42:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   81d44:	f648 3148 	movw	r1, #35656	; 0x8b48
   81d48:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81d4c:	6808      	ldr	r0, [r1, #0]
   81d4e:	2800      	cmp	r0, #0
   81d50:	d158      	bne.n	81e04 <xTaskGenericCreate+0x1e0>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   81d52:	f648 3148 	movw	r1, #35656	; 0x8b48
   81d56:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81d5a:	600c      	str	r4, [r1, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   81d5c:	f648 3088 	movw	r0, #35720	; 0x8b88
   81d60:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81d64:	6803      	ldr	r3, [r0, #0]
   81d66:	2b01      	cmp	r3, #1
   81d68:	d15f      	bne.n	81e2a <xTaskGenericCreate+0x206>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   81d6a:	f648 297c 	movw	r9, #35452	; 0x8a7c
   81d6e:	f2c2 0907 	movt	r9, #8199	; 0x2007
   81d72:	4648      	mov	r0, r9
   81d74:	f241 1621 	movw	r6, #4385	; 0x1121
   81d78:	f2c0 0608 	movt	r6, #8
   81d7c:	47b0      	blx	r6
   81d7e:	f109 0014 	add.w	r0, r9, #20
   81d82:	47b0      	blx	r6
   81d84:	f109 0028 	add.w	r0, r9, #40	; 0x28
   81d88:	47b0      	blx	r6
   81d8a:	f109 003c 	add.w	r0, r9, #60	; 0x3c
   81d8e:	47b0      	blx	r6
   81d90:	f109 0050 	add.w	r0, r9, #80	; 0x50
   81d94:	47b0      	blx	r6
   81d96:	f109 0064 	add.w	r0, r9, #100	; 0x64
   81d9a:	47b0      	blx	r6
   81d9c:	f109 0078 	add.w	r0, r9, #120	; 0x78
   81da0:	47b0      	blx	r6
   81da2:	f109 008c 	add.w	r0, r9, #140	; 0x8c
   81da6:	47b0      	blx	r6
   81da8:	f109 00a0 	add.w	r0, r9, #160	; 0xa0
   81dac:	47b0      	blx	r6
   81dae:	f109 00b4 	add.w	r0, r9, #180	; 0xb4
   81db2:	47b0      	blx	r6
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   81db4:	f648 3970 	movw	r9, #35696	; 0x8b70
   81db8:	f2c2 0907 	movt	r9, #8199	; 0x2007
   81dbc:	4648      	mov	r0, r9
   81dbe:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   81dc0:	f648 2864 	movw	r8, #35428	; 0x8a64
   81dc4:	f2c2 0807 	movt	r8, #8199	; 0x2007
   81dc8:	4640      	mov	r0, r8
   81dca:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   81dcc:	f648 304c 	movw	r0, #35660	; 0x8b4c
   81dd0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81dd4:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   81dd6:	f648 2050 	movw	r0, #35408	; 0x8a50
   81dda:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81dde:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   81de0:	f648 2030 	movw	r0, #35376	; 0x8a30
   81de4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81de8:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   81dea:	f648 2244 	movw	r2, #35396	; 0x8a44
   81dee:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81df2:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   81df6:	f648 3168 	movw	r1, #35688	; 0x8b68
   81dfa:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81dfe:	f8c1 8000 	str.w	r8, [r1]
   81e02:	e012      	b.n	81e2a <xTaskGenericCreate+0x206>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   81e04:	f648 2348 	movw	r3, #35400	; 0x8a48
   81e08:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81e0c:	681a      	ldr	r2, [r3, #0]
   81e0e:	b962      	cbnz	r2, 81e2a <xTaskGenericCreate+0x206>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   81e10:	f648 3148 	movw	r1, #35656	; 0x8b48
   81e14:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81e18:	6808      	ldr	r0, [r1, #0]
   81e1a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   81e1c:	429d      	cmp	r5, r3
   81e1e:	d304      	bcc.n	81e2a <xTaskGenericCreate+0x206>
					{
						pxCurrentTCB = pxNewTCB;
   81e20:	f648 3248 	movw	r2, #35656	; 0x8b48
   81e24:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81e28:	6014      	str	r4, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   81e2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81e2c:	f648 338c 	movw	r3, #35724	; 0x8b8c
   81e30:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81e34:	681a      	ldr	r2, [r3, #0]
   81e36:	4290      	cmp	r0, r2
   81e38:	d904      	bls.n	81e44 <xTaskGenericCreate+0x220>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   81e3a:	f648 318c 	movw	r1, #35724	; 0x8b8c
   81e3e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81e42:	6008      	str	r0, [r1, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   81e44:	f648 336c 	movw	r3, #35692	; 0x8b6c
   81e48:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81e4c:	681a      	ldr	r2, [r3, #0]
   81e4e:	6462      	str	r2, [r4, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
   81e50:	f102 0201 	add.w	r2, r2, #1
   81e54:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   81e56:	f648 2178 	movw	r1, #35448	; 0x8a78
   81e5a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81e5e:	680b      	ldr	r3, [r1, #0]
   81e60:	4298      	cmp	r0, r3
   81e62:	d904      	bls.n	81e6e <xTaskGenericCreate+0x24a>
   81e64:	f648 2278 	movw	r2, #35448	; 0x8a78
   81e68:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81e6c:	6010      	str	r0, [r2, #0]
   81e6e:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   81e72:	f648 207c 	movw	r0, #35452	; 0x8a7c
   81e76:	4603      	mov	r3, r0
   81e78:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81e7c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   81e80:	4639      	mov	r1, r7
   81e82:	f241 1241 	movw	r2, #4417	; 0x1141
   81e86:	f2c0 0208 	movt	r2, #8
   81e8a:	4790      	blx	r2

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   81e8c:	f241 2171 	movw	r1, #4721	; 0x1271
   81e90:	f2c0 0108 	movt	r1, #8
   81e94:	4788      	blx	r1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   81e96:	f648 2048 	movw	r0, #35400	; 0x8a48
   81e9a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81e9e:	6803      	ldr	r3, [r0, #0]
   81ea0:	b183      	cbz	r3, 81ec4 <xTaskGenericCreate+0x2a0>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   81ea2:	f648 3248 	movw	r2, #35656	; 0x8b48
   81ea6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81eaa:	6811      	ldr	r1, [r2, #0]
   81eac:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
   81eae:	4285      	cmp	r5, r0
   81eb0:	d90c      	bls.n	81ecc <xTaskGenericCreate+0x2a8>
			{
				portYIELD_WITHIN_API();
   81eb2:	f241 2325 	movw	r3, #4645	; 0x1225
   81eb6:	f2c0 0308 	movt	r3, #8
   81eba:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   81ebc:	f04f 0001 	mov.w	r0, #1
   81ec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81ec4:	f04f 0001 	mov.w	r0, #1
   81ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81ecc:	f04f 0001 	mov.w	r0, #1
   81ed0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81ed4:	6306      	str	r6, [r0, #48]	; 0x30
   81ed6:	e6dd      	b.n	81c94 <xTaskGenericCreate+0x70>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   81ed8:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   81edc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00081ee0 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   81ee0:	b510      	push	{r4, lr}
   81ee2:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   81ee4:	f04f 0300 	mov.w	r3, #0
   81ee8:	9300      	str	r3, [sp, #0]
   81eea:	9301      	str	r3, [sp, #4]
   81eec:	9302      	str	r3, [sp, #8]
   81eee:	9303      	str	r3, [sp, #12]
   81ef0:	f242 208d 	movw	r0, #8845	; 0x228d
   81ef4:	f2c0 0008 	movt	r0, #8
   81ef8:	f646 3194 	movw	r1, #27540	; 0x6b94
   81efc:	f2c0 0108 	movt	r1, #8
   81f00:	f44f 7280 	mov.w	r2, #256	; 0x100
   81f04:	f641 4425 	movw	r4, #7205	; 0x1c25
   81f08:	f2c0 0408 	movt	r4, #8
   81f0c:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   81f0e:	2801      	cmp	r0, #1
   81f10:	d11f      	bne.n	81f52 <vTaskStartScheduler+0x72>
		{
			xReturn = xTimerCreateTimerTask();
   81f12:	f642 1331 	movw	r3, #10545	; 0x2931
   81f16:	f2c0 0308 	movt	r3, #8
   81f1a:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   81f1c:	2801      	cmp	r0, #1
   81f1e:	d118      	bne.n	81f52 <vTaskStartScheduler+0x72>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   81f20:	f241 2135 	movw	r1, #4661	; 0x1235
   81f24:	f2c0 0108 	movt	r1, #8
   81f28:	4788      	blx	r1

		xSchedulerRunning = pdTRUE;
   81f2a:	f648 2348 	movw	r3, #35400	; 0x8a48
   81f2e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81f32:	f04f 0201 	mov.w	r2, #1
   81f36:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   81f38:	f648 3064 	movw	r0, #35684	; 0x8b64
   81f3c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81f40:	f04f 0100 	mov.w	r1, #0
   81f44:	8001      	strh	r1, [r0, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   81f46:	f241 3329 	movw	r3, #4905	; 0x1329
   81f4a:	f2c0 0308 	movt	r3, #8
   81f4e:	4798      	blx	r3
   81f50:	e007      	b.n	81f62 <vTaskStartScheduler+0x82>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   81f52:	b930      	cbnz	r0, 81f62 <vTaskStartScheduler+0x82>
   81f54:	f241 2035 	movw	r0, #4661	; 0x1235
   81f58:	f2c0 0008 	movt	r0, #8
   81f5c:	4780      	blx	r0
   81f5e:	bf00      	nop
   81f60:	e7fd      	b.n	81f5e <vTaskStartScheduler+0x7e>
}
   81f62:	b004      	add	sp, #16
   81f64:	bd10      	pop	{r4, pc}
   81f66:	bf00      	nop

00081f68 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   81f68:	f648 3344 	movw	r3, #35652	; 0x8b44
   81f6c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81f70:	681a      	ldr	r2, [r3, #0]
   81f72:	f102 0201 	add.w	r2, r2, #1
   81f76:	601a      	str	r2, [r3, #0]
   81f78:	4770      	bx	lr
   81f7a:	bf00      	nop

00081f7c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   81f7c:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   81f7e:	f241 2349 	movw	r3, #4681	; 0x1249
   81f82:	f2c0 0308 	movt	r3, #8
   81f86:	4798      	blx	r3
	{
		xTicks = xTickCount;
   81f88:	f648 3064 	movw	r0, #35684	; 0x8b64
   81f8c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81f90:	8804      	ldrh	r4, [r0, #0]
   81f92:	b2a4      	uxth	r4, r4
	}
	taskEXIT_CRITICAL();
   81f94:	f241 2171 	movw	r1, #4721	; 0x1271
   81f98:	f2c0 0108 	movt	r1, #8
   81f9c:	4788      	blx	r1

	return xTicks;
}
   81f9e:	4620      	mov	r0, r4
   81fa0:	bd10      	pop	{r4, pc}
   81fa2:	bf00      	nop

00081fa4 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81fa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81fa8:	f648 3344 	movw	r3, #35652	; 0x8b44
   81fac:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81fb0:	6818      	ldr	r0, [r3, #0]
   81fb2:	2800      	cmp	r0, #0
   81fb4:	f040 80b9 	bne.w	8212a <vTaskIncrementTick+0x186>
	{
		++xTickCount;
   81fb8:	f648 3364 	movw	r3, #35684	; 0x8b64
   81fbc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81fc0:	8818      	ldrh	r0, [r3, #0]
   81fc2:	f100 0001 	add.w	r0, r0, #1
   81fc6:	b281      	uxth	r1, r0
   81fc8:	8019      	strh	r1, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   81fca:	881a      	ldrh	r2, [r3, #0]
   81fcc:	b293      	uxth	r3, r2
   81fce:	2b00      	cmp	r3, #0
   81fd0:	d139      	bne.n	82046 <vTaskIncrementTick+0xa2>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81fd2:	f648 2044 	movw	r0, #35396	; 0x8a44
   81fd6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81fda:	6801      	ldr	r1, [r0, #0]
   81fdc:	680a      	ldr	r2, [r1, #0]
   81fde:	b132      	cbz	r2, 81fee <vTaskIncrementTick+0x4a>
   81fe0:	f241 2535 	movw	r5, #4661	; 0x1235
   81fe4:	f2c0 0508 	movt	r5, #8
   81fe8:	47a8      	blx	r5
   81fea:	bf00      	nop
   81fec:	e7fd      	b.n	81fea <vTaskIncrementTick+0x46>

			pxTemp = pxDelayedTaskList;
   81fee:	f648 2344 	movw	r3, #35396	; 0x8a44
   81ff2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81ff6:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81ff8:	f648 3268 	movw	r2, #35688	; 0x8b68
   81ffc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82000:	6810      	ldr	r0, [r2, #0]
   82002:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   82004:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   82006:	f648 3260 	movw	r2, #35680	; 0x8b60
   8200a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8200e:	6811      	ldr	r1, [r2, #0]
   82010:	f101 0101 	add.w	r1, r1, #1
   82014:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   82016:	681b      	ldr	r3, [r3, #0]
   82018:	6818      	ldr	r0, [r3, #0]
   8201a:	b938      	cbnz	r0, 8202c <vTaskIncrementTick+0x88>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   8201c:	f240 0308 	movw	r3, #8
   82020:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82024:	f64f 70ff 	movw	r0, #65535	; 0xffff
   82028:	8018      	strh	r0, [r3, #0]
   8202a:	e00c      	b.n	82046 <vTaskIncrementTick+0xa2>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   8202c:	f648 2244 	movw	r2, #35396	; 0x8a44
   82030:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82034:	6811      	ldr	r1, [r2, #0]
   82036:	68cb      	ldr	r3, [r1, #12]
   82038:	68d8      	ldr	r0, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   8203a:	8882      	ldrh	r2, [r0, #4]
   8203c:	f240 0108 	movw	r1, #8
   82040:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82044:	800a      	strh	r2, [r1, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   82046:	f648 3264 	movw	r2, #35684	; 0x8b64
   8204a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8204e:	8811      	ldrh	r1, [r2, #0]
   82050:	b288      	uxth	r0, r1
   82052:	f240 0308 	movw	r3, #8
   82056:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8205a:	881a      	ldrh	r2, [r3, #0]
   8205c:	b291      	uxth	r1, r2
   8205e:	4288      	cmp	r0, r1
   82060:	d36b      	bcc.n	8213a <vTaskIncrementTick+0x196>
   82062:	f648 2044 	movw	r0, #35396	; 0x8a44
   82066:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8206a:	6803      	ldr	r3, [r0, #0]
   8206c:	681a      	ldr	r2, [r3, #0]
   8206e:	b182      	cbz	r2, 82092 <vTaskIncrementTick+0xee>
   82070:	f648 2444 	movw	r4, #35396	; 0x8a44
   82074:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82078:	6821      	ldr	r1, [r4, #0]
   8207a:	68c8      	ldr	r0, [r1, #12]
   8207c:	68c4      	ldr	r4, [r0, #12]
   8207e:	88a3      	ldrh	r3, [r4, #4]
   82080:	f648 3264 	movw	r2, #35684	; 0x8b64
   82084:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82088:	8811      	ldrh	r1, [r2, #0]
   8208a:	b288      	uxth	r0, r1
   8208c:	4283      	cmp	r3, r0
   8208e:	d91b      	bls.n	820c8 <vTaskIncrementTick+0x124>
   82090:	e013      	b.n	820ba <vTaskIncrementTick+0x116>
   82092:	f240 0308 	movw	r3, #8
   82096:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8209a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8209e:	8019      	strh	r1, [r3, #0]
   820a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   820a4:	6834      	ldr	r4, [r6, #0]
   820a6:	68e2      	ldr	r2, [r4, #12]
   820a8:	68d4      	ldr	r4, [r2, #12]
   820aa:	88a3      	ldrh	r3, [r4, #4]
   820ac:	4648      	mov	r0, r9
   820ae:	f2c2 0007 	movt	r0, #8199	; 0x2007
   820b2:	8801      	ldrh	r1, [r0, #0]
   820b4:	b28a      	uxth	r2, r1
   820b6:	4293      	cmp	r3, r2
   820b8:	d91c      	bls.n	820f4 <vTaskIncrementTick+0x150>
   820ba:	f240 0008 	movw	r0, #8
   820be:	f2c2 0007 	movt	r0, #8199	; 0x2007
   820c2:	8003      	strh	r3, [r0, #0]
   820c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   820c8:	f241 17a5 	movw	r7, #4517	; 0x11a5
   820cc:	f2c0 0708 	movt	r7, #8
   820d0:	f648 2878 	movw	r8, #35448	; 0x8a78
   820d4:	f2c2 0807 	movt	r8, #8199	; 0x2007
   820d8:	f648 2b7c 	movw	fp, #35452	; 0x8a7c
   820dc:	f2c2 0b07 	movt	fp, #8199	; 0x2007
   820e0:	f241 1a41 	movw	sl, #4417	; 0x1141
   820e4:	f2c0 0a08 	movt	sl, #8
   820e8:	f648 2644 	movw	r6, #35396	; 0x8a44
   820ec:	f2c2 0607 	movt	r6, #8199	; 0x2007
   820f0:	f648 3964 	movw	r9, #35684	; 0x8b64
   820f4:	f104 0504 	add.w	r5, r4, #4
   820f8:	4628      	mov	r0, r5
   820fa:	47b8      	blx	r7
   820fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   820fe:	b113      	cbz	r3, 82106 <vTaskIncrementTick+0x162>
   82100:	f104 0018 	add.w	r0, r4, #24
   82104:	47b8      	blx	r7
   82106:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   82108:	f8d8 2000 	ldr.w	r2, [r8]
   8210c:	4291      	cmp	r1, r2
   8210e:	bf88      	it	hi
   82110:	f8c8 1000 	strhi.w	r1, [r8]
   82114:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   82118:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   8211c:	4629      	mov	r1, r5
   8211e:	47d0      	blx	sl
   82120:	6833      	ldr	r3, [r6, #0]
   82122:	6819      	ldr	r1, [r3, #0]
   82124:	2900      	cmp	r1, #0
   82126:	d1bd      	bne.n	820a4 <vTaskIncrementTick+0x100>
   82128:	e7b3      	b.n	82092 <vTaskIncrementTick+0xee>
	}
	else
	{
		++uxMissedTicks;
   8212a:	f648 212c 	movw	r1, #35372	; 0x8a2c
   8212e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82132:	680a      	ldr	r2, [r1, #0]
   82134:	f102 0201 	add.w	r2, r2, #1
   82138:	600a      	str	r2, [r1, #0]
   8213a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8213e:	bf00      	nop

00082140 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   82140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   82144:	f648 3344 	movw	r3, #35652	; 0x8b44
   82148:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8214c:	6818      	ldr	r0, [r3, #0]
   8214e:	b930      	cbnz	r0, 8215e <xTaskResumeAll+0x1e>
   82150:	f241 2535 	movw	r5, #4661	; 0x1235
   82154:	f2c0 0508 	movt	r5, #8
   82158:	47a8      	blx	r5
   8215a:	bf00      	nop
   8215c:	e7fd      	b.n	8215a <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   8215e:	f241 2149 	movw	r1, #4681	; 0x1249
   82162:	f2c0 0108 	movt	r1, #8
   82166:	4788      	blx	r1
	{
		--uxSchedulerSuspended;
   82168:	f648 3444 	movw	r4, #35652	; 0x8b44
   8216c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82170:	6822      	ldr	r2, [r4, #0]
   82172:	f102 33ff 	add.w	r3, r2, #4294967295
   82176:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82178:	6820      	ldr	r0, [r4, #0]
   8217a:	2800      	cmp	r0, #0
   8217c:	d178      	bne.n	82270 <xTaskResumeAll+0x130>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   8217e:	f648 3188 	movw	r1, #35720	; 0x8b88
   82182:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82186:	680c      	ldr	r4, [r1, #0]
   82188:	bb4c      	cbnz	r4, 821de <xTaskResumeAll+0x9e>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   8218a:	f04f 0400 	mov.w	r4, #0
   8218e:	e074      	b.n	8227a <xTaskResumeAll+0x13a>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   82190:	f8d8 200c 	ldr.w	r2, [r8, #12]
   82194:	68d4      	ldr	r4, [r2, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   82196:	f104 0018 	add.w	r0, r4, #24
   8219a:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8219c:	f104 0904 	add.w	r9, r4, #4
   821a0:	4648      	mov	r0, r9
   821a2:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   821a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   821a6:	6830      	ldr	r0, [r6, #0]
   821a8:	4283      	cmp	r3, r0
   821aa:	bf88      	it	hi
   821ac:	6033      	strhi	r3, [r6, #0]
   821ae:	4651      	mov	r1, sl
   821b0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   821b4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   821b8:	eb01 0082 	add.w	r0, r1, r2, lsl #2
   821bc:	4649      	mov	r1, r9
   821be:	f241 1341 	movw	r3, #4417	; 0x1141
   821c2:	f2c0 0308 	movt	r3, #8
   821c6:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   821c8:	f648 3048 	movw	r0, #35656	; 0x8b48
   821cc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   821d0:	6801      	ldr	r1, [r0, #0]
   821d2:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
   821d4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   821d6:	4294      	cmp	r4, r2
   821d8:	bf28      	it	cs
   821da:	2501      	movcs	r5, #1
   821dc:	e00f      	b.n	821fe <xTaskResumeAll+0xbe>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   821de:	f04f 0500 	mov.w	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   821e2:	f648 384c 	movw	r8, #35660	; 0x8b4c
   821e6:	f2c2 0807 	movt	r8, #8199	; 0x2007
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   821ea:	f241 17a5 	movw	r7, #4517	; 0x11a5
   821ee:	f2c0 0708 	movt	r7, #8
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   821f2:	f648 2678 	movw	r6, #35448	; 0x8a78
   821f6:	f2c2 0607 	movt	r6, #8199	; 0x2007
   821fa:	f648 2a7c 	movw	sl, #35452	; 0x8a7c
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   821fe:	f8d8 2000 	ldr.w	r2, [r8]
   82202:	2a00      	cmp	r2, #0
   82204:	d1c4      	bne.n	82190 <xTaskResumeAll+0x50>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   82206:	f648 232c 	movw	r3, #35372	; 0x8a2c
   8220a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8220e:	6818      	ldr	r0, [r3, #0]
   82210:	b1b0      	cbz	r0, 82240 <xTaskResumeAll+0x100>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   82212:	f648 222c 	movw	r2, #35372	; 0x8a2c
   82216:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8221a:	6813      	ldr	r3, [r2, #0]
   8221c:	b1cb      	cbz	r3, 82252 <xTaskResumeAll+0x112>
					{
						vTaskIncrementTick();
   8221e:	f641 75a5 	movw	r5, #8101	; 0x1fa5
   82222:	f2c0 0508 	movt	r5, #8
						--uxMissedTicks;
   82226:	f648 242c 	movw	r4, #35372	; 0x8a2c
   8222a:	f2c2 0407 	movt	r4, #8199	; 0x2007
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   8222e:	47a8      	blx	r5
						--uxMissedTicks;
   82230:	6820      	ldr	r0, [r4, #0]
   82232:	f100 31ff 	add.w	r1, r0, #4294967295
   82236:	6021      	str	r1, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   82238:	6822      	ldr	r2, [r4, #0]
   8223a:	2a00      	cmp	r2, #0
   8223c:	d1f7      	bne.n	8222e <xTaskResumeAll+0xee>
   8223e:	e008      	b.n	82252 <xTaskResumeAll+0x112>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   82240:	2d01      	cmp	r5, #1
   82242:	d006      	beq.n	82252 <xTaskResumeAll+0x112>
   82244:	f648 3184 	movw	r1, #35716	; 0x8b84
   82248:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8224c:	680c      	ldr	r4, [r1, #0]
   8224e:	2c01      	cmp	r4, #1
   82250:	d111      	bne.n	82276 <xTaskResumeAll+0x136>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   82252:	f648 3384 	movw	r3, #35716	; 0x8b84
   82256:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8225a:	f04f 0400 	mov.w	r4, #0
   8225e:	601c      	str	r4, [r3, #0]
					portYIELD_WITHIN_API();
   82260:	f241 2025 	movw	r0, #4645	; 0x1225
   82264:	f2c0 0008 	movt	r0, #8
   82268:	4780      	blx	r0
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   8226a:	f04f 0401 	mov.w	r4, #1
   8226e:	e004      	b.n	8227a <xTaskResumeAll+0x13a>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   82270:	f04f 0400 	mov.w	r4, #0
   82274:	e001      	b.n	8227a <xTaskResumeAll+0x13a>
   82276:	f04f 0400 	mov.w	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   8227a:	f241 2171 	movw	r1, #4721	; 0x1271
   8227e:	f2c0 0108 	movt	r1, #8
   82282:	4788      	blx	r1

	return xAlreadyYielded;
}
   82284:	4620      	mov	r0, r4
   82286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8228a:	bf00      	nop

0008228c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   8228c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   82290:	f648 254c 	movw	r5, #35404	; 0x8a4c
   82294:	f2c2 0507 	movt	r5, #8199	; 0x2007
		{
			vTaskSuspendAll();
   82298:	f641 7869 	movw	r8, #8041	; 0x1f69
   8229c:	f2c0 0808 	movt	r8, #8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   822a0:	f648 2650 	movw	r6, #35408	; 0x8a50
   822a4:	f2c2 0607 	movt	r6, #8199	; 0x2007
			xTaskResumeAll();
   822a8:	f242 1741 	movw	r7, #8513	; 0x2141
   822ac:	e02d      	b.n	8230a <prvIdleTask+0x7e>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   822ae:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   822b0:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   822b2:	463b      	mov	r3, r7
   822b4:	f2c0 0308 	movt	r3, #8
   822b8:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   822ba:	b334      	cbz	r4, 8230a <prvIdleTask+0x7e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   822bc:	f241 2049 	movw	r0, #4681	; 0x1249
   822c0:	f2c0 0008 	movt	r0, #8
   822c4:	4780      	blx	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   822c6:	68f1      	ldr	r1, [r6, #12]
   822c8:	68cc      	ldr	r4, [r1, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   822ca:	f104 0004 	add.w	r0, r4, #4
   822ce:	f241 12a5 	movw	r2, #4517	; 0x11a5
   822d2:	f2c0 0208 	movt	r2, #8
   822d6:	4790      	blx	r2
					--uxCurrentNumberOfTasks;
   822d8:	f648 3388 	movw	r3, #35720	; 0x8b88
   822dc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   822e0:	6818      	ldr	r0, [r3, #0]
   822e2:	f100 31ff 	add.w	r1, r0, #4294967295
   822e6:	6019      	str	r1, [r3, #0]
					--uxTasksDeleted;
   822e8:	682a      	ldr	r2, [r5, #0]
   822ea:	f102 33ff 	add.w	r3, r2, #4294967295
   822ee:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   822f0:	f241 2071 	movw	r0, #4721	; 0x1271
   822f4:	f2c0 0008 	movt	r0, #8
   822f8:	4780      	blx	r0
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   822fa:	6b20      	ldr	r0, [r4, #48]	; 0x30
   822fc:	f241 49c1 	movw	r9, #5313	; 0x14c1
   82300:	f2c0 0908 	movt	r9, #8
   82304:	47c8      	blx	r9
		vPortFree( pxTCB );
   82306:	4620      	mov	r0, r4
   82308:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   8230a:	682b      	ldr	r3, [r5, #0]
   8230c:	2b00      	cmp	r3, #0
   8230e:	d1ce      	bne.n	822ae <prvIdleTask+0x22>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   82310:	f648 207c 	movw	r0, #35452	; 0x8a7c
   82314:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82318:	6801      	ldr	r1, [r0, #0]
   8231a:	2901      	cmp	r1, #1
   8231c:	d9f5      	bls.n	8230a <prvIdleTask+0x7e>
			{
				taskYIELD();
   8231e:	f241 2225 	movw	r2, #4645	; 0x1225
   82322:	f2c0 0208 	movt	r2, #8
   82326:	4790      	blx	r2
   82328:	e7ef      	b.n	8230a <prvIdleTask+0x7e>
   8232a:	bf00      	nop

0008232c <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   8232c:	b538      	push	{r3, r4, r5, lr}
   8232e:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   82330:	4605      	mov	r5, r0
   82332:	b930      	cbnz	r0, 82342 <vTaskDelayUntil+0x16>
   82334:	f241 2435 	movw	r4, #4661	; 0x1235
   82338:	f2c0 0408 	movt	r4, #8
   8233c:	47a0      	blx	r4
   8233e:	bf00      	nop
   82340:	e7fd      	b.n	8233e <vTaskDelayUntil+0x12>
		configASSERT( ( xTimeIncrement > 0U ) );
   82342:	b931      	cbnz	r1, 82352 <vTaskDelayUntil+0x26>
   82344:	f241 2535 	movw	r5, #4661	; 0x1235
   82348:	f2c0 0508 	movt	r5, #8
   8234c:	47a8      	blx	r5
   8234e:	bf00      	nop
   82350:	e7fd      	b.n	8234e <vTaskDelayUntil+0x22>

		vTaskSuspendAll();
   82352:	f641 7369 	movw	r3, #8041	; 0x1f69
   82356:	f2c0 0308 	movt	r3, #8
   8235a:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   8235c:	8828      	ldrh	r0, [r5, #0]
   8235e:	1901      	adds	r1, r0, r4
   82360:	b28c      	uxth	r4, r1

			if( xTickCount < *pxPreviousWakeTime )
   82362:	f648 3264 	movw	r2, #35684	; 0x8b64
   82366:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8236a:	8813      	ldrh	r3, [r2, #0]
   8236c:	b299      	uxth	r1, r3
   8236e:	4288      	cmp	r0, r1
   82370:	d90b      	bls.n	8238a <vTaskDelayUntil+0x5e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   82372:	42a0      	cmp	r0, r4
   82374:	d934      	bls.n	823e0 <vTaskDelayUntil+0xb4>
   82376:	f648 3164 	movw	r1, #35684	; 0x8b64
   8237a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8237e:	8808      	ldrh	r0, [r1, #0]
   82380:	b282      	uxth	r2, r0
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   82382:	802c      	strh	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   82384:	4294      	cmp	r4, r2
   82386:	d91d      	bls.n	823c4 <vTaskDelayUntil+0x98>
   82388:	e00a      	b.n	823a0 <vTaskDelayUntil+0x74>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   8238a:	42a0      	cmp	r0, r4
   8238c:	d826      	bhi.n	823dc <vTaskDelayUntil+0xb0>
   8238e:	f648 3064 	movw	r0, #35684	; 0x8b64
   82392:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82396:	8802      	ldrh	r2, [r0, #0]
   82398:	b293      	uxth	r3, r2
   8239a:	429c      	cmp	r4, r3
   8239c:	d81e      	bhi.n	823dc <vTaskDelayUntil+0xb0>
   8239e:	e01f      	b.n	823e0 <vTaskDelayUntil+0xb4>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   823a0:	f648 3348 	movw	r3, #35656	; 0x8b48
   823a4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   823a8:	6818      	ldr	r0, [r3, #0]
   823aa:	f100 0004 	add.w	r0, r0, #4
   823ae:	f241 11a5 	movw	r1, #4517	; 0x11a5
   823b2:	f2c0 0108 	movt	r1, #8
   823b6:	4788      	blx	r1
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   823b8:	4620      	mov	r0, r4
   823ba:	f641 32a1 	movw	r2, #7073	; 0x1ba1
   823be:	f2c0 0208 	movt	r2, #8
   823c2:	4790      	blx	r2
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   823c4:	f242 1041 	movw	r0, #8513	; 0x2141
   823c8:	f2c0 0008 	movt	r0, #8
   823cc:	4780      	blx	r0

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   823ce:	b948      	cbnz	r0, 823e4 <vTaskDelayUntil+0xb8>
		{
			portYIELD_WITHIN_API();
   823d0:	f241 2325 	movw	r3, #4645	; 0x1225
   823d4:	f2c0 0308 	movt	r3, #8
   823d8:	4798      	blx	r3
   823da:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   823dc:	802c      	strh	r4, [r5, #0]
   823de:	e7df      	b.n	823a0 <vTaskDelayUntil+0x74>
   823e0:	802c      	strh	r4, [r5, #0]
   823e2:	e7ef      	b.n	823c4 <vTaskDelayUntil+0x98>
   823e4:	bd38      	pop	{r3, r4, r5, pc}
   823e6:	bf00      	nop

000823e8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   823e8:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   823ea:	f648 3344 	movw	r3, #35652	; 0x8b44
   823ee:	f2c2 0307 	movt	r3, #8199	; 0x2007
   823f2:	6818      	ldr	r0, [r3, #0]
   823f4:	b9a8      	cbnz	r0, 82422 <vTaskSwitchContext+0x3a>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   823f6:	f648 2178 	movw	r1, #35448	; 0x8a78
   823fa:	f2c2 0107 	movt	r1, #8199	; 0x2007
   823fe:	680a      	ldr	r2, [r1, #0]
   82400:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   82404:	ea4f 0083 	mov.w	r0, r3, lsl #2
   82408:	f648 217c 	movw	r1, #35452	; 0x8a7c
   8240c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82410:	580a      	ldr	r2, [r1, r0]
   82412:	bb52      	cbnz	r2, 8246a <vTaskSwitchContext+0x82>
   82414:	f648 2378 	movw	r3, #35448	; 0x8a78
   82418:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8241c:	6818      	ldr	r0, [r3, #0]
   8241e:	b988      	cbnz	r0, 82444 <vTaskSwitchContext+0x5c>
   82420:	e009      	b.n	82436 <vTaskSwitchContext+0x4e>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   82422:	f648 3184 	movw	r1, #35716	; 0x8b84
   82426:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8242a:	f04f 0001 	mov.w	r0, #1
   8242e:	6008      	str	r0, [r1, #0]
   82430:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   82432:	681a      	ldr	r2, [r3, #0]
   82434:	b972      	cbnz	r2, 82454 <vTaskSwitchContext+0x6c>
   82436:	f241 2335 	movw	r3, #4661	; 0x1235
   8243a:	f2c0 0308 	movt	r3, #8
   8243e:	4798      	blx	r3
   82440:	bf00      	nop
   82442:	e7fd      	b.n	82440 <vTaskSwitchContext+0x58>
   82444:	f648 2378 	movw	r3, #35448	; 0x8a78
   82448:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8244c:	f648 217c 	movw	r1, #35452	; 0x8a7c
   82450:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82454:	681a      	ldr	r2, [r3, #0]
   82456:	f102 30ff 	add.w	r0, r2, #4294967295
   8245a:	6018      	str	r0, [r3, #0]
   8245c:	681a      	ldr	r2, [r3, #0]
   8245e:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   82462:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
   82466:	2a00      	cmp	r2, #0
   82468:	d0e3      	beq.n	82432 <vTaskSwitchContext+0x4a>
   8246a:	f648 2378 	movw	r3, #35448	; 0x8a78
   8246e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82472:	6819      	ldr	r1, [r3, #0]
   82474:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   82478:	f648 227c 	movw	r2, #35452	; 0x8a7c
   8247c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82480:	eb02 0380 	add.w	r3, r2, r0, lsl #2
   82484:	6859      	ldr	r1, [r3, #4]
   82486:	6848      	ldr	r0, [r1, #4]
   82488:	6058      	str	r0, [r3, #4]
   8248a:	f103 0208 	add.w	r2, r3, #8
   8248e:	4290      	cmp	r0, r2
   82490:	bf04      	itt	eq
   82492:	6840      	ldreq	r0, [r0, #4]
   82494:	6058      	streq	r0, [r3, #4]
   82496:	685b      	ldr	r3, [r3, #4]
   82498:	68d9      	ldr	r1, [r3, #12]
   8249a:	f648 3048 	movw	r0, #35656	; 0x8b48
   8249e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   824a2:	6001      	str	r1, [r0, #0]
   824a4:	bd08      	pop	{r3, pc}
   824a6:	bf00      	nop

000824a8 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   824a8:	b538      	push	{r3, r4, r5, lr}
   824aa:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   824ac:	b930      	cbnz	r0, 824bc <vTaskPlaceOnEventList+0x14>
   824ae:	f241 2435 	movw	r4, #4661	; 0x1235
   824b2:	f2c0 0408 	movt	r4, #8
   824b6:	47a0      	blx	r4
   824b8:	bf00      	nop
   824ba:	e7fd      	b.n	824b8 <vTaskPlaceOnEventList+0x10>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   824bc:	f648 3548 	movw	r5, #35656	; 0x8b48
   824c0:	f2c2 0507 	movt	r5, #8199	; 0x2007
   824c4:	6829      	ldr	r1, [r5, #0]
   824c6:	f101 0118 	add.w	r1, r1, #24
   824ca:	f241 1261 	movw	r2, #4449	; 0x1161
   824ce:	f2c0 0208 	movt	r2, #8
   824d2:	4790      	blx	r2

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   824d4:	6828      	ldr	r0, [r5, #0]
   824d6:	f100 0004 	add.w	r0, r0, #4
   824da:	f241 11a5 	movw	r1, #4517	; 0x11a5
   824de:	f2c0 0108 	movt	r1, #8
   824e2:	4788      	blx	r1
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   824e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   824e8:	4284      	cmp	r4, r0
   824ea:	d10c      	bne.n	82506 <vTaskPlaceOnEventList+0x5e>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   824ec:	6829      	ldr	r1, [r5, #0]
   824ee:	f648 2030 	movw	r0, #35376	; 0x8a30
   824f2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   824f6:	f101 0104 	add.w	r1, r1, #4
   824fa:	f241 1241 	movw	r2, #4417	; 0x1141
   824fe:	f2c0 0208 	movt	r2, #8
   82502:	4790      	blx	r2
   82504:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   82506:	f648 3364 	movw	r3, #35684	; 0x8b64
   8250a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8250e:	881a      	ldrh	r2, [r3, #0]
   82510:	18a1      	adds	r1, r4, r2
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   82512:	b288      	uxth	r0, r1
   82514:	f641 33a1 	movw	r3, #7073	; 0x1ba1
   82518:	f2c0 0308 	movt	r3, #8
   8251c:	4798      	blx	r3
   8251e:	bd38      	pop	{r3, r4, r5, pc}

00082520 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   82520:	b538      	push	{r3, r4, r5, lr}
   82522:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   82524:	b930      	cbnz	r0, 82534 <vTaskPlaceOnEventListRestricted+0x14>
   82526:	f241 2435 	movw	r4, #4661	; 0x1235
   8252a:	f2c0 0408 	movt	r4, #8
   8252e:	47a0      	blx	r4
   82530:	bf00      	nop
   82532:	e7fd      	b.n	82530 <vTaskPlaceOnEventListRestricted+0x10>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   82534:	f648 3448 	movw	r4, #35656	; 0x8b48
   82538:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8253c:	6821      	ldr	r1, [r4, #0]
   8253e:	f101 0118 	add.w	r1, r1, #24
   82542:	f241 1241 	movw	r2, #4417	; 0x1141
   82546:	f2c0 0208 	movt	r2, #8
   8254a:	4790      	blx	r2

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   8254c:	6820      	ldr	r0, [r4, #0]
   8254e:	f100 0004 	add.w	r0, r0, #4
   82552:	f241 11a5 	movw	r1, #4517	; 0x11a5
   82556:	f2c0 0108 	movt	r1, #8
   8255a:	4788      	blx	r1
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   8255c:	f648 3064 	movw	r0, #35684	; 0x8b64
   82560:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82564:	8803      	ldrh	r3, [r0, #0]
   82566:	18ea      	adds	r2, r5, r3
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   82568:	b290      	uxth	r0, r2
   8256a:	f641 31a1 	movw	r1, #7073	; 0x1ba1
   8256e:	f2c0 0108 	movt	r1, #8
   82572:	4788      	blx	r1
   82574:	bd38      	pop	{r3, r4, r5, pc}
   82576:	bf00      	nop

00082578 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   82578:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   8257a:	68c3      	ldr	r3, [r0, #12]
   8257c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   8257e:	b934      	cbnz	r4, 8258e <xTaskRemoveFromEventList+0x16>
   82580:	f241 2435 	movw	r4, #4661	; 0x1235
   82584:	f2c0 0408 	movt	r4, #8
   82588:	47a0      	blx	r4
   8258a:	bf00      	nop
   8258c:	e7fd      	b.n	8258a <xTaskRemoveFromEventList+0x12>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   8258e:	f104 0518 	add.w	r5, r4, #24
   82592:	4628      	mov	r0, r5
   82594:	f241 11a5 	movw	r1, #4517	; 0x11a5
   82598:	f2c0 0108 	movt	r1, #8
   8259c:	4788      	blx	r1

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8259e:	f648 3044 	movw	r0, #35652	; 0x8b44
   825a2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   825a6:	6802      	ldr	r2, [r0, #0]
   825a8:	bb22      	cbnz	r2, 825f4 <xTaskRemoveFromEventList+0x7c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   825aa:	f104 0504 	add.w	r5, r4, #4
   825ae:	4628      	mov	r0, r5
   825b0:	f241 11a5 	movw	r1, #4517	; 0x11a5
   825b4:	f2c0 0108 	movt	r1, #8
   825b8:	4788      	blx	r1
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   825ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   825bc:	f648 2278 	movw	r2, #35448	; 0x8a78
   825c0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   825c4:	6813      	ldr	r3, [r2, #0]
   825c6:	4298      	cmp	r0, r3
   825c8:	d904      	bls.n	825d4 <xTaskRemoveFromEventList+0x5c>
   825ca:	f648 2178 	movw	r1, #35448	; 0x8a78
   825ce:	f2c2 0107 	movt	r1, #8199	; 0x2007
   825d2:	6008      	str	r0, [r1, #0]
   825d4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   825d8:	f648 207c 	movw	r0, #35452	; 0x8a7c
   825dc:	4602      	mov	r2, r0
   825de:	f2c2 0207 	movt	r2, #8199	; 0x2007
   825e2:	eb02 0083 	add.w	r0, r2, r3, lsl #2
   825e6:	4629      	mov	r1, r5
   825e8:	f241 1341 	movw	r3, #4417	; 0x1141
   825ec:	f2c0 0308 	movt	r3, #8
   825f0:	4798      	blx	r3
   825f2:	e009      	b.n	82608 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   825f4:	f648 304c 	movw	r0, #35660	; 0x8b4c
   825f8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   825fc:	4629      	mov	r1, r5
   825fe:	f241 1341 	movw	r3, #4417	; 0x1141
   82602:	f2c0 0308 	movt	r3, #8
   82606:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   82608:	f648 3148 	movw	r1, #35656	; 0x8b48
   8260c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82610:	680a      	ldr	r2, [r1, #0]
   82612:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   82614:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   82616:	4298      	cmp	r0, r3
   82618:	bf34      	ite	cc
   8261a:	2000      	movcc	r0, #0
   8261c:	2001      	movcs	r0, #1
   8261e:	bd38      	pop	{r3, r4, r5, pc}

00082620 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   82620:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   82622:	4603      	mov	r3, r0
   82624:	b930      	cbnz	r0, 82634 <vTaskSetTimeOutState+0x14>
   82626:	f241 2335 	movw	r3, #4661	; 0x1235
   8262a:	f2c0 0308 	movt	r3, #8
   8262e:	4798      	blx	r3
   82630:	bf00      	nop
   82632:	e7fd      	b.n	82630 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   82634:	f648 3260 	movw	r2, #35680	; 0x8b60
   82638:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8263c:	6810      	ldr	r0, [r2, #0]
   8263e:	6018      	str	r0, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   82640:	f648 3164 	movw	r1, #35684	; 0x8b64
   82644:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82648:	880a      	ldrh	r2, [r1, #0]
   8264a:	809a      	strh	r2, [r3, #4]
   8264c:	bd08      	pop	{r3, pc}
   8264e:	bf00      	nop

00082650 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   82650:	b538      	push	{r3, r4, r5, lr}
   82652:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   82654:	4604      	mov	r4, r0
   82656:	b930      	cbnz	r0, 82666 <xTaskCheckForTimeOut+0x16>
   82658:	f241 2335 	movw	r3, #4661	; 0x1235
   8265c:	f2c0 0308 	movt	r3, #8
   82660:	4798      	blx	r3
   82662:	bf00      	nop
   82664:	e7fd      	b.n	82662 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   82666:	b931      	cbnz	r1, 82676 <xTaskCheckForTimeOut+0x26>
   82668:	f241 2535 	movw	r5, #4661	; 0x1235
   8266c:	f2c0 0508 	movt	r5, #8
   82670:	47a8      	blx	r5
   82672:	bf00      	nop
   82674:	e7fd      	b.n	82672 <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
   82676:	f241 2349 	movw	r3, #4681	; 0x1249
   8267a:	f2c0 0308 	movt	r3, #8
   8267e:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   82680:	8828      	ldrh	r0, [r5, #0]
   82682:	f64f 72ff 	movw	r2, #65535	; 0xffff
   82686:	4290      	cmp	r0, r2
   82688:	d02c      	beq.n	826e4 <xTaskCheckForTimeOut+0x94>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   8268a:	f648 3160 	movw	r1, #35680	; 0x8b60
   8268e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82692:	680b      	ldr	r3, [r1, #0]
   82694:	6822      	ldr	r2, [r4, #0]
   82696:	429a      	cmp	r2, r3
   82698:	d008      	beq.n	826ac <xTaskCheckForTimeOut+0x5c>
   8269a:	f648 3164 	movw	r1, #35684	; 0x8b64
   8269e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   826a2:	880b      	ldrh	r3, [r1, #0]
   826a4:	b29a      	uxth	r2, r3
   826a6:	88a1      	ldrh	r1, [r4, #4]
   826a8:	4291      	cmp	r1, r2
   826aa:	d91e      	bls.n	826ea <xTaskCheckForTimeOut+0x9a>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   826ac:	f648 3364 	movw	r3, #35684	; 0x8b64
   826b0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   826b4:	8819      	ldrh	r1, [r3, #0]
   826b6:	88a2      	ldrh	r2, [r4, #4]
   826b8:	1a8b      	subs	r3, r1, r2
   826ba:	b299      	uxth	r1, r3
   826bc:	4288      	cmp	r0, r1
   826be:	d917      	bls.n	826f0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   826c0:	f648 3364 	movw	r3, #35684	; 0x8b64
   826c4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   826c8:	8819      	ldrh	r1, [r3, #0]
   826ca:	b28b      	uxth	r3, r1
   826cc:	1ad2      	subs	r2, r2, r3
   826ce:	1880      	adds	r0, r0, r2
   826d0:	8028      	strh	r0, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   826d2:	4620      	mov	r0, r4
   826d4:	f242 6421 	movw	r4, #9761	; 0x2621
   826d8:	f2c0 0408 	movt	r4, #8
   826dc:	47a0      	blx	r4
			xReturn = pdFALSE;
   826de:	f04f 0400 	mov.w	r4, #0
   826e2:	e007      	b.n	826f4 <xTaskCheckForTimeOut+0xa4>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   826e4:	f04f 0400 	mov.w	r4, #0
   826e8:	e004      	b.n	826f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   826ea:	f04f 0401 	mov.w	r4, #1
   826ee:	e001      	b.n	826f4 <xTaskCheckForTimeOut+0xa4>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   826f0:	f04f 0401 	mov.w	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   826f4:	f241 2171 	movw	r1, #4721	; 0x1271
   826f8:	f2c0 0108 	movt	r1, #8
   826fc:	4788      	blx	r1

	return xReturn;
}
   826fe:	4620      	mov	r0, r4
   82700:	bd38      	pop	{r3, r4, r5, pc}
   82702:	bf00      	nop

00082704 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   82704:	f648 3384 	movw	r3, #35716	; 0x8b84
   82708:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8270c:	f04f 0201 	mov.w	r2, #1
   82710:	601a      	str	r2, [r3, #0]
   82712:	4770      	bx	lr

00082714 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   82714:	f648 3348 	movw	r3, #35656	; 0x8b48
   82718:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8271c:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   8271e:	4770      	bx	lr

00082720 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   82720:	f648 2348 	movw	r3, #35400	; 0x8a48
   82724:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82728:	6818      	ldr	r0, [r3, #0]
   8272a:	b148      	cbz	r0, 82740 <xTaskGetSchedulerState+0x20>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8272c:	f648 3144 	movw	r1, #35652	; 0x8b44
   82730:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82734:	680a      	ldr	r2, [r1, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   82736:	2a00      	cmp	r2, #0
   82738:	bf14      	ite	ne
   8273a:	2002      	movne	r0, #2
   8273c:	2001      	moveq	r0, #1
   8273e:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   82740:	f04f 0000 	mov.w	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   82744:	4770      	bx	lr
   82746:	bf00      	nop

00082748 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   82748:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   8274a:	4604      	mov	r4, r0
   8274c:	2800      	cmp	r0, #0
   8274e:	d04e      	beq.n	827ee <vTaskPriorityInherit+0xa6>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   82750:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   82752:	f648 3248 	movw	r2, #35656	; 0x8b48
   82756:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8275a:	6810      	ldr	r0, [r2, #0]
   8275c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   8275e:	428b      	cmp	r3, r1
   82760:	d245      	bcs.n	827ee <vTaskPriorityInherit+0xa6>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   82762:	f648 3248 	movw	r2, #35656	; 0x8b48
   82766:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8276a:	6810      	ldr	r0, [r2, #0]
   8276c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   8276e:	f1c1 020a 	rsb	r2, r1, #10
   82772:	8322      	strh	r2, [r4, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   82774:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82778:	f648 207c 	movw	r0, #35452	; 0x8a7c
   8277c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82780:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   82784:	6962      	ldr	r2, [r4, #20]
   82786:	428a      	cmp	r2, r1
   82788:	d12a      	bne.n	827e0 <vTaskPriorityInherit+0x98>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   8278a:	f104 0504 	add.w	r5, r4, #4
   8278e:	4628      	mov	r0, r5
   82790:	f241 12a5 	movw	r2, #4517	; 0x11a5
   82794:	f2c0 0208 	movt	r2, #8
   82798:	4790      	blx	r2
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   8279a:	f648 3348 	movw	r3, #35656	; 0x8b48
   8279e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   827a2:	6818      	ldr	r0, [r3, #0]
   827a4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   827a6:	62e1      	str	r1, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   827a8:	f648 2278 	movw	r2, #35448	; 0x8a78
   827ac:	f2c2 0207 	movt	r2, #8199	; 0x2007
   827b0:	6813      	ldr	r3, [r2, #0]
   827b2:	4299      	cmp	r1, r3
   827b4:	d904      	bls.n	827c0 <vTaskPriorityInherit+0x78>
   827b6:	f648 2078 	movw	r0, #35448	; 0x8a78
   827ba:	f2c2 0007 	movt	r0, #8199	; 0x2007
   827be:	6001      	str	r1, [r0, #0]
   827c0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   827c4:	f648 227c 	movw	r2, #35452	; 0x8a7c
   827c8:	4613      	mov	r3, r2
   827ca:	f2c2 0307 	movt	r3, #8199	; 0x2007
   827ce:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   827d2:	4629      	mov	r1, r5
   827d4:	f241 1241 	movw	r2, #4417	; 0x1141
   827d8:	f2c0 0208 	movt	r2, #8
   827dc:	4790      	blx	r2
   827de:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   827e0:	f648 3348 	movw	r3, #35656	; 0x8b48
   827e4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   827e8:	6818      	ldr	r0, [r3, #0]
   827ea:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   827ec:	62e1      	str	r1, [r4, #44]	; 0x2c
   827ee:	bd38      	pop	{r3, r4, r5, pc}

000827f0 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   827f0:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   827f2:	4604      	mov	r4, r0
   827f4:	b350      	cbz	r0, 8284c <vTaskPriorityDisinherit+0x5c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   827f6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   827f8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   827fa:	429a      	cmp	r2, r3
   827fc:	d026      	beq.n	8284c <vTaskPriorityDisinherit+0x5c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   827fe:	f100 0504 	add.w	r5, r0, #4
   82802:	4628      	mov	r0, r5
   82804:	f241 11a5 	movw	r1, #4517	; 0x11a5
   82808:	f2c0 0108 	movt	r1, #8
   8280c:	4788      	blx	r1
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   8280e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   82810:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   82812:	f1c0 020a 	rsb	r2, r0, #10
   82816:	8322      	strh	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   82818:	f648 2378 	movw	r3, #35448	; 0x8a78
   8281c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82820:	6819      	ldr	r1, [r3, #0]
   82822:	4288      	cmp	r0, r1
   82824:	d904      	bls.n	82830 <vTaskPriorityDisinherit+0x40>
   82826:	f648 2278 	movw	r2, #35448	; 0x8a78
   8282a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8282e:	6010      	str	r0, [r2, #0]
   82830:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   82834:	f648 207c 	movw	r0, #35452	; 0x8a7c
   82838:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8283c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   82840:	4629      	mov	r1, r5
   82842:	f241 1241 	movw	r2, #4417	; 0x1141
   82846:	f2c0 0208 	movt	r2, #8
   8284a:	4790      	blx	r2
   8284c:	bd38      	pop	{r3, r4, r5, pc}
   8284e:	bf00      	nop

00082850 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   82850:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   82852:	f241 2349 	movw	r3, #4681	; 0x1249
   82856:	f2c0 0308 	movt	r3, #8
   8285a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   8285c:	f648 30c0 	movw	r0, #35776	; 0x8bc0
   82860:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82864:	6801      	ldr	r1, [r0, #0]
   82866:	bb49      	cbnz	r1, 828bc <prvCheckForValidListAndQueue+0x6c>
		{
			vListInitialise( &xActiveTimerList1 );
   82868:	f648 3594 	movw	r5, #35732	; 0x8b94
   8286c:	f2c2 0507 	movt	r5, #8199	; 0x2007
   82870:	4628      	mov	r0, r5
   82872:	f241 1621 	movw	r6, #4385	; 0x1121
   82876:	f2c0 0608 	movt	r6, #8
   8287a:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   8287c:	f648 34a8 	movw	r4, #35752	; 0x8ba8
   82880:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82884:	4620      	mov	r0, r4
   82886:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   82888:	f648 3290 	movw	r2, #35728	; 0x8b90
   8288c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82890:	6015      	str	r5, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   82892:	f648 33c4 	movw	r3, #35780	; 0x8bc4
   82896:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8289a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   8289c:	f04f 0005 	mov.w	r0, #5
   828a0:	f04f 010c 	mov.w	r1, #12
   828a4:	f04f 0200 	mov.w	r2, #0
   828a8:	f241 63e1 	movw	r3, #5857	; 0x16e1
   828ac:	f2c0 0308 	movt	r3, #8
   828b0:	4798      	blx	r3
   828b2:	f648 31c0 	movw	r1, #35776	; 0x8bc0
   828b6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   828ba:	6008      	str	r0, [r1, #0]
		}
	}
	taskEXIT_CRITICAL();
   828bc:	f241 2071 	movw	r0, #4721	; 0x1271
   828c0:	f2c0 0008 	movt	r0, #8
   828c4:	4780      	blx	r0
   828c6:	bd70      	pop	{r4, r5, r6, pc}

000828c8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   828c8:	b510      	push	{r4, lr}
   828ca:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   828cc:	8081      	strh	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   828ce:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   828d0:	4291      	cmp	r1, r2
   828d2:	d813      	bhi.n	828fc <prvInsertTimerInActiveList+0x34>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   828d4:	1ad0      	subs	r0, r2, r3
   828d6:	8b21      	ldrh	r1, [r4, #24]
   828d8:	b283      	uxth	r3, r0
   828da:	4299      	cmp	r1, r3
   828dc:	d921      	bls.n	82922 <prvInsertTimerInActiveList+0x5a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   828de:	f648 32c4 	movw	r2, #35780	; 0x8bc4
   828e2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   828e6:	6810      	ldr	r0, [r2, #0]
   828e8:	f104 0104 	add.w	r1, r4, #4
   828ec:	f241 1361 	movw	r3, #4449	; 0x1161
   828f0:	f2c0 0308 	movt	r3, #8
   828f4:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   828f6:	f04f 0000 	mov.w	r0, #0
   828fa:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   828fc:	429a      	cmp	r2, r3
   828fe:	d201      	bcs.n	82904 <prvInsertTimerInActiveList+0x3c>
   82900:	4299      	cmp	r1, r3
   82902:	d211      	bcs.n	82928 <prvInsertTimerInActiveList+0x60>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82904:	f648 3390 	movw	r3, #35728	; 0x8b90
   82908:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8290c:	6818      	ldr	r0, [r3, #0]
   8290e:	f104 0104 	add.w	r1, r4, #4
   82912:	f241 1261 	movw	r2, #4449	; 0x1161
   82916:	f2c0 0208 	movt	r2, #8
   8291a:	4790      	blx	r2
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   8291c:	f04f 0000 	mov.w	r0, #0
   82920:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   82922:	f04f 0001 	mov.w	r0, #1
   82926:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   82928:	f04f 0001 	mov.w	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   8292c:	bd10      	pop	{r4, pc}
   8292e:	bf00      	nop

00082930 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   82930:	b510      	push	{r4, lr}
   82932:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   82934:	f642 0351 	movw	r3, #10321	; 0x2851
   82938:	f2c0 0308 	movt	r3, #8
   8293c:	4798      	blx	r3

	if( xTimerQueue != NULL )
   8293e:	f648 30c0 	movw	r0, #35776	; 0x8bc0
   82942:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82946:	6801      	ldr	r1, [r0, #0]
   82948:	b1b9      	cbz	r1, 8297a <xTimerCreateTimerTask+0x4a>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   8294a:	f04f 0209 	mov.w	r2, #9
   8294e:	9200      	str	r2, [sp, #0]
   82950:	f04f 0300 	mov.w	r3, #0
   82954:	9301      	str	r3, [sp, #4]
   82956:	9302      	str	r3, [sp, #8]
   82958:	9303      	str	r3, [sp, #12]
   8295a:	f642 20d9 	movw	r0, #10969	; 0x2ad9
   8295e:	f2c0 0008 	movt	r0, #8
   82962:	f646 31a0 	movw	r1, #27552	; 0x6ba0
   82966:	f2c0 0108 	movt	r1, #8
   8296a:	f44f 7200 	mov.w	r2, #512	; 0x200
   8296e:	f641 4425 	movw	r4, #7205	; 0x1c25
   82972:	f2c0 0408 	movt	r4, #8
   82976:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   82978:	b930      	cbnz	r0, 82988 <xTimerCreateTimerTask+0x58>
   8297a:	f241 2435 	movw	r4, #4661	; 0x1235
   8297e:	f2c0 0408 	movt	r4, #8
   82982:	47a0      	blx	r4
   82984:	bf00      	nop
   82986:	e7fd      	b.n	82984 <xTimerCreateTimerTask+0x54>
	return xReturn;
}
   82988:	b004      	add	sp, #16
   8298a:	bd10      	pop	{r4, pc}

0008298c <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   8298c:	b510      	push	{r4, lr}
   8298e:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   82990:	f648 34c0 	movw	r4, #35776	; 0x8bc0
   82994:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82998:	6824      	ldr	r4, [r4, #0]
   8299a:	b33c      	cbz	r4, 829ec <xTimerGenericCommand+0x60>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   8299c:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   8299e:	f8ad 2008 	strh.w	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   829a2:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   829a4:	b9bb      	cbnz	r3, 829d6 <xTimerGenericCommand+0x4a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   829a6:	f242 7321 	movw	r3, #10017	; 0x2721
   829aa:	f2c0 0308 	movt	r3, #8
   829ae:	4798      	blx	r3
   829b0:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   829b2:	f648 33c0 	movw	r3, #35776	; 0x8bc0
   829b6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   829ba:	6818      	ldr	r0, [r3, #0]
   829bc:	a901      	add	r1, sp, #4
   829be:	bf07      	ittee	eq
   829c0:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
   829c4:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   829c6:	2200      	movne	r2, #0
   829c8:	4613      	movne	r3, r2
   829ca:	f241 744d 	movw	r4, #5965	; 0x174d
   829ce:	f2c0 0408 	movt	r4, #8
   829d2:	47a0      	blx	r4
   829d4:	e00c      	b.n	829f0 <xTimerGenericCommand+0x64>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   829d6:	4620      	mov	r0, r4
   829d8:	a901      	add	r1, sp, #4
   829da:	461a      	mov	r2, r3
   829dc:	f04f 0300 	mov.w	r3, #0
   829e0:	f641 04cd 	movw	r4, #6349	; 0x18cd
   829e4:	f2c0 0408 	movt	r4, #8
   829e8:	47a0      	blx	r4
   829ea:	e001      	b.n	829f0 <xTimerGenericCommand+0x64>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   829ec:	f04f 0000 	mov.w	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   829f0:	b004      	add	sp, #16
   829f2:	bd10      	pop	{r4, pc}

000829f4 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   829f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   829f8:	b085      	sub	sp, #20
   829fa:	4682      	mov	sl, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   829fc:	f641 737d 	movw	r3, #8061	; 0x1f7d
   82a00:	f2c0 0308 	movt	r3, #8
   82a04:	4798      	blx	r3
   82a06:	4681      	mov	r9, r0

	if( xTimeNow < xLastTime )
   82a08:	f648 30bc 	movw	r0, #35772	; 0x8bbc
   82a0c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82a10:	8801      	ldrh	r1, [r0, #0]
   82a12:	4549      	cmp	r1, r9
   82a14:	d951      	bls.n	82aba <prvSampleTimeNow+0xc6>
   82a16:	e02d      	b.n	82a74 <prvSampleTimeNow+0x80>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   82a18:	68dc      	ldr	r4, [r3, #12]
   82a1a:	8826      	ldrh	r6, [r4, #0]
   82a1c:	b2b6      	uxth	r6, r6

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   82a1e:	68dd      	ldr	r5, [r3, #12]
   82a20:	68ec      	ldr	r4, [r5, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82a22:	f104 0504 	add.w	r5, r4, #4
   82a26:	4628      	mov	r0, r5
   82a28:	47c0      	blx	r8

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82a2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   82a2c:	4620      	mov	r0, r4
   82a2e:	4788      	blx	r1

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82a30:	69e0      	ldr	r0, [r4, #28]
   82a32:	2801      	cmp	r0, #1
   82a34:	d12d      	bne.n	82a92 <prvSampleTimeNow+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   82a36:	8b23      	ldrh	r3, [r4, #24]
   82a38:	18f2      	adds	r2, r6, r3
   82a3a:	b291      	uxth	r1, r2
			if( xReloadTime > xNextExpireTime )
   82a3c:	42b1      	cmp	r1, r6
   82a3e:	d909      	bls.n	82a54 <prvSampleTimeNow+0x60>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   82a40:	80a1      	strh	r1, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   82a42:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82a44:	6838      	ldr	r0, [r7, #0]
   82a46:	4629      	mov	r1, r5
   82a48:	f241 1361 	movw	r3, #4449	; 0x1161
   82a4c:	f2c0 0308 	movt	r3, #8
   82a50:	4798      	blx	r3
   82a52:	e01e      	b.n	82a92 <prvSampleTimeNow+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82a54:	f8cd b000 	str.w	fp, [sp]
   82a58:	4620      	mov	r0, r4
   82a5a:	4659      	mov	r1, fp
   82a5c:	4632      	mov	r2, r6
   82a5e:	465b      	mov	r3, fp
   82a60:	9c03      	ldr	r4, [sp, #12]
   82a62:	47a0      	blx	r4
				configASSERT( xResult );
   82a64:	b9a8      	cbnz	r0, 82a92 <prvSampleTimeNow+0x9e>
   82a66:	f241 2735 	movw	r7, #4661	; 0x1235
   82a6a:	f2c0 0708 	movt	r7, #8
   82a6e:	47b8      	blx	r7
   82a70:	bf00      	nop
   82a72:	e7fd      	b.n	82a70 <prvSampleTimeNow+0x7c>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82a74:	f648 3790 	movw	r7, #35728	; 0x8b90
   82a78:	f2c2 0707 	movt	r7, #8199	; 0x2007
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82a7c:	f241 18a5 	movw	r8, #4517	; 0x11a5
   82a80:	f2c0 0808 	movt	r8, #8
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82a84:	f04f 0b00 	mov.w	fp, #0
   82a88:	f642 138d 	movw	r3, #10637	; 0x298d
   82a8c:	f2c0 0308 	movt	r3, #8
   82a90:	9303      	str	r3, [sp, #12]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82a92:	683b      	ldr	r3, [r7, #0]
   82a94:	6818      	ldr	r0, [r3, #0]
   82a96:	2800      	cmp	r0, #0
   82a98:	d1be      	bne.n	82a18 <prvSampleTimeNow+0x24>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   82a9a:	f648 32c4 	movw	r2, #35780	; 0x8bc4
   82a9e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82aa2:	6811      	ldr	r1, [r2, #0]
   82aa4:	f648 3090 	movw	r0, #35728	; 0x8b90
   82aa8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82aac:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   82aae:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   82ab0:	f04f 0301 	mov.w	r3, #1
   82ab4:	f8ca 3000 	str.w	r3, [sl]
   82ab8:	e003      	b.n	82ac2 <prvSampleTimeNow+0xce>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   82aba:	f04f 0200 	mov.w	r2, #0
   82abe:	f8ca 2000 	str.w	r2, [sl]
	}

	xLastTime = xTimeNow;
   82ac2:	f648 32bc 	movw	r2, #35772	; 0x8bbc
   82ac6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82aca:	f8a2 9000 	strh.w	r9, [r2]

	return xTimeNow;
}
   82ace:	4648      	mov	r0, r9
   82ad0:	b005      	add	sp, #20
   82ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ad6:	bf00      	nop

00082ad8 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   82ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82adc:	b089      	sub	sp, #36	; 0x24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   82ade:	f648 3b90 	movw	fp, #35728	; 0x8b90
   82ae2:	f2c2 0b07 	movt	fp, #8199	; 0x2007
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82ae6:	f641 7369 	movw	r3, #8041	; 0x1f69
   82aea:	f2c0 0308 	movt	r3, #8
   82aee:	9303      	str	r3, [sp, #12]
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82af0:	f642 1af5 	movw	sl, #10741	; 0x29f5
   82af4:	f2c0 0a08 	movt	sl, #8
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   82af8:	f8db 0000 	ldr.w	r0, [fp]
   82afc:	6802      	ldr	r2, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
   82afe:	2a00      	cmp	r2, #0
   82b00:	f000 80cd 	beq.w	82c9e <prvTimerTask+0x1c6>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   82b04:	68c7      	ldr	r7, [r0, #12]
   82b06:	883b      	ldrh	r3, [r7, #0]
   82b08:	b29d      	uxth	r5, r3
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82b0a:	9803      	ldr	r0, [sp, #12]
   82b0c:	4780      	blx	r0
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82b0e:	a804      	add	r0, sp, #16
   82b10:	47d0      	blx	sl
   82b12:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   82b14:	9a04      	ldr	r2, [sp, #16]
   82b16:	2a00      	cmp	r2, #0
   82b18:	d152      	bne.n	82bc0 <prvTimerTask+0xe8>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   82b1a:	4285      	cmp	r5, r0
   82b1c:	d838      	bhi.n	82b90 <prvTimerTask+0xb8>
			{
				xTaskResumeAll();
   82b1e:	f242 1041 	movw	r0, #8513	; 0x2141
   82b22:	f2c0 0008 	movt	r0, #8
   82b26:	4780      	blx	r0
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   82b28:	f8db 2000 	ldr.w	r2, [fp]
   82b2c:	68d1      	ldr	r1, [r2, #12]
   82b2e:	68cc      	ldr	r4, [r1, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   82b30:	f104 0004 	add.w	r0, r4, #4
   82b34:	f241 17a5 	movw	r7, #4517	; 0x11a5
   82b38:	f2c0 0708 	movt	r7, #8
   82b3c:	47b8      	blx	r7
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82b3e:	69e3      	ldr	r3, [r4, #28]
   82b40:	2b01      	cmp	r3, #1
   82b42:	d11f      	bne.n	82b84 <prvTimerTask+0xac>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   82b44:	8b20      	ldrh	r0, [r4, #24]
   82b46:	182a      	adds	r2, r5, r0
   82b48:	4620      	mov	r0, r4
   82b4a:	b291      	uxth	r1, r2
   82b4c:	4632      	mov	r2, r6
   82b4e:	462b      	mov	r3, r5
   82b50:	f642 06c9 	movw	r6, #10441	; 0x28c9
   82b54:	f2c0 0608 	movt	r6, #8
   82b58:	47b0      	blx	r6
   82b5a:	2801      	cmp	r0, #1
   82b5c:	d112      	bne.n	82b84 <prvTimerTask+0xac>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82b5e:	f04f 0300 	mov.w	r3, #0
   82b62:	9300      	str	r3, [sp, #0]
   82b64:	4620      	mov	r0, r4
   82b66:	4619      	mov	r1, r3
   82b68:	462a      	mov	r2, r5
   82b6a:	f642 158d 	movw	r5, #10637	; 0x298d
   82b6e:	f2c0 0508 	movt	r5, #8
   82b72:	47a8      	blx	r5
			configASSERT( xResult );
   82b74:	b930      	cbnz	r0, 82b84 <prvTimerTask+0xac>
   82b76:	f241 2735 	movw	r7, #4661	; 0x1235
   82b7a:	f2c0 0708 	movt	r7, #8
   82b7e:	47b8      	blx	r7
   82b80:	bf00      	nop
   82b82:	e7fd      	b.n	82b80 <prvTimerTask+0xa8>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82b84:	6a61      	ldr	r1, [r4, #36]	; 0x24
   82b86:	4620      	mov	r0, r4
   82b88:	4788      	blx	r1
   82b8a:	e01e      	b.n	82bca <prvTimerTask+0xf2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   82b8c:	f04f 0500 	mov.w	r5, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   82b90:	1bae      	subs	r6, r5, r6
   82b92:	f648 34c0 	movw	r4, #35776	; 0x8bc0
   82b96:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82b9a:	6820      	ldr	r0, [r4, #0]
   82b9c:	b2b1      	uxth	r1, r6
   82b9e:	f641 354d 	movw	r5, #6989	; 0x1b4d
   82ba2:	f2c0 0508 	movt	r5, #8
   82ba6:	47a8      	blx	r5

				if( xTaskResumeAll() == pdFALSE )
   82ba8:	f242 1741 	movw	r7, #8513	; 0x2141
   82bac:	f2c0 0708 	movt	r7, #8
   82bb0:	47b8      	blx	r7
   82bb2:	b950      	cbnz	r0, 82bca <prvTimerTask+0xf2>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   82bb4:	f241 2325 	movw	r3, #4645	; 0x1225
   82bb8:	f2c0 0308 	movt	r3, #8
   82bbc:	4798      	blx	r3
   82bbe:	e004      	b.n	82bca <prvTimerTask+0xf2>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   82bc0:	f242 1141 	movw	r1, #8513	; 0x2141
   82bc4:	f2c0 0108 	movt	r1, #8
   82bc8:	4788      	blx	r1
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82bca:	a804      	add	r0, sp, #16
   82bcc:	47d0      	blx	sl
   82bce:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   82bd0:	f648 36c0 	movw	r6, #35776	; 0x8bc0
   82bd4:	f2c2 0607 	movt	r6, #8199	; 0x2007
   82bd8:	f641 157d 	movw	r5, #6525	; 0x197d
   82bdc:	f2c0 0508 	movt	r5, #8
		if( pxTimer != NULL )
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   82be0:	f241 18a5 	movw	r8, #4517	; 0x11a5
   82be4:	f2c0 0808 	movt	r8, #8
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82be8:	f642 09c9 	movw	r9, #10441	; 0x28c9
   82bec:	f2c0 0908 	movt	r9, #8
   82bf0:	e04c      	b.n	82c8c <prvTimerTask+0x1b4>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   82bf2:	9c07      	ldr	r4, [sp, #28]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   82bf4:	b124      	cbz	r4, 82c00 <prvTimerTask+0x128>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   82bf6:	6963      	ldr	r3, [r4, #20]
   82bf8:	b113      	cbz	r3, 82c00 <prvTimerTask+0x128>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   82bfa:	f104 0004 	add.w	r0, r4, #4
   82bfe:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   82c00:	9805      	ldr	r0, [sp, #20]
   82c02:	2802      	cmp	r0, #2
   82c04:	d02a      	beq.n	82c5c <prvTimerTask+0x184>
   82c06:	2803      	cmp	r0, #3
   82c08:	d03a      	beq.n	82c80 <prvTimerTask+0x1a8>
   82c0a:	2800      	cmp	r0, #0
   82c0c:	d13e      	bne.n	82c8c <prvTimerTask+0x1b4>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   82c0e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   82c12:	8b22      	ldrh	r2, [r4, #24]
   82c14:	1899      	adds	r1, r3, r2
   82c16:	4620      	mov	r0, r4
   82c18:	b289      	uxth	r1, r1
   82c1a:	463a      	mov	r2, r7
   82c1c:	47c8      	blx	r9
   82c1e:	2801      	cmp	r0, #1
   82c20:	d134      	bne.n	82c8c <prvTimerTask+0x1b4>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82c24:	4620      	mov	r0, r4
   82c26:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82c28:	69e0      	ldr	r0, [r4, #28]
   82c2a:	2801      	cmp	r0, #1
   82c2c:	d12e      	bne.n	82c8c <prvTimerTask+0x1b4>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   82c2e:	8b22      	ldrh	r2, [r4, #24]
   82c30:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   82c34:	1852      	adds	r2, r2, r1
   82c36:	f04f 0300 	mov.w	r3, #0
   82c3a:	9300      	str	r3, [sp, #0]
   82c3c:	4620      	mov	r0, r4
   82c3e:	4619      	mov	r1, r3
   82c40:	b292      	uxth	r2, r2
   82c42:	f642 148d 	movw	r4, #10637	; 0x298d
   82c46:	f2c0 0408 	movt	r4, #8
   82c4a:	47a0      	blx	r4
						configASSERT( xResult );
   82c4c:	b9f0      	cbnz	r0, 82c8c <prvTimerTask+0x1b4>
   82c4e:	f241 2535 	movw	r5, #4661	; 0x1235
   82c52:	f2c0 0508 	movt	r5, #8
   82c56:	47a8      	blx	r5
   82c58:	bf00      	nop
   82c5a:	e7fd      	b.n	82c58 <prvTimerTask+0x180>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   82c5c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   82c60:	8320      	strh	r0, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   82c62:	b930      	cbnz	r0, 82c72 <prvTimerTask+0x19a>
   82c64:	f241 2635 	movw	r6, #4661	; 0x1235
   82c68:	f2c0 0608 	movt	r6, #8
   82c6c:	47b0      	blx	r6
   82c6e:	bf00      	nop
   82c70:	e7fd      	b.n	82c6e <prvTimerTask+0x196>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82c72:	1839      	adds	r1, r7, r0
   82c74:	4620      	mov	r0, r4
   82c76:	b289      	uxth	r1, r1
   82c78:	463a      	mov	r2, r7
   82c7a:	463b      	mov	r3, r7
   82c7c:	47c8      	blx	r9
   82c7e:	e005      	b.n	82c8c <prvTimerTask+0x1b4>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   82c80:	4620      	mov	r0, r4
   82c82:	f241 43c1 	movw	r3, #5313	; 0x14c1
   82c86:	f2c0 0308 	movt	r3, #8
   82c8a:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   82c8c:	6830      	ldr	r0, [r6, #0]
   82c8e:	a905      	add	r1, sp, #20
   82c90:	f04f 0200 	mov.w	r2, #0
   82c94:	4613      	mov	r3, r2
   82c96:	47a8      	blx	r5
   82c98:	2800      	cmp	r0, #0
   82c9a:	d1aa      	bne.n	82bf2 <prvTimerTask+0x11a>
   82c9c:	e72c      	b.n	82af8 <prvTimerTask+0x20>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82c9e:	9903      	ldr	r1, [sp, #12]
   82ca0:	4788      	blx	r1
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82ca2:	a804      	add	r0, sp, #16
   82ca4:	47d0      	blx	sl
   82ca6:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   82ca8:	9c04      	ldr	r4, [sp, #16]
   82caa:	2c00      	cmp	r4, #0
   82cac:	f43f af6e 	beq.w	82b8c <prvTimerTask+0xb4>
   82cb0:	e786      	b.n	82bc0 <prvTimerTask+0xe8>
   82cb2:	bf00      	nop

00082cb4 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   82cb4:	b4f0      	push	{r4, r5, r6, r7}
   82cb6:	b08c      	sub	sp, #48	; 0x30
   82cb8:	4606      	mov	r6, r0
   82cba:	460f      	mov	r7, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   82cbc:	ac01      	add	r4, sp, #4
   82cbe:	f646 35a8 	movw	r5, #27560	; 0x6ba8
   82cc2:	f2c0 0508 	movt	r5, #8
   82cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82cca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82ccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82cce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   82cd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   82cd6:	9b01      	ldr	r3, [sp, #4]
   82cd8:	fbb7 f0f3 	udiv	r0, r7, r3
   82cdc:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   82ce0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   82ce4:	d952      	bls.n	82d8c <pwm_clocks_generate+0xd8>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   82ce6:	9902      	ldr	r1, [sp, #8]
   82ce8:	fbb7 f2f1 	udiv	r2, r7, r1
   82cec:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   82cf0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   82cf4:	d94d      	bls.n	82d92 <pwm_clocks_generate+0xde>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   82cf6:	9b03      	ldr	r3, [sp, #12]
   82cf8:	fbb7 f0f3 	udiv	r0, r7, r3
   82cfc:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   82d00:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   82d04:	d948      	bls.n	82d98 <pwm_clocks_generate+0xe4>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   82d06:	9904      	ldr	r1, [sp, #16]
   82d08:	fbb7 f2f1 	udiv	r2, r7, r1
   82d0c:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   82d10:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   82d14:	d943      	bls.n	82d9e <pwm_clocks_generate+0xea>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   82d16:	9b05      	ldr	r3, [sp, #20]
   82d18:	fbb7 f0f3 	udiv	r0, r7, r3
   82d1c:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   82d20:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   82d24:	d93e      	bls.n	82da4 <pwm_clocks_generate+0xf0>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   82d26:	9906      	ldr	r1, [sp, #24]
   82d28:	fbb7 f2f1 	udiv	r2, r7, r1
   82d2c:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   82d30:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   82d34:	d939      	bls.n	82daa <pwm_clocks_generate+0xf6>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   82d36:	9b07      	ldr	r3, [sp, #28]
   82d38:	fbb7 f0f3 	udiv	r0, r7, r3
   82d3c:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   82d40:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   82d44:	d934      	bls.n	82db0 <pwm_clocks_generate+0xfc>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   82d46:	9908      	ldr	r1, [sp, #32]
   82d48:	fbb7 f2f1 	udiv	r2, r7, r1
   82d4c:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   82d50:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   82d54:	d92f      	bls.n	82db6 <pwm_clocks_generate+0x102>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   82d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82d58:	fbb7 f0f3 	udiv	r0, r7, r3
   82d5c:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   82d60:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   82d64:	d92a      	bls.n	82dbc <pwm_clocks_generate+0x108>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   82d66:	990a      	ldr	r1, [sp, #40]	; 0x28
   82d68:	fbb7 f2f1 	udiv	r2, r7, r1
   82d6c:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   82d70:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   82d74:	d925      	bls.n	82dc2 <pwm_clocks_generate+0x10e>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   82d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   82d78:	fbb7 f0f3 	udiv	r0, r7, r3
   82d7c:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   82d80:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   82d84:	d920      	bls.n	82dc8 <pwm_clocks_generate+0x114>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   82d86:	f64f 70ff 	movw	r0, #65535	; 0xffff
   82d8a:	e021      	b.n	82dd0 <pwm_clocks_generate+0x11c>
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   82d8c:	f04f 0200 	mov.w	r2, #0
   82d90:	e01c      	b.n	82dcc <pwm_clocks_generate+0x118>
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
			break;
		}
		ul_pre++;
   82d92:	f04f 0201 	mov.w	r2, #1
   82d96:	e019      	b.n	82dcc <pwm_clocks_generate+0x118>
   82d98:	f04f 0202 	mov.w	r2, #2
   82d9c:	e016      	b.n	82dcc <pwm_clocks_generate+0x118>
   82d9e:	f04f 0203 	mov.w	r2, #3
   82da2:	e013      	b.n	82dcc <pwm_clocks_generate+0x118>
   82da4:	f04f 0204 	mov.w	r2, #4
   82da8:	e010      	b.n	82dcc <pwm_clocks_generate+0x118>
   82daa:	f04f 0205 	mov.w	r2, #5
   82dae:	e00d      	b.n	82dcc <pwm_clocks_generate+0x118>
   82db0:	f04f 0206 	mov.w	r2, #6
   82db4:	e00a      	b.n	82dcc <pwm_clocks_generate+0x118>
   82db6:	f04f 0207 	mov.w	r2, #7
   82dba:	e007      	b.n	82dcc <pwm_clocks_generate+0x118>
   82dbc:	f04f 0208 	mov.w	r2, #8
   82dc0:	e004      	b.n	82dcc <pwm_clocks_generate+0x118>
   82dc2:	f04f 0209 	mov.w	r2, #9
   82dc6:	e001      	b.n	82dcc <pwm_clocks_generate+0x118>
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   82dc8:	f04f 020a 	mov.w	r2, #10
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
   82dcc:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
	}
}
   82dd0:	b00c      	add	sp, #48	; 0x30
   82dd2:	bcf0      	pop	{r4, r5, r6, r7}
   82dd4:	4770      	bx	lr
   82dd6:	bf00      	nop

00082dd8 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   82dd8:	b570      	push	{r4, r5, r6, lr}
   82dda:	4606      	mov	r6, r0
   82ddc:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   82dde:	6808      	ldr	r0, [r1, #0]
   82de0:	b158      	cbz	r0, 82dfa <pwm_init+0x22>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   82de2:	6889      	ldr	r1, [r1, #8]
   82de4:	f642 43b5 	movw	r3, #11445	; 0x2cb5
   82de8:	f2c0 0308 	movt	r3, #8
   82dec:	4798      	blx	r3
		if (result == PWM_INVALID_ARGUMENT) {
   82dee:	f64f 71ff 	movw	r1, #65535	; 0xffff
   82df2:	4288      	cmp	r0, r1
   82df4:	d014      	beq.n	82e20 <pwm_init+0x48>
			return result;
		}

		clock = result;
   82df6:	4605      	mov	r5, r0
   82df8:	e001      	b.n	82dfe <pwm_init+0x26>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   82dfa:	f04f 0500 	mov.w	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   82dfe:	6860      	ldr	r0, [r4, #4]
   82e00:	b158      	cbz	r0, 82e1a <pwm_init+0x42>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   82e02:	68a1      	ldr	r1, [r4, #8]
   82e04:	f642 42b5 	movw	r2, #11445	; 0x2cb5
   82e08:	f2c0 0208 	movt	r2, #8
   82e0c:	4790      	blx	r2

		if (result == PWM_INVALID_ARGUMENT) {
   82e0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   82e12:	4298      	cmp	r0, r3
   82e14:	d004      	beq.n	82e20 <pwm_init+0x48>
			return result;
		}

		clock |= (result << 16);
   82e16:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   82e1a:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   82e1c:	f04f 0000 	mov.w	r0, #0
}
   82e20:	bd70      	pop	{r4, r5, r6, pc}
   82e22:	bf00      	nop

00082e24 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   82e24:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   82e26:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   82e28:	8a8d      	ldrh	r5, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   82e2a:	684a      	ldr	r2, [r1, #4]
   82e2c:	f002 040f 	and.w	r4, r2, #15
   82e30:	4325      	orrs	r5, r4
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   82e32:	890e      	ldrh	r6, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   82e34:	4335      	orrs	r5, r6
   82e36:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   82e38:	ea45 2542 	orr.w	r5, r5, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   82e3c:	7d8c      	ldrb	r4, [r1, #22]
   82e3e:	ea45 4604 	orr.w	r6, r5, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   82e42:	7dca      	ldrb	r2, [r1, #23]
   82e44:	ea46 4542 	orr.w	r5, r6, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   82e48:	7e0c      	ldrb	r4, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   82e4a:	ea45 4684 	orr.w	r6, r5, r4, lsl #18
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   82e4e:	f103 0210 	add.w	r2, r3, #16
   82e52:	ea4f 1542 	mov.w	r5, r2, lsl #5
   82e56:	1944      	adds	r4, r0, r5
   82e58:	5146      	str	r6, [r0, r5]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   82e5a:	68ce      	ldr	r6, [r1, #12]
   82e5c:	6066      	str	r6, [r4, #4]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   82e5e:	690a      	ldr	r2, [r1, #16]
   82e60:	eb00 1543 	add.w	r5, r0, r3, lsl #5
   82e64:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   82e68:	7d8c      	ldrb	r4, [r1, #22]
   82e6a:	b13c      	cbz	r4, 82e7c <pwm_channel_init+0x58>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   82e6c:	8b8e      	ldrh	r6, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   82e6e:	8b4a      	ldrh	r2, [r1, #26]
   82e70:	ea42 4506 	orr.w	r5, r2, r6, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   82e74:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   82e78:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   82e7c:	6c85      	ldr	r5, [r0, #72]	; 0x48
   82e7e:	f04f 1601 	mov.w	r6, #65537	; 0x10001
   82e82:	fa06 f603 	lsl.w	r6, r6, r3
   82e86:	ea6f 0206 	mvn.w	r2, r6
   82e8a:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   82e8c:	7fce      	ldrb	r6, [r1, #31]
   82e8e:	fa06 f603 	lsl.w	r6, r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   82e92:	7f8c      	ldrb	r4, [r1, #30]
   82e94:	fa04 f403 	lsl.w	r4, r4, r3
   82e98:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   82e9c:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   82e9e:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   82ea0:	6c45      	ldr	r5, [r0, #68]	; 0x44
   82ea2:	402a      	ands	r2, r5
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   82ea4:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   82ea8:	fa05 f503 	lsl.w	r5, r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   82eac:	f891 4020 	ldrb.w	r4, [r1, #32]
   82eb0:	fa04 f403 	lsl.w	r4, r4, r3
   82eb4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   82eb8:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   82eba:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   82ebc:	f04f 0201 	mov.w	r2, #1
   82ec0:	fa02 f203 	lsl.w	r2, r2, r3
	if (p_channel->b_sync_ch) {
   82ec4:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   82ec8:	b11c      	cbz	r4, 82ed2 <pwm_channel_init+0xae>
		p_pwm->PWM_SCM |= channel;
   82eca:	6a04      	ldr	r4, [r0, #32]
   82ecc:	4314      	orrs	r4, r2
   82ece:	6204      	str	r4, [r0, #32]
   82ed0:	e003      	b.n	82eda <pwm_channel_init+0xb6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   82ed2:	6a04      	ldr	r4, [r0, #32]
   82ed4:	ea24 0402 	bic.w	r4, r4, r2
   82ed8:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   82eda:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   82ede:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   82ee0:	6e84      	ldr	r4, [r0, #104]	; 0x68
   82ee2:	bf0c      	ite	eq
   82ee4:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   82ee6:	4394      	bicne	r4, r2
   82ee8:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   82eea:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   82eee:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   82ef0:	6e84      	ldr	r4, [r0, #104]	; 0x68
   82ef2:	bf0c      	ite	eq
   82ef4:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   82ef8:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   82efc:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   82efe:	2b03      	cmp	r3, #3
   82f00:	d80f      	bhi.n	82f22 <pwm_channel_init+0xfe>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   82f02:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   82f04:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   82f08:	f04f 02ff 	mov.w	r2, #255	; 0xff
   82f0c:	fa02 f203 	lsl.w	r2, r2, r3
   82f10:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   82f14:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   82f18:	fa01 f303 	lsl.w	r3, r1, r3
   82f1c:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE1 = fault_enable_reg;
   82f1e:	66c2      	str	r2, [r0, #108]	; 0x6c
   82f20:	e010      	b.n	82f44 <pwm_channel_init+0x120>
	} else {
		ch_num -= 4;
   82f22:	f1a3 0304 	sub.w	r3, r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   82f26:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   82f28:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   82f2c:	f04f 02ff 	mov.w	r2, #255	; 0xff
   82f30:	fa02 f203 	lsl.w	r2, r2, r3
   82f34:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   82f38:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   82f3c:	fa01 f303 	lsl.w	r3, r1, r3
   82f40:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE2 = fault_enable_reg;
   82f42:	6702      	str	r2, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   82f44:	f04f 0000 	mov.w	r0, #0
   82f48:	bc70      	pop	{r4, r5, r6}
   82f4a:	4770      	bx	lr

00082f4c <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   82f4c:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   82f4e:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   82f50:	690b      	ldr	r3, [r1, #16]
   82f52:	4293      	cmp	r3, r2
   82f54:	d307      	bcc.n	82f66 <pwm_channel_update_duty+0x1a>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   82f56:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   82f58:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   82f5c:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   82f60:	f04f 0000 	mov.w	r0, #0
   82f64:	e001      	b.n	82f6a <pwm_channel_update_duty+0x1e>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   82f66:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   82f6a:	bc10      	pop	{r4}
   82f6c:	4770      	bx	lr
   82f6e:	bf00      	nop

00082f70 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   82f70:	f04f 0301 	mov.w	r3, #1
   82f74:	fa03 f101 	lsl.w	r1, r3, r1
   82f78:	6041      	str	r1, [r0, #4]
   82f7a:	4770      	bx	lr

00082f7c <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   82f7c:	f04f 0301 	mov.w	r3, #1
   82f80:	fa03 f101 	lsl.w	r1, r3, r1
   82f84:	6081      	str	r1, [r0, #8]
   82f86:	4770      	bx	lr

00082f88 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82f88:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82f8a:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   82f8e:	f2c0 5001 	movt	r0, #1281	; 0x501
   82f92:	f643 13ed 	movw	r3, #14829	; 0x39ed
   82f96:	f2c0 0308 	movt	r3, #8
   82f9a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82f9c:	f04f 0000 	mov.w	r0, #0
   82fa0:	f04f 013e 	mov.w	r1, #62	; 0x3e
   82fa4:	f243 52c5 	movw	r2, #13765	; 0x35c5
   82fa8:	f2c0 0208 	movt	r2, #8
   82fac:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82fae:	f243 6435 	movw	r4, #13877	; 0x3635
   82fb2:	f2c0 0408 	movt	r4, #8
   82fb6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   82fb8:	2800      	cmp	r0, #0
   82fba:	d0fc      	beq.n	82fb6 <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   82fbc:	f243 6045 	movw	r0, #13893	; 0x3645
   82fc0:	f2c0 0008 	movt	r0, #8
   82fc4:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82fc6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   82fca:	f2c4 010e 	movt	r1, #16398	; 0x400e
   82fce:	f643 7301 	movw	r3, #16129	; 0x3f01
   82fd2:	f2c2 030d 	movt	r3, #8205	; 0x200d
   82fd6:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   82fd8:	f243 6455 	movw	r4, #13909	; 0x3655
   82fdc:	f2c0 0408 	movt	r4, #8
   82fe0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82fe2:	2800      	cmp	r0, #0
   82fe4:	d0fc      	beq.n	82fe0 <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82fe6:	f04f 0010 	mov.w	r0, #16
   82fea:	f243 5225 	movw	r2, #13605	; 0x3525
   82fee:	f2c0 0208 	movt	r2, #8
   82ff2:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82ff4:	f643 0025 	movw	r0, #14373	; 0x3825
   82ff8:	f2c0 0008 	movt	r0, #8
   82ffc:	4780      	blx	r0

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82ffe:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   83002:	f2c0 5001 	movt	r0, #1281	; 0x501
   83006:	f643 11ed 	movw	r1, #14829	; 0x39ed
   8300a:	f2c0 0108 	movt	r1, #8
   8300e:	4788      	blx	r1
   83010:	bd10      	pop	{r4, pc}
   83012:	bf00      	nop

00083014 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   83014:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   83016:	f641 2350 	movw	r3, #6736	; 0x1a50
   8301a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8301e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83022:	605a      	str	r2, [r3, #4]
   83024:	f04f 000b 	mov.w	r0, #11
   83028:	f243 6465 	movw	r4, #13925	; 0x3665
   8302c:	f2c0 0408 	movt	r4, #8
   83030:	47a0      	blx	r4
   83032:	f04f 000c 	mov.w	r0, #12
   83036:	47a0      	blx	r4
   83038:	f04f 000d 	mov.w	r0, #13
   8303c:	47a0      	blx	r4
   8303e:	f04f 000e 	mov.w	r0, #14
   83042:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   83044:	f04f 003b 	mov.w	r0, #59	; 0x3b
   83048:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8304c:	f243 2479 	movw	r4, #12921	; 0x3279
   83050:	f2c0 0408 	movt	r4, #8
   83054:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   83056:	f04f 0055 	mov.w	r0, #85	; 0x55
   8305a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8305e:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   83060:	f04f 0056 	mov.w	r0, #86	; 0x56
   83064:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83068:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8306a:	f04f 0068 	mov.w	r0, #104	; 0x68
   8306e:	f04f 0179 	mov.w	r1, #121	; 0x79
   83072:	f6c2 0100 	movt	r1, #10240	; 0x2800
   83076:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   83078:	f04f 005c 	mov.w	r0, #92	; 0x5c
   8307c:	f04f 0101 	mov.w	r1, #1
   83080:	f6c2 0100 	movt	r1, #10240	; 0x2800
   83084:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   83086:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   8308a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8308e:	f44f 7140 	mov.w	r1, #768	; 0x300
   83092:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   83096:	f243 139d 	movw	r3, #12701	; 0x319d
   8309a:	f2c0 0308 	movt	r3, #8
   8309e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   830a0:	f04f 002b 	mov.w	r0, #43	; 0x2b
   830a4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   830a8:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   830aa:	f04f 002a 	mov.w	r0, #42	; 0x2a
   830ae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   830b2:	47a0      	blx	r4
   830b4:	bd10      	pop	{r4, pc}
   830b6:	bf00      	nop

000830b8 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   830b8:	b10a      	cbz	r2, 830be <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   830ba:	6641      	str	r1, [r0, #100]	; 0x64
   830bc:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   830be:	6601      	str	r1, [r0, #96]	; 0x60
   830c0:	4770      	bx	lr
   830c2:	bf00      	nop

000830c4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   830c4:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   830c6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   830ca:	d016      	beq.n	830fa <pio_set_peripheral+0x36>
   830cc:	d804      	bhi.n	830d8 <pio_set_peripheral+0x14>
   830ce:	b1c9      	cbz	r1, 83104 <pio_set_peripheral+0x40>
   830d0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   830d4:	d115      	bne.n	83102 <pio_set_peripheral+0x3e>
   830d6:	e009      	b.n	830ec <pio_set_peripheral+0x28>
   830d8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   830dc:	d012      	beq.n	83104 <pio_set_peripheral+0x40>
   830de:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   830e2:	d00f      	beq.n	83104 <pio_set_peripheral+0x40>
   830e4:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   830e8:	d10b      	bne.n	83102 <pio_set_peripheral+0x3e>
   830ea:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   830ec:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   830ee:	6f01      	ldr	r1, [r0, #112]	; 0x70
   830f0:	400b      	ands	r3, r1
   830f2:	ea23 0302 	bic.w	r3, r3, r2
   830f6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   830f8:	e003      	b.n	83102 <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   830fa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   830fc:	ea42 0103 	orr.w	r1, r2, r3
   83100:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   83102:	6042      	str	r2, [r0, #4]
   83104:	4770      	bx	lr
   83106:	bf00      	nop

00083108 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   83108:	6441      	str	r1, [r0, #68]	; 0x44
   8310a:	4770      	bx	lr

0008310c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8310c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8310e:	4604      	mov	r4, r0
   83110:	460d      	mov	r5, r1
   83112:	4616      	mov	r6, r2
   83114:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   83116:	f243 1309 	movw	r3, #12553	; 0x3109
   8311a:	f2c0 0308 	movt	r3, #8
   8311e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   83120:	4620      	mov	r0, r4
   83122:	4629      	mov	r1, r5
   83124:	9a06      	ldr	r2, [sp, #24]
   83126:	f243 03b9 	movw	r3, #12473	; 0x30b9
   8312a:	f2c0 0308 	movt	r3, #8
   8312e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   83130:	b10f      	cbz	r7, 83136 <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   83132:	6525      	str	r5, [r4, #80]	; 0x50
   83134:	e000      	b.n	83138 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   83136:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   83138:	b10e      	cbz	r6, 8313e <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   8313a:	6325      	str	r5, [r4, #48]	; 0x30
   8313c:	e000      	b.n	83140 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8313e:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   83140:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   83142:	6025      	str	r5, [r4, #0]
   83144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83146:	bf00      	nop

00083148 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   83148:	b570      	push	{r4, r5, r6, lr}
   8314a:	4604      	mov	r4, r0
   8314c:	460d      	mov	r5, r1
   8314e:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   83150:	f243 1309 	movw	r3, #12553	; 0x3109
   83154:	f2c0 0308 	movt	r3, #8
   83158:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   8315a:	4620      	mov	r0, r4
   8315c:	4629      	mov	r1, r5
   8315e:	f006 0201 	and.w	r2, r6, #1
   83162:	f243 03b9 	movw	r3, #12473	; 0x30b9
   83166:	f2c0 0308 	movt	r3, #8
   8316a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8316c:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   83170:	bf14      	ite	ne
   83172:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   83174:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   83176:	f016 0f02 	tst.w	r6, #2
   8317a:	d002      	beq.n	83182 <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   8317c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   83180:	e004      	b.n	8318c <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   83182:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_DIFSR = ul_mask;
   83186:	bf18      	it	ne
   83188:	f8c4 5084 	strne.w	r5, [r4, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8318c:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   8318e:	6025      	str	r5, [r4, #0]
   83190:	bd70      	pop	{r4, r5, r6, pc}
   83192:	bf00      	nop

00083194 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   83194:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   83196:	4770      	bx	lr

00083198 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   83198:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8319a:	4770      	bx	lr

0008319c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   8319c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8319e:	b083      	sub	sp, #12
   831a0:	4607      	mov	r7, r0
   831a2:	460e      	mov	r6, r1
   831a4:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   831a6:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   831aa:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   831ae:	d036      	beq.n	8321e <pio_configure_pin_group+0x82>
   831b0:	d806      	bhi.n	831c0 <pio_configure_pin_group+0x24>
   831b2:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   831b6:	d00a      	beq.n	831ce <pio_configure_pin_group+0x32>
   831b8:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   831bc:	d14d      	bne.n	8325a <pio_configure_pin_group+0xbe>
   831be:	e01a      	b.n	831f6 <pio_configure_pin_group+0x5a>
   831c0:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   831c4:	d033      	beq.n	8322e <pio_configure_pin_group+0x92>
   831c6:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   831ca:	d146      	bne.n	8325a <pio_configure_pin_group+0xbe>
   831cc:	e02f      	b.n	8322e <pio_configure_pin_group+0x92>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   831ce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   831d2:	4632      	mov	r2, r6
   831d4:	f243 03c5 	movw	r3, #12485	; 0x30c5
   831d8:	f2c0 0308 	movt	r3, #8
   831dc:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   831de:	4638      	mov	r0, r7
   831e0:	4631      	mov	r1, r6
   831e2:	f005 0201 	and.w	r2, r5, #1
   831e6:	f243 03b9 	movw	r3, #12473	; 0x30b9
   831ea:	f2c0 0308 	movt	r3, #8
   831ee:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   831f0:	f04f 0001 	mov.w	r0, #1
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   831f4:	e033      	b.n	8325e <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   831f6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   831fa:	4632      	mov	r2, r6
   831fc:	f243 03c5 	movw	r3, #12485	; 0x30c5
   83200:	f2c0 0308 	movt	r3, #8
   83204:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   83206:	4638      	mov	r0, r7
   83208:	4631      	mov	r1, r6
   8320a:	f005 0201 	and.w	r2, r5, #1
   8320e:	f243 03b9 	movw	r3, #12473	; 0x30b9
   83212:	f2c0 0308 	movt	r3, #8
   83216:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   83218:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   8321c:	e01f      	b.n	8325e <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8321e:	f243 1349 	movw	r3, #12617	; 0x3149
   83222:	f2c0 0308 	movt	r3, #8
   83226:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   83228:	f04f 0001 	mov.w	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   8322c:	e017      	b.n	8325e <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8322e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   83232:	f005 0001 	and.w	r0, r5, #1
   83236:	9000      	str	r0, [sp, #0]
   83238:	4638      	mov	r0, r7
   8323a:	4631      	mov	r1, r6
   8323c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   83240:	bf14      	ite	ne
   83242:	2200      	movne	r2, #0
   83244:	2201      	moveq	r2, #1
   83246:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8324a:	f243 140d 	movw	r4, #12557	; 0x310d
   8324e:	f2c0 0408 	movt	r4, #8
   83252:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   83254:	f04f 0001 	mov.w	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   83258:	e001      	b.n	8325e <pio_configure_pin_group+0xc2>

	default:
		return 0;
   8325a:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   8325e:	b003      	add	sp, #12
   83260:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83262:	bf00      	nop

00083264 <pio_get_pin_group>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83264:	ea4f 1050 	mov.w	r0, r0, lsr #5
   83268:	f500 1100 	add.w	r1, r0, #2097152	; 0x200000
   8326c:	f201 7207 	addw	r2, r1, #1799	; 0x707
#endif
	return p_pio;
}
   83270:	ea4f 2042 	mov.w	r0, r2, lsl #9
   83274:	4770      	bx	lr
   83276:	bf00      	nop

00083278 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   83278:	b5f0      	push	{r4, r5, r6, r7, lr}
   8327a:	b083      	sub	sp, #12
   8327c:	4607      	mov	r7, r0
   8327e:	460d      	mov	r5, r1
	Pio *p_pio = pio_get_pin_group(ul_pin);
   83280:	f243 2365 	movw	r3, #12901	; 0x3265
   83284:	f2c0 0308 	movt	r3, #8
   83288:	4798      	blx	r3
   8328a:	4606      	mov	r6, r0

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8328c:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   83290:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   83294:	d041      	beq.n	8331a <pio_configure_pin+0xa2>
   83296:	d806      	bhi.n	832a6 <pio_configure_pin+0x2e>
   83298:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8329c:	d00a      	beq.n	832b4 <pio_configure_pin+0x3c>
   8329e:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   832a2:	d162      	bne.n	8336a <pio_configure_pin+0xf2>
   832a4:	e020      	b.n	832e8 <pio_configure_pin+0x70>
   832a6:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   832aa:	d044      	beq.n	83336 <pio_configure_pin+0xbe>
   832ac:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   832b0:	d15b      	bne.n	8336a <pio_configure_pin+0xf2>
   832b2:	e040      	b.n	83336 <pio_configure_pin+0xbe>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   832b4:	f007 001f 	and.w	r0, r7, #31
   832b8:	f04f 0401 	mov.w	r4, #1
   832bc:	fa04 f700 	lsl.w	r7, r4, r0
   832c0:	4630      	mov	r0, r6
   832c2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   832c6:	463a      	mov	r2, r7
   832c8:	f243 03c5 	movw	r3, #12485	; 0x30c5
   832cc:	f2c0 0308 	movt	r3, #8
   832d0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   832d2:	4630      	mov	r0, r6
   832d4:	4639      	mov	r1, r7
   832d6:	ea05 0204 	and.w	r2, r5, r4
   832da:	f243 03b9 	movw	r3, #12473	; 0x30b9
   832de:	f2c0 0308 	movt	r3, #8
   832e2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   832e4:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   832e6:	e042      	b.n	8336e <pio_configure_pin+0xf6>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   832e8:	f007 071f 	and.w	r7, r7, #31
   832ec:	f04f 0401 	mov.w	r4, #1
   832f0:	fa04 f707 	lsl.w	r7, r4, r7
   832f4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   832f8:	463a      	mov	r2, r7
   832fa:	f243 03c5 	movw	r3, #12485	; 0x30c5
   832fe:	f2c0 0308 	movt	r3, #8
   83302:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   83304:	4630      	mov	r0, r6
   83306:	4639      	mov	r1, r7
   83308:	ea05 0204 	and.w	r2, r5, r4
   8330c:	f243 03b9 	movw	r3, #12473	; 0x30b9
   83310:	f2c0 0308 	movt	r3, #8
   83314:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   83316:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   83318:	e029      	b.n	8336e <pio_configure_pin+0xf6>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8331a:	f007 021f 	and.w	r2, r7, #31
   8331e:	f04f 0401 	mov.w	r4, #1
   83322:	fa04 f102 	lsl.w	r1, r4, r2
   83326:	462a      	mov	r2, r5
   83328:	f243 1349 	movw	r3, #12617	; 0x3149
   8332c:	f2c0 0308 	movt	r3, #8
   83330:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   83332:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   83334:	e01b      	b.n	8336e <pio_configure_pin+0xf6>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83336:	f007 011f 	and.w	r1, r7, #31
   8333a:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8333e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83342:	ea05 0004 	and.w	r0, r5, r4
   83346:	9000      	str	r0, [sp, #0]
   83348:	4630      	mov	r0, r6
   8334a:	fa04 f101 	lsl.w	r1, r4, r1
   8334e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   83352:	bf14      	ite	ne
   83354:	2200      	movne	r2, #0
   83356:	2201      	moveq	r2, #1
   83358:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8335c:	f243 150d 	movw	r5, #12557	; 0x310d
   83360:	f2c0 0508 	movt	r5, #8
   83364:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   83366:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   83368:	e001      	b.n	8336e <pio_configure_pin+0xf6>

	default:
		return 0;
   8336a:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   8336e:	b003      	add	sp, #12
   83370:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83372:	bf00      	nop

00083374 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   83374:	b570      	push	{r4, r5, r6, lr}
   83376:	4606      	mov	r6, r0
   83378:	460c      	mov	r4, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8337a:	f243 1395 	movw	r3, #12693	; 0x3195
   8337e:	f2c0 0308 	movt	r3, #8
   83382:	4798      	blx	r3
   83384:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   83386:	4630      	mov	r0, r6
   83388:	f243 1199 	movw	r1, #12697	; 0x3199
   8338c:	f2c0 0108 	movt	r1, #8
   83390:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   83392:	4005      	ands	r5, r0
   83394:	f000 808c 	beq.w	834b0 <pio_handler_process+0x13c>
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   83398:	f648 30c8 	movw	r0, #35784	; 0x8bc8
   8339c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   833a0:	6800      	ldr	r0, [r0, #0]
   833a2:	42a0      	cmp	r0, r4
   833a4:	d10c      	bne.n	833c0 <pio_handler_process+0x4c>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   833a6:	f648 32c8 	movw	r2, #35784	; 0x8bc8
   833aa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   833ae:	6851      	ldr	r1, [r2, #4]
   833b0:	420d      	tst	r5, r1
   833b2:	d005      	beq.n	833c0 <pio_handler_process+0x4c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   833b4:	4616      	mov	r6, r2
   833b6:	68d3      	ldr	r3, [r2, #12]
   833b8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   833ba:	6871      	ldr	r1, [r6, #4]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   833bc:	438d      	bics	r5, r1
   833be:	d077      	beq.n	834b0 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   833c0:	f648 30c8 	movw	r0, #35784	; 0x8bc8
   833c4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   833c8:	6900      	ldr	r0, [r0, #16]
   833ca:	42a0      	cmp	r0, r4
   833cc:	d10c      	bne.n	833e8 <pio_handler_process+0x74>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   833ce:	f648 32c8 	movw	r2, #35784	; 0x8bc8
   833d2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   833d6:	6951      	ldr	r1, [r2, #20]
   833d8:	420d      	tst	r5, r1
   833da:	d005      	beq.n	833e8 <pio_handler_process+0x74>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   833dc:	4616      	mov	r6, r2
   833de:	69d3      	ldr	r3, [r2, #28]
   833e0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   833e2:	6971      	ldr	r1, [r6, #20]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   833e4:	438d      	bics	r5, r1
   833e6:	d063      	beq.n	834b0 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   833e8:	f648 30c8 	movw	r0, #35784	; 0x8bc8
   833ec:	f2c2 0007 	movt	r0, #8199	; 0x2007
   833f0:	6a00      	ldr	r0, [r0, #32]
   833f2:	42a0      	cmp	r0, r4
   833f4:	d10c      	bne.n	83410 <pio_handler_process+0x9c>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   833f6:	f648 32c8 	movw	r2, #35784	; 0x8bc8
   833fa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   833fe:	6a51      	ldr	r1, [r2, #36]	; 0x24
   83400:	420d      	tst	r5, r1
   83402:	d005      	beq.n	83410 <pio_handler_process+0x9c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   83404:	4616      	mov	r6, r2
   83406:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   83408:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8340a:	6a71      	ldr	r1, [r6, #36]	; 0x24

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8340c:	438d      	bics	r5, r1
   8340e:	d04f      	beq.n	834b0 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   83410:	f648 30c8 	movw	r0, #35784	; 0x8bc8
   83414:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83418:	6b00      	ldr	r0, [r0, #48]	; 0x30
   8341a:	42a0      	cmp	r0, r4
   8341c:	d10c      	bne.n	83438 <pio_handler_process+0xc4>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8341e:	f648 32c8 	movw	r2, #35784	; 0x8bc8
   83422:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83426:	6b51      	ldr	r1, [r2, #52]	; 0x34
   83428:	420d      	tst	r5, r1
   8342a:	d005      	beq.n	83438 <pio_handler_process+0xc4>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8342c:	4616      	mov	r6, r2
   8342e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   83430:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   83432:	6b71      	ldr	r1, [r6, #52]	; 0x34

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   83434:	438d      	bics	r5, r1
   83436:	d03b      	beq.n	834b0 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   83438:	f648 30c8 	movw	r0, #35784	; 0x8bc8
   8343c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83440:	6c00      	ldr	r0, [r0, #64]	; 0x40
   83442:	42a0      	cmp	r0, r4
   83444:	d10c      	bne.n	83460 <pio_handler_process+0xec>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   83446:	f648 32c8 	movw	r2, #35784	; 0x8bc8
   8344a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8344e:	6c51      	ldr	r1, [r2, #68]	; 0x44
   83450:	420d      	tst	r5, r1
   83452:	d005      	beq.n	83460 <pio_handler_process+0xec>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   83454:	4616      	mov	r6, r2
   83456:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   83458:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8345a:	6c71      	ldr	r1, [r6, #68]	; 0x44

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8345c:	438d      	bics	r5, r1
   8345e:	d027      	beq.n	834b0 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   83460:	f648 30c8 	movw	r0, #35784	; 0x8bc8
   83464:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83468:	6d00      	ldr	r0, [r0, #80]	; 0x50
   8346a:	42a0      	cmp	r0, r4
   8346c:	d10c      	bne.n	83488 <pio_handler_process+0x114>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8346e:	f648 32c8 	movw	r2, #35784	; 0x8bc8
   83472:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83476:	6d51      	ldr	r1, [r2, #84]	; 0x54
   83478:	420d      	tst	r5, r1
   8347a:	d005      	beq.n	83488 <pio_handler_process+0x114>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8347c:	4616      	mov	r6, r2
   8347e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   83480:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   83482:	6d71      	ldr	r1, [r6, #84]	; 0x54

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   83484:	438d      	bics	r5, r1
   83486:	d013      	beq.n	834b0 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   83488:	f648 30c8 	movw	r0, #35784	; 0x8bc8
   8348c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83490:	6e00      	ldr	r0, [r0, #96]	; 0x60
   83492:	42a0      	cmp	r0, r4
   83494:	d10c      	bne.n	834b0 <pio_handler_process+0x13c>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   83496:	f648 32c8 	movw	r2, #35784	; 0x8bc8
   8349a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8349e:	6e51      	ldr	r1, [r2, #100]	; 0x64
   834a0:	4229      	tst	r1, r5
   834a2:	d005      	beq.n	834b0 <pio_handler_process+0x13c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   834a4:	f648 33c8 	movw	r3, #35784	; 0x8bc8
   834a8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   834ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   834ae:	4790      	blx	r2
   834b0:	bd70      	pop	{r4, r5, r6, pc}
   834b2:	bf00      	nop

000834b4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   834b4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   834b6:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   834ba:	f2c4 000e 	movt	r0, #16398	; 0x400e
   834be:	f04f 010b 	mov.w	r1, #11
   834c2:	f243 3375 	movw	r3, #13173	; 0x3375
   834c6:	f2c0 0308 	movt	r3, #8
   834ca:	4798      	blx	r3
   834cc:	bd08      	pop	{r3, pc}
   834ce:	bf00      	nop

000834d0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   834d0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   834d2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   834d6:	f2c4 000e 	movt	r0, #16398	; 0x400e
   834da:	f04f 010c 	mov.w	r1, #12
   834de:	f243 3375 	movw	r3, #13173	; 0x3375
   834e2:	f2c0 0308 	movt	r3, #8
   834e6:	4798      	blx	r3
   834e8:	bd08      	pop	{r3, pc}
   834ea:	bf00      	nop

000834ec <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   834ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   834ee:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   834f2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   834f6:	f04f 010d 	mov.w	r1, #13
   834fa:	f243 3375 	movw	r3, #13173	; 0x3375
   834fe:	f2c0 0308 	movt	r3, #8
   83502:	4798      	blx	r3
   83504:	bd08      	pop	{r3, pc}
   83506:	bf00      	nop

00083508 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   83508:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8350a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   8350e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   83512:	f04f 010e 	mov.w	r1, #14
   83516:	f243 3375 	movw	r3, #13173	; 0x3375
   8351a:	f2c0 0308 	movt	r3, #8
   8351e:	4798      	blx	r3
   83520:	bd08      	pop	{r3, pc}
   83522:	bf00      	nop

00083524 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83524:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   83528:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8352c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8352e:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   83532:	4308      	orrs	r0, r1
   83534:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83536:	6e98      	ldr	r0, [r3, #104]	; 0x68
   83538:	f010 0f08 	tst.w	r0, #8
   8353c:	d007      	beq.n	8354e <pmc_switch_mck_to_pllack+0x2a>
   8353e:	e010      	b.n	83562 <pmc_switch_mck_to_pllack+0x3e>
   83540:	f100 33ff 	add.w	r3, r0, #4294967295
   83544:	6e90      	ldr	r0, [r2, #104]	; 0x68
   83546:	f010 0f08 	tst.w	r0, #8
   8354a:	d038      	beq.n	835be <pmc_switch_mck_to_pllack+0x9a>
   8354c:	e009      	b.n	83562 <pmc_switch_mck_to_pllack+0x3e>
   8354e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   83552:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   83556:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8355a:	6e91      	ldr	r1, [r2, #104]	; 0x68
   8355c:	f011 0f08 	tst.w	r1, #8
   83560:	d0ee      	beq.n	83540 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83562:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   83566:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8356a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   8356c:	f022 0303 	bic.w	r3, r2, #3
   83570:	f043 0002 	orr.w	r0, r3, #2
   83574:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83576:	6e89      	ldr	r1, [r1, #104]	; 0x68
   83578:	f011 0f08 	tst.w	r1, #8
   8357c:	d009      	beq.n	83592 <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   8357e:	f04f 0000 	mov.w	r0, #0
   83582:	4770      	bx	lr
   83584:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83588:	6e91      	ldr	r1, [r2, #104]	; 0x68
   8358a:	f011 0f08 	tst.w	r1, #8
   8358e:	d013      	beq.n	835b8 <pmc_switch_mck_to_pllack+0x94>
   83590:	e009      	b.n	835a6 <pmc_switch_mck_to_pllack+0x82>
   83592:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83596:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8359a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8359e:	6e90      	ldr	r0, [r2, #104]	; 0x68
   835a0:	f010 0f08 	tst.w	r0, #8
   835a4:	d0ee      	beq.n	83584 <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   835a6:	f04f 0000 	mov.w	r0, #0
   835aa:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   835ac:	f04f 0001 	mov.w	r0, #1
   835b0:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   835b2:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   835b6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   835b8:	3b01      	subs	r3, #1
   835ba:	d1f0      	bne.n	8359e <pmc_switch_mck_to_pllack+0x7a>
   835bc:	e7f9      	b.n	835b2 <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   835be:	1e58      	subs	r0, r3, #1
   835c0:	d1cb      	bne.n	8355a <pmc_switch_mck_to_pllack+0x36>
   835c2:	e7f3      	b.n	835ac <pmc_switch_mck_to_pllack+0x88>

000835c4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   835c4:	b188      	cbz	r0, 835ea <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   835c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   835ca:	f2c4 010e 	movt	r1, #16398	; 0x400e
   835ce:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   835d0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   835d4:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   835d8:	4002      	ands	r2, r0
   835da:	f04f 0302 	mov.w	r3, #2
   835de:	f2c0 1337 	movt	r3, #311	; 0x137
   835e2:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   835e6:	6208      	str	r0, [r1, #32]
   835e8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   835ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   835ee:	f2c4 030e 	movt	r3, #16398	; 0x400e
   835f2:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   835f4:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   835f8:	f020 0203 	bic.w	r2, r0, #3
   835fc:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   83600:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83604:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83608:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8360c:	6218      	str	r0, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8360e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   83612:	f2c4 020e 	movt	r2, #16398	; 0x400e
   83616:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83618:	f013 0f01 	tst.w	r3, #1
   8361c:	d0fb      	beq.n	83616 <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8361e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   83622:	f2c4 010e 	movt	r1, #16398	; 0x400e
   83626:	6a08      	ldr	r0, [r1, #32]
   83628:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   8362c:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   83630:	620b      	str	r3, [r1, #32]
   83632:	4770      	bx	lr

00083634 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83634:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   83638:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8363c:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8363e:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   83642:	4770      	bx	lr

00083644 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83644:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   83648:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8364c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83650:	629a      	str	r2, [r3, #40]	; 0x28
   83652:	4770      	bx	lr

00083654 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83654:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   83658:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8365c:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8365e:	f000 0002 	and.w	r0, r0, #2
   83662:	4770      	bx	lr

00083664 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   83664:	282c      	cmp	r0, #44	; 0x2c
   83666:	d835      	bhi.n	836d4 <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   83668:	281f      	cmp	r0, #31
   8366a:	d817      	bhi.n	8369c <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8366c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   83670:	f2c4 010e 	movt	r1, #16398	; 0x400e
   83674:	698a      	ldr	r2, [r1, #24]
   83676:	f04f 0301 	mov.w	r3, #1
   8367a:	fa03 f300 	lsl.w	r3, r3, r0
   8367e:	401a      	ands	r2, r3
   83680:	4293      	cmp	r3, r2
   83682:	d02a      	beq.n	836da <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   83684:	f04f 0101 	mov.w	r1, #1
   83688:	fa01 f000 	lsl.w	r0, r1, r0
   8368c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   83690:	f2c4 020e 	movt	r2, #16398	; 0x400e
   83694:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   83696:	f04f 0000 	mov.w	r0, #0
   8369a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8369c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   836a0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   836a4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
   836a8:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   836ac:	f04f 0101 	mov.w	r1, #1
   836b0:	fa01 f100 	lsl.w	r1, r1, r0
   836b4:	400a      	ands	r2, r1
   836b6:	4291      	cmp	r1, r2
   836b8:	d012      	beq.n	836e0 <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   836ba:	f04f 0301 	mov.w	r3, #1
   836be:	fa03 f000 	lsl.w	r0, r3, r0
   836c2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   836c6:	f2c4 020e 	movt	r2, #16398	; 0x400e
   836ca:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   836ce:	f04f 0000 	mov.w	r0, #0
   836d2:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   836d4:	f04f 0001 	mov.w	r0, #1
   836d8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   836da:	f04f 0000 	mov.w	r0, #0
   836de:	4770      	bx	lr
   836e0:	f04f 0000 	mov.w	r0, #0
}
   836e4:	4770      	bx	lr
   836e6:	bf00      	nop

000836e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   836e8:	e7fe      	b.n	836e8 <Dummy_Handler>
   836ea:	bf00      	nop

000836ec <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   836ec:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   836ee:	f240 0300 	movw	r3, #0
   836f2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   836f6:	f646 4250 	movw	r2, #27728	; 0x6c50
   836fa:	f2c0 0208 	movt	r2, #8
   836fe:	429a      	cmp	r2, r3
   83700:	d003      	beq.n	8370a <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   83702:	4840      	ldr	r0, [pc, #256]	; (83804 <Reset_Handler+0x118>)
   83704:	4940      	ldr	r1, [pc, #256]	; (83808 <Reset_Handler+0x11c>)
   83706:	4281      	cmp	r1, r0
   83708:	d304      	bcc.n	83714 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8370a:	4b40      	ldr	r3, [pc, #256]	; (8380c <Reset_Handler+0x120>)
   8370c:	4a40      	ldr	r2, [pc, #256]	; (83810 <Reset_Handler+0x124>)
   8370e:	429a      	cmp	r2, r3
   83710:	d325      	bcc.n	8375e <Reset_Handler+0x72>
   83712:	e042      	b.n	8379a <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   83714:	4d3f      	ldr	r5, [pc, #252]	; (83814 <Reset_Handler+0x128>)
   83716:	4c40      	ldr	r4, [pc, #256]	; (83818 <Reset_Handler+0x12c>)
   83718:	1b63      	subs	r3, r4, r5
   8371a:	f023 0503 	bic.w	r5, r3, #3
   8371e:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   83722:	f240 0200 	movw	r2, #0
   83726:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8372a:	f646 4150 	movw	r1, #27728	; 0x6c50
   8372e:	f2c0 0108 	movt	r1, #8
   83732:	f105 0004 	add.w	r0, r5, #4
   83736:	f3c5 0480 	ubfx	r4, r5, #2, #1
   8373a:	585d      	ldr	r5, [r3, r1]
   8373c:	509d      	str	r5, [r3, r2]
   8373e:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   83742:	4283      	cmp	r3, r0
   83744:	d155      	bne.n	837f2 <Reset_Handler+0x106>
   83746:	e7e0      	b.n	8370a <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   83748:	585d      	ldr	r5, [r3, r1]
   8374a:	509d      	str	r5, [r3, r2]
   8374c:	f103 0304 	add.w	r3, r3, #4
   83750:	585c      	ldr	r4, [r3, r1]
   83752:	509c      	str	r4, [r3, r2]
   83754:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   83758:	4283      	cmp	r3, r0
   8375a:	d1f5      	bne.n	83748 <Reset_Handler+0x5c>
   8375c:	e7d5      	b.n	8370a <Reset_Handler+0x1e>
   8375e:	4d2f      	ldr	r5, [pc, #188]	; (8381c <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   83760:	492f      	ldr	r1, [pc, #188]	; (83820 <Reset_Handler+0x134>)
   83762:	1b48      	subs	r0, r1, r5
   83764:	f020 0403 	bic.w	r4, r0, #3
   83768:	f640 03d0 	movw	r3, #2256	; 0x8d0
   8376c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83770:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   83772:	f04f 0100 	mov.w	r1, #0
   83776:	1b50      	subs	r0, r2, r5
   83778:	f1a0 0004 	sub.w	r0, r0, #4
   8377c:	f3c0 0480 	ubfx	r4, r0, #2, #1
   83780:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83784:	4295      	cmp	r5, r2
   83786:	d12d      	bne.n	837e4 <Reset_Handler+0xf8>
   83788:	e007      	b.n	8379a <Reset_Handler+0xae>
   8378a:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   8378e:	6069      	str	r1, [r5, #4]
   83790:	f105 0508 	add.w	r5, r5, #8
   83794:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83796:	4295      	cmp	r5, r2
   83798:	d1f7      	bne.n	8378a <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8379a:	f240 0500 	movw	r5, #0
   8379e:	f2c0 0508 	movt	r5, #8
   837a2:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   837a6:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   837aa:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   837ae:	f2ce 0000 	movt	r0, #57344	; 0xe000
   837b2:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   837b4:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   837b8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   837bc:	d207      	bcs.n	837ce <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   837be:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   837c2:	f2ce 0300 	movt	r3, #57344	; 0xe000
   837c6:	689d      	ldr	r5, [r3, #8]
   837c8:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   837cc:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   837ce:	f244 31cd 	movw	r1, #17357	; 0x43cd
   837d2:	f2c0 0108 	movt	r1, #8
   837d6:	4788      	blx	r1

	/* Branch to main function */
	main();
   837d8:	f640 4029 	movw	r0, #3113	; 0xc29
   837dc:	f2c0 0008 	movt	r0, #8
   837e0:	4780      	blx	r0
   837e2:	e7fe      	b.n	837e2 <Reset_Handler+0xf6>
   837e4:	2c00      	cmp	r4, #0
   837e6:	d0d0      	beq.n	8378a <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   837e8:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   837ec:	4295      	cmp	r5, r2
   837ee:	d1cc      	bne.n	8378a <Reset_Handler+0x9e>
   837f0:	e7d3      	b.n	8379a <Reset_Handler+0xae>
   837f2:	2c00      	cmp	r4, #0
   837f4:	d0a8      	beq.n	83748 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   837f6:	585c      	ldr	r4, [r3, r1]
   837f8:	509c      	str	r4, [r3, r2]
   837fa:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   837fe:	4283      	cmp	r3, r0
   83800:	d1a2      	bne.n	83748 <Reset_Handler+0x5c>
   83802:	e782      	b.n	8370a <Reset_Handler+0x1e>
   83804:	200708d0 	.word	0x200708d0
   83808:	20070000 	.word	0x20070000
   8380c:	20078cb4 	.word	0x20078cb4
   83810:	200708d0 	.word	0x200708d0
   83814:	20070004 	.word	0x20070004
   83818:	200708d3 	.word	0x200708d3
   8381c:	200708cc 	.word	0x200708cc
   83820:	20078caf 	.word	0x20078caf

00083824 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83824:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   83828:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8382c:	6b18      	ldr	r0, [r3, #48]	; 0x30
   8382e:	f000 0103 	and.w	r1, r0, #3
   83832:	2903      	cmp	r1, #3
   83834:	f200 80b1 	bhi.w	8399a <SystemCoreClockUpdate+0x176>
   83838:	e8df f001 	tbb	[pc, r1]
   8383c:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83840:	f641 2010 	movw	r0, #6672	; 0x1a10
   83844:	f2c4 000e 	movt	r0, #16398	; 0x400e
   83848:	6941      	ldr	r1, [r0, #20]
   8384a:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8384e:	f240 030c 	movw	r3, #12
   83852:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83856:	bf14      	ite	ne
   83858:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8385c:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   83860:	601a      	str	r2, [r3, #0]
   83862:	e09a      	b.n	8399a <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83864:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   83868:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8386c:	6a18      	ldr	r0, [r3, #32]
   8386e:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   83872:	d009      	beq.n	83888 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83874:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   83878:	f2c0 03b7 	movt	r3, #183	; 0xb7
   8387c:	f240 020c 	movw	r2, #12
   83880:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83884:	6013      	str	r3, [r2, #0]
   83886:	e088      	b.n	8399a <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83888:	f44f 6110 	mov.w	r1, #2304	; 0x900
   8388c:	f2c0 013d 	movt	r1, #61	; 0x3d
   83890:	f240 020c 	movw	r2, #12
   83894:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83898:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8389a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8389e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   838a2:	6a18      	ldr	r0, [r3, #32]
   838a4:	f000 0170 	and.w	r1, r0, #112	; 0x70
   838a8:	2910      	cmp	r1, #16
   838aa:	d002      	beq.n	838b2 <SystemCoreClockUpdate+0x8e>
   838ac:	2920      	cmp	r1, #32
   838ae:	d174      	bne.n	8399a <SystemCoreClockUpdate+0x176>
   838b0:	e009      	b.n	838c6 <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   838b2:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   838b6:	f2c0 007a 	movt	r0, #122	; 0x7a
   838ba:	f240 010c 	movw	r1, #12
   838be:	f2c2 0107 	movt	r1, #8199	; 0x2007
   838c2:	6008      	str	r0, [r1, #0]
				break;
   838c4:	e069      	b.n	8399a <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   838c6:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   838ca:	f2c0 03b7 	movt	r3, #183	; 0xb7
   838ce:	f240 020c 	movw	r2, #12
   838d2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   838d6:	6013      	str	r3, [r2, #0]
				break;
   838d8:	e05f      	b.n	8399a <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   838da:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   838de:	f2c4 020e 	movt	r2, #16398	; 0x400e
   838e2:	6a13      	ldr	r3, [r2, #32]
   838e4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   838e8:	d009      	beq.n	838fe <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   838ea:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   838ee:	f2c0 01b7 	movt	r1, #183	; 0xb7
   838f2:	f240 020c 	movw	r2, #12
   838f6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   838fa:	6011      	str	r1, [r2, #0]
   838fc:	e027      	b.n	8394e <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   838fe:	f44f 6010 	mov.w	r0, #2304	; 0x900
   83902:	f2c0 003d 	movt	r0, #61	; 0x3d
   83906:	f240 010c 	movw	r1, #12
   8390a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8390e:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83910:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   83914:	f2c4 020e 	movt	r2, #16398	; 0x400e
   83918:	6a13      	ldr	r3, [r2, #32]
   8391a:	f003 0070 	and.w	r0, r3, #112	; 0x70
   8391e:	2810      	cmp	r0, #16
   83920:	d002      	beq.n	83928 <SystemCoreClockUpdate+0x104>
   83922:	2820      	cmp	r0, #32
   83924:	d113      	bne.n	8394e <SystemCoreClockUpdate+0x12a>
   83926:	e009      	b.n	8393c <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   83928:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   8392c:	f2c0 037a 	movt	r3, #122	; 0x7a
   83930:	f240 000c 	movw	r0, #12
   83934:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83938:	6003      	str	r3, [r0, #0]
				break;
   8393a:	e008      	b.n	8394e <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8393c:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   83940:	f2c0 01b7 	movt	r1, #183	; 0xb7
   83944:	f240 020c 	movw	r2, #12
   83948:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8394c:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8394e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   83952:	f2c4 030e 	movt	r3, #16398	; 0x400e
   83956:	6b18      	ldr	r0, [r3, #48]	; 0x30
   83958:	f000 0103 	and.w	r1, r0, #3
   8395c:	2902      	cmp	r1, #2
   8395e:	d113      	bne.n	83988 <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83960:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   83964:	f2c4 010e 	movt	r1, #16398	; 0x400e
   83968:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8396a:	6a89      	ldr	r1, [r1, #40]	; 0x28
   8396c:	f240 030c 	movw	r3, #12
   83970:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83974:	f3c0 400a 	ubfx	r0, r0, #16, #11
   83978:	681a      	ldr	r2, [r3, #0]
   8397a:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8397e:	b2c9      	uxtb	r1, r1
   83980:	fbb0 f2f1 	udiv	r2, r0, r1
   83984:	601a      	str	r2, [r3, #0]
   83986:	e008      	b.n	8399a <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   83988:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   8398c:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   83990:	f240 020c 	movw	r2, #12
   83994:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83998:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8399a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8399e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   839a2:	6b10      	ldr	r0, [r2, #48]	; 0x30
   839a4:	f000 0170 	and.w	r1, r0, #112	; 0x70
   839a8:	2970      	cmp	r1, #112	; 0x70
   839aa:	d10e      	bne.n	839ca <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   839ac:	f240 030c 	movw	r3, #12
   839b0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   839b4:	6818      	ldr	r0, [r3, #0]
   839b6:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   839ba:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   839be:	fba2 0100 	umull	r0, r1, r2, r0
   839c2:	ea4f 0051 	mov.w	r0, r1, lsr #1
   839c6:	6018      	str	r0, [r3, #0]
   839c8:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   839ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   839ce:	f2c4 030e 	movt	r3, #16398	; 0x400e
   839d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   839d4:	f240 000c 	movw	r0, #12
   839d8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   839dc:	f3c2 1102 	ubfx	r1, r2, #4, #3
   839e0:	6803      	ldr	r3, [r0, #0]
   839e2:	fa23 f301 	lsr.w	r3, r3, r1
   839e6:	6003      	str	r3, [r0, #0]
   839e8:	4770      	bx	lr
   839ea:	bf00      	nop

000839ec <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   839ec:	f64e 23bf 	movw	r3, #60095	; 0xeabf
   839f0:	f2c0 1321 	movt	r3, #289	; 0x121
   839f4:	4298      	cmp	r0, r3
   839f6:	d80c      	bhi.n	83a12 <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   839f8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   839fc:	f2c4 030e 	movt	r3, #16398	; 0x400e
   83a00:	f04f 0000 	mov.w	r0, #0
   83a04:	6018      	str	r0, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   83a06:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   83a0a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   83a0e:	6008      	str	r0, [r1, #0]
   83a10:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   83a12:	f24f 017f 	movw	r1, #61567	; 0xf07f
   83a16:	f2c0 21fa 	movt	r1, #762	; 0x2fa
   83a1a:	4288      	cmp	r0, r1
   83a1c:	d80c      	bhi.n	83a38 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   83a1e:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   83a22:	f2c4 000e 	movt	r0, #16398	; 0x400e
   83a26:	f44f 7180 	mov.w	r1, #256	; 0x100
   83a2a:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   83a2c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   83a30:	f2c4 020e 	movt	r2, #16398	; 0x400e
   83a34:	6011      	str	r1, [r2, #0]
   83a36:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   83a38:	f648 73ff 	movw	r3, #36863	; 0x8fff
   83a3c:	f2c0 33d0 	movt	r3, #976	; 0x3d0
   83a40:	4298      	cmp	r0, r3
   83a42:	d80c      	bhi.n	83a5e <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   83a44:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   83a48:	f2c4 010e 	movt	r1, #16398	; 0x400e
   83a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
   83a50:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   83a52:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   83a56:	f2c4 030e 	movt	r3, #16398	; 0x400e
   83a5a:	601a      	str	r2, [r3, #0]
   83a5c:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   83a5e:	f24b 31ff 	movw	r1, #46079	; 0xb3ff
   83a62:	f2c0 41c4 	movt	r1, #1220	; 0x4c4
   83a66:	4288      	cmp	r0, r1
   83a68:	d80c      	bhi.n	83a84 <system_init_flash+0x98>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   83a6a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   83a6e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   83a72:	f44f 7240 	mov.w	r2, #768	; 0x300
   83a76:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   83a78:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   83a7c:	f2c4 000e 	movt	r0, #16398	; 0x400e
   83a80:	6002      	str	r2, [r0, #0]
   83a82:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   83a84:	f644 237f 	movw	r3, #19071	; 0x4a7f
   83a88:	f2c0 535d 	movt	r3, #1373	; 0x55d
   83a8c:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   83a8e:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   83a92:	f2c4 000e 	movt	r0, #16398	; 0x400e
   83a96:	bf94      	ite	ls
   83a98:	f44f 6280 	movls.w	r2, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   83a9c:	f44f 62a0 	movhi.w	r2, #1280	; 0x500
   83aa0:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   83aa2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   83aa6:	f2c4 010e 	movt	r1, #16398	; 0x400e
   83aaa:	600a      	str	r2, [r1, #0]
   83aac:	4770      	bx	lr
   83aae:	bf00      	nop

00083ab0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   83ab0:	f648 4338 	movw	r3, #35896	; 0x8c38
   83ab4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83ab8:	6819      	ldr	r1, [r3, #0]
   83aba:	b941      	cbnz	r1, 83ace <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
   83abc:	f648 4338 	movw	r3, #35896	; 0x8c38
   83ac0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83ac4:	f64a 42b8 	movw	r2, #44216	; 0xacb8
   83ac8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83acc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   83ace:	f648 4138 	movw	r1, #35896	; 0x8c38
   83ad2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83ad6:	680b      	ldr	r3, [r1, #0]

	if (((int)prev_heap + incr) > ramend) {
   83ad8:	1818      	adds	r0, r3, r0
   83ada:	f647 72fc 	movw	r2, #32764	; 0x7ffc
   83ade:	f2c2 0208 	movt	r2, #8200	; 0x2008
   83ae2:	4282      	cmp	r2, r0
   83ae4:	db06      	blt.n	83af4 <_sbrk+0x44>
		return (caddr_t) -1;	
	}

	heap += incr;
   83ae6:	4601      	mov	r1, r0
   83ae8:	f648 4038 	movw	r0, #35896	; 0x8c38
   83aec:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83af0:	6001      	str	r1, [r0, #0]

	return (caddr_t) prev_heap;
   83af2:	e001      	b.n	83af8 <_sbrk+0x48>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   83af4:	f04f 33ff 	mov.w	r3, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   83af8:	4618      	mov	r0, r3
   83afa:	4770      	bx	lr

00083afc <_close>:
}

extern int _close(int file)
{
	return -1;
}
   83afc:	f04f 30ff 	mov.w	r0, #4294967295
   83b00:	4770      	bx	lr
   83b02:	bf00      	nop

00083b04 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   83b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   83b08:	604b      	str	r3, [r1, #4]

	return 0;
}
   83b0a:	f04f 0000 	mov.w	r0, #0
   83b0e:	4770      	bx	lr

00083b10 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   83b10:	f04f 0001 	mov.w	r0, #1
   83b14:	4770      	bx	lr
   83b16:	bf00      	nop

00083b18 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   83b18:	f04f 0000 	mov.w	r0, #0
   83b1c:	4770      	bx	lr
   83b1e:	bf00      	nop

00083b20 <__aeabi_drsub>:
   83b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   83b24:	e002      	b.n	83b2c <__adddf3>
   83b26:	bf00      	nop

00083b28 <__aeabi_dsub>:
   83b28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00083b2c <__adddf3>:
   83b2c:	b530      	push	{r4, r5, lr}
   83b2e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   83b32:	ea4f 0543 	mov.w	r5, r3, lsl #1
   83b36:	ea94 0f05 	teq	r4, r5
   83b3a:	bf08      	it	eq
   83b3c:	ea90 0f02 	teqeq	r0, r2
   83b40:	bf1f      	itttt	ne
   83b42:	ea54 0c00 	orrsne.w	ip, r4, r0
   83b46:	ea55 0c02 	orrsne.w	ip, r5, r2
   83b4a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   83b4e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83b52:	f000 80e2 	beq.w	83d1a <__adddf3+0x1ee>
   83b56:	ea4f 5454 	mov.w	r4, r4, lsr #21
   83b5a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   83b5e:	bfb8      	it	lt
   83b60:	426d      	neglt	r5, r5
   83b62:	dd0c      	ble.n	83b7e <__adddf3+0x52>
   83b64:	442c      	add	r4, r5
   83b66:	ea80 0202 	eor.w	r2, r0, r2
   83b6a:	ea81 0303 	eor.w	r3, r1, r3
   83b6e:	ea82 0000 	eor.w	r0, r2, r0
   83b72:	ea83 0101 	eor.w	r1, r3, r1
   83b76:	ea80 0202 	eor.w	r2, r0, r2
   83b7a:	ea81 0303 	eor.w	r3, r1, r3
   83b7e:	2d36      	cmp	r5, #54	; 0x36
   83b80:	bf88      	it	hi
   83b82:	bd30      	pophi	{r4, r5, pc}
   83b84:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83b88:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83b8c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   83b90:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   83b94:	d002      	beq.n	83b9c <__adddf3+0x70>
   83b96:	4240      	negs	r0, r0
   83b98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83b9c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   83ba0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83ba4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   83ba8:	d002      	beq.n	83bb0 <__adddf3+0x84>
   83baa:	4252      	negs	r2, r2
   83bac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83bb0:	ea94 0f05 	teq	r4, r5
   83bb4:	f000 80a7 	beq.w	83d06 <__adddf3+0x1da>
   83bb8:	f1a4 0401 	sub.w	r4, r4, #1
   83bbc:	f1d5 0e20 	rsbs	lr, r5, #32
   83bc0:	db0d      	blt.n	83bde <__adddf3+0xb2>
   83bc2:	fa02 fc0e 	lsl.w	ip, r2, lr
   83bc6:	fa22 f205 	lsr.w	r2, r2, r5
   83bca:	1880      	adds	r0, r0, r2
   83bcc:	f141 0100 	adc.w	r1, r1, #0
   83bd0:	fa03 f20e 	lsl.w	r2, r3, lr
   83bd4:	1880      	adds	r0, r0, r2
   83bd6:	fa43 f305 	asr.w	r3, r3, r5
   83bda:	4159      	adcs	r1, r3
   83bdc:	e00e      	b.n	83bfc <__adddf3+0xd0>
   83bde:	f1a5 0520 	sub.w	r5, r5, #32
   83be2:	f10e 0e20 	add.w	lr, lr, #32
   83be6:	2a01      	cmp	r2, #1
   83be8:	fa03 fc0e 	lsl.w	ip, r3, lr
   83bec:	bf28      	it	cs
   83bee:	f04c 0c02 	orrcs.w	ip, ip, #2
   83bf2:	fa43 f305 	asr.w	r3, r3, r5
   83bf6:	18c0      	adds	r0, r0, r3
   83bf8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   83bfc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83c00:	d507      	bpl.n	83c12 <__adddf3+0xe6>
   83c02:	f04f 0e00 	mov.w	lr, #0
   83c06:	f1dc 0c00 	rsbs	ip, ip, #0
   83c0a:	eb7e 0000 	sbcs.w	r0, lr, r0
   83c0e:	eb6e 0101 	sbc.w	r1, lr, r1
   83c12:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   83c16:	d31b      	bcc.n	83c50 <__adddf3+0x124>
   83c18:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   83c1c:	d30c      	bcc.n	83c38 <__adddf3+0x10c>
   83c1e:	0849      	lsrs	r1, r1, #1
   83c20:	ea5f 0030 	movs.w	r0, r0, rrx
   83c24:	ea4f 0c3c 	mov.w	ip, ip, rrx
   83c28:	f104 0401 	add.w	r4, r4, #1
   83c2c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   83c30:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   83c34:	f080 809a 	bcs.w	83d6c <__adddf3+0x240>
   83c38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83c3c:	bf08      	it	eq
   83c3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   83c42:	f150 0000 	adcs.w	r0, r0, #0
   83c46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83c4a:	ea41 0105 	orr.w	r1, r1, r5
   83c4e:	bd30      	pop	{r4, r5, pc}
   83c50:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   83c54:	4140      	adcs	r0, r0
   83c56:	eb41 0101 	adc.w	r1, r1, r1
   83c5a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83c5e:	f1a4 0401 	sub.w	r4, r4, #1
   83c62:	d1e9      	bne.n	83c38 <__adddf3+0x10c>
   83c64:	f091 0f00 	teq	r1, #0
   83c68:	bf04      	itt	eq
   83c6a:	4601      	moveq	r1, r0
   83c6c:	2000      	moveq	r0, #0
   83c6e:	fab1 f381 	clz	r3, r1
   83c72:	bf08      	it	eq
   83c74:	3320      	addeq	r3, #32
   83c76:	f1a3 030b 	sub.w	r3, r3, #11
   83c7a:	f1b3 0220 	subs.w	r2, r3, #32
   83c7e:	da0c      	bge.n	83c9a <__adddf3+0x16e>
   83c80:	320c      	adds	r2, #12
   83c82:	dd08      	ble.n	83c96 <__adddf3+0x16a>
   83c84:	f102 0c14 	add.w	ip, r2, #20
   83c88:	f1c2 020c 	rsb	r2, r2, #12
   83c8c:	fa01 f00c 	lsl.w	r0, r1, ip
   83c90:	fa21 f102 	lsr.w	r1, r1, r2
   83c94:	e00c      	b.n	83cb0 <__adddf3+0x184>
   83c96:	f102 0214 	add.w	r2, r2, #20
   83c9a:	bfd8      	it	le
   83c9c:	f1c2 0c20 	rsble	ip, r2, #32
   83ca0:	fa01 f102 	lsl.w	r1, r1, r2
   83ca4:	fa20 fc0c 	lsr.w	ip, r0, ip
   83ca8:	bfdc      	itt	le
   83caa:	ea41 010c 	orrle.w	r1, r1, ip
   83cae:	4090      	lslle	r0, r2
   83cb0:	1ae4      	subs	r4, r4, r3
   83cb2:	bfa2      	ittt	ge
   83cb4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   83cb8:	4329      	orrge	r1, r5
   83cba:	bd30      	popge	{r4, r5, pc}
   83cbc:	ea6f 0404 	mvn.w	r4, r4
   83cc0:	3c1f      	subs	r4, #31
   83cc2:	da1c      	bge.n	83cfe <__adddf3+0x1d2>
   83cc4:	340c      	adds	r4, #12
   83cc6:	dc0e      	bgt.n	83ce6 <__adddf3+0x1ba>
   83cc8:	f104 0414 	add.w	r4, r4, #20
   83ccc:	f1c4 0220 	rsb	r2, r4, #32
   83cd0:	fa20 f004 	lsr.w	r0, r0, r4
   83cd4:	fa01 f302 	lsl.w	r3, r1, r2
   83cd8:	ea40 0003 	orr.w	r0, r0, r3
   83cdc:	fa21 f304 	lsr.w	r3, r1, r4
   83ce0:	ea45 0103 	orr.w	r1, r5, r3
   83ce4:	bd30      	pop	{r4, r5, pc}
   83ce6:	f1c4 040c 	rsb	r4, r4, #12
   83cea:	f1c4 0220 	rsb	r2, r4, #32
   83cee:	fa20 f002 	lsr.w	r0, r0, r2
   83cf2:	fa01 f304 	lsl.w	r3, r1, r4
   83cf6:	ea40 0003 	orr.w	r0, r0, r3
   83cfa:	4629      	mov	r1, r5
   83cfc:	bd30      	pop	{r4, r5, pc}
   83cfe:	fa21 f004 	lsr.w	r0, r1, r4
   83d02:	4629      	mov	r1, r5
   83d04:	bd30      	pop	{r4, r5, pc}
   83d06:	f094 0f00 	teq	r4, #0
   83d0a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   83d0e:	bf06      	itte	eq
   83d10:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   83d14:	3401      	addeq	r4, #1
   83d16:	3d01      	subne	r5, #1
   83d18:	e74e      	b.n	83bb8 <__adddf3+0x8c>
   83d1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83d1e:	bf18      	it	ne
   83d20:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83d24:	d029      	beq.n	83d7a <__adddf3+0x24e>
   83d26:	ea94 0f05 	teq	r4, r5
   83d2a:	bf08      	it	eq
   83d2c:	ea90 0f02 	teqeq	r0, r2
   83d30:	d005      	beq.n	83d3e <__adddf3+0x212>
   83d32:	ea54 0c00 	orrs.w	ip, r4, r0
   83d36:	bf04      	itt	eq
   83d38:	4619      	moveq	r1, r3
   83d3a:	4610      	moveq	r0, r2
   83d3c:	bd30      	pop	{r4, r5, pc}
   83d3e:	ea91 0f03 	teq	r1, r3
   83d42:	bf1e      	ittt	ne
   83d44:	2100      	movne	r1, #0
   83d46:	2000      	movne	r0, #0
   83d48:	bd30      	popne	{r4, r5, pc}
   83d4a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   83d4e:	d105      	bne.n	83d5c <__adddf3+0x230>
   83d50:	0040      	lsls	r0, r0, #1
   83d52:	4149      	adcs	r1, r1
   83d54:	bf28      	it	cs
   83d56:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   83d5a:	bd30      	pop	{r4, r5, pc}
   83d5c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   83d60:	bf3c      	itt	cc
   83d62:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   83d66:	bd30      	popcc	{r4, r5, pc}
   83d68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83d6c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   83d70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83d74:	f04f 0000 	mov.w	r0, #0
   83d78:	bd30      	pop	{r4, r5, pc}
   83d7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83d7e:	bf1a      	itte	ne
   83d80:	4619      	movne	r1, r3
   83d82:	4610      	movne	r0, r2
   83d84:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   83d88:	bf1c      	itt	ne
   83d8a:	460b      	movne	r3, r1
   83d8c:	4602      	movne	r2, r0
   83d8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   83d92:	bf06      	itte	eq
   83d94:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   83d98:	ea91 0f03 	teqeq	r1, r3
   83d9c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   83da0:	bd30      	pop	{r4, r5, pc}
   83da2:	bf00      	nop

00083da4 <__aeabi_ui2d>:
   83da4:	f090 0f00 	teq	r0, #0
   83da8:	bf04      	itt	eq
   83daa:	2100      	moveq	r1, #0
   83dac:	4770      	bxeq	lr
   83dae:	b530      	push	{r4, r5, lr}
   83db0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83db4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83db8:	f04f 0500 	mov.w	r5, #0
   83dbc:	f04f 0100 	mov.w	r1, #0
   83dc0:	e750      	b.n	83c64 <__adddf3+0x138>
   83dc2:	bf00      	nop

00083dc4 <__aeabi_i2d>:
   83dc4:	f090 0f00 	teq	r0, #0
   83dc8:	bf04      	itt	eq
   83dca:	2100      	moveq	r1, #0
   83dcc:	4770      	bxeq	lr
   83dce:	b530      	push	{r4, r5, lr}
   83dd0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83dd4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83dd8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   83ddc:	bf48      	it	mi
   83dde:	4240      	negmi	r0, r0
   83de0:	f04f 0100 	mov.w	r1, #0
   83de4:	e73e      	b.n	83c64 <__adddf3+0x138>
   83de6:	bf00      	nop

00083de8 <__aeabi_f2d>:
   83de8:	0042      	lsls	r2, r0, #1
   83dea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   83dee:	ea4f 0131 	mov.w	r1, r1, rrx
   83df2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   83df6:	bf1f      	itttt	ne
   83df8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   83dfc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83e00:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   83e04:	4770      	bxne	lr
   83e06:	f092 0f00 	teq	r2, #0
   83e0a:	bf14      	ite	ne
   83e0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83e10:	4770      	bxeq	lr
   83e12:	b530      	push	{r4, r5, lr}
   83e14:	f44f 7460 	mov.w	r4, #896	; 0x380
   83e18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83e1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83e20:	e720      	b.n	83c64 <__adddf3+0x138>
   83e22:	bf00      	nop

00083e24 <__aeabi_ul2d>:
   83e24:	ea50 0201 	orrs.w	r2, r0, r1
   83e28:	bf08      	it	eq
   83e2a:	4770      	bxeq	lr
   83e2c:	b530      	push	{r4, r5, lr}
   83e2e:	f04f 0500 	mov.w	r5, #0
   83e32:	e00a      	b.n	83e4a <__aeabi_l2d+0x16>

00083e34 <__aeabi_l2d>:
   83e34:	ea50 0201 	orrs.w	r2, r0, r1
   83e38:	bf08      	it	eq
   83e3a:	4770      	bxeq	lr
   83e3c:	b530      	push	{r4, r5, lr}
   83e3e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   83e42:	d502      	bpl.n	83e4a <__aeabi_l2d+0x16>
   83e44:	4240      	negs	r0, r0
   83e46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83e4a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83e4e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83e52:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   83e56:	f43f aedc 	beq.w	83c12 <__adddf3+0xe6>
   83e5a:	f04f 0203 	mov.w	r2, #3
   83e5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83e62:	bf18      	it	ne
   83e64:	3203      	addne	r2, #3
   83e66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83e6a:	bf18      	it	ne
   83e6c:	3203      	addne	r2, #3
   83e6e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   83e72:	f1c2 0320 	rsb	r3, r2, #32
   83e76:	fa00 fc03 	lsl.w	ip, r0, r3
   83e7a:	fa20 f002 	lsr.w	r0, r0, r2
   83e7e:	fa01 fe03 	lsl.w	lr, r1, r3
   83e82:	ea40 000e 	orr.w	r0, r0, lr
   83e86:	fa21 f102 	lsr.w	r1, r1, r2
   83e8a:	4414      	add	r4, r2
   83e8c:	e6c1      	b.n	83c12 <__adddf3+0xe6>
   83e8e:	bf00      	nop

00083e90 <__aeabi_dmul>:
   83e90:	b570      	push	{r4, r5, r6, lr}
   83e92:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83e96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   83e9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   83e9e:	bf1d      	ittte	ne
   83ea0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83ea4:	ea94 0f0c 	teqne	r4, ip
   83ea8:	ea95 0f0c 	teqne	r5, ip
   83eac:	f000 f8de 	bleq	8406c <__aeabi_dmul+0x1dc>
   83eb0:	442c      	add	r4, r5
   83eb2:	ea81 0603 	eor.w	r6, r1, r3
   83eb6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   83eba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   83ebe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   83ec2:	bf18      	it	ne
   83ec4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   83ec8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83ecc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83ed0:	d038      	beq.n	83f44 <__aeabi_dmul+0xb4>
   83ed2:	fba0 ce02 	umull	ip, lr, r0, r2
   83ed6:	f04f 0500 	mov.w	r5, #0
   83eda:	fbe1 e502 	umlal	lr, r5, r1, r2
   83ede:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   83ee2:	fbe0 e503 	umlal	lr, r5, r0, r3
   83ee6:	f04f 0600 	mov.w	r6, #0
   83eea:	fbe1 5603 	umlal	r5, r6, r1, r3
   83eee:	f09c 0f00 	teq	ip, #0
   83ef2:	bf18      	it	ne
   83ef4:	f04e 0e01 	orrne.w	lr, lr, #1
   83ef8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   83efc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   83f00:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   83f04:	d204      	bcs.n	83f10 <__aeabi_dmul+0x80>
   83f06:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   83f0a:	416d      	adcs	r5, r5
   83f0c:	eb46 0606 	adc.w	r6, r6, r6
   83f10:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   83f14:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   83f18:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   83f1c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   83f20:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   83f24:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83f28:	bf88      	it	hi
   83f2a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83f2e:	d81e      	bhi.n	83f6e <__aeabi_dmul+0xde>
   83f30:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   83f34:	bf08      	it	eq
   83f36:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   83f3a:	f150 0000 	adcs.w	r0, r0, #0
   83f3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83f42:	bd70      	pop	{r4, r5, r6, pc}
   83f44:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   83f48:	ea46 0101 	orr.w	r1, r6, r1
   83f4c:	ea40 0002 	orr.w	r0, r0, r2
   83f50:	ea81 0103 	eor.w	r1, r1, r3
   83f54:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   83f58:	bfc2      	ittt	gt
   83f5a:	ebd4 050c 	rsbsgt	r5, r4, ip
   83f5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   83f62:	bd70      	popgt	{r4, r5, r6, pc}
   83f64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83f68:	f04f 0e00 	mov.w	lr, #0
   83f6c:	3c01      	subs	r4, #1
   83f6e:	f300 80ab 	bgt.w	840c8 <__aeabi_dmul+0x238>
   83f72:	f114 0f36 	cmn.w	r4, #54	; 0x36
   83f76:	bfde      	ittt	le
   83f78:	2000      	movle	r0, #0
   83f7a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   83f7e:	bd70      	pople	{r4, r5, r6, pc}
   83f80:	f1c4 0400 	rsb	r4, r4, #0
   83f84:	3c20      	subs	r4, #32
   83f86:	da35      	bge.n	83ff4 <__aeabi_dmul+0x164>
   83f88:	340c      	adds	r4, #12
   83f8a:	dc1b      	bgt.n	83fc4 <__aeabi_dmul+0x134>
   83f8c:	f104 0414 	add.w	r4, r4, #20
   83f90:	f1c4 0520 	rsb	r5, r4, #32
   83f94:	fa00 f305 	lsl.w	r3, r0, r5
   83f98:	fa20 f004 	lsr.w	r0, r0, r4
   83f9c:	fa01 f205 	lsl.w	r2, r1, r5
   83fa0:	ea40 0002 	orr.w	r0, r0, r2
   83fa4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   83fa8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83fac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   83fb0:	fa21 f604 	lsr.w	r6, r1, r4
   83fb4:	eb42 0106 	adc.w	r1, r2, r6
   83fb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83fbc:	bf08      	it	eq
   83fbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83fc2:	bd70      	pop	{r4, r5, r6, pc}
   83fc4:	f1c4 040c 	rsb	r4, r4, #12
   83fc8:	f1c4 0520 	rsb	r5, r4, #32
   83fcc:	fa00 f304 	lsl.w	r3, r0, r4
   83fd0:	fa20 f005 	lsr.w	r0, r0, r5
   83fd4:	fa01 f204 	lsl.w	r2, r1, r4
   83fd8:	ea40 0002 	orr.w	r0, r0, r2
   83fdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83fe0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   83fe4:	f141 0100 	adc.w	r1, r1, #0
   83fe8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83fec:	bf08      	it	eq
   83fee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83ff2:	bd70      	pop	{r4, r5, r6, pc}
   83ff4:	f1c4 0520 	rsb	r5, r4, #32
   83ff8:	fa00 f205 	lsl.w	r2, r0, r5
   83ffc:	ea4e 0e02 	orr.w	lr, lr, r2
   84000:	fa20 f304 	lsr.w	r3, r0, r4
   84004:	fa01 f205 	lsl.w	r2, r1, r5
   84008:	ea43 0302 	orr.w	r3, r3, r2
   8400c:	fa21 f004 	lsr.w	r0, r1, r4
   84010:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84014:	fa21 f204 	lsr.w	r2, r1, r4
   84018:	ea20 0002 	bic.w	r0, r0, r2
   8401c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   84020:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   84024:	bf08      	it	eq
   84026:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8402a:	bd70      	pop	{r4, r5, r6, pc}
   8402c:	f094 0f00 	teq	r4, #0
   84030:	d10f      	bne.n	84052 <__aeabi_dmul+0x1c2>
   84032:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   84036:	0040      	lsls	r0, r0, #1
   84038:	eb41 0101 	adc.w	r1, r1, r1
   8403c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84040:	bf08      	it	eq
   84042:	3c01      	subeq	r4, #1
   84044:	d0f7      	beq.n	84036 <__aeabi_dmul+0x1a6>
   84046:	ea41 0106 	orr.w	r1, r1, r6
   8404a:	f095 0f00 	teq	r5, #0
   8404e:	bf18      	it	ne
   84050:	4770      	bxne	lr
   84052:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   84056:	0052      	lsls	r2, r2, #1
   84058:	eb43 0303 	adc.w	r3, r3, r3
   8405c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   84060:	bf08      	it	eq
   84062:	3d01      	subeq	r5, #1
   84064:	d0f7      	beq.n	84056 <__aeabi_dmul+0x1c6>
   84066:	ea43 0306 	orr.w	r3, r3, r6
   8406a:	4770      	bx	lr
   8406c:	ea94 0f0c 	teq	r4, ip
   84070:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   84074:	bf18      	it	ne
   84076:	ea95 0f0c 	teqne	r5, ip
   8407a:	d00c      	beq.n	84096 <__aeabi_dmul+0x206>
   8407c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   84080:	bf18      	it	ne
   84082:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   84086:	d1d1      	bne.n	8402c <__aeabi_dmul+0x19c>
   84088:	ea81 0103 	eor.w	r1, r1, r3
   8408c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84090:	f04f 0000 	mov.w	r0, #0
   84094:	bd70      	pop	{r4, r5, r6, pc}
   84096:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8409a:	bf06      	itte	eq
   8409c:	4610      	moveq	r0, r2
   8409e:	4619      	moveq	r1, r3
   840a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   840a4:	d019      	beq.n	840da <__aeabi_dmul+0x24a>
   840a6:	ea94 0f0c 	teq	r4, ip
   840aa:	d102      	bne.n	840b2 <__aeabi_dmul+0x222>
   840ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   840b0:	d113      	bne.n	840da <__aeabi_dmul+0x24a>
   840b2:	ea95 0f0c 	teq	r5, ip
   840b6:	d105      	bne.n	840c4 <__aeabi_dmul+0x234>
   840b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   840bc:	bf1c      	itt	ne
   840be:	4610      	movne	r0, r2
   840c0:	4619      	movne	r1, r3
   840c2:	d10a      	bne.n	840da <__aeabi_dmul+0x24a>
   840c4:	ea81 0103 	eor.w	r1, r1, r3
   840c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   840cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   840d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   840d4:	f04f 0000 	mov.w	r0, #0
   840d8:	bd70      	pop	{r4, r5, r6, pc}
   840da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   840de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   840e2:	bd70      	pop	{r4, r5, r6, pc}

000840e4 <__aeabi_ddiv>:
   840e4:	b570      	push	{r4, r5, r6, lr}
   840e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   840ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   840ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   840f2:	bf1d      	ittte	ne
   840f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   840f8:	ea94 0f0c 	teqne	r4, ip
   840fc:	ea95 0f0c 	teqne	r5, ip
   84100:	f000 f8a7 	bleq	84252 <__aeabi_ddiv+0x16e>
   84104:	eba4 0405 	sub.w	r4, r4, r5
   84108:	ea81 0e03 	eor.w	lr, r1, r3
   8410c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   84110:	ea4f 3101 	mov.w	r1, r1, lsl #12
   84114:	f000 8088 	beq.w	84228 <__aeabi_ddiv+0x144>
   84118:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8411c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   84120:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   84124:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   84128:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8412c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   84130:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   84134:	ea4f 2600 	mov.w	r6, r0, lsl #8
   84138:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8413c:	429d      	cmp	r5, r3
   8413e:	bf08      	it	eq
   84140:	4296      	cmpeq	r6, r2
   84142:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   84146:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8414a:	d202      	bcs.n	84152 <__aeabi_ddiv+0x6e>
   8414c:	085b      	lsrs	r3, r3, #1
   8414e:	ea4f 0232 	mov.w	r2, r2, rrx
   84152:	1ab6      	subs	r6, r6, r2
   84154:	eb65 0503 	sbc.w	r5, r5, r3
   84158:	085b      	lsrs	r3, r3, #1
   8415a:	ea4f 0232 	mov.w	r2, r2, rrx
   8415e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   84162:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   84166:	ebb6 0e02 	subs.w	lr, r6, r2
   8416a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8416e:	bf22      	ittt	cs
   84170:	1ab6      	subcs	r6, r6, r2
   84172:	4675      	movcs	r5, lr
   84174:	ea40 000c 	orrcs.w	r0, r0, ip
   84178:	085b      	lsrs	r3, r3, #1
   8417a:	ea4f 0232 	mov.w	r2, r2, rrx
   8417e:	ebb6 0e02 	subs.w	lr, r6, r2
   84182:	eb75 0e03 	sbcs.w	lr, r5, r3
   84186:	bf22      	ittt	cs
   84188:	1ab6      	subcs	r6, r6, r2
   8418a:	4675      	movcs	r5, lr
   8418c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   84190:	085b      	lsrs	r3, r3, #1
   84192:	ea4f 0232 	mov.w	r2, r2, rrx
   84196:	ebb6 0e02 	subs.w	lr, r6, r2
   8419a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8419e:	bf22      	ittt	cs
   841a0:	1ab6      	subcs	r6, r6, r2
   841a2:	4675      	movcs	r5, lr
   841a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   841a8:	085b      	lsrs	r3, r3, #1
   841aa:	ea4f 0232 	mov.w	r2, r2, rrx
   841ae:	ebb6 0e02 	subs.w	lr, r6, r2
   841b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   841b6:	bf22      	ittt	cs
   841b8:	1ab6      	subcs	r6, r6, r2
   841ba:	4675      	movcs	r5, lr
   841bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   841c0:	ea55 0e06 	orrs.w	lr, r5, r6
   841c4:	d018      	beq.n	841f8 <__aeabi_ddiv+0x114>
   841c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   841ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   841ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
   841d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   841d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   841da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   841de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   841e2:	d1c0      	bne.n	84166 <__aeabi_ddiv+0x82>
   841e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   841e8:	d10b      	bne.n	84202 <__aeabi_ddiv+0x11e>
   841ea:	ea41 0100 	orr.w	r1, r1, r0
   841ee:	f04f 0000 	mov.w	r0, #0
   841f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   841f6:	e7b6      	b.n	84166 <__aeabi_ddiv+0x82>
   841f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   841fc:	bf04      	itt	eq
   841fe:	4301      	orreq	r1, r0
   84200:	2000      	moveq	r0, #0
   84202:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   84206:	bf88      	it	hi
   84208:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8420c:	f63f aeaf 	bhi.w	83f6e <__aeabi_dmul+0xde>
   84210:	ebb5 0c03 	subs.w	ip, r5, r3
   84214:	bf04      	itt	eq
   84216:	ebb6 0c02 	subseq.w	ip, r6, r2
   8421a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8421e:	f150 0000 	adcs.w	r0, r0, #0
   84222:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84226:	bd70      	pop	{r4, r5, r6, pc}
   84228:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8422c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   84230:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   84234:	bfc2      	ittt	gt
   84236:	ebd4 050c 	rsbsgt	r5, r4, ip
   8423a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8423e:	bd70      	popgt	{r4, r5, r6, pc}
   84240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84244:	f04f 0e00 	mov.w	lr, #0
   84248:	3c01      	subs	r4, #1
   8424a:	e690      	b.n	83f6e <__aeabi_dmul+0xde>
   8424c:	ea45 0e06 	orr.w	lr, r5, r6
   84250:	e68d      	b.n	83f6e <__aeabi_dmul+0xde>
   84252:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   84256:	ea94 0f0c 	teq	r4, ip
   8425a:	bf08      	it	eq
   8425c:	ea95 0f0c 	teqeq	r5, ip
   84260:	f43f af3b 	beq.w	840da <__aeabi_dmul+0x24a>
   84264:	ea94 0f0c 	teq	r4, ip
   84268:	d10a      	bne.n	84280 <__aeabi_ddiv+0x19c>
   8426a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8426e:	f47f af34 	bne.w	840da <__aeabi_dmul+0x24a>
   84272:	ea95 0f0c 	teq	r5, ip
   84276:	f47f af25 	bne.w	840c4 <__aeabi_dmul+0x234>
   8427a:	4610      	mov	r0, r2
   8427c:	4619      	mov	r1, r3
   8427e:	e72c      	b.n	840da <__aeabi_dmul+0x24a>
   84280:	ea95 0f0c 	teq	r5, ip
   84284:	d106      	bne.n	84294 <__aeabi_ddiv+0x1b0>
   84286:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8428a:	f43f aefd 	beq.w	84088 <__aeabi_dmul+0x1f8>
   8428e:	4610      	mov	r0, r2
   84290:	4619      	mov	r1, r3
   84292:	e722      	b.n	840da <__aeabi_dmul+0x24a>
   84294:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   84298:	bf18      	it	ne
   8429a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8429e:	f47f aec5 	bne.w	8402c <__aeabi_dmul+0x19c>
   842a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   842a6:	f47f af0d 	bne.w	840c4 <__aeabi_dmul+0x234>
   842aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   842ae:	f47f aeeb 	bne.w	84088 <__aeabi_dmul+0x1f8>
   842b2:	e712      	b.n	840da <__aeabi_dmul+0x24a>

000842b4 <__aeabi_d2iz>:
   842b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   842b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   842bc:	d215      	bcs.n	842ea <__aeabi_d2iz+0x36>
   842be:	d511      	bpl.n	842e4 <__aeabi_d2iz+0x30>
   842c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   842c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   842c8:	d912      	bls.n	842f0 <__aeabi_d2iz+0x3c>
   842ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   842ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   842d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   842d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   842da:	fa23 f002 	lsr.w	r0, r3, r2
   842de:	bf18      	it	ne
   842e0:	4240      	negne	r0, r0
   842e2:	4770      	bx	lr
   842e4:	f04f 0000 	mov.w	r0, #0
   842e8:	4770      	bx	lr
   842ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   842ee:	d105      	bne.n	842fc <__aeabi_d2iz+0x48>
   842f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   842f4:	bf08      	it	eq
   842f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   842fa:	4770      	bx	lr
   842fc:	f04f 0000 	mov.w	r0, #0
   84300:	4770      	bx	lr
   84302:	bf00      	nop

00084304 <__register_exitproc>:
   84304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84308:	4698      	mov	r8, r3
   8430a:	4b23      	ldr	r3, [pc, #140]	; (84398 <__register_exitproc+0x94>)
   8430c:	4606      	mov	r6, r0
   8430e:	681c      	ldr	r4, [r3, #0]
   84310:	460f      	mov	r7, r1
   84312:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   84316:	4691      	mov	r9, r2
   84318:	b918      	cbnz	r0, 84322 <__register_exitproc+0x1e>
   8431a:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   8431e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   84322:	6841      	ldr	r1, [r0, #4]
   84324:	291f      	cmp	r1, #31
   84326:	dd16      	ble.n	84356 <__register_exitproc+0x52>
   84328:	481c      	ldr	r0, [pc, #112]	; (8439c <__register_exitproc+0x98>)
   8432a:	b918      	cbnz	r0, 84334 <__register_exitproc+0x30>
   8432c:	f04f 30ff 	mov.w	r0, #4294967295
   84330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84334:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84338:	f001 fbc0 	bl	85abc <malloc>
   8433c:	2800      	cmp	r0, #0
   8433e:	d0f5      	beq.n	8432c <__register_exitproc+0x28>
   84340:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   84344:	2500      	movs	r5, #0
   84346:	6045      	str	r5, [r0, #4]
   84348:	6002      	str	r2, [r0, #0]
   8434a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   8434e:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   84352:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   84356:	b1b6      	cbz	r6, 84386 <__register_exitproc+0x82>
   84358:	6844      	ldr	r4, [r0, #4]
   8435a:	2201      	movs	r2, #1
   8435c:	fa02 f204 	lsl.w	r2, r2, r4
   84360:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   84364:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   84368:	4311      	orrs	r1, r2
   8436a:	2e02      	cmp	r6, #2
   8436c:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   84370:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   84374:	461c      	mov	r4, r3
   84376:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   8437a:	d104      	bne.n	84386 <__register_exitproc+0x82>
   8437c:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   84380:	431a      	orrs	r2, r3
   84382:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   84386:	6841      	ldr	r1, [r0, #4]
   84388:	1c8b      	adds	r3, r1, #2
   8438a:	1c4a      	adds	r2, r1, #1
   8438c:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   84390:	6042      	str	r2, [r0, #4]
   84392:	2000      	movs	r0, #0
   84394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84398:	00086bd4 	.word	0x00086bd4
   8439c:	00085abd 	.word	0x00085abd

000843a0 <__libc_fini_array>:
   843a0:	b570      	push	{r4, r5, r6, lr}
   843a2:	4b08      	ldr	r3, [pc, #32]	; (843c4 <__libc_fini_array+0x24>)
   843a4:	4c08      	ldr	r4, [pc, #32]	; (843c8 <__libc_fini_array+0x28>)
   843a6:	2500      	movs	r5, #0
   843a8:	1ae0      	subs	r0, r4, r3
   843aa:	1084      	asrs	r4, r0, #2
   843ac:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   843b0:	3d04      	subs	r5, #4
   843b2:	b11c      	cbz	r4, 843bc <__libc_fini_array+0x1c>
   843b4:	5972      	ldr	r2, [r6, r5]
   843b6:	4790      	blx	r2
   843b8:	3c01      	subs	r4, #1
   843ba:	e7f9      	b.n	843b0 <__libc_fini_array+0x10>
   843bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   843c0:	f002 bc3a 	b.w	86c38 <_fini>
   843c4:	00086c44 	.word	0x00086c44
   843c8:	00086c48 	.word	0x00086c48

000843cc <__libc_init_array>:
   843cc:	b538      	push	{r3, r4, r5, lr}
   843ce:	4d0e      	ldr	r5, [pc, #56]	; (84408 <__libc_init_array+0x3c>)
   843d0:	4b0e      	ldr	r3, [pc, #56]	; (8440c <__libc_init_array+0x40>)
   843d2:	2400      	movs	r4, #0
   843d4:	1ae8      	subs	r0, r5, r3
   843d6:	1085      	asrs	r5, r0, #2
   843d8:	42ac      	cmp	r4, r5
   843da:	d005      	beq.n	843e8 <__libc_init_array+0x1c>
   843dc:	490b      	ldr	r1, [pc, #44]	; (8440c <__libc_init_array+0x40>)
   843de:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   843e2:	4790      	blx	r2
   843e4:	3401      	adds	r4, #1
   843e6:	e7f7      	b.n	843d8 <__libc_init_array+0xc>
   843e8:	f002 fc1c 	bl	86c24 <_init>
   843ec:	4908      	ldr	r1, [pc, #32]	; (84410 <__libc_init_array+0x44>)
   843ee:	4a09      	ldr	r2, [pc, #36]	; (84414 <__libc_init_array+0x48>)
   843f0:	1a54      	subs	r4, r2, r1
   843f2:	10a5      	asrs	r5, r4, #2
   843f4:	2400      	movs	r4, #0
   843f6:	42ac      	cmp	r4, r5
   843f8:	d005      	beq.n	84406 <__libc_init_array+0x3a>
   843fa:	4b05      	ldr	r3, [pc, #20]	; (84410 <__libc_init_array+0x44>)
   843fc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   84400:	4780      	blx	r0
   84402:	3401      	adds	r4, #1
   84404:	e7f7      	b.n	843f6 <__libc_init_array+0x2a>
   84406:	bd38      	pop	{r3, r4, r5, pc}
   84408:	00086c30 	.word	0x00086c30
   8440c:	00086c30 	.word	0x00086c30
   84410:	00086c30 	.word	0x00086c30
   84414:	00086c38 	.word	0x00086c38

00084418 <iprintf>:
   84418:	b40f      	push	{r0, r1, r2, r3}
   8441a:	b507      	push	{r0, r1, r2, lr}
   8441c:	4906      	ldr	r1, [pc, #24]	; (84438 <iprintf+0x20>)
   8441e:	ab04      	add	r3, sp, #16
   84420:	6808      	ldr	r0, [r1, #0]
   84422:	f853 2b04 	ldr.w	r2, [r3], #4
   84426:	6881      	ldr	r1, [r0, #8]
   84428:	9301      	str	r3, [sp, #4]
   8442a:	f000 f8f7 	bl	8461c <_vfiprintf_r>
   8442e:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
   84432:	b004      	add	sp, #16
   84434:	4770      	bx	lr
   84436:	bf00      	nop
   84438:	20070010 	.word	0x20070010

0008443c <_iprintf_r>:
   8443c:	b40e      	push	{r1, r2, r3}
   8443e:	b503      	push	{r0, r1, lr}
   84440:	ab03      	add	r3, sp, #12
   84442:	f853 2b04 	ldr.w	r2, [r3], #4
   84446:	6881      	ldr	r1, [r0, #8]
   84448:	9301      	str	r3, [sp, #4]
   8444a:	f000 f8e7 	bl	8461c <_vfiprintf_r>
   8444e:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
   84452:	b003      	add	sp, #12
   84454:	4770      	bx	lr
   84456:	bf00      	nop

00084458 <memcpy>:
   84458:	b510      	push	{r4, lr}
   8445a:	2300      	movs	r3, #0
   8445c:	4293      	cmp	r3, r2
   8445e:	d003      	beq.n	84468 <memcpy+0x10>
   84460:	5ccc      	ldrb	r4, [r1, r3]
   84462:	54c4      	strb	r4, [r0, r3]
   84464:	3301      	adds	r3, #1
   84466:	e7f9      	b.n	8445c <memcpy+0x4>
   84468:	bd10      	pop	{r4, pc}

0008446a <memset>:
   8446a:	1882      	adds	r2, r0, r2
   8446c:	4603      	mov	r3, r0
   8446e:	4293      	cmp	r3, r2
   84470:	d002      	beq.n	84478 <memset+0xe>
   84472:	f803 1b01 	strb.w	r1, [r3], #1
   84476:	e7fa      	b.n	8446e <memset+0x4>
   84478:	4770      	bx	lr

0008447a <setbuf>:
   8447a:	2900      	cmp	r1, #0
   8447c:	bf0c      	ite	eq
   8447e:	2202      	moveq	r2, #2
   84480:	2200      	movne	r2, #0
   84482:	f44f 6380 	mov.w	r3, #1024	; 0x400
   84486:	f000 b801 	b.w	8448c <setvbuf>
	...

0008448c <setvbuf>:
   8448c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84490:	461d      	mov	r5, r3
   84492:	4b37      	ldr	r3, [pc, #220]	; (84570 <setvbuf+0xe4>)
   84494:	4604      	mov	r4, r0
   84496:	6818      	ldr	r0, [r3, #0]
   84498:	460e      	mov	r6, r1
   8449a:	4617      	mov	r7, r2
   8449c:	4698      	mov	r8, r3
   8449e:	b118      	cbz	r0, 844a8 <setvbuf+0x1c>
   844a0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   844a2:	b90a      	cbnz	r2, 844a8 <setvbuf+0x1c>
   844a4:	f000 fec8 	bl	85238 <__sinit>
   844a8:	2f02      	cmp	r7, #2
   844aa:	d85d      	bhi.n	84568 <setvbuf+0xdc>
   844ac:	2d00      	cmp	r5, #0
   844ae:	db5b      	blt.n	84568 <setvbuf+0xdc>
   844b0:	4621      	mov	r1, r4
   844b2:	f8d8 0000 	ldr.w	r0, [r8]
   844b6:	f000 fdcd 	bl	85054 <_fflush_r>
   844ba:	89a1      	ldrh	r1, [r4, #12]
   844bc:	2000      	movs	r0, #0
   844be:	f001 0380 	and.w	r3, r1, #128	; 0x80
   844c2:	b21a      	sxth	r2, r3
   844c4:	6060      	str	r0, [r4, #4]
   844c6:	61a0      	str	r0, [r4, #24]
   844c8:	b122      	cbz	r2, 844d4 <setvbuf+0x48>
   844ca:	4829      	ldr	r0, [pc, #164]	; (84570 <setvbuf+0xe4>)
   844cc:	6921      	ldr	r1, [r4, #16]
   844ce:	6800      	ldr	r0, [r0, #0]
   844d0:	f000 fff0 	bl	854b4 <_free_r>
   844d4:	89a1      	ldrh	r1, [r4, #12]
   844d6:	2f02      	cmp	r7, #2
   844d8:	f021 0383 	bic.w	r3, r1, #131	; 0x83
   844dc:	81a3      	strh	r3, [r4, #12]
   844de:	d012      	beq.n	84506 <setvbuf+0x7a>
   844e0:	bb36      	cbnz	r6, 84530 <setvbuf+0xa4>
   844e2:	2d00      	cmp	r5, #0
   844e4:	bf08      	it	eq
   844e6:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   844ea:	4628      	mov	r0, r5
   844ec:	f001 fae6 	bl	85abc <malloc>
   844f0:	4606      	mov	r6, r0
   844f2:	b9c8      	cbnz	r0, 84528 <setvbuf+0x9c>
   844f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   844f8:	f001 fae0 	bl	85abc <malloc>
   844fc:	4606      	mov	r6, r0
   844fe:	b988      	cbnz	r0, 84524 <setvbuf+0x98>
   84500:	f04f 30ff 	mov.w	r0, #4294967295
   84504:	e000      	b.n	84508 <setvbuf+0x7c>
   84506:	2000      	movs	r0, #0
   84508:	89a1      	ldrh	r1, [r4, #12]
   8450a:	2200      	movs	r2, #0
   8450c:	f041 0302 	orr.w	r3, r1, #2
   84510:	81a3      	strh	r3, [r4, #12]
   84512:	f104 0143 	add.w	r1, r4, #67	; 0x43
   84516:	2301      	movs	r3, #1
   84518:	60a2      	str	r2, [r4, #8]
   8451a:	6021      	str	r1, [r4, #0]
   8451c:	6121      	str	r1, [r4, #16]
   8451e:	6163      	str	r3, [r4, #20]
   84520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84524:	f44f 6580 	mov.w	r5, #1024	; 0x400
   84528:	89a2      	ldrh	r2, [r4, #12]
   8452a:	f042 0080 	orr.w	r0, r2, #128	; 0x80
   8452e:	81a0      	strh	r0, [r4, #12]
   84530:	2f01      	cmp	r7, #1
   84532:	d105      	bne.n	84540 <setvbuf+0xb4>
   84534:	89a1      	ldrh	r1, [r4, #12]
   84536:	426a      	negs	r2, r5
   84538:	f041 0301 	orr.w	r3, r1, #1
   8453c:	81a3      	strh	r3, [r4, #12]
   8453e:	61a2      	str	r2, [r4, #24]
   84540:	480b      	ldr	r0, [pc, #44]	; (84570 <setvbuf+0xe4>)
   84542:	89a2      	ldrh	r2, [r4, #12]
   84544:	6801      	ldr	r1, [r0, #0]
   84546:	4b0b      	ldr	r3, [pc, #44]	; (84574 <setvbuf+0xe8>)
   84548:	f002 0008 	and.w	r0, r2, #8
   8454c:	b200      	sxth	r0, r0
   8454e:	63cb      	str	r3, [r1, #60]	; 0x3c
   84550:	6026      	str	r6, [r4, #0]
   84552:	6126      	str	r6, [r4, #16]
   84554:	6165      	str	r5, [r4, #20]
   84556:	b148      	cbz	r0, 8456c <setvbuf+0xe0>
   84558:	f012 0f03 	tst.w	r2, #3
   8455c:	bf18      	it	ne
   8455e:	2500      	movne	r5, #0
   84560:	60a5      	str	r5, [r4, #8]
   84562:	2000      	movs	r0, #0
   84564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84568:	f04f 30ff 	mov.w	r0, #4294967295
   8456c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84570:	20070010 	.word	0x20070010
   84574:	000851ad 	.word	0x000851ad

00084578 <strlen>:
   84578:	4603      	mov	r3, r0
   8457a:	f813 2b01 	ldrb.w	r2, [r3], #1
   8457e:	2a00      	cmp	r2, #0
   84580:	d1fb      	bne.n	8457a <strlen+0x2>
   84582:	1a18      	subs	r0, r3, r0
   84584:	3801      	subs	r0, #1
   84586:	4770      	bx	lr

00084588 <strncpy>:
   84588:	b530      	push	{r4, r5, lr}
   8458a:	3901      	subs	r1, #1
   8458c:	4603      	mov	r3, r0
   8458e:	461c      	mov	r4, r3
   84590:	b13a      	cbz	r2, 845a2 <strncpy+0x1a>
   84592:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   84596:	3a01      	subs	r2, #1
   84598:	f803 5b01 	strb.w	r5, [r3], #1
   8459c:	461c      	mov	r4, r3
   8459e:	2d00      	cmp	r5, #0
   845a0:	d1f5      	bne.n	8458e <strncpy+0x6>
   845a2:	1899      	adds	r1, r3, r2
   845a4:	428c      	cmp	r4, r1
   845a6:	d003      	beq.n	845b0 <strncpy+0x28>
   845a8:	2200      	movs	r2, #0
   845aa:	f804 2b01 	strb.w	r2, [r4], #1
   845ae:	e7f9      	b.n	845a4 <strncpy+0x1c>
   845b0:	bd30      	pop	{r4, r5, pc}
	...

000845b4 <__sprint_r>:
   845b4:	6893      	ldr	r3, [r2, #8]
   845b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   845ba:	4681      	mov	r9, r0
   845bc:	460f      	mov	r7, r1
   845be:	4614      	mov	r4, r2
   845c0:	b91b      	cbnz	r3, 845ca <__sprint_r+0x16>
   845c2:	6053      	str	r3, [r2, #4]
   845c4:	4618      	mov	r0, r3
   845c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   845ca:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   845cc:	049b      	lsls	r3, r3, #18
   845ce:	d51e      	bpl.n	8460e <__sprint_r+0x5a>
   845d0:	6815      	ldr	r5, [r2, #0]
   845d2:	68a0      	ldr	r0, [r4, #8]
   845d4:	3508      	adds	r5, #8
   845d6:	b1c8      	cbz	r0, 8460c <__sprint_r+0x58>
   845d8:	f855 1c04 	ldr.w	r1, [r5, #-4]
   845dc:	f855 ac08 	ldr.w	sl, [r5, #-8]
   845e0:	ea4f 0891 	mov.w	r8, r1, lsr #2
   845e4:	2600      	movs	r6, #0
   845e6:	4546      	cmp	r6, r8
   845e8:	da09      	bge.n	845fe <__sprint_r+0x4a>
   845ea:	4648      	mov	r0, r9
   845ec:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
   845f0:	463a      	mov	r2, r7
   845f2:	f000 fe9d 	bl	85330 <_fputwc_r>
   845f6:	1c43      	adds	r3, r0, #1
   845f8:	d00b      	beq.n	84612 <__sprint_r+0x5e>
   845fa:	3601      	adds	r6, #1
   845fc:	e7f3      	b.n	845e6 <__sprint_r+0x32>
   845fe:	68a2      	ldr	r2, [r4, #8]
   84600:	ea4f 0888 	mov.w	r8, r8, lsl #2
   84604:	ebc8 0302 	rsb	r3, r8, r2
   84608:	60a3      	str	r3, [r4, #8]
   8460a:	e7e2      	b.n	845d2 <__sprint_r+0x1e>
   8460c:	e001      	b.n	84612 <__sprint_r+0x5e>
   8460e:	f001 f807 	bl	85620 <__sfvwrite_r>
   84612:	2100      	movs	r1, #0
   84614:	60a1      	str	r1, [r4, #8]
   84616:	6061      	str	r1, [r4, #4]
   84618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0008461c <_vfiprintf_r>:
   8461c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84620:	4689      	mov	r9, r1
   84622:	b0a9      	sub	sp, #164	; 0xa4
   84624:	4614      	mov	r4, r2
   84626:	461d      	mov	r5, r3
   84628:	461e      	mov	r6, r3
   8462a:	4682      	mov	sl, r0
   8462c:	b118      	cbz	r0, 84636 <_vfiprintf_r+0x1a>
   8462e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84630:	b90b      	cbnz	r3, 84636 <_vfiprintf_r+0x1a>
   84632:	f000 fe01 	bl	85238 <__sinit>
   84636:	f8b9 000c 	ldrh.w	r0, [r9, #12]
   8463a:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
   8463e:	b211      	sxth	r1, r2
   84640:	b949      	cbnz	r1, 84656 <_vfiprintf_r+0x3a>
   84642:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
   84646:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
   8464a:	f8a9 300c 	strh.w	r3, [r9, #12]
   8464e:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   84652:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
   84656:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   8465a:	f001 0308 	and.w	r3, r1, #8
   8465e:	b218      	sxth	r0, r3
   84660:	b148      	cbz	r0, 84676 <_vfiprintf_r+0x5a>
   84662:	f8d9 2010 	ldr.w	r2, [r9, #16]
   84666:	b132      	cbz	r2, 84676 <_vfiprintf_r+0x5a>
   84668:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   8466c:	f001 031a 	and.w	r3, r1, #26
   84670:	2b0a      	cmp	r3, #10
   84672:	d116      	bne.n	846a2 <_vfiprintf_r+0x86>
   84674:	e009      	b.n	8468a <_vfiprintf_r+0x6e>
   84676:	4650      	mov	r0, sl
   84678:	4649      	mov	r1, r9
   8467a:	f000 fc7f 	bl	84f7c <__swsetup_r>
   8467e:	2800      	cmp	r0, #0
   84680:	d0f2      	beq.n	84668 <_vfiprintf_r+0x4c>
   84682:	f04f 32ff 	mov.w	r2, #4294967295
   84686:	9203      	str	r2, [sp, #12]
   84688:	e3d3      	b.n	84e32 <_vfiprintf_r+0x816>
   8468a:	f9b9 000e 	ldrsh.w	r0, [r9, #14]
   8468e:	2800      	cmp	r0, #0
   84690:	db07      	blt.n	846a2 <_vfiprintf_r+0x86>
   84692:	4650      	mov	r0, sl
   84694:	4649      	mov	r1, r9
   84696:	4622      	mov	r2, r4
   84698:	462b      	mov	r3, r5
   8469a:	f000 fbce 	bl	84e3a <__sbprintf>
   8469e:	9003      	str	r0, [sp, #12]
   846a0:	e3c7      	b.n	84e32 <_vfiprintf_r+0x816>
   846a2:	2200      	movs	r2, #0
   846a4:	ad18      	add	r5, sp, #96	; 0x60
   846a6:	950b      	str	r5, [sp, #44]	; 0x2c
   846a8:	920d      	str	r2, [sp, #52]	; 0x34
   846aa:	920c      	str	r2, [sp, #48]	; 0x30
   846ac:	9401      	str	r4, [sp, #4]
   846ae:	9205      	str	r2, [sp, #20]
   846b0:	9203      	str	r2, [sp, #12]
   846b2:	46a8      	mov	r8, r5
   846b4:	9901      	ldr	r1, [sp, #4]
   846b6:	460c      	mov	r4, r1
   846b8:	f811 3b01 	ldrb.w	r3, [r1], #1
   846bc:	b10b      	cbz	r3, 846c2 <_vfiprintf_r+0xa6>
   846be:	2b25      	cmp	r3, #37	; 0x25
   846c0:	d1f9      	bne.n	846b6 <_vfiprintf_r+0x9a>
   846c2:	9a01      	ldr	r2, [sp, #4]
   846c4:	1aa5      	subs	r5, r4, r2
   846c6:	d019      	beq.n	846fc <_vfiprintf_r+0xe0>
   846c8:	990c      	ldr	r1, [sp, #48]	; 0x30
   846ca:	980d      	ldr	r0, [sp, #52]	; 0x34
   846cc:	1c4b      	adds	r3, r1, #1
   846ce:	e888 0024 	stmia.w	r8, {r2, r5}
   846d2:	2b07      	cmp	r3, #7
   846d4:	eb00 0205 	add.w	r2, r0, r5
   846d8:	920d      	str	r2, [sp, #52]	; 0x34
   846da:	f108 0808 	add.w	r8, r8, #8
   846de:	930c      	str	r3, [sp, #48]	; 0x30
   846e0:	dd09      	ble.n	846f6 <_vfiprintf_r+0xda>
   846e2:	4650      	mov	r0, sl
   846e4:	4649      	mov	r1, r9
   846e6:	aa0b      	add	r2, sp, #44	; 0x2c
   846e8:	f7ff ff64 	bl	845b4 <__sprint_r>
   846ec:	2800      	cmp	r0, #0
   846ee:	f040 8398 	bne.w	84e22 <_vfiprintf_r+0x806>
   846f2:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   846f6:	9803      	ldr	r0, [sp, #12]
   846f8:	1942      	adds	r2, r0, r5
   846fa:	9203      	str	r2, [sp, #12]
   846fc:	7821      	ldrb	r1, [r4, #0]
   846fe:	2900      	cmp	r1, #0
   84700:	f000 8388 	beq.w	84e14 <_vfiprintf_r+0x7f8>
   84704:	2200      	movs	r2, #0
   84706:	3401      	adds	r4, #1
   84708:	9401      	str	r4, [sp, #4]
   8470a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8470e:	f04f 3cff 	mov.w	ip, #4294967295
   84712:	9204      	str	r2, [sp, #16]
   84714:	4617      	mov	r7, r2
   84716:	9801      	ldr	r0, [sp, #4]
   84718:	f810 3b01 	ldrb.w	r3, [r0], #1
   8471c:	9001      	str	r0, [sp, #4]
   8471e:	2b63      	cmp	r3, #99	; 0x63
   84720:	f000 80b3 	beq.w	8488a <_vfiprintf_r+0x26e>
   84724:	dc33      	bgt.n	8478e <_vfiprintf_r+0x172>
   84726:	2b39      	cmp	r3, #57	; 0x39
   84728:	dc1a      	bgt.n	84760 <_vfiprintf_r+0x144>
   8472a:	2b31      	cmp	r3, #49	; 0x31
   8472c:	f280 8091 	bge.w	84852 <_vfiprintf_r+0x236>
   84730:	2b2b      	cmp	r3, #43	; 0x2b
   84732:	d101      	bne.n	84738 <_vfiprintf_r+0x11c>
   84734:	461a      	mov	r2, r3
   84736:	e7ee      	b.n	84716 <_vfiprintf_r+0xfa>
   84738:	dc0a      	bgt.n	84750 <_vfiprintf_r+0x134>
   8473a:	2b23      	cmp	r3, #35	; 0x23
   8473c:	d055      	beq.n	847ea <_vfiprintf_r+0x1ce>
   8473e:	2b2a      	cmp	r3, #42	; 0x2a
   84740:	d056      	beq.n	847f0 <_vfiprintf_r+0x1d4>
   84742:	2b20      	cmp	r3, #32
   84744:	f040 81f5 	bne.w	84b32 <_vfiprintf_r+0x516>
   84748:	2a00      	cmp	r2, #0
   8474a:	bf08      	it	eq
   8474c:	2220      	moveq	r2, #32
   8474e:	e7e2      	b.n	84716 <_vfiprintf_r+0xfa>
   84750:	2b2e      	cmp	r3, #46	; 0x2e
   84752:	d058      	beq.n	84806 <_vfiprintf_r+0x1ea>
   84754:	2b30      	cmp	r3, #48	; 0x30
   84756:	d079      	beq.n	8484c <_vfiprintf_r+0x230>
   84758:	2b2d      	cmp	r3, #45	; 0x2d
   8475a:	f040 81ea 	bne.w	84b32 <_vfiprintf_r+0x516>
   8475e:	e04f      	b.n	84800 <_vfiprintf_r+0x1e4>
   84760:	2b4f      	cmp	r3, #79	; 0x4f
   84762:	f000 80de 	beq.w	84922 <_vfiprintf_r+0x306>
   84766:	dc07      	bgt.n	84778 <_vfiprintf_r+0x15c>
   84768:	2b44      	cmp	r3, #68	; 0x44
   8476a:	f040 81e2 	bne.w	84b32 <_vfiprintf_r+0x516>
   8476e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84772:	f047 0710 	orr.w	r7, r7, #16
   84776:	e090      	b.n	8489a <_vfiprintf_r+0x27e>
   84778:	2b55      	cmp	r3, #85	; 0x55
   8477a:	f000 811f 	beq.w	849bc <_vfiprintf_r+0x3a0>
   8477e:	2b58      	cmp	r3, #88	; 0x58
   84780:	f040 81d7 	bne.w	84b32 <_vfiprintf_r+0x516>
   84784:	4dae      	ldr	r5, [pc, #696]	; (84a40 <_vfiprintf_r+0x424>)
   84786:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8478a:	9505      	str	r5, [sp, #20]
   8478c:	e130      	b.n	849f0 <_vfiprintf_r+0x3d4>
   8478e:	2b6f      	cmp	r3, #111	; 0x6f
   84790:	f000 80c9 	beq.w	84926 <_vfiprintf_r+0x30a>
   84794:	dc10      	bgt.n	847b8 <_vfiprintf_r+0x19c>
   84796:	2b69      	cmp	r3, #105	; 0x69
   84798:	d024      	beq.n	847e4 <_vfiprintf_r+0x1c8>
   8479a:	dc07      	bgt.n	847ac <_vfiprintf_r+0x190>
   8479c:	2b64      	cmp	r3, #100	; 0x64
   8479e:	d021      	beq.n	847e4 <_vfiprintf_r+0x1c8>
   847a0:	2b68      	cmp	r3, #104	; 0x68
   847a2:	f040 81c6 	bne.w	84b32 <_vfiprintf_r+0x516>
   847a6:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   847aa:	e7b4      	b.n	84716 <_vfiprintf_r+0xfa>
   847ac:	2b6c      	cmp	r3, #108	; 0x6c
   847ae:	d05f      	beq.n	84870 <_vfiprintf_r+0x254>
   847b0:	2b6e      	cmp	r3, #110	; 0x6e
   847b2:	f040 81be 	bne.w	84b32 <_vfiprintf_r+0x516>
   847b6:	e096      	b.n	848e6 <_vfiprintf_r+0x2ca>
   847b8:	2b73      	cmp	r3, #115	; 0x73
   847ba:	f000 80df 	beq.w	8497c <_vfiprintf_r+0x360>
   847be:	dc06      	bgt.n	847ce <_vfiprintf_r+0x1b2>
   847c0:	2b70      	cmp	r3, #112	; 0x70
   847c2:	f000 80cd 	beq.w	84960 <_vfiprintf_r+0x344>
   847c6:	2b71      	cmp	r3, #113	; 0x71
   847c8:	f040 81b3 	bne.w	84b32 <_vfiprintf_r+0x516>
   847cc:	e05a      	b.n	84884 <_vfiprintf_r+0x268>
   847ce:	2b75      	cmp	r3, #117	; 0x75
   847d0:	f000 80f6 	beq.w	849c0 <_vfiprintf_r+0x3a4>
   847d4:	2b78      	cmp	r3, #120	; 0x78
   847d6:	f040 81ac 	bne.w	84b32 <_vfiprintf_r+0x516>
   847da:	4d9a      	ldr	r5, [pc, #616]	; (84a44 <_vfiprintf_r+0x428>)
   847dc:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   847e0:	9505      	str	r5, [sp, #20]
   847e2:	e105      	b.n	849f0 <_vfiprintf_r+0x3d4>
   847e4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   847e8:	e057      	b.n	8489a <_vfiprintf_r+0x27e>
   847ea:	f047 0701 	orr.w	r7, r7, #1
   847ee:	e792      	b.n	84716 <_vfiprintf_r+0xfa>
   847f0:	1d33      	adds	r3, r6, #4
   847f2:	6836      	ldr	r6, [r6, #0]
   847f4:	2e00      	cmp	r6, #0
   847f6:	9604      	str	r6, [sp, #16]
   847f8:	da15      	bge.n	84826 <_vfiprintf_r+0x20a>
   847fa:	4270      	negs	r0, r6
   847fc:	9004      	str	r0, [sp, #16]
   847fe:	461e      	mov	r6, r3
   84800:	f047 0704 	orr.w	r7, r7, #4
   84804:	e787      	b.n	84716 <_vfiprintf_r+0xfa>
   84806:	9901      	ldr	r1, [sp, #4]
   84808:	f811 3b01 	ldrb.w	r3, [r1], #1
   8480c:	2b2a      	cmp	r3, #42	; 0x2a
   8480e:	9101      	str	r1, [sp, #4]
   84810:	d10b      	bne.n	8482a <_vfiprintf_r+0x20e>
   84812:	f8d6 c000 	ldr.w	ip, [r6]
   84816:	1d33      	adds	r3, r6, #4
   84818:	f1bc 0f00 	cmp.w	ip, #0
   8481c:	da03      	bge.n	84826 <_vfiprintf_r+0x20a>
   8481e:	461e      	mov	r6, r3
   84820:	f04f 3cff 	mov.w	ip, #4294967295
   84824:	e777      	b.n	84716 <_vfiprintf_r+0xfa>
   84826:	461e      	mov	r6, r3
   84828:	e775      	b.n	84716 <_vfiprintf_r+0xfa>
   8482a:	f04f 0c00 	mov.w	ip, #0
   8482e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84832:	2809      	cmp	r0, #9
   84834:	d807      	bhi.n	84846 <_vfiprintf_r+0x22a>
   84836:	9901      	ldr	r1, [sp, #4]
   84838:	230a      	movs	r3, #10
   8483a:	fb03 0c0c 	mla	ip, r3, ip, r0
   8483e:	f811 3b01 	ldrb.w	r3, [r1], #1
   84842:	9101      	str	r1, [sp, #4]
   84844:	e7f3      	b.n	8482e <_vfiprintf_r+0x212>
   84846:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   8484a:	e768      	b.n	8471e <_vfiprintf_r+0x102>
   8484c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   84850:	e761      	b.n	84716 <_vfiprintf_r+0xfa>
   84852:	9801      	ldr	r0, [sp, #4]
   84854:	2100      	movs	r1, #0
   84856:	3b30      	subs	r3, #48	; 0x30
   84858:	240a      	movs	r4, #10
   8485a:	fb04 3101 	mla	r1, r4, r1, r3
   8485e:	f810 3b01 	ldrb.w	r3, [r0], #1
   84862:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   84866:	2c09      	cmp	r4, #9
   84868:	9001      	str	r0, [sp, #4]
   8486a:	d9f4      	bls.n	84856 <_vfiprintf_r+0x23a>
   8486c:	9104      	str	r1, [sp, #16]
   8486e:	e756      	b.n	8471e <_vfiprintf_r+0x102>
   84870:	9901      	ldr	r1, [sp, #4]
   84872:	780b      	ldrb	r3, [r1, #0]
   84874:	2b6c      	cmp	r3, #108	; 0x6c
   84876:	d102      	bne.n	8487e <_vfiprintf_r+0x262>
   84878:	1c48      	adds	r0, r1, #1
   8487a:	9001      	str	r0, [sp, #4]
   8487c:	e002      	b.n	84884 <_vfiprintf_r+0x268>
   8487e:	f047 0710 	orr.w	r7, r7, #16
   84882:	e748      	b.n	84716 <_vfiprintf_r+0xfa>
   84884:	f047 0720 	orr.w	r7, r7, #32
   84888:	e745      	b.n	84716 <_vfiprintf_r+0xfa>
   8488a:	6832      	ldr	r2, [r6, #0]
   8488c:	2500      	movs	r5, #0
   8488e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   84892:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   84896:	3604      	adds	r6, #4
   84898:	e155      	b.n	84b46 <_vfiprintf_r+0x52a>
   8489a:	06ba      	lsls	r2, r7, #26
   8489c:	d507      	bpl.n	848ae <_vfiprintf_r+0x292>
   8489e:	3607      	adds	r6, #7
   848a0:	f026 0507 	bic.w	r5, r6, #7
   848a4:	f105 0608 	add.w	r6, r5, #8
   848a8:	e9d5 4500 	ldrd	r4, r5, [r5]
   848ac:	e00f      	b.n	848ce <_vfiprintf_r+0x2b2>
   848ae:	f017 0f10 	tst.w	r7, #16
   848b2:	f106 0104 	add.w	r1, r6, #4
   848b6:	d001      	beq.n	848bc <_vfiprintf_r+0x2a0>
   848b8:	6832      	ldr	r2, [r6, #0]
   848ba:	e005      	b.n	848c8 <_vfiprintf_r+0x2ac>
   848bc:	f017 0f40 	tst.w	r7, #64	; 0x40
   848c0:	6832      	ldr	r2, [r6, #0]
   848c2:	d001      	beq.n	848c8 <_vfiprintf_r+0x2ac>
   848c4:	b214      	sxth	r4, r2
   848c6:	e000      	b.n	848ca <_vfiprintf_r+0x2ae>
   848c8:	4614      	mov	r4, r2
   848ca:	17e5      	asrs	r5, r4, #31
   848cc:	460e      	mov	r6, r1
   848ce:	2c00      	cmp	r4, #0
   848d0:	f175 0200 	sbcs.w	r2, r5, #0
   848d4:	f280 80b8 	bge.w	84a48 <_vfiprintf_r+0x42c>
   848d8:	232d      	movs	r3, #45	; 0x2d
   848da:	4264      	negs	r4, r4
   848dc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   848e0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   848e4:	e0b0      	b.n	84a48 <_vfiprintf_r+0x42c>
   848e6:	f017 0f20 	tst.w	r7, #32
   848ea:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   848ee:	f106 0204 	add.w	r2, r6, #4
   848f2:	d005      	beq.n	84900 <_vfiprintf_r+0x2e4>
   848f4:	9c03      	ldr	r4, [sp, #12]
   848f6:	6835      	ldr	r5, [r6, #0]
   848f8:	17e0      	asrs	r0, r4, #31
   848fa:	602c      	str	r4, [r5, #0]
   848fc:	6068      	str	r0, [r5, #4]
   848fe:	e004      	b.n	8490a <_vfiprintf_r+0x2ee>
   84900:	06fb      	lsls	r3, r7, #27
   84902:	d504      	bpl.n	8490e <_vfiprintf_r+0x2f2>
   84904:	6833      	ldr	r3, [r6, #0]
   84906:	9903      	ldr	r1, [sp, #12]
   84908:	6019      	str	r1, [r3, #0]
   8490a:	4616      	mov	r6, r2
   8490c:	e6d2      	b.n	846b4 <_vfiprintf_r+0x98>
   8490e:	6830      	ldr	r0, [r6, #0]
   84910:	9c03      	ldr	r4, [sp, #12]
   84912:	f017 0f40 	tst.w	r7, #64	; 0x40
   84916:	f106 0604 	add.w	r6, r6, #4
   8491a:	bf14      	ite	ne
   8491c:	8004      	strhne	r4, [r0, #0]
   8491e:	6004      	streq	r4, [r0, #0]
   84920:	e6c8      	b.n	846b4 <_vfiprintf_r+0x98>
   84922:	f047 0710 	orr.w	r7, r7, #16
   84926:	f017 0020 	ands.w	r0, r7, #32
   8492a:	d008      	beq.n	8493e <_vfiprintf_r+0x322>
   8492c:	1df3      	adds	r3, r6, #7
   8492e:	f023 0507 	bic.w	r5, r3, #7
   84932:	f105 0608 	add.w	r6, r5, #8
   84936:	e9d5 4500 	ldrd	r4, r5, [r5]
   8493a:	2000      	movs	r0, #0
   8493c:	e07c      	b.n	84a38 <_vfiprintf_r+0x41c>
   8493e:	f017 0110 	ands.w	r1, r7, #16
   84942:	f106 0204 	add.w	r2, r6, #4
   84946:	d106      	bne.n	84956 <_vfiprintf_r+0x33a>
   84948:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   8494c:	d003      	beq.n	84956 <_vfiprintf_r+0x33a>
   8494e:	8834      	ldrh	r4, [r6, #0]
   84950:	2500      	movs	r5, #0
   84952:	4616      	mov	r6, r2
   84954:	e7f1      	b.n	8493a <_vfiprintf_r+0x31e>
   84956:	6836      	ldr	r6, [r6, #0]
   84958:	2500      	movs	r5, #0
   8495a:	4634      	mov	r4, r6
   8495c:	4616      	mov	r6, r2
   8495e:	e06b      	b.n	84a38 <_vfiprintf_r+0x41c>
   84960:	4b38      	ldr	r3, [pc, #224]	; (84a44 <_vfiprintf_r+0x428>)
   84962:	2130      	movs	r1, #48	; 0x30
   84964:	2278      	movs	r2, #120	; 0x78
   84966:	6834      	ldr	r4, [r6, #0]
   84968:	2500      	movs	r5, #0
   8496a:	f047 0702 	orr.w	r7, r7, #2
   8496e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   84972:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   84976:	3604      	adds	r6, #4
   84978:	9305      	str	r3, [sp, #20]
   8497a:	e05c      	b.n	84a36 <_vfiprintf_r+0x41a>
   8497c:	4631      	mov	r1, r6
   8497e:	2500      	movs	r5, #0
   84980:	f8d1 b000 	ldr.w	fp, [r1]
   84984:	3604      	adds	r6, #4
   84986:	45ac      	cmp	ip, r5
   84988:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8498c:	4658      	mov	r0, fp
   8498e:	db11      	blt.n	849b4 <_vfiprintf_r+0x398>
   84990:	4662      	mov	r2, ip
   84992:	4629      	mov	r1, r5
   84994:	f8cd c000 	str.w	ip, [sp]
   84998:	f001 faa2 	bl	85ee0 <memchr>
   8499c:	f8dd c000 	ldr.w	ip, [sp]
   849a0:	2800      	cmp	r0, #0
   849a2:	f000 80d4 	beq.w	84b4e <_vfiprintf_r+0x532>
   849a6:	ebcb 0400 	rsb	r4, fp, r0
   849aa:	4564      	cmp	r4, ip
   849ac:	f340 80d1 	ble.w	84b52 <_vfiprintf_r+0x536>
   849b0:	4664      	mov	r4, ip
   849b2:	e0ce      	b.n	84b52 <_vfiprintf_r+0x536>
   849b4:	f7ff fde0 	bl	84578 <strlen>
   849b8:	4604      	mov	r4, r0
   849ba:	e0ca      	b.n	84b52 <_vfiprintf_r+0x536>
   849bc:	f047 0710 	orr.w	r7, r7, #16
   849c0:	06bd      	lsls	r5, r7, #26
   849c2:	d506      	bpl.n	849d2 <_vfiprintf_r+0x3b6>
   849c4:	1df0      	adds	r0, r6, #7
   849c6:	f020 0407 	bic.w	r4, r0, #7
   849ca:	f104 0608 	add.w	r6, r4, #8
   849ce:	cc30      	ldmia	r4, {r4, r5}
   849d0:	e00c      	b.n	849ec <_vfiprintf_r+0x3d0>
   849d2:	f017 0f10 	tst.w	r7, #16
   849d6:	f106 0304 	add.w	r3, r6, #4
   849da:	d103      	bne.n	849e4 <_vfiprintf_r+0x3c8>
   849dc:	067c      	lsls	r4, r7, #25
   849de:	d501      	bpl.n	849e4 <_vfiprintf_r+0x3c8>
   849e0:	8834      	ldrh	r4, [r6, #0]
   849e2:	e001      	b.n	849e8 <_vfiprintf_r+0x3cc>
   849e4:	6835      	ldr	r5, [r6, #0]
   849e6:	462c      	mov	r4, r5
   849e8:	2500      	movs	r5, #0
   849ea:	461e      	mov	r6, r3
   849ec:	2001      	movs	r0, #1
   849ee:	e023      	b.n	84a38 <_vfiprintf_r+0x41c>
   849f0:	06b8      	lsls	r0, r7, #26
   849f2:	d507      	bpl.n	84a04 <_vfiprintf_r+0x3e8>
   849f4:	1df4      	adds	r4, r6, #7
   849f6:	f024 0107 	bic.w	r1, r4, #7
   849fa:	f101 0608 	add.w	r6, r1, #8
   849fe:	e9d1 4500 	ldrd	r4, r5, [r1]
   84a02:	e00c      	b.n	84a1e <_vfiprintf_r+0x402>
   84a04:	f017 0f10 	tst.w	r7, #16
   84a08:	f106 0004 	add.w	r0, r6, #4
   84a0c:	d103      	bne.n	84a16 <_vfiprintf_r+0x3fa>
   84a0e:	0679      	lsls	r1, r7, #25
   84a10:	d501      	bpl.n	84a16 <_vfiprintf_r+0x3fa>
   84a12:	8834      	ldrh	r4, [r6, #0]
   84a14:	e001      	b.n	84a1a <_vfiprintf_r+0x3fe>
   84a16:	6836      	ldr	r6, [r6, #0]
   84a18:	4634      	mov	r4, r6
   84a1a:	2500      	movs	r5, #0
   84a1c:	4606      	mov	r6, r0
   84a1e:	07fa      	lsls	r2, r7, #31
   84a20:	d509      	bpl.n	84a36 <_vfiprintf_r+0x41a>
   84a22:	ea54 0205 	orrs.w	r2, r4, r5
   84a26:	d006      	beq.n	84a36 <_vfiprintf_r+0x41a>
   84a28:	2230      	movs	r2, #48	; 0x30
   84a2a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   84a2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   84a32:	f047 0702 	orr.w	r7, r7, #2
   84a36:	2002      	movs	r0, #2
   84a38:	2100      	movs	r1, #0
   84a3a:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   84a3e:	e004      	b.n	84a4a <_vfiprintf_r+0x42e>
   84a40:	00086bfa 	.word	0x00086bfa
   84a44:	00086c0b 	.word	0x00086c0b
   84a48:	2001      	movs	r0, #1
   84a4a:	f1bc 0f00 	cmp.w	ip, #0
   84a4e:	bfa8      	it	ge
   84a50:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   84a54:	ea54 0105 	orrs.w	r1, r4, r5
   84a58:	d102      	bne.n	84a60 <_vfiprintf_r+0x444>
   84a5a:	f1bc 0f00 	cmp.w	ip, #0
   84a5e:	d058      	beq.n	84b12 <_vfiprintf_r+0x4f6>
   84a60:	2801      	cmp	r0, #1
   84a62:	d01d      	beq.n	84aa0 <_vfiprintf_r+0x484>
   84a64:	2802      	cmp	r0, #2
   84a66:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   84a6a:	d041      	beq.n	84af0 <_vfiprintf_r+0x4d4>
   84a6c:	f004 0207 	and.w	r2, r4, #7
   84a70:	08e4      	lsrs	r4, r4, #3
   84a72:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   84a76:	08e9      	lsrs	r1, r5, #3
   84a78:	4604      	mov	r4, r0
   84a7a:	460d      	mov	r5, r1
   84a7c:	3230      	adds	r2, #48	; 0x30
   84a7e:	ea54 0105 	orrs.w	r1, r4, r5
   84a82:	469b      	mov	fp, r3
   84a84:	701a      	strb	r2, [r3, #0]
   84a86:	f103 33ff 	add.w	r3, r3, #4294967295
   84a8a:	d1ef      	bne.n	84a6c <_vfiprintf_r+0x450>
   84a8c:	07f8      	lsls	r0, r7, #31
   84a8e:	465d      	mov	r5, fp
   84a90:	d54a      	bpl.n	84b28 <_vfiprintf_r+0x50c>
   84a92:	2a30      	cmp	r2, #48	; 0x30
   84a94:	d048      	beq.n	84b28 <_vfiprintf_r+0x50c>
   84a96:	2230      	movs	r2, #48	; 0x30
   84a98:	469b      	mov	fp, r3
   84a9a:	f805 2c01 	strb.w	r2, [r5, #-1]
   84a9e:	e043      	b.n	84b28 <_vfiprintf_r+0x50c>
   84aa0:	2d00      	cmp	r5, #0
   84aa2:	bf08      	it	eq
   84aa4:	2c0a      	cmpeq	r4, #10
   84aa6:	d203      	bcs.n	84ab0 <_vfiprintf_r+0x494>
   84aa8:	3430      	adds	r4, #48	; 0x30
   84aaa:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   84aae:	e036      	b.n	84b1e <_vfiprintf_r+0x502>
   84ab0:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   84ab4:	9302      	str	r3, [sp, #8]
   84ab6:	4620      	mov	r0, r4
   84ab8:	4629      	mov	r1, r5
   84aba:	220a      	movs	r2, #10
   84abc:	2300      	movs	r3, #0
   84abe:	f8cd c000 	str.w	ip, [sp]
   84ac2:	f001 fd0f 	bl	864e4 <__aeabi_uldivmod>
   84ac6:	9802      	ldr	r0, [sp, #8]
   84ac8:	3230      	adds	r2, #48	; 0x30
   84aca:	f800 2901 	strb.w	r2, [r0], #-1
   84ace:	4629      	mov	r1, r5
   84ad0:	220a      	movs	r2, #10
   84ad2:	2300      	movs	r3, #0
   84ad4:	f8dd b008 	ldr.w	fp, [sp, #8]
   84ad8:	9002      	str	r0, [sp, #8]
   84ada:	4620      	mov	r0, r4
   84adc:	f001 fd02 	bl	864e4 <__aeabi_uldivmod>
   84ae0:	4604      	mov	r4, r0
   84ae2:	460d      	mov	r5, r1
   84ae4:	ea54 0105 	orrs.w	r1, r4, r5
   84ae8:	f8dd c000 	ldr.w	ip, [sp]
   84aec:	d1e3      	bne.n	84ab6 <_vfiprintf_r+0x49a>
   84aee:	e01b      	b.n	84b28 <_vfiprintf_r+0x50c>
   84af0:	9905      	ldr	r1, [sp, #20]
   84af2:	f004 000f 	and.w	r0, r4, #15
   84af6:	0924      	lsrs	r4, r4, #4
   84af8:	5c0a      	ldrb	r2, [r1, r0]
   84afa:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   84afe:	0929      	lsrs	r1, r5, #4
   84b00:	4604      	mov	r4, r0
   84b02:	460d      	mov	r5, r1
   84b04:	469b      	mov	fp, r3
   84b06:	f803 2901 	strb.w	r2, [r3], #-1
   84b0a:	ea54 0205 	orrs.w	r2, r4, r5
   84b0e:	d1ef      	bne.n	84af0 <_vfiprintf_r+0x4d4>
   84b10:	e00a      	b.n	84b28 <_vfiprintf_r+0x50c>
   84b12:	b938      	cbnz	r0, 84b24 <_vfiprintf_r+0x508>
   84b14:	07f9      	lsls	r1, r7, #31
   84b16:	d505      	bpl.n	84b24 <_vfiprintf_r+0x508>
   84b18:	2030      	movs	r0, #48	; 0x30
   84b1a:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   84b1e:	f10d 0b5f 	add.w	fp, sp, #95	; 0x5f
   84b22:	e001      	b.n	84b28 <_vfiprintf_r+0x50c>
   84b24:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
   84b28:	ad18      	add	r5, sp, #96	; 0x60
   84b2a:	ebcb 0405 	rsb	r4, fp, r5
   84b2e:	4665      	mov	r5, ip
   84b30:	e00f      	b.n	84b52 <_vfiprintf_r+0x536>
   84b32:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84b36:	2b00      	cmp	r3, #0
   84b38:	f000 816c 	beq.w	84e14 <_vfiprintf_r+0x7f8>
   84b3c:	2500      	movs	r5, #0
   84b3e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   84b42:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   84b46:	2401      	movs	r4, #1
   84b48:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
   84b4c:	e001      	b.n	84b52 <_vfiprintf_r+0x536>
   84b4e:	4664      	mov	r4, ip
   84b50:	4605      	mov	r5, r0
   84b52:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   84b56:	42ac      	cmp	r4, r5
   84b58:	bfac      	ite	ge
   84b5a:	4621      	movge	r1, r4
   84b5c:	4629      	movlt	r1, r5
   84b5e:	9102      	str	r1, [sp, #8]
   84b60:	b113      	cbz	r3, 84b68 <_vfiprintf_r+0x54c>
   84b62:	9802      	ldr	r0, [sp, #8]
   84b64:	1c42      	adds	r2, r0, #1
   84b66:	9202      	str	r2, [sp, #8]
   84b68:	f017 0102 	ands.w	r1, r7, #2
   84b6c:	9106      	str	r1, [sp, #24]
   84b6e:	d002      	beq.n	84b76 <_vfiprintf_r+0x55a>
   84b70:	9b02      	ldr	r3, [sp, #8]
   84b72:	1c98      	adds	r0, r3, #2
   84b74:	9002      	str	r0, [sp, #8]
   84b76:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   84b7a:	9207      	str	r2, [sp, #28]
   84b7c:	d13a      	bne.n	84bf4 <_vfiprintf_r+0x5d8>
   84b7e:	9904      	ldr	r1, [sp, #16]
   84b80:	9b02      	ldr	r3, [sp, #8]
   84b82:	1acb      	subs	r3, r1, r3
   84b84:	2b00      	cmp	r3, #0
   84b86:	dd35      	ble.n	84bf4 <_vfiprintf_r+0x5d8>
   84b88:	48a0      	ldr	r0, [pc, #640]	; (84e0c <_vfiprintf_r+0x7f0>)
   84b8a:	2b10      	cmp	r3, #16
   84b8c:	f8c8 0000 	str.w	r0, [r8]
   84b90:	dd1a      	ble.n	84bc8 <_vfiprintf_r+0x5ac>
   84b92:	990c      	ldr	r1, [sp, #48]	; 0x30
   84b94:	2010      	movs	r0, #16
   84b96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84b98:	f8c8 0004 	str.w	r0, [r8, #4]
   84b9c:	1c48      	adds	r0, r1, #1
   84b9e:	3210      	adds	r2, #16
   84ba0:	2807      	cmp	r0, #7
   84ba2:	920d      	str	r2, [sp, #52]	; 0x34
   84ba4:	f108 0808 	add.w	r8, r8, #8
   84ba8:	900c      	str	r0, [sp, #48]	; 0x30
   84baa:	dd0b      	ble.n	84bc4 <_vfiprintf_r+0x5a8>
   84bac:	4650      	mov	r0, sl
   84bae:	4649      	mov	r1, r9
   84bb0:	aa0b      	add	r2, sp, #44	; 0x2c
   84bb2:	9300      	str	r3, [sp, #0]
   84bb4:	f7ff fcfe 	bl	845b4 <__sprint_r>
   84bb8:	9b00      	ldr	r3, [sp, #0]
   84bba:	2800      	cmp	r0, #0
   84bbc:	f040 8131 	bne.w	84e22 <_vfiprintf_r+0x806>
   84bc0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84bc4:	3b10      	subs	r3, #16
   84bc6:	e7df      	b.n	84b88 <_vfiprintf_r+0x56c>
   84bc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84bca:	f8c8 3004 	str.w	r3, [r8, #4]
   84bce:	18d1      	adds	r1, r2, r3
   84bd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84bd2:	910d      	str	r1, [sp, #52]	; 0x34
   84bd4:	1c58      	adds	r0, r3, #1
   84bd6:	2807      	cmp	r0, #7
   84bd8:	f108 0808 	add.w	r8, r8, #8
   84bdc:	900c      	str	r0, [sp, #48]	; 0x30
   84bde:	dd09      	ble.n	84bf4 <_vfiprintf_r+0x5d8>
   84be0:	4650      	mov	r0, sl
   84be2:	4649      	mov	r1, r9
   84be4:	aa0b      	add	r2, sp, #44	; 0x2c
   84be6:	f7ff fce5 	bl	845b4 <__sprint_r>
   84bea:	2800      	cmp	r0, #0
   84bec:	f040 8119 	bne.w	84e22 <_vfiprintf_r+0x806>
   84bf0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84bf4:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   84bf8:	b1d2      	cbz	r2, 84c30 <_vfiprintf_r+0x614>
   84bfa:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   84bfe:	f8c8 1000 	str.w	r1, [r8]
   84c02:	990c      	ldr	r1, [sp, #48]	; 0x30
   84c04:	2301      	movs	r3, #1
   84c06:	980d      	ldr	r0, [sp, #52]	; 0x34
   84c08:	f8c8 3004 	str.w	r3, [r8, #4]
   84c0c:	1c4b      	adds	r3, r1, #1
   84c0e:	1c42      	adds	r2, r0, #1
   84c10:	2b07      	cmp	r3, #7
   84c12:	920d      	str	r2, [sp, #52]	; 0x34
   84c14:	f108 0808 	add.w	r8, r8, #8
   84c18:	930c      	str	r3, [sp, #48]	; 0x30
   84c1a:	dd09      	ble.n	84c30 <_vfiprintf_r+0x614>
   84c1c:	4650      	mov	r0, sl
   84c1e:	4649      	mov	r1, r9
   84c20:	aa0b      	add	r2, sp, #44	; 0x2c
   84c22:	f7ff fcc7 	bl	845b4 <__sprint_r>
   84c26:	2800      	cmp	r0, #0
   84c28:	f040 80fb 	bne.w	84e22 <_vfiprintf_r+0x806>
   84c2c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84c30:	9806      	ldr	r0, [sp, #24]
   84c32:	b1c8      	cbz	r0, 84c68 <_vfiprintf_r+0x64c>
   84c34:	aa0a      	add	r2, sp, #40	; 0x28
   84c36:	f8c8 2000 	str.w	r2, [r8]
   84c3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84c3c:	2102      	movs	r1, #2
   84c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84c40:	f8c8 1004 	str.w	r1, [r8, #4]
   84c44:	1c51      	adds	r1, r2, #1
   84c46:	1c98      	adds	r0, r3, #2
   84c48:	2907      	cmp	r1, #7
   84c4a:	900d      	str	r0, [sp, #52]	; 0x34
   84c4c:	f108 0808 	add.w	r8, r8, #8
   84c50:	910c      	str	r1, [sp, #48]	; 0x30
   84c52:	dd09      	ble.n	84c68 <_vfiprintf_r+0x64c>
   84c54:	4650      	mov	r0, sl
   84c56:	4649      	mov	r1, r9
   84c58:	aa0b      	add	r2, sp, #44	; 0x2c
   84c5a:	f7ff fcab 	bl	845b4 <__sprint_r>
   84c5e:	2800      	cmp	r0, #0
   84c60:	f040 80df 	bne.w	84e22 <_vfiprintf_r+0x806>
   84c64:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84c68:	9b07      	ldr	r3, [sp, #28]
   84c6a:	2b80      	cmp	r3, #128	; 0x80
   84c6c:	d13a      	bne.n	84ce4 <_vfiprintf_r+0x6c8>
   84c6e:	9804      	ldr	r0, [sp, #16]
   84c70:	9a02      	ldr	r2, [sp, #8]
   84c72:	1a83      	subs	r3, r0, r2
   84c74:	2b00      	cmp	r3, #0
   84c76:	dd35      	ble.n	84ce4 <_vfiprintf_r+0x6c8>
   84c78:	4965      	ldr	r1, [pc, #404]	; (84e10 <_vfiprintf_r+0x7f4>)
   84c7a:	2b10      	cmp	r3, #16
   84c7c:	f8c8 1000 	str.w	r1, [r8]
   84c80:	dd1a      	ble.n	84cb8 <_vfiprintf_r+0x69c>
   84c82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84c84:	2110      	movs	r1, #16
   84c86:	980d      	ldr	r0, [sp, #52]	; 0x34
   84c88:	f8c8 1004 	str.w	r1, [r8, #4]
   84c8c:	1c51      	adds	r1, r2, #1
   84c8e:	3010      	adds	r0, #16
   84c90:	2907      	cmp	r1, #7
   84c92:	900d      	str	r0, [sp, #52]	; 0x34
   84c94:	f108 0808 	add.w	r8, r8, #8
   84c98:	910c      	str	r1, [sp, #48]	; 0x30
   84c9a:	dd0b      	ble.n	84cb4 <_vfiprintf_r+0x698>
   84c9c:	4650      	mov	r0, sl
   84c9e:	4649      	mov	r1, r9
   84ca0:	aa0b      	add	r2, sp, #44	; 0x2c
   84ca2:	9300      	str	r3, [sp, #0]
   84ca4:	f7ff fc86 	bl	845b4 <__sprint_r>
   84ca8:	9b00      	ldr	r3, [sp, #0]
   84caa:	2800      	cmp	r0, #0
   84cac:	f040 80b9 	bne.w	84e22 <_vfiprintf_r+0x806>
   84cb0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84cb4:	3b10      	subs	r3, #16
   84cb6:	e7df      	b.n	84c78 <_vfiprintf_r+0x65c>
   84cb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84cba:	980d      	ldr	r0, [sp, #52]	; 0x34
   84cbc:	1c51      	adds	r1, r2, #1
   84cbe:	f8c8 3004 	str.w	r3, [r8, #4]
   84cc2:	2907      	cmp	r1, #7
   84cc4:	4403      	add	r3, r0
   84cc6:	930d      	str	r3, [sp, #52]	; 0x34
   84cc8:	f108 0808 	add.w	r8, r8, #8
   84ccc:	910c      	str	r1, [sp, #48]	; 0x30
   84cce:	dd09      	ble.n	84ce4 <_vfiprintf_r+0x6c8>
   84cd0:	4650      	mov	r0, sl
   84cd2:	4649      	mov	r1, r9
   84cd4:	aa0b      	add	r2, sp, #44	; 0x2c
   84cd6:	f7ff fc6d 	bl	845b4 <__sprint_r>
   84cda:	2800      	cmp	r0, #0
   84cdc:	f040 80a1 	bne.w	84e22 <_vfiprintf_r+0x806>
   84ce0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84ce4:	1b2d      	subs	r5, r5, r4
   84ce6:	2d00      	cmp	r5, #0
   84ce8:	dd32      	ble.n	84d50 <_vfiprintf_r+0x734>
   84cea:	4849      	ldr	r0, [pc, #292]	; (84e10 <_vfiprintf_r+0x7f4>)
   84cec:	2d10      	cmp	r5, #16
   84cee:	f8c8 0000 	str.w	r0, [r8]
   84cf2:	dd18      	ble.n	84d26 <_vfiprintf_r+0x70a>
   84cf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84cf6:	980d      	ldr	r0, [sp, #52]	; 0x34
   84cf8:	1c53      	adds	r3, r2, #1
   84cfa:	2110      	movs	r1, #16
   84cfc:	3010      	adds	r0, #16
   84cfe:	2b07      	cmp	r3, #7
   84d00:	f8c8 1004 	str.w	r1, [r8, #4]
   84d04:	900d      	str	r0, [sp, #52]	; 0x34
   84d06:	f108 0808 	add.w	r8, r8, #8
   84d0a:	930c      	str	r3, [sp, #48]	; 0x30
   84d0c:	dd09      	ble.n	84d22 <_vfiprintf_r+0x706>
   84d0e:	4650      	mov	r0, sl
   84d10:	4649      	mov	r1, r9
   84d12:	aa0b      	add	r2, sp, #44	; 0x2c
   84d14:	f7ff fc4e 	bl	845b4 <__sprint_r>
   84d18:	2800      	cmp	r0, #0
   84d1a:	f040 8082 	bne.w	84e22 <_vfiprintf_r+0x806>
   84d1e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84d22:	3d10      	subs	r5, #16
   84d24:	e7e1      	b.n	84cea <_vfiprintf_r+0x6ce>
   84d26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84d28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84d2a:	1c51      	adds	r1, r2, #1
   84d2c:	f8c8 5004 	str.w	r5, [r8, #4]
   84d30:	2907      	cmp	r1, #7
   84d32:	441d      	add	r5, r3
   84d34:	950d      	str	r5, [sp, #52]	; 0x34
   84d36:	f108 0808 	add.w	r8, r8, #8
   84d3a:	910c      	str	r1, [sp, #48]	; 0x30
   84d3c:	dd08      	ble.n	84d50 <_vfiprintf_r+0x734>
   84d3e:	4650      	mov	r0, sl
   84d40:	4649      	mov	r1, r9
   84d42:	aa0b      	add	r2, sp, #44	; 0x2c
   84d44:	f7ff fc36 	bl	845b4 <__sprint_r>
   84d48:	2800      	cmp	r0, #0
   84d4a:	d16a      	bne.n	84e22 <_vfiprintf_r+0x806>
   84d4c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84d50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84d52:	980d      	ldr	r0, [sp, #52]	; 0x34
   84d54:	1c51      	adds	r1, r2, #1
   84d56:	f8c8 4004 	str.w	r4, [r8, #4]
   84d5a:	2907      	cmp	r1, #7
   84d5c:	4404      	add	r4, r0
   84d5e:	f8c8 b000 	str.w	fp, [r8]
   84d62:	940d      	str	r4, [sp, #52]	; 0x34
   84d64:	f108 0308 	add.w	r3, r8, #8
   84d68:	910c      	str	r1, [sp, #48]	; 0x30
   84d6a:	dd07      	ble.n	84d7c <_vfiprintf_r+0x760>
   84d6c:	4650      	mov	r0, sl
   84d6e:	4649      	mov	r1, r9
   84d70:	aa0b      	add	r2, sp, #44	; 0x2c
   84d72:	f7ff fc1f 	bl	845b4 <__sprint_r>
   84d76:	2800      	cmp	r0, #0
   84d78:	d153      	bne.n	84e22 <_vfiprintf_r+0x806>
   84d7a:	ab18      	add	r3, sp, #96	; 0x60
   84d7c:	077a      	lsls	r2, r7, #29
   84d7e:	d40b      	bmi.n	84d98 <_vfiprintf_r+0x77c>
   84d80:	9b03      	ldr	r3, [sp, #12]
   84d82:	9a02      	ldr	r2, [sp, #8]
   84d84:	9904      	ldr	r1, [sp, #16]
   84d86:	980d      	ldr	r0, [sp, #52]	; 0x34
   84d88:	428a      	cmp	r2, r1
   84d8a:	bfac      	ite	ge
   84d8c:	189b      	addge	r3, r3, r2
   84d8e:	185b      	addlt	r3, r3, r1
   84d90:	9303      	str	r3, [sp, #12]
   84d92:	2800      	cmp	r0, #0
   84d94:	d035      	beq.n	84e02 <_vfiprintf_r+0x7e6>
   84d96:	e02e      	b.n	84df6 <_vfiprintf_r+0x7da>
   84d98:	9c04      	ldr	r4, [sp, #16]
   84d9a:	9802      	ldr	r0, [sp, #8]
   84d9c:	1a24      	subs	r4, r4, r0
   84d9e:	2c00      	cmp	r4, #0
   84da0:	ddee      	ble.n	84d80 <_vfiprintf_r+0x764>
   84da2:	4a1a      	ldr	r2, [pc, #104]	; (84e0c <_vfiprintf_r+0x7f0>)
   84da4:	2c10      	cmp	r4, #16
   84da6:	601a      	str	r2, [r3, #0]
   84da8:	dd14      	ble.n	84dd4 <_vfiprintf_r+0x7b8>
   84daa:	980c      	ldr	r0, [sp, #48]	; 0x30
   84dac:	2210      	movs	r2, #16
   84dae:	990d      	ldr	r1, [sp, #52]	; 0x34
   84db0:	605a      	str	r2, [r3, #4]
   84db2:	1c42      	adds	r2, r0, #1
   84db4:	3110      	adds	r1, #16
   84db6:	3308      	adds	r3, #8
   84db8:	2a07      	cmp	r2, #7
   84dba:	910d      	str	r1, [sp, #52]	; 0x34
   84dbc:	920c      	str	r2, [sp, #48]	; 0x30
   84dbe:	dd07      	ble.n	84dd0 <_vfiprintf_r+0x7b4>
   84dc0:	4650      	mov	r0, sl
   84dc2:	4649      	mov	r1, r9
   84dc4:	aa0b      	add	r2, sp, #44	; 0x2c
   84dc6:	f7ff fbf5 	bl	845b4 <__sprint_r>
   84dca:	2800      	cmp	r0, #0
   84dcc:	d129      	bne.n	84e22 <_vfiprintf_r+0x806>
   84dce:	ab18      	add	r3, sp, #96	; 0x60
   84dd0:	3c10      	subs	r4, #16
   84dd2:	e7e6      	b.n	84da2 <_vfiprintf_r+0x786>
   84dd4:	990c      	ldr	r1, [sp, #48]	; 0x30
   84dd6:	605c      	str	r4, [r3, #4]
   84dd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84dda:	1c48      	adds	r0, r1, #1
   84ddc:	191c      	adds	r4, r3, r4
   84dde:	2807      	cmp	r0, #7
   84de0:	940d      	str	r4, [sp, #52]	; 0x34
   84de2:	900c      	str	r0, [sp, #48]	; 0x30
   84de4:	ddcc      	ble.n	84d80 <_vfiprintf_r+0x764>
   84de6:	4650      	mov	r0, sl
   84de8:	4649      	mov	r1, r9
   84dea:	aa0b      	add	r2, sp, #44	; 0x2c
   84dec:	f7ff fbe2 	bl	845b4 <__sprint_r>
   84df0:	2800      	cmp	r0, #0
   84df2:	d0c5      	beq.n	84d80 <_vfiprintf_r+0x764>
   84df4:	e015      	b.n	84e22 <_vfiprintf_r+0x806>
   84df6:	4650      	mov	r0, sl
   84df8:	4649      	mov	r1, r9
   84dfa:	aa0b      	add	r2, sp, #44	; 0x2c
   84dfc:	f7ff fbda 	bl	845b4 <__sprint_r>
   84e00:	b978      	cbnz	r0, 84e22 <_vfiprintf_r+0x806>
   84e02:	2500      	movs	r5, #0
   84e04:	950c      	str	r5, [sp, #48]	; 0x30
   84e06:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84e0a:	e453      	b.n	846b4 <_vfiprintf_r+0x98>
   84e0c:	00086bda 	.word	0x00086bda
   84e10:	00086bea 	.word	0x00086bea
   84e14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84e16:	b122      	cbz	r2, 84e22 <_vfiprintf_r+0x806>
   84e18:	4650      	mov	r0, sl
   84e1a:	4649      	mov	r1, r9
   84e1c:	aa0b      	add	r2, sp, #44	; 0x2c
   84e1e:	f7ff fbc9 	bl	845b4 <__sprint_r>
   84e22:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   84e26:	f001 0040 	and.w	r0, r1, #64	; 0x40
   84e2a:	b203      	sxth	r3, r0
   84e2c:	2b00      	cmp	r3, #0
   84e2e:	f47f ac28 	bne.w	84682 <_vfiprintf_r+0x66>
   84e32:	9803      	ldr	r0, [sp, #12]
   84e34:	b029      	add	sp, #164	; 0xa4
   84e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00084e3a <__sbprintf>:
   84e3a:	b570      	push	{r4, r5, r6, lr}
   84e3c:	460c      	mov	r4, r1
   84e3e:	8989      	ldrh	r1, [r1, #12]
   84e40:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   84e44:	f021 0502 	bic.w	r5, r1, #2
   84e48:	6e61      	ldr	r1, [r4, #100]	; 0x64
   84e4a:	f8ad 500c 	strh.w	r5, [sp, #12]
   84e4e:	9119      	str	r1, [sp, #100]	; 0x64
   84e50:	89e5      	ldrh	r5, [r4, #14]
   84e52:	69e1      	ldr	r1, [r4, #28]
   84e54:	f8ad 500e 	strh.w	r5, [sp, #14]
   84e58:	9107      	str	r1, [sp, #28]
   84e5a:	6a65      	ldr	r5, [r4, #36]	; 0x24
   84e5c:	a91a      	add	r1, sp, #104	; 0x68
   84e5e:	9100      	str	r1, [sp, #0]
   84e60:	9104      	str	r1, [sp, #16]
   84e62:	2100      	movs	r1, #0
   84e64:	9509      	str	r5, [sp, #36]	; 0x24
   84e66:	9106      	str	r1, [sp, #24]
   84e68:	f44f 6580 	mov.w	r5, #1024	; 0x400
   84e6c:	4669      	mov	r1, sp
   84e6e:	9502      	str	r5, [sp, #8]
   84e70:	9505      	str	r5, [sp, #20]
   84e72:	4606      	mov	r6, r0
   84e74:	f7ff fbd2 	bl	8461c <_vfiprintf_r>
   84e78:	1e05      	subs	r5, r0, #0
   84e7a:	db07      	blt.n	84e8c <__sbprintf+0x52>
   84e7c:	4630      	mov	r0, r6
   84e7e:	4669      	mov	r1, sp
   84e80:	f000 f8e8 	bl	85054 <_fflush_r>
   84e84:	2800      	cmp	r0, #0
   84e86:	bf18      	it	ne
   84e88:	f04f 35ff 	movne.w	r5, #4294967295
   84e8c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   84e90:	f003 0040 	and.w	r0, r3, #64	; 0x40
   84e94:	b202      	sxth	r2, r0
   84e96:	b11a      	cbz	r2, 84ea0 <__sbprintf+0x66>
   84e98:	89a1      	ldrh	r1, [r4, #12]
   84e9a:	f041 0340 	orr.w	r3, r1, #64	; 0x40
   84e9e:	81a3      	strh	r3, [r4, #12]
   84ea0:	4628      	mov	r0, r5
   84ea2:	b01a      	add	sp, #104	; 0x68
   84ea4:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
   84ea8:	bd70      	pop	{r4, r5, r6, pc}

00084eaa <vfiprintf>:
   84eaa:	b530      	push	{r4, r5, lr}
   84eac:	4613      	mov	r3, r2
   84eae:	4a05      	ldr	r2, [pc, #20]	; (84ec4 <vfiprintf+0x1a>)
   84eb0:	4605      	mov	r5, r0
   84eb2:	460c      	mov	r4, r1
   84eb4:	6810      	ldr	r0, [r2, #0]
   84eb6:	4629      	mov	r1, r5
   84eb8:	4622      	mov	r2, r4
   84eba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   84ebe:	f7ff bbad 	b.w	8461c <_vfiprintf_r>
   84ec2:	bf00      	nop
   84ec4:	20070010 	.word	0x20070010

00084ec8 <__swbuf_r>:
   84ec8:	b570      	push	{r4, r5, r6, lr}
   84eca:	460d      	mov	r5, r1
   84ecc:	4614      	mov	r4, r2
   84ece:	4606      	mov	r6, r0
   84ed0:	b118      	cbz	r0, 84eda <__swbuf_r+0x12>
   84ed2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84ed4:	b90b      	cbnz	r3, 84eda <__swbuf_r+0x12>
   84ed6:	f000 f9af 	bl	85238 <__sinit>
   84eda:	89a1      	ldrh	r1, [r4, #12]
   84edc:	69a0      	ldr	r0, [r4, #24]
   84ede:	f001 0208 	and.w	r2, r1, #8
   84ee2:	b213      	sxth	r3, r2
   84ee4:	60a0      	str	r0, [r4, #8]
   84ee6:	b10b      	cbz	r3, 84eec <__swbuf_r+0x24>
   84ee8:	6920      	ldr	r0, [r4, #16]
   84eea:	b958      	cbnz	r0, 84f04 <__swbuf_r+0x3c>
   84eec:	4630      	mov	r0, r6
   84eee:	4621      	mov	r1, r4
   84ef0:	f000 f844 	bl	84f7c <__swsetup_r>
   84ef4:	b130      	cbz	r0, 84f04 <__swbuf_r+0x3c>
   84ef6:	89a5      	ldrh	r5, [r4, #12]
   84ef8:	2009      	movs	r0, #9
   84efa:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   84efe:	81a1      	strh	r1, [r4, #12]
   84f00:	6030      	str	r0, [r6, #0]
   84f02:	e017      	b.n	84f34 <__swbuf_r+0x6c>
   84f04:	89a1      	ldrh	r1, [r4, #12]
   84f06:	b2ed      	uxtb	r5, r5
   84f08:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
   84f0c:	b213      	sxth	r3, r2
   84f0e:	b933      	cbnz	r3, 84f1e <__swbuf_r+0x56>
   84f10:	f441 5000 	orr.w	r0, r1, #8192	; 0x2000
   84f14:	6e61      	ldr	r1, [r4, #100]	; 0x64
   84f16:	81a0      	strh	r0, [r4, #12]
   84f18:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
   84f1c:	6662      	str	r2, [r4, #100]	; 0x64
   84f1e:	6820      	ldr	r0, [r4, #0]
   84f20:	6923      	ldr	r3, [r4, #16]
   84f22:	6961      	ldr	r1, [r4, #20]
   84f24:	1ac0      	subs	r0, r0, r3
   84f26:	4288      	cmp	r0, r1
   84f28:	db07      	blt.n	84f3a <__swbuf_r+0x72>
   84f2a:	4630      	mov	r0, r6
   84f2c:	4621      	mov	r1, r4
   84f2e:	f000 f891 	bl	85054 <_fflush_r>
   84f32:	b110      	cbz	r0, 84f3a <__swbuf_r+0x72>
   84f34:	f04f 35ff 	mov.w	r5, #4294967295
   84f38:	e015      	b.n	84f66 <__swbuf_r+0x9e>
   84f3a:	68a2      	ldr	r2, [r4, #8]
   84f3c:	6821      	ldr	r1, [r4, #0]
   84f3e:	1e53      	subs	r3, r2, #1
   84f40:	60a3      	str	r3, [r4, #8]
   84f42:	f801 5b01 	strb.w	r5, [r1], #1
   84f46:	6962      	ldr	r2, [r4, #20]
   84f48:	3001      	adds	r0, #1
   84f4a:	4290      	cmp	r0, r2
   84f4c:	6021      	str	r1, [r4, #0]
   84f4e:	d004      	beq.n	84f5a <__swbuf_r+0x92>
   84f50:	89a3      	ldrh	r3, [r4, #12]
   84f52:	07db      	lsls	r3, r3, #31
   84f54:	d507      	bpl.n	84f66 <__swbuf_r+0x9e>
   84f56:	2d0a      	cmp	r5, #10
   84f58:	d105      	bne.n	84f66 <__swbuf_r+0x9e>
   84f5a:	4630      	mov	r0, r6
   84f5c:	4621      	mov	r1, r4
   84f5e:	f000 f879 	bl	85054 <_fflush_r>
   84f62:	2800      	cmp	r0, #0
   84f64:	d1e6      	bne.n	84f34 <__swbuf_r+0x6c>
   84f66:	4628      	mov	r0, r5
   84f68:	bd70      	pop	{r4, r5, r6, pc}

00084f6a <__swbuf>:
   84f6a:	460a      	mov	r2, r1
   84f6c:	4902      	ldr	r1, [pc, #8]	; (84f78 <__swbuf+0xe>)
   84f6e:	4603      	mov	r3, r0
   84f70:	6808      	ldr	r0, [r1, #0]
   84f72:	4619      	mov	r1, r3
   84f74:	f7ff bfa8 	b.w	84ec8 <__swbuf_r>
   84f78:	20070010 	.word	0x20070010

00084f7c <__swsetup_r>:
   84f7c:	b538      	push	{r3, r4, r5, lr}
   84f7e:	4b2c      	ldr	r3, [pc, #176]	; (85030 <__swsetup_r+0xb4>)
   84f80:	4605      	mov	r5, r0
   84f82:	6818      	ldr	r0, [r3, #0]
   84f84:	460c      	mov	r4, r1
   84f86:	b118      	cbz	r0, 84f90 <__swsetup_r+0x14>
   84f88:	6b82      	ldr	r2, [r0, #56]	; 0x38
   84f8a:	b90a      	cbnz	r2, 84f90 <__swsetup_r+0x14>
   84f8c:	f000 f954 	bl	85238 <__sinit>
   84f90:	89a0      	ldrh	r0, [r4, #12]
   84f92:	f000 0108 	and.w	r1, r0, #8
   84f96:	b20b      	sxth	r3, r1
   84f98:	bb0b      	cbnz	r3, 84fde <__swsetup_r+0x62>
   84f9a:	f000 0210 	and.w	r2, r0, #16
   84f9e:	b211      	sxth	r1, r2
   84fa0:	b911      	cbnz	r1, 84fa8 <__swsetup_r+0x2c>
   84fa2:	f04f 30ff 	mov.w	r0, #4294967295
   84fa6:	bd38      	pop	{r3, r4, r5, pc}
   84fa8:	f000 0004 	and.w	r0, r0, #4
   84fac:	b203      	sxth	r3, r0
   84fae:	b193      	cbz	r3, 84fd6 <__swsetup_r+0x5a>
   84fb0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84fb2:	b141      	cbz	r1, 84fc6 <__swsetup_r+0x4a>
   84fb4:	f104 0240 	add.w	r2, r4, #64	; 0x40
   84fb8:	4291      	cmp	r1, r2
   84fba:	d002      	beq.n	84fc2 <__swsetup_r+0x46>
   84fbc:	4628      	mov	r0, r5
   84fbe:	f000 fa79 	bl	854b4 <_free_r>
   84fc2:	2100      	movs	r1, #0
   84fc4:	6321      	str	r1, [r4, #48]	; 0x30
   84fc6:	89a0      	ldrh	r0, [r4, #12]
   84fc8:	6921      	ldr	r1, [r4, #16]
   84fca:	f020 0324 	bic.w	r3, r0, #36	; 0x24
   84fce:	2200      	movs	r2, #0
   84fd0:	81a3      	strh	r3, [r4, #12]
   84fd2:	6062      	str	r2, [r4, #4]
   84fd4:	6021      	str	r1, [r4, #0]
   84fd6:	89a0      	ldrh	r0, [r4, #12]
   84fd8:	f040 0308 	orr.w	r3, r0, #8
   84fdc:	81a3      	strh	r3, [r4, #12]
   84fde:	6922      	ldr	r2, [r4, #16]
   84fe0:	b94a      	cbnz	r2, 84ff6 <__swsetup_r+0x7a>
   84fe2:	89a1      	ldrh	r1, [r4, #12]
   84fe4:	f401 7020 	and.w	r0, r1, #640	; 0x280
   84fe8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   84fec:	d003      	beq.n	84ff6 <__swsetup_r+0x7a>
   84fee:	4628      	mov	r0, r5
   84ff0:	4621      	mov	r1, r4
   84ff2:	f000 fcf7 	bl	859e4 <__smakebuf_r>
   84ff6:	89a3      	ldrh	r3, [r4, #12]
   84ff8:	f013 0201 	ands.w	r2, r3, #1
   84ffc:	d005      	beq.n	8500a <__swsetup_r+0x8e>
   84ffe:	6961      	ldr	r1, [r4, #20]
   85000:	2200      	movs	r2, #0
   85002:	4248      	negs	r0, r1
   85004:	60a2      	str	r2, [r4, #8]
   85006:	61a0      	str	r0, [r4, #24]
   85008:	e007      	b.n	8501a <__swsetup_r+0x9e>
   8500a:	f003 0102 	and.w	r1, r3, #2
   8500e:	b208      	sxth	r0, r1
   85010:	b908      	cbnz	r0, 85016 <__swsetup_r+0x9a>
   85012:	6963      	ldr	r3, [r4, #20]
   85014:	e000      	b.n	85018 <__swsetup_r+0x9c>
   85016:	4613      	mov	r3, r2
   85018:	60a3      	str	r3, [r4, #8]
   8501a:	6923      	ldr	r3, [r4, #16]
   8501c:	b933      	cbnz	r3, 8502c <__swsetup_r+0xb0>
   8501e:	89a2      	ldrh	r2, [r4, #12]
   85020:	f002 0180 	and.w	r1, r2, #128	; 0x80
   85024:	b208      	sxth	r0, r1
   85026:	2800      	cmp	r0, #0
   85028:	d1bb      	bne.n	84fa2 <__swsetup_r+0x26>
   8502a:	bd38      	pop	{r3, r4, r5, pc}
   8502c:	2000      	movs	r0, #0
   8502e:	bd38      	pop	{r3, r4, r5, pc}
   85030:	20070010 	.word	0x20070010

00085034 <register_fini>:
   85034:	4b02      	ldr	r3, [pc, #8]	; (85040 <register_fini+0xc>)
   85036:	b113      	cbz	r3, 8503e <register_fini+0xa>
   85038:	4802      	ldr	r0, [pc, #8]	; (85044 <register_fini+0x10>)
   8503a:	f000 b805 	b.w	85048 <atexit>
   8503e:	4770      	bx	lr
   85040:	00000000 	.word	0x00000000
   85044:	000843a1 	.word	0x000843a1

00085048 <atexit>:
   85048:	4601      	mov	r1, r0
   8504a:	2000      	movs	r0, #0
   8504c:	4602      	mov	r2, r0
   8504e:	4603      	mov	r3, r0
   85050:	f7ff b958 	b.w	84304 <__register_exitproc>

00085054 <_fflush_r>:
   85054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85058:	460c      	mov	r4, r1
   8505a:	4605      	mov	r5, r0
   8505c:	b118      	cbz	r0, 85066 <_fflush_r+0x12>
   8505e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85060:	b90b      	cbnz	r3, 85066 <_fflush_r+0x12>
   85062:	f000 f8e9 	bl	85238 <__sinit>
   85066:	89a2      	ldrh	r2, [r4, #12]
   85068:	b332      	cbz	r2, 850b8 <_fflush_r+0x64>
   8506a:	f002 0008 	and.w	r0, r2, #8
   8506e:	b201      	sxth	r1, r0
   85070:	2900      	cmp	r1, #0
   85072:	d162      	bne.n	8513a <_fflush_r+0xe6>
   85074:	6861      	ldr	r1, [r4, #4]
   85076:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
   8507a:	2900      	cmp	r1, #0
   8507c:	81a0      	strh	r0, [r4, #12]
   8507e:	dc02      	bgt.n	85086 <_fflush_r+0x32>
   85080:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   85082:	2b00      	cmp	r3, #0
   85084:	dd18      	ble.n	850b8 <_fflush_r+0x64>
   85086:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   85088:	b1b6      	cbz	r6, 850b8 <_fflush_r+0x64>
   8508a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   8508e:	2000      	movs	r0, #0
   85090:	b212      	sxth	r2, r2
   85092:	682f      	ldr	r7, [r5, #0]
   85094:	6028      	str	r0, [r5, #0]
   85096:	b10a      	cbz	r2, 8509c <_fflush_r+0x48>
   85098:	6d22      	ldr	r2, [r4, #80]	; 0x50
   8509a:	e010      	b.n	850be <_fflush_r+0x6a>
   8509c:	2301      	movs	r3, #1
   8509e:	4628      	mov	r0, r5
   850a0:	69e1      	ldr	r1, [r4, #28]
   850a2:	47b0      	blx	r6
   850a4:	4602      	mov	r2, r0
   850a6:	3001      	adds	r0, #1
   850a8:	d109      	bne.n	850be <_fflush_r+0x6a>
   850aa:	6829      	ldr	r1, [r5, #0]
   850ac:	b139      	cbz	r1, 850be <_fflush_r+0x6a>
   850ae:	291d      	cmp	r1, #29
   850b0:	d001      	beq.n	850b6 <_fflush_r+0x62>
   850b2:	2916      	cmp	r1, #22
   850b4:	d14e      	bne.n	85154 <_fflush_r+0x100>
   850b6:	602f      	str	r7, [r5, #0]
   850b8:	2000      	movs	r0, #0
   850ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   850be:	89a6      	ldrh	r6, [r4, #12]
   850c0:	f006 0104 	and.w	r1, r6, #4
   850c4:	b20b      	sxth	r3, r1
   850c6:	b12b      	cbz	r3, 850d4 <_fflush_r+0x80>
   850c8:	6860      	ldr	r0, [r4, #4]
   850ca:	6b26      	ldr	r6, [r4, #48]	; 0x30
   850cc:	1a12      	subs	r2, r2, r0
   850ce:	b10e      	cbz	r6, 850d4 <_fflush_r+0x80>
   850d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   850d2:	1a52      	subs	r2, r2, r1
   850d4:	69e1      	ldr	r1, [r4, #28]
   850d6:	2300      	movs	r3, #0
   850d8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   850da:	4628      	mov	r0, r5
   850dc:	47b0      	blx	r6
   850de:	1c41      	adds	r1, r0, #1
   850e0:	d105      	bne.n	850ee <_fflush_r+0x9a>
   850e2:	682a      	ldr	r2, [r5, #0]
   850e4:	b11a      	cbz	r2, 850ee <_fflush_r+0x9a>
   850e6:	2a1d      	cmp	r2, #29
   850e8:	d001      	beq.n	850ee <_fflush_r+0x9a>
   850ea:	2a16      	cmp	r2, #22
   850ec:	d11f      	bne.n	8512e <_fflush_r+0xda>
   850ee:	89a3      	ldrh	r3, [r4, #12]
   850f0:	2100      	movs	r1, #0
   850f2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
   850f6:	81a2      	strh	r2, [r4, #12]
   850f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   850fc:	6922      	ldr	r2, [r4, #16]
   850fe:	6061      	str	r1, [r4, #4]
   85100:	b219      	sxth	r1, r3
   85102:	6022      	str	r2, [r4, #0]
   85104:	b121      	cbz	r1, 85110 <_fflush_r+0xbc>
   85106:	1c42      	adds	r2, r0, #1
   85108:	d101      	bne.n	8510e <_fflush_r+0xba>
   8510a:	682a      	ldr	r2, [r5, #0]
   8510c:	b902      	cbnz	r2, 85110 <_fflush_r+0xbc>
   8510e:	6520      	str	r0, [r4, #80]	; 0x50
   85110:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85112:	602f      	str	r7, [r5, #0]
   85114:	2900      	cmp	r1, #0
   85116:	d0cf      	beq.n	850b8 <_fflush_r+0x64>
   85118:	f104 0040 	add.w	r0, r4, #64	; 0x40
   8511c:	4281      	cmp	r1, r0
   8511e:	d002      	beq.n	85126 <_fflush_r+0xd2>
   85120:	4628      	mov	r0, r5
   85122:	f000 f9c7 	bl	854b4 <_free_r>
   85126:	2000      	movs	r0, #0
   85128:	6320      	str	r0, [r4, #48]	; 0x30
   8512a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8512e:	89a3      	ldrh	r3, [r4, #12]
   85130:	f043 0140 	orr.w	r1, r3, #64	; 0x40
   85134:	81a1      	strh	r1, [r4, #12]
   85136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8513a:	6926      	ldr	r6, [r4, #16]
   8513c:	2e00      	cmp	r6, #0
   8513e:	d0bb      	beq.n	850b8 <_fflush_r+0x64>
   85140:	0792      	lsls	r2, r2, #30
   85142:	6823      	ldr	r3, [r4, #0]
   85144:	bf0c      	ite	eq
   85146:	6962      	ldreq	r2, [r4, #20]
   85148:	2200      	movne	r2, #0
   8514a:	ebc6 0803 	rsb	r8, r6, r3
   8514e:	6026      	str	r6, [r4, #0]
   85150:	60a2      	str	r2, [r4, #8]
   85152:	e012      	b.n	8517a <_fflush_r+0x126>
   85154:	89a3      	ldrh	r3, [r4, #12]
   85156:	f043 0040 	orr.w	r0, r3, #64	; 0x40
   8515a:	81a0      	strh	r0, [r4, #12]
   8515c:	f04f 30ff 	mov.w	r0, #4294967295
   85160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85164:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85166:	4628      	mov	r0, r5
   85168:	69e1      	ldr	r1, [r4, #28]
   8516a:	4632      	mov	r2, r6
   8516c:	4643      	mov	r3, r8
   8516e:	47b8      	blx	r7
   85170:	2800      	cmp	r0, #0
   85172:	ddef      	ble.n	85154 <_fflush_r+0x100>
   85174:	1836      	adds	r6, r6, r0
   85176:	ebc0 0808 	rsb	r8, r0, r8
   8517a:	f1b8 0f00 	cmp.w	r8, #0
   8517e:	dcf1      	bgt.n	85164 <_fflush_r+0x110>
   85180:	e79a      	b.n	850b8 <_fflush_r+0x64>

00085182 <fflush>:
   85182:	4601      	mov	r1, r0
   85184:	b920      	cbnz	r0, 85190 <fflush+0xe>
   85186:	4804      	ldr	r0, [pc, #16]	; (85198 <fflush+0x16>)
   85188:	4904      	ldr	r1, [pc, #16]	; (8519c <fflush+0x1a>)
   8518a:	6800      	ldr	r0, [r0, #0]
   8518c:	f000 bbc4 	b.w	85918 <_fwalk_reent>
   85190:	4b03      	ldr	r3, [pc, #12]	; (851a0 <fflush+0x1e>)
   85192:	6818      	ldr	r0, [r3, #0]
   85194:	f7ff bf5e 	b.w	85054 <_fflush_r>
   85198:	00086bd4 	.word	0x00086bd4
   8519c:	00085055 	.word	0x00085055
   851a0:	20070010 	.word	0x20070010

000851a4 <__fp_lock>:
   851a4:	2000      	movs	r0, #0
   851a6:	4770      	bx	lr

000851a8 <__fp_unlock>:
   851a8:	2000      	movs	r0, #0
   851aa:	4770      	bx	lr

000851ac <_cleanup_r>:
   851ac:	4901      	ldr	r1, [pc, #4]	; (851b4 <_cleanup_r+0x8>)
   851ae:	f000 bb92 	b.w	858d6 <_fwalk>
   851b2:	bf00      	nop
   851b4:	00086449 	.word	0x00086449

000851b8 <std.isra.0>:
   851b8:	2300      	movs	r3, #0
   851ba:	b510      	push	{r4, lr}
   851bc:	4604      	mov	r4, r0
   851be:	6003      	str	r3, [r0, #0]
   851c0:	6043      	str	r3, [r0, #4]
   851c2:	6083      	str	r3, [r0, #8]
   851c4:	8181      	strh	r1, [r0, #12]
   851c6:	6643      	str	r3, [r0, #100]	; 0x64
   851c8:	81c2      	strh	r2, [r0, #14]
   851ca:	6103      	str	r3, [r0, #16]
   851cc:	6143      	str	r3, [r0, #20]
   851ce:	6183      	str	r3, [r0, #24]
   851d0:	4619      	mov	r1, r3
   851d2:	2208      	movs	r2, #8
   851d4:	f100 005c 	add.w	r0, r0, #92	; 0x5c
   851d8:	f7ff f947 	bl	8446a <memset>
   851dc:	4804      	ldr	r0, [pc, #16]	; (851f0 <std.isra.0+0x38>)
   851de:	4905      	ldr	r1, [pc, #20]	; (851f4 <std.isra.0+0x3c>)
   851e0:	4a05      	ldr	r2, [pc, #20]	; (851f8 <std.isra.0+0x40>)
   851e2:	4b06      	ldr	r3, [pc, #24]	; (851fc <std.isra.0+0x44>)
   851e4:	61e4      	str	r4, [r4, #28]
   851e6:	6220      	str	r0, [r4, #32]
   851e8:	6261      	str	r1, [r4, #36]	; 0x24
   851ea:	62a2      	str	r2, [r4, #40]	; 0x28
   851ec:	62e3      	str	r3, [r4, #44]	; 0x2c
   851ee:	bd10      	pop	{r4, pc}
   851f0:	00086231 	.word	0x00086231
   851f4:	00086257 	.word	0x00086257
   851f8:	00086293 	.word	0x00086293
   851fc:	000862b7 	.word	0x000862b7

00085200 <__sfmoreglue>:
   85200:	b570      	push	{r4, r5, r6, lr}
   85202:	2568      	movs	r5, #104	; 0x68
   85204:	434d      	muls	r5, r1
   85206:	460e      	mov	r6, r1
   85208:	f105 010c 	add.w	r1, r5, #12
   8520c:	f000 fc66 	bl	85adc <_malloc_r>
   85210:	4604      	mov	r4, r0
   85212:	b140      	cbz	r0, 85226 <__sfmoreglue+0x26>
   85214:	f100 000c 	add.w	r0, r0, #12
   85218:	2100      	movs	r1, #0
   8521a:	e884 0042 	stmia.w	r4, {r1, r6}
   8521e:	60a0      	str	r0, [r4, #8]
   85220:	462a      	mov	r2, r5
   85222:	f7ff f922 	bl	8446a <memset>
   85226:	4620      	mov	r0, r4
   85228:	bd70      	pop	{r4, r5, r6, pc}

0008522a <_cleanup>:
   8522a:	4b02      	ldr	r3, [pc, #8]	; (85234 <_cleanup+0xa>)
   8522c:	6818      	ldr	r0, [r3, #0]
   8522e:	f7ff bfbd 	b.w	851ac <_cleanup_r>
   85232:	bf00      	nop
   85234:	00086bd4 	.word	0x00086bd4

00085238 <__sinit>:
   85238:	b538      	push	{r3, r4, r5, lr}
   8523a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8523c:	4604      	mov	r4, r0
   8523e:	b9eb      	cbnz	r3, 8527c <__sinit+0x44>
   85240:	4a0f      	ldr	r2, [pc, #60]	; (85280 <__sinit+0x48>)
   85242:	2501      	movs	r5, #1
   85244:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
   85248:	63c2      	str	r2, [r0, #60]	; 0x3c
   8524a:	6385      	str	r5, [r0, #56]	; 0x38
   8524c:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
   85250:	2003      	movs	r0, #3
   85252:	461a      	mov	r2, r3
   85254:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   85258:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
   8525c:	6860      	ldr	r0, [r4, #4]
   8525e:	2104      	movs	r1, #4
   85260:	f7ff ffaa 	bl	851b8 <std.isra.0>
   85264:	68a0      	ldr	r0, [r4, #8]
   85266:	2109      	movs	r1, #9
   85268:	462a      	mov	r2, r5
   8526a:	f7ff ffa5 	bl	851b8 <std.isra.0>
   8526e:	68e0      	ldr	r0, [r4, #12]
   85270:	2112      	movs	r1, #18
   85272:	2202      	movs	r2, #2
   85274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   85278:	f7ff bf9e 	b.w	851b8 <std.isra.0>
   8527c:	bd38      	pop	{r3, r4, r5, pc}
   8527e:	bf00      	nop
   85280:	000851ad 	.word	0x000851ad

00085284 <__sfp>:
   85284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85286:	4b1d      	ldr	r3, [pc, #116]	; (852fc <__sfp+0x78>)
   85288:	4607      	mov	r7, r0
   8528a:	681e      	ldr	r6, [r3, #0]
   8528c:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   8528e:	b910      	cbnz	r0, 85296 <__sfp+0x12>
   85290:	4630      	mov	r0, r6
   85292:	f7ff ffd1 	bl	85238 <__sinit>
   85296:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
   8529a:	68b4      	ldr	r4, [r6, #8]
   8529c:	6871      	ldr	r1, [r6, #4]
   8529e:	3901      	subs	r1, #1
   852a0:	d404      	bmi.n	852ac <__sfp+0x28>
   852a2:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   852a6:	b185      	cbz	r5, 852ca <__sfp+0x46>
   852a8:	3468      	adds	r4, #104	; 0x68
   852aa:	e7f8      	b.n	8529e <__sfp+0x1a>
   852ac:	6832      	ldr	r2, [r6, #0]
   852ae:	b10a      	cbz	r2, 852b4 <__sfp+0x30>
   852b0:	6836      	ldr	r6, [r6, #0]
   852b2:	e7f2      	b.n	8529a <__sfp+0x16>
   852b4:	4638      	mov	r0, r7
   852b6:	2104      	movs	r1, #4
   852b8:	f7ff ffa2 	bl	85200 <__sfmoreglue>
   852bc:	6030      	str	r0, [r6, #0]
   852be:	2800      	cmp	r0, #0
   852c0:	d1f6      	bne.n	852b0 <__sfp+0x2c>
   852c2:	240c      	movs	r4, #12
   852c4:	603c      	str	r4, [r7, #0]
   852c6:	4604      	mov	r4, r0
   852c8:	e015      	b.n	852f6 <__sfp+0x72>
   852ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   852ce:	2001      	movs	r0, #1
   852d0:	81a0      	strh	r0, [r4, #12]
   852d2:	81e3      	strh	r3, [r4, #14]
   852d4:	6665      	str	r5, [r4, #100]	; 0x64
   852d6:	6025      	str	r5, [r4, #0]
   852d8:	60a5      	str	r5, [r4, #8]
   852da:	6065      	str	r5, [r4, #4]
   852dc:	6125      	str	r5, [r4, #16]
   852de:	6165      	str	r5, [r4, #20]
   852e0:	61a5      	str	r5, [r4, #24]
   852e2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   852e6:	4629      	mov	r1, r5
   852e8:	2208      	movs	r2, #8
   852ea:	f7ff f8be 	bl	8446a <memset>
   852ee:	6325      	str	r5, [r4, #48]	; 0x30
   852f0:	6365      	str	r5, [r4, #52]	; 0x34
   852f2:	6465      	str	r5, [r4, #68]	; 0x44
   852f4:	64a5      	str	r5, [r4, #72]	; 0x48
   852f6:	4620      	mov	r0, r4
   852f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   852fa:	bf00      	nop
   852fc:	00086bd4 	.word	0x00086bd4

00085300 <__sfp_lock_acquire>:
   85300:	4770      	bx	lr

00085302 <__sfp_lock_release>:
   85302:	4770      	bx	lr

00085304 <__sinit_lock_acquire>:
   85304:	4770      	bx	lr

00085306 <__sinit_lock_release>:
   85306:	4770      	bx	lr

00085308 <__fp_lock_all>:
   85308:	4b02      	ldr	r3, [pc, #8]	; (85314 <__fp_lock_all+0xc>)
   8530a:	4903      	ldr	r1, [pc, #12]	; (85318 <__fp_lock_all+0x10>)
   8530c:	6818      	ldr	r0, [r3, #0]
   8530e:	f000 bae2 	b.w	858d6 <_fwalk>
   85312:	bf00      	nop
   85314:	20070010 	.word	0x20070010
   85318:	000851a5 	.word	0x000851a5

0008531c <__fp_unlock_all>:
   8531c:	4b02      	ldr	r3, [pc, #8]	; (85328 <__fp_unlock_all+0xc>)
   8531e:	4903      	ldr	r1, [pc, #12]	; (8532c <__fp_unlock_all+0x10>)
   85320:	6818      	ldr	r0, [r3, #0]
   85322:	f000 bad8 	b.w	858d6 <_fwalk>
   85326:	bf00      	nop
   85328:	20070010 	.word	0x20070010
   8532c:	000851a9 	.word	0x000851a9

00085330 <_fputwc_r>:
   85330:	8993      	ldrh	r3, [r2, #12]
   85332:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   85336:	4614      	mov	r4, r2
   85338:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
   8533c:	4680      	mov	r8, r0
   8533e:	b210      	sxth	r0, r2
   85340:	460e      	mov	r6, r1
   85342:	b930      	cbnz	r0, 85352 <_fputwc_r+0x22>
   85344:	6e67      	ldr	r7, [r4, #100]	; 0x64
   85346:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
   8534a:	f447 5300 	orr.w	r3, r7, #8192	; 0x2000
   8534e:	81a1      	strh	r1, [r4, #12]
   85350:	6663      	str	r3, [r4, #100]	; 0x64
   85352:	f000 fb29 	bl	859a8 <__locale_mb_cur_max>
   85356:	2801      	cmp	r0, #1
   85358:	d106      	bne.n	85368 <_fputwc_r+0x38>
   8535a:	b12e      	cbz	r6, 85368 <_fputwc_r+0x38>
   8535c:	2eff      	cmp	r6, #255	; 0xff
   8535e:	d803      	bhi.n	85368 <_fputwc_r+0x38>
   85360:	f88d 6004 	strb.w	r6, [sp, #4]
   85364:	4607      	mov	r7, r0
   85366:	e00f      	b.n	85388 <_fputwc_r+0x58>
   85368:	4632      	mov	r2, r6
   8536a:	4640      	mov	r0, r8
   8536c:	a901      	add	r1, sp, #4
   8536e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   85372:	f000 ffaf 	bl	862d4 <_wcrtomb_r>
   85376:	1c42      	adds	r2, r0, #1
   85378:	4607      	mov	r7, r0
   8537a:	d105      	bne.n	85388 <_fputwc_r+0x58>
   8537c:	89a2      	ldrh	r2, [r4, #12]
   8537e:	f042 0040 	orr.w	r0, r2, #64	; 0x40
   85382:	81a0      	strh	r0, [r4, #12]
   85384:	4638      	mov	r0, r7
   85386:	e031      	b.n	853ec <_fputwc_r+0xbc>
   85388:	2500      	movs	r5, #0
   8538a:	42bd      	cmp	r5, r7
   8538c:	d02a      	beq.n	853e4 <_fputwc_r+0xb4>
   8538e:	68a1      	ldr	r1, [r4, #8]
   85390:	ab01      	add	r3, sp, #4
   85392:	1e4a      	subs	r2, r1, #1
   85394:	2a00      	cmp	r2, #0
   85396:	60a2      	str	r2, [r4, #8]
   85398:	da1a      	bge.n	853d0 <_fputwc_r+0xa0>
   8539a:	69a0      	ldr	r0, [r4, #24]
   8539c:	4282      	cmp	r2, r0
   8539e:	db0c      	blt.n	853ba <_fputwc_r+0x8a>
   853a0:	6821      	ldr	r1, [r4, #0]
   853a2:	5d5a      	ldrb	r2, [r3, r5]
   853a4:	700a      	strb	r2, [r1, #0]
   853a6:	6823      	ldr	r3, [r4, #0]
   853a8:	7819      	ldrb	r1, [r3, #0]
   853aa:	290a      	cmp	r1, #10
   853ac:	d003      	beq.n	853b6 <_fputwc_r+0x86>
   853ae:	3301      	adds	r3, #1
   853b0:	2200      	movs	r2, #0
   853b2:	6023      	str	r3, [r4, #0]
   853b4:	e013      	b.n	853de <_fputwc_r+0xae>
   853b6:	4640      	mov	r0, r8
   853b8:	e001      	b.n	853be <_fputwc_r+0x8e>
   853ba:	5d59      	ldrb	r1, [r3, r5]
   853bc:	4640      	mov	r0, r8
   853be:	4622      	mov	r2, r4
   853c0:	f7ff fd82 	bl	84ec8 <__swbuf_r>
   853c4:	f1b0 31ff 	subs.w	r1, r0, #4294967295
   853c8:	4248      	negs	r0, r1
   853ca:	eb50 0201 	adcs.w	r2, r0, r1
   853ce:	e006      	b.n	853de <_fputwc_r+0xae>
   853d0:	6820      	ldr	r0, [r4, #0]
   853d2:	5d59      	ldrb	r1, [r3, r5]
   853d4:	7001      	strb	r1, [r0, #0]
   853d6:	6822      	ldr	r2, [r4, #0]
   853d8:	1c53      	adds	r3, r2, #1
   853da:	6023      	str	r3, [r4, #0]
   853dc:	e000      	b.n	853e0 <_fputwc_r+0xb0>
   853de:	b91a      	cbnz	r2, 853e8 <_fputwc_r+0xb8>
   853e0:	3501      	adds	r5, #1
   853e2:	e7d2      	b.n	8538a <_fputwc_r+0x5a>
   853e4:	4630      	mov	r0, r6
   853e6:	e001      	b.n	853ec <_fputwc_r+0xbc>
   853e8:	f04f 30ff 	mov.w	r0, #4294967295
   853ec:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

000853f0 <fputwc>:
   853f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   853f2:	4c08      	ldr	r4, [pc, #32]	; (85414 <fputwc+0x24>)
   853f4:	4607      	mov	r7, r0
   853f6:	6820      	ldr	r0, [r4, #0]
   853f8:	460e      	mov	r6, r1
   853fa:	b118      	cbz	r0, 85404 <fputwc+0x14>
   853fc:	6b85      	ldr	r5, [r0, #56]	; 0x38
   853fe:	b90d      	cbnz	r5, 85404 <fputwc+0x14>
   85400:	f7ff ff1a 	bl	85238 <__sinit>
   85404:	6820      	ldr	r0, [r4, #0]
   85406:	4639      	mov	r1, r7
   85408:	4632      	mov	r2, r6
   8540a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8540e:	f7ff bf8f 	b.w	85330 <_fputwc_r>
   85412:	bf00      	nop
   85414:	20070010 	.word	0x20070010

00085418 <_malloc_trim_r>:
   85418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8541a:	4d23      	ldr	r5, [pc, #140]	; (854a8 <_malloc_trim_r+0x90>)
   8541c:	460e      	mov	r6, r1
   8541e:	4604      	mov	r4, r0
   85420:	f000 fd86 	bl	85f30 <__malloc_lock>
   85424:	68ab      	ldr	r3, [r5, #8]
   85426:	685f      	ldr	r7, [r3, #4]
   85428:	f027 0703 	bic.w	r7, r7, #3
   8542c:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
   85430:	1b81      	subs	r1, r0, r6
   85432:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   85436:	f022 060f 	bic.w	r6, r2, #15
   8543a:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   8543e:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   85442:	da04      	bge.n	8544e <_malloc_trim_r+0x36>
   85444:	4620      	mov	r0, r4
   85446:	f000 fd74 	bl	85f32 <__malloc_unlock>
   8544a:	2000      	movs	r0, #0
   8544c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8544e:	2100      	movs	r1, #0
   85450:	4620      	mov	r0, r4
   85452:	f000 fedd 	bl	86210 <_sbrk_r>
   85456:	68ab      	ldr	r3, [r5, #8]
   85458:	19d9      	adds	r1, r3, r7
   8545a:	4288      	cmp	r0, r1
   8545c:	d1f2      	bne.n	85444 <_malloc_trim_r+0x2c>
   8545e:	4271      	negs	r1, r6
   85460:	4620      	mov	r0, r4
   85462:	f000 fed5 	bl	86210 <_sbrk_r>
   85466:	3001      	adds	r0, #1
   85468:	d110      	bne.n	8548c <_malloc_trim_r+0x74>
   8546a:	2100      	movs	r1, #0
   8546c:	4620      	mov	r0, r4
   8546e:	f000 fecf 	bl	86210 <_sbrk_r>
   85472:	68ab      	ldr	r3, [r5, #8]
   85474:	1ac2      	subs	r2, r0, r3
   85476:	2a0f      	cmp	r2, #15
   85478:	dde4      	ble.n	85444 <_malloc_trim_r+0x2c>
   8547a:	490c      	ldr	r1, [pc, #48]	; (854ac <_malloc_trim_r+0x94>)
   8547c:	f042 0201 	orr.w	r2, r2, #1
   85480:	6809      	ldr	r1, [r1, #0]
   85482:	605a      	str	r2, [r3, #4]
   85484:	1a40      	subs	r0, r0, r1
   85486:	490a      	ldr	r1, [pc, #40]	; (854b0 <_malloc_trim_r+0x98>)
   85488:	6008      	str	r0, [r1, #0]
   8548a:	e7db      	b.n	85444 <_malloc_trim_r+0x2c>
   8548c:	4b08      	ldr	r3, [pc, #32]	; (854b0 <_malloc_trim_r+0x98>)
   8548e:	68a8      	ldr	r0, [r5, #8]
   85490:	681a      	ldr	r2, [r3, #0]
   85492:	1bbf      	subs	r7, r7, r6
   85494:	f047 0701 	orr.w	r7, r7, #1
   85498:	6047      	str	r7, [r0, #4]
   8549a:	1b96      	subs	r6, r2, r6
   8549c:	4620      	mov	r0, r4
   8549e:	601e      	str	r6, [r3, #0]
   854a0:	f000 fd47 	bl	85f32 <__malloc_unlock>
   854a4:	2001      	movs	r0, #1
   854a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   854a8:	200704bc 	.word	0x200704bc
   854ac:	200708c4 	.word	0x200708c4
   854b0:	20078c40 	.word	0x20078c40

000854b4 <_free_r>:
   854b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   854b6:	4606      	mov	r6, r0
   854b8:	460d      	mov	r5, r1
   854ba:	2900      	cmp	r1, #0
   854bc:	f000 80a6 	beq.w	8560c <_free_r+0x158>
   854c0:	f000 fd36 	bl	85f30 <__malloc_lock>
   854c4:	f855 cc04 	ldr.w	ip, [r5, #-4]
   854c8:	4f51      	ldr	r7, [pc, #324]	; (85610 <_free_r+0x15c>)
   854ca:	f1a5 0308 	sub.w	r3, r5, #8
   854ce:	f02c 0201 	bic.w	r2, ip, #1
   854d2:	189c      	adds	r4, r3, r2
   854d4:	68b9      	ldr	r1, [r7, #8]
   854d6:	6860      	ldr	r0, [r4, #4]
   854d8:	428c      	cmp	r4, r1
   854da:	f020 0003 	bic.w	r0, r0, #3
   854de:	f00c 0101 	and.w	r1, ip, #1
   854e2:	d11c      	bne.n	8551e <_free_r+0x6a>
   854e4:	1882      	adds	r2, r0, r2
   854e6:	b939      	cbnz	r1, 854f8 <_free_r+0x44>
   854e8:	f855 1c08 	ldr.w	r1, [r5, #-8]
   854ec:	1a5b      	subs	r3, r3, r1
   854ee:	6898      	ldr	r0, [r3, #8]
   854f0:	1852      	adds	r2, r2, r1
   854f2:	68d9      	ldr	r1, [r3, #12]
   854f4:	60c1      	str	r1, [r0, #12]
   854f6:	6088      	str	r0, [r1, #8]
   854f8:	4845      	ldr	r0, [pc, #276]	; (85610 <_free_r+0x15c>)
   854fa:	f042 0101 	orr.w	r1, r2, #1
   854fe:	6059      	str	r1, [r3, #4]
   85500:	6083      	str	r3, [r0, #8]
   85502:	4b44      	ldr	r3, [pc, #272]	; (85614 <_free_r+0x160>)
   85504:	6819      	ldr	r1, [r3, #0]
   85506:	428a      	cmp	r2, r1
   85508:	d304      	bcc.n	85514 <_free_r+0x60>
   8550a:	4a43      	ldr	r2, [pc, #268]	; (85618 <_free_r+0x164>)
   8550c:	4630      	mov	r0, r6
   8550e:	6811      	ldr	r1, [r2, #0]
   85510:	f7ff ff82 	bl	85418 <_malloc_trim_r>
   85514:	4630      	mov	r0, r6
   85516:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8551a:	f000 bd0a 	b.w	85f32 <__malloc_unlock>
   8551e:	6060      	str	r0, [r4, #4]
   85520:	b959      	cbnz	r1, 8553a <_free_r+0x86>
   85522:	f855 5c08 	ldr.w	r5, [r5, #-8]
   85526:	3708      	adds	r7, #8
   85528:	1b5b      	subs	r3, r3, r5
   8552a:	1952      	adds	r2, r2, r5
   8552c:	689d      	ldr	r5, [r3, #8]
   8552e:	42bd      	cmp	r5, r7
   85530:	d005      	beq.n	8553e <_free_r+0x8a>
   85532:	68df      	ldr	r7, [r3, #12]
   85534:	60ef      	str	r7, [r5, #12]
   85536:	60bd      	str	r5, [r7, #8]
   85538:	e002      	b.n	85540 <_free_r+0x8c>
   8553a:	2100      	movs	r1, #0
   8553c:	e000      	b.n	85540 <_free_r+0x8c>
   8553e:	2101      	movs	r1, #1
   85540:	1825      	adds	r5, r4, r0
   85542:	686d      	ldr	r5, [r5, #4]
   85544:	f015 0f01 	tst.w	r5, #1
   85548:	d10f      	bne.n	8556a <_free_r+0xb6>
   8554a:	1812      	adds	r2, r2, r0
   8554c:	b949      	cbnz	r1, 85562 <_free_r+0xae>
   8554e:	68a0      	ldr	r0, [r4, #8]
   85550:	4d32      	ldr	r5, [pc, #200]	; (8561c <_free_r+0x168>)
   85552:	42a8      	cmp	r0, r5
   85554:	d105      	bne.n	85562 <_free_r+0xae>
   85556:	60eb      	str	r3, [r5, #12]
   85558:	60ab      	str	r3, [r5, #8]
   8555a:	60d8      	str	r0, [r3, #12]
   8555c:	6098      	str	r0, [r3, #8]
   8555e:	2101      	movs	r1, #1
   85560:	e003      	b.n	8556a <_free_r+0xb6>
   85562:	68e0      	ldr	r0, [r4, #12]
   85564:	68a4      	ldr	r4, [r4, #8]
   85566:	60e0      	str	r0, [r4, #12]
   85568:	6084      	str	r4, [r0, #8]
   8556a:	f042 0001 	orr.w	r0, r2, #1
   8556e:	6058      	str	r0, [r3, #4]
   85570:	509a      	str	r2, [r3, r2]
   85572:	2900      	cmp	r1, #0
   85574:	d1ce      	bne.n	85514 <_free_r+0x60>
   85576:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8557a:	d20c      	bcs.n	85596 <_free_r+0xe2>
   8557c:	08d2      	lsrs	r2, r2, #3
   8557e:	1090      	asrs	r0, r2, #2
   85580:	2401      	movs	r4, #1
   85582:	fa04 f400 	lsl.w	r4, r4, r0
   85586:	4922      	ldr	r1, [pc, #136]	; (85610 <_free_r+0x15c>)
   85588:	6848      	ldr	r0, [r1, #4]
   8558a:	4320      	orrs	r0, r4
   8558c:	6048      	str	r0, [r1, #4]
   8558e:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   85592:	6881      	ldr	r1, [r0, #8]
   85594:	e035      	b.n	85602 <_free_r+0x14e>
   85596:	0a54      	lsrs	r4, r2, #9
   85598:	2c04      	cmp	r4, #4
   8559a:	d802      	bhi.n	855a2 <_free_r+0xee>
   8559c:	0994      	lsrs	r4, r2, #6
   8559e:	3438      	adds	r4, #56	; 0x38
   855a0:	e016      	b.n	855d0 <_free_r+0x11c>
   855a2:	2c14      	cmp	r4, #20
   855a4:	d801      	bhi.n	855aa <_free_r+0xf6>
   855a6:	345b      	adds	r4, #91	; 0x5b
   855a8:	e012      	b.n	855d0 <_free_r+0x11c>
   855aa:	2c54      	cmp	r4, #84	; 0x54
   855ac:	d802      	bhi.n	855b4 <_free_r+0x100>
   855ae:	0b14      	lsrs	r4, r2, #12
   855b0:	346e      	adds	r4, #110	; 0x6e
   855b2:	e00d      	b.n	855d0 <_free_r+0x11c>
   855b4:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
   855b8:	d802      	bhi.n	855c0 <_free_r+0x10c>
   855ba:	0bd4      	lsrs	r4, r2, #15
   855bc:	3477      	adds	r4, #119	; 0x77
   855be:	e007      	b.n	855d0 <_free_r+0x11c>
   855c0:	f240 5554 	movw	r5, #1364	; 0x554
   855c4:	42ac      	cmp	r4, r5
   855c6:	d802      	bhi.n	855ce <_free_r+0x11a>
   855c8:	0c94      	lsrs	r4, r2, #18
   855ca:	347c      	adds	r4, #124	; 0x7c
   855cc:	e000      	b.n	855d0 <_free_r+0x11c>
   855ce:	247e      	movs	r4, #126	; 0x7e
   855d0:	4d0f      	ldr	r5, [pc, #60]	; (85610 <_free_r+0x15c>)
   855d2:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   855d6:	6881      	ldr	r1, [r0, #8]
   855d8:	4281      	cmp	r1, r0
   855da:	d10c      	bne.n	855f6 <_free_r+0x142>
   855dc:	2201      	movs	r2, #1
   855de:	10a4      	asrs	r4, r4, #2
   855e0:	fa02 f404 	lsl.w	r4, r2, r4
   855e4:	6868      	ldr	r0, [r5, #4]
   855e6:	ea44 0200 	orr.w	r2, r4, r0
   855ea:	606a      	str	r2, [r5, #4]
   855ec:	4608      	mov	r0, r1
   855ee:	e008      	b.n	85602 <_free_r+0x14e>
   855f0:	6889      	ldr	r1, [r1, #8]
   855f2:	4281      	cmp	r1, r0
   855f4:	d004      	beq.n	85600 <_free_r+0x14c>
   855f6:	684c      	ldr	r4, [r1, #4]
   855f8:	f024 0403 	bic.w	r4, r4, #3
   855fc:	42a2      	cmp	r2, r4
   855fe:	d3f7      	bcc.n	855f0 <_free_r+0x13c>
   85600:	68c8      	ldr	r0, [r1, #12]
   85602:	60d8      	str	r0, [r3, #12]
   85604:	6099      	str	r1, [r3, #8]
   85606:	6083      	str	r3, [r0, #8]
   85608:	60cb      	str	r3, [r1, #12]
   8560a:	e783      	b.n	85514 <_free_r+0x60>
   8560c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8560e:	bf00      	nop
   85610:	200704bc 	.word	0x200704bc
   85614:	200708c8 	.word	0x200708c8
   85618:	20078c3c 	.word	0x20078c3c
   8561c:	200704c4 	.word	0x200704c4

00085620 <__sfvwrite_r>:
   85620:	6893      	ldr	r3, [r2, #8]
   85622:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85626:	4606      	mov	r6, r0
   85628:	460c      	mov	r4, r1
   8562a:	4691      	mov	r9, r2
   8562c:	b90b      	cbnz	r3, 85632 <__sfvwrite_r+0x12>
   8562e:	2000      	movs	r0, #0
   85630:	e14f      	b.n	858d2 <__sfvwrite_r+0x2b2>
   85632:	8988      	ldrh	r0, [r1, #12]
   85634:	f000 0108 	and.w	r1, r0, #8
   85638:	b20a      	sxth	r2, r1
   8563a:	b10a      	cbz	r2, 85640 <__sfvwrite_r+0x20>
   8563c:	6923      	ldr	r3, [r4, #16]
   8563e:	b95b      	cbnz	r3, 85658 <__sfvwrite_r+0x38>
   85640:	4630      	mov	r0, r6
   85642:	4621      	mov	r1, r4
   85644:	f7ff fc9a 	bl	84f7c <__swsetup_r>
   85648:	b130      	cbz	r0, 85658 <__sfvwrite_r+0x38>
   8564a:	89a1      	ldrh	r1, [r4, #12]
   8564c:	2209      	movs	r2, #9
   8564e:	f041 0040 	orr.w	r0, r1, #64	; 0x40
   85652:	81a0      	strh	r0, [r4, #12]
   85654:	6032      	str	r2, [r6, #0]
   85656:	e13a      	b.n	858ce <__sfvwrite_r+0x2ae>
   85658:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
   8565c:	f8d9 8000 	ldr.w	r8, [r9]
   85660:	f00a 0c02 	and.w	ip, sl, #2
   85664:	fa0f f58c 	sxth.w	r5, ip
   85668:	b315      	cbz	r5, 856b0 <__sfvwrite_r+0x90>
   8566a:	f04f 0a00 	mov.w	sl, #0
   8566e:	4657      	mov	r7, sl
   85670:	b937      	cbnz	r7, 85680 <__sfvwrite_r+0x60>
   85672:	f8d8 a000 	ldr.w	sl, [r8]
   85676:	f8d8 7004 	ldr.w	r7, [r8, #4]
   8567a:	f108 0808 	add.w	r8, r8, #8
   8567e:	e7f7      	b.n	85670 <__sfvwrite_r+0x50>
   85680:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   85684:	bf34      	ite	cc
   85686:	463b      	movcc	r3, r7
   85688:	f44f 6380 	movcs.w	r3, #1024	; 0x400
   8568c:	4630      	mov	r0, r6
   8568e:	69e1      	ldr	r1, [r4, #28]
   85690:	4652      	mov	r2, sl
   85692:	6a65      	ldr	r5, [r4, #36]	; 0x24
   85694:	47a8      	blx	r5
   85696:	2800      	cmp	r0, #0
   85698:	f340 8115 	ble.w	858c6 <__sfvwrite_r+0x2a6>
   8569c:	f8d9 1008 	ldr.w	r1, [r9, #8]
   856a0:	4482      	add	sl, r0
   856a2:	1a3f      	subs	r7, r7, r0
   856a4:	1a08      	subs	r0, r1, r0
   856a6:	f8c9 0008 	str.w	r0, [r9, #8]
   856aa:	2800      	cmp	r0, #0
   856ac:	d1e0      	bne.n	85670 <__sfvwrite_r+0x50>
   856ae:	e7be      	b.n	8562e <__sfvwrite_r+0xe>
   856b0:	f01a 0a01 	ands.w	sl, sl, #1
   856b4:	d004      	beq.n	856c0 <__sfvwrite_r+0xa0>
   856b6:	46ab      	mov	fp, r5
   856b8:	9501      	str	r5, [sp, #4]
   856ba:	462f      	mov	r7, r5
   856bc:	46aa      	mov	sl, r5
   856be:	e0c7      	b.n	85850 <__sfvwrite_r+0x230>
   856c0:	4655      	mov	r5, sl
   856c2:	b935      	cbnz	r5, 856d2 <__sfvwrite_r+0xb2>
   856c4:	f8d8 a000 	ldr.w	sl, [r8]
   856c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
   856cc:	f108 0808 	add.w	r8, r8, #8
   856d0:	e7f7      	b.n	856c2 <__sfvwrite_r+0xa2>
   856d2:	89a2      	ldrh	r2, [r4, #12]
   856d4:	f8d4 b008 	ldr.w	fp, [r4, #8]
   856d8:	f402 7000 	and.w	r0, r2, #512	; 0x200
   856dc:	b203      	sxth	r3, r0
   856de:	2b00      	cmp	r3, #0
   856e0:	d052      	beq.n	85788 <__sfvwrite_r+0x168>
   856e2:	455d      	cmp	r5, fp
   856e4:	d340      	bcc.n	85768 <__sfvwrite_r+0x148>
   856e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
   856ea:	d03b      	beq.n	85764 <__sfvwrite_r+0x144>
   856ec:	6963      	ldr	r3, [r4, #20]
   856ee:	f04f 0b03 	mov.w	fp, #3
   856f2:	fb0b f303 	mul.w	r3, fp, r3
   856f6:	6921      	ldr	r1, [r4, #16]
   856f8:	6827      	ldr	r7, [r4, #0]
   856fa:	2002      	movs	r0, #2
   856fc:	1a7f      	subs	r7, r7, r1
   856fe:	fb93 fcf0 	sdiv	ip, r3, r0
   85702:	1c7b      	adds	r3, r7, #1
   85704:	1958      	adds	r0, r3, r5
   85706:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   8570a:	4584      	cmp	ip, r0
   8570c:	bf28      	it	cs
   8570e:	4660      	movcs	r0, ip
   85710:	b213      	sxth	r3, r2
   85712:	9001      	str	r0, [sp, #4]
   85714:	4630      	mov	r0, r6
   85716:	b17b      	cbz	r3, 85738 <__sfvwrite_r+0x118>
   85718:	9901      	ldr	r1, [sp, #4]
   8571a:	f000 f9df 	bl	85adc <_malloc_r>
   8571e:	4683      	mov	fp, r0
   85720:	b198      	cbz	r0, 8574a <__sfvwrite_r+0x12a>
   85722:	6921      	ldr	r1, [r4, #16]
   85724:	463a      	mov	r2, r7
   85726:	f7fe fe97 	bl	84458 <memcpy>
   8572a:	89a1      	ldrh	r1, [r4, #12]
   8572c:	f421 6090 	bic.w	r0, r1, #1152	; 0x480
   85730:	f040 0280 	orr.w	r2, r0, #128	; 0x80
   85734:	81a2      	strh	r2, [r4, #12]
   85736:	e00b      	b.n	85750 <__sfvwrite_r+0x130>
   85738:	9a01      	ldr	r2, [sp, #4]
   8573a:	f000 fbfb 	bl	85f34 <_realloc_r>
   8573e:	4683      	mov	fp, r0
   85740:	b930      	cbnz	r0, 85750 <__sfvwrite_r+0x130>
   85742:	4630      	mov	r0, r6
   85744:	6921      	ldr	r1, [r4, #16]
   85746:	f7ff feb5 	bl	854b4 <_free_r>
   8574a:	230c      	movs	r3, #12
   8574c:	6033      	str	r3, [r6, #0]
   8574e:	e0ba      	b.n	858c6 <__sfvwrite_r+0x2a6>
   85750:	9901      	ldr	r1, [sp, #4]
   85752:	eb0b 0307 	add.w	r3, fp, r7
   85756:	1bcf      	subs	r7, r1, r7
   85758:	f8c4 b010 	str.w	fp, [r4, #16]
   8575c:	6023      	str	r3, [r4, #0]
   8575e:	6161      	str	r1, [r4, #20]
   85760:	46ab      	mov	fp, r5
   85762:	60a7      	str	r7, [r4, #8]
   85764:	455d      	cmp	r5, fp
   85766:	d200      	bcs.n	8576a <__sfvwrite_r+0x14a>
   85768:	46ab      	mov	fp, r5
   8576a:	465a      	mov	r2, fp
   8576c:	4651      	mov	r1, sl
   8576e:	6820      	ldr	r0, [r4, #0]
   85770:	f000 fbc4 	bl	85efc <memmove>
   85774:	68a0      	ldr	r0, [r4, #8]
   85776:	6823      	ldr	r3, [r4, #0]
   85778:	ebcb 0200 	rsb	r2, fp, r0
   8577c:	eb03 010b 	add.w	r1, r3, fp
   85780:	60a2      	str	r2, [r4, #8]
   85782:	6021      	str	r1, [r4, #0]
   85784:	46ab      	mov	fp, r5
   85786:	e02a      	b.n	857de <__sfvwrite_r+0x1be>
   85788:	6820      	ldr	r0, [r4, #0]
   8578a:	6921      	ldr	r1, [r4, #16]
   8578c:	4288      	cmp	r0, r1
   8578e:	d90f      	bls.n	857b0 <__sfvwrite_r+0x190>
   85790:	455d      	cmp	r5, fp
   85792:	d90d      	bls.n	857b0 <__sfvwrite_r+0x190>
   85794:	4651      	mov	r1, sl
   85796:	465a      	mov	r2, fp
   85798:	f000 fbb0 	bl	85efc <memmove>
   8579c:	6822      	ldr	r2, [r4, #0]
   8579e:	4621      	mov	r1, r4
   857a0:	eb02 000b 	add.w	r0, r2, fp
   857a4:	6020      	str	r0, [r4, #0]
   857a6:	4630      	mov	r0, r6
   857a8:	f7ff fc54 	bl	85054 <_fflush_r>
   857ac:	b1b8      	cbz	r0, 857de <__sfvwrite_r+0x1be>
   857ae:	e08a      	b.n	858c6 <__sfvwrite_r+0x2a6>
   857b0:	6963      	ldr	r3, [r4, #20]
   857b2:	429d      	cmp	r5, r3
   857b4:	d308      	bcc.n	857c8 <__sfvwrite_r+0x1a8>
   857b6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   857b8:	4630      	mov	r0, r6
   857ba:	69e1      	ldr	r1, [r4, #28]
   857bc:	4652      	mov	r2, sl
   857be:	47b8      	blx	r7
   857c0:	f1b0 0b00 	subs.w	fp, r0, #0
   857c4:	dc0b      	bgt.n	857de <__sfvwrite_r+0x1be>
   857c6:	e07e      	b.n	858c6 <__sfvwrite_r+0x2a6>
   857c8:	4651      	mov	r1, sl
   857ca:	462a      	mov	r2, r5
   857cc:	f000 fb96 	bl	85efc <memmove>
   857d0:	68a2      	ldr	r2, [r4, #8]
   857d2:	6823      	ldr	r3, [r4, #0]
   857d4:	1b50      	subs	r0, r2, r5
   857d6:	1959      	adds	r1, r3, r5
   857d8:	46ab      	mov	fp, r5
   857da:	60a0      	str	r0, [r4, #8]
   857dc:	6021      	str	r1, [r4, #0]
   857de:	f8d9 0008 	ldr.w	r0, [r9, #8]
   857e2:	44da      	add	sl, fp
   857e4:	ebcb 0200 	rsb	r2, fp, r0
   857e8:	ebcb 0505 	rsb	r5, fp, r5
   857ec:	f8c9 2008 	str.w	r2, [r9, #8]
   857f0:	2a00      	cmp	r2, #0
   857f2:	f47f af66 	bne.w	856c2 <__sfvwrite_r+0xa2>
   857f6:	e71a      	b.n	8562e <__sfvwrite_r+0xe>
   857f8:	9801      	ldr	r0, [sp, #4]
   857fa:	2800      	cmp	r0, #0
   857fc:	d032      	beq.n	85864 <__sfvwrite_r+0x244>
   857fe:	6820      	ldr	r0, [r4, #0]
   85800:	6921      	ldr	r1, [r4, #16]
   85802:	45d3      	cmp	fp, sl
   85804:	bf34      	ite	cc
   85806:	465b      	movcc	r3, fp
   85808:	4653      	movcs	r3, sl
   8580a:	4288      	cmp	r0, r1
   8580c:	68a5      	ldr	r5, [r4, #8]
   8580e:	f8d4 e014 	ldr.w	lr, [r4, #20]
   85812:	d937      	bls.n	85884 <__sfvwrite_r+0x264>
   85814:	4475      	add	r5, lr
   85816:	42ab      	cmp	r3, r5
   85818:	dd34      	ble.n	85884 <__sfvwrite_r+0x264>
   8581a:	4639      	mov	r1, r7
   8581c:	462a      	mov	r2, r5
   8581e:	f000 fb6d 	bl	85efc <memmove>
   85822:	6820      	ldr	r0, [r4, #0]
   85824:	4621      	mov	r1, r4
   85826:	1943      	adds	r3, r0, r5
   85828:	6023      	str	r3, [r4, #0]
   8582a:	4630      	mov	r0, r6
   8582c:	f7ff fc12 	bl	85054 <_fflush_r>
   85830:	2800      	cmp	r0, #0
   85832:	d148      	bne.n	858c6 <__sfvwrite_r+0x2a6>
   85834:	ebbb 0b05 	subs.w	fp, fp, r5
   85838:	d03d      	beq.n	858b6 <__sfvwrite_r+0x296>
   8583a:	f8d9 2008 	ldr.w	r2, [r9, #8]
   8583e:	197f      	adds	r7, r7, r5
   85840:	ebc5 0a0a 	rsb	sl, r5, sl
   85844:	1b55      	subs	r5, r2, r5
   85846:	f8c9 5008 	str.w	r5, [r9, #8]
   8584a:	2d00      	cmp	r5, #0
   8584c:	f43f aeef 	beq.w	8562e <__sfvwrite_r+0xe>
   85850:	f1ba 0f00 	cmp.w	sl, #0
   85854:	d1d0      	bne.n	857f8 <__sfvwrite_r+0x1d8>
   85856:	2100      	movs	r1, #0
   85858:	e898 0480 	ldmia.w	r8, {r7, sl}
   8585c:	9101      	str	r1, [sp, #4]
   8585e:	f108 0808 	add.w	r8, r8, #8
   85862:	e7f5      	b.n	85850 <__sfvwrite_r+0x230>
   85864:	4638      	mov	r0, r7
   85866:	210a      	movs	r1, #10
   85868:	4652      	mov	r2, sl
   8586a:	f000 fb39 	bl	85ee0 <memchr>
   8586e:	b120      	cbz	r0, 8587a <__sfvwrite_r+0x25a>
   85870:	f100 0101 	add.w	r1, r0, #1
   85874:	ebc7 0b01 	rsb	fp, r7, r1
   85878:	e001      	b.n	8587e <__sfvwrite_r+0x25e>
   8587a:	f10a 0b01 	add.w	fp, sl, #1
   8587e:	2201      	movs	r2, #1
   85880:	9201      	str	r2, [sp, #4]
   85882:	e7bc      	b.n	857fe <__sfvwrite_r+0x1de>
   85884:	4573      	cmp	r3, lr
   85886:	db08      	blt.n	8589a <__sfvwrite_r+0x27a>
   85888:	6a65      	ldr	r5, [r4, #36]	; 0x24
   8588a:	4630      	mov	r0, r6
   8588c:	69e1      	ldr	r1, [r4, #28]
   8588e:	463a      	mov	r2, r7
   85890:	4673      	mov	r3, lr
   85892:	47a8      	blx	r5
   85894:	1e05      	subs	r5, r0, #0
   85896:	dccd      	bgt.n	85834 <__sfvwrite_r+0x214>
   85898:	e015      	b.n	858c6 <__sfvwrite_r+0x2a6>
   8589a:	461a      	mov	r2, r3
   8589c:	4639      	mov	r1, r7
   8589e:	9300      	str	r3, [sp, #0]
   858a0:	f000 fb2c 	bl	85efc <memmove>
   858a4:	9b00      	ldr	r3, [sp, #0]
   858a6:	6825      	ldr	r5, [r4, #0]
   858a8:	68a0      	ldr	r0, [r4, #8]
   858aa:	18e9      	adds	r1, r5, r3
   858ac:	1ac2      	subs	r2, r0, r3
   858ae:	60a2      	str	r2, [r4, #8]
   858b0:	6021      	str	r1, [r4, #0]
   858b2:	461d      	mov	r5, r3
   858b4:	e7be      	b.n	85834 <__sfvwrite_r+0x214>
   858b6:	4630      	mov	r0, r6
   858b8:	4621      	mov	r1, r4
   858ba:	f7ff fbcb 	bl	85054 <_fflush_r>
   858be:	b910      	cbnz	r0, 858c6 <__sfvwrite_r+0x2a6>
   858c0:	f8cd b004 	str.w	fp, [sp, #4]
   858c4:	e7b9      	b.n	8583a <__sfvwrite_r+0x21a>
   858c6:	89a2      	ldrh	r2, [r4, #12]
   858c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   858cc:	81a3      	strh	r3, [r4, #12]
   858ce:	f04f 30ff 	mov.w	r0, #4294967295
   858d2:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000858d6 <_fwalk>:
   858d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   858da:	4604      	mov	r4, r0
   858dc:	4688      	mov	r8, r1
   858de:	f7ff fd0f 	bl	85300 <__sfp_lock_acquire>
   858e2:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
   858e6:	2600      	movs	r6, #0
   858e8:	b18c      	cbz	r4, 8590e <_fwalk+0x38>
   858ea:	68a5      	ldr	r5, [r4, #8]
   858ec:	6867      	ldr	r7, [r4, #4]
   858ee:	3f01      	subs	r7, #1
   858f0:	d40b      	bmi.n	8590a <_fwalk+0x34>
   858f2:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   858f6:	b133      	cbz	r3, 85906 <_fwalk+0x30>
   858f8:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   858fc:	1c43      	adds	r3, r0, #1
   858fe:	d002      	beq.n	85906 <_fwalk+0x30>
   85900:	4628      	mov	r0, r5
   85902:	47c0      	blx	r8
   85904:	4306      	orrs	r6, r0
   85906:	3568      	adds	r5, #104	; 0x68
   85908:	e7f1      	b.n	858ee <_fwalk+0x18>
   8590a:	6824      	ldr	r4, [r4, #0]
   8590c:	e7ec      	b.n	858e8 <_fwalk+0x12>
   8590e:	f7ff fcf8 	bl	85302 <__sfp_lock_release>
   85912:	4630      	mov	r0, r6
   85914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00085918 <_fwalk_reent>:
   85918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8591c:	4680      	mov	r8, r0
   8591e:	4689      	mov	r9, r1
   85920:	f7ff fcee 	bl	85300 <__sfp_lock_acquire>
   85924:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
   85928:	2600      	movs	r6, #0
   8592a:	b194      	cbz	r4, 85952 <_fwalk_reent+0x3a>
   8592c:	68a5      	ldr	r5, [r4, #8]
   8592e:	6867      	ldr	r7, [r4, #4]
   85930:	3f01      	subs	r7, #1
   85932:	d40c      	bmi.n	8594e <_fwalk_reent+0x36>
   85934:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   85938:	b13b      	cbz	r3, 8594a <_fwalk_reent+0x32>
   8593a:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   8593e:	1c43      	adds	r3, r0, #1
   85940:	d003      	beq.n	8594a <_fwalk_reent+0x32>
   85942:	4640      	mov	r0, r8
   85944:	4629      	mov	r1, r5
   85946:	47c8      	blx	r9
   85948:	4306      	orrs	r6, r0
   8594a:	3568      	adds	r5, #104	; 0x68
   8594c:	e7f0      	b.n	85930 <_fwalk_reent+0x18>
   8594e:	6824      	ldr	r4, [r4, #0]
   85950:	e7eb      	b.n	8592a <_fwalk_reent+0x12>
   85952:	f7ff fcd6 	bl	85302 <__sfp_lock_release>
   85956:	4630      	mov	r0, r6
   85958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008595c <_setlocale_r>:
   8595c:	b510      	push	{r4, lr}
   8595e:	4614      	mov	r4, r2
   85960:	b90a      	cbnz	r2, 85966 <_setlocale_r+0xa>
   85962:	480c      	ldr	r0, [pc, #48]	; (85994 <_setlocale_r+0x38>)
   85964:	bd10      	pop	{r4, pc}
   85966:	4610      	mov	r0, r2
   85968:	490b      	ldr	r1, [pc, #44]	; (85998 <_setlocale_r+0x3c>)
   8596a:	f000 fca8 	bl	862be <strcmp>
   8596e:	2800      	cmp	r0, #0
   85970:	d0f7      	beq.n	85962 <_setlocale_r+0x6>
   85972:	4620      	mov	r0, r4
   85974:	4907      	ldr	r1, [pc, #28]	; (85994 <_setlocale_r+0x38>)
   85976:	f000 fca2 	bl	862be <strcmp>
   8597a:	2800      	cmp	r0, #0
   8597c:	d0f1      	beq.n	85962 <_setlocale_r+0x6>
   8597e:	4620      	mov	r0, r4
   85980:	4906      	ldr	r1, [pc, #24]	; (8599c <_setlocale_r+0x40>)
   85982:	f000 fc9c 	bl	862be <strcmp>
   85986:	4b03      	ldr	r3, [pc, #12]	; (85994 <_setlocale_r+0x38>)
   85988:	2800      	cmp	r0, #0
   8598a:	bf0c      	ite	eq
   8598c:	4618      	moveq	r0, r3
   8598e:	2000      	movne	r0, #0
   85990:	bd10      	pop	{r4, pc}
   85992:	bf00      	nop
   85994:	00086bd8 	.word	0x00086bd8
   85998:	00086c1c 	.word	0x00086c1c
   8599c:	00086c23 	.word	0x00086c23

000859a0 <__locale_charset>:
   859a0:	4800      	ldr	r0, [pc, #0]	; (859a4 <__locale_charset+0x4>)
   859a2:	4770      	bx	lr
   859a4:	20070440 	.word	0x20070440

000859a8 <__locale_mb_cur_max>:
   859a8:	4b01      	ldr	r3, [pc, #4]	; (859b0 <__locale_mb_cur_max+0x8>)
   859aa:	6a18      	ldr	r0, [r3, #32]
   859ac:	4770      	bx	lr
   859ae:	bf00      	nop
   859b0:	20070440 	.word	0x20070440

000859b4 <__locale_msgcharset>:
   859b4:	4800      	ldr	r0, [pc, #0]	; (859b8 <__locale_msgcharset+0x4>)
   859b6:	4770      	bx	lr
   859b8:	20070464 	.word	0x20070464

000859bc <__locale_cjk_lang>:
   859bc:	2000      	movs	r0, #0
   859be:	4770      	bx	lr

000859c0 <_localeconv_r>:
   859c0:	4800      	ldr	r0, [pc, #0]	; (859c4 <_localeconv_r+0x4>)
   859c2:	4770      	bx	lr
   859c4:	20070484 	.word	0x20070484

000859c8 <setlocale>:
   859c8:	460a      	mov	r2, r1
   859ca:	4903      	ldr	r1, [pc, #12]	; (859d8 <setlocale+0x10>)
   859cc:	4603      	mov	r3, r0
   859ce:	6808      	ldr	r0, [r1, #0]
   859d0:	4619      	mov	r1, r3
   859d2:	f7ff bfc3 	b.w	8595c <_setlocale_r>
   859d6:	bf00      	nop
   859d8:	20070010 	.word	0x20070010

000859dc <localeconv>:
   859dc:	4800      	ldr	r0, [pc, #0]	; (859e0 <localeconv+0x4>)
   859de:	4770      	bx	lr
   859e0:	20070484 	.word	0x20070484

000859e4 <__smakebuf_r>:
   859e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   859e6:	898b      	ldrh	r3, [r1, #12]
   859e8:	460c      	mov	r4, r1
   859ea:	f003 0102 	and.w	r1, r3, #2
   859ee:	b20a      	sxth	r2, r1
   859f0:	b091      	sub	sp, #68	; 0x44
   859f2:	4606      	mov	r6, r0
   859f4:	2a00      	cmp	r2, #0
   859f6:	d13f      	bne.n	85a78 <__smakebuf_r+0x94>
   859f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   859fc:	2900      	cmp	r1, #0
   859fe:	da0d      	bge.n	85a1c <__smakebuf_r+0x38>
   85a00:	89a7      	ldrh	r7, [r4, #12]
   85a02:	f007 0280 	and.w	r2, r7, #128	; 0x80
   85a06:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
   85a0a:	b210      	sxth	r0, r2
   85a0c:	2800      	cmp	r0, #0
   85a0e:	bf0c      	ite	eq
   85a10:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   85a14:	2540      	movne	r5, #64	; 0x40
   85a16:	81a3      	strh	r3, [r4, #12]
   85a18:	2700      	movs	r7, #0
   85a1a:	e020      	b.n	85a5e <__smakebuf_r+0x7a>
   85a1c:	aa01      	add	r2, sp, #4
   85a1e:	f000 fd1b 	bl	86458 <_fstat_r>
   85a22:	2800      	cmp	r0, #0
   85a24:	dbec      	blt.n	85a00 <__smakebuf_r+0x1c>
   85a26:	9802      	ldr	r0, [sp, #8]
   85a28:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
   85a2c:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
   85a30:	425f      	negs	r7, r3
   85a32:	415f      	adcs	r7, r3
   85a34:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   85a38:	d10b      	bne.n	85a52 <__smakebuf_r+0x6e>
   85a3a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   85a3c:	4a1d      	ldr	r2, [pc, #116]	; (85ab4 <__smakebuf_r+0xd0>)
   85a3e:	4291      	cmp	r1, r2
   85a40:	d107      	bne.n	85a52 <__smakebuf_r+0x6e>
   85a42:	89a3      	ldrh	r3, [r4, #12]
   85a44:	f44f 6580 	mov.w	r5, #1024	; 0x400
   85a48:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
   85a4c:	81a1      	strh	r1, [r4, #12]
   85a4e:	64e5      	str	r5, [r4, #76]	; 0x4c
   85a50:	e005      	b.n	85a5e <__smakebuf_r+0x7a>
   85a52:	89a0      	ldrh	r0, [r4, #12]
   85a54:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
   85a58:	81a5      	strh	r5, [r4, #12]
   85a5a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   85a5e:	4630      	mov	r0, r6
   85a60:	4629      	mov	r1, r5
   85a62:	f000 f83b 	bl	85adc <_malloc_r>
   85a66:	b970      	cbnz	r0, 85a86 <__smakebuf_r+0xa2>
   85a68:	89a3      	ldrh	r3, [r4, #12]
   85a6a:	f403 7200 	and.w	r2, r3, #512	; 0x200
   85a6e:	b210      	sxth	r0, r2
   85a70:	b9e8      	cbnz	r0, 85aae <__smakebuf_r+0xca>
   85a72:	f043 0102 	orr.w	r1, r3, #2
   85a76:	81a1      	strh	r1, [r4, #12]
   85a78:	f104 0343 	add.w	r3, r4, #67	; 0x43
   85a7c:	2201      	movs	r2, #1
   85a7e:	6023      	str	r3, [r4, #0]
   85a80:	6123      	str	r3, [r4, #16]
   85a82:	6162      	str	r2, [r4, #20]
   85a84:	e013      	b.n	85aae <__smakebuf_r+0xca>
   85a86:	89a2      	ldrh	r2, [r4, #12]
   85a88:	490b      	ldr	r1, [pc, #44]	; (85ab8 <__smakebuf_r+0xd4>)
   85a8a:	f042 0380 	orr.w	r3, r2, #128	; 0x80
   85a8e:	63f1      	str	r1, [r6, #60]	; 0x3c
   85a90:	81a3      	strh	r3, [r4, #12]
   85a92:	6020      	str	r0, [r4, #0]
   85a94:	6120      	str	r0, [r4, #16]
   85a96:	6165      	str	r5, [r4, #20]
   85a98:	b14f      	cbz	r7, 85aae <__smakebuf_r+0xca>
   85a9a:	4630      	mov	r0, r6
   85a9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85aa0:	f000 fcec 	bl	8647c <_isatty_r>
   85aa4:	b118      	cbz	r0, 85aae <__smakebuf_r+0xca>
   85aa6:	89a0      	ldrh	r0, [r4, #12]
   85aa8:	f040 0101 	orr.w	r1, r0, #1
   85aac:	81a1      	strh	r1, [r4, #12]
   85aae:	b011      	add	sp, #68	; 0x44
   85ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85ab2:	bf00      	nop
   85ab4:	00086293 	.word	0x00086293
   85ab8:	000851ad 	.word	0x000851ad

00085abc <malloc>:
   85abc:	4b02      	ldr	r3, [pc, #8]	; (85ac8 <malloc+0xc>)
   85abe:	4601      	mov	r1, r0
   85ac0:	6818      	ldr	r0, [r3, #0]
   85ac2:	f000 b80b 	b.w	85adc <_malloc_r>
   85ac6:	bf00      	nop
   85ac8:	20070010 	.word	0x20070010

00085acc <free>:
   85acc:	4b02      	ldr	r3, [pc, #8]	; (85ad8 <free+0xc>)
   85ace:	4601      	mov	r1, r0
   85ad0:	6818      	ldr	r0, [r3, #0]
   85ad2:	f7ff bcef 	b.w	854b4 <_free_r>
   85ad6:	bf00      	nop
   85ad8:	20070010 	.word	0x20070010

00085adc <_malloc_r>:
   85adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85ae0:	f101 040b 	add.w	r4, r1, #11
   85ae4:	2c16      	cmp	r4, #22
   85ae6:	4606      	mov	r6, r0
   85ae8:	d903      	bls.n	85af2 <_malloc_r+0x16>
   85aea:	f034 0407 	bics.w	r4, r4, #7
   85aee:	d501      	bpl.n	85af4 <_malloc_r+0x18>
   85af0:	e002      	b.n	85af8 <_malloc_r+0x1c>
   85af2:	2410      	movs	r4, #16
   85af4:	428c      	cmp	r4, r1
   85af6:	d202      	bcs.n	85afe <_malloc_r+0x22>
   85af8:	250c      	movs	r5, #12
   85afa:	6035      	str	r5, [r6, #0]
   85afc:	e1d9      	b.n	85eb2 <_malloc_r+0x3d6>
   85afe:	4630      	mov	r0, r6
   85b00:	f000 fa16 	bl	85f30 <__malloc_lock>
   85b04:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   85b08:	d214      	bcs.n	85b34 <_malloc_r+0x58>
   85b0a:	4da0      	ldr	r5, [pc, #640]	; (85d8c <_malloc_r+0x2b0>)
   85b0c:	08e1      	lsrs	r1, r4, #3
   85b0e:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   85b12:	68c5      	ldr	r5, [r0, #12]
   85b14:	4285      	cmp	r5, r0
   85b16:	d105      	bne.n	85b24 <_malloc_r+0x48>
   85b18:	f105 0308 	add.w	r3, r5, #8
   85b1c:	696d      	ldr	r5, [r5, #20]
   85b1e:	1c8a      	adds	r2, r1, #2
   85b20:	429d      	cmp	r5, r3
   85b22:	d044      	beq.n	85bae <_malloc_r+0xd2>
   85b24:	68e8      	ldr	r0, [r5, #12]
   85b26:	68a9      	ldr	r1, [r5, #8]
   85b28:	686a      	ldr	r2, [r5, #4]
   85b2a:	60c8      	str	r0, [r1, #12]
   85b2c:	f022 0303 	bic.w	r3, r2, #3
   85b30:	6081      	str	r1, [r0, #8]
   85b32:	e059      	b.n	85be8 <_malloc_r+0x10c>
   85b34:	0a62      	lsrs	r2, r4, #9
   85b36:	d101      	bne.n	85b3c <_malloc_r+0x60>
   85b38:	08e2      	lsrs	r2, r4, #3
   85b3a:	e01b      	b.n	85b74 <_malloc_r+0x98>
   85b3c:	2a04      	cmp	r2, #4
   85b3e:	d802      	bhi.n	85b46 <_malloc_r+0x6a>
   85b40:	09a2      	lsrs	r2, r4, #6
   85b42:	3238      	adds	r2, #56	; 0x38
   85b44:	e016      	b.n	85b74 <_malloc_r+0x98>
   85b46:	2a14      	cmp	r2, #20
   85b48:	d801      	bhi.n	85b4e <_malloc_r+0x72>
   85b4a:	325b      	adds	r2, #91	; 0x5b
   85b4c:	e012      	b.n	85b74 <_malloc_r+0x98>
   85b4e:	2a54      	cmp	r2, #84	; 0x54
   85b50:	d802      	bhi.n	85b58 <_malloc_r+0x7c>
   85b52:	0b22      	lsrs	r2, r4, #12
   85b54:	326e      	adds	r2, #110	; 0x6e
   85b56:	e00d      	b.n	85b74 <_malloc_r+0x98>
   85b58:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85b5c:	d802      	bhi.n	85b64 <_malloc_r+0x88>
   85b5e:	0be2      	lsrs	r2, r4, #15
   85b60:	3277      	adds	r2, #119	; 0x77
   85b62:	e007      	b.n	85b74 <_malloc_r+0x98>
   85b64:	f240 5354 	movw	r3, #1364	; 0x554
   85b68:	429a      	cmp	r2, r3
   85b6a:	d802      	bhi.n	85b72 <_malloc_r+0x96>
   85b6c:	0ca2      	lsrs	r2, r4, #18
   85b6e:	327c      	adds	r2, #124	; 0x7c
   85b70:	e000      	b.n	85b74 <_malloc_r+0x98>
   85b72:	227e      	movs	r2, #126	; 0x7e
   85b74:	4885      	ldr	r0, [pc, #532]	; (85d8c <_malloc_r+0x2b0>)
   85b76:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
   85b7a:	68dd      	ldr	r5, [r3, #12]
   85b7c:	429d      	cmp	r5, r3
   85b7e:	d015      	beq.n	85bac <_malloc_r+0xd0>
   85b80:	6869      	ldr	r1, [r5, #4]
   85b82:	f021 0103 	bic.w	r1, r1, #3
   85b86:	1b08      	subs	r0, r1, r4
   85b88:	280f      	cmp	r0, #15
   85b8a:	dd01      	ble.n	85b90 <_malloc_r+0xb4>
   85b8c:	3a01      	subs	r2, #1
   85b8e:	e00d      	b.n	85bac <_malloc_r+0xd0>
   85b90:	2800      	cmp	r0, #0
   85b92:	db09      	blt.n	85ba8 <_malloc_r+0xcc>
   85b94:	68eb      	ldr	r3, [r5, #12]
   85b96:	68aa      	ldr	r2, [r5, #8]
   85b98:	60d3      	str	r3, [r2, #12]
   85b9a:	609a      	str	r2, [r3, #8]
   85b9c:	186b      	adds	r3, r5, r1
   85b9e:	685a      	ldr	r2, [r3, #4]
   85ba0:	f042 0001 	orr.w	r0, r2, #1
   85ba4:	6058      	str	r0, [r3, #4]
   85ba6:	e190      	b.n	85eca <_malloc_r+0x3ee>
   85ba8:	68ed      	ldr	r5, [r5, #12]
   85baa:	e7e7      	b.n	85b7c <_malloc_r+0xa0>
   85bac:	3201      	adds	r2, #1
   85bae:	4977      	ldr	r1, [pc, #476]	; (85d8c <_malloc_r+0x2b0>)
   85bb0:	690d      	ldr	r5, [r1, #16]
   85bb2:	f101 0708 	add.w	r7, r1, #8
   85bb6:	42bd      	cmp	r5, r7
   85bb8:	d068      	beq.n	85c8c <_malloc_r+0x1b0>
   85bba:	6868      	ldr	r0, [r5, #4]
   85bbc:	f020 0303 	bic.w	r3, r0, #3
   85bc0:	1b18      	subs	r0, r3, r4
   85bc2:	280f      	cmp	r0, #15
   85bc4:	dd0c      	ble.n	85be0 <_malloc_r+0x104>
   85bc6:	192b      	adds	r3, r5, r4
   85bc8:	614b      	str	r3, [r1, #20]
   85bca:	610b      	str	r3, [r1, #16]
   85bcc:	f044 0401 	orr.w	r4, r4, #1
   85bd0:	f040 0101 	orr.w	r1, r0, #1
   85bd4:	606c      	str	r4, [r5, #4]
   85bd6:	60df      	str	r7, [r3, #12]
   85bd8:	609f      	str	r7, [r3, #8]
   85bda:	6059      	str	r1, [r3, #4]
   85bdc:	5018      	str	r0, [r3, r0]
   85bde:	e174      	b.n	85eca <_malloc_r+0x3ee>
   85be0:	2800      	cmp	r0, #0
   85be2:	614f      	str	r7, [r1, #20]
   85be4:	610f      	str	r7, [r1, #16]
   85be6:	db01      	blt.n	85bec <_malloc_r+0x110>
   85be8:	18eb      	adds	r3, r5, r3
   85bea:	e7d8      	b.n	85b9e <_malloc_r+0xc2>
   85bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85bf0:	d20f      	bcs.n	85c12 <_malloc_r+0x136>
   85bf2:	08db      	lsrs	r3, r3, #3
   85bf4:	1098      	asrs	r0, r3, #2
   85bf6:	2701      	movs	r7, #1
   85bf8:	fa07 f700 	lsl.w	r7, r7, r0
   85bfc:	6848      	ldr	r0, [r1, #4]
   85bfe:	4307      	orrs	r7, r0
   85c00:	604f      	str	r7, [r1, #4]
   85c02:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   85c06:	688b      	ldr	r3, [r1, #8]
   85c08:	60e9      	str	r1, [r5, #12]
   85c0a:	60ab      	str	r3, [r5, #8]
   85c0c:	60dd      	str	r5, [r3, #12]
   85c0e:	608d      	str	r5, [r1, #8]
   85c10:	e03c      	b.n	85c8c <_malloc_r+0x1b0>
   85c12:	0a58      	lsrs	r0, r3, #9
   85c14:	2804      	cmp	r0, #4
   85c16:	d802      	bhi.n	85c1e <_malloc_r+0x142>
   85c18:	0998      	lsrs	r0, r3, #6
   85c1a:	3038      	adds	r0, #56	; 0x38
   85c1c:	e016      	b.n	85c4c <_malloc_r+0x170>
   85c1e:	2814      	cmp	r0, #20
   85c20:	d801      	bhi.n	85c26 <_malloc_r+0x14a>
   85c22:	305b      	adds	r0, #91	; 0x5b
   85c24:	e012      	b.n	85c4c <_malloc_r+0x170>
   85c26:	2854      	cmp	r0, #84	; 0x54
   85c28:	d802      	bhi.n	85c30 <_malloc_r+0x154>
   85c2a:	0b18      	lsrs	r0, r3, #12
   85c2c:	306e      	adds	r0, #110	; 0x6e
   85c2e:	e00d      	b.n	85c4c <_malloc_r+0x170>
   85c30:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   85c34:	d802      	bhi.n	85c3c <_malloc_r+0x160>
   85c36:	0bd8      	lsrs	r0, r3, #15
   85c38:	3077      	adds	r0, #119	; 0x77
   85c3a:	e007      	b.n	85c4c <_malloc_r+0x170>
   85c3c:	f240 5754 	movw	r7, #1364	; 0x554
   85c40:	42b8      	cmp	r0, r7
   85c42:	d802      	bhi.n	85c4a <_malloc_r+0x16e>
   85c44:	0c98      	lsrs	r0, r3, #18
   85c46:	307c      	adds	r0, #124	; 0x7c
   85c48:	e000      	b.n	85c4c <_malloc_r+0x170>
   85c4a:	207e      	movs	r0, #126	; 0x7e
   85c4c:	f8df e13c 	ldr.w	lr, [pc, #316]	; 85d8c <_malloc_r+0x2b0>
   85c50:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
   85c54:	68b9      	ldr	r1, [r7, #8]
   85c56:	42b9      	cmp	r1, r7
   85c58:	d10e      	bne.n	85c78 <_malloc_r+0x19c>
   85c5a:	1087      	asrs	r7, r0, #2
   85c5c:	2301      	movs	r3, #1
   85c5e:	fa03 f007 	lsl.w	r0, r3, r7
   85c62:	f8de 7004 	ldr.w	r7, [lr, #4]
   85c66:	ea40 0307 	orr.w	r3, r0, r7
   85c6a:	f8ce 3004 	str.w	r3, [lr, #4]
   85c6e:	4608      	mov	r0, r1
   85c70:	e008      	b.n	85c84 <_malloc_r+0x1a8>
   85c72:	6889      	ldr	r1, [r1, #8]
   85c74:	42b9      	cmp	r1, r7
   85c76:	d004      	beq.n	85c82 <_malloc_r+0x1a6>
   85c78:	6848      	ldr	r0, [r1, #4]
   85c7a:	f020 0003 	bic.w	r0, r0, #3
   85c7e:	4283      	cmp	r3, r0
   85c80:	d3f7      	bcc.n	85c72 <_malloc_r+0x196>
   85c82:	68c8      	ldr	r0, [r1, #12]
   85c84:	60e8      	str	r0, [r5, #12]
   85c86:	60a9      	str	r1, [r5, #8]
   85c88:	60cd      	str	r5, [r1, #12]
   85c8a:	6085      	str	r5, [r0, #8]
   85c8c:	1095      	asrs	r5, r2, #2
   85c8e:	2001      	movs	r0, #1
   85c90:	fa00 f305 	lsl.w	r3, r0, r5
   85c94:	4f3d      	ldr	r7, [pc, #244]	; (85d8c <_malloc_r+0x2b0>)
   85c96:	6879      	ldr	r1, [r7, #4]
   85c98:	428b      	cmp	r3, r1
   85c9a:	d85d      	bhi.n	85d58 <_malloc_r+0x27c>
   85c9c:	420b      	tst	r3, r1
   85c9e:	d105      	bne.n	85cac <_malloc_r+0x1d0>
   85ca0:	f022 0203 	bic.w	r2, r2, #3
   85ca4:	005b      	lsls	r3, r3, #1
   85ca6:	3204      	adds	r2, #4
   85ca8:	420b      	tst	r3, r1
   85caa:	d0fb      	beq.n	85ca4 <_malloc_r+0x1c8>
   85cac:	4d37      	ldr	r5, [pc, #220]	; (85d8c <_malloc_r+0x2b0>)
   85cae:	4610      	mov	r0, r2
   85cb0:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
   85cb4:	4677      	mov	r7, lr
   85cb6:	68fd      	ldr	r5, [r7, #12]
   85cb8:	42bd      	cmp	r5, r7
   85cba:	d02d      	beq.n	85d18 <_malloc_r+0x23c>
   85cbc:	6869      	ldr	r1, [r5, #4]
   85cbe:	f021 0c03 	bic.w	ip, r1, #3
   85cc2:	ebc4 010c 	rsb	r1, r4, ip
   85cc6:	290f      	cmp	r1, #15
   85cc8:	dd13      	ble.n	85cf2 <_malloc_r+0x216>
   85cca:	192b      	adds	r3, r5, r4
   85ccc:	f044 0401 	orr.w	r4, r4, #1
   85cd0:	68ea      	ldr	r2, [r5, #12]
   85cd2:	606c      	str	r4, [r5, #4]
   85cd4:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85cd8:	5059      	str	r1, [r3, r1]
   85cda:	60c2      	str	r2, [r0, #12]
   85cdc:	6090      	str	r0, [r2, #8]
   85cde:	4a2b      	ldr	r2, [pc, #172]	; (85d8c <_malloc_r+0x2b0>)
   85ce0:	f041 0001 	orr.w	r0, r1, #1
   85ce4:	6153      	str	r3, [r2, #20]
   85ce6:	6113      	str	r3, [r2, #16]
   85ce8:	3208      	adds	r2, #8
   85cea:	60da      	str	r2, [r3, #12]
   85cec:	609a      	str	r2, [r3, #8]
   85cee:	6058      	str	r0, [r3, #4]
   85cf0:	e00c      	b.n	85d0c <_malloc_r+0x230>
   85cf2:	2900      	cmp	r1, #0
   85cf4:	db0e      	blt.n	85d14 <_malloc_r+0x238>
   85cf6:	eb05 000c 	add.w	r0, r5, ip
   85cfa:	6842      	ldr	r2, [r0, #4]
   85cfc:	68e9      	ldr	r1, [r5, #12]
   85cfe:	f042 0301 	orr.w	r3, r2, #1
   85d02:	6043      	str	r3, [r0, #4]
   85d04:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85d08:	60c1      	str	r1, [r0, #12]
   85d0a:	6088      	str	r0, [r1, #8]
   85d0c:	4630      	mov	r0, r6
   85d0e:	f000 f910 	bl	85f32 <__malloc_unlock>
   85d12:	e0de      	b.n	85ed2 <_malloc_r+0x3f6>
   85d14:	68ed      	ldr	r5, [r5, #12]
   85d16:	e7cf      	b.n	85cb8 <_malloc_r+0x1dc>
   85d18:	3001      	adds	r0, #1
   85d1a:	0781      	lsls	r1, r0, #30
   85d1c:	f105 0708 	add.w	r7, r5, #8
   85d20:	d1c9      	bne.n	85cb6 <_malloc_r+0x1da>
   85d22:	4671      	mov	r1, lr
   85d24:	0795      	lsls	r5, r2, #30
   85d26:	d105      	bne.n	85d34 <_malloc_r+0x258>
   85d28:	4a18      	ldr	r2, [pc, #96]	; (85d8c <_malloc_r+0x2b0>)
   85d2a:	6855      	ldr	r5, [r2, #4]
   85d2c:	ea25 0503 	bic.w	r5, r5, r3
   85d30:	6055      	str	r5, [r2, #4]
   85d32:	e005      	b.n	85d40 <_malloc_r+0x264>
   85d34:	f1a1 0708 	sub.w	r7, r1, #8
   85d38:	6809      	ldr	r1, [r1, #0]
   85d3a:	3a01      	subs	r2, #1
   85d3c:	42b9      	cmp	r1, r7
   85d3e:	d0f1      	beq.n	85d24 <_malloc_r+0x248>
   85d40:	4f12      	ldr	r7, [pc, #72]	; (85d8c <_malloc_r+0x2b0>)
   85d42:	005b      	lsls	r3, r3, #1
   85d44:	687f      	ldr	r7, [r7, #4]
   85d46:	42bb      	cmp	r3, r7
   85d48:	d806      	bhi.n	85d58 <_malloc_r+0x27c>
   85d4a:	b12b      	cbz	r3, 85d58 <_malloc_r+0x27c>
   85d4c:	4602      	mov	r2, r0
   85d4e:	423b      	tst	r3, r7
   85d50:	d1ac      	bne.n	85cac <_malloc_r+0x1d0>
   85d52:	3204      	adds	r2, #4
   85d54:	005b      	lsls	r3, r3, #1
   85d56:	e7fa      	b.n	85d4e <_malloc_r+0x272>
   85d58:	4b0c      	ldr	r3, [pc, #48]	; (85d8c <_malloc_r+0x2b0>)
   85d5a:	689f      	ldr	r7, [r3, #8]
   85d5c:	4619      	mov	r1, r3
   85d5e:	6878      	ldr	r0, [r7, #4]
   85d60:	f020 0903 	bic.w	r9, r0, #3
   85d64:	45a1      	cmp	r9, r4
   85d66:	d304      	bcc.n	85d72 <_malloc_r+0x296>
   85d68:	ebc4 0009 	rsb	r0, r4, r9
   85d6c:	280f      	cmp	r0, #15
   85d6e:	f300 80a2 	bgt.w	85eb6 <_malloc_r+0x3da>
   85d72:	4a07      	ldr	r2, [pc, #28]	; (85d90 <_malloc_r+0x2b4>)
   85d74:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
   85d78:	6815      	ldr	r5, [r2, #0]
   85d7a:	3301      	adds	r3, #1
   85d7c:	eb07 0a09 	add.w	sl, r7, r9
   85d80:	eb04 0805 	add.w	r8, r4, r5
   85d84:	d106      	bne.n	85d94 <_malloc_r+0x2b8>
   85d86:	f108 0810 	add.w	r8, r8, #16
   85d8a:	e00b      	b.n	85da4 <_malloc_r+0x2c8>
   85d8c:	200704bc 	.word	0x200704bc
   85d90:	20078c3c 	.word	0x20078c3c
   85d94:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   85d98:	f100 010f 	add.w	r1, r0, #15
   85d9c:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   85da0:	f022 080f 	bic.w	r8, r2, #15
   85da4:	4630      	mov	r0, r6
   85da6:	4641      	mov	r1, r8
   85da8:	f000 fa32 	bl	86210 <_sbrk_r>
   85dac:	1c42      	adds	r2, r0, #1
   85dae:	4605      	mov	r5, r0
   85db0:	d071      	beq.n	85e96 <_malloc_r+0x3ba>
   85db2:	4550      	cmp	r0, sl
   85db4:	d202      	bcs.n	85dbc <_malloc_r+0x2e0>
   85db6:	4b48      	ldr	r3, [pc, #288]	; (85ed8 <_malloc_r+0x3fc>)
   85db8:	429f      	cmp	r7, r3
   85dba:	d16c      	bne.n	85e96 <_malloc_r+0x3ba>
   85dbc:	4847      	ldr	r0, [pc, #284]	; (85edc <_malloc_r+0x400>)
   85dbe:	4555      	cmp	r5, sl
   85dc0:	6841      	ldr	r1, [r0, #4]
   85dc2:	4a45      	ldr	r2, [pc, #276]	; (85ed8 <_malloc_r+0x3fc>)
   85dc4:	eb08 0301 	add.w	r3, r8, r1
   85dc8:	6043      	str	r3, [r0, #4]
   85dca:	d107      	bne.n	85ddc <_malloc_r+0x300>
   85dcc:	0529      	lsls	r1, r5, #20
   85dce:	d105      	bne.n	85ddc <_malloc_r+0x300>
   85dd0:	6895      	ldr	r5, [r2, #8]
   85dd2:	44c8      	add	r8, r9
   85dd4:	f048 0001 	orr.w	r0, r8, #1
   85dd8:	6068      	str	r0, [r5, #4]
   85dda:	e051      	b.n	85e80 <_malloc_r+0x3a4>
   85ddc:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   85de0:	1c42      	adds	r2, r0, #1
   85de2:	d103      	bne.n	85dec <_malloc_r+0x310>
   85de4:	4a3c      	ldr	r2, [pc, #240]	; (85ed8 <_malloc_r+0x3fc>)
   85de6:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
   85dea:	e005      	b.n	85df8 <_malloc_r+0x31c>
   85dec:	ebca 0a05 	rsb	sl, sl, r5
   85df0:	eb03 010a 	add.w	r1, r3, sl
   85df4:	4b39      	ldr	r3, [pc, #228]	; (85edc <_malloc_r+0x400>)
   85df6:	6059      	str	r1, [r3, #4]
   85df8:	f015 0007 	ands.w	r0, r5, #7
   85dfc:	bf1c      	itt	ne
   85dfe:	f1c0 0008 	rsbne	r0, r0, #8
   85e02:	182d      	addne	r5, r5, r0
   85e04:	eb05 0c08 	add.w	ip, r5, r8
   85e08:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   85e0c:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
   85e10:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
   85e14:	4641      	mov	r1, r8
   85e16:	4630      	mov	r0, r6
   85e18:	f000 f9fa 	bl	86210 <_sbrk_r>
   85e1c:	4a2f      	ldr	r2, [pc, #188]	; (85edc <_malloc_r+0x400>)
   85e1e:	1c43      	adds	r3, r0, #1
   85e20:	6853      	ldr	r3, [r2, #4]
   85e22:	bf08      	it	eq
   85e24:	f04f 0800 	moveq.w	r8, #0
   85e28:	eb08 0103 	add.w	r1, r8, r3
   85e2c:	bf08      	it	eq
   85e2e:	4628      	moveq	r0, r5
   85e30:	6051      	str	r1, [r2, #4]
   85e32:	1b40      	subs	r0, r0, r5
   85e34:	4a28      	ldr	r2, [pc, #160]	; (85ed8 <_malloc_r+0x3fc>)
   85e36:	eb00 0308 	add.w	r3, r0, r8
   85e3a:	f043 0101 	orr.w	r1, r3, #1
   85e3e:	4297      	cmp	r7, r2
   85e40:	6095      	str	r5, [r2, #8]
   85e42:	6069      	str	r1, [r5, #4]
   85e44:	d01c      	beq.n	85e80 <_malloc_r+0x3a4>
   85e46:	f1b9 0f0f 	cmp.w	r9, #15
   85e4a:	d802      	bhi.n	85e52 <_malloc_r+0x376>
   85e4c:	2201      	movs	r2, #1
   85e4e:	606a      	str	r2, [r5, #4]
   85e50:	e021      	b.n	85e96 <_malloc_r+0x3ba>
   85e52:	687d      	ldr	r5, [r7, #4]
   85e54:	f1a9 090c 	sub.w	r9, r9, #12
   85e58:	f029 0907 	bic.w	r9, r9, #7
   85e5c:	f005 0201 	and.w	r2, r5, #1
   85e60:	2105      	movs	r1, #5
   85e62:	eb07 0309 	add.w	r3, r7, r9
   85e66:	ea49 0002 	orr.w	r0, r9, r2
   85e6a:	f1b9 0f0f 	cmp.w	r9, #15
   85e6e:	6078      	str	r0, [r7, #4]
   85e70:	6059      	str	r1, [r3, #4]
   85e72:	6099      	str	r1, [r3, #8]
   85e74:	d904      	bls.n	85e80 <_malloc_r+0x3a4>
   85e76:	4630      	mov	r0, r6
   85e78:	f107 0108 	add.w	r1, r7, #8
   85e7c:	f7ff fb1a 	bl	854b4 <_free_r>
   85e80:	4a16      	ldr	r2, [pc, #88]	; (85edc <_malloc_r+0x400>)
   85e82:	6853      	ldr	r3, [r2, #4]
   85e84:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   85e86:	6b15      	ldr	r5, [r2, #48]	; 0x30
   85e88:	428b      	cmp	r3, r1
   85e8a:	bf88      	it	hi
   85e8c:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   85e8e:	42ab      	cmp	r3, r5
   85e90:	bf84      	itt	hi
   85e92:	4d12      	ldrhi	r5, [pc, #72]	; (85edc <_malloc_r+0x400>)
   85e94:	632b      	strhi	r3, [r5, #48]	; 0x30
   85e96:	4810      	ldr	r0, [pc, #64]	; (85ed8 <_malloc_r+0x3fc>)
   85e98:	6882      	ldr	r2, [r0, #8]
   85e9a:	6853      	ldr	r3, [r2, #4]
   85e9c:	f023 0103 	bic.w	r1, r3, #3
   85ea0:	42a1      	cmp	r1, r4
   85ea2:	ebc4 0001 	rsb	r0, r4, r1
   85ea6:	d301      	bcc.n	85eac <_malloc_r+0x3d0>
   85ea8:	280f      	cmp	r0, #15
   85eaa:	dc04      	bgt.n	85eb6 <_malloc_r+0x3da>
   85eac:	4630      	mov	r0, r6
   85eae:	f000 f840 	bl	85f32 <__malloc_unlock>
   85eb2:	2500      	movs	r5, #0
   85eb4:	e00d      	b.n	85ed2 <_malloc_r+0x3f6>
   85eb6:	4a08      	ldr	r2, [pc, #32]	; (85ed8 <_malloc_r+0x3fc>)
   85eb8:	f044 0301 	orr.w	r3, r4, #1
   85ebc:	6895      	ldr	r5, [r2, #8]
   85ebe:	f040 0101 	orr.w	r1, r0, #1
   85ec2:	192c      	adds	r4, r5, r4
   85ec4:	606b      	str	r3, [r5, #4]
   85ec6:	6094      	str	r4, [r2, #8]
   85ec8:	6061      	str	r1, [r4, #4]
   85eca:	4630      	mov	r0, r6
   85ecc:	f000 f831 	bl	85f32 <__malloc_unlock>
   85ed0:	3508      	adds	r5, #8
   85ed2:	4628      	mov	r0, r5
   85ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85ed8:	200704bc 	.word	0x200704bc
   85edc:	20078c3c 	.word	0x20078c3c

00085ee0 <memchr>:
   85ee0:	b510      	push	{r4, lr}
   85ee2:	b2c9      	uxtb	r1, r1
   85ee4:	4603      	mov	r3, r0
   85ee6:	1882      	adds	r2, r0, r2
   85ee8:	4293      	cmp	r3, r2
   85eea:	4618      	mov	r0, r3
   85eec:	d004      	beq.n	85ef8 <memchr+0x18>
   85eee:	7804      	ldrb	r4, [r0, #0]
   85ef0:	3301      	adds	r3, #1
   85ef2:	428c      	cmp	r4, r1
   85ef4:	d1f8      	bne.n	85ee8 <memchr+0x8>
   85ef6:	e000      	b.n	85efa <memchr+0x1a>
   85ef8:	2000      	movs	r0, #0
   85efa:	bd10      	pop	{r4, pc}

00085efc <memmove>:
   85efc:	4281      	cmp	r1, r0
   85efe:	b570      	push	{r4, r5, r6, lr}
   85f00:	d20e      	bcs.n	85f20 <memmove+0x24>
   85f02:	188c      	adds	r4, r1, r2
   85f04:	42a0      	cmp	r0, r4
   85f06:	d20b      	bcs.n	85f20 <memmove+0x24>
   85f08:	1885      	adds	r5, r0, r2
   85f0a:	4613      	mov	r3, r2
   85f0c:	f113 33ff 	adds.w	r3, r3, #4294967295
   85f10:	d305      	bcc.n	85f1e <memmove+0x22>
   85f12:	4251      	negs	r1, r2
   85f14:	1866      	adds	r6, r4, r1
   85f16:	5cf6      	ldrb	r6, [r6, r3]
   85f18:	1869      	adds	r1, r5, r1
   85f1a:	54ce      	strb	r6, [r1, r3]
   85f1c:	e7f6      	b.n	85f0c <memmove+0x10>
   85f1e:	bd70      	pop	{r4, r5, r6, pc}
   85f20:	2300      	movs	r3, #0
   85f22:	4293      	cmp	r3, r2
   85f24:	d003      	beq.n	85f2e <memmove+0x32>
   85f26:	5ccc      	ldrb	r4, [r1, r3]
   85f28:	54c4      	strb	r4, [r0, r3]
   85f2a:	3301      	adds	r3, #1
   85f2c:	e7f9      	b.n	85f22 <memmove+0x26>
   85f2e:	bd70      	pop	{r4, r5, r6, pc}

00085f30 <__malloc_lock>:
   85f30:	4770      	bx	lr

00085f32 <__malloc_unlock>:
   85f32:	4770      	bx	lr

00085f34 <_realloc_r>:
   85f34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85f38:	4681      	mov	r9, r0
   85f3a:	4616      	mov	r6, r2
   85f3c:	460c      	mov	r4, r1
   85f3e:	b921      	cbnz	r1, 85f4a <_realloc_r+0x16>
   85f40:	4611      	mov	r1, r2
   85f42:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85f46:	f7ff bdc9 	b.w	85adc <_malloc_r>
   85f4a:	f7ff fff1 	bl	85f30 <__malloc_lock>
   85f4e:	f106 070b 	add.w	r7, r6, #11
   85f52:	f854 5c04 	ldr.w	r5, [r4, #-4]
   85f56:	2f16      	cmp	r7, #22
   85f58:	f1a4 0b08 	sub.w	fp, r4, #8
   85f5c:	f025 0803 	bic.w	r8, r5, #3
   85f60:	d903      	bls.n	85f6a <_realloc_r+0x36>
   85f62:	f037 0707 	bics.w	r7, r7, #7
   85f66:	d501      	bpl.n	85f6c <_realloc_r+0x38>
   85f68:	e002      	b.n	85f70 <_realloc_r+0x3c>
   85f6a:	2710      	movs	r7, #16
   85f6c:	42b7      	cmp	r7, r6
   85f6e:	d204      	bcs.n	85f7a <_realloc_r+0x46>
   85f70:	200c      	movs	r0, #12
   85f72:	f8c9 0000 	str.w	r0, [r9]
   85f76:	2600      	movs	r6, #0
   85f78:	e145      	b.n	86206 <_realloc_r+0x2d2>
   85f7a:	45b8      	cmp	r8, r7
   85f7c:	f280 811a 	bge.w	861b4 <_realloc_r+0x280>
   85f80:	4aa2      	ldr	r2, [pc, #648]	; (8620c <_realloc_r+0x2d8>)
   85f82:	eb0b 0308 	add.w	r3, fp, r8
   85f86:	6891      	ldr	r1, [r2, #8]
   85f88:	428b      	cmp	r3, r1
   85f8a:	d006      	beq.n	85f9a <_realloc_r+0x66>
   85f8c:	6858      	ldr	r0, [r3, #4]
   85f8e:	f020 0201 	bic.w	r2, r0, #1
   85f92:	1898      	adds	r0, r3, r2
   85f94:	6842      	ldr	r2, [r0, #4]
   85f96:	07d0      	lsls	r0, r2, #31
   85f98:	d426      	bmi.n	85fe8 <_realloc_r+0xb4>
   85f9a:	685a      	ldr	r2, [r3, #4]
   85f9c:	428b      	cmp	r3, r1
   85f9e:	f022 0003 	bic.w	r0, r2, #3
   85fa2:	eb00 0a08 	add.w	sl, r0, r8
   85fa6:	d118      	bne.n	85fda <_realloc_r+0xa6>
   85fa8:	f107 0210 	add.w	r2, r7, #16
   85fac:	4592      	cmp	sl, r2
   85fae:	db1d      	blt.n	85fec <_realloc_r+0xb8>
   85fb0:	ebc7 0a0a 	rsb	sl, r7, sl
   85fb4:	eb0b 0507 	add.w	r5, fp, r7
   85fb8:	f04a 0101 	orr.w	r1, sl, #1
   85fbc:	6069      	str	r1, [r5, #4]
   85fbe:	f854 2c04 	ldr.w	r2, [r4, #-4]
   85fc2:	4e92      	ldr	r6, [pc, #584]	; (8620c <_realloc_r+0x2d8>)
   85fc4:	f002 0301 	and.w	r3, r2, #1
   85fc8:	431f      	orrs	r7, r3
   85fca:	60b5      	str	r5, [r6, #8]
   85fcc:	f844 7c04 	str.w	r7, [r4, #-4]
   85fd0:	4648      	mov	r0, r9
   85fd2:	f7ff ffae 	bl	85f32 <__malloc_unlock>
   85fd6:	4626      	mov	r6, r4
   85fd8:	e115      	b.n	86206 <_realloc_r+0x2d2>
   85fda:	45ba      	cmp	sl, r7
   85fdc:	db06      	blt.n	85fec <_realloc_r+0xb8>
   85fde:	68dd      	ldr	r5, [r3, #12]
   85fe0:	689e      	ldr	r6, [r3, #8]
   85fe2:	60f5      	str	r5, [r6, #12]
   85fe4:	60ae      	str	r6, [r5, #8]
   85fe6:	e0e6      	b.n	861b6 <_realloc_r+0x282>
   85fe8:	2000      	movs	r0, #0
   85fea:	4603      	mov	r3, r0
   85fec:	07ea      	lsls	r2, r5, #31
   85fee:	f100 8091 	bmi.w	86114 <_realloc_r+0x1e0>
   85ff2:	f854 5c08 	ldr.w	r5, [r4, #-8]
   85ff6:	ebc5 050b 	rsb	r5, r5, fp
   85ffa:	686a      	ldr	r2, [r5, #4]
   85ffc:	f022 0203 	bic.w	r2, r2, #3
   86000:	2b00      	cmp	r3, #0
   86002:	d051      	beq.n	860a8 <_realloc_r+0x174>
   86004:	eb02 0a08 	add.w	sl, r2, r8
   86008:	428b      	cmp	r3, r1
   8600a:	4482      	add	sl, r0
   8600c:	d145      	bne.n	8609a <_realloc_r+0x166>
   8600e:	f107 0310 	add.w	r3, r7, #16
   86012:	459a      	cmp	sl, r3
   86014:	db48      	blt.n	860a8 <_realloc_r+0x174>
   86016:	462e      	mov	r6, r5
   86018:	68e9      	ldr	r1, [r5, #12]
   8601a:	f856 3f08 	ldr.w	r3, [r6, #8]!
   8601e:	f1a8 0204 	sub.w	r2, r8, #4
   86022:	2a24      	cmp	r2, #36	; 0x24
   86024:	60d9      	str	r1, [r3, #12]
   86026:	608b      	str	r3, [r1, #8]
   86028:	d825      	bhi.n	86076 <_realloc_r+0x142>
   8602a:	2a13      	cmp	r2, #19
   8602c:	d91b      	bls.n	86066 <_realloc_r+0x132>
   8602e:	6821      	ldr	r1, [r4, #0]
   86030:	2a1b      	cmp	r2, #27
   86032:	60a9      	str	r1, [r5, #8]
   86034:	6863      	ldr	r3, [r4, #4]
   86036:	60eb      	str	r3, [r5, #12]
   86038:	d803      	bhi.n	86042 <_realloc_r+0x10e>
   8603a:	f105 0010 	add.w	r0, r5, #16
   8603e:	3408      	adds	r4, #8
   86040:	e012      	b.n	86068 <_realloc_r+0x134>
   86042:	68a0      	ldr	r0, [r4, #8]
   86044:	2a24      	cmp	r2, #36	; 0x24
   86046:	6128      	str	r0, [r5, #16]
   86048:	68e1      	ldr	r1, [r4, #12]
   8604a:	6169      	str	r1, [r5, #20]
   8604c:	d003      	beq.n	86056 <_realloc_r+0x122>
   8604e:	f105 0018 	add.w	r0, r5, #24
   86052:	3410      	adds	r4, #16
   86054:	e008      	b.n	86068 <_realloc_r+0x134>
   86056:	6922      	ldr	r2, [r4, #16]
   86058:	f105 0020 	add.w	r0, r5, #32
   8605c:	61aa      	str	r2, [r5, #24]
   8605e:	6963      	ldr	r3, [r4, #20]
   86060:	3418      	adds	r4, #24
   86062:	61eb      	str	r3, [r5, #28]
   86064:	e000      	b.n	86068 <_realloc_r+0x134>
   86066:	4630      	mov	r0, r6
   86068:	6821      	ldr	r1, [r4, #0]
   8606a:	6001      	str	r1, [r0, #0]
   8606c:	6862      	ldr	r2, [r4, #4]
   8606e:	6042      	str	r2, [r0, #4]
   86070:	68a3      	ldr	r3, [r4, #8]
   86072:	6083      	str	r3, [r0, #8]
   86074:	e003      	b.n	8607e <_realloc_r+0x14a>
   86076:	4630      	mov	r0, r6
   86078:	4621      	mov	r1, r4
   8607a:	f7ff ff3f 	bl	85efc <memmove>
   8607e:	ebc7 0a0a 	rsb	sl, r7, sl
   86082:	19e8      	adds	r0, r5, r7
   86084:	f04a 0201 	orr.w	r2, sl, #1
   86088:	6042      	str	r2, [r0, #4]
   8608a:	686b      	ldr	r3, [r5, #4]
   8608c:	495f      	ldr	r1, [pc, #380]	; (8620c <_realloc_r+0x2d8>)
   8608e:	6088      	str	r0, [r1, #8]
   86090:	f003 0001 	and.w	r0, r3, #1
   86094:	4307      	orrs	r7, r0
   86096:	606f      	str	r7, [r5, #4]
   86098:	e088      	b.n	861ac <_realloc_r+0x278>
   8609a:	45ba      	cmp	sl, r7
   8609c:	db04      	blt.n	860a8 <_realloc_r+0x174>
   8609e:	68d9      	ldr	r1, [r3, #12]
   860a0:	6898      	ldr	r0, [r3, #8]
   860a2:	60c1      	str	r1, [r0, #12]
   860a4:	6088      	str	r0, [r1, #8]
   860a6:	e003      	b.n	860b0 <_realloc_r+0x17c>
   860a8:	eb02 0a08 	add.w	sl, r2, r8
   860ac:	45ba      	cmp	sl, r7
   860ae:	db31      	blt.n	86114 <_realloc_r+0x1e0>
   860b0:	4628      	mov	r0, r5
   860b2:	68eb      	ldr	r3, [r5, #12]
   860b4:	f850 1f08 	ldr.w	r1, [r0, #8]!
   860b8:	f1a8 0204 	sub.w	r2, r8, #4
   860bc:	2a24      	cmp	r2, #36	; 0x24
   860be:	60cb      	str	r3, [r1, #12]
   860c0:	6099      	str	r1, [r3, #8]
   860c2:	d823      	bhi.n	8610c <_realloc_r+0x1d8>
   860c4:	2a13      	cmp	r2, #19
   860c6:	d91a      	bls.n	860fe <_realloc_r+0x1ca>
   860c8:	6820      	ldr	r0, [r4, #0]
   860ca:	2a1b      	cmp	r2, #27
   860cc:	60a8      	str	r0, [r5, #8]
   860ce:	6866      	ldr	r6, [r4, #4]
   860d0:	60ee      	str	r6, [r5, #12]
   860d2:	d803      	bhi.n	860dc <_realloc_r+0x1a8>
   860d4:	f105 0010 	add.w	r0, r5, #16
   860d8:	3408      	adds	r4, #8
   860da:	e010      	b.n	860fe <_realloc_r+0x1ca>
   860dc:	68a3      	ldr	r3, [r4, #8]
   860de:	2a24      	cmp	r2, #36	; 0x24
   860e0:	612b      	str	r3, [r5, #16]
   860e2:	68e1      	ldr	r1, [r4, #12]
   860e4:	6169      	str	r1, [r5, #20]
   860e6:	d003      	beq.n	860f0 <_realloc_r+0x1bc>
   860e8:	f105 0018 	add.w	r0, r5, #24
   860ec:	3410      	adds	r4, #16
   860ee:	e006      	b.n	860fe <_realloc_r+0x1ca>
   860f0:	6922      	ldr	r2, [r4, #16]
   860f2:	61aa      	str	r2, [r5, #24]
   860f4:	6960      	ldr	r0, [r4, #20]
   860f6:	3418      	adds	r4, #24
   860f8:	61e8      	str	r0, [r5, #28]
   860fa:	f105 0020 	add.w	r0, r5, #32
   860fe:	6826      	ldr	r6, [r4, #0]
   86100:	6006      	str	r6, [r0, #0]
   86102:	6863      	ldr	r3, [r4, #4]
   86104:	6043      	str	r3, [r0, #4]
   86106:	68a1      	ldr	r1, [r4, #8]
   86108:	6081      	str	r1, [r0, #8]
   8610a:	e055      	b.n	861b8 <_realloc_r+0x284>
   8610c:	4621      	mov	r1, r4
   8610e:	f7ff fef5 	bl	85efc <memmove>
   86112:	e051      	b.n	861b8 <_realloc_r+0x284>
   86114:	4631      	mov	r1, r6
   86116:	4648      	mov	r0, r9
   86118:	f7ff fce0 	bl	85adc <_malloc_r>
   8611c:	4606      	mov	r6, r0
   8611e:	2800      	cmp	r0, #0
   86120:	d044      	beq.n	861ac <_realloc_r+0x278>
   86122:	f854 1c04 	ldr.w	r1, [r4, #-4]
   86126:	f1a0 0208 	sub.w	r2, r0, #8
   8612a:	f021 0301 	bic.w	r3, r1, #1
   8612e:	eb0b 0103 	add.w	r1, fp, r3
   86132:	428a      	cmp	r2, r1
   86134:	d106      	bne.n	86144 <_realloc_r+0x210>
   86136:	f850 6c04 	ldr.w	r6, [r0, #-4]
   8613a:	f026 0503 	bic.w	r5, r6, #3
   8613e:	eb05 0a08 	add.w	sl, r5, r8
   86142:	e038      	b.n	861b6 <_realloc_r+0x282>
   86144:	f1a8 0204 	sub.w	r2, r8, #4
   86148:	2a24      	cmp	r2, #36	; 0x24
   8614a:	d828      	bhi.n	8619e <_realloc_r+0x26a>
   8614c:	2a13      	cmp	r2, #19
   8614e:	d91e      	bls.n	8618e <_realloc_r+0x25a>
   86150:	6823      	ldr	r3, [r4, #0]
   86152:	2a1b      	cmp	r2, #27
   86154:	6003      	str	r3, [r0, #0]
   86156:	6861      	ldr	r1, [r4, #4]
   86158:	6041      	str	r1, [r0, #4]
   8615a:	d804      	bhi.n	86166 <_realloc_r+0x232>
   8615c:	f100 0008 	add.w	r0, r0, #8
   86160:	f104 0208 	add.w	r2, r4, #8
   86164:	e014      	b.n	86190 <_realloc_r+0x25c>
   86166:	68a0      	ldr	r0, [r4, #8]
   86168:	2a24      	cmp	r2, #36	; 0x24
   8616a:	60b0      	str	r0, [r6, #8]
   8616c:	68e3      	ldr	r3, [r4, #12]
   8616e:	60f3      	str	r3, [r6, #12]
   86170:	d004      	beq.n	8617c <_realloc_r+0x248>
   86172:	f106 0010 	add.w	r0, r6, #16
   86176:	f104 0210 	add.w	r2, r4, #16
   8617a:	e009      	b.n	86190 <_realloc_r+0x25c>
   8617c:	6922      	ldr	r2, [r4, #16]
   8617e:	f106 0018 	add.w	r0, r6, #24
   86182:	6132      	str	r2, [r6, #16]
   86184:	6961      	ldr	r1, [r4, #20]
   86186:	f104 0218 	add.w	r2, r4, #24
   8618a:	6171      	str	r1, [r6, #20]
   8618c:	e000      	b.n	86190 <_realloc_r+0x25c>
   8618e:	4622      	mov	r2, r4
   86190:	6813      	ldr	r3, [r2, #0]
   86192:	6003      	str	r3, [r0, #0]
   86194:	6851      	ldr	r1, [r2, #4]
   86196:	6041      	str	r1, [r0, #4]
   86198:	6892      	ldr	r2, [r2, #8]
   8619a:	6082      	str	r2, [r0, #8]
   8619c:	e002      	b.n	861a4 <_realloc_r+0x270>
   8619e:	4621      	mov	r1, r4
   861a0:	f7ff feac 	bl	85efc <memmove>
   861a4:	4648      	mov	r0, r9
   861a6:	4621      	mov	r1, r4
   861a8:	f7ff f984 	bl	854b4 <_free_r>
   861ac:	4648      	mov	r0, r9
   861ae:	f7ff fec0 	bl	85f32 <__malloc_unlock>
   861b2:	e028      	b.n	86206 <_realloc_r+0x2d2>
   861b4:	46c2      	mov	sl, r8
   861b6:	465d      	mov	r5, fp
   861b8:	ebc7 000a 	rsb	r0, r7, sl
   861bc:	280f      	cmp	r0, #15
   861be:	686a      	ldr	r2, [r5, #4]
   861c0:	d911      	bls.n	861e6 <_realloc_r+0x2b2>
   861c2:	f002 0601 	and.w	r6, r2, #1
   861c6:	19e9      	adds	r1, r5, r7
   861c8:	f040 0301 	orr.w	r3, r0, #1
   861cc:	4337      	orrs	r7, r6
   861ce:	606f      	str	r7, [r5, #4]
   861d0:	1808      	adds	r0, r1, r0
   861d2:	604b      	str	r3, [r1, #4]
   861d4:	6842      	ldr	r2, [r0, #4]
   861d6:	3108      	adds	r1, #8
   861d8:	f042 0601 	orr.w	r6, r2, #1
   861dc:	6046      	str	r6, [r0, #4]
   861de:	4648      	mov	r0, r9
   861e0:	f7ff f968 	bl	854b4 <_free_r>
   861e4:	e00a      	b.n	861fc <_realloc_r+0x2c8>
   861e6:	f002 0601 	and.w	r6, r2, #1
   861ea:	ea4a 0306 	orr.w	r3, sl, r6
   861ee:	606b      	str	r3, [r5, #4]
   861f0:	eb05 010a 	add.w	r1, r5, sl
   861f4:	6848      	ldr	r0, [r1, #4]
   861f6:	f040 0201 	orr.w	r2, r0, #1
   861fa:	604a      	str	r2, [r1, #4]
   861fc:	4648      	mov	r0, r9
   861fe:	f7ff fe98 	bl	85f32 <__malloc_unlock>
   86202:	f105 0608 	add.w	r6, r5, #8
   86206:	4630      	mov	r0, r6
   86208:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8620c:	200704bc 	.word	0x200704bc

00086210 <_sbrk_r>:
   86210:	b538      	push	{r3, r4, r5, lr}
   86212:	4c06      	ldr	r4, [pc, #24]	; (8622c <_sbrk_r+0x1c>)
   86214:	2300      	movs	r3, #0
   86216:	4605      	mov	r5, r0
   86218:	4608      	mov	r0, r1
   8621a:	6023      	str	r3, [r4, #0]
   8621c:	f7fd fc48 	bl	83ab0 <_sbrk>
   86220:	1c43      	adds	r3, r0, #1
   86222:	d102      	bne.n	8622a <_sbrk_r+0x1a>
   86224:	6821      	ldr	r1, [r4, #0]
   86226:	b101      	cbz	r1, 8622a <_sbrk_r+0x1a>
   86228:	6029      	str	r1, [r5, #0]
   8622a:	bd38      	pop	{r3, r4, r5, pc}
   8622c:	20078cb0 	.word	0x20078cb0

00086230 <__sread>:
   86230:	b510      	push	{r4, lr}
   86232:	460c      	mov	r4, r1
   86234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86238:	f000 f942 	bl	864c0 <_read_r>
   8623c:	2800      	cmp	r0, #0
   8623e:	db03      	blt.n	86248 <__sread+0x18>
   86240:	6d22      	ldr	r2, [r4, #80]	; 0x50
   86242:	1813      	adds	r3, r2, r0
   86244:	6523      	str	r3, [r4, #80]	; 0x50
   86246:	bd10      	pop	{r4, pc}
   86248:	89a3      	ldrh	r3, [r4, #12]
   8624a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
   8624e:	81a1      	strh	r1, [r4, #12]
   86250:	bd10      	pop	{r4, pc}

00086252 <__seofread>:
   86252:	2000      	movs	r0, #0
   86254:	4770      	bx	lr

00086256 <__swrite>:
   86256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8625a:	461d      	mov	r5, r3
   8625c:	898b      	ldrh	r3, [r1, #12]
   8625e:	460c      	mov	r4, r1
   86260:	f403 7180 	and.w	r1, r3, #256	; 0x100
   86264:	4616      	mov	r6, r2
   86266:	b20a      	sxth	r2, r1
   86268:	4607      	mov	r7, r0
   8626a:	b12a      	cbz	r2, 86278 <__swrite+0x22>
   8626c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86270:	2200      	movs	r2, #0
   86272:	2302      	movs	r3, #2
   86274:	f000 f912 	bl	8649c <_lseek_r>
   86278:	89a0      	ldrh	r0, [r4, #12]
   8627a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8627e:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
   86282:	81a3      	strh	r3, [r4, #12]
   86284:	4638      	mov	r0, r7
   86286:	4632      	mov	r2, r6
   86288:	462b      	mov	r3, r5
   8628a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8628e:	f000 b877 	b.w	86380 <_write_r>

00086292 <__sseek>:
   86292:	b510      	push	{r4, lr}
   86294:	460c      	mov	r4, r1
   86296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8629a:	f000 f8ff 	bl	8649c <_lseek_r>
   8629e:	1c43      	adds	r3, r0, #1
   862a0:	89a3      	ldrh	r3, [r4, #12]
   862a2:	d103      	bne.n	862ac <__sseek+0x1a>
   862a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
   862a8:	81a2      	strh	r2, [r4, #12]
   862aa:	bd10      	pop	{r4, pc}
   862ac:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
   862b0:	81a1      	strh	r1, [r4, #12]
   862b2:	6520      	str	r0, [r4, #80]	; 0x50
   862b4:	bd10      	pop	{r4, pc}

000862b6 <__sclose>:
   862b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   862ba:	f000 b873 	b.w	863a4 <_close_r>

000862be <strcmp>:
   862be:	f810 2b01 	ldrb.w	r2, [r0], #1
   862c2:	f811 3b01 	ldrb.w	r3, [r1], #1
   862c6:	2a01      	cmp	r2, #1
   862c8:	bf28      	it	cs
   862ca:	429a      	cmpcs	r2, r3
   862cc:	d0f7      	beq.n	862be <strcmp>
   862ce:	eba2 0003 	sub.w	r0, r2, r3
   862d2:	4770      	bx	lr

000862d4 <_wcrtomb_r>:
   862d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   862d8:	461d      	mov	r5, r3
   862da:	4b10      	ldr	r3, [pc, #64]	; (8631c <_wcrtomb_r+0x48>)
   862dc:	b086      	sub	sp, #24
   862de:	4604      	mov	r4, r0
   862e0:	4690      	mov	r8, r2
   862e2:	460e      	mov	r6, r1
   862e4:	681f      	ldr	r7, [r3, #0]
   862e6:	b939      	cbnz	r1, 862f8 <_wcrtomb_r+0x24>
   862e8:	f7ff fb5a 	bl	859a0 <__locale_charset>
   862ec:	9500      	str	r5, [sp, #0]
   862ee:	4603      	mov	r3, r0
   862f0:	a903      	add	r1, sp, #12
   862f2:	4620      	mov	r0, r4
   862f4:	4632      	mov	r2, r6
   862f6:	e006      	b.n	86306 <_wcrtomb_r+0x32>
   862f8:	f7ff fb52 	bl	859a0 <__locale_charset>
   862fc:	9500      	str	r5, [sp, #0]
   862fe:	4603      	mov	r3, r0
   86300:	4631      	mov	r1, r6
   86302:	4620      	mov	r0, r4
   86304:	4642      	mov	r2, r8
   86306:	47b8      	blx	r7
   86308:	1c43      	adds	r3, r0, #1
   8630a:	d103      	bne.n	86314 <_wcrtomb_r+0x40>
   8630c:	2100      	movs	r1, #0
   8630e:	228a      	movs	r2, #138	; 0x8a
   86310:	6029      	str	r1, [r5, #0]
   86312:	6022      	str	r2, [r4, #0]
   86314:	b006      	add	sp, #24
   86316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8631a:	bf00      	nop
   8631c:	200708cc 	.word	0x200708cc

00086320 <wcrtomb>:
   86320:	b530      	push	{r4, r5, lr}
   86322:	4613      	mov	r3, r2
   86324:	4a04      	ldr	r2, [pc, #16]	; (86338 <wcrtomb+0x18>)
   86326:	4605      	mov	r5, r0
   86328:	460c      	mov	r4, r1
   8632a:	6810      	ldr	r0, [r2, #0]
   8632c:	4629      	mov	r1, r5
   8632e:	4622      	mov	r2, r4
   86330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   86334:	f7ff bfce 	b.w	862d4 <_wcrtomb_r>
   86338:	20070010 	.word	0x20070010

0008633c <__ascii_wctomb>:
   8633c:	b149      	cbz	r1, 86352 <__ascii_wctomb+0x16>
   8633e:	2aff      	cmp	r2, #255	; 0xff
   86340:	d904      	bls.n	8634c <__ascii_wctomb+0x10>
   86342:	238a      	movs	r3, #138	; 0x8a
   86344:	6003      	str	r3, [r0, #0]
   86346:	f04f 30ff 	mov.w	r0, #4294967295
   8634a:	4770      	bx	lr
   8634c:	700a      	strb	r2, [r1, #0]
   8634e:	2001      	movs	r0, #1
   86350:	4770      	bx	lr
   86352:	4608      	mov	r0, r1
   86354:	4770      	bx	lr

00086356 <_wctomb_r>:
   86356:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   8635a:	4698      	mov	r8, r3
   8635c:	4b07      	ldr	r3, [pc, #28]	; (8637c <_wctomb_r+0x26>)
   8635e:	4605      	mov	r5, r0
   86360:	460f      	mov	r7, r1
   86362:	4616      	mov	r6, r2
   86364:	681c      	ldr	r4, [r3, #0]
   86366:	f7ff fb1b 	bl	859a0 <__locale_charset>
   8636a:	f8cd 8000 	str.w	r8, [sp]
   8636e:	4603      	mov	r3, r0
   86370:	4639      	mov	r1, r7
   86372:	4628      	mov	r0, r5
   86374:	4632      	mov	r2, r6
   86376:	47a0      	blx	r4
   86378:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   8637c:	200708cc 	.word	0x200708cc

00086380 <_write_r>:
   86380:	b538      	push	{r3, r4, r5, lr}
   86382:	4c07      	ldr	r4, [pc, #28]	; (863a0 <_write_r+0x20>)
   86384:	4605      	mov	r5, r0
   86386:	2000      	movs	r0, #0
   86388:	6020      	str	r0, [r4, #0]
   8638a:	4608      	mov	r0, r1
   8638c:	4611      	mov	r1, r2
   8638e:	461a      	mov	r2, r3
   86390:	f7f9 ff92 	bl	802b8 <_write>
   86394:	1c43      	adds	r3, r0, #1
   86396:	d102      	bne.n	8639e <_write_r+0x1e>
   86398:	6823      	ldr	r3, [r4, #0]
   8639a:	b103      	cbz	r3, 8639e <_write_r+0x1e>
   8639c:	602b      	str	r3, [r5, #0]
   8639e:	bd38      	pop	{r3, r4, r5, pc}
   863a0:	20078cb0 	.word	0x20078cb0

000863a4 <_close_r>:
   863a4:	b538      	push	{r3, r4, r5, lr}
   863a6:	4c06      	ldr	r4, [pc, #24]	; (863c0 <_close_r+0x1c>)
   863a8:	2300      	movs	r3, #0
   863aa:	4605      	mov	r5, r0
   863ac:	4608      	mov	r0, r1
   863ae:	6023      	str	r3, [r4, #0]
   863b0:	f7fd fba4 	bl	83afc <_close>
   863b4:	1c43      	adds	r3, r0, #1
   863b6:	d102      	bne.n	863be <_close_r+0x1a>
   863b8:	6821      	ldr	r1, [r4, #0]
   863ba:	b101      	cbz	r1, 863be <_close_r+0x1a>
   863bc:	6029      	str	r1, [r5, #0]
   863be:	bd38      	pop	{r3, r4, r5, pc}
   863c0:	20078cb0 	.word	0x20078cb0

000863c4 <_fclose_r>:
   863c4:	b570      	push	{r4, r5, r6, lr}
   863c6:	4605      	mov	r5, r0
   863c8:	460c      	mov	r4, r1
   863ca:	2900      	cmp	r1, #0
   863cc:	d039      	beq.n	86442 <_fclose_r+0x7e>
   863ce:	f7fe ff97 	bl	85300 <__sfp_lock_acquire>
   863d2:	b125      	cbz	r5, 863de <_fclose_r+0x1a>
   863d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   863d6:	b913      	cbnz	r3, 863de <_fclose_r+0x1a>
   863d8:	4628      	mov	r0, r5
   863da:	f7fe ff2d 	bl	85238 <__sinit>
   863de:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   863e2:	b35e      	cbz	r6, 8643c <_fclose_r+0x78>
   863e4:	4628      	mov	r0, r5
   863e6:	4621      	mov	r1, r4
   863e8:	f7fe fe34 	bl	85054 <_fflush_r>
   863ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   863ee:	4606      	mov	r6, r0
   863f0:	b13a      	cbz	r2, 86402 <_fclose_r+0x3e>
   863f2:	4628      	mov	r0, r5
   863f4:	69e1      	ldr	r1, [r4, #28]
   863f6:	4790      	blx	r2
   863f8:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   863fc:	bf28      	it	cs
   863fe:	f04f 36ff 	movcs.w	r6, #4294967295
   86402:	89a0      	ldrh	r0, [r4, #12]
   86404:	f000 0180 	and.w	r1, r0, #128	; 0x80
   86408:	b20b      	sxth	r3, r1
   8640a:	b11b      	cbz	r3, 86414 <_fclose_r+0x50>
   8640c:	4628      	mov	r0, r5
   8640e:	6921      	ldr	r1, [r4, #16]
   86410:	f7ff f850 	bl	854b4 <_free_r>
   86414:	6b21      	ldr	r1, [r4, #48]	; 0x30
   86416:	b141      	cbz	r1, 8642a <_fclose_r+0x66>
   86418:	f104 0240 	add.w	r2, r4, #64	; 0x40
   8641c:	4291      	cmp	r1, r2
   8641e:	d002      	beq.n	86426 <_fclose_r+0x62>
   86420:	4628      	mov	r0, r5
   86422:	f7ff f847 	bl	854b4 <_free_r>
   86426:	2000      	movs	r0, #0
   86428:	6320      	str	r0, [r4, #48]	; 0x30
   8642a:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8642c:	b121      	cbz	r1, 86438 <_fclose_r+0x74>
   8642e:	4628      	mov	r0, r5
   86430:	f7ff f840 	bl	854b4 <_free_r>
   86434:	2100      	movs	r1, #0
   86436:	6461      	str	r1, [r4, #68]	; 0x44
   86438:	2300      	movs	r3, #0
   8643a:	81a3      	strh	r3, [r4, #12]
   8643c:	f7fe ff61 	bl	85302 <__sfp_lock_release>
   86440:	e000      	b.n	86444 <_fclose_r+0x80>
   86442:	460e      	mov	r6, r1
   86444:	4630      	mov	r0, r6
   86446:	bd70      	pop	{r4, r5, r6, pc}

00086448 <fclose>:
   86448:	4b02      	ldr	r3, [pc, #8]	; (86454 <fclose+0xc>)
   8644a:	4601      	mov	r1, r0
   8644c:	6818      	ldr	r0, [r3, #0]
   8644e:	f7ff bfb9 	b.w	863c4 <_fclose_r>
   86452:	bf00      	nop
   86454:	20070010 	.word	0x20070010

00086458 <_fstat_r>:
   86458:	b538      	push	{r3, r4, r5, lr}
   8645a:	4c07      	ldr	r4, [pc, #28]	; (86478 <_fstat_r+0x20>)
   8645c:	2300      	movs	r3, #0
   8645e:	4605      	mov	r5, r0
   86460:	4608      	mov	r0, r1
   86462:	4611      	mov	r1, r2
   86464:	6023      	str	r3, [r4, #0]
   86466:	f7fd fb4d 	bl	83b04 <_fstat>
   8646a:	1c43      	adds	r3, r0, #1
   8646c:	d102      	bne.n	86474 <_fstat_r+0x1c>
   8646e:	6821      	ldr	r1, [r4, #0]
   86470:	b101      	cbz	r1, 86474 <_fstat_r+0x1c>
   86472:	6029      	str	r1, [r5, #0]
   86474:	bd38      	pop	{r3, r4, r5, pc}
   86476:	bf00      	nop
   86478:	20078cb0 	.word	0x20078cb0

0008647c <_isatty_r>:
   8647c:	b538      	push	{r3, r4, r5, lr}
   8647e:	4c06      	ldr	r4, [pc, #24]	; (86498 <_isatty_r+0x1c>)
   86480:	2300      	movs	r3, #0
   86482:	4605      	mov	r5, r0
   86484:	4608      	mov	r0, r1
   86486:	6023      	str	r3, [r4, #0]
   86488:	f7fd fb42 	bl	83b10 <_isatty>
   8648c:	1c43      	adds	r3, r0, #1
   8648e:	d102      	bne.n	86496 <_isatty_r+0x1a>
   86490:	6821      	ldr	r1, [r4, #0]
   86492:	b101      	cbz	r1, 86496 <_isatty_r+0x1a>
   86494:	6029      	str	r1, [r5, #0]
   86496:	bd38      	pop	{r3, r4, r5, pc}
   86498:	20078cb0 	.word	0x20078cb0

0008649c <_lseek_r>:
   8649c:	b538      	push	{r3, r4, r5, lr}
   8649e:	4c07      	ldr	r4, [pc, #28]	; (864bc <_lseek_r+0x20>)
   864a0:	4605      	mov	r5, r0
   864a2:	2000      	movs	r0, #0
   864a4:	6020      	str	r0, [r4, #0]
   864a6:	4608      	mov	r0, r1
   864a8:	4611      	mov	r1, r2
   864aa:	461a      	mov	r2, r3
   864ac:	f7fd fb34 	bl	83b18 <_lseek>
   864b0:	1c43      	adds	r3, r0, #1
   864b2:	d102      	bne.n	864ba <_lseek_r+0x1e>
   864b4:	6823      	ldr	r3, [r4, #0]
   864b6:	b103      	cbz	r3, 864ba <_lseek_r+0x1e>
   864b8:	602b      	str	r3, [r5, #0]
   864ba:	bd38      	pop	{r3, r4, r5, pc}
   864bc:	20078cb0 	.word	0x20078cb0

000864c0 <_read_r>:
   864c0:	b538      	push	{r3, r4, r5, lr}
   864c2:	4c07      	ldr	r4, [pc, #28]	; (864e0 <_read_r+0x20>)
   864c4:	4605      	mov	r5, r0
   864c6:	2000      	movs	r0, #0
   864c8:	6020      	str	r0, [r4, #0]
   864ca:	4608      	mov	r0, r1
   864cc:	4611      	mov	r1, r2
   864ce:	461a      	mov	r2, r3
   864d0:	f7f9 feae 	bl	80230 <_read>
   864d4:	1c43      	adds	r3, r0, #1
   864d6:	d102      	bne.n	864de <_read_r+0x1e>
   864d8:	6823      	ldr	r3, [r4, #0]
   864da:	b103      	cbz	r3, 864de <_read_r+0x1e>
   864dc:	602b      	str	r3, [r5, #0]
   864de:	bd38      	pop	{r3, r4, r5, pc}
   864e0:	20078cb0 	.word	0x20078cb0

000864e4 <__aeabi_uldivmod>:
   864e4:	b94b      	cbnz	r3, 864fa <__aeabi_uldivmod+0x16>
   864e6:	b942      	cbnz	r2, 864fa <__aeabi_uldivmod+0x16>
   864e8:	2900      	cmp	r1, #0
   864ea:	bf08      	it	eq
   864ec:	2800      	cmpeq	r0, #0
   864ee:	d002      	beq.n	864f6 <__aeabi_uldivmod+0x12>
   864f0:	f04f 31ff 	mov.w	r1, #4294967295
   864f4:	4608      	mov	r0, r1
   864f6:	f000 b83b 	b.w	86570 <__aeabi_idiv0>
   864fa:	b082      	sub	sp, #8
   864fc:	46ec      	mov	ip, sp
   864fe:	e92d 5000 	stmdb	sp!, {ip, lr}
   86502:	f000 f81d 	bl	86540 <__gnu_uldivmod_helper>
   86506:	f8dd e004 	ldr.w	lr, [sp, #4]
   8650a:	b002      	add	sp, #8
   8650c:	bc0c      	pop	{r2, r3}
   8650e:	4770      	bx	lr

00086510 <__gnu_ldivmod_helper>:
   86510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86514:	4616      	mov	r6, r2
   86516:	4698      	mov	r8, r3
   86518:	4604      	mov	r4, r0
   8651a:	460d      	mov	r5, r1
   8651c:	f000 f82a 	bl	86574 <__divdi3>
   86520:	fb06 fc01 	mul.w	ip, r6, r1
   86524:	fba6 2300 	umull	r2, r3, r6, r0
   86528:	fb00 c708 	mla	r7, r0, r8, ip
   8652c:	18fb      	adds	r3, r7, r3
   8652e:	1aa2      	subs	r2, r4, r2
   86530:	eb65 0303 	sbc.w	r3, r5, r3
   86534:	9c06      	ldr	r4, [sp, #24]
   86536:	e9c4 2300 	strd	r2, r3, [r4]
   8653a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8653e:	bf00      	nop

00086540 <__gnu_uldivmod_helper>:
   86540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86544:	4690      	mov	r8, r2
   86546:	4606      	mov	r6, r0
   86548:	460f      	mov	r7, r1
   8654a:	461d      	mov	r5, r3
   8654c:	f000 f970 	bl	86830 <__udivdi3>
   86550:	fb00 f305 	mul.w	r3, r0, r5
   86554:	fba0 4508 	umull	r4, r5, r0, r8
   86558:	fb08 3801 	mla	r8, r8, r1, r3
   8655c:	9b06      	ldr	r3, [sp, #24]
   8655e:	4445      	add	r5, r8
   86560:	1b34      	subs	r4, r6, r4
   86562:	eb67 0505 	sbc.w	r5, r7, r5
   86566:	e9c3 4500 	strd	r4, r5, [r3]
   8656a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8656e:	bf00      	nop

00086570 <__aeabi_idiv0>:
   86570:	4770      	bx	lr
   86572:	bf00      	nop

00086574 <__divdi3>:
   86574:	2900      	cmp	r1, #0
   86576:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8657a:	461d      	mov	r5, r3
   8657c:	f2c0 809d 	blt.w	866ba <__divdi3+0x146>
   86580:	2400      	movs	r4, #0
   86582:	2d00      	cmp	r5, #0
   86584:	f2c0 8094 	blt.w	866b0 <__divdi3+0x13c>
   86588:	4680      	mov	r8, r0
   8658a:	460f      	mov	r7, r1
   8658c:	4694      	mov	ip, r2
   8658e:	461e      	mov	r6, r3
   86590:	bbe3      	cbnz	r3, 8660c <__divdi3+0x98>
   86592:	428a      	cmp	r2, r1
   86594:	d955      	bls.n	86642 <__divdi3+0xce>
   86596:	fab2 f782 	clz	r7, r2
   8659a:	b147      	cbz	r7, 865ae <__divdi3+0x3a>
   8659c:	f1c7 0520 	rsb	r5, r7, #32
   865a0:	fa20 f605 	lsr.w	r6, r0, r5
   865a4:	fa01 f107 	lsl.w	r1, r1, r7
   865a8:	40ba      	lsls	r2, r7
   865aa:	40b8      	lsls	r0, r7
   865ac:	4331      	orrs	r1, r6
   865ae:	0c17      	lsrs	r7, r2, #16
   865b0:	fbb1 f6f7 	udiv	r6, r1, r7
   865b4:	fa1f fc82 	uxth.w	ip, r2
   865b8:	fb07 1116 	mls	r1, r7, r6, r1
   865bc:	fb0c f506 	mul.w	r5, ip, r6
   865c0:	0c03      	lsrs	r3, r0, #16
   865c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   865c6:	429d      	cmp	r5, r3
   865c8:	d908      	bls.n	865dc <__divdi3+0x68>
   865ca:	1e71      	subs	r1, r6, #1
   865cc:	189b      	adds	r3, r3, r2
   865ce:	f080 8113 	bcs.w	867f8 <__divdi3+0x284>
   865d2:	429d      	cmp	r5, r3
   865d4:	f240 8110 	bls.w	867f8 <__divdi3+0x284>
   865d8:	3e02      	subs	r6, #2
   865da:	189b      	adds	r3, r3, r2
   865dc:	1b59      	subs	r1, r3, r5
   865de:	fbb1 f5f7 	udiv	r5, r1, r7
   865e2:	fb07 1315 	mls	r3, r7, r5, r1
   865e6:	fb0c fc05 	mul.w	ip, ip, r5
   865ea:	b280      	uxth	r0, r0
   865ec:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
   865f0:	458c      	cmp	ip, r1
   865f2:	d907      	bls.n	86604 <__divdi3+0x90>
   865f4:	1e6b      	subs	r3, r5, #1
   865f6:	188a      	adds	r2, r1, r2
   865f8:	f080 8100 	bcs.w	867fc <__divdi3+0x288>
   865fc:	4594      	cmp	ip, r2
   865fe:	f240 80fd 	bls.w	867fc <__divdi3+0x288>
   86602:	3d02      	subs	r5, #2
   86604:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
   86608:	2500      	movs	r5, #0
   8660a:	e003      	b.n	86614 <__divdi3+0xa0>
   8660c:	428b      	cmp	r3, r1
   8660e:	d90c      	bls.n	8662a <__divdi3+0xb6>
   86610:	2500      	movs	r5, #0
   86612:	4629      	mov	r1, r5
   86614:	460a      	mov	r2, r1
   86616:	462b      	mov	r3, r5
   86618:	b114      	cbz	r4, 86620 <__divdi3+0xac>
   8661a:	4252      	negs	r2, r2
   8661c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   86620:	4610      	mov	r0, r2
   86622:	4619      	mov	r1, r3
   86624:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   86628:	4770      	bx	lr
   8662a:	fab3 f583 	clz	r5, r3
   8662e:	2d00      	cmp	r5, #0
   86630:	f040 8087 	bne.w	86742 <__divdi3+0x1ce>
   86634:	428b      	cmp	r3, r1
   86636:	d301      	bcc.n	8663c <__divdi3+0xc8>
   86638:	4282      	cmp	r2, r0
   8663a:	d8ea      	bhi.n	86612 <__divdi3+0x9e>
   8663c:	2500      	movs	r5, #0
   8663e:	2101      	movs	r1, #1
   86640:	e7e8      	b.n	86614 <__divdi3+0xa0>
   86642:	b912      	cbnz	r2, 8664a <__divdi3+0xd6>
   86644:	2601      	movs	r6, #1
   86646:	fbb6 f2f2 	udiv	r2, r6, r2
   8664a:	fab2 f682 	clz	r6, r2
   8664e:	2e00      	cmp	r6, #0
   86650:	d139      	bne.n	866c6 <__divdi3+0x152>
   86652:	1a8e      	subs	r6, r1, r2
   86654:	0c13      	lsrs	r3, r2, #16
   86656:	fa1f fc82 	uxth.w	ip, r2
   8665a:	2501      	movs	r5, #1
   8665c:	fbb6 f7f3 	udiv	r7, r6, r3
   86660:	fb03 6117 	mls	r1, r3, r7, r6
   86664:	fb0c f807 	mul.w	r8, ip, r7
   86668:	ea4f 4910 	mov.w	r9, r0, lsr #16
   8666c:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
   86670:	45b0      	cmp	r8, r6
   86672:	d906      	bls.n	86682 <__divdi3+0x10e>
   86674:	1e79      	subs	r1, r7, #1
   86676:	18b6      	adds	r6, r6, r2
   86678:	d202      	bcs.n	86680 <__divdi3+0x10c>
   8667a:	45b0      	cmp	r8, r6
   8667c:	f200 80d3 	bhi.w	86826 <__divdi3+0x2b2>
   86680:	460f      	mov	r7, r1
   86682:	ebc8 0606 	rsb	r6, r8, r6
   86686:	fbb6 f1f3 	udiv	r1, r6, r3
   8668a:	fb03 6311 	mls	r3, r3, r1, r6
   8668e:	fb0c fc01 	mul.w	ip, ip, r1
   86692:	b280      	uxth	r0, r0
   86694:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   86698:	459c      	cmp	ip, r3
   8669a:	d906      	bls.n	866aa <__divdi3+0x136>
   8669c:	1e4e      	subs	r6, r1, #1
   8669e:	189a      	adds	r2, r3, r2
   866a0:	d202      	bcs.n	866a8 <__divdi3+0x134>
   866a2:	4594      	cmp	ip, r2
   866a4:	f200 80c2 	bhi.w	8682c <__divdi3+0x2b8>
   866a8:	4631      	mov	r1, r6
   866aa:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   866ae:	e7b1      	b.n	86614 <__divdi3+0xa0>
   866b0:	43e4      	mvns	r4, r4
   866b2:	4252      	negs	r2, r2
   866b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   866b8:	e766      	b.n	86588 <__divdi3+0x14>
   866ba:	4240      	negs	r0, r0
   866bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   866c0:	f04f 34ff 	mov.w	r4, #4294967295
   866c4:	e75d      	b.n	86582 <__divdi3+0xe>
   866c6:	40b2      	lsls	r2, r6
   866c8:	f1c6 0920 	rsb	r9, r6, #32
   866cc:	fa21 f709 	lsr.w	r7, r1, r9
   866d0:	fa20 f909 	lsr.w	r9, r0, r9
   866d4:	fa01 f106 	lsl.w	r1, r1, r6
   866d8:	0c13      	lsrs	r3, r2, #16
   866da:	fbb7 f8f3 	udiv	r8, r7, r3
   866de:	fa1f fc82 	uxth.w	ip, r2
   866e2:	fb03 7718 	mls	r7, r3, r8, r7
   866e6:	fb0c f508 	mul.w	r5, ip, r8
   866ea:	ea49 0901 	orr.w	r9, r9, r1
   866ee:	ea4f 4119 	mov.w	r1, r9, lsr #16
   866f2:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
   866f6:	40b0      	lsls	r0, r6
   866f8:	42bd      	cmp	r5, r7
   866fa:	d90a      	bls.n	86712 <__divdi3+0x19e>
   866fc:	18bf      	adds	r7, r7, r2
   866fe:	f108 36ff 	add.w	r6, r8, #4294967295
   86702:	f080 808e 	bcs.w	86822 <__divdi3+0x2ae>
   86706:	42bd      	cmp	r5, r7
   86708:	f240 808b 	bls.w	86822 <__divdi3+0x2ae>
   8670c:	f1a8 0802 	sub.w	r8, r8, #2
   86710:	18bf      	adds	r7, r7, r2
   86712:	1b79      	subs	r1, r7, r5
   86714:	fbb1 f5f3 	udiv	r5, r1, r3
   86718:	fb03 1715 	mls	r7, r3, r5, r1
   8671c:	fb0c f605 	mul.w	r6, ip, r5
   86720:	fa1f f989 	uxth.w	r9, r9
   86724:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
   86728:	428e      	cmp	r6, r1
   8672a:	d906      	bls.n	8673a <__divdi3+0x1c6>
   8672c:	1e6f      	subs	r7, r5, #1
   8672e:	1889      	adds	r1, r1, r2
   86730:	d271      	bcs.n	86816 <__divdi3+0x2a2>
   86732:	428e      	cmp	r6, r1
   86734:	d96f      	bls.n	86816 <__divdi3+0x2a2>
   86736:	3d02      	subs	r5, #2
   86738:	1889      	adds	r1, r1, r2
   8673a:	1b8e      	subs	r6, r1, r6
   8673c:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
   86740:	e78c      	b.n	8665c <__divdi3+0xe8>
   86742:	f1c5 0120 	rsb	r1, r5, #32
   86746:	fa22 f301 	lsr.w	r3, r2, r1
   8674a:	fa06 f605 	lsl.w	r6, r6, r5
   8674e:	fa27 f201 	lsr.w	r2, r7, r1
   86752:	fa07 f705 	lsl.w	r7, r7, r5
   86756:	fa20 f101 	lsr.w	r1, r0, r1
   8675a:	431e      	orrs	r6, r3
   8675c:	ea4f 4916 	mov.w	r9, r6, lsr #16
   86760:	fbb2 f8f9 	udiv	r8, r2, r9
   86764:	fa1f fa86 	uxth.w	sl, r6
   86768:	fb09 2218 	mls	r2, r9, r8, r2
   8676c:	fb0a fb08 	mul.w	fp, sl, r8
   86770:	430f      	orrs	r7, r1
   86772:	0c3b      	lsrs	r3, r7, #16
   86774:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   86778:	4593      	cmp	fp, r2
   8677a:	fa0c fc05 	lsl.w	ip, ip, r5
   8677e:	d908      	bls.n	86792 <__divdi3+0x21e>
   86780:	1992      	adds	r2, r2, r6
   86782:	f108 31ff 	add.w	r1, r8, #4294967295
   86786:	d24a      	bcs.n	8681e <__divdi3+0x2aa>
   86788:	4593      	cmp	fp, r2
   8678a:	d948      	bls.n	8681e <__divdi3+0x2aa>
   8678c:	f1a8 0802 	sub.w	r8, r8, #2
   86790:	1992      	adds	r2, r2, r6
   86792:	ebcb 0302 	rsb	r3, fp, r2
   86796:	fbb3 f1f9 	udiv	r1, r3, r9
   8679a:	fb09 3211 	mls	r2, r9, r1, r3
   8679e:	fb0a fa01 	mul.w	sl, sl, r1
   867a2:	b2bf      	uxth	r7, r7
   867a4:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
   867a8:	459a      	cmp	sl, r3
   867aa:	d906      	bls.n	867ba <__divdi3+0x246>
   867ac:	1e4a      	subs	r2, r1, #1
   867ae:	199b      	adds	r3, r3, r6
   867b0:	d233      	bcs.n	8681a <__divdi3+0x2a6>
   867b2:	459a      	cmp	sl, r3
   867b4:	d931      	bls.n	8681a <__divdi3+0x2a6>
   867b6:	3902      	subs	r1, #2
   867b8:	199b      	adds	r3, r3, r6
   867ba:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
   867be:	0c0f      	lsrs	r7, r1, #16
   867c0:	fa1f f88c 	uxth.w	r8, ip
   867c4:	fb08 f607 	mul.w	r6, r8, r7
   867c8:	b28a      	uxth	r2, r1
   867ca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   867ce:	fb08 f802 	mul.w	r8, r8, r2
   867d2:	fb0c 6202 	mla	r2, ip, r2, r6
   867d6:	fb0c fc07 	mul.w	ip, ip, r7
   867da:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   867de:	4296      	cmp	r6, r2
   867e0:	bf88      	it	hi
   867e2:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
   867e6:	ebca 0303 	rsb	r3, sl, r3
   867ea:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
   867ee:	4563      	cmp	r3, ip
   867f0:	d30e      	bcc.n	86810 <__divdi3+0x29c>
   867f2:	d005      	beq.n	86800 <__divdi3+0x28c>
   867f4:	2500      	movs	r5, #0
   867f6:	e70d      	b.n	86614 <__divdi3+0xa0>
   867f8:	460e      	mov	r6, r1
   867fa:	e6ef      	b.n	865dc <__divdi3+0x68>
   867fc:	461d      	mov	r5, r3
   867fe:	e701      	b.n	86604 <__divdi3+0x90>
   86800:	fa00 f005 	lsl.w	r0, r0, r5
   86804:	fa1f f888 	uxth.w	r8, r8
   86808:	eb08 4502 	add.w	r5, r8, r2, lsl #16
   8680c:	42a8      	cmp	r0, r5
   8680e:	d2f1      	bcs.n	867f4 <__divdi3+0x280>
   86810:	3901      	subs	r1, #1
   86812:	2500      	movs	r5, #0
   86814:	e6fe      	b.n	86614 <__divdi3+0xa0>
   86816:	463d      	mov	r5, r7
   86818:	e78f      	b.n	8673a <__divdi3+0x1c6>
   8681a:	4611      	mov	r1, r2
   8681c:	e7cd      	b.n	867ba <__divdi3+0x246>
   8681e:	4688      	mov	r8, r1
   86820:	e7b7      	b.n	86792 <__divdi3+0x21e>
   86822:	46b0      	mov	r8, r6
   86824:	e775      	b.n	86712 <__divdi3+0x19e>
   86826:	3f02      	subs	r7, #2
   86828:	18b6      	adds	r6, r6, r2
   8682a:	e72a      	b.n	86682 <__divdi3+0x10e>
   8682c:	3902      	subs	r1, #2
   8682e:	e73c      	b.n	866aa <__divdi3+0x136>

00086830 <__udivdi3>:
   86830:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   86834:	4614      	mov	r4, r2
   86836:	4605      	mov	r5, r0
   86838:	460e      	mov	r6, r1
   8683a:	2b00      	cmp	r3, #0
   8683c:	d13d      	bne.n	868ba <__udivdi3+0x8a>
   8683e:	428a      	cmp	r2, r1
   86840:	d949      	bls.n	868d6 <__udivdi3+0xa6>
   86842:	fab2 f782 	clz	r7, r2
   86846:	b147      	cbz	r7, 8685a <__udivdi3+0x2a>
   86848:	f1c7 0120 	rsb	r1, r7, #32
   8684c:	fa20 f201 	lsr.w	r2, r0, r1
   86850:	fa06 f607 	lsl.w	r6, r6, r7
   86854:	40bc      	lsls	r4, r7
   86856:	40bd      	lsls	r5, r7
   86858:	4316      	orrs	r6, r2
   8685a:	0c22      	lsrs	r2, r4, #16
   8685c:	fbb6 f0f2 	udiv	r0, r6, r2
   86860:	b2a1      	uxth	r1, r4
   86862:	fb02 6610 	mls	r6, r2, r0, r6
   86866:	fb01 f300 	mul.w	r3, r1, r0
   8686a:	0c2f      	lsrs	r7, r5, #16
   8686c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   86870:	42b3      	cmp	r3, r6
   86872:	d908      	bls.n	86886 <__udivdi3+0x56>
   86874:	1e47      	subs	r7, r0, #1
   86876:	1936      	adds	r6, r6, r4
   86878:	f080 80fa 	bcs.w	86a70 <__udivdi3+0x240>
   8687c:	42b3      	cmp	r3, r6
   8687e:	f240 80f7 	bls.w	86a70 <__udivdi3+0x240>
   86882:	3802      	subs	r0, #2
   86884:	1936      	adds	r6, r6, r4
   86886:	1af6      	subs	r6, r6, r3
   86888:	fbb6 f3f2 	udiv	r3, r6, r2
   8688c:	fb02 6213 	mls	r2, r2, r3, r6
   86890:	fb01 f103 	mul.w	r1, r1, r3
   86894:	b2ad      	uxth	r5, r5
   86896:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
   8689a:	4291      	cmp	r1, r2
   8689c:	d907      	bls.n	868ae <__udivdi3+0x7e>
   8689e:	1e5e      	subs	r6, r3, #1
   868a0:	1912      	adds	r2, r2, r4
   868a2:	f080 80e7 	bcs.w	86a74 <__udivdi3+0x244>
   868a6:	4291      	cmp	r1, r2
   868a8:	f240 80e4 	bls.w	86a74 <__udivdi3+0x244>
   868ac:	3b02      	subs	r3, #2
   868ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   868b2:	2100      	movs	r1, #0
   868b4:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   868b8:	4770      	bx	lr
   868ba:	428b      	cmp	r3, r1
   868bc:	d843      	bhi.n	86946 <__udivdi3+0x116>
   868be:	fab3 f483 	clz	r4, r3
   868c2:	2c00      	cmp	r4, #0
   868c4:	d142      	bne.n	8694c <__udivdi3+0x11c>
   868c6:	428b      	cmp	r3, r1
   868c8:	d302      	bcc.n	868d0 <__udivdi3+0xa0>
   868ca:	4282      	cmp	r2, r0
   868cc:	f200 80e1 	bhi.w	86a92 <__udivdi3+0x262>
   868d0:	2100      	movs	r1, #0
   868d2:	2001      	movs	r0, #1
   868d4:	e7ee      	b.n	868b4 <__udivdi3+0x84>
   868d6:	b912      	cbnz	r2, 868de <__udivdi3+0xae>
   868d8:	2701      	movs	r7, #1
   868da:	fbb7 f4f2 	udiv	r4, r7, r2
   868de:	fab4 f284 	clz	r2, r4
   868e2:	2a00      	cmp	r2, #0
   868e4:	f040 8089 	bne.w	869fa <__udivdi3+0x1ca>
   868e8:	1b0a      	subs	r2, r1, r4
   868ea:	0c23      	lsrs	r3, r4, #16
   868ec:	b2a7      	uxth	r7, r4
   868ee:	2101      	movs	r1, #1
   868f0:	fbb2 f6f3 	udiv	r6, r2, r3
   868f4:	fb03 2216 	mls	r2, r3, r6, r2
   868f8:	fb07 f006 	mul.w	r0, r7, r6
   868fc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   86900:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   86904:	4290      	cmp	r0, r2
   86906:	d907      	bls.n	86918 <__udivdi3+0xe8>
   86908:	1912      	adds	r2, r2, r4
   8690a:	f106 3cff 	add.w	ip, r6, #4294967295
   8690e:	d202      	bcs.n	86916 <__udivdi3+0xe6>
   86910:	4290      	cmp	r0, r2
   86912:	f200 80d0 	bhi.w	86ab6 <__udivdi3+0x286>
   86916:	4666      	mov	r6, ip
   86918:	1a12      	subs	r2, r2, r0
   8691a:	fbb2 f0f3 	udiv	r0, r2, r3
   8691e:	fb03 2310 	mls	r3, r3, r0, r2
   86922:	fb07 f700 	mul.w	r7, r7, r0
   86926:	b2ad      	uxth	r5, r5
   86928:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   8692c:	429f      	cmp	r7, r3
   8692e:	d907      	bls.n	86940 <__udivdi3+0x110>
   86930:	1e42      	subs	r2, r0, #1
   86932:	191b      	adds	r3, r3, r4
   86934:	f080 80a0 	bcs.w	86a78 <__udivdi3+0x248>
   86938:	429f      	cmp	r7, r3
   8693a:	f240 809d 	bls.w	86a78 <__udivdi3+0x248>
   8693e:	3802      	subs	r0, #2
   86940:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   86944:	e7b6      	b.n	868b4 <__udivdi3+0x84>
   86946:	2100      	movs	r1, #0
   86948:	4608      	mov	r0, r1
   8694a:	e7b3      	b.n	868b4 <__udivdi3+0x84>
   8694c:	f1c4 0620 	rsb	r6, r4, #32
   86950:	fa22 f706 	lsr.w	r7, r2, r6
   86954:	fa03 f304 	lsl.w	r3, r3, r4
   86958:	fa21 f506 	lsr.w	r5, r1, r6
   8695c:	fa01 f104 	lsl.w	r1, r1, r4
   86960:	fa20 f606 	lsr.w	r6, r0, r6
   86964:	433b      	orrs	r3, r7
   86966:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8696a:	fbb5 f7fc 	udiv	r7, r5, ip
   8696e:	fa1f f883 	uxth.w	r8, r3
   86972:	fb0c 5517 	mls	r5, ip, r7, r5
   86976:	fb08 f907 	mul.w	r9, r8, r7
   8697a:	ea46 0a01 	orr.w	sl, r6, r1
   8697e:	ea4f 411a 	mov.w	r1, sl, lsr #16
   86982:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   86986:	45a9      	cmp	r9, r5
   86988:	fa02 f204 	lsl.w	r2, r2, r4
   8698c:	d904      	bls.n	86998 <__udivdi3+0x168>
   8698e:	1e7e      	subs	r6, r7, #1
   86990:	18ed      	adds	r5, r5, r3
   86992:	f0c0 8081 	bcc.w	86a98 <__udivdi3+0x268>
   86996:	4637      	mov	r7, r6
   86998:	ebc9 0105 	rsb	r1, r9, r5
   8699c:	fbb1 f6fc 	udiv	r6, r1, ip
   869a0:	fb0c 1516 	mls	r5, ip, r6, r1
   869a4:	fb08 f806 	mul.w	r8, r8, r6
   869a8:	fa1f fa8a 	uxth.w	sl, sl
   869ac:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
   869b0:	4588      	cmp	r8, r1
   869b2:	d903      	bls.n	869bc <__udivdi3+0x18c>
   869b4:	1e75      	subs	r5, r6, #1
   869b6:	18c9      	adds	r1, r1, r3
   869b8:	d374      	bcc.n	86aa4 <__udivdi3+0x274>
   869ba:	462e      	mov	r6, r5
   869bc:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   869c0:	0c37      	lsrs	r7, r6, #16
   869c2:	fa1f fc82 	uxth.w	ip, r2
   869c6:	fb0c f507 	mul.w	r5, ip, r7
   869ca:	0c12      	lsrs	r2, r2, #16
   869cc:	b2b3      	uxth	r3, r6
   869ce:	fb0c fc03 	mul.w	ip, ip, r3
   869d2:	fb02 5303 	mla	r3, r2, r3, r5
   869d6:	fb02 f207 	mul.w	r2, r2, r7
   869da:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   869de:	429d      	cmp	r5, r3
   869e0:	bf88      	it	hi
   869e2:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
   869e6:	ebc8 0101 	rsb	r1, r8, r1
   869ea:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   869ee:	4291      	cmp	r1, r2
   869f0:	d34c      	bcc.n	86a8c <__udivdi3+0x25c>
   869f2:	d043      	beq.n	86a7c <__udivdi3+0x24c>
   869f4:	4630      	mov	r0, r6
   869f6:	2100      	movs	r1, #0
   869f8:	e75c      	b.n	868b4 <__udivdi3+0x84>
   869fa:	4094      	lsls	r4, r2
   869fc:	f1c2 0520 	rsb	r5, r2, #32
   86a00:	fa21 f605 	lsr.w	r6, r1, r5
   86a04:	fa20 f505 	lsr.w	r5, r0, r5
   86a08:	fa01 f102 	lsl.w	r1, r1, r2
   86a0c:	0c23      	lsrs	r3, r4, #16
   86a0e:	fbb6 fcf3 	udiv	ip, r6, r3
   86a12:	b2a7      	uxth	r7, r4
   86a14:	fb03 661c 	mls	r6, r3, ip, r6
   86a18:	fb07 f80c 	mul.w	r8, r7, ip
   86a1c:	4329      	orrs	r1, r5
   86a1e:	0c0d      	lsrs	r5, r1, #16
   86a20:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   86a24:	45b0      	cmp	r8, r6
   86a26:	fa00 f502 	lsl.w	r5, r0, r2
   86a2a:	d908      	bls.n	86a3e <__udivdi3+0x20e>
   86a2c:	1936      	adds	r6, r6, r4
   86a2e:	f10c 30ff 	add.w	r0, ip, #4294967295
   86a32:	d23e      	bcs.n	86ab2 <__udivdi3+0x282>
   86a34:	45b0      	cmp	r8, r6
   86a36:	d93c      	bls.n	86ab2 <__udivdi3+0x282>
   86a38:	f1ac 0c02 	sub.w	ip, ip, #2
   86a3c:	1936      	adds	r6, r6, r4
   86a3e:	ebc8 0206 	rsb	r2, r8, r6
   86a42:	fbb2 f0f3 	udiv	r0, r2, r3
   86a46:	fb03 2610 	mls	r6, r3, r0, r2
   86a4a:	fb07 f800 	mul.w	r8, r7, r0
   86a4e:	b289      	uxth	r1, r1
   86a50:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   86a54:	4590      	cmp	r8, r2
   86a56:	d906      	bls.n	86a66 <__udivdi3+0x236>
   86a58:	1e46      	subs	r6, r0, #1
   86a5a:	1912      	adds	r2, r2, r4
   86a5c:	d227      	bcs.n	86aae <__udivdi3+0x27e>
   86a5e:	4590      	cmp	r8, r2
   86a60:	d925      	bls.n	86aae <__udivdi3+0x27e>
   86a62:	3802      	subs	r0, #2
   86a64:	1912      	adds	r2, r2, r4
   86a66:	ebc8 0202 	rsb	r2, r8, r2
   86a6a:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
   86a6e:	e73f      	b.n	868f0 <__udivdi3+0xc0>
   86a70:	4638      	mov	r0, r7
   86a72:	e708      	b.n	86886 <__udivdi3+0x56>
   86a74:	4633      	mov	r3, r6
   86a76:	e71a      	b.n	868ae <__udivdi3+0x7e>
   86a78:	4610      	mov	r0, r2
   86a7a:	e761      	b.n	86940 <__udivdi3+0x110>
   86a7c:	fa00 f004 	lsl.w	r0, r0, r4
   86a80:	fa1f fc8c 	uxth.w	ip, ip
   86a84:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
   86a88:	4298      	cmp	r0, r3
   86a8a:	d2b3      	bcs.n	869f4 <__udivdi3+0x1c4>
   86a8c:	1e70      	subs	r0, r6, #1
   86a8e:	2100      	movs	r1, #0
   86a90:	e710      	b.n	868b4 <__udivdi3+0x84>
   86a92:	4621      	mov	r1, r4
   86a94:	4620      	mov	r0, r4
   86a96:	e70d      	b.n	868b4 <__udivdi3+0x84>
   86a98:	45a9      	cmp	r9, r5
   86a9a:	f67f af7c 	bls.w	86996 <__udivdi3+0x166>
   86a9e:	3f02      	subs	r7, #2
   86aa0:	18ed      	adds	r5, r5, r3
   86aa2:	e779      	b.n	86998 <__udivdi3+0x168>
   86aa4:	4588      	cmp	r8, r1
   86aa6:	d988      	bls.n	869ba <__udivdi3+0x18a>
   86aa8:	3e02      	subs	r6, #2
   86aaa:	18c9      	adds	r1, r1, r3
   86aac:	e786      	b.n	869bc <__udivdi3+0x18c>
   86aae:	4630      	mov	r0, r6
   86ab0:	e7d9      	b.n	86a66 <__udivdi3+0x236>
   86ab2:	4684      	mov	ip, r0
   86ab4:	e7c3      	b.n	86a3e <__udivdi3+0x20e>
   86ab6:	3e02      	subs	r6, #2
   86ab8:	1912      	adds	r2, r2, r4
   86aba:	e72d      	b.n	86918 <__udivdi3+0xe8>
   86abc:	6e6f7246 	.word	0x6e6f7246
   86ac0:	6f632074 	.word	0x6f632074
   86ac4:	6f72746e 	.word	0x6f72746e
   86ac8:	72656c6c 	.word	0x72656c6c
   86acc:	00000000 	.word	0x00000000
   86ad0:	6c756f43 	.word	0x6c756f43
   86ad4:	6f6e2064 	.word	0x6f6e2064
   86ad8:	72632074 	.word	0x72632074
   86adc:	65746165 	.word	0x65746165
   86ae0:	73617420 	.word	0x73617420
   86ae4:	7246206b 	.word	0x7246206b
   86ae8:	20746e6f 	.word	0x20746e6f
   86aec:	746e6f63 	.word	0x746e6f63
   86af0:	6c6c6f72 	.word	0x6c6c6f72
   86af4:	00007265 	.word	0x00007265
   86af8:	6b636142 	.word	0x6b636142
   86afc:	6e6f6320 	.word	0x6e6f6320
   86b00:	6c6f7274 	.word	0x6c6f7274
   86b04:	0072656c 	.word	0x0072656c
   86b08:	6c756f43 	.word	0x6c756f43
   86b0c:	6f6e2064 	.word	0x6f6e2064
   86b10:	72632074 	.word	0x72632074
   86b14:	65746165 	.word	0x65746165
   86b18:	73617420 	.word	0x73617420
   86b1c:	6142206b 	.word	0x6142206b
   86b20:	63206b63 	.word	0x63206b63
   86b24:	72746e6f 	.word	0x72746e6f
   86b28:	656c6c6f 	.word	0x656c6c6f
   86b2c:	00000072 	.word	0x00000072
   86b30:	6d6d6f43 	.word	0x6d6d6f43
   86b34:	63696e75 	.word	0x63696e75
   86b38:	6f697461 	.word	0x6f697461
   86b3c:	0000006e 	.word	0x0000006e
   86b40:	6c756f43 	.word	0x6c756f43
   86b44:	6f6e2064 	.word	0x6f6e2064
   86b48:	72632074 	.word	0x72632074
   86b4c:	65746165 	.word	0x65746165
   86b50:	73617420 	.word	0x73617420
   86b54:	6f43206b 	.word	0x6f43206b
   86b58:	6e756d6d 	.word	0x6e756d6d
   86b5c:	74616369 	.word	0x74616369
   86b60:	006e6f69 	.word	0x006e6f69
   86b64:	252c6425 	.word	0x252c6425
   86b68:	64252c64 	.word	0x64252c64
   86b6c:	2c64252c 	.word	0x2c64252c
   86b70:	252c6425 	.word	0x252c6425
   86b74:	64252c64 	.word	0x64252c64
   86b78:	0a64252c 	.word	0x0a64252c
   86b7c:	0000000d 	.word	0x0000000d
   86b80:	09097325 	.word	0x09097325
   86b84:	25096325 	.word	0x25096325
   86b88:	75250975 	.word	0x75250975
   86b8c:	0d752509 	.word	0x0d752509
   86b90:	0000000a 	.word	0x0000000a
   86b94:	454c4449 	.word	0x454c4449
   86b98:	00000000 	.word	0x00000000
   86b9c:	00000a0d 	.word	0x00000a0d
   86ba0:	20726d54 	.word	0x20726d54
   86ba4:	00637653 	.word	0x00637653
   86ba8:	00000001 	.word	0x00000001
   86bac:	00000002 	.word	0x00000002
   86bb0:	00000004 	.word	0x00000004
   86bb4:	00000008 	.word	0x00000008
   86bb8:	00000010 	.word	0x00000010
   86bbc:	00000020 	.word	0x00000020
   86bc0:	00000040 	.word	0x00000040
   86bc4:	00000080 	.word	0x00000080
   86bc8:	00000100 	.word	0x00000100
   86bcc:	00000200 	.word	0x00000200
   86bd0:	00000400 	.word	0x00000400

00086bd4 <_global_impure_ptr>:
   86bd4:	20070018 20200043                                ... C.

00086bda <blanks.6678>:
   86bda:	20202020 20202020 20202020 20202020                     

00086bea <zeroes.6679>:
   86bea:	30303030 30303030 30303030 30303030     0000000000000000
   86bfa:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   86c0a:	32313000 36353433 61393837 65646362     .0123456789abcde
   86c1a:	4f500066 00584953 b5f8002e                       f.POSIX...

00086c24 <_init>:
   86c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86c26:	bf00      	nop
   86c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86c2a:	bc08      	pop	{r3}
   86c2c:	469e      	mov	lr, r3
   86c2e:	4770      	bx	lr

00086c30 <__init_array_start>:
   86c30:	00085035 	.word	0x00085035

00086c34 <__frame_dummy_init_array_entry>:
   86c34:	0008016d                                m...

00086c38 <_fini>:
   86c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86c3a:	bf00      	nop
   86c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86c3e:	bc08      	pop	{r3}
   86c40:	469e      	mov	lr, r3
   86c42:	4770      	bx	lr

00086c44 <__fini_array_start>:
   86c44:	00080145 	.word	0x00080145
