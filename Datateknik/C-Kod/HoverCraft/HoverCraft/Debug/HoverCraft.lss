
HoverCraft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000045a4  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000845a4  000845a4  0000c5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008c8  20070000  000845ac  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000001d8  200708c8  00084e74  000108c8  2**2
                  ALLOC
  4 .stack        00002000  20070aa0  0008504c  000108c8  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000108c8  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  000108f1  2**0
                  CONTENTS, READONLY
  7 .debug_info   00028759  00000000  00000000  00010962  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007427  00000000  00000000  000390bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ca76  00000000  00000000  000404e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000012f0  00000000  00000000  0004cf58  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d28  00000000  00000000  0004e248  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000190c7  00000000  00000000  0004ef70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00015774  00000000  00000000  00068037  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00071d57  00000000  00000000  0007d7ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002914  00000000  00000000  000ef504  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072aa0 	.word	0x20072aa0
   80004:	000819cd 	.word	0x000819cd
   80008:	000819c9 	.word	0x000819c9
   8000c:	000819c9 	.word	0x000819c9
   80010:	000819c9 	.word	0x000819c9
   80014:	000819c9 	.word	0x000819c9
   80018:	000819c9 	.word	0x000819c9
	...
   8002c:	00081295 	.word	0x00081295
   80030:	000819c9 	.word	0x000819c9
   80034:	00000000 	.word	0x00000000
   80038:	000812cd 	.word	0x000812cd
   8003c:	00081309 	.word	0x00081309
   80040:	000819c9 	.word	0x000819c9
   80044:	000819c9 	.word	0x000819c9
   80048:	000819c9 	.word	0x000819c9
   8004c:	000819c9 	.word	0x000819c9
   80050:	000819c9 	.word	0x000819c9
   80054:	000819c9 	.word	0x000819c9
   80058:	000819c9 	.word	0x000819c9
   8005c:	000819c9 	.word	0x000819c9
   80060:	000819c9 	.word	0x000819c9
   80064:	000819c9 	.word	0x000819c9
   80068:	00000000 	.word	0x00000000
   8006c:	00081839 	.word	0x00081839
   80070:	0008184d 	.word	0x0008184d
   80074:	00081861 	.word	0x00081861
   80078:	00081875 	.word	0x00081875
	...
   80084:	000819c9 	.word	0x000819c9
   80088:	000819c9 	.word	0x000819c9
   8008c:	000819c9 	.word	0x000819c9
   80090:	000819c9 	.word	0x000819c9
   80094:	000819c9 	.word	0x000819c9
   80098:	000819c9 	.word	0x000819c9
   8009c:	000819c9 	.word	0x000819c9
   800a0:	000819c9 	.word	0x000819c9
   800a4:	00000000 	.word	0x00000000
   800a8:	000819c9 	.word	0x000819c9
   800ac:	000819c9 	.word	0x000819c9
   800b0:	000819c9 	.word	0x000819c9
   800b4:	000819c9 	.word	0x000819c9
   800b8:	000819c9 	.word	0x000819c9
   800bc:	000819c9 	.word	0x000819c9
   800c0:	000819c9 	.word	0x000819c9
   800c4:	000819c9 	.word	0x000819c9
   800c8:	000819c9 	.word	0x000819c9
   800cc:	000819c9 	.word	0x000819c9
   800d0:	000819c9 	.word	0x000819c9
   800d4:	000819c9 	.word	0x000819c9
   800d8:	000819c9 	.word	0x000819c9
   800dc:	000819c9 	.word	0x000819c9
   800e0:	000819c9 	.word	0x000819c9
   800e4:	000819c9 	.word	0x000819c9
   800e8:	000819c9 	.word	0x000819c9
   800ec:	000819c9 	.word	0x000819c9
   800f0:	000819c9 	.word	0x000819c9

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a1b      	subs	r3, r3, r0
   800fc:	2b06      	cmp	r3, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4b04      	ldr	r3, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2b00      	cmp	r3, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4798      	blx	r3
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	000845ac 	.word	0x000845ac
   80110:	000845af 	.word	0x000845af
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a1b      	subs	r3, r3, r0
   80120:	109b      	asrs	r3, r3, #2
   80122:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	000845ac 	.word	0x000845ac
   8013c:	000845ac 	.word	0x000845ac
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4b04      	ldr	r3, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b113      	cbz	r3, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2301      	movs	r3, #1
   8015c:	7023      	strb	r3, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	200708c8 	.word	0x200708c8
   80164:	00000000 	.word	0x00000000
   80168:	000845ac 	.word	0x000845ac

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6803      	ldr	r3, [r0, #0]
   8017e:	b113      	cbz	r3, 80186 <frame_dummy+0x1a>
   80180:	4b07      	ldr	r3, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b103      	cbz	r3, 80186 <frame_dummy+0x1a>
   80184:	4798      	blx	r3
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	000845ac 	.word	0x000845ac
   80198:	200708cc 	.word	0x200708cc
   8019c:	000845ac 	.word	0x000845ac
   801a0:	00000000 	.word	0x00000000

000801a4 <init_adc>:

/* Enable the adc */

#include <asf.h>

void init_adc(void){
   801a4:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
   801a6:	2025      	movs	r0, #37	; 0x25
   801a8:	4b0e      	ldr	r3, [pc, #56]	; (801e4 <init_adc+0x40>)
   801aa:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 1000000, 8);
   801ac:	4c0e      	ldr	r4, [pc, #56]	; (801e8 <init_adc+0x44>)
   801ae:	4620      	mov	r0, r4
   801b0:	490e      	ldr	r1, [pc, #56]	; (801ec <init_adc+0x48>)
   801b2:	4a0f      	ldr	r2, [pc, #60]	; (801f0 <init_adc+0x4c>)
   801b4:	2308      	movs	r3, #8
   801b6:	4d0f      	ldr	r5, [pc, #60]	; (801f4 <init_adc+0x50>)
   801b8:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);
   801ba:	4620      	mov	r0, r4
   801bc:	2100      	movs	r1, #0
   801be:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   801c2:	2301      	movs	r3, #1
   801c4:	4d0c      	ldr	r5, [pc, #48]	; (801f8 <init_adc+0x54>)
   801c6:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
   801c8:	4620      	mov	r0, r4
   801ca:	2100      	movs	r1, #0
   801cc:	4b0b      	ldr	r3, [pc, #44]	; (801fc <init_adc+0x58>)
   801ce:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_3);
   801d0:	4620      	mov	r0, r4
   801d2:	2104      	movs	r1, #4
   801d4:	4b0a      	ldr	r3, [pc, #40]	; (80200 <init_adc+0x5c>)
   801d6:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);	
   801d8:	4620      	mov	r0, r4
   801da:	2100      	movs	r1, #0
   801dc:	460a      	mov	r2, r1
   801de:	4b09      	ldr	r3, [pc, #36]	; (80204 <init_adc+0x60>)
   801e0:	4798      	blx	r3
   801e2:	bd38      	pop	{r3, r4, r5, pc}
   801e4:	00081971 	.word	0x00081971
   801e8:	400c0000 	.word	0x400c0000
   801ec:	0a037a00 	.word	0x0a037a00
   801f0:	000f4240 	.word	0x000f4240
   801f4:	00080561 	.word	0x00080561
   801f8:	000805b5 	.word	0x000805b5
   801fc:	00080595 	.word	0x00080595
   80200:	000805dd 	.word	0x000805dd
   80204:	000805a5 	.word	0x000805a5

00080208 <setUp>:
#include <asf.h>
#include "unity.h"

Adc* adc;

void setUp(){
   80208:	4770      	bx	lr
   8020a:	bf00      	nop

0008020c <tearDown>:
}

void tearDown(){
   8020c:	4770      	bx	lr
   8020e:	bf00      	nop

00080210 <test_adc_12bit>:
void test_adc_enabled(void){
	
}

/* Method testing if the ADC resolution is 12 bit*/
void test_adc_12bit(void){
   80210:	b510      	push	{r4, lr}
   80212:	b082      	sub	sp, #8
	TEST_ASSERT_BIT_LOW_MESSAGE(4,ADC->ADC_MR,"ADC is 10bit");
   80214:	4b05      	ldr	r3, [pc, #20]	; (8022c <test_adc_12bit+0x1c>)
   80216:	685a      	ldr	r2, [r3, #4]
   80218:	2319      	movs	r3, #25
   8021a:	9300      	str	r3, [sp, #0]
   8021c:	2010      	movs	r0, #16
   8021e:	2100      	movs	r1, #0
   80220:	4b03      	ldr	r3, [pc, #12]	; (80230 <test_adc_12bit+0x20>)
   80222:	4c04      	ldr	r4, [pc, #16]	; (80234 <test_adc_12bit+0x24>)
   80224:	47a0      	blx	r4
}
   80226:	b002      	add	sp, #8
   80228:	bd10      	pop	{r4, pc}
   8022a:	bf00      	nop
   8022c:	400c0000 	.word	0x400c0000
   80230:	0008446c 	.word	0x0008446c
   80234:	00080f9d 	.word	0x00080f9d

00080238 <test_channel_3_enabled>:

/* Check if channel 3 is enabled*/
void test_channel_3_enabled(void){
   80238:	b510      	push	{r4, lr}
   8023a:	b082      	sub	sp, #8
	TEST_ASSERT_BIT_HIGH_MESSAGE(3,ADC->ADC_CHSR,"Channel 3 disabled");
   8023c:	4b05      	ldr	r3, [pc, #20]	; (80254 <test_channel_3_enabled+0x1c>)
   8023e:	699a      	ldr	r2, [r3, #24]
   80240:	231e      	movs	r3, #30
   80242:	9300      	str	r3, [sp, #0]
   80244:	2008      	movs	r0, #8
   80246:	f04f 31ff 	mov.w	r1, #4294967295
   8024a:	4b03      	ldr	r3, [pc, #12]	; (80258 <test_channel_3_enabled+0x20>)
   8024c:	4c03      	ldr	r4, [pc, #12]	; (8025c <test_channel_3_enabled+0x24>)
   8024e:	47a0      	blx	r4
   80250:	b002      	add	sp, #8
   80252:	bd10      	pop	{r4, pc}
   80254:	400c0000 	.word	0x400c0000
   80258:	0008447c 	.word	0x0008447c
   8025c:	00080f9d 	.word	0x00080f9d

00080260 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80260:	b5f0      	push	{r4, r5, r6, r7, lr}
   80262:	b083      	sub	sp, #12
   80264:	4604      	mov	r4, r0
   80266:	460d      	mov	r5, r1
	uint32_t val;

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80268:	4b1f      	ldr	r3, [pc, #124]	; (802e8 <usart_serial_getchar+0x88>)
   8026a:	4298      	cmp	r0, r3
   8026c:	d107      	bne.n	8027e <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
   8026e:	461f      	mov	r7, r3
   80270:	4e1e      	ldr	r6, [pc, #120]	; (802ec <usart_serial_getchar+0x8c>)
   80272:	4638      	mov	r0, r7
   80274:	4629      	mov	r1, r5
   80276:	47b0      	blx	r6
   80278:	2800      	cmp	r0, #0
   8027a:	d1fa      	bne.n	80272 <usart_serial_getchar+0x12>
   8027c:	e019      	b.n	802b2 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8027e:	4b1c      	ldr	r3, [pc, #112]	; (802f0 <usart_serial_getchar+0x90>)
   80280:	4298      	cmp	r0, r3
   80282:	d109      	bne.n	80298 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
   80284:	461f      	mov	r7, r3
   80286:	4e1b      	ldr	r6, [pc, #108]	; (802f4 <usart_serial_getchar+0x94>)
   80288:	4638      	mov	r0, r7
   8028a:	a901      	add	r1, sp, #4
   8028c:	47b0      	blx	r6
   8028e:	2800      	cmp	r0, #0
   80290:	d1fa      	bne.n	80288 <usart_serial_getchar+0x28>
		*data = (uint8_t)(val & 0xFF);
   80292:	9b01      	ldr	r3, [sp, #4]
   80294:	702b      	strb	r3, [r5, #0]
   80296:	e019      	b.n	802cc <usart_serial_getchar+0x6c>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80298:	4b17      	ldr	r3, [pc, #92]	; (802f8 <usart_serial_getchar+0x98>)
   8029a:	4298      	cmp	r0, r3
   8029c:	d109      	bne.n	802b2 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
   8029e:	461e      	mov	r6, r3
   802a0:	4c14      	ldr	r4, [pc, #80]	; (802f4 <usart_serial_getchar+0x94>)
   802a2:	4630      	mov	r0, r6
   802a4:	a901      	add	r1, sp, #4
   802a6:	47a0      	blx	r4
   802a8:	2800      	cmp	r0, #0
   802aa:	d1fa      	bne.n	802a2 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   802ac:	9b01      	ldr	r3, [sp, #4]
   802ae:	702b      	strb	r3, [r5, #0]
   802b0:	e018      	b.n	802e4 <usart_serial_getchar+0x84>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   802b2:	4b12      	ldr	r3, [pc, #72]	; (802fc <usart_serial_getchar+0x9c>)
   802b4:	429c      	cmp	r4, r3
   802b6:	d109      	bne.n	802cc <usart_serial_getchar+0x6c>
		while (usart_read(p_usart, &val));
   802b8:	461e      	mov	r6, r3
   802ba:	4c0e      	ldr	r4, [pc, #56]	; (802f4 <usart_serial_getchar+0x94>)
   802bc:	4630      	mov	r0, r6
   802be:	a901      	add	r1, sp, #4
   802c0:	47a0      	blx	r4
   802c2:	2800      	cmp	r0, #0
   802c4:	d1fa      	bne.n	802bc <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
   802c6:	9b01      	ldr	r3, [sp, #4]
   802c8:	702b      	strb	r3, [r5, #0]
   802ca:	e00b      	b.n	802e4 <usart_serial_getchar+0x84>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   802cc:	4b0c      	ldr	r3, [pc, #48]	; (80300 <usart_serial_getchar+0xa0>)
   802ce:	429c      	cmp	r4, r3
   802d0:	d108      	bne.n	802e4 <usart_serial_getchar+0x84>
		while (usart_read(p_usart, &val));
   802d2:	461e      	mov	r6, r3
   802d4:	4c07      	ldr	r4, [pc, #28]	; (802f4 <usart_serial_getchar+0x94>)
   802d6:	4630      	mov	r0, r6
   802d8:	a901      	add	r1, sp, #4
   802da:	47a0      	blx	r4
   802dc:	2800      	cmp	r0, #0
   802de:	d1fa      	bne.n	802d6 <usart_serial_getchar+0x76>
		*data = (uint8_t)(val & 0xFF);
   802e0:	9b01      	ldr	r3, [sp, #4]
   802e2:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   802e4:	b003      	add	sp, #12
   802e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   802e8:	400e0800 	.word	0x400e0800
   802ec:	00080639 	.word	0x00080639
   802f0:	40098000 	.word	0x40098000
   802f4:	00080665 	.word	0x00080665
   802f8:	4009c000 	.word	0x4009c000
   802fc:	400a0000 	.word	0x400a0000
   80300:	400a4000 	.word	0x400a4000

00080304 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80304:	b570      	push	{r4, r5, r6, lr}
   80306:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80308:	4b21      	ldr	r3, [pc, #132]	; (80390 <usart_serial_putchar+0x8c>)
   8030a:	4298      	cmp	r0, r3
   8030c:	d107      	bne.n	8031e <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   8030e:	461e      	mov	r6, r3
   80310:	4d20      	ldr	r5, [pc, #128]	; (80394 <usart_serial_putchar+0x90>)
   80312:	4630      	mov	r0, r6
   80314:	4621      	mov	r1, r4
   80316:	47a8      	blx	r5
   80318:	2800      	cmp	r0, #0
   8031a:	d1fa      	bne.n	80312 <usart_serial_putchar+0xe>
   8031c:	e02b      	b.n	80376 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8031e:	4b1e      	ldr	r3, [pc, #120]	; (80398 <usart_serial_putchar+0x94>)
   80320:	4298      	cmp	r0, r3
   80322:	d107      	bne.n	80334 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80324:	461e      	mov	r6, r3
   80326:	4d1d      	ldr	r5, [pc, #116]	; (8039c <usart_serial_putchar+0x98>)
   80328:	4630      	mov	r0, r6
   8032a:	4621      	mov	r1, r4
   8032c:	47a8      	blx	r5
   8032e:	2800      	cmp	r0, #0
   80330:	d1fa      	bne.n	80328 <usart_serial_putchar+0x24>
   80332:	e022      	b.n	8037a <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80334:	4b1a      	ldr	r3, [pc, #104]	; (803a0 <usart_serial_putchar+0x9c>)
   80336:	4298      	cmp	r0, r3
   80338:	d107      	bne.n	8034a <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   8033a:	461e      	mov	r6, r3
   8033c:	4d17      	ldr	r5, [pc, #92]	; (8039c <usart_serial_putchar+0x98>)
   8033e:	4630      	mov	r0, r6
   80340:	4621      	mov	r1, r4
   80342:	47a8      	blx	r5
   80344:	2800      	cmp	r0, #0
   80346:	d1fa      	bne.n	8033e <usart_serial_putchar+0x3a>
   80348:	e019      	b.n	8037e <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8034a:	4b16      	ldr	r3, [pc, #88]	; (803a4 <usart_serial_putchar+0xa0>)
   8034c:	4298      	cmp	r0, r3
   8034e:	d107      	bne.n	80360 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80350:	461e      	mov	r6, r3
   80352:	4d12      	ldr	r5, [pc, #72]	; (8039c <usart_serial_putchar+0x98>)
   80354:	4630      	mov	r0, r6
   80356:	4621      	mov	r1, r4
   80358:	47a8      	blx	r5
   8035a:	2800      	cmp	r0, #0
   8035c:	d1fa      	bne.n	80354 <usart_serial_putchar+0x50>
   8035e:	e010      	b.n	80382 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80360:	4b11      	ldr	r3, [pc, #68]	; (803a8 <usart_serial_putchar+0xa4>)
   80362:	4298      	cmp	r0, r3
   80364:	d10f      	bne.n	80386 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80366:	461e      	mov	r6, r3
   80368:	4d0c      	ldr	r5, [pc, #48]	; (8039c <usart_serial_putchar+0x98>)
   8036a:	4630      	mov	r0, r6
   8036c:	4621      	mov	r1, r4
   8036e:	47a8      	blx	r5
   80370:	2800      	cmp	r0, #0
   80372:	d1fa      	bne.n	8036a <usart_serial_putchar+0x66>
   80374:	e009      	b.n	8038a <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80376:	2001      	movs	r0, #1
   80378:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8037a:	2001      	movs	r0, #1
   8037c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8037e:	2001      	movs	r0, #1
   80380:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80382:	2001      	movs	r0, #1
   80384:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80386:	2000      	movs	r0, #0
   80388:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8038a:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   8038c:	bd70      	pop	{r4, r5, r6, pc}
   8038e:	bf00      	nop
   80390:	400e0800 	.word	0x400e0800
   80394:	00080625 	.word	0x00080625
   80398:	40098000 	.word	0x40098000
   8039c:	0008064d 	.word	0x0008064d
   803a0:	4009c000 	.word	0x4009c000
   803a4:	400a0000 	.word	0x400a0000
   803a8:	400a4000 	.word	0x400a4000

000803ac <main>:
	
	#endif
}

int main(void)
{
   803ac:	b570      	push	{r4, r5, r6, lr}
   803ae:	b084      	sub	sp, #16
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   803b0:	2008      	movs	r0, #8
   803b2:	4d2a      	ldr	r5, [pc, #168]	; (8045c <main+0xb0>)
   803b4:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   803b6:	4c2a      	ldr	r4, [pc, #168]	; (80460 <main+0xb4>)
   803b8:	4b2a      	ldr	r3, [pc, #168]	; (80464 <main+0xb8>)
   803ba:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   803bc:	4a2a      	ldr	r2, [pc, #168]	; (80468 <main+0xbc>)
   803be:	4b2b      	ldr	r3, [pc, #172]	; (8046c <main+0xc0>)
   803c0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   803c2:	4a2b      	ldr	r2, [pc, #172]	; (80470 <main+0xc4>)
   803c4:	4b2b      	ldr	r3, [pc, #172]	; (80474 <main+0xc8>)
   803c6:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   803c8:	4b2b      	ldr	r3, [pc, #172]	; (80478 <main+0xcc>)
   803ca:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   803cc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   803d0:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   803d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   803d6:	9302      	str	r3, [sp, #8]
   803d8:	2008      	movs	r0, #8
   803da:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   803dc:	4620      	mov	r0, r4
   803de:	4669      	mov	r1, sp
   803e0:	4b26      	ldr	r3, [pc, #152]	; (8047c <main+0xd0>)
   803e2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   803e4:	4d26      	ldr	r5, [pc, #152]	; (80480 <main+0xd4>)
   803e6:	682b      	ldr	r3, [r5, #0]
   803e8:	6898      	ldr	r0, [r3, #8]
   803ea:	2100      	movs	r1, #0
   803ec:	4c25      	ldr	r4, [pc, #148]	; (80484 <main+0xd8>)
   803ee:	47a0      	blx	r4
	setbuf(stdin, NULL);
   803f0:	682b      	ldr	r3, [r5, #0]
   803f2:	6858      	ldr	r0, [r3, #4]
   803f4:	2100      	movs	r1, #0
   803f6:	47a0      	blx	r4
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   803f8:	4b23      	ldr	r3, [pc, #140]	; (80488 <main+0xdc>)
   803fa:	f44f 7280 	mov.w	r2, #256	; 0x100
   803fe:	665a      	str	r2, [r3, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80400:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80402:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   80408:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8040a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   8040e:	671a      	str	r2, [r3, #112]	; 0x70
	stdio_serial_init(CONF_UART, &uart_serial_options);
	

	ioport_set_pin_mode(PIO_PA8_IDX,IOPORT_MODE_PULLUP); // Specify that sdout will not buffer 
	#if defined(__GNUC__)
	setbuf(stdout, NULL);
   80410:	682b      	ldr	r3, [r5, #0]
   80412:	6898      	ldr	r0, [r3, #8]
   80414:	2100      	movs	r1, #0
   80416:	47a0      	blx	r4
}

int main(void)
{
	configure_console();
	board_init();
   80418:	4b1c      	ldr	r3, [pc, #112]	; (8048c <main+0xe0>)
   8041a:	4798      	blx	r3
	sysclk_init();
   8041c:	4b1c      	ldr	r3, [pc, #112]	; (80490 <main+0xe4>)
   8041e:	4798      	blx	r3
	init_adc();
   80420:	4b1c      	ldr	r3, [pc, #112]	; (80494 <main+0xe8>)
   80422:	4798      	blx	r3
	
	UnityBegin("test/test_adc.c"); // Begin unity on the test protocol for test_math, run setUp() in test_math.c
   80424:	481c      	ldr	r0, [pc, #112]	; (80498 <main+0xec>)
   80426:	4b1d      	ldr	r3, [pc, #116]	; (8049c <main+0xf0>)
   80428:	4798      	blx	r3
	RUN_TEST(test_adc_12bit,20);
   8042a:	481d      	ldr	r0, [pc, #116]	; (804a0 <main+0xf4>)
   8042c:	491d      	ldr	r1, [pc, #116]	; (804a4 <main+0xf8>)
   8042e:	2214      	movs	r2, #20
   80430:	4c1d      	ldr	r4, [pc, #116]	; (804a8 <main+0xfc>)
   80432:	47a0      	blx	r4
	RUN_TEST(test_channel_3_enabled,20);
   80434:	481d      	ldr	r0, [pc, #116]	; (804ac <main+0x100>)
   80436:	491e      	ldr	r1, [pc, #120]	; (804b0 <main+0x104>)
   80438:	2214      	movs	r2, #20
   8043a:	47a0      	blx	r4
	UnityEnd(); // End test protocol, print information
   8043c:	4b1d      	ldr	r3, [pc, #116]	; (804b4 <main+0x108>)
   8043e:	4798      	blx	r3
	int a;
	for(;;){
		a = adc_get_latest_value(ADC);
   80440:	4c1d      	ldr	r4, [pc, #116]	; (804b8 <main+0x10c>)
   80442:	4e1e      	ldr	r6, [pc, #120]	; (804bc <main+0x110>)
		printf("%d",a);
   80444:	4d1e      	ldr	r5, [pc, #120]	; (804c0 <main+0x114>)
	RUN_TEST(test_adc_12bit,20);
	RUN_TEST(test_channel_3_enabled,20);
	UnityEnd(); // End test protocol, print information
	int a;
	for(;;){
		a = adc_get_latest_value(ADC);
   80446:	4620      	mov	r0, r4
   80448:	47b0      	blx	r6
   8044a:	4601      	mov	r1, r0
		printf("%d",a);
   8044c:	4628      	mov	r0, r5
   8044e:	4b1d      	ldr	r3, [pc, #116]	; (804c4 <main+0x118>)
   80450:	4798      	blx	r3
		adc_start(ADC);
   80452:	4620      	mov	r0, r4
   80454:	4b1c      	ldr	r3, [pc, #112]	; (804c8 <main+0x11c>)
   80456:	4798      	blx	r3
   80458:	e7f5      	b.n	80446 <main+0x9a>
   8045a:	bf00      	nop
   8045c:	00081971 	.word	0x00081971
   80460:	400e0800 	.word	0x400e0800
   80464:	20070a1c 	.word	0x20070a1c
   80468:	00080305 	.word	0x00080305
   8046c:	20070a18 	.word	0x20070a18
   80470:	00080261 	.word	0x00080261
   80474:	20070a14 	.word	0x20070a14
   80478:	0501bd00 	.word	0x0501bd00
   8047c:	000805ed 	.word	0x000805ed
   80480:	20070008 	.word	0x20070008
   80484:	00081d57 	.word	0x00081d57
   80488:	400e0e00 	.word	0x400e0e00
   8048c:	00081549 	.word	0x00081549
   80490:	000814e5 	.word	0x000814e5
   80494:	000801a5 	.word	0x000801a5
   80498:	00084490 	.word	0x00084490
   8049c:	0008106d 	.word	0x0008106d
   804a0:	00080211 	.word	0x00080211
   804a4:	000844a0 	.word	0x000844a0
   804a8:	00081015 	.word	0x00081015
   804ac:	00080239 	.word	0x00080239
   804b0:	000844b0 	.word	0x000844b0
   804b4:	00081089 	.word	0x00081089
   804b8:	400c0000 	.word	0x400c0000
   804bc:	000805e9 	.word	0x000805e9
   804c0:	000844c8 	.word	0x000844c8
   804c4:	00081cf5 	.word	0x00081cf5
   804c8:	000805d5 	.word	0x000805d5

000804cc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   804cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   804d0:	460c      	mov	r4, r1
   804d2:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   804d4:	b960      	cbnz	r0, 804f0 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   804d6:	2a00      	cmp	r2, #0
   804d8:	dd0e      	ble.n	804f8 <_read+0x2c>
   804da:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   804dc:	4e09      	ldr	r6, [pc, #36]	; (80504 <_read+0x38>)
   804de:	4d0a      	ldr	r5, [pc, #40]	; (80508 <_read+0x3c>)
   804e0:	6830      	ldr	r0, [r6, #0]
   804e2:	4621      	mov	r1, r4
   804e4:	682b      	ldr	r3, [r5, #0]
   804e6:	4798      	blx	r3
		ptr++;
   804e8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   804ea:	42bc      	cmp	r4, r7
   804ec:	d1f8      	bne.n	804e0 <_read+0x14>
   804ee:	e006      	b.n	804fe <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   804f0:	f04f 30ff 	mov.w	r0, #4294967295
   804f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   804f8:	2000      	movs	r0, #0
   804fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   804fe:	4640      	mov	r0, r8
	}
	return nChars;
}
   80500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80504:	20070a1c 	.word	0x20070a1c
   80508:	20070a14 	.word	0x20070a14

0008050c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   8050c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80510:	460e      	mov	r6, r1
   80512:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80514:	3801      	subs	r0, #1
   80516:	2802      	cmp	r0, #2
   80518:	d80f      	bhi.n	8053a <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   8051a:	b192      	cbz	r2, 80542 <_write+0x36>
   8051c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8051e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8055c <_write+0x50>
   80522:	4f0d      	ldr	r7, [pc, #52]	; (80558 <_write+0x4c>)
   80524:	f8d8 0000 	ldr.w	r0, [r8]
   80528:	5d31      	ldrb	r1, [r6, r4]
   8052a:	683b      	ldr	r3, [r7, #0]
   8052c:	4798      	blx	r3
   8052e:	2800      	cmp	r0, #0
   80530:	db0a      	blt.n	80548 <_write+0x3c>
			return -1;
		}
		++nChars;
   80532:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80534:	42a5      	cmp	r5, r4
   80536:	d1f5      	bne.n	80524 <_write+0x18>
   80538:	e00a      	b.n	80550 <_write+0x44>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8053a:	f04f 30ff 	mov.w	r0, #4294967295
   8053e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80542:	2000      	movs	r0, #0
   80544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80548:	f04f 30ff 	mov.w	r0, #4294967295
   8054c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80550:	4620      	mov	r0, r4
	}
	return nChars;
}
   80552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80556:	bf00      	nop
   80558:	20070a18 	.word	0x20070a18
   8055c:	20070a1c 	.word	0x20070a1c

00080560 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80560:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   80562:	2401      	movs	r4, #1
   80564:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80566:	2400      	movs	r4, #0
   80568:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   8056a:	f240 2502 	movw	r5, #514	; 0x202
   8056e:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   80572:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   80576:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   8057a:	6845      	ldr	r5, [r0, #4]
   8057c:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   8057e:	0052      	lsls	r2, r2, #1
   80580:	fbb1 f1f2 	udiv	r1, r1, r2
   80584:	1e4d      	subs	r5, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80586:	022d      	lsls	r5, r5, #8
   80588:	b2ad      	uxth	r5, r5
   8058a:	432b      	orrs	r3, r5
   8058c:	6043      	str	r3, [r0, #4]
	return 0;
}
   8058e:	4620      	mov	r0, r4
   80590:	bc30      	pop	{r4, r5}
   80592:	4770      	bx	lr

00080594 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   80594:	6843      	ldr	r3, [r0, #4]
   80596:	f023 0310 	bic.w	r3, r3, #16
   8059a:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   8059c:	6843      	ldr	r3, [r0, #4]
   8059e:	4319      	orrs	r1, r3
   805a0:	6041      	str	r1, [r0, #4]
   805a2:	4770      	bx	lr

000805a4 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   805a4:	6843      	ldr	r3, [r0, #4]
   805a6:	4319      	orrs	r1, r3
   805a8:	01d2      	lsls	r2, r2, #7
   805aa:	b2d3      	uxtb	r3, r2
   805ac:	4319      	orrs	r1, r3
   805ae:	6041      	str	r1, [r0, #4]
   805b0:	4770      	bx	lr
   805b2:	bf00      	nop

000805b4 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   805b4:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   805b6:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   805b8:	4322      	orrs	r2, r4
   805ba:	0609      	lsls	r1, r1, #24
   805bc:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   805c0:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   805c2:	071b      	lsls	r3, r3, #28
   805c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   805c8:	431a      	orrs	r2, r3
   805ca:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   805cc:	f85d 4b04 	ldr.w	r4, [sp], #4
   805d0:	4770      	bx	lr
   805d2:	bf00      	nop

000805d4 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   805d4:	2302      	movs	r3, #2
   805d6:	6003      	str	r3, [r0, #0]
   805d8:	4770      	bx	lr
   805da:	bf00      	nop

000805dc <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   805dc:	2301      	movs	r3, #1
   805de:	fa03 f101 	lsl.w	r1, r3, r1
   805e2:	6101      	str	r1, [r0, #16]
   805e4:	4770      	bx	lr
   805e6:	bf00      	nop

000805e8 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
   805e8:	6a00      	ldr	r0, [r0, #32]
}
   805ea:	4770      	bx	lr

000805ec <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   805ec:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   805ee:	23ac      	movs	r3, #172	; 0xac
   805f0:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   805f2:	680a      	ldr	r2, [r1, #0]
   805f4:	684b      	ldr	r3, [r1, #4]
   805f6:	fbb2 f3f3 	udiv	r3, r2, r3
   805fa:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   805fc:	1e5c      	subs	r4, r3, #1
   805fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80602:	4294      	cmp	r4, r2
   80604:	d80a      	bhi.n	8061c <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80606:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80608:	688b      	ldr	r3, [r1, #8]
   8060a:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8060c:	f240 2302 	movw	r3, #514	; 0x202
   80610:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80614:	2350      	movs	r3, #80	; 0x50
   80616:	6003      	str	r3, [r0, #0]

	return 0;
   80618:	2000      	movs	r0, #0
   8061a:	e000      	b.n	8061e <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   8061c:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8061e:	f85d 4b04 	ldr.w	r4, [sp], #4
   80622:	4770      	bx	lr

00080624 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80624:	6943      	ldr	r3, [r0, #20]
   80626:	f013 0f02 	tst.w	r3, #2
   8062a:	d002      	beq.n	80632 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8062c:	61c1      	str	r1, [r0, #28]
	return 0;
   8062e:	2000      	movs	r0, #0
   80630:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80632:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80634:	4770      	bx	lr
   80636:	bf00      	nop

00080638 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80638:	6943      	ldr	r3, [r0, #20]
   8063a:	f013 0f01 	tst.w	r3, #1
   8063e:	d003      	beq.n	80648 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80640:	6983      	ldr	r3, [r0, #24]
   80642:	700b      	strb	r3, [r1, #0]
	return 0;
   80644:	2000      	movs	r0, #0
   80646:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80648:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   8064a:	4770      	bx	lr

0008064c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8064c:	6943      	ldr	r3, [r0, #20]
   8064e:	f013 0f02 	tst.w	r3, #2
   80652:	d004      	beq.n	8065e <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80654:	f3c1 0108 	ubfx	r1, r1, #0, #9
   80658:	61c1      	str	r1, [r0, #28]
	return 0;
   8065a:	2000      	movs	r0, #0
   8065c:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8065e:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80660:	4770      	bx	lr
   80662:	bf00      	nop

00080664 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80664:	6943      	ldr	r3, [r0, #20]
   80666:	f013 0f01 	tst.w	r3, #1
   8066a:	d005      	beq.n	80678 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8066c:	6983      	ldr	r3, [r0, #24]
   8066e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80672:	600b      	str	r3, [r1, #0]

	return 0;
   80674:	2000      	movs	r0, #0
   80676:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80678:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8067a:	4770      	bx	lr

0008067c <UnityPrintNumber>:
}

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumber(const _U_SINT number_to_print)
{
   8067c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80680:	4605      	mov	r5, r0
    _U_SINT divisor = 1;
    _U_SINT next_divisor;
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
   80682:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   80686:	d132      	bne.n	806ee <UnityPrintNumber+0x72>
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80688:	4b5f      	ldr	r3, [pc, #380]	; (80808 <UnityPrintNumber+0x18c>)
   8068a:	6818      	ldr	r0, [r3, #0]
   8068c:	6882      	ldr	r2, [r0, #8]
   8068e:	6893      	ldr	r3, [r2, #8]
   80690:	3b01      	subs	r3, #1
   80692:	6093      	str	r3, [r2, #8]
   80694:	2b00      	cmp	r3, #0
   80696:	da1d      	bge.n	806d4 <UnityPrintNumber+0x58>
   80698:	6882      	ldr	r2, [r0, #8]
   8069a:	6891      	ldr	r1, [r2, #8]
   8069c:	6993      	ldr	r3, [r2, #24]
   8069e:	4299      	cmp	r1, r3
   806a0:	db12      	blt.n	806c8 <UnityPrintNumber+0x4c>
   806a2:	6813      	ldr	r3, [r2, #0]
   806a4:	222d      	movs	r2, #45	; 0x2d
   806a6:	701a      	strb	r2, [r3, #0]
   806a8:	4b57      	ldr	r3, [pc, #348]	; (80808 <UnityPrintNumber+0x18c>)
   806aa:	6818      	ldr	r0, [r3, #0]
   806ac:	6882      	ldr	r2, [r0, #8]
   806ae:	6813      	ldr	r3, [r2, #0]
   806b0:	7819      	ldrb	r1, [r3, #0]
   806b2:	290a      	cmp	r1, #10
   806b4:	d002      	beq.n	806bc <UnityPrintNumber+0x40>
   806b6:	3301      	adds	r3, #1
   806b8:	6013      	str	r3, [r2, #0]
   806ba:	e04f      	b.n	8075c <UnityPrintNumber+0xe0>
   806bc:	210a      	movs	r1, #10
   806be:	4b53      	ldr	r3, [pc, #332]	; (8080c <UnityPrintNumber+0x190>)
   806c0:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   806c2:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   806c6:	e049      	b.n	8075c <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   806c8:	212d      	movs	r1, #45	; 0x2d
   806ca:	4b50      	ldr	r3, [pc, #320]	; (8080c <UnityPrintNumber+0x190>)
   806cc:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   806ce:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   806d2:	e043      	b.n	8075c <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   806d4:	6883      	ldr	r3, [r0, #8]
   806d6:	681b      	ldr	r3, [r3, #0]
   806d8:	222d      	movs	r2, #45	; 0x2d
   806da:	701a      	strb	r2, [r3, #0]
   806dc:	4b4a      	ldr	r3, [pc, #296]	; (80808 <UnityPrintNumber+0x18c>)
   806de:	681b      	ldr	r3, [r3, #0]
   806e0:	689b      	ldr	r3, [r3, #8]
   806e2:	681a      	ldr	r2, [r3, #0]
   806e4:	3201      	adds	r2, #1
   806e6:	601a      	str	r2, [r3, #0]
        number = (1ul << (UNITY_LONG_WIDTH-1));
   806e8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   806ec:	e036      	b.n	8075c <UnityPrintNumber+0xe0>
    }
    else if (number_to_print < 0)
   806ee:	2800      	cmp	r0, #0
   806f0:	da34      	bge.n	8075c <UnityPrintNumber+0xe0>
    {
        //Some other negative number
        UNITY_OUTPUT_CHAR('-');
   806f2:	4b45      	ldr	r3, [pc, #276]	; (80808 <UnityPrintNumber+0x18c>)
   806f4:	6818      	ldr	r0, [r3, #0]
   806f6:	6882      	ldr	r2, [r0, #8]
   806f8:	6893      	ldr	r3, [r2, #8]
   806fa:	3b01      	subs	r3, #1
   806fc:	6093      	str	r3, [r2, #8]
   806fe:	2b00      	cmp	r3, #0
   80700:	da19      	bge.n	80736 <UnityPrintNumber+0xba>
   80702:	6882      	ldr	r2, [r0, #8]
   80704:	6891      	ldr	r1, [r2, #8]
   80706:	6993      	ldr	r3, [r2, #24]
   80708:	4299      	cmp	r1, r3
   8070a:	db10      	blt.n	8072e <UnityPrintNumber+0xb2>
   8070c:	6813      	ldr	r3, [r2, #0]
   8070e:	222d      	movs	r2, #45	; 0x2d
   80710:	701a      	strb	r2, [r3, #0]
   80712:	4b3d      	ldr	r3, [pc, #244]	; (80808 <UnityPrintNumber+0x18c>)
   80714:	6818      	ldr	r0, [r3, #0]
   80716:	6882      	ldr	r2, [r0, #8]
   80718:	6813      	ldr	r3, [r2, #0]
   8071a:	7819      	ldrb	r1, [r3, #0]
   8071c:	290a      	cmp	r1, #10
   8071e:	d002      	beq.n	80726 <UnityPrintNumber+0xaa>
   80720:	3301      	adds	r3, #1
   80722:	6013      	str	r3, [r2, #0]
   80724:	e011      	b.n	8074a <UnityPrintNumber+0xce>
   80726:	210a      	movs	r1, #10
   80728:	4b38      	ldr	r3, [pc, #224]	; (8080c <UnityPrintNumber+0x190>)
   8072a:	4798      	blx	r3
   8072c:	e00d      	b.n	8074a <UnityPrintNumber+0xce>
   8072e:	212d      	movs	r1, #45	; 0x2d
   80730:	4b36      	ldr	r3, [pc, #216]	; (8080c <UnityPrintNumber+0x190>)
   80732:	4798      	blx	r3
   80734:	e009      	b.n	8074a <UnityPrintNumber+0xce>
   80736:	6883      	ldr	r3, [r0, #8]
   80738:	681b      	ldr	r3, [r3, #0]
   8073a:	222d      	movs	r2, #45	; 0x2d
   8073c:	701a      	strb	r2, [r3, #0]
   8073e:	4b32      	ldr	r3, [pc, #200]	; (80808 <UnityPrintNumber+0x18c>)
   80740:	681b      	ldr	r3, [r3, #0]
   80742:	689b      	ldr	r3, [r3, #8]
   80744:	681a      	ldr	r2, [r3, #0]
   80746:	3201      	adds	r2, #1
   80748:	601a      	str	r2, [r3, #0]
        number = (_U_UINT)(-number_to_print);
   8074a:	426d      	negs	r5, r5
   8074c:	e006      	b.n	8075c <UnityPrintNumber+0xe0>
    }

    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
   8074e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   80752:	005b      	lsls	r3, r3, #1
        if (next_divisor > divisor)
   80754:	429c      	cmp	r4, r3
   80756:	da06      	bge.n	80766 <UnityPrintNumber+0xea>
            divisor = next_divisor;
   80758:	461c      	mov	r4, r3
   8075a:	e000      	b.n	8075e <UnityPrintNumber+0xe2>

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
        number = (1ul << (UNITY_LONG_WIDTH-1));
   8075c:	2401      	movs	r4, #1
        //Positive number
        number = (_U_UINT)number_to_print;
    }

    // figure out initial divisor
    while (number / divisor > 9)
   8075e:	fbb5 f3f4 	udiv	r3, r5, r4
   80762:	2b09      	cmp	r3, #9
   80764:	d8f3      	bhi.n	8074e <UnityPrintNumber+0xd2>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   80766:	4e28      	ldr	r6, [pc, #160]	; (80808 <UnityPrintNumber+0x18c>)
   80768:	4f29      	ldr	r7, [pc, #164]	; (80810 <UnityPrintNumber+0x194>)
   8076a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8080c <UnityPrintNumber+0x190>
   8076e:	6830      	ldr	r0, [r6, #0]
   80770:	6882      	ldr	r2, [r0, #8]
   80772:	6893      	ldr	r3, [r2, #8]
   80774:	3b01      	subs	r3, #1
   80776:	6093      	str	r3, [r2, #8]
   80778:	2b00      	cmp	r3, #0
   8077a:	da29      	bge.n	807d0 <UnityPrintNumber+0x154>
   8077c:	6882      	ldr	r2, [r0, #8]
   8077e:	6891      	ldr	r1, [r2, #8]
   80780:	6993      	ldr	r3, [r2, #24]
   80782:	4299      	cmp	r1, r3
   80784:	db17      	blt.n	807b6 <UnityPrintNumber+0x13a>
   80786:	6811      	ldr	r1, [r2, #0]
   80788:	fbb5 f3f4 	udiv	r3, r5, r4
   8078c:	fba7 0203 	umull	r0, r2, r7, r3
   80790:	08d2      	lsrs	r2, r2, #3
   80792:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80796:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   8079a:	3330      	adds	r3, #48	; 0x30
   8079c:	700b      	strb	r3, [r1, #0]
   8079e:	6830      	ldr	r0, [r6, #0]
   807a0:	6882      	ldr	r2, [r0, #8]
   807a2:	6813      	ldr	r3, [r2, #0]
   807a4:	7819      	ldrb	r1, [r3, #0]
   807a6:	290a      	cmp	r1, #10
   807a8:	d002      	beq.n	807b0 <UnityPrintNumber+0x134>
   807aa:	3301      	adds	r3, #1
   807ac:	6013      	str	r3, [r2, #0]
   807ae:	e021      	b.n	807f4 <UnityPrintNumber+0x178>
   807b0:	210a      	movs	r1, #10
   807b2:	47c0      	blx	r8
   807b4:	e01e      	b.n	807f4 <UnityPrintNumber+0x178>
   807b6:	fbb5 f3f4 	udiv	r3, r5, r4
   807ba:	fba7 e103 	umull	lr, r1, r7, r3
   807be:	08c9      	lsrs	r1, r1, #3
   807c0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   807c4:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   807c8:	3130      	adds	r1, #48	; 0x30
   807ca:	b2c9      	uxtb	r1, r1
   807cc:	47c0      	blx	r8
   807ce:	e011      	b.n	807f4 <UnityPrintNumber+0x178>
   807d0:	6883      	ldr	r3, [r0, #8]
   807d2:	6819      	ldr	r1, [r3, #0]
   807d4:	fbb5 f3f4 	udiv	r3, r5, r4
   807d8:	fba7 0203 	umull	r0, r2, r7, r3
   807dc:	08d2      	lsrs	r2, r2, #3
   807de:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   807e2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   807e6:	3330      	adds	r3, #48	; 0x30
   807e8:	700b      	strb	r3, [r1, #0]
   807ea:	6833      	ldr	r3, [r6, #0]
   807ec:	689b      	ldr	r3, [r3, #8]
   807ee:	681a      	ldr	r2, [r3, #0]
   807f0:	3201      	adds	r2, #1
   807f2:	601a      	str	r2, [r3, #0]
        divisor /= 10;
   807f4:	4b07      	ldr	r3, [pc, #28]	; (80814 <UnityPrintNumber+0x198>)
   807f6:	fb83 2304 	smull	r2, r3, r3, r4
   807fa:	17e4      	asrs	r4, r4, #31
   807fc:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
    }
    while (divisor > 0);
   80800:	2c00      	cmp	r4, #0
   80802:	dcb4      	bgt.n	8076e <UnityPrintNumber+0xf2>
}
   80804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80808:	20070008 	.word	0x20070008
   8080c:	00082789 	.word	0x00082789
   80810:	cccccccd 	.word	0xcccccccd
   80814:	66666667 	.word	0x66666667

00080818 <UnityPrintNumberHex>:
    while (divisor > 0);
}

//-----------------------------------------------
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
   80818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8081c:	4606      	mov	r6, r0
   8081e:	460c      	mov	r4, r1
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
   80820:	4b5e      	ldr	r3, [pc, #376]	; (8099c <UnityPrintNumberHex+0x184>)
   80822:	6818      	ldr	r0, [r3, #0]
   80824:	6882      	ldr	r2, [r0, #8]
   80826:	6893      	ldr	r3, [r2, #8]
   80828:	3b01      	subs	r3, #1
   8082a:	6093      	str	r3, [r2, #8]
   8082c:	2b00      	cmp	r3, #0
   8082e:	da19      	bge.n	80864 <UnityPrintNumberHex+0x4c>
   80830:	6882      	ldr	r2, [r0, #8]
   80832:	6891      	ldr	r1, [r2, #8]
   80834:	6993      	ldr	r3, [r2, #24]
   80836:	4299      	cmp	r1, r3
   80838:	db10      	blt.n	8085c <UnityPrintNumberHex+0x44>
   8083a:	6813      	ldr	r3, [r2, #0]
   8083c:	2230      	movs	r2, #48	; 0x30
   8083e:	701a      	strb	r2, [r3, #0]
   80840:	4b56      	ldr	r3, [pc, #344]	; (8099c <UnityPrintNumberHex+0x184>)
   80842:	6818      	ldr	r0, [r3, #0]
   80844:	6882      	ldr	r2, [r0, #8]
   80846:	6813      	ldr	r3, [r2, #0]
   80848:	7819      	ldrb	r1, [r3, #0]
   8084a:	290a      	cmp	r1, #10
   8084c:	d002      	beq.n	80854 <UnityPrintNumberHex+0x3c>
   8084e:	3301      	adds	r3, #1
   80850:	6013      	str	r3, [r2, #0]
   80852:	e011      	b.n	80878 <UnityPrintNumberHex+0x60>
   80854:	210a      	movs	r1, #10
   80856:	4b52      	ldr	r3, [pc, #328]	; (809a0 <UnityPrintNumberHex+0x188>)
   80858:	4798      	blx	r3
   8085a:	e00d      	b.n	80878 <UnityPrintNumberHex+0x60>
   8085c:	2130      	movs	r1, #48	; 0x30
   8085e:	4b50      	ldr	r3, [pc, #320]	; (809a0 <UnityPrintNumberHex+0x188>)
   80860:	4798      	blx	r3
   80862:	e009      	b.n	80878 <UnityPrintNumberHex+0x60>
   80864:	6883      	ldr	r3, [r0, #8]
   80866:	681b      	ldr	r3, [r3, #0]
   80868:	2230      	movs	r2, #48	; 0x30
   8086a:	701a      	strb	r2, [r3, #0]
   8086c:	4b4b      	ldr	r3, [pc, #300]	; (8099c <UnityPrintNumberHex+0x184>)
   8086e:	681b      	ldr	r3, [r3, #0]
   80870:	689b      	ldr	r3, [r3, #8]
   80872:	681a      	ldr	r2, [r3, #0]
   80874:	3201      	adds	r2, #1
   80876:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_CHAR('x');
   80878:	4b48      	ldr	r3, [pc, #288]	; (8099c <UnityPrintNumberHex+0x184>)
   8087a:	6818      	ldr	r0, [r3, #0]
   8087c:	6882      	ldr	r2, [r0, #8]
   8087e:	6893      	ldr	r3, [r2, #8]
   80880:	3b01      	subs	r3, #1
   80882:	6093      	str	r3, [r2, #8]
   80884:	2b00      	cmp	r3, #0
   80886:	da1b      	bge.n	808c0 <UnityPrintNumberHex+0xa8>
   80888:	6882      	ldr	r2, [r0, #8]
   8088a:	6891      	ldr	r1, [r2, #8]
   8088c:	6993      	ldr	r3, [r2, #24]
   8088e:	4299      	cmp	r1, r3
   80890:	db10      	blt.n	808b4 <UnityPrintNumberHex+0x9c>
   80892:	6813      	ldr	r3, [r2, #0]
   80894:	2278      	movs	r2, #120	; 0x78
   80896:	701a      	strb	r2, [r3, #0]
   80898:	4b40      	ldr	r3, [pc, #256]	; (8099c <UnityPrintNumberHex+0x184>)
   8089a:	6818      	ldr	r0, [r3, #0]
   8089c:	6882      	ldr	r2, [r0, #8]
   8089e:	6813      	ldr	r3, [r2, #0]
   808a0:	7819      	ldrb	r1, [r3, #0]
   808a2:	290a      	cmp	r1, #10
   808a4:	d002      	beq.n	808ac <UnityPrintNumberHex+0x94>
   808a6:	3301      	adds	r3, #1
   808a8:	6013      	str	r3, [r2, #0]
   808aa:	e006      	b.n	808ba <UnityPrintNumberHex+0xa2>
   808ac:	210a      	movs	r1, #10
   808ae:	4b3c      	ldr	r3, [pc, #240]	; (809a0 <UnityPrintNumberHex+0x188>)
   808b0:	4798      	blx	r3
   808b2:	e002      	b.n	808ba <UnityPrintNumberHex+0xa2>
   808b4:	2178      	movs	r1, #120	; 0x78
   808b6:	4b3a      	ldr	r3, [pc, #232]	; (809a0 <UnityPrintNumberHex+0x188>)
   808b8:	4798      	blx	r3

    while (nibbles > 0)
   808ba:	b964      	cbnz	r4, 808d6 <UnityPrintNumberHex+0xbe>
   808bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');
   808c0:	6883      	ldr	r3, [r0, #8]
   808c2:	681b      	ldr	r3, [r3, #0]
   808c4:	2278      	movs	r2, #120	; 0x78
   808c6:	701a      	strb	r2, [r3, #0]
   808c8:	4b34      	ldr	r3, [pc, #208]	; (8099c <UnityPrintNumberHex+0x184>)
   808ca:	681b      	ldr	r3, [r3, #0]
   808cc:	689b      	ldr	r3, [r3, #8]
   808ce:	681a      	ldr	r2, [r3, #0]
   808d0:	3201      	adds	r2, #1
   808d2:	601a      	str	r2, [r3, #0]
   808d4:	e7f1      	b.n	808ba <UnityPrintNumberHex+0xa2>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   808d6:	4d31      	ldr	r5, [pc, #196]	; (8099c <UnityPrintNumberHex+0x184>)
   808d8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 809a0 <UnityPrintNumberHex+0x188>
   808dc:	f04f 080a 	mov.w	r8, #10
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
    {
        nibble = (number >> (--nibbles << 2)) & 0x0000000F;
   808e0:	3c01      	subs	r4, #1
   808e2:	b2e4      	uxtb	r4, r4
   808e4:	00a3      	lsls	r3, r4, #2
   808e6:	fa26 f303 	lsr.w	r3, r6, r3
   808ea:	f003 030f 	and.w	r3, r3, #15
        if (nibble <= 9)
   808ee:	2b09      	cmp	r3, #9
   808f0:	d828      	bhi.n	80944 <UnityPrintNumberHex+0x12c>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
   808f2:	6828      	ldr	r0, [r5, #0]
   808f4:	6881      	ldr	r1, [r0, #8]
   808f6:	688a      	ldr	r2, [r1, #8]
   808f8:	3a01      	subs	r2, #1
   808fa:	608a      	str	r2, [r1, #8]
   808fc:	2a00      	cmp	r2, #0
   808fe:	da17      	bge.n	80930 <UnityPrintNumberHex+0x118>
   80900:	6882      	ldr	r2, [r0, #8]
   80902:	6891      	ldr	r1, [r2, #8]
   80904:	6997      	ldr	r7, [r2, #24]
   80906:	42b9      	cmp	r1, r7
   80908:	db0e      	blt.n	80928 <UnityPrintNumberHex+0x110>
   8090a:	6812      	ldr	r2, [r2, #0]
   8090c:	3330      	adds	r3, #48	; 0x30
   8090e:	7013      	strb	r3, [r2, #0]
   80910:	6828      	ldr	r0, [r5, #0]
   80912:	6882      	ldr	r2, [r0, #8]
   80914:	6813      	ldr	r3, [r2, #0]
   80916:	7819      	ldrb	r1, [r3, #0]
   80918:	290a      	cmp	r1, #10
   8091a:	d002      	beq.n	80922 <UnityPrintNumberHex+0x10a>
   8091c:	3301      	adds	r3, #1
   8091e:	6013      	str	r3, [r2, #0]
   80920:	e038      	b.n	80994 <UnityPrintNumberHex+0x17c>
   80922:	4641      	mov	r1, r8
   80924:	47c8      	blx	r9
   80926:	e035      	b.n	80994 <UnityPrintNumberHex+0x17c>
   80928:	f103 0130 	add.w	r1, r3, #48	; 0x30
   8092c:	47c8      	blx	r9
   8092e:	e031      	b.n	80994 <UnityPrintNumberHex+0x17c>
   80930:	6882      	ldr	r2, [r0, #8]
   80932:	6812      	ldr	r2, [r2, #0]
   80934:	3330      	adds	r3, #48	; 0x30
   80936:	7013      	strb	r3, [r2, #0]
   80938:	682b      	ldr	r3, [r5, #0]
   8093a:	689b      	ldr	r3, [r3, #8]
   8093c:	681a      	ldr	r2, [r3, #0]
   8093e:	3201      	adds	r2, #1
   80940:	601a      	str	r2, [r3, #0]
   80942:	e027      	b.n	80994 <UnityPrintNumberHex+0x17c>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   80944:	6828      	ldr	r0, [r5, #0]
   80946:	6881      	ldr	r1, [r0, #8]
   80948:	688a      	ldr	r2, [r1, #8]
   8094a:	3a01      	subs	r2, #1
   8094c:	608a      	str	r2, [r1, #8]
   8094e:	2a00      	cmp	r2, #0
   80950:	da17      	bge.n	80982 <UnityPrintNumberHex+0x16a>
   80952:	6882      	ldr	r2, [r0, #8]
   80954:	6891      	ldr	r1, [r2, #8]
   80956:	6997      	ldr	r7, [r2, #24]
   80958:	42b9      	cmp	r1, r7
   8095a:	db0e      	blt.n	8097a <UnityPrintNumberHex+0x162>
   8095c:	6812      	ldr	r2, [r2, #0]
   8095e:	3337      	adds	r3, #55	; 0x37
   80960:	7013      	strb	r3, [r2, #0]
   80962:	6828      	ldr	r0, [r5, #0]
   80964:	6882      	ldr	r2, [r0, #8]
   80966:	6813      	ldr	r3, [r2, #0]
   80968:	7819      	ldrb	r1, [r3, #0]
   8096a:	290a      	cmp	r1, #10
   8096c:	d002      	beq.n	80974 <UnityPrintNumberHex+0x15c>
   8096e:	3301      	adds	r3, #1
   80970:	6013      	str	r3, [r2, #0]
   80972:	e00f      	b.n	80994 <UnityPrintNumberHex+0x17c>
   80974:	4641      	mov	r1, r8
   80976:	47c8      	blx	r9
   80978:	e00c      	b.n	80994 <UnityPrintNumberHex+0x17c>
   8097a:	f103 0137 	add.w	r1, r3, #55	; 0x37
   8097e:	47c8      	blx	r9
   80980:	e008      	b.n	80994 <UnityPrintNumberHex+0x17c>
   80982:	6882      	ldr	r2, [r0, #8]
   80984:	6812      	ldr	r2, [r2, #0]
   80986:	3337      	adds	r3, #55	; 0x37
   80988:	7013      	strb	r3, [r2, #0]
   8098a:	682b      	ldr	r3, [r5, #0]
   8098c:	689b      	ldr	r3, [r3, #8]
   8098e:	681a      	ldr	r2, [r3, #0]
   80990:	3201      	adds	r2, #1
   80992:	601a      	str	r2, [r3, #0]
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
   80994:	2c00      	cmp	r4, #0
   80996:	d1a3      	bne.n	808e0 <UnityPrintNumberHex+0xc8>
   80998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8099c:	20070008 	.word	0x20070008
   809a0:	00082789 	.word	0x00082789

000809a4 <UnityPrint>:
//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
{
   809a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const char* pch = string;

    if (pch != NULL)
   809a6:	2800      	cmp	r0, #0
   809a8:	f000 810a 	beq.w	80bc0 <UnityPrint+0x21c>
    {
        while (*pch)
   809ac:	7803      	ldrb	r3, [r0, #0]
   809ae:	2b00      	cmp	r3, #0
   809b0:	f000 8106 	beq.w	80bc0 <UnityPrint+0x21c>
   809b4:	1c44      	adds	r4, r0, #1
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   809b6:	4d83      	ldr	r5, [pc, #524]	; (80bc4 <UnityPrint+0x220>)
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   809b8:	4e83      	ldr	r6, [pc, #524]	; (80bc8 <UnityPrint+0x224>)
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   809ba:	4f84      	ldr	r7, [pc, #528]	; (80bcc <UnityPrint+0x228>)
    if (pch != NULL)
    {
        while (*pch)
        {
            // printable characters plus CR & LF are printed
            if ((*pch <= 126) && (*pch >= 32))
   809bc:	f1a3 0220 	sub.w	r2, r3, #32
   809c0:	b2d2      	uxtb	r2, r2
   809c2:	2a5e      	cmp	r2, #94	; 0x5e
   809c4:	d82a      	bhi.n	80a1c <UnityPrint+0x78>
            {
                UNITY_OUTPUT_CHAR(*pch);
   809c6:	6828      	ldr	r0, [r5, #0]
   809c8:	6882      	ldr	r2, [r0, #8]
   809ca:	6893      	ldr	r3, [r2, #8]
   809cc:	3b01      	subs	r3, #1
   809ce:	6093      	str	r3, [r2, #8]
   809d0:	2b00      	cmp	r3, #0
   809d2:	da18      	bge.n	80a06 <UnityPrint+0x62>
   809d4:	6882      	ldr	r2, [r0, #8]
   809d6:	6891      	ldr	r1, [r2, #8]
   809d8:	6993      	ldr	r3, [r2, #24]
   809da:	4299      	cmp	r1, r3
   809dc:	db0f      	blt.n	809fe <UnityPrint+0x5a>
   809de:	6813      	ldr	r3, [r2, #0]
   809e0:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   809e4:	701a      	strb	r2, [r3, #0]
   809e6:	6828      	ldr	r0, [r5, #0]
   809e8:	6882      	ldr	r2, [r0, #8]
   809ea:	6813      	ldr	r3, [r2, #0]
   809ec:	7819      	ldrb	r1, [r3, #0]
   809ee:	290a      	cmp	r1, #10
   809f0:	d002      	beq.n	809f8 <UnityPrint+0x54>
   809f2:	3301      	adds	r3, #1
   809f4:	6013      	str	r3, [r2, #0]
   809f6:	e0de      	b.n	80bb6 <UnityPrint+0x212>
   809f8:	210a      	movs	r1, #10
   809fa:	47b8      	blx	r7
   809fc:	e0db      	b.n	80bb6 <UnityPrint+0x212>
   809fe:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   80a02:	47b8      	blx	r7
   80a04:	e0d7      	b.n	80bb6 <UnityPrint+0x212>
   80a06:	6883      	ldr	r3, [r0, #8]
   80a08:	681b      	ldr	r3, [r3, #0]
   80a0a:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   80a0e:	701a      	strb	r2, [r3, #0]
   80a10:	682b      	ldr	r3, [r5, #0]
   80a12:	689b      	ldr	r3, [r3, #8]
   80a14:	681a      	ldr	r2, [r3, #0]
   80a16:	3201      	adds	r2, #1
   80a18:	601a      	str	r2, [r3, #0]
   80a1a:	e0cc      	b.n	80bb6 <UnityPrint+0x212>
            }
            //write escaped carriage returns
            else if (*pch == 13)
   80a1c:	2b0d      	cmp	r3, #13
   80a1e:	d14e      	bne.n	80abe <UnityPrint+0x11a>
            {
                UNITY_OUTPUT_CHAR('\\');
   80a20:	6828      	ldr	r0, [r5, #0]
   80a22:	6882      	ldr	r2, [r0, #8]
   80a24:	6893      	ldr	r3, [r2, #8]
   80a26:	3b01      	subs	r3, #1
   80a28:	6093      	str	r3, [r2, #8]
   80a2a:	2b00      	cmp	r3, #0
   80a2c:	da16      	bge.n	80a5c <UnityPrint+0xb8>
   80a2e:	6882      	ldr	r2, [r0, #8]
   80a30:	6891      	ldr	r1, [r2, #8]
   80a32:	6993      	ldr	r3, [r2, #24]
   80a34:	4299      	cmp	r1, r3
   80a36:	db0e      	blt.n	80a56 <UnityPrint+0xb2>
   80a38:	6813      	ldr	r3, [r2, #0]
   80a3a:	225c      	movs	r2, #92	; 0x5c
   80a3c:	701a      	strb	r2, [r3, #0]
   80a3e:	6828      	ldr	r0, [r5, #0]
   80a40:	6882      	ldr	r2, [r0, #8]
   80a42:	6813      	ldr	r3, [r2, #0]
   80a44:	7819      	ldrb	r1, [r3, #0]
   80a46:	290a      	cmp	r1, #10
   80a48:	d002      	beq.n	80a50 <UnityPrint+0xac>
   80a4a:	3301      	adds	r3, #1
   80a4c:	6013      	str	r3, [r2, #0]
   80a4e:	e00e      	b.n	80a6e <UnityPrint+0xca>
   80a50:	210a      	movs	r1, #10
   80a52:	47b8      	blx	r7
   80a54:	e00b      	b.n	80a6e <UnityPrint+0xca>
   80a56:	215c      	movs	r1, #92	; 0x5c
   80a58:	47b8      	blx	r7
   80a5a:	e008      	b.n	80a6e <UnityPrint+0xca>
   80a5c:	6883      	ldr	r3, [r0, #8]
   80a5e:	681b      	ldr	r3, [r3, #0]
   80a60:	225c      	movs	r2, #92	; 0x5c
   80a62:	701a      	strb	r2, [r3, #0]
   80a64:	682b      	ldr	r3, [r5, #0]
   80a66:	689b      	ldr	r3, [r3, #8]
   80a68:	681a      	ldr	r2, [r3, #0]
   80a6a:	3201      	adds	r2, #1
   80a6c:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('r');
   80a6e:	6828      	ldr	r0, [r5, #0]
   80a70:	6882      	ldr	r2, [r0, #8]
   80a72:	6893      	ldr	r3, [r2, #8]
   80a74:	3b01      	subs	r3, #1
   80a76:	6093      	str	r3, [r2, #8]
   80a78:	2b00      	cmp	r3, #0
   80a7a:	da16      	bge.n	80aaa <UnityPrint+0x106>
   80a7c:	6882      	ldr	r2, [r0, #8]
   80a7e:	6891      	ldr	r1, [r2, #8]
   80a80:	6993      	ldr	r3, [r2, #24]
   80a82:	4299      	cmp	r1, r3
   80a84:	db0e      	blt.n	80aa4 <UnityPrint+0x100>
   80a86:	6813      	ldr	r3, [r2, #0]
   80a88:	2272      	movs	r2, #114	; 0x72
   80a8a:	701a      	strb	r2, [r3, #0]
   80a8c:	6828      	ldr	r0, [r5, #0]
   80a8e:	6882      	ldr	r2, [r0, #8]
   80a90:	6813      	ldr	r3, [r2, #0]
   80a92:	7819      	ldrb	r1, [r3, #0]
   80a94:	290a      	cmp	r1, #10
   80a96:	d002      	beq.n	80a9e <UnityPrint+0xfa>
   80a98:	3301      	adds	r3, #1
   80a9a:	6013      	str	r3, [r2, #0]
   80a9c:	e08b      	b.n	80bb6 <UnityPrint+0x212>
   80a9e:	210a      	movs	r1, #10
   80aa0:	47b8      	blx	r7
   80aa2:	e088      	b.n	80bb6 <UnityPrint+0x212>
   80aa4:	2172      	movs	r1, #114	; 0x72
   80aa6:	47b8      	blx	r7
   80aa8:	e085      	b.n	80bb6 <UnityPrint+0x212>
   80aaa:	6883      	ldr	r3, [r0, #8]
   80aac:	681b      	ldr	r3, [r3, #0]
   80aae:	2272      	movs	r2, #114	; 0x72
   80ab0:	701a      	strb	r2, [r3, #0]
   80ab2:	682b      	ldr	r3, [r5, #0]
   80ab4:	689b      	ldr	r3, [r3, #8]
   80ab6:	681a      	ldr	r2, [r3, #0]
   80ab8:	3201      	adds	r2, #1
   80aba:	601a      	str	r2, [r3, #0]
   80abc:	e07b      	b.n	80bb6 <UnityPrint+0x212>
            }
            //write escaped line feeds
            else if (*pch == 10)
   80abe:	2b0a      	cmp	r3, #10
   80ac0:	d14e      	bne.n	80b60 <UnityPrint+0x1bc>
            {
                UNITY_OUTPUT_CHAR('\\');
   80ac2:	6828      	ldr	r0, [r5, #0]
   80ac4:	6882      	ldr	r2, [r0, #8]
   80ac6:	6893      	ldr	r3, [r2, #8]
   80ac8:	3b01      	subs	r3, #1
   80aca:	6093      	str	r3, [r2, #8]
   80acc:	2b00      	cmp	r3, #0
   80ace:	da16      	bge.n	80afe <UnityPrint+0x15a>
   80ad0:	6882      	ldr	r2, [r0, #8]
   80ad2:	6891      	ldr	r1, [r2, #8]
   80ad4:	6993      	ldr	r3, [r2, #24]
   80ad6:	4299      	cmp	r1, r3
   80ad8:	db0e      	blt.n	80af8 <UnityPrint+0x154>
   80ada:	6813      	ldr	r3, [r2, #0]
   80adc:	225c      	movs	r2, #92	; 0x5c
   80ade:	701a      	strb	r2, [r3, #0]
   80ae0:	6828      	ldr	r0, [r5, #0]
   80ae2:	6882      	ldr	r2, [r0, #8]
   80ae4:	6813      	ldr	r3, [r2, #0]
   80ae6:	7819      	ldrb	r1, [r3, #0]
   80ae8:	290a      	cmp	r1, #10
   80aea:	d002      	beq.n	80af2 <UnityPrint+0x14e>
   80aec:	3301      	adds	r3, #1
   80aee:	6013      	str	r3, [r2, #0]
   80af0:	e00e      	b.n	80b10 <UnityPrint+0x16c>
   80af2:	210a      	movs	r1, #10
   80af4:	47b8      	blx	r7
   80af6:	e00b      	b.n	80b10 <UnityPrint+0x16c>
   80af8:	215c      	movs	r1, #92	; 0x5c
   80afa:	47b8      	blx	r7
   80afc:	e008      	b.n	80b10 <UnityPrint+0x16c>
   80afe:	6883      	ldr	r3, [r0, #8]
   80b00:	681b      	ldr	r3, [r3, #0]
   80b02:	225c      	movs	r2, #92	; 0x5c
   80b04:	701a      	strb	r2, [r3, #0]
   80b06:	682b      	ldr	r3, [r5, #0]
   80b08:	689b      	ldr	r3, [r3, #8]
   80b0a:	681a      	ldr	r2, [r3, #0]
   80b0c:	3201      	adds	r2, #1
   80b0e:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('n');
   80b10:	6828      	ldr	r0, [r5, #0]
   80b12:	6882      	ldr	r2, [r0, #8]
   80b14:	6893      	ldr	r3, [r2, #8]
   80b16:	3b01      	subs	r3, #1
   80b18:	6093      	str	r3, [r2, #8]
   80b1a:	2b00      	cmp	r3, #0
   80b1c:	da16      	bge.n	80b4c <UnityPrint+0x1a8>
   80b1e:	6882      	ldr	r2, [r0, #8]
   80b20:	6891      	ldr	r1, [r2, #8]
   80b22:	6993      	ldr	r3, [r2, #24]
   80b24:	4299      	cmp	r1, r3
   80b26:	db0e      	blt.n	80b46 <UnityPrint+0x1a2>
   80b28:	6813      	ldr	r3, [r2, #0]
   80b2a:	226e      	movs	r2, #110	; 0x6e
   80b2c:	701a      	strb	r2, [r3, #0]
   80b2e:	6828      	ldr	r0, [r5, #0]
   80b30:	6882      	ldr	r2, [r0, #8]
   80b32:	6813      	ldr	r3, [r2, #0]
   80b34:	7819      	ldrb	r1, [r3, #0]
   80b36:	290a      	cmp	r1, #10
   80b38:	d002      	beq.n	80b40 <UnityPrint+0x19c>
   80b3a:	3301      	adds	r3, #1
   80b3c:	6013      	str	r3, [r2, #0]
   80b3e:	e03a      	b.n	80bb6 <UnityPrint+0x212>
   80b40:	210a      	movs	r1, #10
   80b42:	47b8      	blx	r7
   80b44:	e037      	b.n	80bb6 <UnityPrint+0x212>
   80b46:	216e      	movs	r1, #110	; 0x6e
   80b48:	47b8      	blx	r7
   80b4a:	e034      	b.n	80bb6 <UnityPrint+0x212>
   80b4c:	6883      	ldr	r3, [r0, #8]
   80b4e:	681b      	ldr	r3, [r3, #0]
   80b50:	226e      	movs	r2, #110	; 0x6e
   80b52:	701a      	strb	r2, [r3, #0]
   80b54:	682b      	ldr	r3, [r5, #0]
   80b56:	689b      	ldr	r3, [r3, #8]
   80b58:	681a      	ldr	r2, [r3, #0]
   80b5a:	3201      	adds	r2, #1
   80b5c:	601a      	str	r2, [r3, #0]
   80b5e:	e02a      	b.n	80bb6 <UnityPrint+0x212>
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80b60:	6828      	ldr	r0, [r5, #0]
   80b62:	6882      	ldr	r2, [r0, #8]
   80b64:	6893      	ldr	r3, [r2, #8]
   80b66:	3b01      	subs	r3, #1
   80b68:	6093      	str	r3, [r2, #8]
   80b6a:	2b00      	cmp	r3, #0
   80b6c:	da16      	bge.n	80b9c <UnityPrint+0x1f8>
   80b6e:	6882      	ldr	r2, [r0, #8]
   80b70:	6891      	ldr	r1, [r2, #8]
   80b72:	6993      	ldr	r3, [r2, #24]
   80b74:	4299      	cmp	r1, r3
   80b76:	db0e      	blt.n	80b96 <UnityPrint+0x1f2>
   80b78:	6813      	ldr	r3, [r2, #0]
   80b7a:	225c      	movs	r2, #92	; 0x5c
   80b7c:	701a      	strb	r2, [r3, #0]
   80b7e:	6828      	ldr	r0, [r5, #0]
   80b80:	6882      	ldr	r2, [r0, #8]
   80b82:	6813      	ldr	r3, [r2, #0]
   80b84:	7819      	ldrb	r1, [r3, #0]
   80b86:	290a      	cmp	r1, #10
   80b88:	d002      	beq.n	80b90 <UnityPrint+0x1ec>
   80b8a:	3301      	adds	r3, #1
   80b8c:	6013      	str	r3, [r2, #0]
   80b8e:	e00e      	b.n	80bae <UnityPrint+0x20a>
   80b90:	210a      	movs	r1, #10
   80b92:	47b8      	blx	r7
   80b94:	e00b      	b.n	80bae <UnityPrint+0x20a>
   80b96:	215c      	movs	r1, #92	; 0x5c
   80b98:	47b8      	blx	r7
   80b9a:	e008      	b.n	80bae <UnityPrint+0x20a>
   80b9c:	6883      	ldr	r3, [r0, #8]
   80b9e:	681b      	ldr	r3, [r3, #0]
   80ba0:	225c      	movs	r2, #92	; 0x5c
   80ba2:	701a      	strb	r2, [r3, #0]
   80ba4:	682b      	ldr	r3, [r5, #0]
   80ba6:	689b      	ldr	r3, [r3, #8]
   80ba8:	681a      	ldr	r2, [r3, #0]
   80baa:	3201      	adds	r2, #1
   80bac:	601a      	str	r2, [r3, #0]
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   80bae:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   80bb2:	2102      	movs	r1, #2
   80bb4:	47b0      	blx	r6
{
    const char* pch = string;

    if (pch != NULL)
    {
        while (*pch)
   80bb6:	f814 3b01 	ldrb.w	r3, [r4], #1
   80bba:	2b00      	cmp	r3, #0
   80bbc:	f47f aefe 	bne.w	809bc <UnityPrint+0x18>
   80bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80bc2:	bf00      	nop
   80bc4:	20070008 	.word	0x20070008
   80bc8:	00080819 	.word	0x00080819
   80bcc:	00082789 	.word	0x00082789

00080bd0 <UnityTestResultsBegin>:
    UnityPrint(UnityStrOk);
}

//-----------------------------------------------
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
   80bd0:	b538      	push	{r3, r4, r5, lr}
   80bd2:	460d      	mov	r5, r1
    UnityPrint(file);
   80bd4:	4b46      	ldr	r3, [pc, #280]	; (80cf0 <UnityTestResultsBegin+0x120>)
   80bd6:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80bd8:	4b46      	ldr	r3, [pc, #280]	; (80cf4 <UnityTestResultsBegin+0x124>)
   80bda:	6818      	ldr	r0, [r3, #0]
   80bdc:	6884      	ldr	r4, [r0, #8]
   80bde:	68a2      	ldr	r2, [r4, #8]
   80be0:	3a01      	subs	r2, #1
   80be2:	60a2      	str	r2, [r4, #8]
   80be4:	2a00      	cmp	r2, #0
   80be6:	da19      	bge.n	80c1c <UnityTestResultsBegin+0x4c>
   80be8:	6882      	ldr	r2, [r0, #8]
   80bea:	6893      	ldr	r3, [r2, #8]
   80bec:	6991      	ldr	r1, [r2, #24]
   80bee:	428b      	cmp	r3, r1
   80bf0:	db10      	blt.n	80c14 <UnityTestResultsBegin+0x44>
   80bf2:	6813      	ldr	r3, [r2, #0]
   80bf4:	223a      	movs	r2, #58	; 0x3a
   80bf6:	701a      	strb	r2, [r3, #0]
   80bf8:	4b3e      	ldr	r3, [pc, #248]	; (80cf4 <UnityTestResultsBegin+0x124>)
   80bfa:	6818      	ldr	r0, [r3, #0]
   80bfc:	6882      	ldr	r2, [r0, #8]
   80bfe:	6813      	ldr	r3, [r2, #0]
   80c00:	7819      	ldrb	r1, [r3, #0]
   80c02:	290a      	cmp	r1, #10
   80c04:	d002      	beq.n	80c0c <UnityTestResultsBegin+0x3c>
   80c06:	3301      	adds	r3, #1
   80c08:	6013      	str	r3, [r2, #0]
   80c0a:	e011      	b.n	80c30 <UnityTestResultsBegin+0x60>
   80c0c:	210a      	movs	r1, #10
   80c0e:	4b3a      	ldr	r3, [pc, #232]	; (80cf8 <UnityTestResultsBegin+0x128>)
   80c10:	4798      	blx	r3
   80c12:	e00d      	b.n	80c30 <UnityTestResultsBegin+0x60>
   80c14:	213a      	movs	r1, #58	; 0x3a
   80c16:	4b38      	ldr	r3, [pc, #224]	; (80cf8 <UnityTestResultsBegin+0x128>)
   80c18:	4798      	blx	r3
   80c1a:	e009      	b.n	80c30 <UnityTestResultsBegin+0x60>
   80c1c:	6883      	ldr	r3, [r0, #8]
   80c1e:	681b      	ldr	r3, [r3, #0]
   80c20:	223a      	movs	r2, #58	; 0x3a
   80c22:	701a      	strb	r2, [r3, #0]
   80c24:	4b33      	ldr	r3, [pc, #204]	; (80cf4 <UnityTestResultsBegin+0x124>)
   80c26:	681b      	ldr	r3, [r3, #0]
   80c28:	689b      	ldr	r3, [r3, #8]
   80c2a:	681a      	ldr	r2, [r3, #0]
   80c2c:	3201      	adds	r2, #1
   80c2e:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)line);
   80c30:	4628      	mov	r0, r5
   80c32:	4b32      	ldr	r3, [pc, #200]	; (80cfc <UnityTestResultsBegin+0x12c>)
   80c34:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80c36:	4b2f      	ldr	r3, [pc, #188]	; (80cf4 <UnityTestResultsBegin+0x124>)
   80c38:	6818      	ldr	r0, [r3, #0]
   80c3a:	6882      	ldr	r2, [r0, #8]
   80c3c:	6893      	ldr	r3, [r2, #8]
   80c3e:	3b01      	subs	r3, #1
   80c40:	6093      	str	r3, [r2, #8]
   80c42:	2b00      	cmp	r3, #0
   80c44:	da19      	bge.n	80c7a <UnityTestResultsBegin+0xaa>
   80c46:	6882      	ldr	r2, [r0, #8]
   80c48:	6891      	ldr	r1, [r2, #8]
   80c4a:	6993      	ldr	r3, [r2, #24]
   80c4c:	4299      	cmp	r1, r3
   80c4e:	db10      	blt.n	80c72 <UnityTestResultsBegin+0xa2>
   80c50:	6813      	ldr	r3, [r2, #0]
   80c52:	223a      	movs	r2, #58	; 0x3a
   80c54:	701a      	strb	r2, [r3, #0]
   80c56:	4b27      	ldr	r3, [pc, #156]	; (80cf4 <UnityTestResultsBegin+0x124>)
   80c58:	6818      	ldr	r0, [r3, #0]
   80c5a:	6882      	ldr	r2, [r0, #8]
   80c5c:	6813      	ldr	r3, [r2, #0]
   80c5e:	7819      	ldrb	r1, [r3, #0]
   80c60:	290a      	cmp	r1, #10
   80c62:	d002      	beq.n	80c6a <UnityTestResultsBegin+0x9a>
   80c64:	3301      	adds	r3, #1
   80c66:	6013      	str	r3, [r2, #0]
   80c68:	e011      	b.n	80c8e <UnityTestResultsBegin+0xbe>
   80c6a:	210a      	movs	r1, #10
   80c6c:	4b22      	ldr	r3, [pc, #136]	; (80cf8 <UnityTestResultsBegin+0x128>)
   80c6e:	4798      	blx	r3
   80c70:	e00d      	b.n	80c8e <UnityTestResultsBegin+0xbe>
   80c72:	213a      	movs	r1, #58	; 0x3a
   80c74:	4b20      	ldr	r3, [pc, #128]	; (80cf8 <UnityTestResultsBegin+0x128>)
   80c76:	4798      	blx	r3
   80c78:	e009      	b.n	80c8e <UnityTestResultsBegin+0xbe>
   80c7a:	6883      	ldr	r3, [r0, #8]
   80c7c:	681b      	ldr	r3, [r3, #0]
   80c7e:	223a      	movs	r2, #58	; 0x3a
   80c80:	701a      	strb	r2, [r3, #0]
   80c82:	4b1c      	ldr	r3, [pc, #112]	; (80cf4 <UnityTestResultsBegin+0x124>)
   80c84:	681b      	ldr	r3, [r3, #0]
   80c86:	689b      	ldr	r3, [r3, #8]
   80c88:	681a      	ldr	r2, [r3, #0]
   80c8a:	3201      	adds	r2, #1
   80c8c:	601a      	str	r2, [r3, #0]
    UnityPrint(Unity.CurrentTestName);
   80c8e:	4b1c      	ldr	r3, [pc, #112]	; (80d00 <UnityTestResultsBegin+0x130>)
   80c90:	6858      	ldr	r0, [r3, #4]
   80c92:	4b17      	ldr	r3, [pc, #92]	; (80cf0 <UnityTestResultsBegin+0x120>)
   80c94:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80c96:	4b17      	ldr	r3, [pc, #92]	; (80cf4 <UnityTestResultsBegin+0x124>)
   80c98:	6818      	ldr	r0, [r3, #0]
   80c9a:	6882      	ldr	r2, [r0, #8]
   80c9c:	6893      	ldr	r3, [r2, #8]
   80c9e:	3b01      	subs	r3, #1
   80ca0:	6093      	str	r3, [r2, #8]
   80ca2:	2b00      	cmp	r3, #0
   80ca4:	da19      	bge.n	80cda <UnityTestResultsBegin+0x10a>
   80ca6:	6882      	ldr	r2, [r0, #8]
   80ca8:	6891      	ldr	r1, [r2, #8]
   80caa:	6993      	ldr	r3, [r2, #24]
   80cac:	4299      	cmp	r1, r3
   80cae:	db10      	blt.n	80cd2 <UnityTestResultsBegin+0x102>
   80cb0:	6813      	ldr	r3, [r2, #0]
   80cb2:	223a      	movs	r2, #58	; 0x3a
   80cb4:	701a      	strb	r2, [r3, #0]
   80cb6:	4b0f      	ldr	r3, [pc, #60]	; (80cf4 <UnityTestResultsBegin+0x124>)
   80cb8:	6818      	ldr	r0, [r3, #0]
   80cba:	6882      	ldr	r2, [r0, #8]
   80cbc:	6813      	ldr	r3, [r2, #0]
   80cbe:	7819      	ldrb	r1, [r3, #0]
   80cc0:	290a      	cmp	r1, #10
   80cc2:	d002      	beq.n	80cca <UnityTestResultsBegin+0xfa>
   80cc4:	3301      	adds	r3, #1
   80cc6:	6013      	str	r3, [r2, #0]
   80cc8:	bd38      	pop	{r3, r4, r5, pc}
   80cca:	210a      	movs	r1, #10
   80ccc:	4b0a      	ldr	r3, [pc, #40]	; (80cf8 <UnityTestResultsBegin+0x128>)
   80cce:	4798      	blx	r3
   80cd0:	bd38      	pop	{r3, r4, r5, pc}
   80cd2:	213a      	movs	r1, #58	; 0x3a
   80cd4:	4b08      	ldr	r3, [pc, #32]	; (80cf8 <UnityTestResultsBegin+0x128>)
   80cd6:	4798      	blx	r3
   80cd8:	bd38      	pop	{r3, r4, r5, pc}
   80cda:	6883      	ldr	r3, [r0, #8]
   80cdc:	681b      	ldr	r3, [r3, #0]
   80cde:	223a      	movs	r2, #58	; 0x3a
   80ce0:	701a      	strb	r2, [r3, #0]
   80ce2:	4b04      	ldr	r3, [pc, #16]	; (80cf4 <UnityTestResultsBegin+0x124>)
   80ce4:	681b      	ldr	r3, [r3, #0]
   80ce6:	689b      	ldr	r3, [r3, #8]
   80ce8:	681a      	ldr	r2, [r3, #0]
   80cea:	3201      	adds	r2, #1
   80cec:	601a      	str	r2, [r3, #0]
   80cee:	bd38      	pop	{r3, r4, r5, pc}
   80cf0:	000809a5 	.word	0x000809a5
   80cf4:	20070008 	.word	0x20070008
   80cf8:	00082789 	.word	0x00082789
   80cfc:	0008067d 	.word	0x0008067d
   80d00:	20070a20 	.word	0x20070a20

00080d04 <UnityTestResultsFailBegin>:
}

//-----------------------------------------------
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
   80d04:	b508      	push	{r3, lr}
   80d06:	4601      	mov	r1, r0
    UnityTestResultsBegin(Unity.TestFile, line);
   80d08:	4b19      	ldr	r3, [pc, #100]	; (80d70 <UnityTestResultsFailBegin+0x6c>)
   80d0a:	6818      	ldr	r0, [r3, #0]
   80d0c:	4b19      	ldr	r3, [pc, #100]	; (80d74 <UnityTestResultsFailBegin+0x70>)
   80d0e:	4798      	blx	r3
    UnityPrint(UnityStrFail);
   80d10:	4819      	ldr	r0, [pc, #100]	; (80d78 <UnityTestResultsFailBegin+0x74>)
   80d12:	4b1a      	ldr	r3, [pc, #104]	; (80d7c <UnityTestResultsFailBegin+0x78>)
   80d14:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80d16:	4b1a      	ldr	r3, [pc, #104]	; (80d80 <UnityTestResultsFailBegin+0x7c>)
   80d18:	6818      	ldr	r0, [r3, #0]
   80d1a:	6882      	ldr	r2, [r0, #8]
   80d1c:	6893      	ldr	r3, [r2, #8]
   80d1e:	3b01      	subs	r3, #1
   80d20:	6093      	str	r3, [r2, #8]
   80d22:	2b00      	cmp	r3, #0
   80d24:	da19      	bge.n	80d5a <UnityTestResultsFailBegin+0x56>
   80d26:	6882      	ldr	r2, [r0, #8]
   80d28:	6891      	ldr	r1, [r2, #8]
   80d2a:	6993      	ldr	r3, [r2, #24]
   80d2c:	4299      	cmp	r1, r3
   80d2e:	db10      	blt.n	80d52 <UnityTestResultsFailBegin+0x4e>
   80d30:	6813      	ldr	r3, [r2, #0]
   80d32:	223a      	movs	r2, #58	; 0x3a
   80d34:	701a      	strb	r2, [r3, #0]
   80d36:	4b12      	ldr	r3, [pc, #72]	; (80d80 <UnityTestResultsFailBegin+0x7c>)
   80d38:	6818      	ldr	r0, [r3, #0]
   80d3a:	6882      	ldr	r2, [r0, #8]
   80d3c:	6813      	ldr	r3, [r2, #0]
   80d3e:	7819      	ldrb	r1, [r3, #0]
   80d40:	290a      	cmp	r1, #10
   80d42:	d002      	beq.n	80d4a <UnityTestResultsFailBegin+0x46>
   80d44:	3301      	adds	r3, #1
   80d46:	6013      	str	r3, [r2, #0]
   80d48:	bd08      	pop	{r3, pc}
   80d4a:	210a      	movs	r1, #10
   80d4c:	4b0d      	ldr	r3, [pc, #52]	; (80d84 <UnityTestResultsFailBegin+0x80>)
   80d4e:	4798      	blx	r3
   80d50:	bd08      	pop	{r3, pc}
   80d52:	213a      	movs	r1, #58	; 0x3a
   80d54:	4b0b      	ldr	r3, [pc, #44]	; (80d84 <UnityTestResultsFailBegin+0x80>)
   80d56:	4798      	blx	r3
   80d58:	bd08      	pop	{r3, pc}
   80d5a:	6883      	ldr	r3, [r0, #8]
   80d5c:	681b      	ldr	r3, [r3, #0]
   80d5e:	223a      	movs	r2, #58	; 0x3a
   80d60:	701a      	strb	r2, [r3, #0]
   80d62:	4b07      	ldr	r3, [pc, #28]	; (80d80 <UnityTestResultsFailBegin+0x7c>)
   80d64:	681b      	ldr	r3, [r3, #0]
   80d66:	689b      	ldr	r3, [r3, #8]
   80d68:	681a      	ldr	r2, [r3, #0]
   80d6a:	3201      	adds	r2, #1
   80d6c:	601a      	str	r2, [r3, #0]
   80d6e:	bd08      	pop	{r3, pc}
   80d70:	20070a20 	.word	0x20070a20
   80d74:	00080bd1 	.word	0x00080bd1
   80d78:	000844dc 	.word	0x000844dc
   80d7c:	000809a5 	.word	0x000809a5
   80d80:	20070008 	.word	0x20070008
   80d84:	00082789 	.word	0x00082789

00080d88 <UnityAddMsgIfSpecified>:
    UNITY_PRINT_EOL;
}

//-----------------------------------------------
static void UnityAddMsgIfSpecified(const char* msg)
{
   80d88:	b538      	push	{r3, r4, r5, lr}
    if (msg)
   80d8a:	4605      	mov	r5, r0
   80d8c:	b120      	cbz	r0, 80d98 <UnityAddMsgIfSpecified+0x10>
    {
        UnityPrint(UnityStrSpacer);
   80d8e:	4803      	ldr	r0, [pc, #12]	; (80d9c <UnityAddMsgIfSpecified+0x14>)
   80d90:	4c03      	ldr	r4, [pc, #12]	; (80da0 <UnityAddMsgIfSpecified+0x18>)
   80d92:	47a0      	blx	r4
        UnityPrint(msg);
   80d94:	4628      	mov	r0, r5
   80d96:	47a0      	blx	r4
   80d98:	bd38      	pop	{r3, r4, r5, pc}
   80d9a:	bf00      	nop
   80d9c:	000844d0 	.word	0x000844d0
   80da0:	000809a5 	.word	0x000809a5

00080da4 <UnityPrintMask>:
    }
}

//-----------------------------------------------
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
   80da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80da8:	4607      	mov	r7, r0
   80daa:	4688      	mov	r8, r1
   80dac:	2520      	movs	r5, #32
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
   80dae:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
                UNITY_OUTPUT_CHAR('0');
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   80db2:	4e43      	ldr	r6, [pc, #268]	; (80ec0 <UnityPrintMask+0x11c>)
   80db4:	f04f 0958 	mov.w	r9, #88	; 0x58
   80db8:	f8df a108 	ldr.w	sl, [pc, #264]	; 80ec4 <UnityPrintMask+0x120>
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
    {
        if (current_bit & mask)
   80dbc:	423c      	tst	r4, r7
   80dbe:	d052      	beq.n	80e66 <UnityPrintMask+0xc2>
        {
            if (current_bit & number)
   80dc0:	ea14 0f08 	tst.w	r4, r8
   80dc4:	d027      	beq.n	80e16 <UnityPrintMask+0x72>
            {
                UNITY_OUTPUT_CHAR('1');
   80dc6:	6830      	ldr	r0, [r6, #0]
   80dc8:	6882      	ldr	r2, [r0, #8]
   80dca:	6893      	ldr	r3, [r2, #8]
   80dcc:	3b01      	subs	r3, #1
   80dce:	6093      	str	r3, [r2, #8]
   80dd0:	2b00      	cmp	r3, #0
   80dd2:	da16      	bge.n	80e02 <UnityPrintMask+0x5e>
   80dd4:	6882      	ldr	r2, [r0, #8]
   80dd6:	6891      	ldr	r1, [r2, #8]
   80dd8:	6993      	ldr	r3, [r2, #24]
   80dda:	4299      	cmp	r1, r3
   80ddc:	db0e      	blt.n	80dfc <UnityPrintMask+0x58>
   80dde:	6813      	ldr	r3, [r2, #0]
   80de0:	2231      	movs	r2, #49	; 0x31
   80de2:	701a      	strb	r2, [r3, #0]
   80de4:	6830      	ldr	r0, [r6, #0]
   80de6:	6882      	ldr	r2, [r0, #8]
   80de8:	6813      	ldr	r3, [r2, #0]
   80dea:	7819      	ldrb	r1, [r3, #0]
   80dec:	290a      	cmp	r1, #10
   80dee:	d002      	beq.n	80df6 <UnityPrintMask+0x52>
   80df0:	3301      	adds	r3, #1
   80df2:	6013      	str	r3, [r2, #0]
   80df4:	e05e      	b.n	80eb4 <UnityPrintMask+0x110>
   80df6:	210a      	movs	r1, #10
   80df8:	47d0      	blx	sl
   80dfa:	e05b      	b.n	80eb4 <UnityPrintMask+0x110>
   80dfc:	2131      	movs	r1, #49	; 0x31
   80dfe:	47d0      	blx	sl
   80e00:	e058      	b.n	80eb4 <UnityPrintMask+0x110>
   80e02:	6883      	ldr	r3, [r0, #8]
   80e04:	681b      	ldr	r3, [r3, #0]
   80e06:	2231      	movs	r2, #49	; 0x31
   80e08:	701a      	strb	r2, [r3, #0]
   80e0a:	6833      	ldr	r3, [r6, #0]
   80e0c:	689b      	ldr	r3, [r3, #8]
   80e0e:	681a      	ldr	r2, [r3, #0]
   80e10:	3201      	adds	r2, #1
   80e12:	601a      	str	r2, [r3, #0]
   80e14:	e04e      	b.n	80eb4 <UnityPrintMask+0x110>
            }
            else
            {
                UNITY_OUTPUT_CHAR('0');
   80e16:	6830      	ldr	r0, [r6, #0]
   80e18:	6882      	ldr	r2, [r0, #8]
   80e1a:	6893      	ldr	r3, [r2, #8]
   80e1c:	3b01      	subs	r3, #1
   80e1e:	6093      	str	r3, [r2, #8]
   80e20:	2b00      	cmp	r3, #0
   80e22:	da16      	bge.n	80e52 <UnityPrintMask+0xae>
   80e24:	6882      	ldr	r2, [r0, #8]
   80e26:	6891      	ldr	r1, [r2, #8]
   80e28:	6993      	ldr	r3, [r2, #24]
   80e2a:	4299      	cmp	r1, r3
   80e2c:	db0e      	blt.n	80e4c <UnityPrintMask+0xa8>
   80e2e:	6813      	ldr	r3, [r2, #0]
   80e30:	2230      	movs	r2, #48	; 0x30
   80e32:	701a      	strb	r2, [r3, #0]
   80e34:	6830      	ldr	r0, [r6, #0]
   80e36:	6882      	ldr	r2, [r0, #8]
   80e38:	6813      	ldr	r3, [r2, #0]
   80e3a:	7819      	ldrb	r1, [r3, #0]
   80e3c:	290a      	cmp	r1, #10
   80e3e:	d002      	beq.n	80e46 <UnityPrintMask+0xa2>
   80e40:	3301      	adds	r3, #1
   80e42:	6013      	str	r3, [r2, #0]
   80e44:	e036      	b.n	80eb4 <UnityPrintMask+0x110>
   80e46:	210a      	movs	r1, #10
   80e48:	47d0      	blx	sl
   80e4a:	e033      	b.n	80eb4 <UnityPrintMask+0x110>
   80e4c:	2130      	movs	r1, #48	; 0x30
   80e4e:	47d0      	blx	sl
   80e50:	e030      	b.n	80eb4 <UnityPrintMask+0x110>
   80e52:	6883      	ldr	r3, [r0, #8]
   80e54:	681b      	ldr	r3, [r3, #0]
   80e56:	2230      	movs	r2, #48	; 0x30
   80e58:	701a      	strb	r2, [r3, #0]
   80e5a:	6833      	ldr	r3, [r6, #0]
   80e5c:	689b      	ldr	r3, [r3, #8]
   80e5e:	681a      	ldr	r2, [r3, #0]
   80e60:	3201      	adds	r2, #1
   80e62:	601a      	str	r2, [r3, #0]
   80e64:	e026      	b.n	80eb4 <UnityPrintMask+0x110>
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   80e66:	6830      	ldr	r0, [r6, #0]
   80e68:	6882      	ldr	r2, [r0, #8]
   80e6a:	6893      	ldr	r3, [r2, #8]
   80e6c:	3b01      	subs	r3, #1
   80e6e:	6093      	str	r3, [r2, #8]
   80e70:	2b00      	cmp	r3, #0
   80e72:	da16      	bge.n	80ea2 <UnityPrintMask+0xfe>
   80e74:	6882      	ldr	r2, [r0, #8]
   80e76:	6891      	ldr	r1, [r2, #8]
   80e78:	6993      	ldr	r3, [r2, #24]
   80e7a:	4299      	cmp	r1, r3
   80e7c:	db0e      	blt.n	80e9c <UnityPrintMask+0xf8>
   80e7e:	6813      	ldr	r3, [r2, #0]
   80e80:	f883 9000 	strb.w	r9, [r3]
   80e84:	6830      	ldr	r0, [r6, #0]
   80e86:	6882      	ldr	r2, [r0, #8]
   80e88:	6813      	ldr	r3, [r2, #0]
   80e8a:	7819      	ldrb	r1, [r3, #0]
   80e8c:	290a      	cmp	r1, #10
   80e8e:	d002      	beq.n	80e96 <UnityPrintMask+0xf2>
   80e90:	3301      	adds	r3, #1
   80e92:	6013      	str	r3, [r2, #0]
   80e94:	e00e      	b.n	80eb4 <UnityPrintMask+0x110>
   80e96:	210a      	movs	r1, #10
   80e98:	47d0      	blx	sl
   80e9a:	e00b      	b.n	80eb4 <UnityPrintMask+0x110>
   80e9c:	4649      	mov	r1, r9
   80e9e:	47d0      	blx	sl
   80ea0:	e008      	b.n	80eb4 <UnityPrintMask+0x110>
   80ea2:	6883      	ldr	r3, [r0, #8]
   80ea4:	681b      	ldr	r3, [r3, #0]
   80ea6:	f883 9000 	strb.w	r9, [r3]
   80eaa:	6833      	ldr	r3, [r6, #0]
   80eac:	689b      	ldr	r3, [r3, #8]
   80eae:	681a      	ldr	r2, [r3, #0]
   80eb0:	3201      	adds	r2, #1
   80eb2:	601a      	str	r2, [r3, #0]
        }
        current_bit = current_bit >> 1;
   80eb4:	0864      	lsrs	r4, r4, #1
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
   80eb6:	3d01      	subs	r5, #1
   80eb8:	d180      	bne.n	80dbc <UnityPrintMask+0x18>
        {
            UNITY_OUTPUT_CHAR('X');
        }
        current_bit = current_bit >> 1;
    }
}
   80eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80ebe:	bf00      	nop
   80ec0:	20070008 	.word	0x20070008
   80ec4:	00082789 	.word	0x00082789

00080ec8 <UnityPrintFail>:
#endif

//-----------------------------------------------

void UnityPrintFail(void)
{
   80ec8:	b508      	push	{r3, lr}
    UnityPrint(UnityStrFail);
   80eca:	4802      	ldr	r0, [pc, #8]	; (80ed4 <UnityPrintFail+0xc>)
   80ecc:	4b02      	ldr	r3, [pc, #8]	; (80ed8 <UnityPrintFail+0x10>)
   80ece:	4798      	blx	r3
   80ed0:	bd08      	pop	{r3, pc}
   80ed2:	bf00      	nop
   80ed4:	000844dc 	.word	0x000844dc
   80ed8:	000809a5 	.word	0x000809a5

00080edc <UnityPrintOk>:
}

void UnityPrintOk(void)
{
   80edc:	b508      	push	{r3, lr}
    UnityPrint(UnityStrOk);
   80ede:	4802      	ldr	r0, [pc, #8]	; (80ee8 <UnityPrintOk+0xc>)
   80ee0:	4b02      	ldr	r3, [pc, #8]	; (80eec <UnityPrintOk+0x10>)
   80ee2:	4798      	blx	r3
   80ee4:	bd08      	pop	{r3, pc}
   80ee6:	bf00      	nop
   80ee8:	000844cc 	.word	0x000844cc
   80eec:	000809a5 	.word	0x000809a5

00080ef0 <UnityConcludeTest>:
    UNITY_OUTPUT_CHAR(':');
}

//-----------------------------------------------
void UnityConcludeTest(void)
{
   80ef0:	b508      	push	{r3, lr}
    if (Unity.CurrentTestIgnored)
   80ef2:	4b24      	ldr	r3, [pc, #144]	; (80f84 <UnityConcludeTest+0x94>)
   80ef4:	69db      	ldr	r3, [r3, #28]
   80ef6:	b123      	cbz	r3, 80f02 <UnityConcludeTest+0x12>
    {
        Unity.TestIgnores++;
   80ef8:	4b22      	ldr	r3, [pc, #136]	; (80f84 <UnityConcludeTest+0x94>)
   80efa:	695a      	ldr	r2, [r3, #20]
   80efc:	3201      	adds	r2, #1
   80efe:	615a      	str	r2, [r3, #20]
   80f00:	e00f      	b.n	80f22 <UnityConcludeTest+0x32>
    }
    else if (!Unity.CurrentTestFailed)
   80f02:	4b20      	ldr	r3, [pc, #128]	; (80f84 <UnityConcludeTest+0x94>)
   80f04:	699b      	ldr	r3, [r3, #24]
   80f06:	b943      	cbnz	r3, 80f1a <UnityConcludeTest+0x2a>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
   80f08:	4b1e      	ldr	r3, [pc, #120]	; (80f84 <UnityConcludeTest+0x94>)
   80f0a:	6818      	ldr	r0, [r3, #0]
   80f0c:	6899      	ldr	r1, [r3, #8]
   80f0e:	4b1e      	ldr	r3, [pc, #120]	; (80f88 <UnityConcludeTest+0x98>)
   80f10:	4798      	blx	r3
        UnityPrint(UnityStrPass);
   80f12:	481e      	ldr	r0, [pc, #120]	; (80f8c <UnityConcludeTest+0x9c>)
   80f14:	4b1e      	ldr	r3, [pc, #120]	; (80f90 <UnityConcludeTest+0xa0>)
   80f16:	4798      	blx	r3
   80f18:	e003      	b.n	80f22 <UnityConcludeTest+0x32>
    }
    else
    {
        Unity.TestFailures++;
   80f1a:	4b1a      	ldr	r3, [pc, #104]	; (80f84 <UnityConcludeTest+0x94>)
   80f1c:	691a      	ldr	r2, [r3, #16]
   80f1e:	3201      	adds	r2, #1
   80f20:	611a      	str	r2, [r3, #16]
    }

    Unity.CurrentTestFailed = 0;
   80f22:	4b18      	ldr	r3, [pc, #96]	; (80f84 <UnityConcludeTest+0x94>)
   80f24:	2200      	movs	r2, #0
   80f26:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   80f28:	61da      	str	r2, [r3, #28]
    UNITY_PRINT_EOL;
   80f2a:	4b1a      	ldr	r3, [pc, #104]	; (80f94 <UnityConcludeTest+0xa4>)
   80f2c:	6818      	ldr	r0, [r3, #0]
   80f2e:	6882      	ldr	r2, [r0, #8]
   80f30:	6893      	ldr	r3, [r2, #8]
   80f32:	3b01      	subs	r3, #1
   80f34:	6093      	str	r3, [r2, #8]
   80f36:	2b00      	cmp	r3, #0
   80f38:	da19      	bge.n	80f6e <UnityConcludeTest+0x7e>
   80f3a:	6882      	ldr	r2, [r0, #8]
   80f3c:	6891      	ldr	r1, [r2, #8]
   80f3e:	6993      	ldr	r3, [r2, #24]
   80f40:	4299      	cmp	r1, r3
   80f42:	db10      	blt.n	80f66 <UnityConcludeTest+0x76>
   80f44:	6813      	ldr	r3, [r2, #0]
   80f46:	220a      	movs	r2, #10
   80f48:	701a      	strb	r2, [r3, #0]
   80f4a:	4b12      	ldr	r3, [pc, #72]	; (80f94 <UnityConcludeTest+0xa4>)
   80f4c:	6818      	ldr	r0, [r3, #0]
   80f4e:	6882      	ldr	r2, [r0, #8]
   80f50:	6813      	ldr	r3, [r2, #0]
   80f52:	7819      	ldrb	r1, [r3, #0]
   80f54:	290a      	cmp	r1, #10
   80f56:	d002      	beq.n	80f5e <UnityConcludeTest+0x6e>
   80f58:	3301      	adds	r3, #1
   80f5a:	6013      	str	r3, [r2, #0]
   80f5c:	bd08      	pop	{r3, pc}
   80f5e:	210a      	movs	r1, #10
   80f60:	4b0d      	ldr	r3, [pc, #52]	; (80f98 <UnityConcludeTest+0xa8>)
   80f62:	4798      	blx	r3
   80f64:	bd08      	pop	{r3, pc}
   80f66:	210a      	movs	r1, #10
   80f68:	4b0b      	ldr	r3, [pc, #44]	; (80f98 <UnityConcludeTest+0xa8>)
   80f6a:	4798      	blx	r3
   80f6c:	bd08      	pop	{r3, pc}
   80f6e:	6883      	ldr	r3, [r0, #8]
   80f70:	681b      	ldr	r3, [r3, #0]
   80f72:	220a      	movs	r2, #10
   80f74:	701a      	strb	r2, [r3, #0]
   80f76:	4b07      	ldr	r3, [pc, #28]	; (80f94 <UnityConcludeTest+0xa4>)
   80f78:	681b      	ldr	r3, [r3, #0]
   80f7a:	689b      	ldr	r3, [r3, #8]
   80f7c:	681a      	ldr	r2, [r3, #0]
   80f7e:	3201      	adds	r2, #1
   80f80:	601a      	str	r2, [r3, #0]
   80f82:	bd08      	pop	{r3, pc}
   80f84:	20070a20 	.word	0x20070a20
   80f88:	00080bd1 	.word	0x00080bd1
   80f8c:	00084528 	.word	0x00084528
   80f90:	000809a5 	.word	0x000809a5
   80f94:	20070008 	.word	0x20070008
   80f98:	00082789 	.word	0x00082789

00080f9c <UnityAssertBits>:
void UnityAssertBits(const _U_SINT mask,
                     const _U_SINT expected,
                     const _U_SINT actual,
                     const char* msg,
                     const UNITY_LINE_TYPE lineNumber)
{
   80f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80fa0:	4605      	mov	r5, r0
   80fa2:	460f      	mov	r7, r1
   80fa4:	4616      	mov	r6, r2
   80fa6:	4698      	mov	r8, r3
    UNITY_SKIP_EXECUTION;
   80fa8:	4c12      	ldr	r4, [pc, #72]	; (80ff4 <UnityAssertBits+0x58>)
   80faa:	69a4      	ldr	r4, [r4, #24]
   80fac:	b9fc      	cbnz	r4, 80fee <UnityAssertBits+0x52>
   80fae:	4a11      	ldr	r2, [pc, #68]	; (80ff4 <UnityAssertBits+0x58>)
   80fb0:	69d2      	ldr	r2, [r2, #28]
   80fb2:	b9e2      	cbnz	r2, 80fee <UnityAssertBits+0x52>

    if ((mask & expected) != (mask & actual))
   80fb4:	ea81 0306 	eor.w	r3, r1, r6
   80fb8:	4203      	tst	r3, r0
   80fba:	d018      	beq.n	80fee <UnityAssertBits+0x52>
    {
        UnityTestResultsFailBegin(lineNumber);
   80fbc:	9808      	ldr	r0, [sp, #32]
   80fbe:	4b0e      	ldr	r3, [pc, #56]	; (80ff8 <UnityAssertBits+0x5c>)
   80fc0:	4798      	blx	r3
        UnityPrint(UnityStrExpected);
   80fc2:	480e      	ldr	r0, [pc, #56]	; (80ffc <UnityAssertBits+0x60>)
   80fc4:	f8df 9048 	ldr.w	r9, [pc, #72]	; 81010 <UnityAssertBits+0x74>
   80fc8:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)expected);
   80fca:	4628      	mov	r0, r5
   80fcc:	4639      	mov	r1, r7
   80fce:	4c0c      	ldr	r4, [pc, #48]	; (81000 <UnityAssertBits+0x64>)
   80fd0:	47a0      	blx	r4
        UnityPrint(UnityStrWas);
   80fd2:	480c      	ldr	r0, [pc, #48]	; (81004 <UnityAssertBits+0x68>)
   80fd4:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)actual);
   80fd6:	4628      	mov	r0, r5
   80fd8:	4631      	mov	r1, r6
   80fda:	47a0      	blx	r4
        UnityAddMsgIfSpecified(msg);
   80fdc:	4640      	mov	r0, r8
   80fde:	4b0a      	ldr	r3, [pc, #40]	; (81008 <UnityAssertBits+0x6c>)
   80fe0:	4798      	blx	r3
        UNITY_FAIL_AND_BAIL;
   80fe2:	4804      	ldr	r0, [pc, #16]	; (80ff4 <UnityAssertBits+0x58>)
   80fe4:	2101      	movs	r1, #1
   80fe6:	6181      	str	r1, [r0, #24]
   80fe8:	3020      	adds	r0, #32
   80fea:	4b08      	ldr	r3, [pc, #32]	; (8100c <UnityAssertBits+0x70>)
   80fec:	4798      	blx	r3
   80fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80ff2:	bf00      	nop
   80ff4:	20070a20 	.word	0x20070a20
   80ff8:	00080d05 	.word	0x00080d05
   80ffc:	000844e4 	.word	0x000844e4
   81000:	00080da5 	.word	0x00080da5
   81004:	000844d4 	.word	0x000844d4
   81008:	00080d89 	.word	0x00080d89
   8100c:	00081d75 	.word	0x00081d75
   81010:	000809a5 	.word	0x000809a5

00081014 <UnityDefaultTestRun>:
    void setUp(void);
    void tearDown(void);
#endif
//-----------------------------------------------
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
   81014:	b500      	push	{lr}
   81016:	b083      	sub	sp, #12
   81018:	9001      	str	r0, [sp, #4]
    Unity.CurrentTestName = FuncName;
   8101a:	480e      	ldr	r0, [pc, #56]	; (81054 <UnityDefaultTestRun+0x40>)
   8101c:	6041      	str	r1, [r0, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
   8101e:	6082      	str	r2, [r0, #8]
    Unity.NumberOfTests++;
   81020:	68c3      	ldr	r3, [r0, #12]
   81022:	3301      	adds	r3, #1
   81024:	60c3      	str	r3, [r0, #12]
    if (TEST_PROTECT())
   81026:	3020      	adds	r0, #32
   81028:	4b0b      	ldr	r3, [pc, #44]	; (81058 <UnityDefaultTestRun+0x44>)
   8102a:	4798      	blx	r3
   8102c:	b918      	cbnz	r0, 81036 <UnityDefaultTestRun+0x22>
    {
        setUp();
   8102e:	4b0b      	ldr	r3, [pc, #44]	; (8105c <UnityDefaultTestRun+0x48>)
   81030:	4798      	blx	r3
        Func();
   81032:	9b01      	ldr	r3, [sp, #4]
   81034:	4798      	blx	r3
    }
    if (TEST_PROTECT() && !(Unity.CurrentTestIgnored))
   81036:	480a      	ldr	r0, [pc, #40]	; (81060 <UnityDefaultTestRun+0x4c>)
   81038:	4b07      	ldr	r3, [pc, #28]	; (81058 <UnityDefaultTestRun+0x44>)
   8103a:	4798      	blx	r3
   8103c:	b920      	cbnz	r0, 81048 <UnityDefaultTestRun+0x34>
   8103e:	4b05      	ldr	r3, [pc, #20]	; (81054 <UnityDefaultTestRun+0x40>)
   81040:	69db      	ldr	r3, [r3, #28]
   81042:	b90b      	cbnz	r3, 81048 <UnityDefaultTestRun+0x34>
    {
        tearDown();
   81044:	4b07      	ldr	r3, [pc, #28]	; (81064 <UnityDefaultTestRun+0x50>)
   81046:	4798      	blx	r3
    }
    UnityConcludeTest();
   81048:	4b07      	ldr	r3, [pc, #28]	; (81068 <UnityDefaultTestRun+0x54>)
   8104a:	4798      	blx	r3
}
   8104c:	b003      	add	sp, #12
   8104e:	f85d fb04 	ldr.w	pc, [sp], #4
   81052:	bf00      	nop
   81054:	20070a20 	.word	0x20070a20
   81058:	00081d69 	.word	0x00081d69
   8105c:	00080209 	.word	0x00080209
   81060:	20070a40 	.word	0x20070a40
   81064:	0008020d 	.word	0x0008020d
   81068:	00080ef1 	.word	0x00080ef1

0008106c <UnityBegin>:

//-----------------------------------------------
void UnityBegin(const char* filename)
{
    Unity.TestFile = filename;
   8106c:	4b05      	ldr	r3, [pc, #20]	; (81084 <UnityBegin+0x18>)
   8106e:	6018      	str	r0, [r3, #0]
    Unity.CurrentTestName = NULL;
   81070:	2200      	movs	r2, #0
   81072:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
   81074:	609a      	str	r2, [r3, #8]
    Unity.NumberOfTests = 0;
   81076:	60da      	str	r2, [r3, #12]
    Unity.TestFailures = 0;
   81078:	611a      	str	r2, [r3, #16]
    Unity.TestIgnores = 0;
   8107a:	615a      	str	r2, [r3, #20]
    Unity.CurrentTestFailed = 0;
   8107c:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   8107e:	61da      	str	r2, [r3, #28]
   81080:	4770      	bx	lr
   81082:	bf00      	nop
   81084:	20070a20 	.word	0x20070a20

00081088 <UnityEnd>:
    UNITY_OUTPUT_START();
}

//-----------------------------------------------
int UnityEnd(void)
{
   81088:	b570      	push	{r4, r5, r6, lr}
    UNITY_PRINT_EOL;
   8108a:	4b66      	ldr	r3, [pc, #408]	; (81224 <UnityEnd+0x19c>)
   8108c:	6818      	ldr	r0, [r3, #0]
   8108e:	6882      	ldr	r2, [r0, #8]
   81090:	6893      	ldr	r3, [r2, #8]
   81092:	3b01      	subs	r3, #1
   81094:	6093      	str	r3, [r2, #8]
   81096:	2b00      	cmp	r3, #0
   81098:	da19      	bge.n	810ce <UnityEnd+0x46>
   8109a:	6882      	ldr	r2, [r0, #8]
   8109c:	6891      	ldr	r1, [r2, #8]
   8109e:	6993      	ldr	r3, [r2, #24]
   810a0:	4299      	cmp	r1, r3
   810a2:	db10      	blt.n	810c6 <UnityEnd+0x3e>
   810a4:	6813      	ldr	r3, [r2, #0]
   810a6:	220a      	movs	r2, #10
   810a8:	701a      	strb	r2, [r3, #0]
   810aa:	4b5e      	ldr	r3, [pc, #376]	; (81224 <UnityEnd+0x19c>)
   810ac:	6818      	ldr	r0, [r3, #0]
   810ae:	6882      	ldr	r2, [r0, #8]
   810b0:	6813      	ldr	r3, [r2, #0]
   810b2:	7819      	ldrb	r1, [r3, #0]
   810b4:	290a      	cmp	r1, #10
   810b6:	d002      	beq.n	810be <UnityEnd+0x36>
   810b8:	3301      	adds	r3, #1
   810ba:	6013      	str	r3, [r2, #0]
   810bc:	e011      	b.n	810e2 <UnityEnd+0x5a>
   810be:	210a      	movs	r1, #10
   810c0:	4b59      	ldr	r3, [pc, #356]	; (81228 <UnityEnd+0x1a0>)
   810c2:	4798      	blx	r3
   810c4:	e00d      	b.n	810e2 <UnityEnd+0x5a>
   810c6:	210a      	movs	r1, #10
   810c8:	4b57      	ldr	r3, [pc, #348]	; (81228 <UnityEnd+0x1a0>)
   810ca:	4798      	blx	r3
   810cc:	e009      	b.n	810e2 <UnityEnd+0x5a>
   810ce:	6883      	ldr	r3, [r0, #8]
   810d0:	681b      	ldr	r3, [r3, #0]
   810d2:	220a      	movs	r2, #10
   810d4:	701a      	strb	r2, [r3, #0]
   810d6:	4b53      	ldr	r3, [pc, #332]	; (81224 <UnityEnd+0x19c>)
   810d8:	681b      	ldr	r3, [r3, #0]
   810da:	689b      	ldr	r3, [r3, #8]
   810dc:	681a      	ldr	r2, [r3, #0]
   810de:	3201      	adds	r2, #1
   810e0:	601a      	str	r2, [r3, #0]
    UnityPrint(UnityStrBreaker);
   810e2:	4852      	ldr	r0, [pc, #328]	; (8122c <UnityEnd+0x1a4>)
   810e4:	4b52      	ldr	r3, [pc, #328]	; (81230 <UnityEnd+0x1a8>)
   810e6:	4798      	blx	r3
    UNITY_PRINT_EOL;
   810e8:	4b4e      	ldr	r3, [pc, #312]	; (81224 <UnityEnd+0x19c>)
   810ea:	6818      	ldr	r0, [r3, #0]
   810ec:	6882      	ldr	r2, [r0, #8]
   810ee:	6893      	ldr	r3, [r2, #8]
   810f0:	3b01      	subs	r3, #1
   810f2:	6093      	str	r3, [r2, #8]
   810f4:	2b00      	cmp	r3, #0
   810f6:	da19      	bge.n	8112c <UnityEnd+0xa4>
   810f8:	6882      	ldr	r2, [r0, #8]
   810fa:	6891      	ldr	r1, [r2, #8]
   810fc:	6993      	ldr	r3, [r2, #24]
   810fe:	4299      	cmp	r1, r3
   81100:	db10      	blt.n	81124 <UnityEnd+0x9c>
   81102:	6813      	ldr	r3, [r2, #0]
   81104:	220a      	movs	r2, #10
   81106:	701a      	strb	r2, [r3, #0]
   81108:	4b46      	ldr	r3, [pc, #280]	; (81224 <UnityEnd+0x19c>)
   8110a:	6818      	ldr	r0, [r3, #0]
   8110c:	6882      	ldr	r2, [r0, #8]
   8110e:	6813      	ldr	r3, [r2, #0]
   81110:	7819      	ldrb	r1, [r3, #0]
   81112:	290a      	cmp	r1, #10
   81114:	d002      	beq.n	8111c <UnityEnd+0x94>
   81116:	3301      	adds	r3, #1
   81118:	6013      	str	r3, [r2, #0]
   8111a:	e011      	b.n	81140 <UnityEnd+0xb8>
   8111c:	210a      	movs	r1, #10
   8111e:	4b42      	ldr	r3, [pc, #264]	; (81228 <UnityEnd+0x1a0>)
   81120:	4798      	blx	r3
   81122:	e00d      	b.n	81140 <UnityEnd+0xb8>
   81124:	210a      	movs	r1, #10
   81126:	4b40      	ldr	r3, [pc, #256]	; (81228 <UnityEnd+0x1a0>)
   81128:	4798      	blx	r3
   8112a:	e009      	b.n	81140 <UnityEnd+0xb8>
   8112c:	6883      	ldr	r3, [r0, #8]
   8112e:	681b      	ldr	r3, [r3, #0]
   81130:	220a      	movs	r2, #10
   81132:	701a      	strb	r2, [r3, #0]
   81134:	4b3b      	ldr	r3, [pc, #236]	; (81224 <UnityEnd+0x19c>)
   81136:	681b      	ldr	r3, [r3, #0]
   81138:	689b      	ldr	r3, [r3, #8]
   8113a:	681a      	ldr	r2, [r3, #0]
   8113c:	3201      	adds	r2, #1
   8113e:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)(Unity.NumberOfTests));
   81140:	4e3c      	ldr	r6, [pc, #240]	; (81234 <UnityEnd+0x1ac>)
   81142:	68f0      	ldr	r0, [r6, #12]
   81144:	4d3c      	ldr	r5, [pc, #240]	; (81238 <UnityEnd+0x1b0>)
   81146:	47a8      	blx	r5
    UnityPrint(UnityStrResultsTests);
   81148:	483c      	ldr	r0, [pc, #240]	; (8123c <UnityEnd+0x1b4>)
   8114a:	4c39      	ldr	r4, [pc, #228]	; (81230 <UnityEnd+0x1a8>)
   8114c:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestFailures));
   8114e:	6930      	ldr	r0, [r6, #16]
   81150:	47a8      	blx	r5
    UnityPrint(UnityStrResultsFailures);
   81152:	483b      	ldr	r0, [pc, #236]	; (81240 <UnityEnd+0x1b8>)
   81154:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestIgnores));
   81156:	6970      	ldr	r0, [r6, #20]
   81158:	47a8      	blx	r5
    UnityPrint(UnityStrResultsIgnored);
   8115a:	483a      	ldr	r0, [pc, #232]	; (81244 <UnityEnd+0x1bc>)
   8115c:	47a0      	blx	r4
    UNITY_PRINT_EOL;
   8115e:	4b31      	ldr	r3, [pc, #196]	; (81224 <UnityEnd+0x19c>)
   81160:	6818      	ldr	r0, [r3, #0]
   81162:	6882      	ldr	r2, [r0, #8]
   81164:	6893      	ldr	r3, [r2, #8]
   81166:	3b01      	subs	r3, #1
   81168:	6093      	str	r3, [r2, #8]
   8116a:	2b00      	cmp	r3, #0
   8116c:	da19      	bge.n	811a2 <UnityEnd+0x11a>
   8116e:	6882      	ldr	r2, [r0, #8]
   81170:	6891      	ldr	r1, [r2, #8]
   81172:	6993      	ldr	r3, [r2, #24]
   81174:	4299      	cmp	r1, r3
   81176:	db10      	blt.n	8119a <UnityEnd+0x112>
   81178:	6813      	ldr	r3, [r2, #0]
   8117a:	220a      	movs	r2, #10
   8117c:	701a      	strb	r2, [r3, #0]
   8117e:	4b29      	ldr	r3, [pc, #164]	; (81224 <UnityEnd+0x19c>)
   81180:	6818      	ldr	r0, [r3, #0]
   81182:	6882      	ldr	r2, [r0, #8]
   81184:	6813      	ldr	r3, [r2, #0]
   81186:	7819      	ldrb	r1, [r3, #0]
   81188:	290a      	cmp	r1, #10
   8118a:	d002      	beq.n	81192 <UnityEnd+0x10a>
   8118c:	3301      	adds	r3, #1
   8118e:	6013      	str	r3, [r2, #0]
   81190:	e011      	b.n	811b6 <UnityEnd+0x12e>
   81192:	210a      	movs	r1, #10
   81194:	4b24      	ldr	r3, [pc, #144]	; (81228 <UnityEnd+0x1a0>)
   81196:	4798      	blx	r3
   81198:	e00d      	b.n	811b6 <UnityEnd+0x12e>
   8119a:	210a      	movs	r1, #10
   8119c:	4b22      	ldr	r3, [pc, #136]	; (81228 <UnityEnd+0x1a0>)
   8119e:	4798      	blx	r3
   811a0:	e009      	b.n	811b6 <UnityEnd+0x12e>
   811a2:	6883      	ldr	r3, [r0, #8]
   811a4:	681b      	ldr	r3, [r3, #0]
   811a6:	220a      	movs	r2, #10
   811a8:	701a      	strb	r2, [r3, #0]
   811aa:	4b1e      	ldr	r3, [pc, #120]	; (81224 <UnityEnd+0x19c>)
   811ac:	681b      	ldr	r3, [r3, #0]
   811ae:	689b      	ldr	r3, [r3, #8]
   811b0:	681a      	ldr	r2, [r3, #0]
   811b2:	3201      	adds	r2, #1
   811b4:	601a      	str	r2, [r3, #0]
    if (Unity.TestFailures == 0U)
   811b6:	4b1f      	ldr	r3, [pc, #124]	; (81234 <UnityEnd+0x1ac>)
   811b8:	691b      	ldr	r3, [r3, #16]
   811ba:	b913      	cbnz	r3, 811c2 <UnityEnd+0x13a>
    {
        UnityPrintOk();
   811bc:	4b22      	ldr	r3, [pc, #136]	; (81248 <UnityEnd+0x1c0>)
   811be:	4798      	blx	r3
   811c0:	e001      	b.n	811c6 <UnityEnd+0x13e>
    }
    else
    {
        UnityPrintFail();
   811c2:	4b22      	ldr	r3, [pc, #136]	; (8124c <UnityEnd+0x1c4>)
   811c4:	4798      	blx	r3
    }
    UNITY_PRINT_EOL;
   811c6:	4b17      	ldr	r3, [pc, #92]	; (81224 <UnityEnd+0x19c>)
   811c8:	6818      	ldr	r0, [r3, #0]
   811ca:	6882      	ldr	r2, [r0, #8]
   811cc:	6893      	ldr	r3, [r2, #8]
   811ce:	3b01      	subs	r3, #1
   811d0:	6093      	str	r3, [r2, #8]
   811d2:	2b00      	cmp	r3, #0
   811d4:	da19      	bge.n	8120a <UnityEnd+0x182>
   811d6:	6882      	ldr	r2, [r0, #8]
   811d8:	6891      	ldr	r1, [r2, #8]
   811da:	6993      	ldr	r3, [r2, #24]
   811dc:	4299      	cmp	r1, r3
   811de:	db10      	blt.n	81202 <UnityEnd+0x17a>
   811e0:	6813      	ldr	r3, [r2, #0]
   811e2:	220a      	movs	r2, #10
   811e4:	701a      	strb	r2, [r3, #0]
   811e6:	4b0f      	ldr	r3, [pc, #60]	; (81224 <UnityEnd+0x19c>)
   811e8:	6818      	ldr	r0, [r3, #0]
   811ea:	6882      	ldr	r2, [r0, #8]
   811ec:	6813      	ldr	r3, [r2, #0]
   811ee:	7819      	ldrb	r1, [r3, #0]
   811f0:	290a      	cmp	r1, #10
   811f2:	d002      	beq.n	811fa <UnityEnd+0x172>
   811f4:	3301      	adds	r3, #1
   811f6:	6013      	str	r3, [r2, #0]
   811f8:	e011      	b.n	8121e <UnityEnd+0x196>
   811fa:	210a      	movs	r1, #10
   811fc:	4b0a      	ldr	r3, [pc, #40]	; (81228 <UnityEnd+0x1a0>)
   811fe:	4798      	blx	r3
   81200:	e00d      	b.n	8121e <UnityEnd+0x196>
   81202:	210a      	movs	r1, #10
   81204:	4b08      	ldr	r3, [pc, #32]	; (81228 <UnityEnd+0x1a0>)
   81206:	4798      	blx	r3
   81208:	e009      	b.n	8121e <UnityEnd+0x196>
   8120a:	6883      	ldr	r3, [r0, #8]
   8120c:	681b      	ldr	r3, [r3, #0]
   8120e:	220a      	movs	r2, #10
   81210:	701a      	strb	r2, [r3, #0]
   81212:	4b04      	ldr	r3, [pc, #16]	; (81224 <UnityEnd+0x19c>)
   81214:	681b      	ldr	r3, [r3, #0]
   81216:	689b      	ldr	r3, [r3, #8]
   81218:	681a      	ldr	r2, [r3, #0]
   8121a:	3201      	adds	r2, #1
   8121c:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
}
   8121e:	4b05      	ldr	r3, [pc, #20]	; (81234 <UnityEnd+0x1ac>)
   81220:	6918      	ldr	r0, [r3, #16]
   81222:	bd70      	pop	{r4, r5, r6, pc}
   81224:	20070008 	.word	0x20070008
   81228:	00082789 	.word	0x00082789
   8122c:	000844f0 	.word	0x000844f0
   81230:	000809a5 	.word	0x000809a5
   81234:	20070a20 	.word	0x20070a20
   81238:	0008067d 	.word	0x0008067d
   8123c:	00084520 	.word	0x00084520
   81240:	00084508 	.word	0x00084508
   81244:	00084514 	.word	0x00084514
   81248:	00080edd 	.word	0x00080edd
   8124c:	00080ec9 	.word	0x00080ec9

00081250 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   81250:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   81252:	685a      	ldr	r2, [r3, #4]
   81254:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   81256:	6842      	ldr	r2, [r0, #4]
   81258:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8125a:	685a      	ldr	r2, [r3, #4]
   8125c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8125e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   81260:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   81262:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81264:	6803      	ldr	r3, [r0, #0]
   81266:	3301      	adds	r3, #1
   81268:	6003      	str	r3, [r0, #0]
   8126a:	4770      	bx	lr

0008126c <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   8126c:	6843      	ldr	r3, [r0, #4]
   8126e:	6882      	ldr	r2, [r0, #8]
   81270:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   81272:	6883      	ldr	r3, [r0, #8]
   81274:	6842      	ldr	r2, [r0, #4]
   81276:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   81278:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8127a:	685a      	ldr	r2, [r3, #4]
   8127c:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   8127e:	bf04      	itt	eq
   81280:	6882      	ldreq	r2, [r0, #8]
   81282:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   81284:	2200      	movs	r2, #0
   81286:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   81288:	681a      	ldr	r2, [r3, #0]
   8128a:	3a01      	subs	r2, #1
   8128c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   8128e:	6818      	ldr	r0, [r3, #0]
}
   81290:	4770      	bx	lr
   81292:	bf00      	nop

00081294 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   81294:	4b06      	ldr	r3, [pc, #24]	; (812b0 <pxCurrentTCBConst2>)
   81296:	6819      	ldr	r1, [r3, #0]
   81298:	6808      	ldr	r0, [r1, #0]
   8129a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8129e:	f380 8809 	msr	PSP, r0
   812a2:	f04f 0000 	mov.w	r0, #0
   812a6:	f380 8811 	msr	BASEPRI, r0
   812aa:	f04e 0e0d 	orr.w	lr, lr, #13
   812ae:	4770      	bx	lr

000812b0 <pxCurrentTCBConst2>:
   812b0:	20070958 	.word	0x20070958

000812b4 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   812b4:	f3ef 8011 	mrs	r0, BASEPRI
   812b8:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   812bc:	f381 8811 	msr	BASEPRI, r1
   812c0:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   812c2:	2000      	movs	r0, #0

000812c4 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   812c4:	f380 8811 	msr	BASEPRI, r0
   812c8:	4770      	bx	lr
   812ca:	bf00      	nop

000812cc <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   812cc:	f3ef 8009 	mrs	r0, PSP
   812d0:	4b0c      	ldr	r3, [pc, #48]	; (81304 <pxCurrentTCBConst>)
   812d2:	681a      	ldr	r2, [r3, #0]
   812d4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   812d8:	6010      	str	r0, [r2, #0]
   812da:	e92d 4008 	stmdb	sp!, {r3, lr}
   812de:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   812e2:	f380 8811 	msr	BASEPRI, r0
   812e6:	f000 f8b5 	bl	81454 <vTaskSwitchContext>
   812ea:	f04f 0000 	mov.w	r0, #0
   812ee:	f380 8811 	msr	BASEPRI, r0
   812f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   812f6:	6819      	ldr	r1, [r3, #0]
   812f8:	6808      	ldr	r0, [r1, #0]
   812fa:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   812fe:	f380 8809 	msr	PSP, r0
   81302:	4770      	bx	lr

00081304 <pxCurrentTCBConst>:
   81304:	20070958 	.word	0x20070958

00081308 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   81308:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8130a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8130e:	4b05      	ldr	r3, [pc, #20]	; (81324 <SysTick_Handler+0x1c>)
   81310:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   81312:	4b05      	ldr	r3, [pc, #20]	; (81328 <SysTick_Handler+0x20>)
   81314:	4798      	blx	r3
	{
		vTaskIncrementTick();
   81316:	4b05      	ldr	r3, [pc, #20]	; (8132c <SysTick_Handler+0x24>)
   81318:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8131a:	2000      	movs	r0, #0
   8131c:	4b04      	ldr	r3, [pc, #16]	; (81330 <SysTick_Handler+0x28>)
   8131e:	4798      	blx	r3
   81320:	bd08      	pop	{r3, pc}
   81322:	bf00      	nop
   81324:	e000ed04 	.word	0xe000ed04
   81328:	000812b5 	.word	0x000812b5
   8132c:	00081335 	.word	0x00081335
   81330:	000812c5 	.word	0x000812c5

00081334 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81338:	4b3a      	ldr	r3, [pc, #232]	; (81424 <vTaskIncrementTick+0xf0>)
   8133a:	681b      	ldr	r3, [r3, #0]
   8133c:	2b00      	cmp	r3, #0
   8133e:	d16b      	bne.n	81418 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   81340:	4b39      	ldr	r3, [pc, #228]	; (81428 <vTaskIncrementTick+0xf4>)
   81342:	681a      	ldr	r2, [r3, #0]
   81344:	3201      	adds	r2, #1
   81346:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   81348:	681b      	ldr	r3, [r3, #0]
   8134a:	bb03      	cbnz	r3, 8138e <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   8134c:	4b37      	ldr	r3, [pc, #220]	; (8142c <vTaskIncrementTick+0xf8>)
   8134e:	681b      	ldr	r3, [r3, #0]
   81350:	681b      	ldr	r3, [r3, #0]
   81352:	b11b      	cbz	r3, 8135c <vTaskIncrementTick+0x28>
   81354:	4b36      	ldr	r3, [pc, #216]	; (81430 <vTaskIncrementTick+0xfc>)
   81356:	4798      	blx	r3
   81358:	bf00      	nop
   8135a:	e7fd      	b.n	81358 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   8135c:	4b33      	ldr	r3, [pc, #204]	; (8142c <vTaskIncrementTick+0xf8>)
   8135e:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81360:	4a34      	ldr	r2, [pc, #208]	; (81434 <vTaskIncrementTick+0x100>)
   81362:	6810      	ldr	r0, [r2, #0]
   81364:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   81366:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81368:	4a33      	ldr	r2, [pc, #204]	; (81438 <vTaskIncrementTick+0x104>)
   8136a:	6811      	ldr	r1, [r2, #0]
   8136c:	3101      	adds	r1, #1
   8136e:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81370:	681b      	ldr	r3, [r3, #0]
   81372:	681b      	ldr	r3, [r3, #0]
   81374:	b923      	cbnz	r3, 81380 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   81376:	f04f 32ff 	mov.w	r2, #4294967295
   8137a:	4b30      	ldr	r3, [pc, #192]	; (8143c <vTaskIncrementTick+0x108>)
   8137c:	601a      	str	r2, [r3, #0]
   8137e:	e006      	b.n	8138e <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81380:	4b2a      	ldr	r3, [pc, #168]	; (8142c <vTaskIncrementTick+0xf8>)
   81382:	681b      	ldr	r3, [r3, #0]
   81384:	68db      	ldr	r3, [r3, #12]
   81386:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81388:	685a      	ldr	r2, [r3, #4]
   8138a:	4b2c      	ldr	r3, [pc, #176]	; (8143c <vTaskIncrementTick+0x108>)
   8138c:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   8138e:	4b26      	ldr	r3, [pc, #152]	; (81428 <vTaskIncrementTick+0xf4>)
   81390:	681a      	ldr	r2, [r3, #0]
   81392:	4b2a      	ldr	r3, [pc, #168]	; (8143c <vTaskIncrementTick+0x108>)
   81394:	681b      	ldr	r3, [r3, #0]
   81396:	429a      	cmp	r2, r3
   81398:	d342      	bcc.n	81420 <vTaskIncrementTick+0xec>
   8139a:	4b24      	ldr	r3, [pc, #144]	; (8142c <vTaskIncrementTick+0xf8>)
   8139c:	681b      	ldr	r3, [r3, #0]
   8139e:	681b      	ldr	r3, [r3, #0]
   813a0:	b14b      	cbz	r3, 813b6 <vTaskIncrementTick+0x82>
   813a2:	4b22      	ldr	r3, [pc, #136]	; (8142c <vTaskIncrementTick+0xf8>)
   813a4:	681b      	ldr	r3, [r3, #0]
   813a6:	68db      	ldr	r3, [r3, #12]
   813a8:	68dc      	ldr	r4, [r3, #12]
   813aa:	6863      	ldr	r3, [r4, #4]
   813ac:	4a1e      	ldr	r2, [pc, #120]	; (81428 <vTaskIncrementTick+0xf4>)
   813ae:	6812      	ldr	r2, [r2, #0]
   813b0:	4293      	cmp	r3, r2
   813b2:	d913      	bls.n	813dc <vTaskIncrementTick+0xa8>
   813b4:	e00e      	b.n	813d4 <vTaskIncrementTick+0xa0>
   813b6:	f04f 32ff 	mov.w	r2, #4294967295
   813ba:	4b20      	ldr	r3, [pc, #128]	; (8143c <vTaskIncrementTick+0x108>)
   813bc:	601a      	str	r2, [r3, #0]
   813be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   813c2:	4b1a      	ldr	r3, [pc, #104]	; (8142c <vTaskIncrementTick+0xf8>)
   813c4:	681b      	ldr	r3, [r3, #0]
   813c6:	68db      	ldr	r3, [r3, #12]
   813c8:	68dc      	ldr	r4, [r3, #12]
   813ca:	6863      	ldr	r3, [r4, #4]
   813cc:	4a16      	ldr	r2, [pc, #88]	; (81428 <vTaskIncrementTick+0xf4>)
   813ce:	6812      	ldr	r2, [r2, #0]
   813d0:	4293      	cmp	r3, r2
   813d2:	d907      	bls.n	813e4 <vTaskIncrementTick+0xb0>
   813d4:	4a19      	ldr	r2, [pc, #100]	; (8143c <vTaskIncrementTick+0x108>)
   813d6:	6013      	str	r3, [r2, #0]
   813d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   813dc:	4e18      	ldr	r6, [pc, #96]	; (81440 <vTaskIncrementTick+0x10c>)
   813de:	4f19      	ldr	r7, [pc, #100]	; (81444 <vTaskIncrementTick+0x110>)
   813e0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 81450 <vTaskIncrementTick+0x11c>
   813e4:	1d25      	adds	r5, r4, #4
   813e6:	4628      	mov	r0, r5
   813e8:	47b0      	blx	r6
   813ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   813ec:	b113      	cbz	r3, 813f4 <vTaskIncrementTick+0xc0>
   813ee:	f104 0018 	add.w	r0, r4, #24
   813f2:	47b0      	blx	r6
   813f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   813f6:	683a      	ldr	r2, [r7, #0]
   813f8:	4293      	cmp	r3, r2
   813fa:	bf88      	it	hi
   813fc:	603b      	strhi	r3, [r7, #0]
   813fe:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   81402:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   81406:	4629      	mov	r1, r5
   81408:	4b0f      	ldr	r3, [pc, #60]	; (81448 <vTaskIncrementTick+0x114>)
   8140a:	4798      	blx	r3
   8140c:	4b07      	ldr	r3, [pc, #28]	; (8142c <vTaskIncrementTick+0xf8>)
   8140e:	681b      	ldr	r3, [r3, #0]
   81410:	681b      	ldr	r3, [r3, #0]
   81412:	2b00      	cmp	r3, #0
   81414:	d1d5      	bne.n	813c2 <vTaskIncrementTick+0x8e>
   81416:	e7ce      	b.n	813b6 <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
   81418:	4b0c      	ldr	r3, [pc, #48]	; (8144c <vTaskIncrementTick+0x118>)
   8141a:	681a      	ldr	r2, [r3, #0]
   8141c:	3201      	adds	r2, #1
   8141e:	601a      	str	r2, [r3, #0]
   81420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81424:	2007095c 	.word	0x2007095c
   81428:	20070960 	.word	0x20070960
   8142c:	200708e8 	.word	0x200708e8
   81430:	000812b5 	.word	0x000812b5
   81434:	20070964 	.word	0x20070964
   81438:	20070954 	.word	0x20070954
   8143c:	20070000 	.word	0x20070000
   81440:	0008126d 	.word	0x0008126d
   81444:	200708ec 	.word	0x200708ec
   81448:	00081251 	.word	0x00081251
   8144c:	200708e4 	.word	0x200708e4
   81450:	200708f0 	.word	0x200708f0

00081454 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81454:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81456:	4b1d      	ldr	r3, [pc, #116]	; (814cc <vTaskSwitchContext+0x78>)
   81458:	681b      	ldr	r3, [r3, #0]
   8145a:	b95b      	cbnz	r3, 81474 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   8145c:	4b1c      	ldr	r3, [pc, #112]	; (814d0 <vTaskSwitchContext+0x7c>)
   8145e:	681b      	ldr	r3, [r3, #0]
   81460:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81464:	009b      	lsls	r3, r3, #2
   81466:	4a1b      	ldr	r2, [pc, #108]	; (814d4 <vTaskSwitchContext+0x80>)
   81468:	58d3      	ldr	r3, [r2, r3]
   8146a:	b9cb      	cbnz	r3, 814a0 <vTaskSwitchContext+0x4c>
   8146c:	4b18      	ldr	r3, [pc, #96]	; (814d0 <vTaskSwitchContext+0x7c>)
   8146e:	681b      	ldr	r3, [r3, #0]
   81470:	b953      	cbnz	r3, 81488 <vTaskSwitchContext+0x34>
   81472:	e005      	b.n	81480 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   81474:	2201      	movs	r2, #1
   81476:	4b18      	ldr	r3, [pc, #96]	; (814d8 <vTaskSwitchContext+0x84>)
   81478:	601a      	str	r2, [r3, #0]
   8147a:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   8147c:	681a      	ldr	r2, [r3, #0]
   8147e:	b92a      	cbnz	r2, 8148c <vTaskSwitchContext+0x38>
   81480:	4b16      	ldr	r3, [pc, #88]	; (814dc <vTaskSwitchContext+0x88>)
   81482:	4798      	blx	r3
   81484:	bf00      	nop
   81486:	e7fd      	b.n	81484 <vTaskSwitchContext+0x30>
   81488:	4b11      	ldr	r3, [pc, #68]	; (814d0 <vTaskSwitchContext+0x7c>)
   8148a:	4912      	ldr	r1, [pc, #72]	; (814d4 <vTaskSwitchContext+0x80>)
   8148c:	681a      	ldr	r2, [r3, #0]
   8148e:	3a01      	subs	r2, #1
   81490:	601a      	str	r2, [r3, #0]
   81492:	681a      	ldr	r2, [r3, #0]
   81494:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81498:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   8149c:	2a00      	cmp	r2, #0
   8149e:	d0ed      	beq.n	8147c <vTaskSwitchContext+0x28>
   814a0:	4b0b      	ldr	r3, [pc, #44]	; (814d0 <vTaskSwitchContext+0x7c>)
   814a2:	681b      	ldr	r3, [r3, #0]
   814a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   814a8:	4a0a      	ldr	r2, [pc, #40]	; (814d4 <vTaskSwitchContext+0x80>)
   814aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   814ae:	685a      	ldr	r2, [r3, #4]
   814b0:	6852      	ldr	r2, [r2, #4]
   814b2:	605a      	str	r2, [r3, #4]
   814b4:	f103 0108 	add.w	r1, r3, #8
   814b8:	428a      	cmp	r2, r1
   814ba:	bf04      	itt	eq
   814bc:	6852      	ldreq	r2, [r2, #4]
   814be:	605a      	streq	r2, [r3, #4]
   814c0:	685b      	ldr	r3, [r3, #4]
   814c2:	68da      	ldr	r2, [r3, #12]
   814c4:	4b06      	ldr	r3, [pc, #24]	; (814e0 <vTaskSwitchContext+0x8c>)
   814c6:	601a      	str	r2, [r3, #0]
   814c8:	bd08      	pop	{r3, pc}
   814ca:	bf00      	nop
   814cc:	2007095c 	.word	0x2007095c
   814d0:	200708ec 	.word	0x200708ec
   814d4:	200708f0 	.word	0x200708f0
   814d8:	20070968 	.word	0x20070968
   814dc:	000812b5 	.word	0x000812b5
   814e0:	20070958 	.word	0x20070958

000814e4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   814e4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   814e6:	480e      	ldr	r0, [pc, #56]	; (81520 <sysclk_init+0x3c>)
   814e8:	4b0e      	ldr	r3, [pc, #56]	; (81524 <sysclk_init+0x40>)
   814ea:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   814ec:	2000      	movs	r0, #0
   814ee:	213e      	movs	r1, #62	; 0x3e
   814f0:	4b0d      	ldr	r3, [pc, #52]	; (81528 <sysclk_init+0x44>)
   814f2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   814f4:	4c0d      	ldr	r4, [pc, #52]	; (8152c <sysclk_init+0x48>)
   814f6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   814f8:	2800      	cmp	r0, #0
   814fa:	d0fc      	beq.n	814f6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   814fc:	4b0c      	ldr	r3, [pc, #48]	; (81530 <sysclk_init+0x4c>)
   814fe:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81500:	4a0c      	ldr	r2, [pc, #48]	; (81534 <sysclk_init+0x50>)
   81502:	4b0d      	ldr	r3, [pc, #52]	; (81538 <sysclk_init+0x54>)
   81504:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81506:	4c0d      	ldr	r4, [pc, #52]	; (8153c <sysclk_init+0x58>)
   81508:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8150a:	2800      	cmp	r0, #0
   8150c:	d0fc      	beq.n	81508 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8150e:	2010      	movs	r0, #16
   81510:	4b0b      	ldr	r3, [pc, #44]	; (81540 <sysclk_init+0x5c>)
   81512:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81514:	4b0b      	ldr	r3, [pc, #44]	; (81544 <sysclk_init+0x60>)
   81516:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81518:	4801      	ldr	r0, [pc, #4]	; (81520 <sysclk_init+0x3c>)
   8151a:	4b02      	ldr	r3, [pc, #8]	; (81524 <sysclk_init+0x40>)
   8151c:	4798      	blx	r3
   8151e:	bd10      	pop	{r4, pc}
   81520:	0501bd00 	.word	0x0501bd00
   81524:	00081b99 	.word	0x00081b99
   81528:	000818ed 	.word	0x000818ed
   8152c:	00081941 	.word	0x00081941
   81530:	00081951 	.word	0x00081951
   81534:	200d3f01 	.word	0x200d3f01
   81538:	400e0600 	.word	0x400e0600
   8153c:	00081961 	.word	0x00081961
   81540:	00081889 	.word	0x00081889
   81544:	00081a7d 	.word	0x00081a7d

00081548 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81548:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8154a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8154e:	4b17      	ldr	r3, [pc, #92]	; (815ac <board_init+0x64>)
   81550:	605a      	str	r2, [r3, #4]
   81552:	200b      	movs	r0, #11
   81554:	4c16      	ldr	r4, [pc, #88]	; (815b0 <board_init+0x68>)
   81556:	47a0      	blx	r4
   81558:	200c      	movs	r0, #12
   8155a:	47a0      	blx	r4
   8155c:	200d      	movs	r0, #13
   8155e:	47a0      	blx	r4
   81560:	200e      	movs	r0, #14
   81562:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81564:	203b      	movs	r0, #59	; 0x3b
   81566:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8156a:	4c12      	ldr	r4, [pc, #72]	; (815b4 <board_init+0x6c>)
   8156c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8156e:	2055      	movs	r0, #85	; 0x55
   81570:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81574:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81576:	2056      	movs	r0, #86	; 0x56
   81578:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8157c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8157e:	2068      	movs	r0, #104	; 0x68
   81580:	490d      	ldr	r1, [pc, #52]	; (815b8 <board_init+0x70>)
   81582:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81584:	205c      	movs	r0, #92	; 0x5c
   81586:	490d      	ldr	r1, [pc, #52]	; (815bc <board_init+0x74>)
   81588:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8158a:	480d      	ldr	r0, [pc, #52]	; (815c0 <board_init+0x78>)
   8158c:	f44f 7140 	mov.w	r1, #768	; 0x300
   81590:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81594:	4b0b      	ldr	r3, [pc, #44]	; (815c4 <board_init+0x7c>)
   81596:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81598:	202b      	movs	r0, #43	; 0x2b
   8159a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8159e:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   815a0:	202a      	movs	r0, #42	; 0x2a
   815a2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   815a6:	47a0      	blx	r4
   815a8:	bd10      	pop	{r4, pc}
   815aa:	bf00      	nop
   815ac:	400e1a50 	.word	0x400e1a50
   815b0:	00081971 	.word	0x00081971
   815b4:	0008166d 	.word	0x0008166d
   815b8:	28000079 	.word	0x28000079
   815bc:	28000001 	.word	0x28000001
   815c0:	400e0e00 	.word	0x400e0e00
   815c4:	00081741 	.word	0x00081741

000815c8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   815c8:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   815ca:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   815ce:	d016      	beq.n	815fe <pio_set_peripheral+0x36>
   815d0:	d804      	bhi.n	815dc <pio_set_peripheral+0x14>
   815d2:	b1c1      	cbz	r1, 81606 <pio_set_peripheral+0x3e>
   815d4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   815d8:	d00a      	beq.n	815f0 <pio_set_peripheral+0x28>
   815da:	e013      	b.n	81604 <pio_set_peripheral+0x3c>
   815dc:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   815e0:	d011      	beq.n	81606 <pio_set_peripheral+0x3e>
   815e2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   815e6:	d00e      	beq.n	81606 <pio_set_peripheral+0x3e>
   815e8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   815ec:	d10a      	bne.n	81604 <pio_set_peripheral+0x3c>
   815ee:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   815f0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   815f2:	6f01      	ldr	r1, [r0, #112]	; 0x70
   815f4:	400b      	ands	r3, r1
   815f6:	ea23 0302 	bic.w	r3, r3, r2
   815fa:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   815fc:	e002      	b.n	81604 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   815fe:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81600:	4313      	orrs	r3, r2
   81602:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81604:	6042      	str	r2, [r0, #4]
   81606:	4770      	bx	lr

00081608 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81608:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8160a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8160e:	bf14      	ite	ne
   81610:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81612:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81614:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81618:	bf14      	ite	ne
   8161a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8161c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8161e:	f012 0f02 	tst.w	r2, #2
   81622:	d002      	beq.n	8162a <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   81624:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81628:	e004      	b.n	81634 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8162a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8162e:	bf18      	it	ne
   81630:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81634:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81636:	6001      	str	r1, [r0, #0]
   81638:	4770      	bx	lr
   8163a:	bf00      	nop

0008163c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8163c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8163e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81640:	9c01      	ldr	r4, [sp, #4]
   81642:	b10c      	cbz	r4, 81648 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   81644:	6641      	str	r1, [r0, #100]	; 0x64
   81646:	e000      	b.n	8164a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81648:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8164a:	b10b      	cbz	r3, 81650 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   8164c:	6501      	str	r1, [r0, #80]	; 0x50
   8164e:	e000      	b.n	81652 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   81650:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81652:	b10a      	cbz	r2, 81658 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   81654:	6301      	str	r1, [r0, #48]	; 0x30
   81656:	e000      	b.n	8165a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81658:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8165a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8165c:	6001      	str	r1, [r0, #0]
}
   8165e:	f85d 4b04 	ldr.w	r4, [sp], #4
   81662:	4770      	bx	lr

00081664 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81664:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81666:	4770      	bx	lr

00081668 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81668:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8166a:	4770      	bx	lr

0008166c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8166c:	b570      	push	{r4, r5, r6, lr}
   8166e:	b082      	sub	sp, #8
   81670:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81672:	0944      	lsrs	r4, r0, #5
   81674:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   81678:	f204 7407 	addw	r4, r4, #1799	; 0x707
   8167c:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8167e:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   81682:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81686:	d030      	beq.n	816ea <pio_configure_pin+0x7e>
   81688:	d806      	bhi.n	81698 <pio_configure_pin+0x2c>
   8168a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8168e:	d00a      	beq.n	816a6 <pio_configure_pin+0x3a>
   81690:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81694:	d018      	beq.n	816c8 <pio_configure_pin+0x5c>
   81696:	e049      	b.n	8172c <pio_configure_pin+0xc0>
   81698:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   8169c:	d030      	beq.n	81700 <pio_configure_pin+0x94>
   8169e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   816a2:	d02d      	beq.n	81700 <pio_configure_pin+0x94>
   816a4:	e042      	b.n	8172c <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   816a6:	f000 001f 	and.w	r0, r0, #31
   816aa:	2401      	movs	r4, #1
   816ac:	4084      	lsls	r4, r0
   816ae:	4630      	mov	r0, r6
   816b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   816b4:	4622      	mov	r2, r4
   816b6:	4b1f      	ldr	r3, [pc, #124]	; (81734 <pio_configure_pin+0xc8>)
   816b8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   816ba:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   816be:	bf14      	ite	ne
   816c0:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   816c2:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   816c4:	2001      	movs	r0, #1
   816c6:	e032      	b.n	8172e <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   816c8:	f000 001f 	and.w	r0, r0, #31
   816cc:	2401      	movs	r4, #1
   816ce:	4084      	lsls	r4, r0
   816d0:	4630      	mov	r0, r6
   816d2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   816d6:	4622      	mov	r2, r4
   816d8:	4b16      	ldr	r3, [pc, #88]	; (81734 <pio_configure_pin+0xc8>)
   816da:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   816dc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   816e0:	bf14      	ite	ne
   816e2:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   816e4:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   816e6:	2001      	movs	r0, #1
   816e8:	e021      	b.n	8172e <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   816ea:	f000 011f 	and.w	r1, r0, #31
   816ee:	2401      	movs	r4, #1
   816f0:	4630      	mov	r0, r6
   816f2:	fa04 f101 	lsl.w	r1, r4, r1
   816f6:	462a      	mov	r2, r5
   816f8:	4b0f      	ldr	r3, [pc, #60]	; (81738 <pio_configure_pin+0xcc>)
   816fa:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   816fc:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   816fe:	e016      	b.n	8172e <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81700:	f000 011f 	and.w	r1, r0, #31
   81704:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81706:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8170a:	ea05 0304 	and.w	r3, r5, r4
   8170e:	9300      	str	r3, [sp, #0]
   81710:	4630      	mov	r0, r6
   81712:	fa04 f101 	lsl.w	r1, r4, r1
   81716:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8171a:	bf14      	ite	ne
   8171c:	2200      	movne	r2, #0
   8171e:	2201      	moveq	r2, #1
   81720:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81724:	4d05      	ldr	r5, [pc, #20]	; (8173c <pio_configure_pin+0xd0>)
   81726:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   81728:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8172a:	e000      	b.n	8172e <pio_configure_pin+0xc2>

	default:
		return 0;
   8172c:	2000      	movs	r0, #0
	}

	return 1;
}
   8172e:	b002      	add	sp, #8
   81730:	bd70      	pop	{r4, r5, r6, pc}
   81732:	bf00      	nop
   81734:	000815c9 	.word	0x000815c9
   81738:	00081609 	.word	0x00081609
   8173c:	0008163d 	.word	0x0008163d

00081740 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   81740:	b5f0      	push	{r4, r5, r6, r7, lr}
   81742:	b083      	sub	sp, #12
   81744:	4607      	mov	r7, r0
   81746:	460e      	mov	r6, r1
   81748:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8174a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8174e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81752:	d026      	beq.n	817a2 <pio_configure_pin_group+0x62>
   81754:	d806      	bhi.n	81764 <pio_configure_pin_group+0x24>
   81756:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8175a:	d00a      	beq.n	81772 <pio_configure_pin_group+0x32>
   8175c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81760:	d013      	beq.n	8178a <pio_configure_pin_group+0x4a>
   81762:	e034      	b.n	817ce <pio_configure_pin_group+0x8e>
   81764:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81768:	d01f      	beq.n	817aa <pio_configure_pin_group+0x6a>
   8176a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8176e:	d01c      	beq.n	817aa <pio_configure_pin_group+0x6a>
   81770:	e02d      	b.n	817ce <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81772:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81776:	4632      	mov	r2, r6
   81778:	4b16      	ldr	r3, [pc, #88]	; (817d4 <pio_configure_pin_group+0x94>)
   8177a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8177c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81780:	bf14      	ite	ne
   81782:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81784:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81786:	2001      	movs	r0, #1
   81788:	e022      	b.n	817d0 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8178a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8178e:	4632      	mov	r2, r6
   81790:	4b10      	ldr	r3, [pc, #64]	; (817d4 <pio_configure_pin_group+0x94>)
   81792:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81794:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81798:	bf14      	ite	ne
   8179a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8179c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8179e:	2001      	movs	r0, #1
   817a0:	e016      	b.n	817d0 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   817a2:	4b0d      	ldr	r3, [pc, #52]	; (817d8 <pio_configure_pin_group+0x98>)
   817a4:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   817a6:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   817a8:	e012      	b.n	817d0 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   817aa:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   817ae:	f005 0301 	and.w	r3, r5, #1
   817b2:	9300      	str	r3, [sp, #0]
   817b4:	4638      	mov	r0, r7
   817b6:	4631      	mov	r1, r6
   817b8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   817bc:	bf14      	ite	ne
   817be:	2200      	movne	r2, #0
   817c0:	2201      	moveq	r2, #1
   817c2:	f3c5 0380 	ubfx	r3, r5, #2, #1
   817c6:	4c05      	ldr	r4, [pc, #20]	; (817dc <pio_configure_pin_group+0x9c>)
   817c8:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   817ca:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   817cc:	e000      	b.n	817d0 <pio_configure_pin_group+0x90>

	default:
		return 0;
   817ce:	2000      	movs	r0, #0
	}

	return 1;
}
   817d0:	b003      	add	sp, #12
   817d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   817d4:	000815c9 	.word	0x000815c9
   817d8:	00081609 	.word	0x00081609
   817dc:	0008163d 	.word	0x0008163d

000817e0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   817e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   817e4:	4604      	mov	r4, r0
   817e6:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   817e8:	4b10      	ldr	r3, [pc, #64]	; (8182c <pio_handler_process+0x4c>)
   817ea:	4798      	blx	r3
   817ec:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   817ee:	4620      	mov	r0, r4
   817f0:	4b0f      	ldr	r3, [pc, #60]	; (81830 <pio_handler_process+0x50>)
   817f2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   817f4:	4005      	ands	r5, r0
   817f6:	d017      	beq.n	81828 <pio_handler_process+0x48>
   817f8:	4f0e      	ldr	r7, [pc, #56]	; (81834 <pio_handler_process+0x54>)
   817fa:	f107 040c 	add.w	r4, r7, #12
   817fe:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81800:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   81804:	42b3      	cmp	r3, r6
   81806:	d10a      	bne.n	8181e <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81808:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8180c:	4229      	tst	r1, r5
   8180e:	d006      	beq.n	8181e <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81810:	6823      	ldr	r3, [r4, #0]
   81812:	4630      	mov	r0, r6
   81814:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81816:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8181a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8181e:	42bc      	cmp	r4, r7
   81820:	d002      	beq.n	81828 <pio_handler_process+0x48>
   81822:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   81824:	2d00      	cmp	r5, #0
   81826:	d1eb      	bne.n	81800 <pio_handler_process+0x20>
   81828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8182c:	00081665 	.word	0x00081665
   81830:	00081669 	.word	0x00081669
   81834:	2007096c 	.word	0x2007096c

00081838 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81838:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8183a:	4802      	ldr	r0, [pc, #8]	; (81844 <PIOA_Handler+0xc>)
   8183c:	210b      	movs	r1, #11
   8183e:	4b02      	ldr	r3, [pc, #8]	; (81848 <PIOA_Handler+0x10>)
   81840:	4798      	blx	r3
   81842:	bd08      	pop	{r3, pc}
   81844:	400e0e00 	.word	0x400e0e00
   81848:	000817e1 	.word	0x000817e1

0008184c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8184c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8184e:	4802      	ldr	r0, [pc, #8]	; (81858 <PIOB_Handler+0xc>)
   81850:	210c      	movs	r1, #12
   81852:	4b02      	ldr	r3, [pc, #8]	; (8185c <PIOB_Handler+0x10>)
   81854:	4798      	blx	r3
   81856:	bd08      	pop	{r3, pc}
   81858:	400e1000 	.word	0x400e1000
   8185c:	000817e1 	.word	0x000817e1

00081860 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81860:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81862:	4802      	ldr	r0, [pc, #8]	; (8186c <PIOC_Handler+0xc>)
   81864:	210d      	movs	r1, #13
   81866:	4b02      	ldr	r3, [pc, #8]	; (81870 <PIOC_Handler+0x10>)
   81868:	4798      	blx	r3
   8186a:	bd08      	pop	{r3, pc}
   8186c:	400e1200 	.word	0x400e1200
   81870:	000817e1 	.word	0x000817e1

00081874 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81874:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81876:	4802      	ldr	r0, [pc, #8]	; (81880 <PIOD_Handler+0xc>)
   81878:	210e      	movs	r1, #14
   8187a:	4b02      	ldr	r3, [pc, #8]	; (81884 <PIOD_Handler+0x10>)
   8187c:	4798      	blx	r3
   8187e:	bd08      	pop	{r3, pc}
   81880:	400e1400 	.word	0x400e1400
   81884:	000817e1 	.word	0x000817e1

00081888 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81888:	4b17      	ldr	r3, [pc, #92]	; (818e8 <pmc_switch_mck_to_pllack+0x60>)
   8188a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8188c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   81890:	4310      	orrs	r0, r2
   81892:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81896:	f013 0f08 	tst.w	r3, #8
   8189a:	d109      	bne.n	818b0 <pmc_switch_mck_to_pllack+0x28>
   8189c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   818a0:	4911      	ldr	r1, [pc, #68]	; (818e8 <pmc_switch_mck_to_pllack+0x60>)
   818a2:	e001      	b.n	818a8 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   818a4:	3b01      	subs	r3, #1
   818a6:	d019      	beq.n	818dc <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   818a8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   818aa:	f012 0f08 	tst.w	r2, #8
   818ae:	d0f9      	beq.n	818a4 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   818b0:	4b0d      	ldr	r3, [pc, #52]	; (818e8 <pmc_switch_mck_to_pllack+0x60>)
   818b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   818b4:	f022 0203 	bic.w	r2, r2, #3
   818b8:	f042 0202 	orr.w	r2, r2, #2
   818bc:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   818be:	6e98      	ldr	r0, [r3, #104]	; 0x68
   818c0:	f010 0008 	ands.w	r0, r0, #8
   818c4:	d10c      	bne.n	818e0 <pmc_switch_mck_to_pllack+0x58>
   818c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   818ca:	4907      	ldr	r1, [pc, #28]	; (818e8 <pmc_switch_mck_to_pllack+0x60>)
   818cc:	e001      	b.n	818d2 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   818ce:	3b01      	subs	r3, #1
   818d0:	d008      	beq.n	818e4 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   818d2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   818d4:	f012 0f08 	tst.w	r2, #8
   818d8:	d0f9      	beq.n	818ce <pmc_switch_mck_to_pllack+0x46>
   818da:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   818dc:	2001      	movs	r0, #1
   818de:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   818e0:	2000      	movs	r0, #0
   818e2:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   818e4:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   818e6:	4770      	bx	lr
   818e8:	400e0600 	.word	0x400e0600

000818ec <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   818ec:	b138      	cbz	r0, 818fe <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   818ee:	4911      	ldr	r1, [pc, #68]	; (81934 <pmc_switch_mainck_to_xtal+0x48>)
   818f0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   818f2:	4a11      	ldr	r2, [pc, #68]	; (81938 <pmc_switch_mainck_to_xtal+0x4c>)
   818f4:	401a      	ands	r2, r3
   818f6:	4b11      	ldr	r3, [pc, #68]	; (8193c <pmc_switch_mainck_to_xtal+0x50>)
   818f8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   818fa:	620b      	str	r3, [r1, #32]
   818fc:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   818fe:	4a0d      	ldr	r2, [pc, #52]	; (81934 <pmc_switch_mainck_to_xtal+0x48>)
   81900:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81902:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81906:	f023 0303 	bic.w	r3, r3, #3
   8190a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8190e:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81912:	0209      	lsls	r1, r1, #8
   81914:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81916:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81918:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8191a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8191c:	f013 0f01 	tst.w	r3, #1
   81920:	d0fb      	beq.n	8191a <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81922:	4a04      	ldr	r2, [pc, #16]	; (81934 <pmc_switch_mainck_to_xtal+0x48>)
   81924:	6a13      	ldr	r3, [r2, #32]
   81926:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8192a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8192e:	6213      	str	r3, [r2, #32]
   81930:	4770      	bx	lr
   81932:	bf00      	nop
   81934:	400e0600 	.word	0x400e0600
   81938:	fec8fffc 	.word	0xfec8fffc
   8193c:	01370002 	.word	0x01370002

00081940 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81940:	4b02      	ldr	r3, [pc, #8]	; (8194c <pmc_osc_is_ready_mainck+0xc>)
   81942:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81944:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81948:	4770      	bx	lr
   8194a:	bf00      	nop
   8194c:	400e0600 	.word	0x400e0600

00081950 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81950:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81954:	4b01      	ldr	r3, [pc, #4]	; (8195c <pmc_disable_pllack+0xc>)
   81956:	629a      	str	r2, [r3, #40]	; 0x28
   81958:	4770      	bx	lr
   8195a:	bf00      	nop
   8195c:	400e0600 	.word	0x400e0600

00081960 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81960:	4b02      	ldr	r3, [pc, #8]	; (8196c <pmc_is_locked_pllack+0xc>)
   81962:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81964:	f000 0002 	and.w	r0, r0, #2
   81968:	4770      	bx	lr
   8196a:	bf00      	nop
   8196c:	400e0600 	.word	0x400e0600

00081970 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81970:	282c      	cmp	r0, #44	; 0x2c
   81972:	d820      	bhi.n	819b6 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   81974:	281f      	cmp	r0, #31
   81976:	d80d      	bhi.n	81994 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81978:	4b12      	ldr	r3, [pc, #72]	; (819c4 <pmc_enable_periph_clk+0x54>)
   8197a:	699a      	ldr	r2, [r3, #24]
   8197c:	2301      	movs	r3, #1
   8197e:	4083      	lsls	r3, r0
   81980:	401a      	ands	r2, r3
   81982:	4293      	cmp	r3, r2
   81984:	d019      	beq.n	819ba <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   81986:	2301      	movs	r3, #1
   81988:	fa03 f000 	lsl.w	r0, r3, r0
   8198c:	4b0d      	ldr	r3, [pc, #52]	; (819c4 <pmc_enable_periph_clk+0x54>)
   8198e:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81990:	2000      	movs	r0, #0
   81992:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81994:	4b0b      	ldr	r3, [pc, #44]	; (819c4 <pmc_enable_periph_clk+0x54>)
   81996:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
   8199a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8199c:	2301      	movs	r3, #1
   8199e:	4083      	lsls	r3, r0
   819a0:	401a      	ands	r2, r3
   819a2:	4293      	cmp	r3, r2
   819a4:	d00b      	beq.n	819be <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   819a6:	2301      	movs	r3, #1
   819a8:	fa03 f000 	lsl.w	r0, r3, r0
   819ac:	4b05      	ldr	r3, [pc, #20]	; (819c4 <pmc_enable_periph_clk+0x54>)
   819ae:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   819b2:	2000      	movs	r0, #0
   819b4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   819b6:	2001      	movs	r0, #1
   819b8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   819ba:	2000      	movs	r0, #0
   819bc:	4770      	bx	lr
   819be:	2000      	movs	r0, #0
}
   819c0:	4770      	bx	lr
   819c2:	bf00      	nop
   819c4:	400e0600 	.word	0x400e0600

000819c8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   819c8:	e7fe      	b.n	819c8 <Dummy_Handler>
   819ca:	bf00      	nop

000819cc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   819cc:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   819ce:	4b1e      	ldr	r3, [pc, #120]	; (81a48 <Reset_Handler+0x7c>)
   819d0:	4a1e      	ldr	r2, [pc, #120]	; (81a4c <Reset_Handler+0x80>)
   819d2:	429a      	cmp	r2, r3
   819d4:	d003      	beq.n	819de <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   819d6:	4b1e      	ldr	r3, [pc, #120]	; (81a50 <Reset_Handler+0x84>)
   819d8:	4a1b      	ldr	r2, [pc, #108]	; (81a48 <Reset_Handler+0x7c>)
   819da:	429a      	cmp	r2, r3
   819dc:	d304      	bcc.n	819e8 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   819de:	4b1d      	ldr	r3, [pc, #116]	; (81a54 <Reset_Handler+0x88>)
   819e0:	4a1d      	ldr	r2, [pc, #116]	; (81a58 <Reset_Handler+0x8c>)
   819e2:	429a      	cmp	r2, r3
   819e4:	d30f      	bcc.n	81a06 <Reset_Handler+0x3a>
   819e6:	e01a      	b.n	81a1e <Reset_Handler+0x52>
   819e8:	4b1c      	ldr	r3, [pc, #112]	; (81a5c <Reset_Handler+0x90>)
   819ea:	4c1d      	ldr	r4, [pc, #116]	; (81a60 <Reset_Handler+0x94>)
   819ec:	1ae4      	subs	r4, r4, r3
   819ee:	f024 0403 	bic.w	r4, r4, #3
   819f2:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   819f4:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   819f6:	4814      	ldr	r0, [pc, #80]	; (81a48 <Reset_Handler+0x7c>)
   819f8:	4914      	ldr	r1, [pc, #80]	; (81a4c <Reset_Handler+0x80>)
   819fa:	585a      	ldr	r2, [r3, r1]
   819fc:	501a      	str	r2, [r3, r0]
   819fe:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81a00:	42a3      	cmp	r3, r4
   81a02:	d1fa      	bne.n	819fa <Reset_Handler+0x2e>
   81a04:	e7eb      	b.n	819de <Reset_Handler+0x12>
   81a06:	4b17      	ldr	r3, [pc, #92]	; (81a64 <Reset_Handler+0x98>)
   81a08:	4917      	ldr	r1, [pc, #92]	; (81a68 <Reset_Handler+0x9c>)
   81a0a:	1ac9      	subs	r1, r1, r3
   81a0c:	f021 0103 	bic.w	r1, r1, #3
   81a10:	1d1a      	adds	r2, r3, #4
   81a12:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   81a14:	2200      	movs	r2, #0
   81a16:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81a1a:	428b      	cmp	r3, r1
   81a1c:	d1fb      	bne.n	81a16 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81a1e:	4a13      	ldr	r2, [pc, #76]	; (81a6c <Reset_Handler+0xa0>)
   81a20:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   81a24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81a28:	4911      	ldr	r1, [pc, #68]	; (81a70 <Reset_Handler+0xa4>)
   81a2a:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81a2c:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   81a30:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   81a34:	d203      	bcs.n	81a3e <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81a36:	688a      	ldr	r2, [r1, #8]
   81a38:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81a3c:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81a3e:	4b0d      	ldr	r3, [pc, #52]	; (81a74 <Reset_Handler+0xa8>)
   81a40:	4798      	blx	r3

	/* Branch to main function */
	main();
   81a42:	4b0d      	ldr	r3, [pc, #52]	; (81a78 <Reset_Handler+0xac>)
   81a44:	4798      	blx	r3
   81a46:	e7fe      	b.n	81a46 <Reset_Handler+0x7a>
   81a48:	20070000 	.word	0x20070000
   81a4c:	000845ac 	.word	0x000845ac
   81a50:	200708c8 	.word	0x200708c8
   81a54:	20070aa0 	.word	0x20070aa0
   81a58:	200708c8 	.word	0x200708c8
   81a5c:	20070004 	.word	0x20070004
   81a60:	200708cb 	.word	0x200708cb
   81a64:	200708c4 	.word	0x200708c4
   81a68:	20070a9b 	.word	0x20070a9b
   81a6c:	00080000 	.word	0x00080000
   81a70:	e000ed00 	.word	0xe000ed00
   81a74:	00081ca9 	.word	0x00081ca9
   81a78:	000803ad 	.word	0x000803ad

00081a7c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81a7c:	4b3e      	ldr	r3, [pc, #248]	; (81b78 <SystemCoreClockUpdate+0xfc>)
   81a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81a80:	f003 0303 	and.w	r3, r3, #3
   81a84:	2b03      	cmp	r3, #3
   81a86:	d85f      	bhi.n	81b48 <SystemCoreClockUpdate+0xcc>
   81a88:	e8df f003 	tbb	[pc, r3]
   81a8c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81a90:	4b3a      	ldr	r3, [pc, #232]	; (81b7c <SystemCoreClockUpdate+0x100>)
   81a92:	695b      	ldr	r3, [r3, #20]
   81a94:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81a98:	bf14      	ite	ne
   81a9a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81a9e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81aa2:	4b37      	ldr	r3, [pc, #220]	; (81b80 <SystemCoreClockUpdate+0x104>)
   81aa4:	601a      	str	r2, [r3, #0]
   81aa6:	e04f      	b.n	81b48 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81aa8:	4b33      	ldr	r3, [pc, #204]	; (81b78 <SystemCoreClockUpdate+0xfc>)
   81aaa:	6a1b      	ldr	r3, [r3, #32]
   81aac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81ab0:	d003      	beq.n	81aba <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81ab2:	4a34      	ldr	r2, [pc, #208]	; (81b84 <SystemCoreClockUpdate+0x108>)
   81ab4:	4b32      	ldr	r3, [pc, #200]	; (81b80 <SystemCoreClockUpdate+0x104>)
   81ab6:	601a      	str	r2, [r3, #0]
   81ab8:	e046      	b.n	81b48 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81aba:	4a33      	ldr	r2, [pc, #204]	; (81b88 <SystemCoreClockUpdate+0x10c>)
   81abc:	4b30      	ldr	r3, [pc, #192]	; (81b80 <SystemCoreClockUpdate+0x104>)
   81abe:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81ac0:	4b2d      	ldr	r3, [pc, #180]	; (81b78 <SystemCoreClockUpdate+0xfc>)
   81ac2:	6a1b      	ldr	r3, [r3, #32]
   81ac4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81ac8:	2b10      	cmp	r3, #16
   81aca:	d002      	beq.n	81ad2 <SystemCoreClockUpdate+0x56>
   81acc:	2b20      	cmp	r3, #32
   81ace:	d004      	beq.n	81ada <SystemCoreClockUpdate+0x5e>
   81ad0:	e03a      	b.n	81b48 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81ad2:	4a2e      	ldr	r2, [pc, #184]	; (81b8c <SystemCoreClockUpdate+0x110>)
   81ad4:	4b2a      	ldr	r3, [pc, #168]	; (81b80 <SystemCoreClockUpdate+0x104>)
   81ad6:	601a      	str	r2, [r3, #0]
				break;
   81ad8:	e036      	b.n	81b48 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81ada:	4a2a      	ldr	r2, [pc, #168]	; (81b84 <SystemCoreClockUpdate+0x108>)
   81adc:	4b28      	ldr	r3, [pc, #160]	; (81b80 <SystemCoreClockUpdate+0x104>)
   81ade:	601a      	str	r2, [r3, #0]
				break;
   81ae0:	e032      	b.n	81b48 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81ae2:	4b25      	ldr	r3, [pc, #148]	; (81b78 <SystemCoreClockUpdate+0xfc>)
   81ae4:	6a1b      	ldr	r3, [r3, #32]
   81ae6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81aea:	d003      	beq.n	81af4 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81aec:	4a25      	ldr	r2, [pc, #148]	; (81b84 <SystemCoreClockUpdate+0x108>)
   81aee:	4b24      	ldr	r3, [pc, #144]	; (81b80 <SystemCoreClockUpdate+0x104>)
   81af0:	601a      	str	r2, [r3, #0]
   81af2:	e012      	b.n	81b1a <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81af4:	4a24      	ldr	r2, [pc, #144]	; (81b88 <SystemCoreClockUpdate+0x10c>)
   81af6:	4b22      	ldr	r3, [pc, #136]	; (81b80 <SystemCoreClockUpdate+0x104>)
   81af8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81afa:	4b1f      	ldr	r3, [pc, #124]	; (81b78 <SystemCoreClockUpdate+0xfc>)
   81afc:	6a1b      	ldr	r3, [r3, #32]
   81afe:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81b02:	2b10      	cmp	r3, #16
   81b04:	d002      	beq.n	81b0c <SystemCoreClockUpdate+0x90>
   81b06:	2b20      	cmp	r3, #32
   81b08:	d004      	beq.n	81b14 <SystemCoreClockUpdate+0x98>
   81b0a:	e006      	b.n	81b1a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81b0c:	4a1f      	ldr	r2, [pc, #124]	; (81b8c <SystemCoreClockUpdate+0x110>)
   81b0e:	4b1c      	ldr	r3, [pc, #112]	; (81b80 <SystemCoreClockUpdate+0x104>)
   81b10:	601a      	str	r2, [r3, #0]
				break;
   81b12:	e002      	b.n	81b1a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81b14:	4a1b      	ldr	r2, [pc, #108]	; (81b84 <SystemCoreClockUpdate+0x108>)
   81b16:	4b1a      	ldr	r3, [pc, #104]	; (81b80 <SystemCoreClockUpdate+0x104>)
   81b18:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81b1a:	4b17      	ldr	r3, [pc, #92]	; (81b78 <SystemCoreClockUpdate+0xfc>)
   81b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81b1e:	f003 0303 	and.w	r3, r3, #3
   81b22:	2b02      	cmp	r3, #2
   81b24:	d10d      	bne.n	81b42 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81b26:	4b14      	ldr	r3, [pc, #80]	; (81b78 <SystemCoreClockUpdate+0xfc>)
   81b28:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81b2a:	6a99      	ldr	r1, [r3, #40]	; 0x28
   81b2c:	4b14      	ldr	r3, [pc, #80]	; (81b80 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81b2e:	f3c0 400a 	ubfx	r0, r0, #16, #11
   81b32:	681a      	ldr	r2, [r3, #0]
   81b34:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81b38:	b2c9      	uxtb	r1, r1
   81b3a:	fbb2 f2f1 	udiv	r2, r2, r1
   81b3e:	601a      	str	r2, [r3, #0]
   81b40:	e002      	b.n	81b48 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81b42:	4a13      	ldr	r2, [pc, #76]	; (81b90 <SystemCoreClockUpdate+0x114>)
   81b44:	4b0e      	ldr	r3, [pc, #56]	; (81b80 <SystemCoreClockUpdate+0x104>)
   81b46:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81b48:	4b0b      	ldr	r3, [pc, #44]	; (81b78 <SystemCoreClockUpdate+0xfc>)
   81b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81b4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81b50:	2b70      	cmp	r3, #112	; 0x70
   81b52:	d107      	bne.n	81b64 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   81b54:	4b0a      	ldr	r3, [pc, #40]	; (81b80 <SystemCoreClockUpdate+0x104>)
   81b56:	681a      	ldr	r2, [r3, #0]
   81b58:	490e      	ldr	r1, [pc, #56]	; (81b94 <SystemCoreClockUpdate+0x118>)
   81b5a:	fba1 0202 	umull	r0, r2, r1, r2
   81b5e:	0852      	lsrs	r2, r2, #1
   81b60:	601a      	str	r2, [r3, #0]
   81b62:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81b64:	4b04      	ldr	r3, [pc, #16]	; (81b78 <SystemCoreClockUpdate+0xfc>)
   81b66:	6b19      	ldr	r1, [r3, #48]	; 0x30
   81b68:	4b05      	ldr	r3, [pc, #20]	; (81b80 <SystemCoreClockUpdate+0x104>)
   81b6a:	f3c1 1102 	ubfx	r1, r1, #4, #3
   81b6e:	681a      	ldr	r2, [r3, #0]
   81b70:	40ca      	lsrs	r2, r1
   81b72:	601a      	str	r2, [r3, #0]
   81b74:	4770      	bx	lr
   81b76:	bf00      	nop
   81b78:	400e0600 	.word	0x400e0600
   81b7c:	400e1a10 	.word	0x400e1a10
   81b80:	20070004 	.word	0x20070004
   81b84:	00b71b00 	.word	0x00b71b00
   81b88:	003d0900 	.word	0x003d0900
   81b8c:	007a1200 	.word	0x007a1200
   81b90:	0e4e1c00 	.word	0x0e4e1c00
   81b94:	aaaaaaab 	.word	0xaaaaaaab

00081b98 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   81b98:	4b1b      	ldr	r3, [pc, #108]	; (81c08 <system_init_flash+0x70>)
   81b9a:	4298      	cmp	r0, r3
   81b9c:	d806      	bhi.n	81bac <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   81b9e:	2300      	movs	r3, #0
   81ba0:	4a1a      	ldr	r2, [pc, #104]	; (81c0c <system_init_flash+0x74>)
   81ba2:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   81ba4:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81ba8:	6013      	str	r3, [r2, #0]
   81baa:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   81bac:	4b18      	ldr	r3, [pc, #96]	; (81c10 <system_init_flash+0x78>)
   81bae:	4298      	cmp	r0, r3
   81bb0:	d807      	bhi.n	81bc2 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   81bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
   81bb6:	4a15      	ldr	r2, [pc, #84]	; (81c0c <system_init_flash+0x74>)
   81bb8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   81bba:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81bbe:	6013      	str	r3, [r2, #0]
   81bc0:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   81bc2:	4b14      	ldr	r3, [pc, #80]	; (81c14 <system_init_flash+0x7c>)
   81bc4:	4298      	cmp	r0, r3
   81bc6:	d807      	bhi.n	81bd8 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   81bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
   81bcc:	4a0f      	ldr	r2, [pc, #60]	; (81c0c <system_init_flash+0x74>)
   81bce:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   81bd0:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81bd4:	6013      	str	r3, [r2, #0]
   81bd6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   81bd8:	4b0f      	ldr	r3, [pc, #60]	; (81c18 <system_init_flash+0x80>)
   81bda:	4298      	cmp	r0, r3
   81bdc:	d807      	bhi.n	81bee <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   81bde:	f44f 7340 	mov.w	r3, #768	; 0x300
   81be2:	4a0a      	ldr	r2, [pc, #40]	; (81c0c <system_init_flash+0x74>)
   81be4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   81be6:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81bea:	6013      	str	r3, [r2, #0]
   81bec:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   81bee:	4b0b      	ldr	r3, [pc, #44]	; (81c1c <system_init_flash+0x84>)
   81bf0:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   81bf2:	bf94      	ite	ls
   81bf4:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   81bf8:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
   81bfc:	4a03      	ldr	r2, [pc, #12]	; (81c0c <system_init_flash+0x74>)
   81bfe:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   81c00:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81c04:	6013      	str	r3, [r2, #0]
   81c06:	4770      	bx	lr
   81c08:	0121eabf 	.word	0x0121eabf
   81c0c:	400e0a00 	.word	0x400e0a00
   81c10:	02faf07f 	.word	0x02faf07f
   81c14:	03d08fff 	.word	0x03d08fff
   81c18:	04c4b3ff 	.word	0x04c4b3ff
   81c1c:	055d4a7f 	.word	0x055d4a7f

00081c20 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81c20:	4b09      	ldr	r3, [pc, #36]	; (81c48 <_sbrk+0x28>)
   81c22:	681b      	ldr	r3, [r3, #0]
   81c24:	b913      	cbnz	r3, 81c2c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   81c26:	4a09      	ldr	r2, [pc, #36]	; (81c4c <_sbrk+0x2c>)
   81c28:	4b07      	ldr	r3, [pc, #28]	; (81c48 <_sbrk+0x28>)
   81c2a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   81c2c:	4b06      	ldr	r3, [pc, #24]	; (81c48 <_sbrk+0x28>)
   81c2e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81c30:	181a      	adds	r2, r3, r0
   81c32:	4907      	ldr	r1, [pc, #28]	; (81c50 <_sbrk+0x30>)
   81c34:	4291      	cmp	r1, r2
   81c36:	db04      	blt.n	81c42 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   81c38:	4610      	mov	r0, r2
   81c3a:	4a03      	ldr	r2, [pc, #12]	; (81c48 <_sbrk+0x28>)
   81c3c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81c3e:	4618      	mov	r0, r3
   81c40:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   81c42:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   81c46:	4770      	bx	lr
   81c48:	200709dc 	.word	0x200709dc
   81c4c:	20072aa0 	.word	0x20072aa0
   81c50:	20087ffc 	.word	0x20087ffc

00081c54 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81c54:	f04f 30ff 	mov.w	r0, #4294967295
   81c58:	4770      	bx	lr
   81c5a:	bf00      	nop

00081c5c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   81c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81c60:	604b      	str	r3, [r1, #4]

	return 0;
}
   81c62:	2000      	movs	r0, #0
   81c64:	4770      	bx	lr
   81c66:	bf00      	nop

00081c68 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81c68:	2001      	movs	r0, #1
   81c6a:	4770      	bx	lr

00081c6c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81c6c:	2000      	movs	r0, #0
   81c6e:	4770      	bx	lr

00081c70 <atexit>:
   81c70:	4601      	mov	r1, r0
   81c72:	2000      	movs	r0, #0
   81c74:	4602      	mov	r2, r0
   81c76:	4603      	mov	r3, r0
   81c78:	f000 be32 	b.w	828e0 <__register_exitproc>

00081c7c <__libc_fini_array>:
   81c7c:	b538      	push	{r3, r4, r5, lr}
   81c7e:	4d08      	ldr	r5, [pc, #32]	; (81ca0 <__libc_fini_array+0x24>)
   81c80:	4c08      	ldr	r4, [pc, #32]	; (81ca4 <__libc_fini_array+0x28>)
   81c82:	1b64      	subs	r4, r4, r5
   81c84:	10a4      	asrs	r4, r4, #2
   81c86:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   81c8a:	b124      	cbz	r4, 81c96 <__libc_fini_array+0x1a>
   81c8c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   81c90:	3c01      	subs	r4, #1
   81c92:	4798      	blx	r3
   81c94:	e7f9      	b.n	81c8a <__libc_fini_array+0xe>
   81c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81c9a:	f002 bc7b 	b.w	84594 <_fini>
   81c9e:	bf00      	nop
   81ca0:	000845a0 	.word	0x000845a0
   81ca4:	000845a4 	.word	0x000845a4

00081ca8 <__libc_init_array>:
   81ca8:	b570      	push	{r4, r5, r6, lr}
   81caa:	4b0e      	ldr	r3, [pc, #56]	; (81ce4 <__libc_init_array+0x3c>)
   81cac:	4d0e      	ldr	r5, [pc, #56]	; (81ce8 <__libc_init_array+0x40>)
   81cae:	2400      	movs	r4, #0
   81cb0:	1aed      	subs	r5, r5, r3
   81cb2:	10ad      	asrs	r5, r5, #2
   81cb4:	461e      	mov	r6, r3
   81cb6:	42ac      	cmp	r4, r5
   81cb8:	d004      	beq.n	81cc4 <__libc_init_array+0x1c>
   81cba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   81cbe:	4790      	blx	r2
   81cc0:	3401      	adds	r4, #1
   81cc2:	e7f8      	b.n	81cb6 <__libc_init_array+0xe>
   81cc4:	f002 fc5c 	bl	84580 <_init>
   81cc8:	4d08      	ldr	r5, [pc, #32]	; (81cec <__libc_init_array+0x44>)
   81cca:	4b09      	ldr	r3, [pc, #36]	; (81cf0 <__libc_init_array+0x48>)
   81ccc:	2400      	movs	r4, #0
   81cce:	1aed      	subs	r5, r5, r3
   81cd0:	10ad      	asrs	r5, r5, #2
   81cd2:	461e      	mov	r6, r3
   81cd4:	42ac      	cmp	r4, r5
   81cd6:	d004      	beq.n	81ce2 <__libc_init_array+0x3a>
   81cd8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   81cdc:	4790      	blx	r2
   81cde:	3401      	adds	r4, #1
   81ce0:	e7f8      	b.n	81cd4 <__libc_init_array+0x2c>
   81ce2:	bd70      	pop	{r4, r5, r6, pc}
   81ce4:	0008458c 	.word	0x0008458c
   81ce8:	0008458c 	.word	0x0008458c
   81cec:	00084594 	.word	0x00084594
   81cf0:	0008458c 	.word	0x0008458c

00081cf4 <iprintf>:
   81cf4:	b40f      	push	{r0, r1, r2, r3}
   81cf6:	b507      	push	{r0, r1, r2, lr}
   81cf8:	4906      	ldr	r1, [pc, #24]	; (81d14 <iprintf+0x20>)
   81cfa:	ab04      	add	r3, sp, #16
   81cfc:	6808      	ldr	r0, [r1, #0]
   81cfe:	f853 2b04 	ldr.w	r2, [r3], #4
   81d02:	6881      	ldr	r1, [r0, #8]
   81d04:	9301      	str	r3, [sp, #4]
   81d06:	f000 f8ec 	bl	81ee2 <_vfiprintf_r>
   81d0a:	b003      	add	sp, #12
   81d0c:	f85d eb04 	ldr.w	lr, [sp], #4
   81d10:	b004      	add	sp, #16
   81d12:	4770      	bx	lr
   81d14:	20070008 	.word	0x20070008

00081d18 <_iprintf_r>:
   81d18:	b40e      	push	{r1, r2, r3}
   81d1a:	b503      	push	{r0, r1, lr}
   81d1c:	ab03      	add	r3, sp, #12
   81d1e:	f853 2b04 	ldr.w	r2, [r3], #4
   81d22:	6881      	ldr	r1, [r0, #8]
   81d24:	9301      	str	r3, [sp, #4]
   81d26:	f000 f8dc 	bl	81ee2 <_vfiprintf_r>
   81d2a:	b002      	add	sp, #8
   81d2c:	f85d eb04 	ldr.w	lr, [sp], #4
   81d30:	b003      	add	sp, #12
   81d32:	4770      	bx	lr

00081d34 <memcpy>:
   81d34:	b510      	push	{r4, lr}
   81d36:	2300      	movs	r3, #0
   81d38:	4293      	cmp	r3, r2
   81d3a:	d003      	beq.n	81d44 <memcpy+0x10>
   81d3c:	5ccc      	ldrb	r4, [r1, r3]
   81d3e:	54c4      	strb	r4, [r0, r3]
   81d40:	3301      	adds	r3, #1
   81d42:	e7f9      	b.n	81d38 <memcpy+0x4>
   81d44:	bd10      	pop	{r4, pc}

00081d46 <memset>:
   81d46:	4402      	add	r2, r0
   81d48:	4603      	mov	r3, r0
   81d4a:	4293      	cmp	r3, r2
   81d4c:	d002      	beq.n	81d54 <memset+0xe>
   81d4e:	f803 1b01 	strb.w	r1, [r3], #1
   81d52:	e7fa      	b.n	81d4a <memset+0x4>
   81d54:	4770      	bx	lr

00081d56 <setbuf>:
   81d56:	2900      	cmp	r1, #0
   81d58:	bf0c      	ite	eq
   81d5a:	2202      	moveq	r2, #2
   81d5c:	2200      	movne	r2, #0
   81d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81d62:	f000 b80f 	b.w	81d84 <setvbuf>
	...

00081d68 <setjmp>:
   81d68:	46ec      	mov	ip, sp
   81d6a:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81d6e:	f04f 0000 	mov.w	r0, #0
   81d72:	4770      	bx	lr

00081d74 <longjmp>:
   81d74:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81d78:	46e5      	mov	sp, ip
   81d7a:	0008      	movs	r0, r1
   81d7c:	bf08      	it	eq
   81d7e:	2001      	moveq	r0, #1
   81d80:	4770      	bx	lr
   81d82:	bf00      	nop

00081d84 <setvbuf>:
   81d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81d88:	461d      	mov	r5, r3
   81d8a:	4b36      	ldr	r3, [pc, #216]	; (81e64 <setvbuf+0xe0>)
   81d8c:	4604      	mov	r4, r0
   81d8e:	681f      	ldr	r7, [r3, #0]
   81d90:	460e      	mov	r6, r1
   81d92:	4690      	mov	r8, r2
   81d94:	b127      	cbz	r7, 81da0 <setvbuf+0x1c>
   81d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   81d98:	b913      	cbnz	r3, 81da0 <setvbuf+0x1c>
   81d9a:	4638      	mov	r0, r7
   81d9c:	f000 feca 	bl	82b34 <__sinit>
   81da0:	f1b8 0f02 	cmp.w	r8, #2
   81da4:	d859      	bhi.n	81e5a <setvbuf+0xd6>
   81da6:	2d00      	cmp	r5, #0
   81da8:	db57      	blt.n	81e5a <setvbuf+0xd6>
   81daa:	4638      	mov	r0, r7
   81dac:	4621      	mov	r1, r4
   81dae:	f000 fe78 	bl	82aa2 <_fflush_r>
   81db2:	2300      	movs	r3, #0
   81db4:	6063      	str	r3, [r4, #4]
   81db6:	61a3      	str	r3, [r4, #24]
   81db8:	89a3      	ldrh	r3, [r4, #12]
   81dba:	061b      	lsls	r3, r3, #24
   81dbc:	d503      	bpl.n	81dc6 <setvbuf+0x42>
   81dbe:	4638      	mov	r0, r7
   81dc0:	6921      	ldr	r1, [r4, #16]
   81dc2:	f001 f83b 	bl	82e3c <_free_r>
   81dc6:	89a3      	ldrh	r3, [r4, #12]
   81dc8:	f1b8 0f02 	cmp.w	r8, #2
   81dcc:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81dd0:	81a3      	strh	r3, [r4, #12]
   81dd2:	d012      	beq.n	81dfa <setvbuf+0x76>
   81dd4:	bb36      	cbnz	r6, 81e24 <setvbuf+0xa0>
   81dd6:	2d00      	cmp	r5, #0
   81dd8:	bf08      	it	eq
   81dda:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   81dde:	4628      	mov	r0, r5
   81de0:	f001 fb10 	bl	83404 <malloc>
   81de4:	4606      	mov	r6, r0
   81de6:	b9c8      	cbnz	r0, 81e1c <setvbuf+0x98>
   81de8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81dec:	f001 fb0a 	bl	83404 <malloc>
   81df0:	4606      	mov	r6, r0
   81df2:	b988      	cbnz	r0, 81e18 <setvbuf+0x94>
   81df4:	f04f 30ff 	mov.w	r0, #4294967295
   81df8:	e000      	b.n	81dfc <setvbuf+0x78>
   81dfa:	2000      	movs	r0, #0
   81dfc:	89a3      	ldrh	r3, [r4, #12]
   81dfe:	f043 0302 	orr.w	r3, r3, #2
   81e02:	81a3      	strh	r3, [r4, #12]
   81e04:	2300      	movs	r3, #0
   81e06:	60a3      	str	r3, [r4, #8]
   81e08:	f104 0343 	add.w	r3, r4, #67	; 0x43
   81e0c:	6023      	str	r3, [r4, #0]
   81e0e:	6123      	str	r3, [r4, #16]
   81e10:	2301      	movs	r3, #1
   81e12:	6163      	str	r3, [r4, #20]
   81e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e18:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81e1c:	89a3      	ldrh	r3, [r4, #12]
   81e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81e22:	81a3      	strh	r3, [r4, #12]
   81e24:	f1b8 0f01 	cmp.w	r8, #1
   81e28:	d105      	bne.n	81e36 <setvbuf+0xb2>
   81e2a:	89a3      	ldrh	r3, [r4, #12]
   81e2c:	f043 0301 	orr.w	r3, r3, #1
   81e30:	81a3      	strh	r3, [r4, #12]
   81e32:	426b      	negs	r3, r5
   81e34:	61a3      	str	r3, [r4, #24]
   81e36:	4b0c      	ldr	r3, [pc, #48]	; (81e68 <setvbuf+0xe4>)
   81e38:	63fb      	str	r3, [r7, #60]	; 0x3c
   81e3a:	89a3      	ldrh	r3, [r4, #12]
   81e3c:	6026      	str	r6, [r4, #0]
   81e3e:	f003 0008 	and.w	r0, r3, #8
   81e42:	b280      	uxth	r0, r0
   81e44:	6126      	str	r6, [r4, #16]
   81e46:	6165      	str	r5, [r4, #20]
   81e48:	b148      	cbz	r0, 81e5e <setvbuf+0xda>
   81e4a:	f013 0f03 	tst.w	r3, #3
   81e4e:	bf18      	it	ne
   81e50:	2500      	movne	r5, #0
   81e52:	60a5      	str	r5, [r4, #8]
   81e54:	2000      	movs	r0, #0
   81e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e5a:	f04f 30ff 	mov.w	r0, #4294967295
   81e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e62:	bf00      	nop
   81e64:	20070008 	.word	0x20070008
   81e68:	00082af1 	.word	0x00082af1

00081e6c <strlen>:
   81e6c:	4603      	mov	r3, r0
   81e6e:	f813 2b01 	ldrb.w	r2, [r3], #1
   81e72:	2a00      	cmp	r2, #0
   81e74:	d1fb      	bne.n	81e6e <strlen+0x2>
   81e76:	1a18      	subs	r0, r3, r0
   81e78:	3801      	subs	r0, #1
   81e7a:	4770      	bx	lr

00081e7c <__sprint_r>:
   81e7c:	6893      	ldr	r3, [r2, #8]
   81e7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81e82:	4681      	mov	r9, r0
   81e84:	460f      	mov	r7, r1
   81e86:	4614      	mov	r4, r2
   81e88:	b91b      	cbnz	r3, 81e92 <__sprint_r+0x16>
   81e8a:	6053      	str	r3, [r2, #4]
   81e8c:	4618      	mov	r0, r3
   81e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81e92:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81e94:	049d      	lsls	r5, r3, #18
   81e96:	d51d      	bpl.n	81ed4 <__sprint_r+0x58>
   81e98:	6815      	ldr	r5, [r2, #0]
   81e9a:	68a3      	ldr	r3, [r4, #8]
   81e9c:	3508      	adds	r5, #8
   81e9e:	b1bb      	cbz	r3, 81ed0 <__sprint_r+0x54>
   81ea0:	f855 3c04 	ldr.w	r3, [r5, #-4]
   81ea4:	f855 ac08 	ldr.w	sl, [r5, #-8]
   81ea8:	ea4f 0893 	mov.w	r8, r3, lsr #2
   81eac:	2600      	movs	r6, #0
   81eae:	4546      	cmp	r6, r8
   81eb0:	da09      	bge.n	81ec6 <__sprint_r+0x4a>
   81eb2:	4648      	mov	r0, r9
   81eb4:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
   81eb8:	463a      	mov	r2, r7
   81eba:	f000 ff05 	bl	82cc8 <_fputwc_r>
   81ebe:	1c43      	adds	r3, r0, #1
   81ec0:	d00a      	beq.n	81ed8 <__sprint_r+0x5c>
   81ec2:	3601      	adds	r6, #1
   81ec4:	e7f3      	b.n	81eae <__sprint_r+0x32>
   81ec6:	68a3      	ldr	r3, [r4, #8]
   81ec8:	eba3 0388 	sub.w	r3, r3, r8, lsl #2
   81ecc:	60a3      	str	r3, [r4, #8]
   81ece:	e7e4      	b.n	81e9a <__sprint_r+0x1e>
   81ed0:	4618      	mov	r0, r3
   81ed2:	e001      	b.n	81ed8 <__sprint_r+0x5c>
   81ed4:	f001 f86a 	bl	82fac <__sfvwrite_r>
   81ed8:	2300      	movs	r3, #0
   81eda:	60a3      	str	r3, [r4, #8]
   81edc:	6063      	str	r3, [r4, #4]
   81ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081ee2 <_vfiprintf_r>:
   81ee2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81ee6:	b0ad      	sub	sp, #180	; 0xb4
   81ee8:	4688      	mov	r8, r1
   81eea:	9202      	str	r2, [sp, #8]
   81eec:	461c      	mov	r4, r3
   81eee:	461e      	mov	r6, r3
   81ef0:	4683      	mov	fp, r0
   81ef2:	b118      	cbz	r0, 81efc <_vfiprintf_r+0x1a>
   81ef4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81ef6:	b90b      	cbnz	r3, 81efc <_vfiprintf_r+0x1a>
   81ef8:	f000 fe1c 	bl	82b34 <__sinit>
   81efc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   81f00:	0498      	lsls	r0, r3, #18
   81f02:	d409      	bmi.n	81f18 <_vfiprintf_r+0x36>
   81f04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   81f08:	f8a8 300c 	strh.w	r3, [r8, #12]
   81f0c:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
   81f10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   81f14:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
   81f18:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   81f1c:	0719      	lsls	r1, r3, #28
   81f1e:	d509      	bpl.n	81f34 <_vfiprintf_r+0x52>
   81f20:	f8d8 3010 	ldr.w	r3, [r8, #16]
   81f24:	b133      	cbz	r3, 81f34 <_vfiprintf_r+0x52>
   81f26:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   81f2a:	f003 031a 	and.w	r3, r3, #26
   81f2e:	2b0a      	cmp	r3, #10
   81f30:	d114      	bne.n	81f5c <_vfiprintf_r+0x7a>
   81f32:	e008      	b.n	81f46 <_vfiprintf_r+0x64>
   81f34:	4658      	mov	r0, fp
   81f36:	4641      	mov	r1, r8
   81f38:	f000 fc78 	bl	8282c <__swsetup_r>
   81f3c:	2800      	cmp	r0, #0
   81f3e:	d0f2      	beq.n	81f26 <_vfiprintf_r+0x44>
   81f40:	f04f 30ff 	mov.w	r0, #4294967295
   81f44:	e3d9      	b.n	826fa <_vfiprintf_r+0x818>
   81f46:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
   81f4a:	2b00      	cmp	r3, #0
   81f4c:	db06      	blt.n	81f5c <_vfiprintf_r+0x7a>
   81f4e:	4658      	mov	r0, fp
   81f50:	4641      	mov	r1, r8
   81f52:	9a02      	ldr	r2, [sp, #8]
   81f54:	4623      	mov	r3, r4
   81f56:	f000 fbe1 	bl	8271c <__sbprintf>
   81f5a:	e3ce      	b.n	826fa <_vfiprintf_r+0x818>
   81f5c:	2300      	movs	r3, #0
   81f5e:	aa1c      	add	r2, sp, #112	; 0x70
   81f60:	920f      	str	r2, [sp, #60]	; 0x3c
   81f62:	9311      	str	r3, [sp, #68]	; 0x44
   81f64:	9310      	str	r3, [sp, #64]	; 0x40
   81f66:	4694      	mov	ip, r2
   81f68:	930a      	str	r3, [sp, #40]	; 0x28
   81f6a:	9305      	str	r3, [sp, #20]
   81f6c:	9b02      	ldr	r3, [sp, #8]
   81f6e:	461c      	mov	r4, r3
   81f70:	f813 2b01 	ldrb.w	r2, [r3], #1
   81f74:	b91a      	cbnz	r2, 81f7e <_vfiprintf_r+0x9c>
   81f76:	9802      	ldr	r0, [sp, #8]
   81f78:	1a25      	subs	r5, r4, r0
   81f7a:	d103      	bne.n	81f84 <_vfiprintf_r+0xa2>
   81f7c:	e01d      	b.n	81fba <_vfiprintf_r+0xd8>
   81f7e:	2a25      	cmp	r2, #37	; 0x25
   81f80:	d1f5      	bne.n	81f6e <_vfiprintf_r+0x8c>
   81f82:	e7f8      	b.n	81f76 <_vfiprintf_r+0x94>
   81f84:	9b11      	ldr	r3, [sp, #68]	; 0x44
   81f86:	9902      	ldr	r1, [sp, #8]
   81f88:	442b      	add	r3, r5
   81f8a:	9311      	str	r3, [sp, #68]	; 0x44
   81f8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81f8e:	e88c 0022 	stmia.w	ip, {r1, r5}
   81f92:	3301      	adds	r3, #1
   81f94:	2b07      	cmp	r3, #7
   81f96:	9310      	str	r3, [sp, #64]	; 0x40
   81f98:	dc02      	bgt.n	81fa0 <_vfiprintf_r+0xbe>
   81f9a:	f10c 0c08 	add.w	ip, ip, #8
   81f9e:	e009      	b.n	81fb4 <_vfiprintf_r+0xd2>
   81fa0:	4658      	mov	r0, fp
   81fa2:	4641      	mov	r1, r8
   81fa4:	aa0f      	add	r2, sp, #60	; 0x3c
   81fa6:	f7ff ff69 	bl	81e7c <__sprint_r>
   81faa:	2800      	cmp	r0, #0
   81fac:	f040 839f 	bne.w	826ee <_vfiprintf_r+0x80c>
   81fb0:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   81fb4:	9a05      	ldr	r2, [sp, #20]
   81fb6:	442a      	add	r2, r5
   81fb8:	9205      	str	r2, [sp, #20]
   81fba:	7823      	ldrb	r3, [r4, #0]
   81fbc:	2b00      	cmp	r3, #0
   81fbe:	f000 838f 	beq.w	826e0 <_vfiprintf_r+0x7fe>
   81fc2:	2200      	movs	r2, #0
   81fc4:	3401      	adds	r4, #1
   81fc6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81fca:	f04f 3aff 	mov.w	sl, #4294967295
   81fce:	9204      	str	r2, [sp, #16]
   81fd0:	4617      	mov	r7, r2
   81fd2:	1c65      	adds	r5, r4, #1
   81fd4:	7823      	ldrb	r3, [r4, #0]
   81fd6:	9502      	str	r5, [sp, #8]
   81fd8:	2b58      	cmp	r3, #88	; 0x58
   81fda:	d064      	beq.n	820a6 <_vfiprintf_r+0x1c4>
   81fdc:	dc2d      	bgt.n	8203a <_vfiprintf_r+0x158>
   81fde:	2b2e      	cmp	r3, #46	; 0x2e
   81fe0:	d076      	beq.n	820d0 <_vfiprintf_r+0x1ee>
   81fe2:	dc12      	bgt.n	8200a <_vfiprintf_r+0x128>
   81fe4:	2b2a      	cmp	r3, #42	; 0x2a
   81fe6:	d066      	beq.n	820b6 <_vfiprintf_r+0x1d4>
   81fe8:	dc08      	bgt.n	81ffc <_vfiprintf_r+0x11a>
   81fea:	2b20      	cmp	r3, #32
   81fec:	d05f      	beq.n	820ae <_vfiprintf_r+0x1cc>
   81fee:	2b23      	cmp	r3, #35	; 0x23
   81ff0:	f040 8200 	bne.w	823f4 <_vfiprintf_r+0x512>
   81ff4:	f047 0701 	orr.w	r7, r7, #1
   81ff8:	9c02      	ldr	r4, [sp, #8]
   81ffa:	e7ea      	b.n	81fd2 <_vfiprintf_r+0xf0>
   81ffc:	2b2b      	cmp	r3, #43	; 0x2b
   81ffe:	d101      	bne.n	82004 <_vfiprintf_r+0x122>
   82000:	461a      	mov	r2, r3
   82002:	e7f9      	b.n	81ff8 <_vfiprintf_r+0x116>
   82004:	2b2d      	cmp	r3, #45	; 0x2d
   82006:	d060      	beq.n	820ca <_vfiprintf_r+0x1e8>
   82008:	e1f4      	b.n	823f4 <_vfiprintf_r+0x512>
   8200a:	2b39      	cmp	r3, #57	; 0x39
   8200c:	dc07      	bgt.n	8201e <_vfiprintf_r+0x13c>
   8200e:	2b31      	cmp	r3, #49	; 0x31
   82010:	da7f      	bge.n	82112 <_vfiprintf_r+0x230>
   82012:	2b30      	cmp	r3, #48	; 0x30
   82014:	f040 81ee 	bne.w	823f4 <_vfiprintf_r+0x512>
   82018:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8201c:	e7ec      	b.n	81ff8 <_vfiprintf_r+0x116>
   8201e:	2b4f      	cmp	r3, #79	; 0x4f
   82020:	f000 80e0 	beq.w	821e4 <_vfiprintf_r+0x302>
   82024:	2b55      	cmp	r3, #85	; 0x55
   82026:	f000 8120 	beq.w	8226a <_vfiprintf_r+0x388>
   8202a:	2b44      	cmp	r3, #68	; 0x44
   8202c:	f040 81e2 	bne.w	823f4 <_vfiprintf_r+0x512>
   82030:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   82034:	f047 0710 	orr.w	r7, r7, #16
   82038:	e094      	b.n	82164 <_vfiprintf_r+0x282>
   8203a:	2b6e      	cmp	r3, #110	; 0x6e
   8203c:	f000 80b6 	beq.w	821ac <_vfiprintf_r+0x2ca>
   82040:	dc0d      	bgt.n	8205e <_vfiprintf_r+0x17c>
   82042:	2b68      	cmp	r3, #104	; 0x68
   82044:	d076      	beq.n	82134 <_vfiprintf_r+0x252>
   82046:	dc05      	bgt.n	82054 <_vfiprintf_r+0x172>
   82048:	2b63      	cmp	r3, #99	; 0x63
   8204a:	f000 8083 	beq.w	82154 <_vfiprintf_r+0x272>
   8204e:	2b64      	cmp	r3, #100	; 0x64
   82050:	d026      	beq.n	820a0 <_vfiprintf_r+0x1be>
   82052:	e1cf      	b.n	823f4 <_vfiprintf_r+0x512>
   82054:	2b69      	cmp	r3, #105	; 0x69
   82056:	d023      	beq.n	820a0 <_vfiprintf_r+0x1be>
   82058:	2b6c      	cmp	r3, #108	; 0x6c
   8205a:	d06e      	beq.n	8213a <_vfiprintf_r+0x258>
   8205c:	e1ca      	b.n	823f4 <_vfiprintf_r+0x512>
   8205e:	2b71      	cmp	r3, #113	; 0x71
   82060:	d075      	beq.n	8214e <_vfiprintf_r+0x26c>
   82062:	dc13      	bgt.n	8208c <_vfiprintf_r+0x1aa>
   82064:	2b6f      	cmp	r3, #111	; 0x6f
   82066:	f000 80bf 	beq.w	821e8 <_vfiprintf_r+0x306>
   8206a:	2b70      	cmp	r3, #112	; 0x70
   8206c:	f040 81c2 	bne.w	823f4 <_vfiprintf_r+0x512>
   82070:	2330      	movs	r3, #48	; 0x30
   82072:	48a0      	ldr	r0, [pc, #640]	; (822f4 <_vfiprintf_r+0x412>)
   82074:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   82078:	2378      	movs	r3, #120	; 0x78
   8207a:	6834      	ldr	r4, [r6, #0]
   8207c:	2500      	movs	r5, #0
   8207e:	f047 0702 	orr.w	r7, r7, #2
   82082:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   82086:	3604      	adds	r6, #4
   82088:	900a      	str	r0, [sp, #40]	; 0x28
   8208a:	e12e      	b.n	822ea <_vfiprintf_r+0x408>
   8208c:	2b75      	cmp	r3, #117	; 0x75
   8208e:	f000 80ee 	beq.w	8226e <_vfiprintf_r+0x38c>
   82092:	2b78      	cmp	r3, #120	; 0x78
   82094:	f000 8103 	beq.w	8229e <_vfiprintf_r+0x3bc>
   82098:	2b73      	cmp	r3, #115	; 0x73
   8209a:	f040 81ab 	bne.w	823f4 <_vfiprintf_r+0x512>
   8209e:	e0bf      	b.n	82220 <_vfiprintf_r+0x33e>
   820a0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   820a4:	e05e      	b.n	82164 <_vfiprintf_r+0x282>
   820a6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   820aa:	4c93      	ldr	r4, [pc, #588]	; (822f8 <_vfiprintf_r+0x416>)
   820ac:	e0fa      	b.n	822a4 <_vfiprintf_r+0x3c2>
   820ae:	2a00      	cmp	r2, #0
   820b0:	bf08      	it	eq
   820b2:	2220      	moveq	r2, #32
   820b4:	e7a0      	b.n	81ff8 <_vfiprintf_r+0x116>
   820b6:	1d33      	adds	r3, r6, #4
   820b8:	6836      	ldr	r6, [r6, #0]
   820ba:	2e00      	cmp	r6, #0
   820bc:	9604      	str	r6, [sp, #16]
   820be:	db01      	blt.n	820c4 <_vfiprintf_r+0x1e2>
   820c0:	461e      	mov	r6, r3
   820c2:	e799      	b.n	81ff8 <_vfiprintf_r+0x116>
   820c4:	4275      	negs	r5, r6
   820c6:	9504      	str	r5, [sp, #16]
   820c8:	461e      	mov	r6, r3
   820ca:	f047 0704 	orr.w	r7, r7, #4
   820ce:	e793      	b.n	81ff8 <_vfiprintf_r+0x116>
   820d0:	9c02      	ldr	r4, [sp, #8]
   820d2:	7823      	ldrb	r3, [r4, #0]
   820d4:	1c61      	adds	r1, r4, #1
   820d6:	2b2a      	cmp	r3, #42	; 0x2a
   820d8:	d002      	beq.n	820e0 <_vfiprintf_r+0x1fe>
   820da:	f04f 0a00 	mov.w	sl, #0
   820de:	e00a      	b.n	820f6 <_vfiprintf_r+0x214>
   820e0:	f8d6 a000 	ldr.w	sl, [r6]
   820e4:	1d33      	adds	r3, r6, #4
   820e6:	f1ba 0f00 	cmp.w	sl, #0
   820ea:	461e      	mov	r6, r3
   820ec:	9102      	str	r1, [sp, #8]
   820ee:	da83      	bge.n	81ff8 <_vfiprintf_r+0x116>
   820f0:	f04f 3aff 	mov.w	sl, #4294967295
   820f4:	e780      	b.n	81ff8 <_vfiprintf_r+0x116>
   820f6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   820fa:	2809      	cmp	r0, #9
   820fc:	d805      	bhi.n	8210a <_vfiprintf_r+0x228>
   820fe:	230a      	movs	r3, #10
   82100:	fb03 0a0a 	mla	sl, r3, sl, r0
   82104:	f811 3b01 	ldrb.w	r3, [r1], #1
   82108:	e7f5      	b.n	820f6 <_vfiprintf_r+0x214>
   8210a:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
   8210e:	9102      	str	r1, [sp, #8]
   82110:	e762      	b.n	81fd8 <_vfiprintf_r+0xf6>
   82112:	2500      	movs	r5, #0
   82114:	9504      	str	r5, [sp, #16]
   82116:	9c04      	ldr	r4, [sp, #16]
   82118:	3b30      	subs	r3, #48	; 0x30
   8211a:	210a      	movs	r1, #10
   8211c:	fb01 3404 	mla	r4, r1, r4, r3
   82120:	9902      	ldr	r1, [sp, #8]
   82122:	9404      	str	r4, [sp, #16]
   82124:	f811 3b01 	ldrb.w	r3, [r1], #1
   82128:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8212c:	2809      	cmp	r0, #9
   8212e:	d8ee      	bhi.n	8210e <_vfiprintf_r+0x22c>
   82130:	9102      	str	r1, [sp, #8]
   82132:	e7f0      	b.n	82116 <_vfiprintf_r+0x234>
   82134:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   82138:	e75e      	b.n	81ff8 <_vfiprintf_r+0x116>
   8213a:	9d02      	ldr	r5, [sp, #8]
   8213c:	782b      	ldrb	r3, [r5, #0]
   8213e:	2b6c      	cmp	r3, #108	; 0x6c
   82140:	d102      	bne.n	82148 <_vfiprintf_r+0x266>
   82142:	3501      	adds	r5, #1
   82144:	9502      	str	r5, [sp, #8]
   82146:	e002      	b.n	8214e <_vfiprintf_r+0x26c>
   82148:	f047 0710 	orr.w	r7, r7, #16
   8214c:	e754      	b.n	81ff8 <_vfiprintf_r+0x116>
   8214e:	f047 0720 	orr.w	r7, r7, #32
   82152:	e751      	b.n	81ff8 <_vfiprintf_r+0x116>
   82154:	6833      	ldr	r3, [r6, #0]
   82156:	2500      	movs	r5, #0
   82158:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   8215c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   82160:	3604      	adds	r6, #4
   82162:	e151      	b.n	82408 <_vfiprintf_r+0x526>
   82164:	06ba      	lsls	r2, r7, #26
   82166:	d507      	bpl.n	82178 <_vfiprintf_r+0x296>
   82168:	3607      	adds	r6, #7
   8216a:	f026 0307 	bic.w	r3, r6, #7
   8216e:	f103 0608 	add.w	r6, r3, #8
   82172:	e9d3 4500 	ldrd	r4, r5, [r3]
   82176:	e00d      	b.n	82194 <_vfiprintf_r+0x2b2>
   82178:	f017 0f10 	tst.w	r7, #16
   8217c:	f106 0304 	add.w	r3, r6, #4
   82180:	d001      	beq.n	82186 <_vfiprintf_r+0x2a4>
   82182:	6834      	ldr	r4, [r6, #0]
   82184:	e004      	b.n	82190 <_vfiprintf_r+0x2ae>
   82186:	6834      	ldr	r4, [r6, #0]
   82188:	f017 0f40 	tst.w	r7, #64	; 0x40
   8218c:	bf18      	it	ne
   8218e:	b224      	sxthne	r4, r4
   82190:	17e5      	asrs	r5, r4, #31
   82192:	461e      	mov	r6, r3
   82194:	2c00      	cmp	r4, #0
   82196:	f175 0000 	sbcs.w	r0, r5, #0
   8219a:	f280 80af 	bge.w	822fc <_vfiprintf_r+0x41a>
   8219e:	232d      	movs	r3, #45	; 0x2d
   821a0:	4264      	negs	r4, r4
   821a2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   821a6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   821aa:	e0a7      	b.n	822fc <_vfiprintf_r+0x41a>
   821ac:	f017 0f20 	tst.w	r7, #32
   821b0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   821b4:	f106 0104 	add.w	r1, r6, #4
   821b8:	d007      	beq.n	821ca <_vfiprintf_r+0x2e8>
   821ba:	9c05      	ldr	r4, [sp, #20]
   821bc:	6830      	ldr	r0, [r6, #0]
   821be:	17e5      	asrs	r5, r4, #31
   821c0:	4622      	mov	r2, r4
   821c2:	462b      	mov	r3, r5
   821c4:	e9c0 2300 	strd	r2, r3, [r0]
   821c8:	e00a      	b.n	821e0 <_vfiprintf_r+0x2fe>
   821ca:	06fb      	lsls	r3, r7, #27
   821cc:	d405      	bmi.n	821da <_vfiprintf_r+0x2f8>
   821ce:	067f      	lsls	r7, r7, #25
   821d0:	d503      	bpl.n	821da <_vfiprintf_r+0x2f8>
   821d2:	6833      	ldr	r3, [r6, #0]
   821d4:	9c05      	ldr	r4, [sp, #20]
   821d6:	801c      	strh	r4, [r3, #0]
   821d8:	e002      	b.n	821e0 <_vfiprintf_r+0x2fe>
   821da:	6833      	ldr	r3, [r6, #0]
   821dc:	9d05      	ldr	r5, [sp, #20]
   821de:	601d      	str	r5, [r3, #0]
   821e0:	460e      	mov	r6, r1
   821e2:	e6c3      	b.n	81f6c <_vfiprintf_r+0x8a>
   821e4:	f047 0710 	orr.w	r7, r7, #16
   821e8:	f017 0320 	ands.w	r3, r7, #32
   821ec:	d008      	beq.n	82200 <_vfiprintf_r+0x31e>
   821ee:	3607      	adds	r6, #7
   821f0:	f026 0307 	bic.w	r3, r6, #7
   821f4:	f103 0608 	add.w	r6, r3, #8
   821f8:	e9d3 4500 	ldrd	r4, r5, [r3]
   821fc:	2300      	movs	r3, #0
   821fe:	e075      	b.n	822ec <_vfiprintf_r+0x40a>
   82200:	f017 0110 	ands.w	r1, r7, #16
   82204:	f106 0204 	add.w	r2, r6, #4
   82208:	d106      	bne.n	82218 <_vfiprintf_r+0x336>
   8220a:	f017 0340 	ands.w	r3, r7, #64	; 0x40
   8220e:	d003      	beq.n	82218 <_vfiprintf_r+0x336>
   82210:	8834      	ldrh	r4, [r6, #0]
   82212:	2500      	movs	r5, #0
   82214:	4616      	mov	r6, r2
   82216:	e7f1      	b.n	821fc <_vfiprintf_r+0x31a>
   82218:	6834      	ldr	r4, [r6, #0]
   8221a:	2500      	movs	r5, #0
   8221c:	4616      	mov	r6, r2
   8221e:	e065      	b.n	822ec <_vfiprintf_r+0x40a>
   82220:	f8d6 9000 	ldr.w	r9, [r6]
   82224:	2300      	movs	r3, #0
   82226:	459a      	cmp	sl, r3
   82228:	f106 0604 	add.w	r6, r6, #4
   8222c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   82230:	4648      	mov	r0, r9
   82232:	db11      	blt.n	82258 <_vfiprintf_r+0x376>
   82234:	4619      	mov	r1, r3
   82236:	4652      	mov	r2, sl
   82238:	f8cd c004 	str.w	ip, [sp, #4]
   8223c:	f001 fafa 	bl	83834 <memchr>
   82240:	f8dd c004 	ldr.w	ip, [sp, #4]
   82244:	2800      	cmp	r0, #0
   82246:	f000 80e4 	beq.w	82412 <_vfiprintf_r+0x530>
   8224a:	ebc9 0000 	rsb	r0, r9, r0
   8224e:	4550      	cmp	r0, sl
   82250:	bfb8      	it	lt
   82252:	4682      	movlt	sl, r0
   82254:	2500      	movs	r5, #0
   82256:	e0dd      	b.n	82414 <_vfiprintf_r+0x532>
   82258:	f8cd c004 	str.w	ip, [sp, #4]
   8225c:	f7ff fe06 	bl	81e6c <strlen>
   82260:	2500      	movs	r5, #0
   82262:	4682      	mov	sl, r0
   82264:	f8dd c004 	ldr.w	ip, [sp, #4]
   82268:	e0d4      	b.n	82414 <_vfiprintf_r+0x532>
   8226a:	f047 0710 	orr.w	r7, r7, #16
   8226e:	06bd      	lsls	r5, r7, #26
   82270:	d507      	bpl.n	82282 <_vfiprintf_r+0x3a0>
   82272:	3607      	adds	r6, #7
   82274:	f026 0307 	bic.w	r3, r6, #7
   82278:	f103 0608 	add.w	r6, r3, #8
   8227c:	e9d3 4500 	ldrd	r4, r5, [r3]
   82280:	e00b      	b.n	8229a <_vfiprintf_r+0x3b8>
   82282:	f017 0f10 	tst.w	r7, #16
   82286:	f106 0304 	add.w	r3, r6, #4
   8228a:	d103      	bne.n	82294 <_vfiprintf_r+0x3b2>
   8228c:	067c      	lsls	r4, r7, #25
   8228e:	d501      	bpl.n	82294 <_vfiprintf_r+0x3b2>
   82290:	8834      	ldrh	r4, [r6, #0]
   82292:	e000      	b.n	82296 <_vfiprintf_r+0x3b4>
   82294:	6834      	ldr	r4, [r6, #0]
   82296:	2500      	movs	r5, #0
   82298:	461e      	mov	r6, r3
   8229a:	2301      	movs	r3, #1
   8229c:	e026      	b.n	822ec <_vfiprintf_r+0x40a>
   8229e:	4c15      	ldr	r4, [pc, #84]	; (822f4 <_vfiprintf_r+0x412>)
   822a0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   822a4:	06b8      	lsls	r0, r7, #26
   822a6:	940a      	str	r4, [sp, #40]	; 0x28
   822a8:	d507      	bpl.n	822ba <_vfiprintf_r+0x3d8>
   822aa:	3607      	adds	r6, #7
   822ac:	f026 0207 	bic.w	r2, r6, #7
   822b0:	f102 0608 	add.w	r6, r2, #8
   822b4:	e9d2 4500 	ldrd	r4, r5, [r2]
   822b8:	e00b      	b.n	822d2 <_vfiprintf_r+0x3f0>
   822ba:	f017 0f10 	tst.w	r7, #16
   822be:	f106 0204 	add.w	r2, r6, #4
   822c2:	d103      	bne.n	822cc <_vfiprintf_r+0x3ea>
   822c4:	0679      	lsls	r1, r7, #25
   822c6:	d501      	bpl.n	822cc <_vfiprintf_r+0x3ea>
   822c8:	8834      	ldrh	r4, [r6, #0]
   822ca:	e000      	b.n	822ce <_vfiprintf_r+0x3ec>
   822cc:	6834      	ldr	r4, [r6, #0]
   822ce:	2500      	movs	r5, #0
   822d0:	4616      	mov	r6, r2
   822d2:	07fa      	lsls	r2, r7, #31
   822d4:	d509      	bpl.n	822ea <_vfiprintf_r+0x408>
   822d6:	ea54 0005 	orrs.w	r0, r4, r5
   822da:	d006      	beq.n	822ea <_vfiprintf_r+0x408>
   822dc:	2230      	movs	r2, #48	; 0x30
   822de:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   822e2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   822e6:	f047 0702 	orr.w	r7, r7, #2
   822ea:	2302      	movs	r3, #2
   822ec:	2200      	movs	r2, #0
   822ee:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   822f2:	e004      	b.n	822fe <_vfiprintf_r+0x41c>
   822f4:	00084567 	.word	0x00084567
   822f8:	00084556 	.word	0x00084556
   822fc:	2301      	movs	r3, #1
   822fe:	f1ba 0f00 	cmp.w	sl, #0
   82302:	bfa8      	it	ge
   82304:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   82308:	ea54 0105 	orrs.w	r1, r4, r5
   8230c:	d102      	bne.n	82314 <_vfiprintf_r+0x432>
   8230e:	f1ba 0f00 	cmp.w	sl, #0
   82312:	d05e      	beq.n	823d2 <_vfiprintf_r+0x4f0>
   82314:	2b01      	cmp	r3, #1
   82316:	d01f      	beq.n	82358 <_vfiprintf_r+0x476>
   82318:	2b02      	cmp	r3, #2
   8231a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
   8231e:	d045      	beq.n	823ac <_vfiprintf_r+0x4ca>
   82320:	08e0      	lsrs	r0, r4, #3
   82322:	ea40 7145 	orr.w	r1, r0, r5, lsl #29
   82326:	08e8      	lsrs	r0, r5, #3
   82328:	f004 0207 	and.w	r2, r4, #7
   8232c:	9106      	str	r1, [sp, #24]
   8232e:	9007      	str	r0, [sp, #28]
   82330:	3230      	adds	r2, #48	; 0x30
   82332:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
   82336:	ea54 0105 	orrs.w	r1, r4, r5
   8233a:	4699      	mov	r9, r3
   8233c:	701a      	strb	r2, [r3, #0]
   8233e:	f103 33ff 	add.w	r3, r3, #4294967295
   82342:	d1ed      	bne.n	82320 <_vfiprintf_r+0x43e>
   82344:	07f8      	lsls	r0, r7, #31
   82346:	4649      	mov	r1, r9
   82348:	d54e      	bpl.n	823e8 <_vfiprintf_r+0x506>
   8234a:	2a30      	cmp	r2, #48	; 0x30
   8234c:	d04c      	beq.n	823e8 <_vfiprintf_r+0x506>
   8234e:	4699      	mov	r9, r3
   82350:	2330      	movs	r3, #48	; 0x30
   82352:	f801 3c01 	strb.w	r3, [r1, #-1]
   82356:	e047      	b.n	823e8 <_vfiprintf_r+0x506>
   82358:	2d00      	cmp	r5, #0
   8235a:	bf08      	it	eq
   8235c:	2c0a      	cmpeq	r4, #10
   8235e:	d205      	bcs.n	8236c <_vfiprintf_r+0x48a>
   82360:	3430      	adds	r4, #48	; 0x30
   82362:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   82366:	f10d 096f 	add.w	r9, sp, #111	; 0x6f
   8236a:	e03d      	b.n	823e8 <_vfiprintf_r+0x506>
   8236c:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
   82370:	9203      	str	r2, [sp, #12]
   82372:	4620      	mov	r0, r4
   82374:	4629      	mov	r1, r5
   82376:	220a      	movs	r2, #10
   82378:	2300      	movs	r3, #0
   8237a:	f8cd c004 	str.w	ip, [sp, #4]
   8237e:	f001 fd95 	bl	83eac <__aeabi_uldivmod>
   82382:	9b03      	ldr	r3, [sp, #12]
   82384:	3230      	adds	r2, #48	; 0x30
   82386:	f803 2901 	strb.w	r2, [r3], #-1
   8238a:	4620      	mov	r0, r4
   8238c:	4629      	mov	r1, r5
   8238e:	f8dd 900c 	ldr.w	r9, [sp, #12]
   82392:	220a      	movs	r2, #10
   82394:	9303      	str	r3, [sp, #12]
   82396:	2300      	movs	r3, #0
   82398:	f001 fd88 	bl	83eac <__aeabi_uldivmod>
   8239c:	4604      	mov	r4, r0
   8239e:	460d      	mov	r5, r1
   823a0:	ea54 0005 	orrs.w	r0, r4, r5
   823a4:	f8dd c004 	ldr.w	ip, [sp, #4]
   823a8:	d1e3      	bne.n	82372 <_vfiprintf_r+0x490>
   823aa:	e01d      	b.n	823e8 <_vfiprintf_r+0x506>
   823ac:	990a      	ldr	r1, [sp, #40]	; 0x28
   823ae:	f004 020f 	and.w	r2, r4, #15
   823b2:	5c8a      	ldrb	r2, [r1, r2]
   823b4:	4699      	mov	r9, r3
   823b6:	f803 2901 	strb.w	r2, [r3], #-1
   823ba:	0922      	lsrs	r2, r4, #4
   823bc:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
   823c0:	0929      	lsrs	r1, r5, #4
   823c2:	9008      	str	r0, [sp, #32]
   823c4:	9109      	str	r1, [sp, #36]	; 0x24
   823c6:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   823ca:	ea54 0205 	orrs.w	r2, r4, r5
   823ce:	d1ed      	bne.n	823ac <_vfiprintf_r+0x4ca>
   823d0:	e00a      	b.n	823e8 <_vfiprintf_r+0x506>
   823d2:	b93b      	cbnz	r3, 823e4 <_vfiprintf_r+0x502>
   823d4:	07f9      	lsls	r1, r7, #31
   823d6:	d505      	bpl.n	823e4 <_vfiprintf_r+0x502>
   823d8:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
   823dc:	2330      	movs	r3, #48	; 0x30
   823de:	f809 3d41 	strb.w	r3, [r9, #-65]!
   823e2:	e001      	b.n	823e8 <_vfiprintf_r+0x506>
   823e4:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   823e8:	4655      	mov	r5, sl
   823ea:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   823ee:	ebc9 0a0a 	rsb	sl, r9, sl
   823f2:	e00f      	b.n	82414 <_vfiprintf_r+0x532>
   823f4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   823f8:	2b00      	cmp	r3, #0
   823fa:	f000 8171 	beq.w	826e0 <_vfiprintf_r+0x7fe>
   823fe:	2500      	movs	r5, #0
   82400:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   82404:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   82408:	f04f 0a01 	mov.w	sl, #1
   8240c:	f10d 0948 	add.w	r9, sp, #72	; 0x48
   82410:	e000      	b.n	82414 <_vfiprintf_r+0x532>
   82412:	4605      	mov	r5, r0
   82414:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   82418:	45aa      	cmp	sl, r5
   8241a:	bfac      	ite	ge
   8241c:	4654      	movge	r4, sl
   8241e:	462c      	movlt	r4, r5
   82420:	b103      	cbz	r3, 82424 <_vfiprintf_r+0x542>
   82422:	3401      	adds	r4, #1
   82424:	f017 0302 	ands.w	r3, r7, #2
   82428:	9303      	str	r3, [sp, #12]
   8242a:	bf18      	it	ne
   8242c:	3402      	addne	r4, #2
   8242e:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   82432:	930b      	str	r3, [sp, #44]	; 0x2c
   82434:	d13b      	bne.n	824ae <_vfiprintf_r+0x5cc>
   82436:	9804      	ldr	r0, [sp, #16]
   82438:	1b03      	subs	r3, r0, r4
   8243a:	2b00      	cmp	r3, #0
   8243c:	dd37      	ble.n	824ae <_vfiprintf_r+0x5cc>
   8243e:	4aa6      	ldr	r2, [pc, #664]	; (826d8 <_vfiprintf_r+0x7f6>)
   82440:	2b10      	cmp	r3, #16
   82442:	f8cc 2000 	str.w	r2, [ip]
   82446:	dd1b      	ble.n	82480 <_vfiprintf_r+0x59e>
   82448:	2210      	movs	r2, #16
   8244a:	f8cc 2004 	str.w	r2, [ip, #4]
   8244e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82450:	3210      	adds	r2, #16
   82452:	9211      	str	r2, [sp, #68]	; 0x44
   82454:	9a10      	ldr	r2, [sp, #64]	; 0x40
   82456:	3201      	adds	r2, #1
   82458:	2a07      	cmp	r2, #7
   8245a:	9210      	str	r2, [sp, #64]	; 0x40
   8245c:	dc02      	bgt.n	82464 <_vfiprintf_r+0x582>
   8245e:	f10c 0c08 	add.w	ip, ip, #8
   82462:	e00b      	b.n	8247c <_vfiprintf_r+0x59a>
   82464:	4658      	mov	r0, fp
   82466:	4641      	mov	r1, r8
   82468:	aa0f      	add	r2, sp, #60	; 0x3c
   8246a:	9301      	str	r3, [sp, #4]
   8246c:	f7ff fd06 	bl	81e7c <__sprint_r>
   82470:	9b01      	ldr	r3, [sp, #4]
   82472:	2800      	cmp	r0, #0
   82474:	f040 813b 	bne.w	826ee <_vfiprintf_r+0x80c>
   82478:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   8247c:	3b10      	subs	r3, #16
   8247e:	e7de      	b.n	8243e <_vfiprintf_r+0x55c>
   82480:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82482:	f8cc 3004 	str.w	r3, [ip, #4]
   82486:	4413      	add	r3, r2
   82488:	9311      	str	r3, [sp, #68]	; 0x44
   8248a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8248c:	3301      	adds	r3, #1
   8248e:	2b07      	cmp	r3, #7
   82490:	9310      	str	r3, [sp, #64]	; 0x40
   82492:	dc02      	bgt.n	8249a <_vfiprintf_r+0x5b8>
   82494:	f10c 0c08 	add.w	ip, ip, #8
   82498:	e009      	b.n	824ae <_vfiprintf_r+0x5cc>
   8249a:	4658      	mov	r0, fp
   8249c:	4641      	mov	r1, r8
   8249e:	aa0f      	add	r2, sp, #60	; 0x3c
   824a0:	f7ff fcec 	bl	81e7c <__sprint_r>
   824a4:	2800      	cmp	r0, #0
   824a6:	f040 8122 	bne.w	826ee <_vfiprintf_r+0x80c>
   824aa:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   824ae:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   824b2:	b1db      	cbz	r3, 824ec <_vfiprintf_r+0x60a>
   824b4:	f10d 0337 	add.w	r3, sp, #55	; 0x37
   824b8:	f8cc 3000 	str.w	r3, [ip]
   824bc:	2301      	movs	r3, #1
   824be:	f8cc 3004 	str.w	r3, [ip, #4]
   824c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   824c4:	3301      	adds	r3, #1
   824c6:	9311      	str	r3, [sp, #68]	; 0x44
   824c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   824ca:	3301      	adds	r3, #1
   824cc:	2b07      	cmp	r3, #7
   824ce:	9310      	str	r3, [sp, #64]	; 0x40
   824d0:	dc02      	bgt.n	824d8 <_vfiprintf_r+0x5f6>
   824d2:	f10c 0c08 	add.w	ip, ip, #8
   824d6:	e009      	b.n	824ec <_vfiprintf_r+0x60a>
   824d8:	4658      	mov	r0, fp
   824da:	4641      	mov	r1, r8
   824dc:	aa0f      	add	r2, sp, #60	; 0x3c
   824de:	f7ff fccd 	bl	81e7c <__sprint_r>
   824e2:	2800      	cmp	r0, #0
   824e4:	f040 8103 	bne.w	826ee <_vfiprintf_r+0x80c>
   824e8:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   824ec:	9b03      	ldr	r3, [sp, #12]
   824ee:	b1d3      	cbz	r3, 82526 <_vfiprintf_r+0x644>
   824f0:	ab0e      	add	r3, sp, #56	; 0x38
   824f2:	f8cc 3000 	str.w	r3, [ip]
   824f6:	2302      	movs	r3, #2
   824f8:	f8cc 3004 	str.w	r3, [ip, #4]
   824fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   824fe:	3302      	adds	r3, #2
   82500:	9311      	str	r3, [sp, #68]	; 0x44
   82502:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82504:	3301      	adds	r3, #1
   82506:	2b07      	cmp	r3, #7
   82508:	9310      	str	r3, [sp, #64]	; 0x40
   8250a:	dc02      	bgt.n	82512 <_vfiprintf_r+0x630>
   8250c:	f10c 0c08 	add.w	ip, ip, #8
   82510:	e009      	b.n	82526 <_vfiprintf_r+0x644>
   82512:	4658      	mov	r0, fp
   82514:	4641      	mov	r1, r8
   82516:	aa0f      	add	r2, sp, #60	; 0x3c
   82518:	f7ff fcb0 	bl	81e7c <__sprint_r>
   8251c:	2800      	cmp	r0, #0
   8251e:	f040 80e6 	bne.w	826ee <_vfiprintf_r+0x80c>
   82522:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   82526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   82528:	2b80      	cmp	r3, #128	; 0x80
   8252a:	d13f      	bne.n	825ac <_vfiprintf_r+0x6ca>
   8252c:	9b04      	ldr	r3, [sp, #16]
   8252e:	1b1b      	subs	r3, r3, r4
   82530:	2b00      	cmp	r3, #0
   82532:	9303      	str	r3, [sp, #12]
   82534:	dd3a      	ble.n	825ac <_vfiprintf_r+0x6ca>
   82536:	9b03      	ldr	r3, [sp, #12]
   82538:	2b10      	cmp	r3, #16
   8253a:	4b68      	ldr	r3, [pc, #416]	; (826dc <_vfiprintf_r+0x7fa>)
   8253c:	f8cc 3000 	str.w	r3, [ip]
   82540:	dd1b      	ble.n	8257a <_vfiprintf_r+0x698>
   82542:	2310      	movs	r3, #16
   82544:	f8cc 3004 	str.w	r3, [ip, #4]
   82548:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8254a:	3310      	adds	r3, #16
   8254c:	9311      	str	r3, [sp, #68]	; 0x44
   8254e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82550:	3301      	adds	r3, #1
   82552:	2b07      	cmp	r3, #7
   82554:	9310      	str	r3, [sp, #64]	; 0x40
   82556:	dc02      	bgt.n	8255e <_vfiprintf_r+0x67c>
   82558:	f10c 0c08 	add.w	ip, ip, #8
   8255c:	e009      	b.n	82572 <_vfiprintf_r+0x690>
   8255e:	4658      	mov	r0, fp
   82560:	4641      	mov	r1, r8
   82562:	aa0f      	add	r2, sp, #60	; 0x3c
   82564:	f7ff fc8a 	bl	81e7c <__sprint_r>
   82568:	2800      	cmp	r0, #0
   8256a:	f040 80c0 	bne.w	826ee <_vfiprintf_r+0x80c>
   8256e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   82572:	9b03      	ldr	r3, [sp, #12]
   82574:	3b10      	subs	r3, #16
   82576:	9303      	str	r3, [sp, #12]
   82578:	e7dd      	b.n	82536 <_vfiprintf_r+0x654>
   8257a:	9b03      	ldr	r3, [sp, #12]
   8257c:	9803      	ldr	r0, [sp, #12]
   8257e:	f8cc 3004 	str.w	r3, [ip, #4]
   82582:	9b11      	ldr	r3, [sp, #68]	; 0x44
   82584:	4403      	add	r3, r0
   82586:	9311      	str	r3, [sp, #68]	; 0x44
   82588:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8258a:	3301      	adds	r3, #1
   8258c:	2b07      	cmp	r3, #7
   8258e:	9310      	str	r3, [sp, #64]	; 0x40
   82590:	dc02      	bgt.n	82598 <_vfiprintf_r+0x6b6>
   82592:	f10c 0c08 	add.w	ip, ip, #8
   82596:	e009      	b.n	825ac <_vfiprintf_r+0x6ca>
   82598:	4658      	mov	r0, fp
   8259a:	4641      	mov	r1, r8
   8259c:	aa0f      	add	r2, sp, #60	; 0x3c
   8259e:	f7ff fc6d 	bl	81e7c <__sprint_r>
   825a2:	2800      	cmp	r0, #0
   825a4:	f040 80a3 	bne.w	826ee <_vfiprintf_r+0x80c>
   825a8:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   825ac:	ebca 0505 	rsb	r5, sl, r5
   825b0:	2d00      	cmp	r5, #0
   825b2:	dd34      	ble.n	8261e <_vfiprintf_r+0x73c>
   825b4:	4b49      	ldr	r3, [pc, #292]	; (826dc <_vfiprintf_r+0x7fa>)
   825b6:	2d10      	cmp	r5, #16
   825b8:	f8cc 3000 	str.w	r3, [ip]
   825bc:	dd19      	ble.n	825f2 <_vfiprintf_r+0x710>
   825be:	2310      	movs	r3, #16
   825c0:	f8cc 3004 	str.w	r3, [ip, #4]
   825c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   825c6:	3310      	adds	r3, #16
   825c8:	9311      	str	r3, [sp, #68]	; 0x44
   825ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   825cc:	3301      	adds	r3, #1
   825ce:	2b07      	cmp	r3, #7
   825d0:	9310      	str	r3, [sp, #64]	; 0x40
   825d2:	dc02      	bgt.n	825da <_vfiprintf_r+0x6f8>
   825d4:	f10c 0c08 	add.w	ip, ip, #8
   825d8:	e009      	b.n	825ee <_vfiprintf_r+0x70c>
   825da:	4658      	mov	r0, fp
   825dc:	4641      	mov	r1, r8
   825de:	aa0f      	add	r2, sp, #60	; 0x3c
   825e0:	f7ff fc4c 	bl	81e7c <__sprint_r>
   825e4:	2800      	cmp	r0, #0
   825e6:	f040 8082 	bne.w	826ee <_vfiprintf_r+0x80c>
   825ea:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   825ee:	3d10      	subs	r5, #16
   825f0:	e7e0      	b.n	825b4 <_vfiprintf_r+0x6d2>
   825f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   825f4:	f8cc 5004 	str.w	r5, [ip, #4]
   825f8:	441d      	add	r5, r3
   825fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   825fc:	9511      	str	r5, [sp, #68]	; 0x44
   825fe:	3301      	adds	r3, #1
   82600:	2b07      	cmp	r3, #7
   82602:	9310      	str	r3, [sp, #64]	; 0x40
   82604:	dc02      	bgt.n	8260c <_vfiprintf_r+0x72a>
   82606:	f10c 0c08 	add.w	ip, ip, #8
   8260a:	e008      	b.n	8261e <_vfiprintf_r+0x73c>
   8260c:	4658      	mov	r0, fp
   8260e:	4641      	mov	r1, r8
   82610:	aa0f      	add	r2, sp, #60	; 0x3c
   82612:	f7ff fc33 	bl	81e7c <__sprint_r>
   82616:	2800      	cmp	r0, #0
   82618:	d169      	bne.n	826ee <_vfiprintf_r+0x80c>
   8261a:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   8261e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   82620:	e88c 0600 	stmia.w	ip, {r9, sl}
   82624:	4453      	add	r3, sl
   82626:	9311      	str	r3, [sp, #68]	; 0x44
   82628:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8262a:	3301      	adds	r3, #1
   8262c:	2b07      	cmp	r3, #7
   8262e:	9310      	str	r3, [sp, #64]	; 0x40
   82630:	dc02      	bgt.n	82638 <_vfiprintf_r+0x756>
   82632:	f10c 0308 	add.w	r3, ip, #8
   82636:	e007      	b.n	82648 <_vfiprintf_r+0x766>
   82638:	4658      	mov	r0, fp
   8263a:	4641      	mov	r1, r8
   8263c:	aa0f      	add	r2, sp, #60	; 0x3c
   8263e:	f7ff fc1d 	bl	81e7c <__sprint_r>
   82642:	2800      	cmp	r0, #0
   82644:	d153      	bne.n	826ee <_vfiprintf_r+0x80c>
   82646:	ab1c      	add	r3, sp, #112	; 0x70
   82648:	077a      	lsls	r2, r7, #29
   8264a:	d40a      	bmi.n	82662 <_vfiprintf_r+0x780>
   8264c:	9d05      	ldr	r5, [sp, #20]
   8264e:	9804      	ldr	r0, [sp, #16]
   82650:	9b11      	ldr	r3, [sp, #68]	; 0x44
   82652:	4284      	cmp	r4, r0
   82654:	bfac      	ite	ge
   82656:	192d      	addge	r5, r5, r4
   82658:	182d      	addlt	r5, r5, r0
   8265a:	9505      	str	r5, [sp, #20]
   8265c:	2b00      	cmp	r3, #0
   8265e:	d035      	beq.n	826cc <_vfiprintf_r+0x7ea>
   82660:	e02e      	b.n	826c0 <_vfiprintf_r+0x7de>
   82662:	9904      	ldr	r1, [sp, #16]
   82664:	1b0d      	subs	r5, r1, r4
   82666:	2d00      	cmp	r5, #0
   82668:	ddf0      	ble.n	8264c <_vfiprintf_r+0x76a>
   8266a:	4a1b      	ldr	r2, [pc, #108]	; (826d8 <_vfiprintf_r+0x7f6>)
   8266c:	2d10      	cmp	r5, #16
   8266e:	601a      	str	r2, [r3, #0]
   82670:	dd15      	ble.n	8269e <_vfiprintf_r+0x7bc>
   82672:	2210      	movs	r2, #16
   82674:	605a      	str	r2, [r3, #4]
   82676:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82678:	3210      	adds	r2, #16
   8267a:	9211      	str	r2, [sp, #68]	; 0x44
   8267c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8267e:	3201      	adds	r2, #1
   82680:	2a07      	cmp	r2, #7
   82682:	9210      	str	r2, [sp, #64]	; 0x40
   82684:	dc01      	bgt.n	8268a <_vfiprintf_r+0x7a8>
   82686:	3308      	adds	r3, #8
   82688:	e007      	b.n	8269a <_vfiprintf_r+0x7b8>
   8268a:	4658      	mov	r0, fp
   8268c:	4641      	mov	r1, r8
   8268e:	aa0f      	add	r2, sp, #60	; 0x3c
   82690:	f7ff fbf4 	bl	81e7c <__sprint_r>
   82694:	2800      	cmp	r0, #0
   82696:	d12a      	bne.n	826ee <_vfiprintf_r+0x80c>
   82698:	ab1c      	add	r3, sp, #112	; 0x70
   8269a:	3d10      	subs	r5, #16
   8269c:	e7e5      	b.n	8266a <_vfiprintf_r+0x788>
   8269e:	605d      	str	r5, [r3, #4]
   826a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   826a2:	441d      	add	r5, r3
   826a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   826a6:	9511      	str	r5, [sp, #68]	; 0x44
   826a8:	3301      	adds	r3, #1
   826aa:	2b07      	cmp	r3, #7
   826ac:	9310      	str	r3, [sp, #64]	; 0x40
   826ae:	ddcd      	ble.n	8264c <_vfiprintf_r+0x76a>
   826b0:	4658      	mov	r0, fp
   826b2:	4641      	mov	r1, r8
   826b4:	aa0f      	add	r2, sp, #60	; 0x3c
   826b6:	f7ff fbe1 	bl	81e7c <__sprint_r>
   826ba:	2800      	cmp	r0, #0
   826bc:	d0c6      	beq.n	8264c <_vfiprintf_r+0x76a>
   826be:	e016      	b.n	826ee <_vfiprintf_r+0x80c>
   826c0:	4658      	mov	r0, fp
   826c2:	4641      	mov	r1, r8
   826c4:	aa0f      	add	r2, sp, #60	; 0x3c
   826c6:	f7ff fbd9 	bl	81e7c <__sprint_r>
   826ca:	b980      	cbnz	r0, 826ee <_vfiprintf_r+0x80c>
   826cc:	2300      	movs	r3, #0
   826ce:	9310      	str	r3, [sp, #64]	; 0x40
   826d0:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   826d4:	e44a      	b.n	81f6c <_vfiprintf_r+0x8a>
   826d6:	bf00      	nop
   826d8:	00084536 	.word	0x00084536
   826dc:	00084546 	.word	0x00084546
   826e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   826e2:	b123      	cbz	r3, 826ee <_vfiprintf_r+0x80c>
   826e4:	4658      	mov	r0, fp
   826e6:	4641      	mov	r1, r8
   826e8:	aa0f      	add	r2, sp, #60	; 0x3c
   826ea:	f7ff fbc7 	bl	81e7c <__sprint_r>
   826ee:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   826f2:	065b      	lsls	r3, r3, #25
   826f4:	f53f ac24 	bmi.w	81f40 <_vfiprintf_r+0x5e>
   826f8:	9805      	ldr	r0, [sp, #20]
   826fa:	b02d      	add	sp, #180	; 0xb4
   826fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00082700 <vfiprintf>:
   82700:	b530      	push	{r4, r5, lr}
   82702:	4613      	mov	r3, r2
   82704:	4a04      	ldr	r2, [pc, #16]	; (82718 <vfiprintf+0x18>)
   82706:	4605      	mov	r5, r0
   82708:	460c      	mov	r4, r1
   8270a:	6810      	ldr	r0, [r2, #0]
   8270c:	4629      	mov	r1, r5
   8270e:	4622      	mov	r2, r4
   82710:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   82714:	f7ff bbe5 	b.w	81ee2 <_vfiprintf_r>
   82718:	20070008 	.word	0x20070008

0008271c <__sbprintf>:
   8271c:	b570      	push	{r4, r5, r6, lr}
   8271e:	460c      	mov	r4, r1
   82720:	8989      	ldrh	r1, [r1, #12]
   82722:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   82726:	f021 0102 	bic.w	r1, r1, #2
   8272a:	f8ad 100c 	strh.w	r1, [sp, #12]
   8272e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   82730:	4606      	mov	r6, r0
   82732:	9119      	str	r1, [sp, #100]	; 0x64
   82734:	89e1      	ldrh	r1, [r4, #14]
   82736:	f8ad 100e 	strh.w	r1, [sp, #14]
   8273a:	69e1      	ldr	r1, [r4, #28]
   8273c:	9107      	str	r1, [sp, #28]
   8273e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   82740:	9109      	str	r1, [sp, #36]	; 0x24
   82742:	a91a      	add	r1, sp, #104	; 0x68
   82744:	9100      	str	r1, [sp, #0]
   82746:	9104      	str	r1, [sp, #16]
   82748:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8274c:	9102      	str	r1, [sp, #8]
   8274e:	9105      	str	r1, [sp, #20]
   82750:	2100      	movs	r1, #0
   82752:	9106      	str	r1, [sp, #24]
   82754:	4669      	mov	r1, sp
   82756:	f7ff fbc4 	bl	81ee2 <_vfiprintf_r>
   8275a:	1e05      	subs	r5, r0, #0
   8275c:	db07      	blt.n	8276e <__sbprintf+0x52>
   8275e:	4630      	mov	r0, r6
   82760:	4669      	mov	r1, sp
   82762:	f000 f99e 	bl	82aa2 <_fflush_r>
   82766:	2800      	cmp	r0, #0
   82768:	bf18      	it	ne
   8276a:	f04f 35ff 	movne.w	r5, #4294967295
   8276e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82772:	065b      	lsls	r3, r3, #25
   82774:	d503      	bpl.n	8277e <__sbprintf+0x62>
   82776:	89a3      	ldrh	r3, [r4, #12]
   82778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8277c:	81a3      	strh	r3, [r4, #12]
   8277e:	4628      	mov	r0, r5
   82780:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   82784:	bd70      	pop	{r4, r5, r6, pc}
   82786:	bf00      	nop

00082788 <__swbuf_r>:
   82788:	b570      	push	{r4, r5, r6, lr}
   8278a:	460d      	mov	r5, r1
   8278c:	4614      	mov	r4, r2
   8278e:	4606      	mov	r6, r0
   82790:	b118      	cbz	r0, 8279a <__swbuf_r+0x12>
   82792:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82794:	b90b      	cbnz	r3, 8279a <__swbuf_r+0x12>
   82796:	f000 f9cd 	bl	82b34 <__sinit>
   8279a:	69a3      	ldr	r3, [r4, #24]
   8279c:	60a3      	str	r3, [r4, #8]
   8279e:	89a3      	ldrh	r3, [r4, #12]
   827a0:	0719      	lsls	r1, r3, #28
   827a2:	d50d      	bpl.n	827c0 <__swbuf_r+0x38>
   827a4:	6923      	ldr	r3, [r4, #16]
   827a6:	b15b      	cbz	r3, 827c0 <__swbuf_r+0x38>
   827a8:	89a3      	ldrh	r3, [r4, #12]
   827aa:	b2ed      	uxtb	r5, r5
   827ac:	049a      	lsls	r2, r3, #18
   827ae:	d410      	bmi.n	827d2 <__swbuf_r+0x4a>
   827b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   827b4:	81a3      	strh	r3, [r4, #12]
   827b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   827b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   827bc:	6663      	str	r3, [r4, #100]	; 0x64
   827be:	e008      	b.n	827d2 <__swbuf_r+0x4a>
   827c0:	4630      	mov	r0, r6
   827c2:	4621      	mov	r1, r4
   827c4:	f000 f832 	bl	8282c <__swsetup_r>
   827c8:	2800      	cmp	r0, #0
   827ca:	d0ed      	beq.n	827a8 <__swbuf_r+0x20>
   827cc:	f04f 30ff 	mov.w	r0, #4294967295
   827d0:	bd70      	pop	{r4, r5, r6, pc}
   827d2:	6923      	ldr	r3, [r4, #16]
   827d4:	6820      	ldr	r0, [r4, #0]
   827d6:	1ac0      	subs	r0, r0, r3
   827d8:	6963      	ldr	r3, [r4, #20]
   827da:	4298      	cmp	r0, r3
   827dc:	db05      	blt.n	827ea <__swbuf_r+0x62>
   827de:	4630      	mov	r0, r6
   827e0:	4621      	mov	r1, r4
   827e2:	f000 f95e 	bl	82aa2 <_fflush_r>
   827e6:	2800      	cmp	r0, #0
   827e8:	d1f0      	bne.n	827cc <__swbuf_r+0x44>
   827ea:	68a3      	ldr	r3, [r4, #8]
   827ec:	3001      	adds	r0, #1
   827ee:	3b01      	subs	r3, #1
   827f0:	60a3      	str	r3, [r4, #8]
   827f2:	6823      	ldr	r3, [r4, #0]
   827f4:	1c5a      	adds	r2, r3, #1
   827f6:	6022      	str	r2, [r4, #0]
   827f8:	701d      	strb	r5, [r3, #0]
   827fa:	6963      	ldr	r3, [r4, #20]
   827fc:	4298      	cmp	r0, r3
   827fe:	d004      	beq.n	8280a <__swbuf_r+0x82>
   82800:	89a3      	ldrh	r3, [r4, #12]
   82802:	07db      	lsls	r3, r3, #31
   82804:	d507      	bpl.n	82816 <__swbuf_r+0x8e>
   82806:	2d0a      	cmp	r5, #10
   82808:	d105      	bne.n	82816 <__swbuf_r+0x8e>
   8280a:	4630      	mov	r0, r6
   8280c:	4621      	mov	r1, r4
   8280e:	f000 f948 	bl	82aa2 <_fflush_r>
   82812:	2800      	cmp	r0, #0
   82814:	d1da      	bne.n	827cc <__swbuf_r+0x44>
   82816:	4628      	mov	r0, r5
   82818:	bd70      	pop	{r4, r5, r6, pc}

0008281a <__swbuf>:
   8281a:	460a      	mov	r2, r1
   8281c:	4902      	ldr	r1, [pc, #8]	; (82828 <__swbuf+0xe>)
   8281e:	4603      	mov	r3, r0
   82820:	6808      	ldr	r0, [r1, #0]
   82822:	4619      	mov	r1, r3
   82824:	f7ff bfb0 	b.w	82788 <__swbuf_r>
   82828:	20070008 	.word	0x20070008

0008282c <__swsetup_r>:
   8282c:	b538      	push	{r3, r4, r5, lr}
   8282e:	4b2b      	ldr	r3, [pc, #172]	; (828dc <__swsetup_r+0xb0>)
   82830:	4605      	mov	r5, r0
   82832:	6818      	ldr	r0, [r3, #0]
   82834:	460c      	mov	r4, r1
   82836:	b118      	cbz	r0, 82840 <__swsetup_r+0x14>
   82838:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8283a:	b90b      	cbnz	r3, 82840 <__swsetup_r+0x14>
   8283c:	f000 f97a 	bl	82b34 <__sinit>
   82840:	89a2      	ldrh	r2, [r4, #12]
   82842:	b293      	uxth	r3, r2
   82844:	0718      	lsls	r0, r3, #28
   82846:	d420      	bmi.n	8288a <__swsetup_r+0x5e>
   82848:	06d9      	lsls	r1, r3, #27
   8284a:	d405      	bmi.n	82858 <__swsetup_r+0x2c>
   8284c:	2309      	movs	r3, #9
   8284e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   82852:	602b      	str	r3, [r5, #0]
   82854:	81a2      	strh	r2, [r4, #12]
   82856:	e03b      	b.n	828d0 <__swsetup_r+0xa4>
   82858:	0758      	lsls	r0, r3, #29
   8285a:	d512      	bpl.n	82882 <__swsetup_r+0x56>
   8285c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8285e:	b141      	cbz	r1, 82872 <__swsetup_r+0x46>
   82860:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82864:	4299      	cmp	r1, r3
   82866:	d002      	beq.n	8286e <__swsetup_r+0x42>
   82868:	4628      	mov	r0, r5
   8286a:	f000 fae7 	bl	82e3c <_free_r>
   8286e:	2300      	movs	r3, #0
   82870:	6323      	str	r3, [r4, #48]	; 0x30
   82872:	89a3      	ldrh	r3, [r4, #12]
   82874:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   82878:	81a3      	strh	r3, [r4, #12]
   8287a:	2300      	movs	r3, #0
   8287c:	6063      	str	r3, [r4, #4]
   8287e:	6923      	ldr	r3, [r4, #16]
   82880:	6023      	str	r3, [r4, #0]
   82882:	89a3      	ldrh	r3, [r4, #12]
   82884:	f043 0308 	orr.w	r3, r3, #8
   82888:	81a3      	strh	r3, [r4, #12]
   8288a:	6923      	ldr	r3, [r4, #16]
   8288c:	b94b      	cbnz	r3, 828a2 <__swsetup_r+0x76>
   8288e:	89a3      	ldrh	r3, [r4, #12]
   82890:	f403 7320 	and.w	r3, r3, #640	; 0x280
   82894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82898:	d003      	beq.n	828a2 <__swsetup_r+0x76>
   8289a:	4628      	mov	r0, r5
   8289c:	4621      	mov	r1, r4
   8289e:	f000 fd4d 	bl	8333c <__smakebuf_r>
   828a2:	89a3      	ldrh	r3, [r4, #12]
   828a4:	f013 0201 	ands.w	r2, r3, #1
   828a8:	d005      	beq.n	828b6 <__swsetup_r+0x8a>
   828aa:	2200      	movs	r2, #0
   828ac:	60a2      	str	r2, [r4, #8]
   828ae:	6962      	ldr	r2, [r4, #20]
   828b0:	4252      	negs	r2, r2
   828b2:	61a2      	str	r2, [r4, #24]
   828b4:	e003      	b.n	828be <__swsetup_r+0x92>
   828b6:	0799      	lsls	r1, r3, #30
   828b8:	bf58      	it	pl
   828ba:	6962      	ldrpl	r2, [r4, #20]
   828bc:	60a2      	str	r2, [r4, #8]
   828be:	6922      	ldr	r2, [r4, #16]
   828c0:	b94a      	cbnz	r2, 828d6 <__swsetup_r+0xaa>
   828c2:	f003 0080 	and.w	r0, r3, #128	; 0x80
   828c6:	b280      	uxth	r0, r0
   828c8:	b130      	cbz	r0, 828d8 <__swsetup_r+0xac>
   828ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   828ce:	81a3      	strh	r3, [r4, #12]
   828d0:	f04f 30ff 	mov.w	r0, #4294967295
   828d4:	bd38      	pop	{r3, r4, r5, pc}
   828d6:	2000      	movs	r0, #0
   828d8:	bd38      	pop	{r3, r4, r5, pc}
   828da:	bf00      	nop
   828dc:	20070008 	.word	0x20070008

000828e0 <__register_exitproc>:
   828e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   828e4:	4698      	mov	r8, r3
   828e6:	4b22      	ldr	r3, [pc, #136]	; (82970 <__register_exitproc+0x90>)
   828e8:	4606      	mov	r6, r0
   828ea:	681c      	ldr	r4, [r3, #0]
   828ec:	460f      	mov	r7, r1
   828ee:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   828f2:	4691      	mov	r9, r2
   828f4:	b918      	cbnz	r0, 828fe <__register_exitproc+0x1e>
   828f6:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   828fa:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   828fe:	6843      	ldr	r3, [r0, #4]
   82900:	2b1f      	cmp	r3, #31
   82902:	dd16      	ble.n	82932 <__register_exitproc+0x52>
   82904:	4b1b      	ldr	r3, [pc, #108]	; (82974 <__register_exitproc+0x94>)
   82906:	b91b      	cbnz	r3, 82910 <__register_exitproc+0x30>
   82908:	f04f 30ff 	mov.w	r0, #4294967295
   8290c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82910:	f44f 70c8 	mov.w	r0, #400	; 0x190
   82914:	f000 fd76 	bl	83404 <malloc>
   82918:	2800      	cmp	r0, #0
   8291a:	d0f5      	beq.n	82908 <__register_exitproc+0x28>
   8291c:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   82920:	2500      	movs	r5, #0
   82922:	6045      	str	r5, [r0, #4]
   82924:	6001      	str	r1, [r0, #0]
   82926:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   8292a:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   8292e:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   82932:	6844      	ldr	r4, [r0, #4]
   82934:	b1a6      	cbz	r6, 82960 <__register_exitproc+0x80>
   82936:	2201      	movs	r2, #1
   82938:	40a2      	lsls	r2, r4
   8293a:	eb00 0584 	add.w	r5, r0, r4, lsl #2
   8293e:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
   82942:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   82946:	2e02      	cmp	r6, #2
   82948:	ea41 0102 	orr.w	r1, r1, r2
   8294c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   82950:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
   82954:	d104      	bne.n	82960 <__register_exitproc+0x80>
   82956:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   8295a:	431a      	orrs	r2, r3
   8295c:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   82960:	1c63      	adds	r3, r4, #1
   82962:	3402      	adds	r4, #2
   82964:	6043      	str	r3, [r0, #4]
   82966:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
   8296a:	2000      	movs	r0, #0
   8296c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82970:	00084530 	.word	0x00084530
   82974:	00083405 	.word	0x00083405

00082978 <register_fini>:
   82978:	4b02      	ldr	r3, [pc, #8]	; (82984 <register_fini+0xc>)
   8297a:	b113      	cbz	r3, 82982 <register_fini+0xa>
   8297c:	4802      	ldr	r0, [pc, #8]	; (82988 <register_fini+0x10>)
   8297e:	f7ff b977 	b.w	81c70 <atexit>
   82982:	4770      	bx	lr
   82984:	00000000 	.word	0x00000000
   82988:	00081c7d 	.word	0x00081c7d

0008298c <__sflush_r>:
   8298c:	898a      	ldrh	r2, [r1, #12]
   8298e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82992:	b293      	uxth	r3, r2
   82994:	4605      	mov	r5, r0
   82996:	0718      	lsls	r0, r3, #28
   82998:	460c      	mov	r4, r1
   8299a:	d45e      	bmi.n	82a5a <__sflush_r+0xce>
   8299c:	684b      	ldr	r3, [r1, #4]
   8299e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   829a2:	2b00      	cmp	r3, #0
   829a4:	818a      	strh	r2, [r1, #12]
   829a6:	dc02      	bgt.n	829ae <__sflush_r+0x22>
   829a8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   829aa:	2b00      	cmp	r3, #0
   829ac:	dd18      	ble.n	829e0 <__sflush_r+0x54>
   829ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   829b0:	b1b6      	cbz	r6, 829e0 <__sflush_r+0x54>
   829b2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   829b6:	2300      	movs	r3, #0
   829b8:	b292      	uxth	r2, r2
   829ba:	682f      	ldr	r7, [r5, #0]
   829bc:	602b      	str	r3, [r5, #0]
   829be:	b10a      	cbz	r2, 829c4 <__sflush_r+0x38>
   829c0:	6d22      	ldr	r2, [r4, #80]	; 0x50
   829c2:	e010      	b.n	829e6 <__sflush_r+0x5a>
   829c4:	69e1      	ldr	r1, [r4, #28]
   829c6:	4628      	mov	r0, r5
   829c8:	2301      	movs	r3, #1
   829ca:	47b0      	blx	r6
   829cc:	1c41      	adds	r1, r0, #1
   829ce:	4602      	mov	r2, r0
   829d0:	d109      	bne.n	829e6 <__sflush_r+0x5a>
   829d2:	682b      	ldr	r3, [r5, #0]
   829d4:	b13b      	cbz	r3, 829e6 <__sflush_r+0x5a>
   829d6:	2b1d      	cmp	r3, #29
   829d8:	d001      	beq.n	829de <__sflush_r+0x52>
   829da:	2b16      	cmp	r3, #22
   829dc:	d14a      	bne.n	82a74 <__sflush_r+0xe8>
   829de:	602f      	str	r7, [r5, #0]
   829e0:	2000      	movs	r0, #0
   829e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   829e6:	89a3      	ldrh	r3, [r4, #12]
   829e8:	075b      	lsls	r3, r3, #29
   829ea:	d505      	bpl.n	829f8 <__sflush_r+0x6c>
   829ec:	6863      	ldr	r3, [r4, #4]
   829ee:	1ad2      	subs	r2, r2, r3
   829f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   829f2:	b10b      	cbz	r3, 829f8 <__sflush_r+0x6c>
   829f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   829f6:	1ad2      	subs	r2, r2, r3
   829f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   829fa:	4628      	mov	r0, r5
   829fc:	69e1      	ldr	r1, [r4, #28]
   829fe:	2300      	movs	r3, #0
   82a00:	47b0      	blx	r6
   82a02:	1c46      	adds	r6, r0, #1
   82a04:	89a2      	ldrh	r2, [r4, #12]
   82a06:	d105      	bne.n	82a14 <__sflush_r+0x88>
   82a08:	682b      	ldr	r3, [r5, #0]
   82a0a:	b11b      	cbz	r3, 82a14 <__sflush_r+0x88>
   82a0c:	2b1d      	cmp	r3, #29
   82a0e:	d001      	beq.n	82a14 <__sflush_r+0x88>
   82a10:	2b16      	cmp	r3, #22
   82a12:	d11d      	bne.n	82a50 <__sflush_r+0xc4>
   82a14:	2300      	movs	r3, #0
   82a16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82a1a:	b292      	uxth	r2, r2
   82a1c:	6063      	str	r3, [r4, #4]
   82a1e:	6923      	ldr	r3, [r4, #16]
   82a20:	04d1      	lsls	r1, r2, #19
   82a22:	81a2      	strh	r2, [r4, #12]
   82a24:	6023      	str	r3, [r4, #0]
   82a26:	d504      	bpl.n	82a32 <__sflush_r+0xa6>
   82a28:	1c42      	adds	r2, r0, #1
   82a2a:	d101      	bne.n	82a30 <__sflush_r+0xa4>
   82a2c:	682b      	ldr	r3, [r5, #0]
   82a2e:	b903      	cbnz	r3, 82a32 <__sflush_r+0xa6>
   82a30:	6520      	str	r0, [r4, #80]	; 0x50
   82a32:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82a34:	602f      	str	r7, [r5, #0]
   82a36:	2900      	cmp	r1, #0
   82a38:	d0d2      	beq.n	829e0 <__sflush_r+0x54>
   82a3a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82a3e:	4299      	cmp	r1, r3
   82a40:	d002      	beq.n	82a48 <__sflush_r+0xbc>
   82a42:	4628      	mov	r0, r5
   82a44:	f000 f9fa 	bl	82e3c <_free_r>
   82a48:	2000      	movs	r0, #0
   82a4a:	6320      	str	r0, [r4, #48]	; 0x30
   82a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   82a54:	81a2      	strh	r2, [r4, #12]
   82a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82a5a:	690e      	ldr	r6, [r1, #16]
   82a5c:	2e00      	cmp	r6, #0
   82a5e:	d0bf      	beq.n	829e0 <__sflush_r+0x54>
   82a60:	079b      	lsls	r3, r3, #30
   82a62:	680a      	ldr	r2, [r1, #0]
   82a64:	bf0c      	ite	eq
   82a66:	694b      	ldreq	r3, [r1, #20]
   82a68:	2300      	movne	r3, #0
   82a6a:	ebc6 0802 	rsb	r8, r6, r2
   82a6e:	600e      	str	r6, [r1, #0]
   82a70:	608b      	str	r3, [r1, #8]
   82a72:	e012      	b.n	82a9a <__sflush_r+0x10e>
   82a74:	89a3      	ldrh	r3, [r4, #12]
   82a76:	f04f 30ff 	mov.w	r0, #4294967295
   82a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82a7e:	81a3      	strh	r3, [r4, #12]
   82a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82a84:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82a86:	4628      	mov	r0, r5
   82a88:	69e1      	ldr	r1, [r4, #28]
   82a8a:	4632      	mov	r2, r6
   82a8c:	4643      	mov	r3, r8
   82a8e:	47b8      	blx	r7
   82a90:	2800      	cmp	r0, #0
   82a92:	ddef      	ble.n	82a74 <__sflush_r+0xe8>
   82a94:	4406      	add	r6, r0
   82a96:	ebc0 0808 	rsb	r8, r0, r8
   82a9a:	f1b8 0f00 	cmp.w	r8, #0
   82a9e:	dcf1      	bgt.n	82a84 <__sflush_r+0xf8>
   82aa0:	e79e      	b.n	829e0 <__sflush_r+0x54>

00082aa2 <_fflush_r>:
   82aa2:	b538      	push	{r3, r4, r5, lr}
   82aa4:	460c      	mov	r4, r1
   82aa6:	4605      	mov	r5, r0
   82aa8:	b118      	cbz	r0, 82ab2 <_fflush_r+0x10>
   82aaa:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82aac:	b90b      	cbnz	r3, 82ab2 <_fflush_r+0x10>
   82aae:	f000 f841 	bl	82b34 <__sinit>
   82ab2:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   82ab6:	b128      	cbz	r0, 82ac4 <_fflush_r+0x22>
   82ab8:	4628      	mov	r0, r5
   82aba:	4621      	mov	r1, r4
   82abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82ac0:	f7ff bf64 	b.w	8298c <__sflush_r>
   82ac4:	bd38      	pop	{r3, r4, r5, pc}

00082ac6 <fflush>:
   82ac6:	4601      	mov	r1, r0
   82ac8:	b920      	cbnz	r0, 82ad4 <fflush+0xe>
   82aca:	4b04      	ldr	r3, [pc, #16]	; (82adc <fflush+0x16>)
   82acc:	4904      	ldr	r1, [pc, #16]	; (82ae0 <fflush+0x1a>)
   82ace:	6818      	ldr	r0, [r3, #0]
   82ad0:	f000 bbd4 	b.w	8327c <_fwalk_reent>
   82ad4:	4b03      	ldr	r3, [pc, #12]	; (82ae4 <fflush+0x1e>)
   82ad6:	6818      	ldr	r0, [r3, #0]
   82ad8:	f7ff bfe3 	b.w	82aa2 <_fflush_r>
   82adc:	00084530 	.word	0x00084530
   82ae0:	00082aa3 	.word	0x00082aa3
   82ae4:	20070008 	.word	0x20070008

00082ae8 <__fp_lock>:
   82ae8:	2000      	movs	r0, #0
   82aea:	4770      	bx	lr

00082aec <__fp_unlock>:
   82aec:	2000      	movs	r0, #0
   82aee:	4770      	bx	lr

00082af0 <_cleanup_r>:
   82af0:	4901      	ldr	r1, [pc, #4]	; (82af8 <_cleanup_r+0x8>)
   82af2:	f000 bba7 	b.w	83244 <_fwalk>
   82af6:	bf00      	nop
   82af8:	00083e11 	.word	0x00083e11

00082afc <__sfmoreglue>:
   82afc:	b570      	push	{r4, r5, r6, lr}
   82afe:	1e4b      	subs	r3, r1, #1
   82b00:	2568      	movs	r5, #104	; 0x68
   82b02:	435d      	muls	r5, r3
   82b04:	460e      	mov	r6, r1
   82b06:	f105 0174 	add.w	r1, r5, #116	; 0x74
   82b0a:	f000 fc8b 	bl	83424 <_malloc_r>
   82b0e:	4604      	mov	r4, r0
   82b10:	b140      	cbz	r0, 82b24 <__sfmoreglue+0x28>
   82b12:	2100      	movs	r1, #0
   82b14:	e880 0042 	stmia.w	r0, {r1, r6}
   82b18:	300c      	adds	r0, #12
   82b1a:	60a0      	str	r0, [r4, #8]
   82b1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
   82b20:	f7ff f911 	bl	81d46 <memset>
   82b24:	4620      	mov	r0, r4
   82b26:	bd70      	pop	{r4, r5, r6, pc}

00082b28 <_cleanup>:
   82b28:	4b01      	ldr	r3, [pc, #4]	; (82b30 <_cleanup+0x8>)
   82b2a:	6818      	ldr	r0, [r3, #0]
   82b2c:	f7ff bfe0 	b.w	82af0 <_cleanup_r>
   82b30:	00084530 	.word	0x00084530

00082b34 <__sinit>:
   82b34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82b38:	6b84      	ldr	r4, [r0, #56]	; 0x38
   82b3a:	4606      	mov	r6, r0
   82b3c:	2c00      	cmp	r4, #0
   82b3e:	d162      	bne.n	82c06 <__sinit+0xd2>
   82b40:	4b32      	ldr	r3, [pc, #200]	; (82c0c <__sinit+0xd8>)
   82b42:	6845      	ldr	r5, [r0, #4]
   82b44:	63c3      	str	r3, [r0, #60]	; 0x3c
   82b46:	2303      	movs	r3, #3
   82b48:	f8c0 32e4 	str.w	r3, [r0, #740]	; 0x2e4
   82b4c:	f500 733b 	add.w	r3, r0, #748	; 0x2ec
   82b50:	f8c0 32e8 	str.w	r3, [r0, #744]	; 0x2e8
   82b54:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 82c14 <__sinit+0xe0>
   82b58:	2304      	movs	r3, #4
   82b5a:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 82c18 <__sinit+0xe4>
   82b5e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 82c1c <__sinit+0xe8>
   82b62:	4f2b      	ldr	r7, [pc, #172]	; (82c10 <__sinit+0xdc>)
   82b64:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
   82b68:	4621      	mov	r1, r4
   82b6a:	81ab      	strh	r3, [r5, #12]
   82b6c:	602c      	str	r4, [r5, #0]
   82b6e:	606c      	str	r4, [r5, #4]
   82b70:	60ac      	str	r4, [r5, #8]
   82b72:	666c      	str	r4, [r5, #100]	; 0x64
   82b74:	81ec      	strh	r4, [r5, #14]
   82b76:	612c      	str	r4, [r5, #16]
   82b78:	616c      	str	r4, [r5, #20]
   82b7a:	61ac      	str	r4, [r5, #24]
   82b7c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82b80:	2208      	movs	r2, #8
   82b82:	f7ff f8e0 	bl	81d46 <memset>
   82b86:	61ed      	str	r5, [r5, #28]
   82b88:	f8c5 a020 	str.w	sl, [r5, #32]
   82b8c:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   82b90:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   82b94:	62ef      	str	r7, [r5, #44]	; 0x2c
   82b96:	68b5      	ldr	r5, [r6, #8]
   82b98:	2309      	movs	r3, #9
   82b9a:	f04f 0b01 	mov.w	fp, #1
   82b9e:	81ab      	strh	r3, [r5, #12]
   82ba0:	602c      	str	r4, [r5, #0]
   82ba2:	606c      	str	r4, [r5, #4]
   82ba4:	60ac      	str	r4, [r5, #8]
   82ba6:	666c      	str	r4, [r5, #100]	; 0x64
   82ba8:	f8a5 b00e 	strh.w	fp, [r5, #14]
   82bac:	612c      	str	r4, [r5, #16]
   82bae:	616c      	str	r4, [r5, #20]
   82bb0:	61ac      	str	r4, [r5, #24]
   82bb2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82bb6:	4621      	mov	r1, r4
   82bb8:	2208      	movs	r2, #8
   82bba:	f7ff f8c4 	bl	81d46 <memset>
   82bbe:	61ed      	str	r5, [r5, #28]
   82bc0:	f8c5 a020 	str.w	sl, [r5, #32]
   82bc4:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   82bc8:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   82bcc:	62ef      	str	r7, [r5, #44]	; 0x2c
   82bce:	68f5      	ldr	r5, [r6, #12]
   82bd0:	2312      	movs	r3, #18
   82bd2:	81ab      	strh	r3, [r5, #12]
   82bd4:	2302      	movs	r3, #2
   82bd6:	602c      	str	r4, [r5, #0]
   82bd8:	606c      	str	r4, [r5, #4]
   82bda:	60ac      	str	r4, [r5, #8]
   82bdc:	666c      	str	r4, [r5, #100]	; 0x64
   82bde:	81eb      	strh	r3, [r5, #14]
   82be0:	612c      	str	r4, [r5, #16]
   82be2:	616c      	str	r4, [r5, #20]
   82be4:	61ac      	str	r4, [r5, #24]
   82be6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82bea:	4621      	mov	r1, r4
   82bec:	2208      	movs	r2, #8
   82bee:	f7ff f8aa 	bl	81d46 <memset>
   82bf2:	61ed      	str	r5, [r5, #28]
   82bf4:	f8c5 a020 	str.w	sl, [r5, #32]
   82bf8:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   82bfc:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   82c00:	62ef      	str	r7, [r5, #44]	; 0x2c
   82c02:	f8c6 b038 	str.w	fp, [r6, #56]	; 0x38
   82c06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c0a:	bf00      	nop
   82c0c:	00082af1 	.word	0x00082af1
   82c10:	00083c83 	.word	0x00083c83
   82c14:	00083c01 	.word	0x00083c01
   82c18:	00083c27 	.word	0x00083c27
   82c1c:	00083c5f 	.word	0x00083c5f

00082c20 <__sfp>:
   82c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82c22:	4b1c      	ldr	r3, [pc, #112]	; (82c94 <__sfp+0x74>)
   82c24:	4607      	mov	r7, r0
   82c26:	681e      	ldr	r6, [r3, #0]
   82c28:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   82c2a:	b913      	cbnz	r3, 82c32 <__sfp+0x12>
   82c2c:	4630      	mov	r0, r6
   82c2e:	f7ff ff81 	bl	82b34 <__sinit>
   82c32:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
   82c36:	68b4      	ldr	r4, [r6, #8]
   82c38:	6873      	ldr	r3, [r6, #4]
   82c3a:	3b01      	subs	r3, #1
   82c3c:	d404      	bmi.n	82c48 <__sfp+0x28>
   82c3e:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   82c42:	b175      	cbz	r5, 82c62 <__sfp+0x42>
   82c44:	3468      	adds	r4, #104	; 0x68
   82c46:	e7f8      	b.n	82c3a <__sfp+0x1a>
   82c48:	6833      	ldr	r3, [r6, #0]
   82c4a:	b92b      	cbnz	r3, 82c58 <__sfp+0x38>
   82c4c:	4638      	mov	r0, r7
   82c4e:	2104      	movs	r1, #4
   82c50:	f7ff ff54 	bl	82afc <__sfmoreglue>
   82c54:	6030      	str	r0, [r6, #0]
   82c56:	b108      	cbz	r0, 82c5c <__sfp+0x3c>
   82c58:	6836      	ldr	r6, [r6, #0]
   82c5a:	e7ec      	b.n	82c36 <__sfp+0x16>
   82c5c:	230c      	movs	r3, #12
   82c5e:	603b      	str	r3, [r7, #0]
   82c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82c62:	f64f 73ff 	movw	r3, #65535	; 0xffff
   82c66:	81e3      	strh	r3, [r4, #14]
   82c68:	2301      	movs	r3, #1
   82c6a:	81a3      	strh	r3, [r4, #12]
   82c6c:	6665      	str	r5, [r4, #100]	; 0x64
   82c6e:	6025      	str	r5, [r4, #0]
   82c70:	60a5      	str	r5, [r4, #8]
   82c72:	6065      	str	r5, [r4, #4]
   82c74:	6125      	str	r5, [r4, #16]
   82c76:	6165      	str	r5, [r4, #20]
   82c78:	61a5      	str	r5, [r4, #24]
   82c7a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   82c7e:	4629      	mov	r1, r5
   82c80:	2208      	movs	r2, #8
   82c82:	f7ff f860 	bl	81d46 <memset>
   82c86:	6325      	str	r5, [r4, #48]	; 0x30
   82c88:	6365      	str	r5, [r4, #52]	; 0x34
   82c8a:	6465      	str	r5, [r4, #68]	; 0x44
   82c8c:	64a5      	str	r5, [r4, #72]	; 0x48
   82c8e:	4620      	mov	r0, r4
   82c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82c92:	bf00      	nop
   82c94:	00084530 	.word	0x00084530

00082c98 <__sfp_lock_acquire>:
   82c98:	4770      	bx	lr

00082c9a <__sfp_lock_release>:
   82c9a:	4770      	bx	lr

00082c9c <__sinit_lock_acquire>:
   82c9c:	4770      	bx	lr

00082c9e <__sinit_lock_release>:
   82c9e:	4770      	bx	lr

00082ca0 <__fp_lock_all>:
   82ca0:	4b02      	ldr	r3, [pc, #8]	; (82cac <__fp_lock_all+0xc>)
   82ca2:	4903      	ldr	r1, [pc, #12]	; (82cb0 <__fp_lock_all+0x10>)
   82ca4:	6818      	ldr	r0, [r3, #0]
   82ca6:	f000 bacd 	b.w	83244 <_fwalk>
   82caa:	bf00      	nop
   82cac:	20070008 	.word	0x20070008
   82cb0:	00082ae9 	.word	0x00082ae9

00082cb4 <__fp_unlock_all>:
   82cb4:	4b02      	ldr	r3, [pc, #8]	; (82cc0 <__fp_unlock_all+0xc>)
   82cb6:	4903      	ldr	r1, [pc, #12]	; (82cc4 <__fp_unlock_all+0x10>)
   82cb8:	6818      	ldr	r0, [r3, #0]
   82cba:	f000 bac3 	b.w	83244 <_fwalk>
   82cbe:	bf00      	nop
   82cc0:	20070008 	.word	0x20070008
   82cc4:	00082aed 	.word	0x00082aed

00082cc8 <_fputwc_r>:
   82cc8:	8993      	ldrh	r3, [r2, #12]
   82cca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   82cce:	460e      	mov	r6, r1
   82cd0:	0499      	lsls	r1, r3, #18
   82cd2:	4680      	mov	r8, r0
   82cd4:	4614      	mov	r4, r2
   82cd6:	d406      	bmi.n	82ce6 <_fputwc_r+0x1e>
   82cd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82cdc:	8193      	strh	r3, [r2, #12]
   82cde:	6e53      	ldr	r3, [r2, #100]	; 0x64
   82ce0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82ce4:	6653      	str	r3, [r2, #100]	; 0x64
   82ce6:	f000 fb0b 	bl	83300 <__locale_mb_cur_max>
   82cea:	2801      	cmp	r0, #1
   82cec:	d106      	bne.n	82cfc <_fputwc_r+0x34>
   82cee:	1e73      	subs	r3, r6, #1
   82cf0:	2bfe      	cmp	r3, #254	; 0xfe
   82cf2:	d803      	bhi.n	82cfc <_fputwc_r+0x34>
   82cf4:	f88d 6004 	strb.w	r6, [sp, #4]
   82cf8:	4607      	mov	r7, r0
   82cfa:	e00e      	b.n	82d1a <_fputwc_r+0x52>
   82cfc:	4632      	mov	r2, r6
   82cfe:	4640      	mov	r0, r8
   82d00:	a901      	add	r1, sp, #4
   82d02:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82d06:	f000 ffcb 	bl	83ca0 <_wcrtomb_r>
   82d0a:	1c42      	adds	r2, r0, #1
   82d0c:	4607      	mov	r7, r0
   82d0e:	d104      	bne.n	82d1a <_fputwc_r+0x52>
   82d10:	89a3      	ldrh	r3, [r4, #12]
   82d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82d16:	81a3      	strh	r3, [r4, #12]
   82d18:	e02b      	b.n	82d72 <_fputwc_r+0xaa>
   82d1a:	2500      	movs	r5, #0
   82d1c:	42bd      	cmp	r5, r7
   82d1e:	d024      	beq.n	82d6a <_fputwc_r+0xa2>
   82d20:	68a2      	ldr	r2, [r4, #8]
   82d22:	ab01      	add	r3, sp, #4
   82d24:	3a01      	subs	r2, #1
   82d26:	2a00      	cmp	r2, #0
   82d28:	60a2      	str	r2, [r4, #8]
   82d2a:	da16      	bge.n	82d5a <_fputwc_r+0x92>
   82d2c:	69a1      	ldr	r1, [r4, #24]
   82d2e:	428a      	cmp	r2, r1
   82d30:	db08      	blt.n	82d44 <_fputwc_r+0x7c>
   82d32:	5d5b      	ldrb	r3, [r3, r5]
   82d34:	6822      	ldr	r2, [r4, #0]
   82d36:	7013      	strb	r3, [r2, #0]
   82d38:	6823      	ldr	r3, [r4, #0]
   82d3a:	7819      	ldrb	r1, [r3, #0]
   82d3c:	290a      	cmp	r1, #10
   82d3e:	d110      	bne.n	82d62 <_fputwc_r+0x9a>
   82d40:	4640      	mov	r0, r8
   82d42:	e001      	b.n	82d48 <_fputwc_r+0x80>
   82d44:	5d59      	ldrb	r1, [r3, r5]
   82d46:	4640      	mov	r0, r8
   82d48:	4622      	mov	r2, r4
   82d4a:	f7ff fd1d 	bl	82788 <__swbuf_r>
   82d4e:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   82d52:	4258      	negs	r0, r3
   82d54:	4158      	adcs	r0, r3
   82d56:	b130      	cbz	r0, 82d66 <_fputwc_r+0x9e>
   82d58:	e009      	b.n	82d6e <_fputwc_r+0xa6>
   82d5a:	5d5b      	ldrb	r3, [r3, r5]
   82d5c:	6822      	ldr	r2, [r4, #0]
   82d5e:	7013      	strb	r3, [r2, #0]
   82d60:	6823      	ldr	r3, [r4, #0]
   82d62:	3301      	adds	r3, #1
   82d64:	6023      	str	r3, [r4, #0]
   82d66:	3501      	adds	r5, #1
   82d68:	e7d8      	b.n	82d1c <_fputwc_r+0x54>
   82d6a:	4630      	mov	r0, r6
   82d6c:	e001      	b.n	82d72 <_fputwc_r+0xaa>
   82d6e:	f04f 30ff 	mov.w	r0, #4294967295
   82d72:	b002      	add	sp, #8
   82d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082d78 <fputwc>:
   82d78:	4b08      	ldr	r3, [pc, #32]	; (82d9c <fputwc+0x24>)
   82d7a:	b570      	push	{r4, r5, r6, lr}
   82d7c:	681c      	ldr	r4, [r3, #0]
   82d7e:	4606      	mov	r6, r0
   82d80:	460d      	mov	r5, r1
   82d82:	b124      	cbz	r4, 82d8e <fputwc+0x16>
   82d84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   82d86:	b913      	cbnz	r3, 82d8e <fputwc+0x16>
   82d88:	4620      	mov	r0, r4
   82d8a:	f7ff fed3 	bl	82b34 <__sinit>
   82d8e:	4620      	mov	r0, r4
   82d90:	4631      	mov	r1, r6
   82d92:	462a      	mov	r2, r5
   82d94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   82d98:	f7ff bf96 	b.w	82cc8 <_fputwc_r>
   82d9c:	20070008 	.word	0x20070008

00082da0 <_malloc_trim_r>:
   82da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82da2:	4d23      	ldr	r5, [pc, #140]	; (82e30 <_malloc_trim_r+0x90>)
   82da4:	460e      	mov	r6, r1
   82da6:	4604      	mov	r4, r0
   82da8:	f000 fd6d 	bl	83886 <__malloc_lock>
   82dac:	68ab      	ldr	r3, [r5, #8]
   82dae:	685f      	ldr	r7, [r3, #4]
   82db0:	f027 0703 	bic.w	r7, r7, #3
   82db4:	1bbe      	subs	r6, r7, r6
   82db6:	f606 76ef 	addw	r6, r6, #4079	; 0xfef
   82dba:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
   82dbe:	f026 060f 	bic.w	r6, r6, #15
   82dc2:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   82dc6:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   82dca:	da04      	bge.n	82dd6 <_malloc_trim_r+0x36>
   82dcc:	4620      	mov	r0, r4
   82dce:	f000 fd5b 	bl	83888 <__malloc_unlock>
   82dd2:	2000      	movs	r0, #0
   82dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82dd6:	4620      	mov	r0, r4
   82dd8:	2100      	movs	r1, #0
   82dda:	f000 ff01 	bl	83be0 <_sbrk_r>
   82dde:	68ab      	ldr	r3, [r5, #8]
   82de0:	443b      	add	r3, r7
   82de2:	4298      	cmp	r0, r3
   82de4:	d1f2      	bne.n	82dcc <_malloc_trim_r+0x2c>
   82de6:	4620      	mov	r0, r4
   82de8:	4271      	negs	r1, r6
   82dea:	f000 fef9 	bl	83be0 <_sbrk_r>
   82dee:	3001      	adds	r0, #1
   82df0:	d110      	bne.n	82e14 <_malloc_trim_r+0x74>
   82df2:	4620      	mov	r0, r4
   82df4:	2100      	movs	r1, #0
   82df6:	f000 fef3 	bl	83be0 <_sbrk_r>
   82dfa:	68ab      	ldr	r3, [r5, #8]
   82dfc:	1ac2      	subs	r2, r0, r3
   82dfe:	2a0f      	cmp	r2, #15
   82e00:	dde4      	ble.n	82dcc <_malloc_trim_r+0x2c>
   82e02:	490c      	ldr	r1, [pc, #48]	; (82e34 <_malloc_trim_r+0x94>)
   82e04:	f042 0201 	orr.w	r2, r2, #1
   82e08:	6809      	ldr	r1, [r1, #0]
   82e0a:	605a      	str	r2, [r3, #4]
   82e0c:	1a40      	subs	r0, r0, r1
   82e0e:	490a      	ldr	r1, [pc, #40]	; (82e38 <_malloc_trim_r+0x98>)
   82e10:	6008      	str	r0, [r1, #0]
   82e12:	e7db      	b.n	82dcc <_malloc_trim_r+0x2c>
   82e14:	68ab      	ldr	r3, [r5, #8]
   82e16:	1bbf      	subs	r7, r7, r6
   82e18:	f047 0701 	orr.w	r7, r7, #1
   82e1c:	605f      	str	r7, [r3, #4]
   82e1e:	4b06      	ldr	r3, [pc, #24]	; (82e38 <_malloc_trim_r+0x98>)
   82e20:	4620      	mov	r0, r4
   82e22:	681a      	ldr	r2, [r3, #0]
   82e24:	1b96      	subs	r6, r2, r6
   82e26:	601e      	str	r6, [r3, #0]
   82e28:	f000 fd2e 	bl	83888 <__malloc_unlock>
   82e2c:	2001      	movs	r0, #1
   82e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82e30:	200704b4 	.word	0x200704b4
   82e34:	200708bc 	.word	0x200708bc
   82e38:	200709e4 	.word	0x200709e4

00082e3c <_free_r>:
   82e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82e3e:	4606      	mov	r6, r0
   82e40:	460d      	mov	r5, r1
   82e42:	2900      	cmp	r1, #0
   82e44:	f000 80a9 	beq.w	82f9a <_free_r+0x15e>
   82e48:	f000 fd1d 	bl	83886 <__malloc_lock>
   82e4c:	f855 cc04 	ldr.w	ip, [r5, #-4]
   82e50:	4c52      	ldr	r4, [pc, #328]	; (82f9c <_free_r+0x160>)
   82e52:	f1a5 0308 	sub.w	r3, r5, #8
   82e56:	f02c 0201 	bic.w	r2, ip, #1
   82e5a:	1898      	adds	r0, r3, r2
   82e5c:	68a1      	ldr	r1, [r4, #8]
   82e5e:	6847      	ldr	r7, [r0, #4]
   82e60:	4288      	cmp	r0, r1
   82e62:	f027 0703 	bic.w	r7, r7, #3
   82e66:	f00c 0101 	and.w	r1, ip, #1
   82e6a:	d11b      	bne.n	82ea4 <_free_r+0x68>
   82e6c:	443a      	add	r2, r7
   82e6e:	b939      	cbnz	r1, 82e80 <_free_r+0x44>
   82e70:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82e74:	1a5b      	subs	r3, r3, r1
   82e76:	6898      	ldr	r0, [r3, #8]
   82e78:	440a      	add	r2, r1
   82e7a:	68d9      	ldr	r1, [r3, #12]
   82e7c:	60c1      	str	r1, [r0, #12]
   82e7e:	6088      	str	r0, [r1, #8]
   82e80:	f042 0101 	orr.w	r1, r2, #1
   82e84:	6059      	str	r1, [r3, #4]
   82e86:	60a3      	str	r3, [r4, #8]
   82e88:	4b45      	ldr	r3, [pc, #276]	; (82fa0 <_free_r+0x164>)
   82e8a:	681b      	ldr	r3, [r3, #0]
   82e8c:	429a      	cmp	r2, r3
   82e8e:	d304      	bcc.n	82e9a <_free_r+0x5e>
   82e90:	4b44      	ldr	r3, [pc, #272]	; (82fa4 <_free_r+0x168>)
   82e92:	4630      	mov	r0, r6
   82e94:	6819      	ldr	r1, [r3, #0]
   82e96:	f7ff ff83 	bl	82da0 <_malloc_trim_r>
   82e9a:	4630      	mov	r0, r6
   82e9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   82ea0:	f000 bcf2 	b.w	83888 <__malloc_unlock>
   82ea4:	6047      	str	r7, [r0, #4]
   82ea6:	b979      	cbnz	r1, 82ec8 <_free_r+0x8c>
   82ea8:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82eac:	f104 0c08 	add.w	ip, r4, #8
   82eb0:	1b5b      	subs	r3, r3, r5
   82eb2:	442a      	add	r2, r5
   82eb4:	689d      	ldr	r5, [r3, #8]
   82eb6:	4565      	cmp	r5, ip
   82eb8:	d008      	beq.n	82ecc <_free_r+0x90>
   82eba:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   82ebe:	f8c5 c00c 	str.w	ip, [r5, #12]
   82ec2:	f8cc 5008 	str.w	r5, [ip, #8]
   82ec6:	e002      	b.n	82ece <_free_r+0x92>
   82ec8:	2100      	movs	r1, #0
   82eca:	e000      	b.n	82ece <_free_r+0x92>
   82ecc:	2101      	movs	r1, #1
   82ece:	19c5      	adds	r5, r0, r7
   82ed0:	686d      	ldr	r5, [r5, #4]
   82ed2:	07ed      	lsls	r5, r5, #31
   82ed4:	d40e      	bmi.n	82ef4 <_free_r+0xb8>
   82ed6:	443a      	add	r2, r7
   82ed8:	6885      	ldr	r5, [r0, #8]
   82eda:	b941      	cbnz	r1, 82eee <_free_r+0xb2>
   82edc:	4f32      	ldr	r7, [pc, #200]	; (82fa8 <_free_r+0x16c>)
   82ede:	42bd      	cmp	r5, r7
   82ee0:	d105      	bne.n	82eee <_free_r+0xb2>
   82ee2:	6163      	str	r3, [r4, #20]
   82ee4:	6123      	str	r3, [r4, #16]
   82ee6:	2101      	movs	r1, #1
   82ee8:	60dd      	str	r5, [r3, #12]
   82eea:	609d      	str	r5, [r3, #8]
   82eec:	e002      	b.n	82ef4 <_free_r+0xb8>
   82eee:	68c0      	ldr	r0, [r0, #12]
   82ef0:	60e8      	str	r0, [r5, #12]
   82ef2:	6085      	str	r5, [r0, #8]
   82ef4:	f042 0001 	orr.w	r0, r2, #1
   82ef8:	6058      	str	r0, [r3, #4]
   82efa:	509a      	str	r2, [r3, r2]
   82efc:	2900      	cmp	r1, #0
   82efe:	d1cc      	bne.n	82e9a <_free_r+0x5e>
   82f00:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   82f04:	d20e      	bcs.n	82f24 <_free_r+0xe8>
   82f06:	08d2      	lsrs	r2, r2, #3
   82f08:	1091      	asrs	r1, r2, #2
   82f0a:	2001      	movs	r0, #1
   82f0c:	4088      	lsls	r0, r1
   82f0e:	6861      	ldr	r1, [r4, #4]
   82f10:	4301      	orrs	r1, r0
   82f12:	6061      	str	r1, [r4, #4]
   82f14:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
   82f18:	68a2      	ldr	r2, [r4, #8]
   82f1a:	60dc      	str	r4, [r3, #12]
   82f1c:	609a      	str	r2, [r3, #8]
   82f1e:	60a3      	str	r3, [r4, #8]
   82f20:	60d3      	str	r3, [r2, #12]
   82f22:	e7ba      	b.n	82e9a <_free_r+0x5e>
   82f24:	0a51      	lsrs	r1, r2, #9
   82f26:	2904      	cmp	r1, #4
   82f28:	d802      	bhi.n	82f30 <_free_r+0xf4>
   82f2a:	0991      	lsrs	r1, r2, #6
   82f2c:	3138      	adds	r1, #56	; 0x38
   82f2e:	e015      	b.n	82f5c <_free_r+0x120>
   82f30:	2914      	cmp	r1, #20
   82f32:	d801      	bhi.n	82f38 <_free_r+0xfc>
   82f34:	315b      	adds	r1, #91	; 0x5b
   82f36:	e011      	b.n	82f5c <_free_r+0x120>
   82f38:	2954      	cmp	r1, #84	; 0x54
   82f3a:	d802      	bhi.n	82f42 <_free_r+0x106>
   82f3c:	0b11      	lsrs	r1, r2, #12
   82f3e:	316e      	adds	r1, #110	; 0x6e
   82f40:	e00c      	b.n	82f5c <_free_r+0x120>
   82f42:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
   82f46:	d802      	bhi.n	82f4e <_free_r+0x112>
   82f48:	0bd1      	lsrs	r1, r2, #15
   82f4a:	3177      	adds	r1, #119	; 0x77
   82f4c:	e006      	b.n	82f5c <_free_r+0x120>
   82f4e:	f240 5054 	movw	r0, #1364	; 0x554
   82f52:	4281      	cmp	r1, r0
   82f54:	bf9a      	itte	ls
   82f56:	0c91      	lsrls	r1, r2, #18
   82f58:	317c      	addls	r1, #124	; 0x7c
   82f5a:	217e      	movhi	r1, #126	; 0x7e
   82f5c:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
   82f60:	68a5      	ldr	r5, [r4, #8]
   82f62:	480e      	ldr	r0, [pc, #56]	; (82f9c <_free_r+0x160>)
   82f64:	42a5      	cmp	r5, r4
   82f66:	d001      	beq.n	82f6c <_free_r+0x130>
   82f68:	4629      	mov	r1, r5
   82f6a:	e00b      	b.n	82f84 <_free_r+0x148>
   82f6c:	2201      	movs	r2, #1
   82f6e:	1089      	asrs	r1, r1, #2
   82f70:	fa02 f101 	lsl.w	r1, r2, r1
   82f74:	6842      	ldr	r2, [r0, #4]
   82f76:	430a      	orrs	r2, r1
   82f78:	6042      	str	r2, [r0, #4]
   82f7a:	4629      	mov	r1, r5
   82f7c:	e008      	b.n	82f90 <_free_r+0x154>
   82f7e:	6889      	ldr	r1, [r1, #8]
   82f80:	42a1      	cmp	r1, r4
   82f82:	d004      	beq.n	82f8e <_free_r+0x152>
   82f84:	6848      	ldr	r0, [r1, #4]
   82f86:	f020 0003 	bic.w	r0, r0, #3
   82f8a:	4282      	cmp	r2, r0
   82f8c:	d3f7      	bcc.n	82f7e <_free_r+0x142>
   82f8e:	68cd      	ldr	r5, [r1, #12]
   82f90:	60dd      	str	r5, [r3, #12]
   82f92:	6099      	str	r1, [r3, #8]
   82f94:	60ab      	str	r3, [r5, #8]
   82f96:	60cb      	str	r3, [r1, #12]
   82f98:	e77f      	b.n	82e9a <_free_r+0x5e>
   82f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82f9c:	200704b4 	.word	0x200704b4
   82fa0:	200708c0 	.word	0x200708c0
   82fa4:	200709e0 	.word	0x200709e0
   82fa8:	200704bc 	.word	0x200704bc

00082fac <__sfvwrite_r>:
   82fac:	6893      	ldr	r3, [r2, #8]
   82fae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82fb2:	4680      	mov	r8, r0
   82fb4:	460c      	mov	r4, r1
   82fb6:	4691      	mov	r9, r2
   82fb8:	b90b      	cbnz	r3, 82fbe <__sfvwrite_r+0x12>
   82fba:	2000      	movs	r0, #0
   82fbc:	e13c      	b.n	83238 <__sfvwrite_r+0x28c>
   82fbe:	898b      	ldrh	r3, [r1, #12]
   82fc0:	0718      	lsls	r0, r3, #28
   82fc2:	d50e      	bpl.n	82fe2 <__sfvwrite_r+0x36>
   82fc4:	690b      	ldr	r3, [r1, #16]
   82fc6:	b163      	cbz	r3, 82fe2 <__sfvwrite_r+0x36>
   82fc8:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
   82fcc:	f8d9 6000 	ldr.w	r6, [r9]
   82fd0:	f00a 0c02 	and.w	ip, sl, #2
   82fd4:	fa1f f38c 	uxth.w	r3, ip
   82fd8:	b333      	cbz	r3, 83028 <__sfvwrite_r+0x7c>
   82fda:	f04f 0a00 	mov.w	sl, #0
   82fde:	4657      	mov	r7, sl
   82fe0:	e01b      	b.n	8301a <__sfvwrite_r+0x6e>
   82fe2:	4640      	mov	r0, r8
   82fe4:	4621      	mov	r1, r4
   82fe6:	f7ff fc21 	bl	8282c <__swsetup_r>
   82fea:	2800      	cmp	r0, #0
   82fec:	d0ec      	beq.n	82fc8 <__sfvwrite_r+0x1c>
   82fee:	e121      	b.n	83234 <__sfvwrite_r+0x288>
   82ff0:	4b93      	ldr	r3, [pc, #588]	; (83240 <__sfvwrite_r+0x294>)
   82ff2:	4640      	mov	r0, r8
   82ff4:	429f      	cmp	r7, r3
   82ff6:	bf38      	it	cc
   82ff8:	463b      	movcc	r3, r7
   82ffa:	69e1      	ldr	r1, [r4, #28]
   82ffc:	4652      	mov	r2, sl
   82ffe:	6a65      	ldr	r5, [r4, #36]	; 0x24
   83000:	47a8      	blx	r5
   83002:	2800      	cmp	r0, #0
   83004:	f340 8112 	ble.w	8322c <__sfvwrite_r+0x280>
   83008:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8300c:	4482      	add	sl, r0
   8300e:	1a3f      	subs	r7, r7, r0
   83010:	1a18      	subs	r0, r3, r0
   83012:	f8c9 0008 	str.w	r0, [r9, #8]
   83016:	2800      	cmp	r0, #0
   83018:	d0cf      	beq.n	82fba <__sfvwrite_r+0xe>
   8301a:	2f00      	cmp	r7, #0
   8301c:	d1e8      	bne.n	82ff0 <__sfvwrite_r+0x44>
   8301e:	f8d6 a000 	ldr.w	sl, [r6]
   83022:	6877      	ldr	r7, [r6, #4]
   83024:	3608      	adds	r6, #8
   83026:	e7f8      	b.n	8301a <__sfvwrite_r+0x6e>
   83028:	f01a 0a01 	ands.w	sl, sl, #1
   8302c:	d004      	beq.n	83038 <__sfvwrite_r+0x8c>
   8302e:	469b      	mov	fp, r3
   83030:	9301      	str	r3, [sp, #4]
   83032:	461f      	mov	r7, r3
   83034:	469a      	mov	sl, r3
   83036:	e0bf      	b.n	831b8 <__sfvwrite_r+0x20c>
   83038:	4655      	mov	r5, sl
   8303a:	b925      	cbnz	r5, 83046 <__sfvwrite_r+0x9a>
   8303c:	f8d6 a000 	ldr.w	sl, [r6]
   83040:	6875      	ldr	r5, [r6, #4]
   83042:	3608      	adds	r6, #8
   83044:	e7f9      	b.n	8303a <__sfvwrite_r+0x8e>
   83046:	89a2      	ldrh	r2, [r4, #12]
   83048:	68a7      	ldr	r7, [r4, #8]
   8304a:	0591      	lsls	r1, r2, #22
   8304c:	d552      	bpl.n	830f4 <__sfvwrite_r+0x148>
   8304e:	42bd      	cmp	r5, r7
   83050:	d342      	bcc.n	830d8 <__sfvwrite_r+0x12c>
   83052:	f412 6f90 	tst.w	r2, #1152	; 0x480
   83056:	d03d      	beq.n	830d4 <__sfvwrite_r+0x128>
   83058:	6921      	ldr	r1, [r4, #16]
   8305a:	6823      	ldr	r3, [r4, #0]
   8305c:	2002      	movs	r0, #2
   8305e:	1a5b      	subs	r3, r3, r1
   83060:	9301      	str	r3, [sp, #4]
   83062:	6963      	ldr	r3, [r4, #20]
   83064:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   83068:	fb93 fbf0 	sdiv	fp, r3, r0
   8306c:	9b01      	ldr	r3, [sp, #4]
   8306e:	1c58      	adds	r0, r3, #1
   83070:	4428      	add	r0, r5
   83072:	4583      	cmp	fp, r0
   83074:	bf38      	it	cc
   83076:	4683      	movcc	fp, r0
   83078:	0553      	lsls	r3, r2, #21
   8307a:	4640      	mov	r0, r8
   8307c:	d50f      	bpl.n	8309e <__sfvwrite_r+0xf2>
   8307e:	4659      	mov	r1, fp
   83080:	f000 f9d0 	bl	83424 <_malloc_r>
   83084:	4607      	mov	r7, r0
   83086:	b1b8      	cbz	r0, 830b8 <__sfvwrite_r+0x10c>
   83088:	9a01      	ldr	r2, [sp, #4]
   8308a:	6921      	ldr	r1, [r4, #16]
   8308c:	f7fe fe52 	bl	81d34 <memcpy>
   83090:	89a2      	ldrh	r2, [r4, #12]
   83092:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   83096:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8309a:	81a2      	strh	r2, [r4, #12]
   8309c:	e010      	b.n	830c0 <__sfvwrite_r+0x114>
   8309e:	465a      	mov	r2, fp
   830a0:	f000 fbf4 	bl	8388c <_realloc_r>
   830a4:	4607      	mov	r7, r0
   830a6:	b958      	cbnz	r0, 830c0 <__sfvwrite_r+0x114>
   830a8:	4640      	mov	r0, r8
   830aa:	6921      	ldr	r1, [r4, #16]
   830ac:	f7ff fec6 	bl	82e3c <_free_r>
   830b0:	89a3      	ldrh	r3, [r4, #12]
   830b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   830b6:	81a3      	strh	r3, [r4, #12]
   830b8:	230c      	movs	r3, #12
   830ba:	f8c8 3000 	str.w	r3, [r8]
   830be:	e0b5      	b.n	8322c <__sfvwrite_r+0x280>
   830c0:	9b01      	ldr	r3, [sp, #4]
   830c2:	6127      	str	r7, [r4, #16]
   830c4:	441f      	add	r7, r3
   830c6:	ebc3 030b 	rsb	r3, r3, fp
   830ca:	6027      	str	r7, [r4, #0]
   830cc:	f8c4 b014 	str.w	fp, [r4, #20]
   830d0:	462f      	mov	r7, r5
   830d2:	60a3      	str	r3, [r4, #8]
   830d4:	42bd      	cmp	r5, r7
   830d6:	d200      	bcs.n	830da <__sfvwrite_r+0x12e>
   830d8:	462f      	mov	r7, r5
   830da:	463a      	mov	r2, r7
   830dc:	6820      	ldr	r0, [r4, #0]
   830de:	4651      	mov	r1, sl
   830e0:	f000 fbb6 	bl	83850 <memmove>
   830e4:	68a3      	ldr	r3, [r4, #8]
   830e6:	1bdb      	subs	r3, r3, r7
   830e8:	60a3      	str	r3, [r4, #8]
   830ea:	6823      	ldr	r3, [r4, #0]
   830ec:	441f      	add	r7, r3
   830ee:	6027      	str	r7, [r4, #0]
   830f0:	462f      	mov	r7, r5
   830f2:	e02a      	b.n	8314a <__sfvwrite_r+0x19e>
   830f4:	6820      	ldr	r0, [r4, #0]
   830f6:	6923      	ldr	r3, [r4, #16]
   830f8:	4298      	cmp	r0, r3
   830fa:	d802      	bhi.n	83102 <__sfvwrite_r+0x156>
   830fc:	6963      	ldr	r3, [r4, #20]
   830fe:	429d      	cmp	r5, r3
   83100:	d213      	bcs.n	8312a <__sfvwrite_r+0x17e>
   83102:	42bd      	cmp	r5, r7
   83104:	bf38      	it	cc
   83106:	462f      	movcc	r7, r5
   83108:	463a      	mov	r2, r7
   8310a:	4651      	mov	r1, sl
   8310c:	f000 fba0 	bl	83850 <memmove>
   83110:	68a3      	ldr	r3, [r4, #8]
   83112:	6822      	ldr	r2, [r4, #0]
   83114:	1bdb      	subs	r3, r3, r7
   83116:	443a      	add	r2, r7
   83118:	60a3      	str	r3, [r4, #8]
   8311a:	6022      	str	r2, [r4, #0]
   8311c:	b9ab      	cbnz	r3, 8314a <__sfvwrite_r+0x19e>
   8311e:	4640      	mov	r0, r8
   83120:	4621      	mov	r1, r4
   83122:	f7ff fcbe 	bl	82aa2 <_fflush_r>
   83126:	b180      	cbz	r0, 8314a <__sfvwrite_r+0x19e>
   83128:	e080      	b.n	8322c <__sfvwrite_r+0x280>
   8312a:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   8312e:	4575      	cmp	r5, lr
   83130:	bf38      	it	cc
   83132:	46ae      	movcc	lr, r5
   83134:	fb9e fef3 	sdiv	lr, lr, r3
   83138:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8313a:	4640      	mov	r0, r8
   8313c:	69e1      	ldr	r1, [r4, #28]
   8313e:	4652      	mov	r2, sl
   83140:	fb03 f30e 	mul.w	r3, r3, lr
   83144:	47b8      	blx	r7
   83146:	1e07      	subs	r7, r0, #0
   83148:	dd70      	ble.n	8322c <__sfvwrite_r+0x280>
   8314a:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8314e:	44ba      	add	sl, r7
   83150:	1bed      	subs	r5, r5, r7
   83152:	1bdf      	subs	r7, r3, r7
   83154:	f8c9 7008 	str.w	r7, [r9, #8]
   83158:	2f00      	cmp	r7, #0
   8315a:	f47f af6e 	bne.w	8303a <__sfvwrite_r+0x8e>
   8315e:	e72c      	b.n	82fba <__sfvwrite_r+0xe>
   83160:	9d01      	ldr	r5, [sp, #4]
   83162:	2d00      	cmp	r5, #0
   83164:	d031      	beq.n	831ca <__sfvwrite_r+0x21e>
   83166:	6820      	ldr	r0, [r4, #0]
   83168:	6922      	ldr	r2, [r4, #16]
   8316a:	45d3      	cmp	fp, sl
   8316c:	bf34      	ite	cc
   8316e:	465b      	movcc	r3, fp
   83170:	4653      	movcs	r3, sl
   83172:	4290      	cmp	r0, r2
   83174:	68a5      	ldr	r5, [r4, #8]
   83176:	f8d4 e014 	ldr.w	lr, [r4, #20]
   8317a:	d936      	bls.n	831ea <__sfvwrite_r+0x23e>
   8317c:	4475      	add	r5, lr
   8317e:	42ab      	cmp	r3, r5
   83180:	dd33      	ble.n	831ea <__sfvwrite_r+0x23e>
   83182:	4639      	mov	r1, r7
   83184:	462a      	mov	r2, r5
   83186:	f000 fb63 	bl	83850 <memmove>
   8318a:	6823      	ldr	r3, [r4, #0]
   8318c:	4640      	mov	r0, r8
   8318e:	442b      	add	r3, r5
   83190:	6023      	str	r3, [r4, #0]
   83192:	4621      	mov	r1, r4
   83194:	f7ff fc85 	bl	82aa2 <_fflush_r>
   83198:	2800      	cmp	r0, #0
   8319a:	d147      	bne.n	8322c <__sfvwrite_r+0x280>
   8319c:	ebbb 0b05 	subs.w	fp, fp, r5
   831a0:	d03c      	beq.n	8321c <__sfvwrite_r+0x270>
   831a2:	f8d9 3008 	ldr.w	r3, [r9, #8]
   831a6:	442f      	add	r7, r5
   831a8:	ebc5 0a0a 	rsb	sl, r5, sl
   831ac:	1b5d      	subs	r5, r3, r5
   831ae:	f8c9 5008 	str.w	r5, [r9, #8]
   831b2:	2d00      	cmp	r5, #0
   831b4:	f43f af01 	beq.w	82fba <__sfvwrite_r+0xe>
   831b8:	f1ba 0f00 	cmp.w	sl, #0
   831bc:	d1d0      	bne.n	83160 <__sfvwrite_r+0x1b4>
   831be:	2500      	movs	r5, #0
   831c0:	e896 0480 	ldmia.w	r6, {r7, sl}
   831c4:	9501      	str	r5, [sp, #4]
   831c6:	3608      	adds	r6, #8
   831c8:	e7f6      	b.n	831b8 <__sfvwrite_r+0x20c>
   831ca:	4638      	mov	r0, r7
   831cc:	210a      	movs	r1, #10
   831ce:	4652      	mov	r2, sl
   831d0:	f000 fb30 	bl	83834 <memchr>
   831d4:	b120      	cbz	r0, 831e0 <__sfvwrite_r+0x234>
   831d6:	f100 0c01 	add.w	ip, r0, #1
   831da:	ebc7 0b0c 	rsb	fp, r7, ip
   831de:	e001      	b.n	831e4 <__sfvwrite_r+0x238>
   831e0:	f10a 0b01 	add.w	fp, sl, #1
   831e4:	2501      	movs	r5, #1
   831e6:	9501      	str	r5, [sp, #4]
   831e8:	e7bd      	b.n	83166 <__sfvwrite_r+0x1ba>
   831ea:	4573      	cmp	r3, lr
   831ec:	db08      	blt.n	83200 <__sfvwrite_r+0x254>
   831ee:	6a65      	ldr	r5, [r4, #36]	; 0x24
   831f0:	4640      	mov	r0, r8
   831f2:	69e1      	ldr	r1, [r4, #28]
   831f4:	463a      	mov	r2, r7
   831f6:	4673      	mov	r3, lr
   831f8:	47a8      	blx	r5
   831fa:	1e05      	subs	r5, r0, #0
   831fc:	dcce      	bgt.n	8319c <__sfvwrite_r+0x1f0>
   831fe:	e015      	b.n	8322c <__sfvwrite_r+0x280>
   83200:	461a      	mov	r2, r3
   83202:	4639      	mov	r1, r7
   83204:	9300      	str	r3, [sp, #0]
   83206:	f000 fb23 	bl	83850 <memmove>
   8320a:	9b00      	ldr	r3, [sp, #0]
   8320c:	68a2      	ldr	r2, [r4, #8]
   8320e:	461d      	mov	r5, r3
   83210:	1ad2      	subs	r2, r2, r3
   83212:	60a2      	str	r2, [r4, #8]
   83214:	6822      	ldr	r2, [r4, #0]
   83216:	441a      	add	r2, r3
   83218:	6022      	str	r2, [r4, #0]
   8321a:	e7bf      	b.n	8319c <__sfvwrite_r+0x1f0>
   8321c:	4640      	mov	r0, r8
   8321e:	4621      	mov	r1, r4
   83220:	f7ff fc3f 	bl	82aa2 <_fflush_r>
   83224:	b910      	cbnz	r0, 8322c <__sfvwrite_r+0x280>
   83226:	f8cd b004 	str.w	fp, [sp, #4]
   8322a:	e7ba      	b.n	831a2 <__sfvwrite_r+0x1f6>
   8322c:	89a3      	ldrh	r3, [r4, #12]
   8322e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83232:	81a3      	strh	r3, [r4, #12]
   83234:	f04f 30ff 	mov.w	r0, #4294967295
   83238:	b003      	add	sp, #12
   8323a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8323e:	bf00      	nop
   83240:	7ffffc00 	.word	0x7ffffc00

00083244 <_fwalk>:
   83244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83248:	4688      	mov	r8, r1
   8324a:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
   8324e:	2600      	movs	r6, #0
   83250:	b18c      	cbz	r4, 83276 <_fwalk+0x32>
   83252:	68a5      	ldr	r5, [r4, #8]
   83254:	6867      	ldr	r7, [r4, #4]
   83256:	3f01      	subs	r7, #1
   83258:	d40b      	bmi.n	83272 <_fwalk+0x2e>
   8325a:	89ab      	ldrh	r3, [r5, #12]
   8325c:	2b01      	cmp	r3, #1
   8325e:	d906      	bls.n	8326e <_fwalk+0x2a>
   83260:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   83264:	3301      	adds	r3, #1
   83266:	d002      	beq.n	8326e <_fwalk+0x2a>
   83268:	4628      	mov	r0, r5
   8326a:	47c0      	blx	r8
   8326c:	4306      	orrs	r6, r0
   8326e:	3568      	adds	r5, #104	; 0x68
   83270:	e7f1      	b.n	83256 <_fwalk+0x12>
   83272:	6824      	ldr	r4, [r4, #0]
   83274:	e7ec      	b.n	83250 <_fwalk+0xc>
   83276:	4630      	mov	r0, r6
   83278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0008327c <_fwalk_reent>:
   8327c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83280:	4680      	mov	r8, r0
   83282:	4689      	mov	r9, r1
   83284:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
   83288:	2600      	movs	r6, #0
   8328a:	b194      	cbz	r4, 832b2 <_fwalk_reent+0x36>
   8328c:	68a5      	ldr	r5, [r4, #8]
   8328e:	6867      	ldr	r7, [r4, #4]
   83290:	3f01      	subs	r7, #1
   83292:	d40c      	bmi.n	832ae <_fwalk_reent+0x32>
   83294:	89ab      	ldrh	r3, [r5, #12]
   83296:	2b01      	cmp	r3, #1
   83298:	d907      	bls.n	832aa <_fwalk_reent+0x2e>
   8329a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   8329e:	3301      	adds	r3, #1
   832a0:	d003      	beq.n	832aa <_fwalk_reent+0x2e>
   832a2:	4640      	mov	r0, r8
   832a4:	4629      	mov	r1, r5
   832a6:	47c8      	blx	r9
   832a8:	4306      	orrs	r6, r0
   832aa:	3568      	adds	r5, #104	; 0x68
   832ac:	e7f0      	b.n	83290 <_fwalk_reent+0x14>
   832ae:	6824      	ldr	r4, [r4, #0]
   832b0:	e7eb      	b.n	8328a <_fwalk_reent+0xe>
   832b2:	4630      	mov	r0, r6
   832b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000832b8 <_setlocale_r>:
   832b8:	b510      	push	{r4, lr}
   832ba:	4614      	mov	r4, r2
   832bc:	b90a      	cbnz	r2, 832c2 <_setlocale_r+0xa>
   832be:	480b      	ldr	r0, [pc, #44]	; (832ec <_setlocale_r+0x34>)
   832c0:	bd10      	pop	{r4, pc}
   832c2:	4610      	mov	r0, r2
   832c4:	490a      	ldr	r1, [pc, #40]	; (832f0 <_setlocale_r+0x38>)
   832c6:	f000 fce0 	bl	83c8a <strcmp>
   832ca:	2800      	cmp	r0, #0
   832cc:	d0f7      	beq.n	832be <_setlocale_r+0x6>
   832ce:	4620      	mov	r0, r4
   832d0:	4906      	ldr	r1, [pc, #24]	; (832ec <_setlocale_r+0x34>)
   832d2:	f000 fcda 	bl	83c8a <strcmp>
   832d6:	2800      	cmp	r0, #0
   832d8:	d0f1      	beq.n	832be <_setlocale_r+0x6>
   832da:	4620      	mov	r0, r4
   832dc:	4905      	ldr	r1, [pc, #20]	; (832f4 <_setlocale_r+0x3c>)
   832de:	f000 fcd4 	bl	83c8a <strcmp>
   832e2:	2800      	cmp	r0, #0
   832e4:	4801      	ldr	r0, [pc, #4]	; (832ec <_setlocale_r+0x34>)
   832e6:	bf18      	it	ne
   832e8:	2000      	movne	r0, #0
   832ea:	bd10      	pop	{r4, pc}
   832ec:	00084534 	.word	0x00084534
   832f0:	00084578 	.word	0x00084578
   832f4:	0008457f 	.word	0x0008457f

000832f8 <__locale_charset>:
   832f8:	4800      	ldr	r0, [pc, #0]	; (832fc <__locale_charset+0x4>)
   832fa:	4770      	bx	lr
   832fc:	20070438 	.word	0x20070438

00083300 <__locale_mb_cur_max>:
   83300:	4b01      	ldr	r3, [pc, #4]	; (83308 <__locale_mb_cur_max+0x8>)
   83302:	6a18      	ldr	r0, [r3, #32]
   83304:	4770      	bx	lr
   83306:	bf00      	nop
   83308:	20070438 	.word	0x20070438

0008330c <__locale_msgcharset>:
   8330c:	4800      	ldr	r0, [pc, #0]	; (83310 <__locale_msgcharset+0x4>)
   8330e:	4770      	bx	lr
   83310:	2007045c 	.word	0x2007045c

00083314 <__locale_cjk_lang>:
   83314:	2000      	movs	r0, #0
   83316:	4770      	bx	lr

00083318 <_localeconv_r>:
   83318:	4800      	ldr	r0, [pc, #0]	; (8331c <_localeconv_r+0x4>)
   8331a:	4770      	bx	lr
   8331c:	2007047c 	.word	0x2007047c

00083320 <setlocale>:
   83320:	460a      	mov	r2, r1
   83322:	4903      	ldr	r1, [pc, #12]	; (83330 <setlocale+0x10>)
   83324:	4603      	mov	r3, r0
   83326:	6808      	ldr	r0, [r1, #0]
   83328:	4619      	mov	r1, r3
   8332a:	f7ff bfc5 	b.w	832b8 <_setlocale_r>
   8332e:	bf00      	nop
   83330:	20070008 	.word	0x20070008

00083334 <localeconv>:
   83334:	4800      	ldr	r0, [pc, #0]	; (83338 <localeconv+0x4>)
   83336:	4770      	bx	lr
   83338:	2007047c 	.word	0x2007047c

0008333c <__smakebuf_r>:
   8333c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8333e:	898b      	ldrh	r3, [r1, #12]
   83340:	b091      	sub	sp, #68	; 0x44
   83342:	079d      	lsls	r5, r3, #30
   83344:	4606      	mov	r6, r0
   83346:	460c      	mov	r4, r1
   83348:	d43a      	bmi.n	833c0 <__smakebuf_r+0x84>
   8334a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8334e:	2900      	cmp	r1, #0
   83350:	da0b      	bge.n	8336a <__smakebuf_r+0x2e>
   83352:	89a3      	ldrh	r3, [r4, #12]
   83354:	2700      	movs	r7, #0
   83356:	f013 0f80 	tst.w	r3, #128	; 0x80
   8335a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8335e:	bf0c      	ite	eq
   83360:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   83364:	2540      	movne	r5, #64	; 0x40
   83366:	81a3      	strh	r3, [r4, #12]
   83368:	e01f      	b.n	833aa <__smakebuf_r+0x6e>
   8336a:	aa01      	add	r2, sp, #4
   8336c:	f000 fd58 	bl	83e20 <_fstat_r>
   83370:	2800      	cmp	r0, #0
   83372:	dbee      	blt.n	83352 <__smakebuf_r+0x16>
   83374:	9b02      	ldr	r3, [sp, #8]
   83376:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   8337a:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   8337e:	424f      	negs	r7, r1
   83380:	414f      	adcs	r7, r1
   83382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   83386:	89a3      	ldrh	r3, [r4, #12]
   83388:	d10a      	bne.n	833a0 <__smakebuf_r+0x64>
   8338a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   8338c:	491b      	ldr	r1, [pc, #108]	; (833fc <__smakebuf_r+0xc0>)
   8338e:	428a      	cmp	r2, r1
   83390:	d106      	bne.n	833a0 <__smakebuf_r+0x64>
   83392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   83396:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8339a:	81a3      	strh	r3, [r4, #12]
   8339c:	64e5      	str	r5, [r4, #76]	; 0x4c
   8339e:	e004      	b.n	833aa <__smakebuf_r+0x6e>
   833a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   833a4:	81a3      	strh	r3, [r4, #12]
   833a6:	f44f 6580 	mov.w	r5, #1024	; 0x400
   833aa:	4630      	mov	r0, r6
   833ac:	4629      	mov	r1, r5
   833ae:	f000 f839 	bl	83424 <_malloc_r>
   833b2:	b960      	cbnz	r0, 833ce <__smakebuf_r+0x92>
   833b4:	89a3      	ldrh	r3, [r4, #12]
   833b6:	059a      	lsls	r2, r3, #22
   833b8:	d41d      	bmi.n	833f6 <__smakebuf_r+0xba>
   833ba:	f043 0302 	orr.w	r3, r3, #2
   833be:	81a3      	strh	r3, [r4, #12]
   833c0:	f104 0343 	add.w	r3, r4, #67	; 0x43
   833c4:	6023      	str	r3, [r4, #0]
   833c6:	6123      	str	r3, [r4, #16]
   833c8:	2301      	movs	r3, #1
   833ca:	6163      	str	r3, [r4, #20]
   833cc:	e013      	b.n	833f6 <__smakebuf_r+0xba>
   833ce:	4b0c      	ldr	r3, [pc, #48]	; (83400 <__smakebuf_r+0xc4>)
   833d0:	63f3      	str	r3, [r6, #60]	; 0x3c
   833d2:	89a3      	ldrh	r3, [r4, #12]
   833d4:	6020      	str	r0, [r4, #0]
   833d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   833da:	81a3      	strh	r3, [r4, #12]
   833dc:	6120      	str	r0, [r4, #16]
   833de:	6165      	str	r5, [r4, #20]
   833e0:	b14f      	cbz	r7, 833f6 <__smakebuf_r+0xba>
   833e2:	4630      	mov	r0, r6
   833e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   833e8:	f000 fd2c 	bl	83e44 <_isatty_r>
   833ec:	b118      	cbz	r0, 833f6 <__smakebuf_r+0xba>
   833ee:	89a3      	ldrh	r3, [r4, #12]
   833f0:	f043 0301 	orr.w	r3, r3, #1
   833f4:	81a3      	strh	r3, [r4, #12]
   833f6:	b011      	add	sp, #68	; 0x44
   833f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   833fa:	bf00      	nop
   833fc:	00083c5f 	.word	0x00083c5f
   83400:	00082af1 	.word	0x00082af1

00083404 <malloc>:
   83404:	4b02      	ldr	r3, [pc, #8]	; (83410 <malloc+0xc>)
   83406:	4601      	mov	r1, r0
   83408:	6818      	ldr	r0, [r3, #0]
   8340a:	f000 b80b 	b.w	83424 <_malloc_r>
   8340e:	bf00      	nop
   83410:	20070008 	.word	0x20070008

00083414 <free>:
   83414:	4b02      	ldr	r3, [pc, #8]	; (83420 <free+0xc>)
   83416:	4601      	mov	r1, r0
   83418:	6818      	ldr	r0, [r3, #0]
   8341a:	f7ff bd0f 	b.w	82e3c <_free_r>
   8341e:	bf00      	nop
   83420:	20070008 	.word	0x20070008

00083424 <_malloc_r>:
   83424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83428:	f101 040b 	add.w	r4, r1, #11
   8342c:	2c16      	cmp	r4, #22
   8342e:	4607      	mov	r7, r0
   83430:	d903      	bls.n	8343a <_malloc_r+0x16>
   83432:	f034 0407 	bics.w	r4, r4, #7
   83436:	d501      	bpl.n	8343c <_malloc_r+0x18>
   83438:	e002      	b.n	83440 <_malloc_r+0x1c>
   8343a:	2410      	movs	r4, #16
   8343c:	428c      	cmp	r4, r1
   8343e:	d202      	bcs.n	83446 <_malloc_r+0x22>
   83440:	230c      	movs	r3, #12
   83442:	603b      	str	r3, [r7, #0]
   83444:	e1de      	b.n	83804 <_malloc_r+0x3e0>
   83446:	4638      	mov	r0, r7
   83448:	f000 fa1d 	bl	83886 <__malloc_lock>
   8344c:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   83450:	4da3      	ldr	r5, [pc, #652]	; (836e0 <_malloc_r+0x2bc>)
   83452:	d214      	bcs.n	8347e <_malloc_r+0x5a>
   83454:	08e2      	lsrs	r2, r4, #3
   83456:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   8345a:	68de      	ldr	r6, [r3, #12]
   8345c:	429e      	cmp	r6, r3
   8345e:	d106      	bne.n	8346e <_malloc_r+0x4a>
   83460:	f106 0308 	add.w	r3, r6, #8
   83464:	6976      	ldr	r6, [r6, #20]
   83466:	429e      	cmp	r6, r3
   83468:	bf08      	it	eq
   8346a:	3202      	addeq	r2, #2
   8346c:	d043      	beq.n	834f6 <_malloc_r+0xd2>
   8346e:	6873      	ldr	r3, [r6, #4]
   83470:	68f2      	ldr	r2, [r6, #12]
   83472:	68b1      	ldr	r1, [r6, #8]
   83474:	f023 0303 	bic.w	r3, r3, #3
   83478:	60ca      	str	r2, [r1, #12]
   8347a:	6091      	str	r1, [r2, #8]
   8347c:	e05d      	b.n	8353a <_malloc_r+0x116>
   8347e:	0a62      	lsrs	r2, r4, #9
   83480:	d01a      	beq.n	834b8 <_malloc_r+0x94>
   83482:	2a04      	cmp	r2, #4
   83484:	d802      	bhi.n	8348c <_malloc_r+0x68>
   83486:	09a2      	lsrs	r2, r4, #6
   83488:	3238      	adds	r2, #56	; 0x38
   8348a:	e018      	b.n	834be <_malloc_r+0x9a>
   8348c:	2a14      	cmp	r2, #20
   8348e:	d801      	bhi.n	83494 <_malloc_r+0x70>
   83490:	325b      	adds	r2, #91	; 0x5b
   83492:	e014      	b.n	834be <_malloc_r+0x9a>
   83494:	2a54      	cmp	r2, #84	; 0x54
   83496:	d802      	bhi.n	8349e <_malloc_r+0x7a>
   83498:	0b22      	lsrs	r2, r4, #12
   8349a:	326e      	adds	r2, #110	; 0x6e
   8349c:	e00f      	b.n	834be <_malloc_r+0x9a>
   8349e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   834a2:	d802      	bhi.n	834aa <_malloc_r+0x86>
   834a4:	0be2      	lsrs	r2, r4, #15
   834a6:	3277      	adds	r2, #119	; 0x77
   834a8:	e009      	b.n	834be <_malloc_r+0x9a>
   834aa:	f240 5354 	movw	r3, #1364	; 0x554
   834ae:	429a      	cmp	r2, r3
   834b0:	d804      	bhi.n	834bc <_malloc_r+0x98>
   834b2:	0ca2      	lsrs	r2, r4, #18
   834b4:	327c      	adds	r2, #124	; 0x7c
   834b6:	e002      	b.n	834be <_malloc_r+0x9a>
   834b8:	223f      	movs	r2, #63	; 0x3f
   834ba:	e000      	b.n	834be <_malloc_r+0x9a>
   834bc:	227e      	movs	r2, #126	; 0x7e
   834be:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   834c2:	68de      	ldr	r6, [r3, #12]
   834c4:	429e      	cmp	r6, r3
   834c6:	d015      	beq.n	834f4 <_malloc_r+0xd0>
   834c8:	6871      	ldr	r1, [r6, #4]
   834ca:	f021 0103 	bic.w	r1, r1, #3
   834ce:	1b08      	subs	r0, r1, r4
   834d0:	280f      	cmp	r0, #15
   834d2:	dd01      	ble.n	834d8 <_malloc_r+0xb4>
   834d4:	3a01      	subs	r2, #1
   834d6:	e00d      	b.n	834f4 <_malloc_r+0xd0>
   834d8:	2800      	cmp	r0, #0
   834da:	db09      	blt.n	834f0 <_malloc_r+0xcc>
   834dc:	68f3      	ldr	r3, [r6, #12]
   834de:	68b2      	ldr	r2, [r6, #8]
   834e0:	60d3      	str	r3, [r2, #12]
   834e2:	609a      	str	r2, [r3, #8]
   834e4:	1873      	adds	r3, r6, r1
   834e6:	685a      	ldr	r2, [r3, #4]
   834e8:	f042 0201 	orr.w	r2, r2, #1
   834ec:	605a      	str	r2, [r3, #4]
   834ee:	e194      	b.n	8381a <_malloc_r+0x3f6>
   834f0:	68f6      	ldr	r6, [r6, #12]
   834f2:	e7e7      	b.n	834c4 <_malloc_r+0xa0>
   834f4:	3201      	adds	r2, #1
   834f6:	497a      	ldr	r1, [pc, #488]	; (836e0 <_malloc_r+0x2bc>)
   834f8:	692e      	ldr	r6, [r5, #16]
   834fa:	f101 0008 	add.w	r0, r1, #8
   834fe:	4286      	cmp	r6, r0
   83500:	4686      	mov	lr, r0
   83502:	d06d      	beq.n	835e0 <_malloc_r+0x1bc>
   83504:	6873      	ldr	r3, [r6, #4]
   83506:	f023 0303 	bic.w	r3, r3, #3
   8350a:	ebc4 0c03 	rsb	ip, r4, r3
   8350e:	f1bc 0f0f 	cmp.w	ip, #15
   83512:	dd0d      	ble.n	83530 <_malloc_r+0x10c>
   83514:	1933      	adds	r3, r6, r4
   83516:	f04c 0201 	orr.w	r2, ip, #1
   8351a:	f044 0401 	orr.w	r4, r4, #1
   8351e:	6074      	str	r4, [r6, #4]
   83520:	614b      	str	r3, [r1, #20]
   83522:	610b      	str	r3, [r1, #16]
   83524:	60d8      	str	r0, [r3, #12]
   83526:	6098      	str	r0, [r3, #8]
   83528:	605a      	str	r2, [r3, #4]
   8352a:	f843 c00c 	str.w	ip, [r3, ip]
   8352e:	e174      	b.n	8381a <_malloc_r+0x3f6>
   83530:	f1bc 0f00 	cmp.w	ip, #0
   83534:	6148      	str	r0, [r1, #20]
   83536:	6108      	str	r0, [r1, #16]
   83538:	db01      	blt.n	8353e <_malloc_r+0x11a>
   8353a:	4433      	add	r3, r6
   8353c:	e7d3      	b.n	834e6 <_malloc_r+0xc2>
   8353e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83542:	d211      	bcs.n	83568 <_malloc_r+0x144>
   83544:	08db      	lsrs	r3, r3, #3
   83546:	1098      	asrs	r0, r3, #2
   83548:	f04f 0c01 	mov.w	ip, #1
   8354c:	fa0c fc00 	lsl.w	ip, ip, r0
   83550:	6848      	ldr	r0, [r1, #4]
   83552:	ea4c 0000 	orr.w	r0, ip, r0
   83556:	6048      	str	r0, [r1, #4]
   83558:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   8355c:	688b      	ldr	r3, [r1, #8]
   8355e:	60f1      	str	r1, [r6, #12]
   83560:	60b3      	str	r3, [r6, #8]
   83562:	608e      	str	r6, [r1, #8]
   83564:	60de      	str	r6, [r3, #12]
   83566:	e03b      	b.n	835e0 <_malloc_r+0x1bc>
   83568:	0a58      	lsrs	r0, r3, #9
   8356a:	2804      	cmp	r0, #4
   8356c:	d802      	bhi.n	83574 <_malloc_r+0x150>
   8356e:	0998      	lsrs	r0, r3, #6
   83570:	3038      	adds	r0, #56	; 0x38
   83572:	e015      	b.n	835a0 <_malloc_r+0x17c>
   83574:	2814      	cmp	r0, #20
   83576:	d801      	bhi.n	8357c <_malloc_r+0x158>
   83578:	305b      	adds	r0, #91	; 0x5b
   8357a:	e011      	b.n	835a0 <_malloc_r+0x17c>
   8357c:	2854      	cmp	r0, #84	; 0x54
   8357e:	d802      	bhi.n	83586 <_malloc_r+0x162>
   83580:	0b18      	lsrs	r0, r3, #12
   83582:	306e      	adds	r0, #110	; 0x6e
   83584:	e00c      	b.n	835a0 <_malloc_r+0x17c>
   83586:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   8358a:	d802      	bhi.n	83592 <_malloc_r+0x16e>
   8358c:	0bd8      	lsrs	r0, r3, #15
   8358e:	3077      	adds	r0, #119	; 0x77
   83590:	e006      	b.n	835a0 <_malloc_r+0x17c>
   83592:	f240 5154 	movw	r1, #1364	; 0x554
   83596:	4288      	cmp	r0, r1
   83598:	bf9a      	itte	ls
   8359a:	0c98      	lsrls	r0, r3, #18
   8359c:	307c      	addls	r0, #124	; 0x7c
   8359e:	207e      	movhi	r0, #126	; 0x7e
   835a0:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
   835a4:	f8dc 1008 	ldr.w	r1, [ip, #8]
   835a8:	f8df 8134 	ldr.w	r8, [pc, #308]	; 836e0 <_malloc_r+0x2bc>
   835ac:	4561      	cmp	r1, ip
   835ae:	d10d      	bne.n	835cc <_malloc_r+0x1a8>
   835b0:	2301      	movs	r3, #1
   835b2:	1080      	asrs	r0, r0, #2
   835b4:	fa03 f000 	lsl.w	r0, r3, r0
   835b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   835bc:	4303      	orrs	r3, r0
   835be:	f8c8 3004 	str.w	r3, [r8, #4]
   835c2:	460b      	mov	r3, r1
   835c4:	e008      	b.n	835d8 <_malloc_r+0x1b4>
   835c6:	6889      	ldr	r1, [r1, #8]
   835c8:	4561      	cmp	r1, ip
   835ca:	d004      	beq.n	835d6 <_malloc_r+0x1b2>
   835cc:	6848      	ldr	r0, [r1, #4]
   835ce:	f020 0003 	bic.w	r0, r0, #3
   835d2:	4283      	cmp	r3, r0
   835d4:	d3f7      	bcc.n	835c6 <_malloc_r+0x1a2>
   835d6:	68cb      	ldr	r3, [r1, #12]
   835d8:	60f3      	str	r3, [r6, #12]
   835da:	60b1      	str	r1, [r6, #8]
   835dc:	609e      	str	r6, [r3, #8]
   835de:	60ce      	str	r6, [r1, #12]
   835e0:	2101      	movs	r1, #1
   835e2:	1093      	asrs	r3, r2, #2
   835e4:	fa01 f303 	lsl.w	r3, r1, r3
   835e8:	6869      	ldr	r1, [r5, #4]
   835ea:	428b      	cmp	r3, r1
   835ec:	d85d      	bhi.n	836aa <_malloc_r+0x286>
   835ee:	420b      	tst	r3, r1
   835f0:	d106      	bne.n	83600 <_malloc_r+0x1dc>
   835f2:	f022 0203 	bic.w	r2, r2, #3
   835f6:	005b      	lsls	r3, r3, #1
   835f8:	420b      	tst	r3, r1
   835fa:	f102 0204 	add.w	r2, r2, #4
   835fe:	d0fa      	beq.n	835f6 <_malloc_r+0x1d2>
   83600:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
   83604:	4680      	mov	r8, r0
   83606:	4694      	mov	ip, r2
   83608:	f8d8 600c 	ldr.w	r6, [r8, #12]
   8360c:	4546      	cmp	r6, r8
   8360e:	d02d      	beq.n	8366c <_malloc_r+0x248>
   83610:	6871      	ldr	r1, [r6, #4]
   83612:	f021 0903 	bic.w	r9, r1, #3
   83616:	ebc4 0109 	rsb	r1, r4, r9
   8361a:	290f      	cmp	r1, #15
   8361c:	dd13      	ble.n	83646 <_malloc_r+0x222>
   8361e:	1933      	adds	r3, r6, r4
   83620:	f044 0401 	orr.w	r4, r4, #1
   83624:	68f2      	ldr	r2, [r6, #12]
   83626:	6074      	str	r4, [r6, #4]
   83628:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8362c:	60c2      	str	r2, [r0, #12]
   8362e:	6090      	str	r0, [r2, #8]
   83630:	f041 0201 	orr.w	r2, r1, #1
   83634:	616b      	str	r3, [r5, #20]
   83636:	612b      	str	r3, [r5, #16]
   83638:	f8c3 e00c 	str.w	lr, [r3, #12]
   8363c:	f8c3 e008 	str.w	lr, [r3, #8]
   83640:	605a      	str	r2, [r3, #4]
   83642:	5059      	str	r1, [r3, r1]
   83644:	e00c      	b.n	83660 <_malloc_r+0x23c>
   83646:	2900      	cmp	r1, #0
   83648:	db0e      	blt.n	83668 <_malloc_r+0x244>
   8364a:	eb06 0109 	add.w	r1, r6, r9
   8364e:	684b      	ldr	r3, [r1, #4]
   83650:	f043 0301 	orr.w	r3, r3, #1
   83654:	604b      	str	r3, [r1, #4]
   83656:	68f3      	ldr	r3, [r6, #12]
   83658:	f856 2f08 	ldr.w	r2, [r6, #8]!
   8365c:	60d3      	str	r3, [r2, #12]
   8365e:	609a      	str	r2, [r3, #8]
   83660:	4638      	mov	r0, r7
   83662:	f000 f911 	bl	83888 <__malloc_unlock>
   83666:	e0dc      	b.n	83822 <_malloc_r+0x3fe>
   83668:	68f6      	ldr	r6, [r6, #12]
   8366a:	e7cf      	b.n	8360c <_malloc_r+0x1e8>
   8366c:	f10c 0c01 	add.w	ip, ip, #1
   83670:	f01c 0f03 	tst.w	ip, #3
   83674:	f108 0808 	add.w	r8, r8, #8
   83678:	d1c6      	bne.n	83608 <_malloc_r+0x1e4>
   8367a:	0791      	lsls	r1, r2, #30
   8367c:	d104      	bne.n	83688 <_malloc_r+0x264>
   8367e:	686a      	ldr	r2, [r5, #4]
   83680:	ea22 0203 	bic.w	r2, r2, r3
   83684:	606a      	str	r2, [r5, #4]
   83686:	e005      	b.n	83694 <_malloc_r+0x270>
   83688:	f1a0 0108 	sub.w	r1, r0, #8
   8368c:	6800      	ldr	r0, [r0, #0]
   8368e:	3a01      	subs	r2, #1
   83690:	4288      	cmp	r0, r1
   83692:	d0f2      	beq.n	8367a <_malloc_r+0x256>
   83694:	6869      	ldr	r1, [r5, #4]
   83696:	005b      	lsls	r3, r3, #1
   83698:	428b      	cmp	r3, r1
   8369a:	d806      	bhi.n	836aa <_malloc_r+0x286>
   8369c:	b12b      	cbz	r3, 836aa <_malloc_r+0x286>
   8369e:	4662      	mov	r2, ip
   836a0:	420b      	tst	r3, r1
   836a2:	d1ad      	bne.n	83600 <_malloc_r+0x1dc>
   836a4:	3204      	adds	r2, #4
   836a6:	005b      	lsls	r3, r3, #1
   836a8:	e7fa      	b.n	836a0 <_malloc_r+0x27c>
   836aa:	f8d5 9008 	ldr.w	r9, [r5, #8]
   836ae:	f8d9 3004 	ldr.w	r3, [r9, #4]
   836b2:	f023 0b03 	bic.w	fp, r3, #3
   836b6:	45a3      	cmp	fp, r4
   836b8:	d304      	bcc.n	836c4 <_malloc_r+0x2a0>
   836ba:	ebc4 030b 	rsb	r3, r4, fp
   836be:	2b0f      	cmp	r3, #15
   836c0:	f300 80a2 	bgt.w	83808 <_malloc_r+0x3e4>
   836c4:	4907      	ldr	r1, [pc, #28]	; (836e4 <_malloc_r+0x2c0>)
   836c6:	eb09 030b 	add.w	r3, r9, fp
   836ca:	680a      	ldr	r2, [r1, #0]
   836cc:	4688      	mov	r8, r1
   836ce:	eb04 0a02 	add.w	sl, r4, r2
   836d2:	f8d5 2408 	ldr.w	r2, [r5, #1032]	; 0x408
   836d6:	3201      	adds	r2, #1
   836d8:	d106      	bne.n	836e8 <_malloc_r+0x2c4>
   836da:	f10a 0a10 	add.w	sl, sl, #16
   836de:	e00b      	b.n	836f8 <_malloc_r+0x2d4>
   836e0:	200704b4 	.word	0x200704b4
   836e4:	200709e0 	.word	0x200709e0
   836e8:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   836ec:	f10a 0a0f 	add.w	sl, sl, #15
   836f0:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   836f4:	f02a 0a0f 	bic.w	sl, sl, #15
   836f8:	4638      	mov	r0, r7
   836fa:	4651      	mov	r1, sl
   836fc:	9301      	str	r3, [sp, #4]
   836fe:	f000 fa6f 	bl	83be0 <_sbrk_r>
   83702:	1c42      	adds	r2, r0, #1
   83704:	4606      	mov	r6, r0
   83706:	9b01      	ldr	r3, [sp, #4]
   83708:	d06f      	beq.n	837ea <_malloc_r+0x3c6>
   8370a:	4298      	cmp	r0, r3
   8370c:	d201      	bcs.n	83712 <_malloc_r+0x2ee>
   8370e:	45a9      	cmp	r9, r5
   83710:	d16b      	bne.n	837ea <_malloc_r+0x3c6>
   83712:	f8d8 2004 	ldr.w	r2, [r8, #4]
   83716:	429e      	cmp	r6, r3
   83718:	4452      	add	r2, sl
   8371a:	f8c8 2004 	str.w	r2, [r8, #4]
   8371e:	d108      	bne.n	83732 <_malloc_r+0x30e>
   83720:	f3c6 010b 	ubfx	r1, r6, #0, #12
   83724:	b929      	cbnz	r1, 83732 <_malloc_r+0x30e>
   83726:	68ab      	ldr	r3, [r5, #8]
   83728:	44da      	add	sl, fp
   8372a:	f04a 0201 	orr.w	r2, sl, #1
   8372e:	605a      	str	r2, [r3, #4]
   83730:	e04d      	b.n	837ce <_malloc_r+0x3aa>
   83732:	f8d5 1408 	ldr.w	r1, [r5, #1032]	; 0x408
   83736:	3101      	adds	r1, #1
   83738:	d103      	bne.n	83742 <_malloc_r+0x31e>
   8373a:	4b3c      	ldr	r3, [pc, #240]	; (8382c <_malloc_r+0x408>)
   8373c:	f8c3 6408 	str.w	r6, [r3, #1032]	; 0x408
   83740:	e003      	b.n	8374a <_malloc_r+0x326>
   83742:	1af3      	subs	r3, r6, r3
   83744:	441a      	add	r2, r3
   83746:	f8c8 2004 	str.w	r2, [r8, #4]
   8374a:	f016 0307 	ands.w	r3, r6, #7
   8374e:	bf1c      	itt	ne
   83750:	f1c3 0308 	rsbne	r3, r3, #8
   83754:	18f6      	addne	r6, r6, r3
   83756:	44b2      	add	sl, r6
   83758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8375c:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   83760:	ebca 0a03 	rsb	sl, sl, r3
   83764:	4651      	mov	r1, sl
   83766:	4638      	mov	r0, r7
   83768:	f000 fa3a 	bl	83be0 <_sbrk_r>
   8376c:	1c43      	adds	r3, r0, #1
   8376e:	bf04      	itt	eq
   83770:	4630      	moveq	r0, r6
   83772:	f04f 0a00 	moveq.w	sl, #0
   83776:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8377a:	1b80      	subs	r0, r0, r6
   8377c:	4450      	add	r0, sl
   8377e:	4453      	add	r3, sl
   83780:	f040 0001 	orr.w	r0, r0, #1
   83784:	45a9      	cmp	r9, r5
   83786:	60ae      	str	r6, [r5, #8]
   83788:	f8c8 3004 	str.w	r3, [r8, #4]
   8378c:	6070      	str	r0, [r6, #4]
   8378e:	d01e      	beq.n	837ce <_malloc_r+0x3aa>
   83790:	f1bb 0f0f 	cmp.w	fp, #15
   83794:	d802      	bhi.n	8379c <_malloc_r+0x378>
   83796:	2301      	movs	r3, #1
   83798:	6073      	str	r3, [r6, #4]
   8379a:	e026      	b.n	837ea <_malloc_r+0x3c6>
   8379c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   837a0:	f1ab 0b0c 	sub.w	fp, fp, #12
   837a4:	f02b 0b07 	bic.w	fp, fp, #7
   837a8:	f003 0301 	and.w	r3, r3, #1
   837ac:	ea4b 0303 	orr.w	r3, fp, r3
   837b0:	f8c9 3004 	str.w	r3, [r9, #4]
   837b4:	2205      	movs	r2, #5
   837b6:	eb09 030b 	add.w	r3, r9, fp
   837ba:	f1bb 0f0f 	cmp.w	fp, #15
   837be:	605a      	str	r2, [r3, #4]
   837c0:	609a      	str	r2, [r3, #8]
   837c2:	d904      	bls.n	837ce <_malloc_r+0x3aa>
   837c4:	4638      	mov	r0, r7
   837c6:	f109 0108 	add.w	r1, r9, #8
   837ca:	f7ff fb37 	bl	82e3c <_free_r>
   837ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
   837d2:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
   837d6:	4293      	cmp	r3, r2
   837d8:	bf84      	itt	hi
   837da:	4a15      	ldrhi	r2, [pc, #84]	; (83830 <_malloc_r+0x40c>)
   837dc:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   837de:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
   837e2:	4293      	cmp	r3, r2
   837e4:	bf84      	itt	hi
   837e6:	4a12      	ldrhi	r2, [pc, #72]	; (83830 <_malloc_r+0x40c>)
   837e8:	6313      	strhi	r3, [r2, #48]	; 0x30
   837ea:	68ab      	ldr	r3, [r5, #8]
   837ec:	685a      	ldr	r2, [r3, #4]
   837ee:	f022 0203 	bic.w	r2, r2, #3
   837f2:	42a2      	cmp	r2, r4
   837f4:	ebc4 0302 	rsb	r3, r4, r2
   837f8:	d301      	bcc.n	837fe <_malloc_r+0x3da>
   837fa:	2b0f      	cmp	r3, #15
   837fc:	dc04      	bgt.n	83808 <_malloc_r+0x3e4>
   837fe:	4638      	mov	r0, r7
   83800:	f000 f842 	bl	83888 <__malloc_unlock>
   83804:	2600      	movs	r6, #0
   83806:	e00c      	b.n	83822 <_malloc_r+0x3fe>
   83808:	68ae      	ldr	r6, [r5, #8]
   8380a:	f044 0201 	orr.w	r2, r4, #1
   8380e:	f043 0301 	orr.w	r3, r3, #1
   83812:	4434      	add	r4, r6
   83814:	6072      	str	r2, [r6, #4]
   83816:	60ac      	str	r4, [r5, #8]
   83818:	6063      	str	r3, [r4, #4]
   8381a:	4638      	mov	r0, r7
   8381c:	f000 f834 	bl	83888 <__malloc_unlock>
   83820:	3608      	adds	r6, #8
   83822:	4630      	mov	r0, r6
   83824:	b003      	add	sp, #12
   83826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8382a:	bf00      	nop
   8382c:	200704b4 	.word	0x200704b4
   83830:	200709e0 	.word	0x200709e0

00083834 <memchr>:
   83834:	b510      	push	{r4, lr}
   83836:	b2c9      	uxtb	r1, r1
   83838:	4402      	add	r2, r0
   8383a:	4290      	cmp	r0, r2
   8383c:	4603      	mov	r3, r0
   8383e:	d005      	beq.n	8384c <memchr+0x18>
   83840:	781c      	ldrb	r4, [r3, #0]
   83842:	3001      	adds	r0, #1
   83844:	428c      	cmp	r4, r1
   83846:	d1f8      	bne.n	8383a <memchr+0x6>
   83848:	4618      	mov	r0, r3
   8384a:	bd10      	pop	{r4, pc}
   8384c:	2000      	movs	r0, #0
   8384e:	bd10      	pop	{r4, pc}

00083850 <memmove>:
   83850:	4281      	cmp	r1, r0
   83852:	b570      	push	{r4, r5, r6, lr}
   83854:	d301      	bcc.n	8385a <memmove+0xa>
   83856:	2300      	movs	r3, #0
   83858:	e00e      	b.n	83878 <memmove+0x28>
   8385a:	188c      	adds	r4, r1, r2
   8385c:	42a0      	cmp	r0, r4
   8385e:	d2fa      	bcs.n	83856 <memmove+0x6>
   83860:	1885      	adds	r5, r0, r2
   83862:	4613      	mov	r3, r2
   83864:	f113 33ff 	adds.w	r3, r3, #4294967295
   83868:	d305      	bcc.n	83876 <memmove+0x26>
   8386a:	4251      	negs	r1, r2
   8386c:	1866      	adds	r6, r4, r1
   8386e:	5cf6      	ldrb	r6, [r6, r3]
   83870:	4429      	add	r1, r5
   83872:	54ce      	strb	r6, [r1, r3]
   83874:	e7f6      	b.n	83864 <memmove+0x14>
   83876:	bd70      	pop	{r4, r5, r6, pc}
   83878:	4293      	cmp	r3, r2
   8387a:	d003      	beq.n	83884 <memmove+0x34>
   8387c:	5ccc      	ldrb	r4, [r1, r3]
   8387e:	54c4      	strb	r4, [r0, r3]
   83880:	3301      	adds	r3, #1
   83882:	e7f9      	b.n	83878 <memmove+0x28>
   83884:	bd70      	pop	{r4, r5, r6, pc}

00083886 <__malloc_lock>:
   83886:	4770      	bx	lr

00083888 <__malloc_unlock>:
   83888:	4770      	bx	lr
	...

0008388c <_realloc_r>:
   8388c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83890:	4681      	mov	r9, r0
   83892:	460c      	mov	r4, r1
   83894:	b929      	cbnz	r1, 838a2 <_realloc_r+0x16>
   83896:	4611      	mov	r1, r2
   83898:	b003      	add	sp, #12
   8389a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8389e:	f7ff bdc1 	b.w	83424 <_malloc_r>
   838a2:	9201      	str	r2, [sp, #4]
   838a4:	f7ff ffef 	bl	83886 <__malloc_lock>
   838a8:	9a01      	ldr	r2, [sp, #4]
   838aa:	f854 5c04 	ldr.w	r5, [r4, #-4]
   838ae:	f102 070b 	add.w	r7, r2, #11
   838b2:	2f16      	cmp	r7, #22
   838b4:	f1a4 0808 	sub.w	r8, r4, #8
   838b8:	f025 0603 	bic.w	r6, r5, #3
   838bc:	d903      	bls.n	838c6 <_realloc_r+0x3a>
   838be:	f037 0707 	bics.w	r7, r7, #7
   838c2:	d501      	bpl.n	838c8 <_realloc_r+0x3c>
   838c4:	e002      	b.n	838cc <_realloc_r+0x40>
   838c6:	2710      	movs	r7, #16
   838c8:	4297      	cmp	r7, r2
   838ca:	d204      	bcs.n	838d6 <_realloc_r+0x4a>
   838cc:	230c      	movs	r3, #12
   838ce:	f8c9 3000 	str.w	r3, [r9]
   838d2:	2000      	movs	r0, #0
   838d4:	e180      	b.n	83bd8 <_realloc_r+0x34c>
   838d6:	42be      	cmp	r6, r7
   838d8:	f280 8156 	bge.w	83b88 <_realloc_r+0x2fc>
   838dc:	49a3      	ldr	r1, [pc, #652]	; (83b6c <_realloc_r+0x2e0>)
   838de:	eb08 0306 	add.w	r3, r8, r6
   838e2:	f8d1 e008 	ldr.w	lr, [r1, #8]
   838e6:	468b      	mov	fp, r1
   838e8:	4573      	cmp	r3, lr
   838ea:	6858      	ldr	r0, [r3, #4]
   838ec:	d005      	beq.n	838fa <_realloc_r+0x6e>
   838ee:	f020 0101 	bic.w	r1, r0, #1
   838f2:	4419      	add	r1, r3
   838f4:	6849      	ldr	r1, [r1, #4]
   838f6:	07c9      	lsls	r1, r1, #31
   838f8:	d425      	bmi.n	83946 <_realloc_r+0xba>
   838fa:	f020 0003 	bic.w	r0, r0, #3
   838fe:	4573      	cmp	r3, lr
   83900:	eb00 0106 	add.w	r1, r0, r6
   83904:	d117      	bne.n	83936 <_realloc_r+0xaa>
   83906:	f107 0c10 	add.w	ip, r7, #16
   8390a:	4561      	cmp	r1, ip
   8390c:	db1d      	blt.n	8394a <_realloc_r+0xbe>
   8390e:	1bc9      	subs	r1, r1, r7
   83910:	eb08 0507 	add.w	r5, r8, r7
   83914:	f041 0101 	orr.w	r1, r1, #1
   83918:	f8cb 5008 	str.w	r5, [fp, #8]
   8391c:	6069      	str	r1, [r5, #4]
   8391e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83922:	4648      	mov	r0, r9
   83924:	f003 0301 	and.w	r3, r3, #1
   83928:	431f      	orrs	r7, r3
   8392a:	f844 7c04 	str.w	r7, [r4, #-4]
   8392e:	f7ff ffab 	bl	83888 <__malloc_unlock>
   83932:	4620      	mov	r0, r4
   83934:	e150      	b.n	83bd8 <_realloc_r+0x34c>
   83936:	42b9      	cmp	r1, r7
   83938:	db07      	blt.n	8394a <_realloc_r+0xbe>
   8393a:	68da      	ldr	r2, [r3, #12]
   8393c:	689b      	ldr	r3, [r3, #8]
   8393e:	460e      	mov	r6, r1
   83940:	60da      	str	r2, [r3, #12]
   83942:	6093      	str	r3, [r2, #8]
   83944:	e120      	b.n	83b88 <_realloc_r+0x2fc>
   83946:	2000      	movs	r0, #0
   83948:	4603      	mov	r3, r0
   8394a:	07e9      	lsls	r1, r5, #31
   8394c:	f100 80cb 	bmi.w	83ae6 <_realloc_r+0x25a>
   83950:	f854 5c08 	ldr.w	r5, [r4, #-8]
   83954:	ebc5 0508 	rsb	r5, r5, r8
   83958:	6869      	ldr	r1, [r5, #4]
   8395a:	f021 0103 	bic.w	r1, r1, #3
   8395e:	eb01 0a06 	add.w	sl, r1, r6
   83962:	2b00      	cmp	r3, #0
   83964:	f000 808a 	beq.w	83a7c <_realloc_r+0x1f0>
   83968:	4573      	cmp	r3, lr
   8396a:	d14d      	bne.n	83a08 <_realloc_r+0x17c>
   8396c:	eb0a 0300 	add.w	r3, sl, r0
   83970:	f107 0110 	add.w	r1, r7, #16
   83974:	428b      	cmp	r3, r1
   83976:	f2c0 8081 	blt.w	83a7c <_realloc_r+0x1f0>
   8397a:	46a8      	mov	r8, r5
   8397c:	68ea      	ldr	r2, [r5, #12]
   8397e:	f858 1f08 	ldr.w	r1, [r8, #8]!
   83982:	60ca      	str	r2, [r1, #12]
   83984:	6091      	str	r1, [r2, #8]
   83986:	1f32      	subs	r2, r6, #4
   83988:	2a24      	cmp	r2, #36	; 0x24
   8398a:	d826      	bhi.n	839da <_realloc_r+0x14e>
   8398c:	2a13      	cmp	r2, #19
   8398e:	d91c      	bls.n	839ca <_realloc_r+0x13e>
   83990:	6821      	ldr	r1, [r4, #0]
   83992:	2a1b      	cmp	r2, #27
   83994:	60a9      	str	r1, [r5, #8]
   83996:	6861      	ldr	r1, [r4, #4]
   83998:	60e9      	str	r1, [r5, #12]
   8399a:	d803      	bhi.n	839a4 <_realloc_r+0x118>
   8399c:	f105 0210 	add.w	r2, r5, #16
   839a0:	3408      	adds	r4, #8
   839a2:	e013      	b.n	839cc <_realloc_r+0x140>
   839a4:	68a1      	ldr	r1, [r4, #8]
   839a6:	2a24      	cmp	r2, #36	; 0x24
   839a8:	6129      	str	r1, [r5, #16]
   839aa:	68e1      	ldr	r1, [r4, #12]
   839ac:	6169      	str	r1, [r5, #20]
   839ae:	d003      	beq.n	839b8 <_realloc_r+0x12c>
   839b0:	f105 0218 	add.w	r2, r5, #24
   839b4:	3410      	adds	r4, #16
   839b6:	e009      	b.n	839cc <_realloc_r+0x140>
   839b8:	6922      	ldr	r2, [r4, #16]
   839ba:	3418      	adds	r4, #24
   839bc:	61aa      	str	r2, [r5, #24]
   839be:	f854 1c04 	ldr.w	r1, [r4, #-4]
   839c2:	f105 0220 	add.w	r2, r5, #32
   839c6:	61e9      	str	r1, [r5, #28]
   839c8:	e000      	b.n	839cc <_realloc_r+0x140>
   839ca:	4642      	mov	r2, r8
   839cc:	6821      	ldr	r1, [r4, #0]
   839ce:	6011      	str	r1, [r2, #0]
   839d0:	6861      	ldr	r1, [r4, #4]
   839d2:	6051      	str	r1, [r2, #4]
   839d4:	68a1      	ldr	r1, [r4, #8]
   839d6:	6091      	str	r1, [r2, #8]
   839d8:	e005      	b.n	839e6 <_realloc_r+0x15a>
   839da:	4640      	mov	r0, r8
   839dc:	4621      	mov	r1, r4
   839de:	9301      	str	r3, [sp, #4]
   839e0:	f7ff ff36 	bl	83850 <memmove>
   839e4:	9b01      	ldr	r3, [sp, #4]
   839e6:	1bdb      	subs	r3, r3, r7
   839e8:	19ea      	adds	r2, r5, r7
   839ea:	f043 0301 	orr.w	r3, r3, #1
   839ee:	f8cb 2008 	str.w	r2, [fp, #8]
   839f2:	6053      	str	r3, [r2, #4]
   839f4:	686b      	ldr	r3, [r5, #4]
   839f6:	4648      	mov	r0, r9
   839f8:	f003 0301 	and.w	r3, r3, #1
   839fc:	431f      	orrs	r7, r3
   839fe:	606f      	str	r7, [r5, #4]
   83a00:	f7ff ff42 	bl	83888 <__malloc_unlock>
   83a04:	4640      	mov	r0, r8
   83a06:	e0e7      	b.n	83bd8 <_realloc_r+0x34c>
   83a08:	eb0a 0b00 	add.w	fp, sl, r0
   83a0c:	45bb      	cmp	fp, r7
   83a0e:	db35      	blt.n	83a7c <_realloc_r+0x1f0>
   83a10:	68da      	ldr	r2, [r3, #12]
   83a12:	689b      	ldr	r3, [r3, #8]
   83a14:	4628      	mov	r0, r5
   83a16:	60da      	str	r2, [r3, #12]
   83a18:	6093      	str	r3, [r2, #8]
   83a1a:	f850 2f08 	ldr.w	r2, [r0, #8]!
   83a1e:	68eb      	ldr	r3, [r5, #12]
   83a20:	60d3      	str	r3, [r2, #12]
   83a22:	609a      	str	r2, [r3, #8]
   83a24:	1f32      	subs	r2, r6, #4
   83a26:	2a24      	cmp	r2, #36	; 0x24
   83a28:	d823      	bhi.n	83a72 <_realloc_r+0x1e6>
   83a2a:	2a13      	cmp	r2, #19
   83a2c:	d91a      	bls.n	83a64 <_realloc_r+0x1d8>
   83a2e:	6823      	ldr	r3, [r4, #0]
   83a30:	2a1b      	cmp	r2, #27
   83a32:	60ab      	str	r3, [r5, #8]
   83a34:	6863      	ldr	r3, [r4, #4]
   83a36:	60eb      	str	r3, [r5, #12]
   83a38:	d803      	bhi.n	83a42 <_realloc_r+0x1b6>
   83a3a:	f105 0010 	add.w	r0, r5, #16
   83a3e:	3408      	adds	r4, #8
   83a40:	e010      	b.n	83a64 <_realloc_r+0x1d8>
   83a42:	68a3      	ldr	r3, [r4, #8]
   83a44:	2a24      	cmp	r2, #36	; 0x24
   83a46:	612b      	str	r3, [r5, #16]
   83a48:	68e3      	ldr	r3, [r4, #12]
   83a4a:	616b      	str	r3, [r5, #20]
   83a4c:	d003      	beq.n	83a56 <_realloc_r+0x1ca>
   83a4e:	f105 0018 	add.w	r0, r5, #24
   83a52:	3410      	adds	r4, #16
   83a54:	e006      	b.n	83a64 <_realloc_r+0x1d8>
   83a56:	6923      	ldr	r3, [r4, #16]
   83a58:	f105 0020 	add.w	r0, r5, #32
   83a5c:	61ab      	str	r3, [r5, #24]
   83a5e:	6963      	ldr	r3, [r4, #20]
   83a60:	3418      	adds	r4, #24
   83a62:	61eb      	str	r3, [r5, #28]
   83a64:	6823      	ldr	r3, [r4, #0]
   83a66:	6003      	str	r3, [r0, #0]
   83a68:	6863      	ldr	r3, [r4, #4]
   83a6a:	6043      	str	r3, [r0, #4]
   83a6c:	68a3      	ldr	r3, [r4, #8]
   83a6e:	6083      	str	r3, [r0, #8]
   83a70:	e002      	b.n	83a78 <_realloc_r+0x1ec>
   83a72:	4621      	mov	r1, r4
   83a74:	f7ff feec 	bl	83850 <memmove>
   83a78:	465e      	mov	r6, fp
   83a7a:	e02e      	b.n	83ada <_realloc_r+0x24e>
   83a7c:	45ba      	cmp	sl, r7
   83a7e:	db32      	blt.n	83ae6 <_realloc_r+0x25a>
   83a80:	4628      	mov	r0, r5
   83a82:	f850 2f08 	ldr.w	r2, [r0, #8]!
   83a86:	68eb      	ldr	r3, [r5, #12]
   83a88:	60d3      	str	r3, [r2, #12]
   83a8a:	609a      	str	r2, [r3, #8]
   83a8c:	1f32      	subs	r2, r6, #4
   83a8e:	2a24      	cmp	r2, #36	; 0x24
   83a90:	d825      	bhi.n	83ade <_realloc_r+0x252>
   83a92:	2a13      	cmp	r2, #19
   83a94:	d91a      	bls.n	83acc <_realloc_r+0x240>
   83a96:	6823      	ldr	r3, [r4, #0]
   83a98:	2a1b      	cmp	r2, #27
   83a9a:	60ab      	str	r3, [r5, #8]
   83a9c:	6863      	ldr	r3, [r4, #4]
   83a9e:	60eb      	str	r3, [r5, #12]
   83aa0:	d803      	bhi.n	83aaa <_realloc_r+0x21e>
   83aa2:	f105 0010 	add.w	r0, r5, #16
   83aa6:	3408      	adds	r4, #8
   83aa8:	e010      	b.n	83acc <_realloc_r+0x240>
   83aaa:	68a3      	ldr	r3, [r4, #8]
   83aac:	2a24      	cmp	r2, #36	; 0x24
   83aae:	612b      	str	r3, [r5, #16]
   83ab0:	68e3      	ldr	r3, [r4, #12]
   83ab2:	616b      	str	r3, [r5, #20]
   83ab4:	d003      	beq.n	83abe <_realloc_r+0x232>
   83ab6:	f105 0018 	add.w	r0, r5, #24
   83aba:	3410      	adds	r4, #16
   83abc:	e006      	b.n	83acc <_realloc_r+0x240>
   83abe:	6923      	ldr	r3, [r4, #16]
   83ac0:	f105 0020 	add.w	r0, r5, #32
   83ac4:	61ab      	str	r3, [r5, #24]
   83ac6:	6963      	ldr	r3, [r4, #20]
   83ac8:	3418      	adds	r4, #24
   83aca:	61eb      	str	r3, [r5, #28]
   83acc:	6823      	ldr	r3, [r4, #0]
   83ace:	6003      	str	r3, [r0, #0]
   83ad0:	6863      	ldr	r3, [r4, #4]
   83ad2:	6043      	str	r3, [r0, #4]
   83ad4:	68a3      	ldr	r3, [r4, #8]
   83ad6:	6083      	str	r3, [r0, #8]
   83ad8:	4656      	mov	r6, sl
   83ada:	46a8      	mov	r8, r5
   83adc:	e054      	b.n	83b88 <_realloc_r+0x2fc>
   83ade:	4621      	mov	r1, r4
   83ae0:	f7ff feb6 	bl	83850 <memmove>
   83ae4:	e7f8      	b.n	83ad8 <_realloc_r+0x24c>
   83ae6:	4648      	mov	r0, r9
   83ae8:	4611      	mov	r1, r2
   83aea:	f7ff fc9b 	bl	83424 <_malloc_r>
   83aee:	4605      	mov	r5, r0
   83af0:	2800      	cmp	r0, #0
   83af2:	d044      	beq.n	83b7e <_realloc_r+0x2f2>
   83af4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83af8:	f1a0 0208 	sub.w	r2, r0, #8
   83afc:	f023 0301 	bic.w	r3, r3, #1
   83b00:	4443      	add	r3, r8
   83b02:	429a      	cmp	r2, r3
   83b04:	d105      	bne.n	83b12 <_realloc_r+0x286>
   83b06:	f850 3c04 	ldr.w	r3, [r0, #-4]
   83b0a:	f023 0303 	bic.w	r3, r3, #3
   83b0e:	441e      	add	r6, r3
   83b10:	e03a      	b.n	83b88 <_realloc_r+0x2fc>
   83b12:	1f32      	subs	r2, r6, #4
   83b14:	2a24      	cmp	r2, #36	; 0x24
   83b16:	d82b      	bhi.n	83b70 <_realloc_r+0x2e4>
   83b18:	2a13      	cmp	r2, #19
   83b1a:	d91e      	bls.n	83b5a <_realloc_r+0x2ce>
   83b1c:	6823      	ldr	r3, [r4, #0]
   83b1e:	2a1b      	cmp	r2, #27
   83b20:	6003      	str	r3, [r0, #0]
   83b22:	6863      	ldr	r3, [r4, #4]
   83b24:	6043      	str	r3, [r0, #4]
   83b26:	d804      	bhi.n	83b32 <_realloc_r+0x2a6>
   83b28:	f100 0308 	add.w	r3, r0, #8
   83b2c:	f104 0208 	add.w	r2, r4, #8
   83b30:	e015      	b.n	83b5e <_realloc_r+0x2d2>
   83b32:	68a3      	ldr	r3, [r4, #8]
   83b34:	2a24      	cmp	r2, #36	; 0x24
   83b36:	6083      	str	r3, [r0, #8]
   83b38:	68e3      	ldr	r3, [r4, #12]
   83b3a:	60c3      	str	r3, [r0, #12]
   83b3c:	d004      	beq.n	83b48 <_realloc_r+0x2bc>
   83b3e:	f100 0310 	add.w	r3, r0, #16
   83b42:	f104 0210 	add.w	r2, r4, #16
   83b46:	e00a      	b.n	83b5e <_realloc_r+0x2d2>
   83b48:	6923      	ldr	r3, [r4, #16]
   83b4a:	f104 0218 	add.w	r2, r4, #24
   83b4e:	6103      	str	r3, [r0, #16]
   83b50:	6961      	ldr	r1, [r4, #20]
   83b52:	f100 0318 	add.w	r3, r0, #24
   83b56:	6141      	str	r1, [r0, #20]
   83b58:	e001      	b.n	83b5e <_realloc_r+0x2d2>
   83b5a:	4603      	mov	r3, r0
   83b5c:	4622      	mov	r2, r4
   83b5e:	6811      	ldr	r1, [r2, #0]
   83b60:	6019      	str	r1, [r3, #0]
   83b62:	6851      	ldr	r1, [r2, #4]
   83b64:	6059      	str	r1, [r3, #4]
   83b66:	6892      	ldr	r2, [r2, #8]
   83b68:	609a      	str	r2, [r3, #8]
   83b6a:	e004      	b.n	83b76 <_realloc_r+0x2ea>
   83b6c:	200704b4 	.word	0x200704b4
   83b70:	4621      	mov	r1, r4
   83b72:	f7ff fe6d 	bl	83850 <memmove>
   83b76:	4648      	mov	r0, r9
   83b78:	4621      	mov	r1, r4
   83b7a:	f7ff f95f 	bl	82e3c <_free_r>
   83b7e:	4648      	mov	r0, r9
   83b80:	f7ff fe82 	bl	83888 <__malloc_unlock>
   83b84:	4628      	mov	r0, r5
   83b86:	e027      	b.n	83bd8 <_realloc_r+0x34c>
   83b88:	1bf3      	subs	r3, r6, r7
   83b8a:	2b0f      	cmp	r3, #15
   83b8c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   83b90:	d913      	bls.n	83bba <_realloc_r+0x32e>
   83b92:	f002 0201 	and.w	r2, r2, #1
   83b96:	eb08 0107 	add.w	r1, r8, r7
   83b9a:	4317      	orrs	r7, r2
   83b9c:	f043 0201 	orr.w	r2, r3, #1
   83ba0:	f8c8 7004 	str.w	r7, [r8, #4]
   83ba4:	440b      	add	r3, r1
   83ba6:	604a      	str	r2, [r1, #4]
   83ba8:	685a      	ldr	r2, [r3, #4]
   83baa:	4648      	mov	r0, r9
   83bac:	f042 0201 	orr.w	r2, r2, #1
   83bb0:	605a      	str	r2, [r3, #4]
   83bb2:	3108      	adds	r1, #8
   83bb4:	f7ff f942 	bl	82e3c <_free_r>
   83bb8:	e009      	b.n	83bce <_realloc_r+0x342>
   83bba:	f002 0201 	and.w	r2, r2, #1
   83bbe:	4332      	orrs	r2, r6
   83bc0:	f8c8 2004 	str.w	r2, [r8, #4]
   83bc4:	4446      	add	r6, r8
   83bc6:	6873      	ldr	r3, [r6, #4]
   83bc8:	f043 0301 	orr.w	r3, r3, #1
   83bcc:	6073      	str	r3, [r6, #4]
   83bce:	4648      	mov	r0, r9
   83bd0:	f7ff fe5a 	bl	83888 <__malloc_unlock>
   83bd4:	f108 0008 	add.w	r0, r8, #8
   83bd8:	b003      	add	sp, #12
   83bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83bde:	bf00      	nop

00083be0 <_sbrk_r>:
   83be0:	b538      	push	{r3, r4, r5, lr}
   83be2:	4c06      	ldr	r4, [pc, #24]	; (83bfc <_sbrk_r+0x1c>)
   83be4:	2300      	movs	r3, #0
   83be6:	4605      	mov	r5, r0
   83be8:	4608      	mov	r0, r1
   83bea:	6023      	str	r3, [r4, #0]
   83bec:	f7fe f818 	bl	81c20 <_sbrk>
   83bf0:	1c43      	adds	r3, r0, #1
   83bf2:	d102      	bne.n	83bfa <_sbrk_r+0x1a>
   83bf4:	6823      	ldr	r3, [r4, #0]
   83bf6:	b103      	cbz	r3, 83bfa <_sbrk_r+0x1a>
   83bf8:	602b      	str	r3, [r5, #0]
   83bfa:	bd38      	pop	{r3, r4, r5, pc}
   83bfc:	20070a9c 	.word	0x20070a9c

00083c00 <__sread>:
   83c00:	b510      	push	{r4, lr}
   83c02:	460c      	mov	r4, r1
   83c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83c08:	f000 f93e 	bl	83e88 <_read_r>
   83c0c:	2800      	cmp	r0, #0
   83c0e:	db03      	blt.n	83c18 <__sread+0x18>
   83c10:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83c12:	4403      	add	r3, r0
   83c14:	6523      	str	r3, [r4, #80]	; 0x50
   83c16:	bd10      	pop	{r4, pc}
   83c18:	89a3      	ldrh	r3, [r4, #12]
   83c1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83c1e:	81a3      	strh	r3, [r4, #12]
   83c20:	bd10      	pop	{r4, pc}

00083c22 <__seofread>:
   83c22:	2000      	movs	r0, #0
   83c24:	4770      	bx	lr

00083c26 <__swrite>:
   83c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83c2a:	461d      	mov	r5, r3
   83c2c:	898b      	ldrh	r3, [r1, #12]
   83c2e:	4607      	mov	r7, r0
   83c30:	05db      	lsls	r3, r3, #23
   83c32:	460c      	mov	r4, r1
   83c34:	4616      	mov	r6, r2
   83c36:	d505      	bpl.n	83c44 <__swrite+0x1e>
   83c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83c3c:	2200      	movs	r2, #0
   83c3e:	2302      	movs	r3, #2
   83c40:	f000 f910 	bl	83e64 <_lseek_r>
   83c44:	89a3      	ldrh	r3, [r4, #12]
   83c46:	4638      	mov	r0, r7
   83c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83c4c:	81a3      	strh	r3, [r4, #12]
   83c4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83c52:	4632      	mov	r2, r6
   83c54:	462b      	mov	r3, r5
   83c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83c5a:	f000 b879 	b.w	83d50 <_write_r>

00083c5e <__sseek>:
   83c5e:	b510      	push	{r4, lr}
   83c60:	460c      	mov	r4, r1
   83c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83c66:	f000 f8fd 	bl	83e64 <_lseek_r>
   83c6a:	1c43      	adds	r3, r0, #1
   83c6c:	89a3      	ldrh	r3, [r4, #12]
   83c6e:	d103      	bne.n	83c78 <__sseek+0x1a>
   83c70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83c74:	81a3      	strh	r3, [r4, #12]
   83c76:	bd10      	pop	{r4, pc}
   83c78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   83c7c:	81a3      	strh	r3, [r4, #12]
   83c7e:	6520      	str	r0, [r4, #80]	; 0x50
   83c80:	bd10      	pop	{r4, pc}

00083c82 <__sclose>:
   83c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83c86:	f000 b875 	b.w	83d74 <_close_r>

00083c8a <strcmp>:
   83c8a:	f810 2b01 	ldrb.w	r2, [r0], #1
   83c8e:	f811 3b01 	ldrb.w	r3, [r1], #1
   83c92:	2a01      	cmp	r2, #1
   83c94:	bf28      	it	cs
   83c96:	429a      	cmpcs	r2, r3
   83c98:	d0f7      	beq.n	83c8a <strcmp>
   83c9a:	1ad0      	subs	r0, r2, r3
   83c9c:	4770      	bx	lr
	...

00083ca0 <_wcrtomb_r>:
   83ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83ca4:	461d      	mov	r5, r3
   83ca6:	4b10      	ldr	r3, [pc, #64]	; (83ce8 <_wcrtomb_r+0x48>)
   83ca8:	b086      	sub	sp, #24
   83caa:	4604      	mov	r4, r0
   83cac:	4690      	mov	r8, r2
   83cae:	460e      	mov	r6, r1
   83cb0:	681f      	ldr	r7, [r3, #0]
   83cb2:	b939      	cbnz	r1, 83cc4 <_wcrtomb_r+0x24>
   83cb4:	f7ff fb20 	bl	832f8 <__locale_charset>
   83cb8:	9500      	str	r5, [sp, #0]
   83cba:	4603      	mov	r3, r0
   83cbc:	a903      	add	r1, sp, #12
   83cbe:	4620      	mov	r0, r4
   83cc0:	4632      	mov	r2, r6
   83cc2:	e006      	b.n	83cd2 <_wcrtomb_r+0x32>
   83cc4:	f7ff fb18 	bl	832f8 <__locale_charset>
   83cc8:	9500      	str	r5, [sp, #0]
   83cca:	4603      	mov	r3, r0
   83ccc:	4631      	mov	r1, r6
   83cce:	4620      	mov	r0, r4
   83cd0:	4642      	mov	r2, r8
   83cd2:	47b8      	blx	r7
   83cd4:	1c43      	adds	r3, r0, #1
   83cd6:	d103      	bne.n	83ce0 <_wcrtomb_r+0x40>
   83cd8:	2300      	movs	r3, #0
   83cda:	602b      	str	r3, [r5, #0]
   83cdc:	238a      	movs	r3, #138	; 0x8a
   83cde:	6023      	str	r3, [r4, #0]
   83ce0:	b006      	add	sp, #24
   83ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83ce6:	bf00      	nop
   83ce8:	200708c4 	.word	0x200708c4

00083cec <wcrtomb>:
   83cec:	b530      	push	{r4, r5, lr}
   83cee:	4613      	mov	r3, r2
   83cf0:	4a04      	ldr	r2, [pc, #16]	; (83d04 <wcrtomb+0x18>)
   83cf2:	4605      	mov	r5, r0
   83cf4:	460c      	mov	r4, r1
   83cf6:	6810      	ldr	r0, [r2, #0]
   83cf8:	4629      	mov	r1, r5
   83cfa:	4622      	mov	r2, r4
   83cfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   83d00:	f7ff bfce 	b.w	83ca0 <_wcrtomb_r>
   83d04:	20070008 	.word	0x20070008

00083d08 <__ascii_wctomb>:
   83d08:	b149      	cbz	r1, 83d1e <__ascii_wctomb+0x16>
   83d0a:	2aff      	cmp	r2, #255	; 0xff
   83d0c:	d904      	bls.n	83d18 <__ascii_wctomb+0x10>
   83d0e:	238a      	movs	r3, #138	; 0x8a
   83d10:	6003      	str	r3, [r0, #0]
   83d12:	f04f 30ff 	mov.w	r0, #4294967295
   83d16:	4770      	bx	lr
   83d18:	700a      	strb	r2, [r1, #0]
   83d1a:	2001      	movs	r0, #1
   83d1c:	4770      	bx	lr
   83d1e:	4608      	mov	r0, r1
   83d20:	4770      	bx	lr

00083d22 <_wctomb_r>:
   83d22:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   83d26:	4698      	mov	r8, r3
   83d28:	4b08      	ldr	r3, [pc, #32]	; (83d4c <_wctomb_r+0x2a>)
   83d2a:	4605      	mov	r5, r0
   83d2c:	681c      	ldr	r4, [r3, #0]
   83d2e:	460f      	mov	r7, r1
   83d30:	4616      	mov	r6, r2
   83d32:	f7ff fae1 	bl	832f8 <__locale_charset>
   83d36:	f8cd 8000 	str.w	r8, [sp]
   83d3a:	4603      	mov	r3, r0
   83d3c:	4639      	mov	r1, r7
   83d3e:	4628      	mov	r0, r5
   83d40:	4632      	mov	r2, r6
   83d42:	47a0      	blx	r4
   83d44:	b002      	add	sp, #8
   83d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83d4a:	bf00      	nop
   83d4c:	200708c4 	.word	0x200708c4

00083d50 <_write_r>:
   83d50:	b538      	push	{r3, r4, r5, lr}
   83d52:	4c07      	ldr	r4, [pc, #28]	; (83d70 <_write_r+0x20>)
   83d54:	4605      	mov	r5, r0
   83d56:	2000      	movs	r0, #0
   83d58:	6020      	str	r0, [r4, #0]
   83d5a:	4608      	mov	r0, r1
   83d5c:	4611      	mov	r1, r2
   83d5e:	461a      	mov	r2, r3
   83d60:	f7fc fbd4 	bl	8050c <_write>
   83d64:	1c43      	adds	r3, r0, #1
   83d66:	d102      	bne.n	83d6e <_write_r+0x1e>
   83d68:	6823      	ldr	r3, [r4, #0]
   83d6a:	b103      	cbz	r3, 83d6e <_write_r+0x1e>
   83d6c:	602b      	str	r3, [r5, #0]
   83d6e:	bd38      	pop	{r3, r4, r5, pc}
   83d70:	20070a9c 	.word	0x20070a9c

00083d74 <_close_r>:
   83d74:	b538      	push	{r3, r4, r5, lr}
   83d76:	4c06      	ldr	r4, [pc, #24]	; (83d90 <_close_r+0x1c>)
   83d78:	2300      	movs	r3, #0
   83d7a:	4605      	mov	r5, r0
   83d7c:	4608      	mov	r0, r1
   83d7e:	6023      	str	r3, [r4, #0]
   83d80:	f7fd ff68 	bl	81c54 <_close>
   83d84:	1c43      	adds	r3, r0, #1
   83d86:	d102      	bne.n	83d8e <_close_r+0x1a>
   83d88:	6823      	ldr	r3, [r4, #0]
   83d8a:	b103      	cbz	r3, 83d8e <_close_r+0x1a>
   83d8c:	602b      	str	r3, [r5, #0]
   83d8e:	bd38      	pop	{r3, r4, r5, pc}
   83d90:	20070a9c 	.word	0x20070a9c

00083d94 <_fclose_r>:
   83d94:	b570      	push	{r4, r5, r6, lr}
   83d96:	4605      	mov	r5, r0
   83d98:	460c      	mov	r4, r1
   83d9a:	b909      	cbnz	r1, 83da0 <_fclose_r+0xc>
   83d9c:	2000      	movs	r0, #0
   83d9e:	bd70      	pop	{r4, r5, r6, pc}
   83da0:	b118      	cbz	r0, 83daa <_fclose_r+0x16>
   83da2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83da4:	b90b      	cbnz	r3, 83daa <_fclose_r+0x16>
   83da6:	f7fe fec5 	bl	82b34 <__sinit>
   83daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83dae:	2b00      	cmp	r3, #0
   83db0:	d0f4      	beq.n	83d9c <_fclose_r+0x8>
   83db2:	4628      	mov	r0, r5
   83db4:	4621      	mov	r1, r4
   83db6:	f7fe fe74 	bl	82aa2 <_fflush_r>
   83dba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83dbc:	4606      	mov	r6, r0
   83dbe:	b133      	cbz	r3, 83dce <_fclose_r+0x3a>
   83dc0:	4628      	mov	r0, r5
   83dc2:	69e1      	ldr	r1, [r4, #28]
   83dc4:	4798      	blx	r3
   83dc6:	2800      	cmp	r0, #0
   83dc8:	bfb8      	it	lt
   83dca:	f04f 36ff 	movlt.w	r6, #4294967295
   83dce:	89a3      	ldrh	r3, [r4, #12]
   83dd0:	061b      	lsls	r3, r3, #24
   83dd2:	d503      	bpl.n	83ddc <_fclose_r+0x48>
   83dd4:	4628      	mov	r0, r5
   83dd6:	6921      	ldr	r1, [r4, #16]
   83dd8:	f7ff f830 	bl	82e3c <_free_r>
   83ddc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83dde:	b141      	cbz	r1, 83df2 <_fclose_r+0x5e>
   83de0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83de4:	4299      	cmp	r1, r3
   83de6:	d002      	beq.n	83dee <_fclose_r+0x5a>
   83de8:	4628      	mov	r0, r5
   83dea:	f7ff f827 	bl	82e3c <_free_r>
   83dee:	2300      	movs	r3, #0
   83df0:	6323      	str	r3, [r4, #48]	; 0x30
   83df2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83df4:	b121      	cbz	r1, 83e00 <_fclose_r+0x6c>
   83df6:	4628      	mov	r0, r5
   83df8:	f7ff f820 	bl	82e3c <_free_r>
   83dfc:	2300      	movs	r3, #0
   83dfe:	6463      	str	r3, [r4, #68]	; 0x44
   83e00:	f7fe ff4a 	bl	82c98 <__sfp_lock_acquire>
   83e04:	2300      	movs	r3, #0
   83e06:	81a3      	strh	r3, [r4, #12]
   83e08:	f7fe ff47 	bl	82c9a <__sfp_lock_release>
   83e0c:	4630      	mov	r0, r6
   83e0e:	bd70      	pop	{r4, r5, r6, pc}

00083e10 <fclose>:
   83e10:	4b02      	ldr	r3, [pc, #8]	; (83e1c <fclose+0xc>)
   83e12:	4601      	mov	r1, r0
   83e14:	6818      	ldr	r0, [r3, #0]
   83e16:	f7ff bfbd 	b.w	83d94 <_fclose_r>
   83e1a:	bf00      	nop
   83e1c:	20070008 	.word	0x20070008

00083e20 <_fstat_r>:
   83e20:	b538      	push	{r3, r4, r5, lr}
   83e22:	4c07      	ldr	r4, [pc, #28]	; (83e40 <_fstat_r+0x20>)
   83e24:	2300      	movs	r3, #0
   83e26:	4605      	mov	r5, r0
   83e28:	4608      	mov	r0, r1
   83e2a:	4611      	mov	r1, r2
   83e2c:	6023      	str	r3, [r4, #0]
   83e2e:	f7fd ff15 	bl	81c5c <_fstat>
   83e32:	1c43      	adds	r3, r0, #1
   83e34:	d102      	bne.n	83e3c <_fstat_r+0x1c>
   83e36:	6823      	ldr	r3, [r4, #0]
   83e38:	b103      	cbz	r3, 83e3c <_fstat_r+0x1c>
   83e3a:	602b      	str	r3, [r5, #0]
   83e3c:	bd38      	pop	{r3, r4, r5, pc}
   83e3e:	bf00      	nop
   83e40:	20070a9c 	.word	0x20070a9c

00083e44 <_isatty_r>:
   83e44:	b538      	push	{r3, r4, r5, lr}
   83e46:	4c06      	ldr	r4, [pc, #24]	; (83e60 <_isatty_r+0x1c>)
   83e48:	2300      	movs	r3, #0
   83e4a:	4605      	mov	r5, r0
   83e4c:	4608      	mov	r0, r1
   83e4e:	6023      	str	r3, [r4, #0]
   83e50:	f7fd ff0a 	bl	81c68 <_isatty>
   83e54:	1c43      	adds	r3, r0, #1
   83e56:	d102      	bne.n	83e5e <_isatty_r+0x1a>
   83e58:	6823      	ldr	r3, [r4, #0]
   83e5a:	b103      	cbz	r3, 83e5e <_isatty_r+0x1a>
   83e5c:	602b      	str	r3, [r5, #0]
   83e5e:	bd38      	pop	{r3, r4, r5, pc}
   83e60:	20070a9c 	.word	0x20070a9c

00083e64 <_lseek_r>:
   83e64:	b538      	push	{r3, r4, r5, lr}
   83e66:	4c07      	ldr	r4, [pc, #28]	; (83e84 <_lseek_r+0x20>)
   83e68:	4605      	mov	r5, r0
   83e6a:	2000      	movs	r0, #0
   83e6c:	6020      	str	r0, [r4, #0]
   83e6e:	4608      	mov	r0, r1
   83e70:	4611      	mov	r1, r2
   83e72:	461a      	mov	r2, r3
   83e74:	f7fd fefa 	bl	81c6c <_lseek>
   83e78:	1c43      	adds	r3, r0, #1
   83e7a:	d102      	bne.n	83e82 <_lseek_r+0x1e>
   83e7c:	6823      	ldr	r3, [r4, #0]
   83e7e:	b103      	cbz	r3, 83e82 <_lseek_r+0x1e>
   83e80:	602b      	str	r3, [r5, #0]
   83e82:	bd38      	pop	{r3, r4, r5, pc}
   83e84:	20070a9c 	.word	0x20070a9c

00083e88 <_read_r>:
   83e88:	b538      	push	{r3, r4, r5, lr}
   83e8a:	4c07      	ldr	r4, [pc, #28]	; (83ea8 <_read_r+0x20>)
   83e8c:	4605      	mov	r5, r0
   83e8e:	2000      	movs	r0, #0
   83e90:	6020      	str	r0, [r4, #0]
   83e92:	4608      	mov	r0, r1
   83e94:	4611      	mov	r1, r2
   83e96:	461a      	mov	r2, r3
   83e98:	f7fc fb18 	bl	804cc <_read>
   83e9c:	1c43      	adds	r3, r0, #1
   83e9e:	d102      	bne.n	83ea6 <_read_r+0x1e>
   83ea0:	6823      	ldr	r3, [r4, #0]
   83ea2:	b103      	cbz	r3, 83ea6 <_read_r+0x1e>
   83ea4:	602b      	str	r3, [r5, #0]
   83ea6:	bd38      	pop	{r3, r4, r5, pc}
   83ea8:	20070a9c 	.word	0x20070a9c

00083eac <__aeabi_uldivmod>:
   83eac:	b94b      	cbnz	r3, 83ec2 <__aeabi_uldivmod+0x16>
   83eae:	b942      	cbnz	r2, 83ec2 <__aeabi_uldivmod+0x16>
   83eb0:	2900      	cmp	r1, #0
   83eb2:	bf08      	it	eq
   83eb4:	2800      	cmpeq	r0, #0
   83eb6:	d002      	beq.n	83ebe <__aeabi_uldivmod+0x12>
   83eb8:	f04f 31ff 	mov.w	r1, #4294967295
   83ebc:	4608      	mov	r0, r1
   83ebe:	f000 b83b 	b.w	83f38 <__aeabi_idiv0>
   83ec2:	b082      	sub	sp, #8
   83ec4:	46ec      	mov	ip, sp
   83ec6:	e92d 5000 	stmdb	sp!, {ip, lr}
   83eca:	f000 f81d 	bl	83f08 <__gnu_uldivmod_helper>
   83ece:	f8dd e004 	ldr.w	lr, [sp, #4]
   83ed2:	b002      	add	sp, #8
   83ed4:	bc0c      	pop	{r2, r3}
   83ed6:	4770      	bx	lr

00083ed8 <__gnu_ldivmod_helper>:
   83ed8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83edc:	9e08      	ldr	r6, [sp, #32]
   83ede:	4614      	mov	r4, r2
   83ee0:	461d      	mov	r5, r3
   83ee2:	4680      	mov	r8, r0
   83ee4:	4689      	mov	r9, r1
   83ee6:	f000 f829 	bl	83f3c <__divdi3>
   83eea:	fb04 f301 	mul.w	r3, r4, r1
   83eee:	fba4 ab00 	umull	sl, fp, r4, r0
   83ef2:	fb00 3205 	mla	r2, r0, r5, r3
   83ef6:	4493      	add	fp, r2
   83ef8:	ebb8 080a 	subs.w	r8, r8, sl
   83efc:	eb69 090b 	sbc.w	r9, r9, fp
   83f00:	e9c6 8900 	strd	r8, r9, [r6]
   83f04:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083f08 <__gnu_uldivmod_helper>:
   83f08:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83f0c:	9e08      	ldr	r6, [sp, #32]
   83f0e:	4614      	mov	r4, r2
   83f10:	461d      	mov	r5, r3
   83f12:	4680      	mov	r8, r0
   83f14:	4689      	mov	r9, r1
   83f16:	f000 f961 	bl	841dc <__udivdi3>
   83f1a:	fb00 f505 	mul.w	r5, r0, r5
   83f1e:	fba0 ab04 	umull	sl, fp, r0, r4
   83f22:	fb04 5401 	mla	r4, r4, r1, r5
   83f26:	44a3      	add	fp, r4
   83f28:	ebb8 080a 	subs.w	r8, r8, sl
   83f2c:	eb69 090b 	sbc.w	r9, r9, fp
   83f30:	e9c6 8900 	strd	r8, r9, [r6]
   83f34:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083f38 <__aeabi_idiv0>:
   83f38:	4770      	bx	lr
   83f3a:	bf00      	nop

00083f3c <__divdi3>:
   83f3c:	2900      	cmp	r1, #0
   83f3e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83f42:	f2c0 80a1 	blt.w	84088 <__divdi3+0x14c>
   83f46:	2400      	movs	r4, #0
   83f48:	2b00      	cmp	r3, #0
   83f4a:	f2c0 8098 	blt.w	8407e <__divdi3+0x142>
   83f4e:	4615      	mov	r5, r2
   83f50:	4606      	mov	r6, r0
   83f52:	460f      	mov	r7, r1
   83f54:	2b00      	cmp	r3, #0
   83f56:	d13f      	bne.n	83fd8 <__divdi3+0x9c>
   83f58:	428a      	cmp	r2, r1
   83f5a:	d958      	bls.n	8400e <__divdi3+0xd2>
   83f5c:	fab2 f382 	clz	r3, r2
   83f60:	b14b      	cbz	r3, 83f76 <__divdi3+0x3a>
   83f62:	f1c3 0220 	rsb	r2, r3, #32
   83f66:	fa01 f703 	lsl.w	r7, r1, r3
   83f6a:	fa20 f202 	lsr.w	r2, r0, r2
   83f6e:	409d      	lsls	r5, r3
   83f70:	fa00 f603 	lsl.w	r6, r0, r3
   83f74:	4317      	orrs	r7, r2
   83f76:	0c29      	lsrs	r1, r5, #16
   83f78:	fbb7 f2f1 	udiv	r2, r7, r1
   83f7c:	fb01 7712 	mls	r7, r1, r2, r7
   83f80:	b2a8      	uxth	r0, r5
   83f82:	fb00 f302 	mul.w	r3, r0, r2
   83f86:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   83f8a:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   83f8e:	42bb      	cmp	r3, r7
   83f90:	d909      	bls.n	83fa6 <__divdi3+0x6a>
   83f92:	197f      	adds	r7, r7, r5
   83f94:	f102 3cff 	add.w	ip, r2, #4294967295
   83f98:	f080 8105 	bcs.w	841a6 <__divdi3+0x26a>
   83f9c:	42bb      	cmp	r3, r7
   83f9e:	f240 8102 	bls.w	841a6 <__divdi3+0x26a>
   83fa2:	3a02      	subs	r2, #2
   83fa4:	442f      	add	r7, r5
   83fa6:	1aff      	subs	r7, r7, r3
   83fa8:	fbb7 f3f1 	udiv	r3, r7, r1
   83fac:	fb01 7113 	mls	r1, r1, r3, r7
   83fb0:	fb00 f003 	mul.w	r0, r0, r3
   83fb4:	b2b6      	uxth	r6, r6
   83fb6:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   83fba:	4288      	cmp	r0, r1
   83fbc:	d908      	bls.n	83fd0 <__divdi3+0x94>
   83fbe:	1949      	adds	r1, r1, r5
   83fc0:	f103 37ff 	add.w	r7, r3, #4294967295
   83fc4:	f080 80f1 	bcs.w	841aa <__divdi3+0x26e>
   83fc8:	4288      	cmp	r0, r1
   83fca:	f240 80ee 	bls.w	841aa <__divdi3+0x26e>
   83fce:	3b02      	subs	r3, #2
   83fd0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83fd4:	2300      	movs	r3, #0
   83fd6:	e003      	b.n	83fe0 <__divdi3+0xa4>
   83fd8:	428b      	cmp	r3, r1
   83fda:	d90a      	bls.n	83ff2 <__divdi3+0xb6>
   83fdc:	2300      	movs	r3, #0
   83fde:	461a      	mov	r2, r3
   83fe0:	4610      	mov	r0, r2
   83fe2:	4619      	mov	r1, r3
   83fe4:	b114      	cbz	r4, 83fec <__divdi3+0xb0>
   83fe6:	4240      	negs	r0, r0
   83fe8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83fec:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83ff0:	4770      	bx	lr
   83ff2:	fab3 f883 	clz	r8, r3
   83ff6:	f1b8 0f00 	cmp.w	r8, #0
   83ffa:	f040 8088 	bne.w	8410e <__divdi3+0x1d2>
   83ffe:	428b      	cmp	r3, r1
   84000:	d302      	bcc.n	84008 <__divdi3+0xcc>
   84002:	4282      	cmp	r2, r0
   84004:	f200 80e2 	bhi.w	841cc <__divdi3+0x290>
   84008:	2300      	movs	r3, #0
   8400a:	2201      	movs	r2, #1
   8400c:	e7e8      	b.n	83fe0 <__divdi3+0xa4>
   8400e:	b912      	cbnz	r2, 84016 <__divdi3+0xda>
   84010:	2301      	movs	r3, #1
   84012:	fbb3 f5f2 	udiv	r5, r3, r2
   84016:	fab5 f285 	clz	r2, r5
   8401a:	2a00      	cmp	r2, #0
   8401c:	d13a      	bne.n	84094 <__divdi3+0x158>
   8401e:	1b7f      	subs	r7, r7, r5
   84020:	0c28      	lsrs	r0, r5, #16
   84022:	fa1f fc85 	uxth.w	ip, r5
   84026:	2301      	movs	r3, #1
   84028:	fbb7 f1f0 	udiv	r1, r7, r0
   8402c:	fb00 7711 	mls	r7, r0, r1, r7
   84030:	fb0c f201 	mul.w	r2, ip, r1
   84034:	ea4f 4816 	mov.w	r8, r6, lsr #16
   84038:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   8403c:	42ba      	cmp	r2, r7
   8403e:	d907      	bls.n	84050 <__divdi3+0x114>
   84040:	197f      	adds	r7, r7, r5
   84042:	f101 38ff 	add.w	r8, r1, #4294967295
   84046:	d202      	bcs.n	8404e <__divdi3+0x112>
   84048:	42ba      	cmp	r2, r7
   8404a:	f200 80c4 	bhi.w	841d6 <__divdi3+0x29a>
   8404e:	4641      	mov	r1, r8
   84050:	1abf      	subs	r7, r7, r2
   84052:	fbb7 f2f0 	udiv	r2, r7, r0
   84056:	fb00 7012 	mls	r0, r0, r2, r7
   8405a:	fb0c fc02 	mul.w	ip, ip, r2
   8405e:	b2b6      	uxth	r6, r6
   84060:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   84064:	4584      	cmp	ip, r0
   84066:	d907      	bls.n	84078 <__divdi3+0x13c>
   84068:	1940      	adds	r0, r0, r5
   8406a:	f102 37ff 	add.w	r7, r2, #4294967295
   8406e:	d202      	bcs.n	84076 <__divdi3+0x13a>
   84070:	4584      	cmp	ip, r0
   84072:	f200 80ae 	bhi.w	841d2 <__divdi3+0x296>
   84076:	463a      	mov	r2, r7
   84078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   8407c:	e7b0      	b.n	83fe0 <__divdi3+0xa4>
   8407e:	43e4      	mvns	r4, r4
   84080:	4252      	negs	r2, r2
   84082:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   84086:	e762      	b.n	83f4e <__divdi3+0x12>
   84088:	4240      	negs	r0, r0
   8408a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8408e:	f04f 34ff 	mov.w	r4, #4294967295
   84092:	e759      	b.n	83f48 <__divdi3+0xc>
   84094:	4095      	lsls	r5, r2
   84096:	f1c2 0920 	rsb	r9, r2, #32
   8409a:	fa27 f109 	lsr.w	r1, r7, r9
   8409e:	fa26 f909 	lsr.w	r9, r6, r9
   840a2:	4097      	lsls	r7, r2
   840a4:	0c28      	lsrs	r0, r5, #16
   840a6:	fbb1 f8f0 	udiv	r8, r1, r0
   840aa:	fb00 1118 	mls	r1, r0, r8, r1
   840ae:	fa1f fc85 	uxth.w	ip, r5
   840b2:	fb0c f308 	mul.w	r3, ip, r8
   840b6:	ea49 0907 	orr.w	r9, r9, r7
   840ba:	ea4f 4719 	mov.w	r7, r9, lsr #16
   840be:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   840c2:	428b      	cmp	r3, r1
   840c4:	fa06 f602 	lsl.w	r6, r6, r2
   840c8:	d908      	bls.n	840dc <__divdi3+0x1a0>
   840ca:	1949      	adds	r1, r1, r5
   840cc:	f108 32ff 	add.w	r2, r8, #4294967295
   840d0:	d27a      	bcs.n	841c8 <__divdi3+0x28c>
   840d2:	428b      	cmp	r3, r1
   840d4:	d978      	bls.n	841c8 <__divdi3+0x28c>
   840d6:	f1a8 0802 	sub.w	r8, r8, #2
   840da:	4429      	add	r1, r5
   840dc:	1ac9      	subs	r1, r1, r3
   840de:	fbb1 f3f0 	udiv	r3, r1, r0
   840e2:	fb00 1713 	mls	r7, r0, r3, r1
   840e6:	fb0c f203 	mul.w	r2, ip, r3
   840ea:	fa1f f989 	uxth.w	r9, r9
   840ee:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   840f2:	42ba      	cmp	r2, r7
   840f4:	d907      	bls.n	84106 <__divdi3+0x1ca>
   840f6:	197f      	adds	r7, r7, r5
   840f8:	f103 31ff 	add.w	r1, r3, #4294967295
   840fc:	d260      	bcs.n	841c0 <__divdi3+0x284>
   840fe:	42ba      	cmp	r2, r7
   84100:	d95e      	bls.n	841c0 <__divdi3+0x284>
   84102:	3b02      	subs	r3, #2
   84104:	442f      	add	r7, r5
   84106:	1abf      	subs	r7, r7, r2
   84108:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8410c:	e78c      	b.n	84028 <__divdi3+0xec>
   8410e:	f1c8 0220 	rsb	r2, r8, #32
   84112:	fa25 f102 	lsr.w	r1, r5, r2
   84116:	fa03 fc08 	lsl.w	ip, r3, r8
   8411a:	fa27 f302 	lsr.w	r3, r7, r2
   8411e:	fa20 f202 	lsr.w	r2, r0, r2
   84122:	fa07 f708 	lsl.w	r7, r7, r8
   84126:	ea41 0c0c 	orr.w	ip, r1, ip
   8412a:	ea4f 491c 	mov.w	r9, ip, lsr #16
   8412e:	fbb3 f1f9 	udiv	r1, r3, r9
   84132:	fb09 3311 	mls	r3, r9, r1, r3
   84136:	fa1f fa8c 	uxth.w	sl, ip
   8413a:	fb0a fb01 	mul.w	fp, sl, r1
   8413e:	4317      	orrs	r7, r2
   84140:	0c3a      	lsrs	r2, r7, #16
   84142:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   84146:	459b      	cmp	fp, r3
   84148:	fa05 f008 	lsl.w	r0, r5, r8
   8414c:	d908      	bls.n	84160 <__divdi3+0x224>
   8414e:	eb13 030c 	adds.w	r3, r3, ip
   84152:	f101 32ff 	add.w	r2, r1, #4294967295
   84156:	d235      	bcs.n	841c4 <__divdi3+0x288>
   84158:	459b      	cmp	fp, r3
   8415a:	d933      	bls.n	841c4 <__divdi3+0x288>
   8415c:	3902      	subs	r1, #2
   8415e:	4463      	add	r3, ip
   84160:	ebcb 0303 	rsb	r3, fp, r3
   84164:	fbb3 f2f9 	udiv	r2, r3, r9
   84168:	fb09 3312 	mls	r3, r9, r2, r3
   8416c:	fb0a fa02 	mul.w	sl, sl, r2
   84170:	b2bf      	uxth	r7, r7
   84172:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   84176:	45ba      	cmp	sl, r7
   84178:	d908      	bls.n	8418c <__divdi3+0x250>
   8417a:	eb17 070c 	adds.w	r7, r7, ip
   8417e:	f102 33ff 	add.w	r3, r2, #4294967295
   84182:	d21b      	bcs.n	841bc <__divdi3+0x280>
   84184:	45ba      	cmp	sl, r7
   84186:	d919      	bls.n	841bc <__divdi3+0x280>
   84188:	3a02      	subs	r2, #2
   8418a:	4467      	add	r7, ip
   8418c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   84190:	fba5 0100 	umull	r0, r1, r5, r0
   84194:	ebca 0707 	rsb	r7, sl, r7
   84198:	428f      	cmp	r7, r1
   8419a:	f04f 0300 	mov.w	r3, #0
   8419e:	d30a      	bcc.n	841b6 <__divdi3+0x27a>
   841a0:	d005      	beq.n	841ae <__divdi3+0x272>
   841a2:	462a      	mov	r2, r5
   841a4:	e71c      	b.n	83fe0 <__divdi3+0xa4>
   841a6:	4662      	mov	r2, ip
   841a8:	e6fd      	b.n	83fa6 <__divdi3+0x6a>
   841aa:	463b      	mov	r3, r7
   841ac:	e710      	b.n	83fd0 <__divdi3+0x94>
   841ae:	fa06 f608 	lsl.w	r6, r6, r8
   841b2:	4286      	cmp	r6, r0
   841b4:	d2f5      	bcs.n	841a2 <__divdi3+0x266>
   841b6:	1e6a      	subs	r2, r5, #1
   841b8:	2300      	movs	r3, #0
   841ba:	e711      	b.n	83fe0 <__divdi3+0xa4>
   841bc:	461a      	mov	r2, r3
   841be:	e7e5      	b.n	8418c <__divdi3+0x250>
   841c0:	460b      	mov	r3, r1
   841c2:	e7a0      	b.n	84106 <__divdi3+0x1ca>
   841c4:	4611      	mov	r1, r2
   841c6:	e7cb      	b.n	84160 <__divdi3+0x224>
   841c8:	4690      	mov	r8, r2
   841ca:	e787      	b.n	840dc <__divdi3+0x1a0>
   841cc:	4643      	mov	r3, r8
   841ce:	4642      	mov	r2, r8
   841d0:	e706      	b.n	83fe0 <__divdi3+0xa4>
   841d2:	3a02      	subs	r2, #2
   841d4:	e750      	b.n	84078 <__divdi3+0x13c>
   841d6:	3902      	subs	r1, #2
   841d8:	442f      	add	r7, r5
   841da:	e739      	b.n	84050 <__divdi3+0x114>

000841dc <__udivdi3>:
   841dc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   841e0:	4614      	mov	r4, r2
   841e2:	4605      	mov	r5, r0
   841e4:	460e      	mov	r6, r1
   841e6:	2b00      	cmp	r3, #0
   841e8:	d143      	bne.n	84272 <__udivdi3+0x96>
   841ea:	428a      	cmp	r2, r1
   841ec:	d953      	bls.n	84296 <__udivdi3+0xba>
   841ee:	fab2 f782 	clz	r7, r2
   841f2:	b157      	cbz	r7, 8420a <__udivdi3+0x2e>
   841f4:	f1c7 0620 	rsb	r6, r7, #32
   841f8:	fa20 f606 	lsr.w	r6, r0, r6
   841fc:	fa01 f307 	lsl.w	r3, r1, r7
   84200:	fa02 f407 	lsl.w	r4, r2, r7
   84204:	fa00 f507 	lsl.w	r5, r0, r7
   84208:	431e      	orrs	r6, r3
   8420a:	0c21      	lsrs	r1, r4, #16
   8420c:	fbb6 f2f1 	udiv	r2, r6, r1
   84210:	fb01 6612 	mls	r6, r1, r2, r6
   84214:	b2a0      	uxth	r0, r4
   84216:	fb00 f302 	mul.w	r3, r0, r2
   8421a:	0c2f      	lsrs	r7, r5, #16
   8421c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   84220:	42b3      	cmp	r3, r6
   84222:	d909      	bls.n	84238 <__udivdi3+0x5c>
   84224:	1936      	adds	r6, r6, r4
   84226:	f102 37ff 	add.w	r7, r2, #4294967295
   8422a:	f080 80fd 	bcs.w	84428 <__udivdi3+0x24c>
   8422e:	42b3      	cmp	r3, r6
   84230:	f240 80fa 	bls.w	84428 <__udivdi3+0x24c>
   84234:	3a02      	subs	r2, #2
   84236:	4426      	add	r6, r4
   84238:	1af6      	subs	r6, r6, r3
   8423a:	fbb6 f3f1 	udiv	r3, r6, r1
   8423e:	fb01 6113 	mls	r1, r1, r3, r6
   84242:	fb00 f003 	mul.w	r0, r0, r3
   84246:	b2ad      	uxth	r5, r5
   84248:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   8424c:	4288      	cmp	r0, r1
   8424e:	d908      	bls.n	84262 <__udivdi3+0x86>
   84250:	1909      	adds	r1, r1, r4
   84252:	f103 36ff 	add.w	r6, r3, #4294967295
   84256:	f080 80e9 	bcs.w	8442c <__udivdi3+0x250>
   8425a:	4288      	cmp	r0, r1
   8425c:	f240 80e6 	bls.w	8442c <__udivdi3+0x250>
   84260:	3b02      	subs	r3, #2
   84262:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   84266:	2300      	movs	r3, #0
   84268:	4610      	mov	r0, r2
   8426a:	4619      	mov	r1, r3
   8426c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84270:	4770      	bx	lr
   84272:	428b      	cmp	r3, r1
   84274:	d84c      	bhi.n	84310 <__udivdi3+0x134>
   84276:	fab3 f683 	clz	r6, r3
   8427a:	2e00      	cmp	r6, #0
   8427c:	d14f      	bne.n	8431e <__udivdi3+0x142>
   8427e:	428b      	cmp	r3, r1
   84280:	d302      	bcc.n	84288 <__udivdi3+0xac>
   84282:	4282      	cmp	r2, r0
   84284:	f200 80dd 	bhi.w	84442 <__udivdi3+0x266>
   84288:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8428c:	2300      	movs	r3, #0
   8428e:	2201      	movs	r2, #1
   84290:	4610      	mov	r0, r2
   84292:	4619      	mov	r1, r3
   84294:	4770      	bx	lr
   84296:	b912      	cbnz	r2, 8429e <__udivdi3+0xc2>
   84298:	2401      	movs	r4, #1
   8429a:	fbb4 f4f2 	udiv	r4, r4, r2
   8429e:	fab4 f284 	clz	r2, r4
   842a2:	2a00      	cmp	r2, #0
   842a4:	f040 8082 	bne.w	843ac <__udivdi3+0x1d0>
   842a8:	1b09      	subs	r1, r1, r4
   842aa:	0c26      	lsrs	r6, r4, #16
   842ac:	b2a7      	uxth	r7, r4
   842ae:	2301      	movs	r3, #1
   842b0:	fbb1 f0f6 	udiv	r0, r1, r6
   842b4:	fb06 1110 	mls	r1, r6, r0, r1
   842b8:	fb07 f200 	mul.w	r2, r7, r0
   842bc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   842c0:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   842c4:	428a      	cmp	r2, r1
   842c6:	d907      	bls.n	842d8 <__udivdi3+0xfc>
   842c8:	1909      	adds	r1, r1, r4
   842ca:	f100 3cff 	add.w	ip, r0, #4294967295
   842ce:	d202      	bcs.n	842d6 <__udivdi3+0xfa>
   842d0:	428a      	cmp	r2, r1
   842d2:	f200 80c8 	bhi.w	84466 <__udivdi3+0x28a>
   842d6:	4660      	mov	r0, ip
   842d8:	1a89      	subs	r1, r1, r2
   842da:	fbb1 f2f6 	udiv	r2, r1, r6
   842de:	fb06 1112 	mls	r1, r6, r2, r1
   842e2:	fb07 f702 	mul.w	r7, r7, r2
   842e6:	b2ad      	uxth	r5, r5
   842e8:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   842ec:	42af      	cmp	r7, r5
   842ee:	d908      	bls.n	84302 <__udivdi3+0x126>
   842f0:	192c      	adds	r4, r5, r4
   842f2:	f102 31ff 	add.w	r1, r2, #4294967295
   842f6:	f080 809b 	bcs.w	84430 <__udivdi3+0x254>
   842fa:	42a7      	cmp	r7, r4
   842fc:	f240 8098 	bls.w	84430 <__udivdi3+0x254>
   84300:	3a02      	subs	r2, #2
   84302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   84306:	4610      	mov	r0, r2
   84308:	4619      	mov	r1, r3
   8430a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8430e:	4770      	bx	lr
   84310:	2300      	movs	r3, #0
   84312:	461a      	mov	r2, r3
   84314:	4610      	mov	r0, r2
   84316:	4619      	mov	r1, r3
   84318:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8431c:	4770      	bx	lr
   8431e:	f1c6 0520 	rsb	r5, r6, #32
   84322:	fa22 f705 	lsr.w	r7, r2, r5
   84326:	fa03 f406 	lsl.w	r4, r3, r6
   8432a:	fa21 f305 	lsr.w	r3, r1, r5
   8432e:	fa01 fb06 	lsl.w	fp, r1, r6
   84332:	fa20 f505 	lsr.w	r5, r0, r5
   84336:	433c      	orrs	r4, r7
   84338:	ea4f 4814 	mov.w	r8, r4, lsr #16
   8433c:	fbb3 fcf8 	udiv	ip, r3, r8
   84340:	fb08 331c 	mls	r3, r8, ip, r3
   84344:	fa1f f984 	uxth.w	r9, r4
   84348:	fb09 fa0c 	mul.w	sl, r9, ip
   8434c:	ea45 0b0b 	orr.w	fp, r5, fp
   84350:	ea4f 451b 	mov.w	r5, fp, lsr #16
   84354:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   84358:	459a      	cmp	sl, r3
   8435a:	fa02 f206 	lsl.w	r2, r2, r6
   8435e:	d904      	bls.n	8436a <__udivdi3+0x18e>
   84360:	191b      	adds	r3, r3, r4
   84362:	f10c 35ff 	add.w	r5, ip, #4294967295
   84366:	d36f      	bcc.n	84448 <__udivdi3+0x26c>
   84368:	46ac      	mov	ip, r5
   8436a:	ebca 0303 	rsb	r3, sl, r3
   8436e:	fbb3 f5f8 	udiv	r5, r3, r8
   84372:	fb08 3315 	mls	r3, r8, r5, r3
   84376:	fb09 f905 	mul.w	r9, r9, r5
   8437a:	fa1f fb8b 	uxth.w	fp, fp
   8437e:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   84382:	45b9      	cmp	r9, r7
   84384:	d904      	bls.n	84390 <__udivdi3+0x1b4>
   84386:	193f      	adds	r7, r7, r4
   84388:	f105 33ff 	add.w	r3, r5, #4294967295
   8438c:	d362      	bcc.n	84454 <__udivdi3+0x278>
   8438e:	461d      	mov	r5, r3
   84390:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   84394:	fbac 2302 	umull	r2, r3, ip, r2
   84398:	ebc9 0707 	rsb	r7, r9, r7
   8439c:	429f      	cmp	r7, r3
   8439e:	f04f 0500 	mov.w	r5, #0
   843a2:	d34a      	bcc.n	8443a <__udivdi3+0x25e>
   843a4:	d046      	beq.n	84434 <__udivdi3+0x258>
   843a6:	4662      	mov	r2, ip
   843a8:	462b      	mov	r3, r5
   843aa:	e75d      	b.n	84268 <__udivdi3+0x8c>
   843ac:	4094      	lsls	r4, r2
   843ae:	f1c2 0920 	rsb	r9, r2, #32
   843b2:	fa21 fc09 	lsr.w	ip, r1, r9
   843b6:	4091      	lsls	r1, r2
   843b8:	fa20 f909 	lsr.w	r9, r0, r9
   843bc:	0c26      	lsrs	r6, r4, #16
   843be:	fbbc f8f6 	udiv	r8, ip, r6
   843c2:	fb06 cc18 	mls	ip, r6, r8, ip
   843c6:	b2a7      	uxth	r7, r4
   843c8:	fb07 f308 	mul.w	r3, r7, r8
   843cc:	ea49 0901 	orr.w	r9, r9, r1
   843d0:	ea4f 4119 	mov.w	r1, r9, lsr #16
   843d4:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   843d8:	4563      	cmp	r3, ip
   843da:	fa00 f502 	lsl.w	r5, r0, r2
   843de:	d909      	bls.n	843f4 <__udivdi3+0x218>
   843e0:	eb1c 0c04 	adds.w	ip, ip, r4
   843e4:	f108 32ff 	add.w	r2, r8, #4294967295
   843e8:	d23b      	bcs.n	84462 <__udivdi3+0x286>
   843ea:	4563      	cmp	r3, ip
   843ec:	d939      	bls.n	84462 <__udivdi3+0x286>
   843ee:	f1a8 0802 	sub.w	r8, r8, #2
   843f2:	44a4      	add	ip, r4
   843f4:	ebc3 0c0c 	rsb	ip, r3, ip
   843f8:	fbbc f3f6 	udiv	r3, ip, r6
   843fc:	fb06 c113 	mls	r1, r6, r3, ip
   84400:	fb07 f203 	mul.w	r2, r7, r3
   84404:	fa1f f989 	uxth.w	r9, r9
   84408:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   8440c:	428a      	cmp	r2, r1
   8440e:	d907      	bls.n	84420 <__udivdi3+0x244>
   84410:	1909      	adds	r1, r1, r4
   84412:	f103 30ff 	add.w	r0, r3, #4294967295
   84416:	d222      	bcs.n	8445e <__udivdi3+0x282>
   84418:	428a      	cmp	r2, r1
   8441a:	d920      	bls.n	8445e <__udivdi3+0x282>
   8441c:	3b02      	subs	r3, #2
   8441e:	4421      	add	r1, r4
   84420:	1a89      	subs	r1, r1, r2
   84422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   84426:	e743      	b.n	842b0 <__udivdi3+0xd4>
   84428:	463a      	mov	r2, r7
   8442a:	e705      	b.n	84238 <__udivdi3+0x5c>
   8442c:	4633      	mov	r3, r6
   8442e:	e718      	b.n	84262 <__udivdi3+0x86>
   84430:	460a      	mov	r2, r1
   84432:	e766      	b.n	84302 <__udivdi3+0x126>
   84434:	40b0      	lsls	r0, r6
   84436:	4290      	cmp	r0, r2
   84438:	d2b5      	bcs.n	843a6 <__udivdi3+0x1ca>
   8443a:	f10c 32ff 	add.w	r2, ip, #4294967295
   8443e:	2300      	movs	r3, #0
   84440:	e712      	b.n	84268 <__udivdi3+0x8c>
   84442:	4633      	mov	r3, r6
   84444:	4632      	mov	r2, r6
   84446:	e70f      	b.n	84268 <__udivdi3+0x8c>
   84448:	459a      	cmp	sl, r3
   8444a:	d98d      	bls.n	84368 <__udivdi3+0x18c>
   8444c:	f1ac 0c02 	sub.w	ip, ip, #2
   84450:	4423      	add	r3, r4
   84452:	e78a      	b.n	8436a <__udivdi3+0x18e>
   84454:	45b9      	cmp	r9, r7
   84456:	d99a      	bls.n	8438e <__udivdi3+0x1b2>
   84458:	3d02      	subs	r5, #2
   8445a:	4427      	add	r7, r4
   8445c:	e798      	b.n	84390 <__udivdi3+0x1b4>
   8445e:	4603      	mov	r3, r0
   84460:	e7de      	b.n	84420 <__udivdi3+0x244>
   84462:	4690      	mov	r8, r2
   84464:	e7c6      	b.n	843f4 <__udivdi3+0x218>
   84466:	3802      	subs	r0, #2
   84468:	4421      	add	r1, r4
   8446a:	e735      	b.n	842d8 <__udivdi3+0xfc>
   8446c:	20434441 	.word	0x20434441
   84470:	31207369 	.word	0x31207369
   84474:	74696230 	.word	0x74696230
   84478:	00000000 	.word	0x00000000
   8447c:	6e616843 	.word	0x6e616843
   84480:	206c656e 	.word	0x206c656e
   84484:	69642033 	.word	0x69642033
   84488:	6c626173 	.word	0x6c626173
   8448c:	00006465 	.word	0x00006465
   84490:	74736574 	.word	0x74736574
   84494:	7365742f 	.word	0x7365742f
   84498:	64615f74 	.word	0x64615f74
   8449c:	00632e63 	.word	0x00632e63
   844a0:	74736574 	.word	0x74736574
   844a4:	6364615f 	.word	0x6364615f
   844a8:	6232315f 	.word	0x6232315f
   844ac:	00007469 	.word	0x00007469
   844b0:	74736574 	.word	0x74736574
   844b4:	6168635f 	.word	0x6168635f
   844b8:	6c656e6e 	.word	0x6c656e6e
   844bc:	655f335f 	.word	0x655f335f
   844c0:	6c62616e 	.word	0x6c62616e
   844c4:	00006465 	.word	0x00006465
   844c8:	00006425 	.word	0x00006425

000844cc <UnityStrOk>:
   844cc:	00004b4f                                OK..

000844d0 <UnityStrSpacer>:
   844d0:	0000202e                                . ..

000844d4 <UnityStrWas>:
   844d4:	73615720 00000020                        Was ...

000844dc <UnityStrFail>:
   844dc:	4c494146 00000000                       FAIL....

000844e4 <UnityStrExpected>:
   844e4:	70784520 65746365 00002064               Expected ..

000844f0 <UnityStrBreaker>:
   844f0:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   84500:	2d2d2d2d 002d2d2d                       -------.

00084508 <UnityStrResultsFailures>:
   84508:	69614620 6572756c 00002073               Failures ..

00084514 <UnityStrResultsIgnored>:
   84514:	6e674920 6465726f 00000020               Ignored ...

00084520 <UnityStrResultsTests>:
   84520:	73655420 00207374                        Tests .

00084528 <UnityStrPass>:
   84528:	53534150 00000000                       PASS....

00084530 <_global_impure_ptr>:
   84530:	20070010 20200043                                ... C.

00084536 <blanks.6701>:
   84536:	20202020 20202020 20202020 20202020                     

00084546 <zeroes.6702>:
   84546:	30303030 30303030 30303030 30303030     0000000000000000
   84556:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   84566:	32313000 36353433 61393837 65646362     .0123456789abcde
   84576:	4f500066 00584953 b5f8002e                       f.POSIX...

00084580 <_init>:
   84580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84582:	bf00      	nop
   84584:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84586:	bc08      	pop	{r3}
   84588:	469e      	mov	lr, r3
   8458a:	4770      	bx	lr

0008458c <__init_array_start>:
   8458c:	00082979 	.word	0x00082979

00084590 <__frame_dummy_init_array_entry>:
   84590:	0008016d                                m...

00084594 <_fini>:
   84594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84596:	bf00      	nop
   84598:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8459a:	bc08      	pop	{r3}
   8459c:	469e      	mov	lr, r3
   8459e:	4770      	bx	lr

000845a0 <__fini_array_start>:
   845a0:	00080145 	.word	0x00080145
