
HoverCraft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005204  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00085204  00085204  0000d204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008d8  20070000  0008520c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001d8  200708d8  00085ae4  000108d8  2**2
                  ALLOC
  4 .stack        00002000  20070ab0  00085cbc  000108d8  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000108d8  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00010901  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002a39e  00000000  00000000  00010972  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000078d5  00000000  00000000  0003ad10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000dc8a  00000000  00000000  000425e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000013c8  00000000  00000000  00050270  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001078  00000000  00000000  00051638  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001941d  00000000  00000000  000526b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00017822  00000000  00000000  0006bacd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007166e  00000000  00000000  000832ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002a1c  00000000  00000000  000f4960  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072ab0 	.word	0x20072ab0
   80004:	00082445 	.word	0x00082445
   80008:	00082441 	.word	0x00082441
   8000c:	00082441 	.word	0x00082441
   80010:	00082441 	.word	0x00082441
   80014:	00082441 	.word	0x00082441
   80018:	00082441 	.word	0x00082441
	...
   8002c:	000819e5 	.word	0x000819e5
   80030:	00082441 	.word	0x00082441
   80034:	00000000 	.word	0x00000000
   80038:	00081a21 	.word	0x00081a21
   8003c:	00081a5d 	.word	0x00081a5d
   80040:	00082441 	.word	0x00082441
   80044:	00082441 	.word	0x00082441
   80048:	00082441 	.word	0x00082441
   8004c:	00082441 	.word	0x00082441
   80050:	00082441 	.word	0x00082441
   80054:	00082441 	.word	0x00082441
   80058:	00082441 	.word	0x00082441
   8005c:	00082441 	.word	0x00082441
   80060:	00082441 	.word	0x00082441
   80064:	00082441 	.word	0x00082441
   80068:	00000000 	.word	0x00000000
   8006c:	0008220d 	.word	0x0008220d
   80070:	00082229 	.word	0x00082229
   80074:	00082245 	.word	0x00082245
   80078:	00082261 	.word	0x00082261
	...
   80084:	00082441 	.word	0x00082441
   80088:	00082441 	.word	0x00082441
   8008c:	00082441 	.word	0x00082441
   80090:	00082441 	.word	0x00082441
   80094:	00082441 	.word	0x00082441
   80098:	00082441 	.word	0x00082441
   8009c:	00082441 	.word	0x00082441
   800a0:	00082441 	.word	0x00082441
   800a4:	00000000 	.word	0x00000000
   800a8:	00082441 	.word	0x00082441
   800ac:	00082441 	.word	0x00082441
   800b0:	00082441 	.word	0x00082441
   800b4:	00082441 	.word	0x00082441
   800b8:	00082441 	.word	0x00082441
   800bc:	00082441 	.word	0x00082441
   800c0:	00082441 	.word	0x00082441
   800c4:	00082441 	.word	0x00082441
   800c8:	00082441 	.word	0x00082441
   800cc:	00082441 	.word	0x00082441
   800d0:	00082441 	.word	0x00082441
   800d4:	00082441 	.word	0x00082441
   800d8:	00082441 	.word	0x00082441
   800dc:	00082441 	.word	0x00082441
   800e0:	00082441 	.word	0x00082441
   800e4:	00082441 	.word	0x00082441
   800e8:	00082441 	.word	0x00082441
   800ec:	00082441 	.word	0x00082441
   800f0:	00082441 	.word	0x00082441

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	0008520c 	.word	0x0008520c
   80110:	0008520f 	.word	0x0008520f
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	0008520c 	.word	0x0008520c
   8013c:	0008520c 	.word	0x0008520c
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	200708d8 	.word	0x200708d8
   80164:	00000000 	.word	0x00000000
   80168:	0008520c 	.word	0x0008520c

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	0008520c 	.word	0x0008520c
   80198:	200708dc 	.word	0x200708dc
   8019c:	0008520c 	.word	0x0008520c
   801a0:	00000000 	.word	0x00000000

000801a4 <init_adc>:
/* Enable the adc */

#include <asf.h>

/* Initialize the A/D converter */
void init_adc(void){
   801a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   801a8:	f44f 6460 	mov.w	r4, #3584	; 0xe00
   801ac:	f2c4 040e 	movt	r4, #16398	; 0x400e
   801b0:	f04f 0940 	mov.w	r9, #64	; 0x40
   801b4:	f8c4 9000 	str.w	r9, [r4]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   801b8:	f8c4 9014 	str.w	r9, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   801bc:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   801c0:	f44f 0880 	mov.w	r8, #4194304	; 0x400000
   801c4:	f8c4 8000 	str.w	r8, [r4]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   801c8:	f8c4 8014 	str.w	r8, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   801cc:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   801d0:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
   801d4:	6027      	str	r7, [r4, #0]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   801d6:	6167      	str	r7, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   801d8:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   801dc:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   801e0:	6026      	str	r6, [r4, #0]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   801e2:	6166      	str	r6, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   801e4:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0

	// Enable analog pin 1
	ioport_enable_pin(PIO_PA24_IDX); // Enable analog pin 4
	ioport_set_pin_dir(PIO_PA24_IDX,IOPORT_DIR_INPUT); // Set analog pin 4 as input

	pmc_enable_periph_clk(ID_ADC);
   801e8:	f04f 0025 	mov.w	r0, #37	; 0x25
   801ec:	f242 33bd 	movw	r3, #9149	; 0x23bd
   801f0:	f2c0 0308 	movt	r3, #8
   801f4:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 1000000, 8);
   801f6:	f04f 0500 	mov.w	r5, #0
   801fa:	f2c4 050c 	movt	r5, #16396	; 0x400c
   801fe:	4628      	mov	r0, r5
   80200:	f44f 41f4 	mov.w	r1, #31232	; 0x7a00
   80204:	f6c0 2103 	movt	r1, #2563	; 0xa03
   80208:	f244 2240 	movw	r2, #16960	; 0x4240
   8020c:	f2c0 020f 	movt	r2, #15
   80210:	f04f 0308 	mov.w	r3, #8
   80214:	f640 1c11 	movw	ip, #2321	; 0x911
   80218:	f2c0 0c08 	movt	ip, #8
   8021c:	47e0      	blx	ip
	adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);
   8021e:	4628      	mov	r0, r5
   80220:	f04f 0100 	mov.w	r1, #0
   80224:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   80228:	f04f 0301 	mov.w	r3, #1
   8022c:	f640 1a61 	movw	sl, #2401	; 0x961
   80230:	f2c0 0a08 	movt	sl, #8
   80234:	47d0      	blx	sl
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
   80236:	4628      	mov	r0, r5
   80238:	f04f 0100 	mov.w	r1, #0
   8023c:	f640 1251 	movw	r2, #2385	; 0x951
   80240:	f2c0 0208 	movt	r2, #8
   80244:	4790      	blx	r2
	adc_enable_channel(ADC, ADC_CHANNEL_3);
   80246:	4628      	mov	r0, r5
   80248:	f04f 0103 	mov.w	r1, #3
   8024c:	f640 1a89 	movw	sl, #2441	; 0x989
   80250:	f2c0 0a08 	movt	sl, #8
   80254:	47d0      	blx	sl
	adc_enable_channel(ADC, ADC_CHANNEL_4);
   80256:	4628      	mov	r0, r5
   80258:	f04f 0104 	mov.w	r1, #4
   8025c:	47d0      	blx	sl
	adc_enable_channel(ADC, ADC_CHANNEL_5);
   8025e:	4628      	mov	r0, r5
   80260:	f04f 0105 	mov.w	r1, #5
   80264:	47d0      	blx	sl
	adc_enable_channel(ADC, ADC_CHANNEL_6);
   80266:	4628      	mov	r0, r5
   80268:	f04f 0106 	mov.w	r1, #6
   8026c:	47d0      	blx	sl
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   8026e:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80272:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80276:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   8027a:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   8027e:	6f20      	ldr	r0, [r4, #112]	; 0x70
   80280:	f020 0140 	bic.w	r1, r0, #64	; 0x40
   80284:	6721      	str	r1, [r4, #112]	; 0x70
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   80286:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   8028a:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   8028e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80292:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   80296:	6f23      	ldr	r3, [r4, #112]	; 0x70
   80298:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
   8029c:	6722      	str	r2, [r4, #112]	; 0x70
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   8029e:	6667      	str	r7, [r4, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   802a0:	6567      	str	r7, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   802a2:	6267      	str	r7, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   802a4:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   802a8:	6f20      	ldr	r0, [r4, #112]	; 0x70
   802aa:	f420 0100 	bic.w	r1, r0, #8388608	; 0x800000
   802ae:	6721      	str	r1, [r4, #112]	; 0x70
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   802b0:	6666      	str	r6, [r4, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   802b2:	6566      	str	r6, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   802b4:	6266      	str	r6, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   802b6:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   802ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
   802bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
   802c0:	6722      	str	r2, [r4, #112]	; 0x70
   802c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   802c6:	bf00      	nop

000802c8 <setUp>:
#include <asf.h>
#include "unity.h"

Adc* adc;

void setUp(){
   802c8:	4770      	bx	lr
   802ca:	bf00      	nop

000802cc <tearDown>:
}

void tearDown(){
   802cc:	4770      	bx	lr
   802ce:	bf00      	nop

000802d0 <test_adc_12bit>:
void test_adc_enabled(void){
	
}

/* Method testing if the ADC resolution is 12 bit*/
void test_adc_12bit(void){
   802d0:	b510      	push	{r4, lr}
   802d2:	b082      	sub	sp, #8
	TEST_ASSERT_BIT_LOW_MESSAGE(4,ADC->ADC_MR,"ADC is 10bit");
   802d4:	f04f 0300 	mov.w	r3, #0
   802d8:	f2c4 030c 	movt	r3, #16396	; 0x400c
   802dc:	685a      	ldr	r2, [r3, #4]
   802de:	f04f 0019 	mov.w	r0, #25
   802e2:	9000      	str	r0, [sp, #0]
   802e4:	f04f 0010 	mov.w	r0, #16
   802e8:	f04f 0100 	mov.w	r1, #0
   802ec:	f245 0320 	movw	r3, #20512	; 0x5020
   802f0:	f2c0 0308 	movt	r3, #8
   802f4:	f241 54ed 	movw	r4, #5613	; 0x15ed
   802f8:	f2c0 0408 	movt	r4, #8
   802fc:	47a0      	blx	r4
}
   802fe:	b002      	add	sp, #8
   80300:	bd10      	pop	{r4, pc}
   80302:	bf00      	nop

00080304 <test_channel_3_enabled>:
/* Check if channel 3 is enabled*/
void test_channel_3_enabled(void){
   80304:	b510      	push	{r4, lr}
   80306:	b082      	sub	sp, #8
	TEST_ASSERT_BIT_HIGH_MESSAGE(3,ADC->ADC_CHSR,"Channel 3 disabled");
   80308:	f04f 0300 	mov.w	r3, #0
   8030c:	f2c4 030c 	movt	r3, #16396	; 0x400c
   80310:	699a      	ldr	r2, [r3, #24]
   80312:	f04f 001d 	mov.w	r0, #29
   80316:	9000      	str	r0, [sp, #0]
   80318:	f04f 0008 	mov.w	r0, #8
   8031c:	f04f 31ff 	mov.w	r1, #4294967295
   80320:	f245 0330 	movw	r3, #20528	; 0x5030
   80324:	f2c0 0308 	movt	r3, #8
   80328:	f241 54ed 	movw	r4, #5613	; 0x15ed
   8032c:	f2c0 0408 	movt	r4, #8
   80330:	47a0      	blx	r4
}
   80332:	b002      	add	sp, #8
   80334:	bd10      	pop	{r4, pc}
   80336:	bf00      	nop

00080338 <test_adc_pin_enabled>:

/* Check if the adc pin is enabled*/
void test_adc_pin_enabled(void){
   80338:	b510      	push	{r4, lr}
   8033a:	b082      	sub	sp, #8
	TEST_ASSERT_BIT_HIGH_MESSAGE(PIO_PA6_IDX,PIOA->PIO_PSR,"Pin 3 is disabled");
   8033c:	f44f 6360 	mov.w	r3, #3584	; 0xe00
   80340:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80344:	689a      	ldr	r2, [r3, #8]
   80346:	f04f 0022 	mov.w	r0, #34	; 0x22
   8034a:	9000      	str	r0, [sp, #0]
   8034c:	f04f 0040 	mov.w	r0, #64	; 0x40
   80350:	f04f 31ff 	mov.w	r1, #4294967295
   80354:	f245 0344 	movw	r3, #20548	; 0x5044
   80358:	f2c0 0308 	movt	r3, #8
   8035c:	f241 54ed 	movw	r4, #5613	; 0x15ed
   80360:	f2c0 0408 	movt	r4, #8
   80364:	47a0      	blx	r4
}
   80366:	b002      	add	sp, #8
   80368:	bd10      	pop	{r4, pc}
   8036a:	bf00      	nop

0008036c <test_adc_pin_input>:

/* Check if the adc pin is set to input */
void test_adc_pin_input(void){
   8036c:	b510      	push	{r4, lr}
   8036e:	b082      	sub	sp, #8
	TEST_ASSERT_BIT_LOW_MESSAGE(PIO_PA6_IDX,PIOA->PIO_OSR,"Pin 3 is output");
   80370:	f44f 6360 	mov.w	r3, #3584	; 0xe00
   80374:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80378:	699a      	ldr	r2, [r3, #24]
   8037a:	f04f 0027 	mov.w	r0, #39	; 0x27
   8037e:	9000      	str	r0, [sp, #0]
   80380:	f04f 0040 	mov.w	r0, #64	; 0x40
   80384:	f04f 0100 	mov.w	r1, #0
   80388:	f245 0358 	movw	r3, #20568	; 0x5058
   8038c:	f2c0 0308 	movt	r3, #8
   80390:	f241 54ed 	movw	r4, #5613	; 0x15ed
   80394:	f2c0 0408 	movt	r4, #8
   80398:	47a0      	blx	r4
}
   8039a:	b002      	add	sp, #8
   8039c:	bd10      	pop	{r4, pc}
   8039e:	bf00      	nop

000803a0 <test_adc_pin_pullup>:

/* Check if the adc pin is set to input */
void test_adc_pin_pullup(void){
   803a0:	b510      	push	{r4, lr}
   803a2:	b082      	sub	sp, #8
	TEST_ASSERT_BIT_LOW_MESSAGE(PIO_PA6_IDX,PIOA->PIO_PUSR,"Pin 3 mode is not pullup");
   803a4:	f44f 6360 	mov.w	r3, #3584	; 0xe00
   803a8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   803ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   803ae:	f04f 002c 	mov.w	r0, #44	; 0x2c
   803b2:	9000      	str	r0, [sp, #0]
   803b4:	f04f 0040 	mov.w	r0, #64	; 0x40
   803b8:	f04f 0100 	mov.w	r1, #0
   803bc:	f245 0368 	movw	r3, #20584	; 0x5068
   803c0:	f2c0 0308 	movt	r3, #8
   803c4:	f241 54ed 	movw	r4, #5613	; 0x15ed
   803c8:	f2c0 0408 	movt	r4, #8
   803cc:	47a0      	blx	r4
}
   803ce:	b002      	add	sp, #8
   803d0:	bd10      	pop	{r4, pc}
   803d2:	bf00      	nop

000803d4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   803d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   803d6:	b083      	sub	sp, #12
   803d8:	4604      	mov	r4, r0
   803da:	460d      	mov	r5, r1
	uint32_t val;

#ifdef UART
	if (UART == (Uart*)p_usart) {
   803dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   803e0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   803e4:	4298      	cmp	r0, r3
   803e6:	d10d      	bne.n	80404 <usart_serial_getchar+0x30>
		while (uart_read((Uart*)p_usart, data));
   803e8:	f44f 6600 	mov.w	r6, #2048	; 0x800
   803ec:	f2c4 060e 	movt	r6, #16398	; 0x400e
   803f0:	f640 17f1 	movw	r7, #2545	; 0x9f1
   803f4:	f2c0 0708 	movt	r7, #8
   803f8:	4630      	mov	r0, r6
   803fa:	4629      	mov	r1, r5
   803fc:	47b8      	blx	r7
   803fe:	2800      	cmp	r0, #0
   80400:	d1fa      	bne.n	803f8 <usart_serial_getchar+0x24>
   80402:	e02b      	b.n	8045c <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80404:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   80408:	f2c4 0009 	movt	r0, #16393	; 0x4009
   8040c:	4284      	cmp	r4, r0
   8040e:	d10f      	bne.n	80430 <usart_serial_getchar+0x5c>
		while (usart_read(p_usart, &val));
   80410:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   80414:	f2c4 0609 	movt	r6, #16393	; 0x4009
   80418:	f640 2729 	movw	r7, #2601	; 0xa29
   8041c:	f2c0 0708 	movt	r7, #8
   80420:	4630      	mov	r0, r6
   80422:	a901      	add	r1, sp, #4
   80424:	47b8      	blx	r7
   80426:	2800      	cmp	r0, #0
   80428:	d1fa      	bne.n	80420 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
   8042a:	9b01      	ldr	r3, [sp, #4]
   8042c:	702b      	strb	r3, [r5, #0]
   8042e:	e02b      	b.n	80488 <usart_serial_getchar+0xb4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80430:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   80434:	f2c4 0109 	movt	r1, #16393	; 0x4009
   80438:	428c      	cmp	r4, r1
   8043a:	d10f      	bne.n	8045c <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   8043c:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   80440:	f2c4 0409 	movt	r4, #16393	; 0x4009
   80444:	f640 2629 	movw	r6, #2601	; 0xa29
   80448:	f2c0 0608 	movt	r6, #8
   8044c:	4620      	mov	r0, r4
   8044e:	a901      	add	r1, sp, #4
   80450:	47b0      	blx	r6
   80452:	2800      	cmp	r0, #0
   80454:	d1fa      	bne.n	8044c <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   80456:	9a01      	ldr	r2, [sp, #4]
   80458:	702a      	strb	r2, [r5, #0]
   8045a:	e02a      	b.n	804b2 <usart_serial_getchar+0xde>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8045c:	f04f 0000 	mov.w	r0, #0
   80460:	f2c4 000a 	movt	r0, #16394	; 0x400a
   80464:	4284      	cmp	r4, r0
   80466:	d10f      	bne.n	80488 <usart_serial_getchar+0xb4>
		while (usart_read(p_usart, &val));
   80468:	f04f 0400 	mov.w	r4, #0
   8046c:	f2c4 040a 	movt	r4, #16394	; 0x400a
   80470:	f640 2629 	movw	r6, #2601	; 0xa29
   80474:	f2c0 0608 	movt	r6, #8
   80478:	4620      	mov	r0, r4
   8047a:	a901      	add	r1, sp, #4
   8047c:	47b0      	blx	r6
   8047e:	2800      	cmp	r0, #0
   80480:	d1fa      	bne.n	80478 <usart_serial_getchar+0xa4>
		*data = (uint8_t)(val & 0xFF);
   80482:	9b01      	ldr	r3, [sp, #4]
   80484:	702b      	strb	r3, [r5, #0]
   80486:	e014      	b.n	804b2 <usart_serial_getchar+0xde>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80488:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   8048c:	f2c4 010a 	movt	r1, #16394	; 0x400a
   80490:	428c      	cmp	r4, r1
   80492:	d10e      	bne.n	804b2 <usart_serial_getchar+0xde>
		while (usart_read(p_usart, &val));
   80494:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   80498:	f2c4 040a 	movt	r4, #16394	; 0x400a
   8049c:	f640 2629 	movw	r6, #2601	; 0xa29
   804a0:	f2c0 0608 	movt	r6, #8
   804a4:	4620      	mov	r0, r4
   804a6:	a901      	add	r1, sp, #4
   804a8:	47b0      	blx	r6
   804aa:	2800      	cmp	r0, #0
   804ac:	d1fa      	bne.n	804a4 <usart_serial_getchar+0xd0>
		*data = (uint8_t)(val & 0xFF);
   804ae:	9a01      	ldr	r2, [sp, #4]
   804b0:	702a      	strb	r2, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   804b2:	b003      	add	sp, #12
   804b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   804b6:	bf00      	nop

000804b8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   804b8:	b570      	push	{r4, r5, r6, lr}
   804ba:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   804bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   804c0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   804c4:	4298      	cmp	r0, r3
   804c6:	d10f      	bne.n	804e8 <usart_serial_putchar+0x30>
		while (uart_write((Uart*)p_usart, c)!=0);
   804c8:	f44f 6500 	mov.w	r5, #2048	; 0x800
   804cc:	f2c4 050e 	movt	r5, #16398	; 0x400e
   804d0:	f640 16d9 	movw	r6, #2521	; 0x9d9
   804d4:	f2c0 0608 	movt	r6, #8
   804d8:	4628      	mov	r0, r5
   804da:	4621      	mov	r1, r4
   804dc:	47b0      	blx	r6
   804de:	2800      	cmp	r0, #0
   804e0:	d1fa      	bne.n	804d8 <usart_serial_putchar+0x20>
		return 1;
   804e2:	f04f 0001 	mov.w	r0, #1
   804e6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   804e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   804ec:	f2c4 0109 	movt	r1, #16393	; 0x4009
   804f0:	4288      	cmp	r0, r1
   804f2:	d10f      	bne.n	80514 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   804f4:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   804f8:	f2c4 0509 	movt	r5, #16393	; 0x4009
   804fc:	f640 2609 	movw	r6, #2569	; 0xa09
   80500:	f2c0 0608 	movt	r6, #8
   80504:	4628      	mov	r0, r5
   80506:	4621      	mov	r1, r4
   80508:	47b0      	blx	r6
   8050a:	2800      	cmp	r0, #0
   8050c:	d1fa      	bne.n	80504 <usart_serial_putchar+0x4c>
		return 1;
   8050e:	f04f 0001 	mov.w	r0, #1
   80512:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80514:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   80518:	f2c4 0209 	movt	r2, #16393	; 0x4009
   8051c:	4290      	cmp	r0, r2
   8051e:	d10f      	bne.n	80540 <usart_serial_putchar+0x88>
		while (usart_write(p_usart, c)!=0);
   80520:	f44f 4540 	mov.w	r5, #49152	; 0xc000
   80524:	f2c4 0509 	movt	r5, #16393	; 0x4009
   80528:	f640 2609 	movw	r6, #2569	; 0xa09
   8052c:	f2c0 0608 	movt	r6, #8
   80530:	4628      	mov	r0, r5
   80532:	4621      	mov	r1, r4
   80534:	47b0      	blx	r6
   80536:	2800      	cmp	r0, #0
   80538:	d1fa      	bne.n	80530 <usart_serial_putchar+0x78>
		return 1;
   8053a:	f04f 0001 	mov.w	r0, #1
   8053e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80540:	f04f 0300 	mov.w	r3, #0
   80544:	f2c4 030a 	movt	r3, #16394	; 0x400a
   80548:	4298      	cmp	r0, r3
   8054a:	d10f      	bne.n	8056c <usart_serial_putchar+0xb4>
		while (usart_write(p_usart, c)!=0);
   8054c:	f04f 0500 	mov.w	r5, #0
   80550:	f2c4 050a 	movt	r5, #16394	; 0x400a
   80554:	f640 2609 	movw	r6, #2569	; 0xa09
   80558:	f2c0 0608 	movt	r6, #8
   8055c:	4628      	mov	r0, r5
   8055e:	4621      	mov	r1, r4
   80560:	47b0      	blx	r6
   80562:	2800      	cmp	r0, #0
   80564:	d1fa      	bne.n	8055c <usart_serial_putchar+0xa4>
		return 1;
   80566:	f04f 0001 	mov.w	r0, #1
   8056a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8056c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80570:	f2c4 010a 	movt	r1, #16394	; 0x400a
   80574:	4288      	cmp	r0, r1
   80576:	d10f      	bne.n	80598 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
   80578:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   8057c:	f2c4 050a 	movt	r5, #16394	; 0x400a
   80580:	f640 2609 	movw	r6, #2569	; 0xa09
   80584:	f2c0 0608 	movt	r6, #8
   80588:	4628      	mov	r0, r5
   8058a:	4621      	mov	r1, r4
   8058c:	47b0      	blx	r6
   8058e:	2800      	cmp	r0, #0
   80590:	d1fa      	bne.n	80588 <usart_serial_putchar+0xd0>
		return 1;
   80592:	f04f 0001 	mov.w	r0, #1
   80596:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80598:	f04f 0000 	mov.w	r0, #0
}
   8059c:	bd70      	pop	{r4, r5, r6, pc}
   8059e:	bf00      	nop

000805a0 <main>:
	
	#endif
}

int main(void)
{
   805a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   805a4:	b087      	sub	sp, #28
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   805a6:	f04f 0008 	mov.w	r0, #8
   805aa:	f242 35bd 	movw	r5, #9149	; 0x23bd
   805ae:	f2c0 0508 	movt	r5, #8
   805b2:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   805b4:	f44f 6400 	mov.w	r4, #2048	; 0x800
   805b8:	f2c4 040e 	movt	r4, #16398	; 0x400e
   805bc:	f640 232c 	movw	r3, #2604	; 0xa2c
   805c0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   805c4:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   805c6:	f640 2028 	movw	r0, #2600	; 0xa28
   805ca:	f2c2 0007 	movt	r0, #8199	; 0x2007
   805ce:	f240 42b9 	movw	r2, #1209	; 0x4b9
   805d2:	f2c0 0208 	movt	r2, #8
   805d6:	6002      	str	r2, [r0, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   805d8:	f640 2124 	movw	r1, #2596	; 0xa24
   805dc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   805e0:	f240 36d5 	movw	r6, #981	; 0x3d5
   805e4:	f2c0 0608 	movt	r6, #8
   805e8:	600e      	str	r6, [r1, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   805ea:	f44f 473d 	mov.w	r7, #48384	; 0xbd00
   805ee:	f2c0 5701 	movt	r7, #1281	; 0x501
   805f2:	9702      	str	r7, [sp, #8]
	uart_settings.ul_baudrate = opt->baudrate;
   805f4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   805f8:	9303      	str	r3, [sp, #12]
	uart_settings.ul_mode = opt->paritytype;
   805fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
   805fe:	9004      	str	r0, [sp, #16]
   80600:	f04f 0008 	mov.w	r0, #8
   80604:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80606:	4620      	mov	r0, r4
   80608:	a902      	add	r1, sp, #8
   8060a:	f640 1595 	movw	r5, #2453	; 0x995
   8060e:	f2c0 0508 	movt	r5, #8
   80612:	47a8      	blx	r5
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80614:	f240 0618 	movw	r6, #24
   80618:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8061c:	6834      	ldr	r4, [r6, #0]
   8061e:	68a0      	ldr	r0, [r4, #8]
   80620:	f04f 0100 	mov.w	r1, #0
   80624:	f642 17ef 	movw	r7, #10735	; 0x29ef
   80628:	f2c0 0708 	movt	r7, #8
   8062c:	47b8      	blx	r7
	setbuf(stdin, NULL);
   8062e:	6832      	ldr	r2, [r6, #0]
   80630:	6850      	ldr	r0, [r2, #4]
   80632:	f04f 0100 	mov.w	r1, #0
   80636:	47b8      	blx	r7
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   80638:	f44f 6160 	mov.w	r1, #3584	; 0xe00
   8063c:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80640:	f44f 7380 	mov.w	r3, #256	; 0x100
   80644:	664b      	str	r3, [r1, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80646:	654b      	str	r3, [r1, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80648:	624b      	str	r3, [r1, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   8064a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   8064e:	6f08      	ldr	r0, [r1, #112]	; 0x70
   80650:	f420 7580 	bic.w	r5, r0, #256	; 0x100
   80654:	670d      	str	r5, [r1, #112]	; 0x70
	stdio_serial_init(CONF_UART, &uart_serial_options);
	

	ioport_set_pin_mode(PIO_PA8_IDX,IOPORT_MODE_PULLUP); // Specify that sdout will not buffer 
	#if defined(__GNUC__)
	setbuf(stdout, NULL);
   80656:	6836      	ldr	r6, [r6, #0]
   80658:	68b0      	ldr	r0, [r6, #8]
   8065a:	f04f 0100 	mov.w	r1, #0
   8065e:	47b8      	blx	r7
}

int main(void)
{
	configure_console();
	board_init();
   80660:	f641 546d 	movw	r4, #7533	; 0x1d6d
   80664:	f2c0 0408 	movt	r4, #8
   80668:	47a0      	blx	r4
	sysclk_init();
   8066a:	f641 47e1 	movw	r7, #7393	; 0x1ce1
   8066e:	f2c0 0708 	movt	r7, #8
   80672:	47b8      	blx	r7
	delay_init();
	
	init_adc();
   80674:	f240 12a5 	movw	r2, #421	; 0x1a5
   80678:	f2c0 0208 	movt	r2, #8
   8067c:	4790      	blx	r2
	
	UnityBegin("test/test_adc.c"); // Begin unity on the test protocol for test_math, run setUp() in test_math.c
   8067e:	f245 0084 	movw	r0, #20612	; 0x5084
   80682:	f2c0 0008 	movt	r0, #8
   80686:	f241 61e5 	movw	r1, #5861	; 0x16e5
   8068a:	f2c0 0108 	movt	r1, #8
   8068e:	4788      	blx	r1
	
	RUN_TEST(test_adc_12bit,20); // Run test if adc is 12bit resolution.
   80690:	f240 20d1 	movw	r0, #721	; 0x2d1
   80694:	f2c0 0008 	movt	r0, #8
   80698:	f245 0194 	movw	r1, #20628	; 0x5094
   8069c:	f2c0 0108 	movt	r1, #8
   806a0:	f04f 0214 	mov.w	r2, #20
   806a4:	f241 6575 	movw	r5, #5749	; 0x1675
   806a8:	f2c0 0508 	movt	r5, #8
   806ac:	47a8      	blx	r5
	RUN_TEST(test_channel_3_enabled,20); // Test i channel 3 is enabled
   806ae:	f240 3005 	movw	r0, #773	; 0x305
   806b2:	f2c0 0008 	movt	r0, #8
   806b6:	f245 01a4 	movw	r1, #20644	; 0x50a4
   806ba:	f2c0 0108 	movt	r1, #8
   806be:	f04f 0214 	mov.w	r2, #20
   806c2:	47a8      	blx	r5
	RUN_TEST(test_adc_pin_enabled,20); // Test if analog pin is enabled
   806c4:	f240 3039 	movw	r0, #825	; 0x339
   806c8:	f2c0 0008 	movt	r0, #8
   806cc:	f245 01bc 	movw	r1, #20668	; 0x50bc
   806d0:	f2c0 0108 	movt	r1, #8
   806d4:	f04f 0214 	mov.w	r2, #20
   806d8:	47a8      	blx	r5
	RUN_TEST(test_adc_pin_input,20); // Test if analpog pin is set as input
   806da:	f240 306d 	movw	r0, #877	; 0x36d
   806de:	f2c0 0008 	movt	r0, #8
   806e2:	f245 01d4 	movw	r1, #20692	; 0x50d4
   806e6:	f2c0 0108 	movt	r1, #8
   806ea:	f04f 0214 	mov.w	r2, #20
   806ee:	47a8      	blx	r5
	RUN_TEST(test_adc_pin_pullup,20); // Test if analpog pin is set as input
   806f0:	f240 30a1 	movw	r0, #929	; 0x3a1
   806f4:	f2c0 0008 	movt	r0, #8
   806f8:	f245 01e8 	movw	r1, #20712	; 0x50e8
   806fc:	f2c0 0108 	movt	r1, #8
   80700:	f04f 0214 	mov.w	r2, #20
   80704:	47a8      	blx	r5
	
	UnityEnd(); // End test protocol, print information
   80706:	f241 7305 	movw	r3, #5893	; 0x1705
   8070a:	f2c0 0308 	movt	r3, #8
   8070e:	4798      	blx	r3
	int d;
	int i;
	
	for(;;)
	{	
		i = 0;
   80710:	f04f 0900 	mov.w	r9, #0
		a = 0;
		b = 0;
		c = 0;
		d = 0;
   80714:	464c      	mov	r4, r9
	for(;;)
	{	
		i = 0;
		a = 0;
		b = 0;
		c = 0;
   80716:	46c8      	mov	r8, r9
	
	for(;;)
	{	
		i = 0;
		a = 0;
		b = 0;
   80718:	464f      	mov	r7, r9
	int i;
	
	for(;;)
	{	
		i = 0;
		a = 0;
   8071a:	464e      	mov	r6, r9
		b = 0;
		c = 0;
		d = 0;
		while(i<10) // Average filter 
		{
		int temp = ADC->ADC_CDR[3];//adc_get_latest_value(ADC);
   8071c:	46a2      	mov	sl, r4
   8071e:	f2c4 0a0c 	movt	sl, #16396	; 0x400c
			adc_start(ADC);
   80722:	f640 1081 	movw	r0, #2433	; 0x981
   80726:	f2c0 0008 	movt	r0, #8
   8072a:	9001      	str	r0, [sp, #4]
	}
	a = a/10;
	b = b/10;
	c = c/10;
	d = d/10;
		printf("#A3 %d\n\r",a);
   8072c:	f245 02fc 	movw	r2, #20732	; 0x50fc
   80730:	4693      	mov	fp, r2
   80732:	f2c0 0b08 	movt	fp, #8
				c += temp3;
				d += temp4;
				i++;
			}
	}
	a = a/10;
   80736:	f246 6567 	movw	r5, #26215	; 0x6667
   8073a:	f2c6 6566 	movt	r5, #26214	; 0x6666
   8073e:	e013      	b.n	80768 <main+0x1c8>
		b = 0;
		c = 0;
		d = 0;
		while(i<10) // Average filter 
		{
		int temp = ADC->ADC_CDR[3];//adc_get_latest_value(ADC);
   80740:	f8da 005c 	ldr.w	r0, [sl, #92]	; 0x5c
   80744:	9000      	str	r0, [sp, #0]
			adc_start(ADC);
   80746:	4650      	mov	r0, sl
   80748:	9b01      	ldr	r3, [sp, #4]
   8074a:	4798      	blx	r3
		int temp2 = ADC->ADC_CDR[4];	
   8074c:	f8da 1060 	ldr.w	r1, [sl, #96]	; 0x60
		int temp3 = ADC->ADC_CDR[5];
   80750:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
		int temp4 = ADC->ADC_CDR[6];	
   80754:	f8da 3068 	ldr.w	r3, [sl, #104]	; 0x68
			if(temp!=0)
   80758:	9800      	ldr	r0, [sp, #0]
   8075a:	b128      	cbz	r0, 80768 <main+0x1c8>
			{
				a += temp;
   8075c:	1836      	adds	r6, r6, r0
				b += temp2;
   8075e:	187f      	adds	r7, r7, r1
				c += temp3;
   80760:	4490      	add	r8, r2
				d += temp4;
   80762:	18e4      	adds	r4, r4, r3
				i++;
   80764:	f109 0901 	add.w	r9, r9, #1
		i = 0;
		a = 0;
		b = 0;
		c = 0;
		d = 0;
		while(i<10) // Average filter 
   80768:	f1b9 0f09 	cmp.w	r9, #9
   8076c:	dde8      	ble.n	80740 <main+0x1a0>
				c += temp3;
				d += temp4;
				i++;
			}
	}
	a = a/10;
   8076e:	fb85 3106 	smull	r3, r1, r5, r6
   80772:	ea4f 76e6 	mov.w	r6, r6, asr #31
	b = b/10;
	c = c/10;
	d = d/10;
		printf("#A3 %d\n\r",a);
   80776:	4658      	mov	r0, fp
   80778:	ebc6 01a1 	rsb	r1, r6, r1, asr #2
   8077c:	f642 168d 	movw	r6, #10637	; 0x298d
   80780:	f2c0 0608 	movt	r6, #8
   80784:	47b0      	blx	r6
				d += temp4;
				i++;
			}
	}
	a = a/10;
	b = b/10;
   80786:	fb85 0307 	smull	r0, r3, r5, r7
   8078a:	ea4f 77e7 	mov.w	r7, r7, asr #31
	c = c/10;
	d = d/10;
		printf("#A3 %d\n\r",a);
		printf("#A4 %d\n\r",b);
   8078e:	f245 1008 	movw	r0, #20744	; 0x5108
   80792:	f2c0 0008 	movt	r0, #8
   80796:	ebc7 01a3 	rsb	r1, r7, r3, asr #2
   8079a:	47b0      	blx	r6
				i++;
			}
	}
	a = a/10;
	b = b/10;
	c = c/10;
   8079c:	fb85 3208 	smull	r3, r2, r5, r8
   807a0:	ea4f 78e8 	mov.w	r8, r8, asr #31
	d = d/10;
		printf("#A3 %d\n\r",a);
		printf("#A4 %d\n\r",b);
		printf("#A2 %d\n\r",c);
   807a4:	f245 1014 	movw	r0, #20756	; 0x5114
   807a8:	f2c0 0008 	movt	r0, #8
   807ac:	ebc8 01a2 	rsb	r1, r8, r2, asr #2
   807b0:	47b0      	blx	r6
			}
	}
	a = a/10;
	b = b/10;
	c = c/10;
	d = d/10;
   807b2:	fb85 0104 	smull	r0, r1, r5, r4
   807b6:	ea4f 74e4 	mov.w	r4, r4, asr #31
		printf("#A3 %d\n\r",a);
		printf("#A4 %d\n\r",b);
		printf("#A2 %d\n\r",c);
		printf("#A1 %d\n\r",d);
   807ba:	f245 1020 	movw	r0, #20768	; 0x5120
   807be:	f2c0 0008 	movt	r0, #8
   807c2:	ebc4 01a1 	rsb	r1, r4, r1, asr #2
   807c6:	47b0      	blx	r6
		delay_ms(1000);
   807c8:	f648 5080 	movw	r0, #36224	; 0x8d80
   807cc:	f2c0 005b 	movt	r0, #91	; 0x5b
   807d0:	f240 0601 	movw	r6, #1
   807d4:	f2c2 0607 	movt	r6, #8199	; 0x2007
   807d8:	47b0      	blx	r6
	int d;
	int i;
	
	for(;;)
	{	
		i = 0;
   807da:	f04f 0400 	mov.w	r4, #0
		a = 0;
		b = 0;
		c = 0;
		d = 0;
   807de:	46a1      	mov	r9, r4
	for(;;)
	{	
		i = 0;
		a = 0;
		b = 0;
		c = 0;
   807e0:	46a0      	mov	r8, r4
	
	for(;;)
	{	
		i = 0;
		a = 0;
		b = 0;
   807e2:	4627      	mov	r7, r4
	int i;
	
	for(;;)
	{	
		i = 0;
		a = 0;
   807e4:	4626      	mov	r6, r4
		printf("#A3 %d\n\r",a);
		printf("#A4 %d\n\r",b);
		printf("#A2 %d\n\r",c);
		printf("#A1 %d\n\r",d);
		delay_ms(1000);
	}
   807e6:	e7bf      	b.n	80768 <main+0x1c8>

000807e8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   807e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   807ec:	460c      	mov	r4, r1
   807ee:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   807f0:	bb48      	cbnz	r0, 80846 <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
   807f2:	2a00      	cmp	r2, #0
   807f4:	dd2b      	ble.n	8084e <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
   807f6:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   807f8:	f640 262c 	movw	r6, #2604	; 0xa2c
   807fc:	f2c2 0607 	movt	r6, #8199	; 0x2007
   80800:	f640 2524 	movw	r5, #2596	; 0xa24
   80804:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80808:	ea6f 0901 	mvn.w	r9, r1
   8080c:	eb07 0009 	add.w	r0, r7, r9
   80810:	f000 0901 	and.w	r9, r0, #1
   80814:	6830      	ldr	r0, [r6, #0]
   80816:	682b      	ldr	r3, [r5, #0]
   80818:	4798      	blx	r3
		ptr++;
   8081a:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8081e:	42bc      	cmp	r4, r7
   80820:	d119      	bne.n	80856 <_read+0x6e>
   80822:	e00d      	b.n	80840 <_read+0x58>
		ptr_get(stdio_base, ptr);
   80824:	6830      	ldr	r0, [r6, #0]
   80826:	682b      	ldr	r3, [r5, #0]
   80828:	4621      	mov	r1, r4
   8082a:	4798      	blx	r3
		ptr++;
   8082c:	f104 0401 	add.w	r4, r4, #1
   80830:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   80832:	6830      	ldr	r0, [r6, #0]
   80834:	682a      	ldr	r2, [r5, #0]
   80836:	4790      	blx	r2
		ptr++;
   80838:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8083c:	42bc      	cmp	r4, r7
   8083e:	d1f1      	bne.n	80824 <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80840:	4640      	mov	r0, r8
   80842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80846:	f04f 30ff 	mov.w	r0, #4294967295
   8084a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
   8084e:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   80852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80856:	f1b9 0f00 	cmp.w	r9, #0
   8085a:	d0e3      	beq.n	80824 <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   8085c:	6830      	ldr	r0, [r6, #0]
   8085e:	682a      	ldr	r2, [r5, #0]
   80860:	4621      	mov	r1, r4
   80862:	4790      	blx	r2
		ptr++;
   80864:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80868:	42bc      	cmp	r4, r7
   8086a:	d1db      	bne.n	80824 <_read+0x3c>
   8086c:	e7e8      	b.n	80840 <_read+0x58>
   8086e:	bf00      	nop

00080870 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   80870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80874:	460d      	mov	r5, r1
   80876:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80878:	f100 30ff 	add.w	r0, r0, #4294967295
   8087c:	2802      	cmp	r0, #2
   8087e:	d824      	bhi.n	808ca <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
   80880:	b332      	cbz	r2, 808d0 <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80882:	f640 262c 	movw	r6, #2604	; 0xa2c
   80886:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8088a:	f640 2728 	movw	r7, #2600	; 0xa28
   8088e:	f2c2 0707 	movt	r7, #8199	; 0x2007
   80892:	f04f 0400 	mov.w	r4, #0
   80896:	f102 39ff 	add.w	r9, r2, #4294967295
   8089a:	f009 0901 	and.w	r9, r9, #1
   8089e:	6830      	ldr	r0, [r6, #0]
   808a0:	683b      	ldr	r3, [r7, #0]
   808a2:	5d09      	ldrb	r1, [r1, r4]
   808a4:	4798      	blx	r3
   808a6:	42a0      	cmp	r0, r4
   808a8:	da1a      	bge.n	808e0 <_write+0x70>
   808aa:	e014      	b.n	808d6 <_write+0x66>
   808ac:	6830      	ldr	r0, [r6, #0]
   808ae:	683b      	ldr	r3, [r7, #0]
   808b0:	5d29      	ldrb	r1, [r5, r4]
   808b2:	4798      	blx	r3
   808b4:	2800      	cmp	r0, #0
   808b6:	db0e      	blt.n	808d6 <_write+0x66>
			return -1;
		}
		++nChars;
   808b8:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   808bc:	6830      	ldr	r0, [r6, #0]
   808be:	683a      	ldr	r2, [r7, #0]
   808c0:	5d29      	ldrb	r1, [r5, r4]
   808c2:	4790      	blx	r2
   808c4:	2800      	cmp	r0, #0
   808c6:	da1d      	bge.n	80904 <_write+0x94>
   808c8:	e005      	b.n	808d6 <_write+0x66>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   808ca:	f04f 34ff 	mov.w	r4, #4294967295
   808ce:	e004      	b.n	808da <_write+0x6a>
	}

	for (; len != 0; --len) {
   808d0:	f04f 0400 	mov.w	r4, #0
   808d4:	e001      	b.n	808da <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   808d6:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   808da:	4620      	mov	r0, r4
   808dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   808e0:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   808e4:	45a0      	cmp	r8, r4
   808e6:	d0f8      	beq.n	808da <_write+0x6a>
   808e8:	f1b9 0f00 	cmp.w	r9, #0
   808ec:	d0de      	beq.n	808ac <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   808ee:	6830      	ldr	r0, [r6, #0]
   808f0:	683a      	ldr	r2, [r7, #0]
   808f2:	5d29      	ldrb	r1, [r5, r4]
   808f4:	4790      	blx	r2
   808f6:	2800      	cmp	r0, #0
   808f8:	dbed      	blt.n	808d6 <_write+0x66>
			return -1;
		}
		++nChars;
   808fa:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   808fe:	45a0      	cmp	r8, r4
   80900:	d1d4      	bne.n	808ac <_write+0x3c>
   80902:	e7ea      	b.n	808da <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   80904:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80908:	45a0      	cmp	r8, r4
   8090a:	d1cf      	bne.n	808ac <_write+0x3c>
   8090c:	e7e5      	b.n	808da <_write+0x6a>
   8090e:	bf00      	nop

00080910 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80910:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   80912:	f04f 0401 	mov.w	r4, #1
   80916:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80918:	f04f 0400 	mov.w	r4, #0
   8091c:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   8091e:	f240 2502 	movw	r5, #514	; 0x202
   80922:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   80926:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   8092a:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   8092e:	6845      	ldr	r5, [r0, #4]
   80930:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   80932:	ea4f 0242 	mov.w	r2, r2, lsl #1
   80936:	fbb1 f1f2 	udiv	r1, r1, r2
   8093a:	f101 32ff 	add.w	r2, r1, #4294967295
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   8093e:	ea4f 6102 	mov.w	r1, r2, lsl #24
   80942:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
   80946:	6043      	str	r3, [r0, #4]
	return 0;
}
   80948:	4620      	mov	r0, r4
   8094a:	bc30      	pop	{r4, r5}
   8094c:	4770      	bx	lr
   8094e:	bf00      	nop

00080950 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   80950:	6843      	ldr	r3, [r0, #4]
   80952:	f023 0210 	bic.w	r2, r3, #16
   80956:	6042      	str	r2, [r0, #4]
	p_adc->ADC_MR |= resolution;
   80958:	6843      	ldr	r3, [r0, #4]
   8095a:	4319      	orrs	r1, r3
   8095c:	6041      	str	r1, [r0, #4]
   8095e:	4770      	bx	lr

00080960 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80960:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80962:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   80964:	4322      	orrs	r2, r4
   80966:	ea4f 6101 	mov.w	r1, r1, lsl #24
   8096a:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   8096e:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80970:	ea4f 7303 	mov.w	r3, r3, lsl #28
   80974:	f003 5140 	and.w	r1, r3, #805306368	; 0x30000000
   80978:	430a      	orrs	r2, r1
   8097a:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   8097c:	bc10      	pop	{r4}
   8097e:	4770      	bx	lr

00080980 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80980:	f04f 0302 	mov.w	r3, #2
   80984:	6003      	str	r3, [r0, #0]
   80986:	4770      	bx	lr

00080988 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80988:	f04f 0301 	mov.w	r3, #1
   8098c:	fa03 f101 	lsl.w	r1, r3, r1
   80990:	6101      	str	r1, [r0, #16]
   80992:	4770      	bx	lr

00080994 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80994:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80996:	f04f 03ac 	mov.w	r3, #172	; 0xac
   8099a:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8099c:	680a      	ldr	r2, [r1, #0]
   8099e:	684c      	ldr	r4, [r1, #4]
   809a0:	fbb2 f3f4 	udiv	r3, r2, r4
   809a4:	ea4f 1313 	mov.w	r3, r3, lsr #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   809a8:	f103 34ff 	add.w	r4, r3, #4294967295
   809ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   809b0:	4294      	cmp	r4, r2
   809b2:	d80c      	bhi.n	809ce <uart_init+0x3a>
		return 1;

	p_uart->UART_BRGR = cd;
   809b4:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   809b6:	6889      	ldr	r1, [r1, #8]
   809b8:	6041      	str	r1, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   809ba:	f240 2302 	movw	r3, #514	; 0x202
   809be:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   809c2:	f04f 0250 	mov.w	r2, #80	; 0x50
   809c6:	6002      	str	r2, [r0, #0]

	return 0;
   809c8:	f04f 0000 	mov.w	r0, #0
   809cc:	e001      	b.n	809d2 <uart_init+0x3e>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   809ce:	f04f 0001 	mov.w	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   809d2:	bc10      	pop	{r4}
   809d4:	4770      	bx	lr
   809d6:	bf00      	nop

000809d8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   809d8:	6943      	ldr	r3, [r0, #20]
   809da:	f013 0f02 	tst.w	r3, #2
   809de:	d003      	beq.n	809e8 <uart_write+0x10>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   809e0:	61c1      	str	r1, [r0, #28]
	return 0;
   809e2:	f04f 0000 	mov.w	r0, #0
   809e6:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   809e8:	f04f 0001 	mov.w	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   809ec:	4770      	bx	lr
   809ee:	bf00      	nop

000809f0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   809f0:	6943      	ldr	r3, [r0, #20]
   809f2:	f013 0f01 	tst.w	r3, #1
   809f6:	d004      	beq.n	80a02 <uart_read+0x12>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   809f8:	6980      	ldr	r0, [r0, #24]
   809fa:	7008      	strb	r0, [r1, #0]
	return 0;
   809fc:	f04f 0000 	mov.w	r0, #0
   80a00:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80a02:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80a06:	4770      	bx	lr

00080a08 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80a08:	6943      	ldr	r3, [r0, #20]
   80a0a:	f013 0f02 	tst.w	r3, #2
   80a0e:	d007      	beq.n	80a20 <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80a10:	ea4f 51c1 	mov.w	r1, r1, lsl #23
   80a14:	ea4f 52d1 	mov.w	r2, r1, lsr #23
   80a18:	61c2      	str	r2, [r0, #28]
	return 0;
   80a1a:	f04f 0000 	mov.w	r0, #0
   80a1e:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80a20:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80a24:	4770      	bx	lr
   80a26:	bf00      	nop

00080a28 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80a28:	6943      	ldr	r3, [r0, #20]
   80a2a:	f013 0f01 	tst.w	r3, #1
   80a2e:	d008      	beq.n	80a42 <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80a30:	6980      	ldr	r0, [r0, #24]
   80a32:	ea4f 52c0 	mov.w	r2, r0, lsl #23
   80a36:	ea4f 53d2 	mov.w	r3, r2, lsr #23
   80a3a:	600b      	str	r3, [r1, #0]

	return 0;
   80a3c:	f04f 0000 	mov.w	r0, #0
   80a40:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80a42:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80a46:	4770      	bx	lr

00080a48 <UnityPrintNumber>:
}

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumber(const _U_SINT number_to_print)
{
   80a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80a4c:	4606      	mov	r6, r0
    _U_SINT divisor = 1;
    _U_SINT next_divisor;
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
   80a4e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   80a52:	d148      	bne.n	80ae6 <UnityPrintNumber+0x9e>
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80a54:	f240 0318 	movw	r3, #24
   80a58:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80a5c:	6818      	ldr	r0, [r3, #0]
   80a5e:	6882      	ldr	r2, [r0, #8]
   80a60:	6891      	ldr	r1, [r2, #8]
   80a62:	f101 34ff 	add.w	r4, r1, #4294967295
   80a66:	6094      	str	r4, [r2, #8]
   80a68:	2c00      	cmp	r4, #0
   80a6a:	da2a      	bge.n	80ac2 <UnityPrintNumber+0x7a>
   80a6c:	6882      	ldr	r2, [r0, #8]
   80a6e:	6894      	ldr	r4, [r2, #8]
   80a70:	6995      	ldr	r5, [r2, #24]
   80a72:	42ac      	cmp	r4, r5
   80a74:	db1b      	blt.n	80aae <UnityPrintNumber+0x66>
   80a76:	6810      	ldr	r0, [r2, #0]
   80a78:	f04f 072d 	mov.w	r7, #45	; 0x2d
   80a7c:	7007      	strb	r7, [r0, #0]
   80a7e:	f240 0318 	movw	r3, #24
   80a82:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80a86:	6818      	ldr	r0, [r3, #0]
   80a88:	6882      	ldr	r2, [r0, #8]
   80a8a:	6814      	ldr	r4, [r2, #0]
   80a8c:	7821      	ldrb	r1, [r4, #0]
   80a8e:	290a      	cmp	r1, #10
   80a90:	d003      	beq.n	80a9a <UnityPrintNumber+0x52>
   80a92:	f104 0401 	add.w	r4, r4, #1
   80a96:	6014      	str	r4, [r2, #0]
   80a98:	e073      	b.n	80b82 <UnityPrintNumber+0x13a>
   80a9a:	f04f 010a 	mov.w	r1, #10
   80a9e:	f243 452d 	movw	r5, #13357	; 0x342d
   80aa2:	f2c0 0508 	movt	r5, #8
   80aa6:	47a8      	blx	r5
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80aa8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
   80aac:	e069      	b.n	80b82 <UnityPrintNumber+0x13a>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80aae:	f04f 012d 	mov.w	r1, #45	; 0x2d
   80ab2:	f243 462d 	movw	r6, #13357	; 0x342d
   80ab6:	f2c0 0608 	movt	r6, #8
   80aba:	47b0      	blx	r6
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80abc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
   80ac0:	e05f      	b.n	80b82 <UnityPrintNumber+0x13a>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80ac2:	6886      	ldr	r6, [r0, #8]
   80ac4:	6830      	ldr	r0, [r6, #0]
   80ac6:	f04f 052d 	mov.w	r5, #45	; 0x2d
   80aca:	7005      	strb	r5, [r0, #0]
   80acc:	f240 0718 	movw	r7, #24
   80ad0:	f2c2 0707 	movt	r7, #8199	; 0x2007
   80ad4:	683b      	ldr	r3, [r7, #0]
   80ad6:	6899      	ldr	r1, [r3, #8]
   80ad8:	680a      	ldr	r2, [r1, #0]
   80ada:	f102 0201 	add.w	r2, r2, #1
   80ade:	600a      	str	r2, [r1, #0]
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80ae0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
   80ae4:	e04d      	b.n	80b82 <UnityPrintNumber+0x13a>
    }
    else if (number_to_print < 0)
   80ae6:	2800      	cmp	r0, #0
   80ae8:	da4b      	bge.n	80b82 <UnityPrintNumber+0x13a>
    {
        //Some other negative number
        UNITY_OUTPUT_CHAR('-');
   80aea:	f240 0318 	movw	r3, #24
   80aee:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80af2:	6818      	ldr	r0, [r3, #0]
   80af4:	6882      	ldr	r2, [r0, #8]
   80af6:	6891      	ldr	r1, [r2, #8]
   80af8:	f101 34ff 	add.w	r4, r1, #4294967295
   80afc:	6094      	str	r4, [r2, #8]
   80afe:	2c00      	cmp	r4, #0
   80b00:	da26      	bge.n	80b50 <UnityPrintNumber+0x108>
   80b02:	6882      	ldr	r2, [r0, #8]
   80b04:	6895      	ldr	r5, [r2, #8]
   80b06:	6997      	ldr	r7, [r2, #24]
   80b08:	42bd      	cmp	r5, r7
   80b0a:	db19      	blt.n	80b40 <UnityPrintNumber+0xf8>
   80b0c:	6810      	ldr	r0, [r2, #0]
   80b0e:	f04f 022d 	mov.w	r2, #45	; 0x2d
   80b12:	7002      	strb	r2, [r0, #0]
   80b14:	f240 0118 	movw	r1, #24
   80b18:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80b1c:	6808      	ldr	r0, [r1, #0]
   80b1e:	6882      	ldr	r2, [r0, #8]
   80b20:	6814      	ldr	r4, [r2, #0]
   80b22:	7825      	ldrb	r5, [r4, #0]
   80b24:	2d0a      	cmp	r5, #10
   80b26:	d003      	beq.n	80b30 <UnityPrintNumber+0xe8>
   80b28:	f104 0401 	add.w	r4, r4, #1
   80b2c:	6014      	str	r4, [r2, #0]
   80b2e:	e01e      	b.n	80b6e <UnityPrintNumber+0x126>
   80b30:	f04f 010a 	mov.w	r1, #10
   80b34:	f243 472d 	movw	r7, #13357	; 0x342d
   80b38:	f2c0 0708 	movt	r7, #8
   80b3c:	47b8      	blx	r7
   80b3e:	e016      	b.n	80b6e <UnityPrintNumber+0x126>
   80b40:	f04f 012d 	mov.w	r1, #45	; 0x2d
   80b44:	f243 432d 	movw	r3, #13357	; 0x342d
   80b48:	f2c0 0308 	movt	r3, #8
   80b4c:	4798      	blx	r3
   80b4e:	e00e      	b.n	80b6e <UnityPrintNumber+0x126>
   80b50:	6880      	ldr	r0, [r0, #8]
   80b52:	6805      	ldr	r5, [r0, #0]
   80b54:	f04f 072d 	mov.w	r7, #45	; 0x2d
   80b58:	702f      	strb	r7, [r5, #0]
   80b5a:	f240 0318 	movw	r3, #24
   80b5e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80b62:	681a      	ldr	r2, [r3, #0]
   80b64:	6891      	ldr	r1, [r2, #8]
   80b66:	680c      	ldr	r4, [r1, #0]
   80b68:	f104 0401 	add.w	r4, r4, #1
   80b6c:	600c      	str	r4, [r1, #0]
        number = (_U_UINT)(-number_to_print);
   80b6e:	f1c6 0600 	rsb	r6, r6, #0
   80b72:	e006      	b.n	80b82 <UnityPrintNumber+0x13a>
    }

    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
   80b74:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   80b78:	ea4f 0740 	mov.w	r7, r0, lsl #1
        if (next_divisor > divisor)
   80b7c:	42bc      	cmp	r4, r7
   80b7e:	db03      	blt.n	80b88 <UnityPrintNumber+0x140>
   80b80:	e007      	b.n	80b92 <UnityPrintNumber+0x14a>

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80b82:	f04f 0401 	mov.w	r4, #1
   80b86:	e000      	b.n	80b8a <UnityPrintNumber+0x142>
    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
        if (next_divisor > divisor)
            divisor = next_divisor;
   80b88:	463c      	mov	r4, r7
        //Positive number
        number = (_U_UINT)number_to_print;
    }

    // figure out initial divisor
    while (number / divisor > 9)
   80b8a:	fbb6 f2f4 	udiv	r2, r6, r4
   80b8e:	2a09      	cmp	r2, #9
   80b90:	d8f0      	bhi.n	80b74 <UnityPrintNumber+0x12c>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   80b92:	f240 0518 	movw	r5, #24
   80b96:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80b9a:	f64c 48cd 	movw	r8, #52429	; 0xcccd
   80b9e:	f6cc 48cc 	movt	r8, #52428	; 0xcccc
   80ba2:	f243 492d 	movw	r9, #13357	; 0x342d
   80ba6:	f2c0 0908 	movt	r9, #8
   80baa:	f04f 0a0a 	mov.w	sl, #10
        divisor /= 10;
   80bae:	f246 6767 	movw	r7, #26215	; 0x6667
   80bb2:	f2c6 6766 	movt	r7, #26214	; 0x6666
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   80bb6:	6828      	ldr	r0, [r5, #0]
   80bb8:	6881      	ldr	r1, [r0, #8]
   80bba:	688b      	ldr	r3, [r1, #8]
   80bbc:	f103 32ff 	add.w	r2, r3, #4294967295
   80bc0:	608a      	str	r2, [r1, #8]
   80bc2:	2a00      	cmp	r2, #0
   80bc4:	da2e      	bge.n	80c24 <UnityPrintNumber+0x1dc>
   80bc6:	6882      	ldr	r2, [r0, #8]
   80bc8:	6891      	ldr	r1, [r2, #8]
   80bca:	6993      	ldr	r3, [r2, #24]
   80bcc:	4299      	cmp	r1, r3
   80bce:	db1a      	blt.n	80c06 <UnityPrintNumber+0x1be>
   80bd0:	6811      	ldr	r1, [r2, #0]
   80bd2:	fbb6 f3f4 	udiv	r3, r6, r4
   80bd6:	fba8 0203 	umull	r0, r2, r8, r3
   80bda:	ea4f 00d2 	mov.w	r0, r2, lsr #3
   80bde:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   80be2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   80be6:	f103 0330 	add.w	r3, r3, #48	; 0x30
   80bea:	700b      	strb	r3, [r1, #0]
   80bec:	6828      	ldr	r0, [r5, #0]
   80bee:	6882      	ldr	r2, [r0, #8]
   80bf0:	6813      	ldr	r3, [r2, #0]
   80bf2:	7819      	ldrb	r1, [r3, #0]
   80bf4:	290a      	cmp	r1, #10
   80bf6:	d003      	beq.n	80c00 <UnityPrintNumber+0x1b8>
   80bf8:	f103 0301 	add.w	r3, r3, #1
   80bfc:	6013      	str	r3, [r2, #0]
   80bfe:	e026      	b.n	80c4e <UnityPrintNumber+0x206>
   80c00:	4651      	mov	r1, sl
   80c02:	47c8      	blx	r9
   80c04:	e023      	b.n	80c4e <UnityPrintNumber+0x206>
   80c06:	fbb6 f3f4 	udiv	r3, r6, r4
   80c0a:	fba8 e103 	umull	lr, r1, r8, r3
   80c0e:	ea4f 01d1 	mov.w	r1, r1, lsr #3
   80c12:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   80c16:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
   80c1a:	f103 0330 	add.w	r3, r3, #48	; 0x30
   80c1e:	b2d9      	uxtb	r1, r3
   80c20:	47c8      	blx	r9
   80c22:	e014      	b.n	80c4e <UnityPrintNumber+0x206>
   80c24:	6880      	ldr	r0, [r0, #8]
   80c26:	6801      	ldr	r1, [r0, #0]
   80c28:	fbb6 f3f4 	udiv	r3, r6, r4
   80c2c:	fba8 0203 	umull	r0, r2, r8, r3
   80c30:	ea4f 00d2 	mov.w	r0, r2, lsr #3
   80c34:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   80c38:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   80c3c:	f103 0330 	add.w	r3, r3, #48	; 0x30
   80c40:	700b      	strb	r3, [r1, #0]
   80c42:	6829      	ldr	r1, [r5, #0]
   80c44:	6888      	ldr	r0, [r1, #8]
   80c46:	6802      	ldr	r2, [r0, #0]
   80c48:	f102 0201 	add.w	r2, r2, #1
   80c4c:	6002      	str	r2, [r0, #0]
        divisor /= 10;
   80c4e:	fb87 2004 	smull	r2, r0, r7, r4
   80c52:	ea4f 74e4 	mov.w	r4, r4, asr #31
   80c56:	ebc4 04a0 	rsb	r4, r4, r0, asr #2
    }
    while (divisor > 0);
   80c5a:	2c00      	cmp	r4, #0
   80c5c:	dcab      	bgt.n	80bb6 <UnityPrintNumber+0x16e>
}
   80c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80c62:	bf00      	nop

00080c64 <UnityPrintNumberHex>:
    while (divisor > 0);
}

//-----------------------------------------------
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
   80c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80c68:	4606      	mov	r6, r0
   80c6a:	460c      	mov	r4, r1
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
   80c6c:	f240 0318 	movw	r3, #24
   80c70:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80c74:	6818      	ldr	r0, [r3, #0]
   80c76:	6882      	ldr	r2, [r0, #8]
   80c78:	6891      	ldr	r1, [r2, #8]
   80c7a:	f101 33ff 	add.w	r3, r1, #4294967295
   80c7e:	6093      	str	r3, [r2, #8]
   80c80:	2b00      	cmp	r3, #0
   80c82:	da26      	bge.n	80cd2 <UnityPrintNumberHex+0x6e>
   80c84:	6882      	ldr	r2, [r0, #8]
   80c86:	6891      	ldr	r1, [r2, #8]
   80c88:	6993      	ldr	r3, [r2, #24]
   80c8a:	4299      	cmp	r1, r3
   80c8c:	db19      	blt.n	80cc2 <UnityPrintNumberHex+0x5e>
   80c8e:	6810      	ldr	r0, [r2, #0]
   80c90:	f04f 0230 	mov.w	r2, #48	; 0x30
   80c94:	7002      	strb	r2, [r0, #0]
   80c96:	f240 0118 	movw	r1, #24
   80c9a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80c9e:	6808      	ldr	r0, [r1, #0]
   80ca0:	6882      	ldr	r2, [r0, #8]
   80ca2:	6813      	ldr	r3, [r2, #0]
   80ca4:	7819      	ldrb	r1, [r3, #0]
   80ca6:	290a      	cmp	r1, #10
   80ca8:	d003      	beq.n	80cb2 <UnityPrintNumberHex+0x4e>
   80caa:	f103 0301 	add.w	r3, r3, #1
   80cae:	6013      	str	r3, [r2, #0]
   80cb0:	e01e      	b.n	80cf0 <UnityPrintNumberHex+0x8c>
   80cb2:	f04f 010a 	mov.w	r1, #10
   80cb6:	f243 432d 	movw	r3, #13357	; 0x342d
   80cba:	f2c0 0308 	movt	r3, #8
   80cbe:	4798      	blx	r3
   80cc0:	e016      	b.n	80cf0 <UnityPrintNumberHex+0x8c>
   80cc2:	f04f 0130 	mov.w	r1, #48	; 0x30
   80cc6:	f243 432d 	movw	r3, #13357	; 0x342d
   80cca:	f2c0 0308 	movt	r3, #8
   80cce:	4798      	blx	r3
   80cd0:	e00e      	b.n	80cf0 <UnityPrintNumberHex+0x8c>
   80cd2:	6880      	ldr	r0, [r0, #8]
   80cd4:	6801      	ldr	r1, [r0, #0]
   80cd6:	f04f 0230 	mov.w	r2, #48	; 0x30
   80cda:	700a      	strb	r2, [r1, #0]
   80cdc:	f240 0318 	movw	r3, #24
   80ce0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80ce4:	6818      	ldr	r0, [r3, #0]
   80ce6:	6881      	ldr	r1, [r0, #8]
   80ce8:	680a      	ldr	r2, [r1, #0]
   80cea:	f102 0201 	add.w	r2, r2, #1
   80cee:	600a      	str	r2, [r1, #0]
    UNITY_OUTPUT_CHAR('x');
   80cf0:	f240 0018 	movw	r0, #24
   80cf4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80cf8:	6800      	ldr	r0, [r0, #0]
   80cfa:	6882      	ldr	r2, [r0, #8]
   80cfc:	6891      	ldr	r1, [r2, #8]
   80cfe:	f101 33ff 	add.w	r3, r1, #4294967295
   80d02:	6093      	str	r3, [r2, #8]
   80d04:	2b00      	cmp	r3, #0
   80d06:	da28      	bge.n	80d5a <UnityPrintNumberHex+0xf6>
   80d08:	6882      	ldr	r2, [r0, #8]
   80d0a:	6891      	ldr	r1, [r2, #8]
   80d0c:	6993      	ldr	r3, [r2, #24]
   80d0e:	4299      	cmp	r1, r3
   80d10:	db19      	blt.n	80d46 <UnityPrintNumberHex+0xe2>
   80d12:	6810      	ldr	r0, [r2, #0]
   80d14:	f04f 0278 	mov.w	r2, #120	; 0x78
   80d18:	7002      	strb	r2, [r0, #0]
   80d1a:	f240 0118 	movw	r1, #24
   80d1e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80d22:	6808      	ldr	r0, [r1, #0]
   80d24:	6882      	ldr	r2, [r0, #8]
   80d26:	6813      	ldr	r3, [r2, #0]
   80d28:	7819      	ldrb	r1, [r3, #0]
   80d2a:	290a      	cmp	r1, #10
   80d2c:	d003      	beq.n	80d36 <UnityPrintNumberHex+0xd2>
   80d2e:	f103 0301 	add.w	r3, r3, #1
   80d32:	6013      	str	r3, [r2, #0]
   80d34:	e00e      	b.n	80d54 <UnityPrintNumberHex+0xf0>
   80d36:	f04f 010a 	mov.w	r1, #10
   80d3a:	f243 432d 	movw	r3, #13357	; 0x342d
   80d3e:	f2c0 0308 	movt	r3, #8
   80d42:	4798      	blx	r3
   80d44:	e006      	b.n	80d54 <UnityPrintNumberHex+0xf0>
   80d46:	f04f 0178 	mov.w	r1, #120	; 0x78
   80d4a:	f243 432d 	movw	r3, #13357	; 0x342d
   80d4e:	f2c0 0308 	movt	r3, #8
   80d52:	4798      	blx	r3

    while (nibbles > 0)
   80d54:	b98c      	cbnz	r4, 80d7a <UnityPrintNumberHex+0x116>
   80d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');
   80d5a:	6880      	ldr	r0, [r0, #8]
   80d5c:	6801      	ldr	r1, [r0, #0]
   80d5e:	f04f 0278 	mov.w	r2, #120	; 0x78
   80d62:	700a      	strb	r2, [r1, #0]
   80d64:	f240 0318 	movw	r3, #24
   80d68:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80d6c:	6818      	ldr	r0, [r3, #0]
   80d6e:	6881      	ldr	r1, [r0, #8]
   80d70:	680a      	ldr	r2, [r1, #0]
   80d72:	f102 0201 	add.w	r2, r2, #1
   80d76:	600a      	str	r2, [r1, #0]
   80d78:	e7ec      	b.n	80d54 <UnityPrintNumberHex+0xf0>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   80d7a:	f240 0518 	movw	r5, #24
   80d7e:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80d82:	f243 472d 	movw	r7, #13357	; 0x342d
   80d86:	46b9      	mov	r9, r7
   80d88:	f2c0 0908 	movt	r9, #8
   80d8c:	f04f 080a 	mov.w	r8, #10
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
    {
        nibble = (number >> (--nibbles << 2)) & 0x0000000F;
   80d90:	f104 34ff 	add.w	r4, r4, #4294967295
   80d94:	b2e4      	uxtb	r4, r4
   80d96:	ea4f 0084 	mov.w	r0, r4, lsl #2
   80d9a:	fa26 f200 	lsr.w	r2, r6, r0
   80d9e:	f002 030f 	and.w	r3, r2, #15
        if (nibble <= 9)
   80da2:	2b09      	cmp	r3, #9
   80da4:	d82d      	bhi.n	80e02 <UnityPrintNumberHex+0x19e>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
   80da6:	6828      	ldr	r0, [r5, #0]
   80da8:	6881      	ldr	r1, [r0, #8]
   80daa:	688a      	ldr	r2, [r1, #8]
   80dac:	f102 32ff 	add.w	r2, r2, #4294967295
   80db0:	608a      	str	r2, [r1, #8]
   80db2:	2a00      	cmp	r2, #0
   80db4:	da19      	bge.n	80dea <UnityPrintNumberHex+0x186>
   80db6:	6882      	ldr	r2, [r0, #8]
   80db8:	6891      	ldr	r1, [r2, #8]
   80dba:	6997      	ldr	r7, [r2, #24]
   80dbc:	42b9      	cmp	r1, r7
   80dbe:	db10      	blt.n	80de2 <UnityPrintNumberHex+0x17e>
   80dc0:	6810      	ldr	r0, [r2, #0]
   80dc2:	f103 0330 	add.w	r3, r3, #48	; 0x30
   80dc6:	7003      	strb	r3, [r0, #0]
   80dc8:	6828      	ldr	r0, [r5, #0]
   80dca:	6882      	ldr	r2, [r0, #8]
   80dcc:	6813      	ldr	r3, [r2, #0]
   80dce:	7819      	ldrb	r1, [r3, #0]
   80dd0:	290a      	cmp	r1, #10
   80dd2:	d003      	beq.n	80ddc <UnityPrintNumberHex+0x178>
   80dd4:	f103 0301 	add.w	r3, r3, #1
   80dd8:	6013      	str	r3, [r2, #0]
   80dda:	e03f      	b.n	80e5c <UnityPrintNumberHex+0x1f8>
   80ddc:	4641      	mov	r1, r8
   80dde:	47c8      	blx	r9
   80de0:	e03c      	b.n	80e5c <UnityPrintNumberHex+0x1f8>
   80de2:	f103 0130 	add.w	r1, r3, #48	; 0x30
   80de6:	47c8      	blx	r9
   80de8:	e038      	b.n	80e5c <UnityPrintNumberHex+0x1f8>
   80dea:	6880      	ldr	r0, [r0, #8]
   80dec:	6801      	ldr	r1, [r0, #0]
   80dee:	f103 0330 	add.w	r3, r3, #48	; 0x30
   80df2:	700b      	strb	r3, [r1, #0]
   80df4:	682b      	ldr	r3, [r5, #0]
   80df6:	6898      	ldr	r0, [r3, #8]
   80df8:	6802      	ldr	r2, [r0, #0]
   80dfa:	f102 0201 	add.w	r2, r2, #1
   80dfe:	6002      	str	r2, [r0, #0]
   80e00:	e02c      	b.n	80e5c <UnityPrintNumberHex+0x1f8>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   80e02:	6828      	ldr	r0, [r5, #0]
   80e04:	6881      	ldr	r1, [r0, #8]
   80e06:	688a      	ldr	r2, [r1, #8]
   80e08:	f102 32ff 	add.w	r2, r2, #4294967295
   80e0c:	608a      	str	r2, [r1, #8]
   80e0e:	2a00      	cmp	r2, #0
   80e10:	da19      	bge.n	80e46 <UnityPrintNumberHex+0x1e2>
   80e12:	6882      	ldr	r2, [r0, #8]
   80e14:	6891      	ldr	r1, [r2, #8]
   80e16:	6997      	ldr	r7, [r2, #24]
   80e18:	42b9      	cmp	r1, r7
   80e1a:	db10      	blt.n	80e3e <UnityPrintNumberHex+0x1da>
   80e1c:	6810      	ldr	r0, [r2, #0]
   80e1e:	f103 0337 	add.w	r3, r3, #55	; 0x37
   80e22:	7003      	strb	r3, [r0, #0]
   80e24:	6828      	ldr	r0, [r5, #0]
   80e26:	6882      	ldr	r2, [r0, #8]
   80e28:	6813      	ldr	r3, [r2, #0]
   80e2a:	7819      	ldrb	r1, [r3, #0]
   80e2c:	290a      	cmp	r1, #10
   80e2e:	d003      	beq.n	80e38 <UnityPrintNumberHex+0x1d4>
   80e30:	f103 0301 	add.w	r3, r3, #1
   80e34:	6013      	str	r3, [r2, #0]
   80e36:	e011      	b.n	80e5c <UnityPrintNumberHex+0x1f8>
   80e38:	4641      	mov	r1, r8
   80e3a:	47c8      	blx	r9
   80e3c:	e00e      	b.n	80e5c <UnityPrintNumberHex+0x1f8>
   80e3e:	f103 0137 	add.w	r1, r3, #55	; 0x37
   80e42:	47c8      	blx	r9
   80e44:	e00a      	b.n	80e5c <UnityPrintNumberHex+0x1f8>
   80e46:	6880      	ldr	r0, [r0, #8]
   80e48:	6801      	ldr	r1, [r0, #0]
   80e4a:	f103 0337 	add.w	r3, r3, #55	; 0x37
   80e4e:	700b      	strb	r3, [r1, #0]
   80e50:	682b      	ldr	r3, [r5, #0]
   80e52:	6898      	ldr	r0, [r3, #8]
   80e54:	6802      	ldr	r2, [r0, #0]
   80e56:	f102 0201 	add.w	r2, r2, #1
   80e5a:	6002      	str	r2, [r0, #0]
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
   80e5c:	2c00      	cmp	r4, #0
   80e5e:	d197      	bne.n	80d90 <UnityPrintNumberHex+0x12c>
   80e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00080e64 <UnityPrint>:
//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
{
   80e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const char* pch = string;

    if (pch != NULL)
   80e66:	4604      	mov	r4, r0
   80e68:	2800      	cmp	r0, #0
   80e6a:	f000 813c 	beq.w	810e6 <UnityPrint+0x282>
    {
        while (*pch)
   80e6e:	7803      	ldrb	r3, [r0, #0]
   80e70:	2b00      	cmp	r3, #0
   80e72:	f000 8138 	beq.w	810e6 <UnityPrint+0x282>

//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
   80e76:	f104 0401 	add.w	r4, r4, #1
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80e7a:	f240 0518 	movw	r5, #24
   80e7e:	f2c2 0507 	movt	r5, #8199	; 0x2007
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   80e82:	f640 4665 	movw	r6, #3173	; 0xc65
   80e86:	f2c0 0608 	movt	r6, #8
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80e8a:	f243 472d 	movw	r7, #13357	; 0x342d
   80e8e:	f2c0 0708 	movt	r7, #8
    if (pch != NULL)
    {
        while (*pch)
        {
            // printable characters plus CR & LF are printed
            if ((*pch <= 126) && (*pch >= 32))
   80e92:	f1a3 0220 	sub.w	r2, r3, #32
   80e96:	b2d0      	uxtb	r0, r2
   80e98:	285e      	cmp	r0, #94	; 0x5e
   80e9a:	d82e      	bhi.n	80efa <UnityPrint+0x96>
            {
                UNITY_OUTPUT_CHAR(*pch);
   80e9c:	6828      	ldr	r0, [r5, #0]
   80e9e:	6882      	ldr	r2, [r0, #8]
   80ea0:	6893      	ldr	r3, [r2, #8]
   80ea2:	f103 31ff 	add.w	r1, r3, #4294967295
   80ea6:	6091      	str	r1, [r2, #8]
   80ea8:	2900      	cmp	r1, #0
   80eaa:	da1a      	bge.n	80ee2 <UnityPrint+0x7e>
   80eac:	6882      	ldr	r2, [r0, #8]
   80eae:	6891      	ldr	r1, [r2, #8]
   80eb0:	6993      	ldr	r3, [r2, #24]
   80eb2:	4299      	cmp	r1, r3
   80eb4:	db11      	blt.n	80eda <UnityPrint+0x76>
   80eb6:	6810      	ldr	r0, [r2, #0]
   80eb8:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   80ebc:	7002      	strb	r2, [r0, #0]
   80ebe:	6828      	ldr	r0, [r5, #0]
   80ec0:	6882      	ldr	r2, [r0, #8]
   80ec2:	6813      	ldr	r3, [r2, #0]
   80ec4:	7819      	ldrb	r1, [r3, #0]
   80ec6:	290a      	cmp	r1, #10
   80ec8:	d003      	beq.n	80ed2 <UnityPrint+0x6e>
   80eca:	f103 0301 	add.w	r3, r3, #1
   80ece:	6013      	str	r3, [r2, #0]
   80ed0:	e104      	b.n	810dc <UnityPrint+0x278>
   80ed2:	f04f 010a 	mov.w	r1, #10
   80ed6:	47b8      	blx	r7
   80ed8:	e100      	b.n	810dc <UnityPrint+0x278>
   80eda:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   80ede:	47b8      	blx	r7
   80ee0:	e0fc      	b.n	810dc <UnityPrint+0x278>
   80ee2:	6880      	ldr	r0, [r0, #8]
   80ee4:	6803      	ldr	r3, [r0, #0]
   80ee6:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   80eea:	701a      	strb	r2, [r3, #0]
   80eec:	6829      	ldr	r1, [r5, #0]
   80eee:	6888      	ldr	r0, [r1, #8]
   80ef0:	6803      	ldr	r3, [r0, #0]
   80ef2:	f103 0301 	add.w	r3, r3, #1
   80ef6:	6003      	str	r3, [r0, #0]
   80ef8:	e0f0      	b.n	810dc <UnityPrint+0x278>
            }
            //write escaped carriage returns
            else if (*pch == 13)
   80efa:	2b0d      	cmp	r3, #13
   80efc:	d15c      	bne.n	80fb8 <UnityPrint+0x154>
            {
                UNITY_OUTPUT_CHAR('\\');
   80efe:	6828      	ldr	r0, [r5, #0]
   80f00:	6882      	ldr	r2, [r0, #8]
   80f02:	6893      	ldr	r3, [r2, #8]
   80f04:	f103 31ff 	add.w	r1, r3, #4294967295
   80f08:	6091      	str	r1, [r2, #8]
   80f0a:	2900      	cmp	r1, #0
   80f0c:	da1a      	bge.n	80f44 <UnityPrint+0xe0>
   80f0e:	6882      	ldr	r2, [r0, #8]
   80f10:	6891      	ldr	r1, [r2, #8]
   80f12:	6993      	ldr	r3, [r2, #24]
   80f14:	4299      	cmp	r1, r3
   80f16:	db11      	blt.n	80f3c <UnityPrint+0xd8>
   80f18:	6810      	ldr	r0, [r2, #0]
   80f1a:	f04f 025c 	mov.w	r2, #92	; 0x5c
   80f1e:	7002      	strb	r2, [r0, #0]
   80f20:	6828      	ldr	r0, [r5, #0]
   80f22:	6882      	ldr	r2, [r0, #8]
   80f24:	6813      	ldr	r3, [r2, #0]
   80f26:	7819      	ldrb	r1, [r3, #0]
   80f28:	290a      	cmp	r1, #10
   80f2a:	d003      	beq.n	80f34 <UnityPrint+0xd0>
   80f2c:	f103 0301 	add.w	r3, r3, #1
   80f30:	6013      	str	r3, [r2, #0]
   80f32:	e012      	b.n	80f5a <UnityPrint+0xf6>
   80f34:	f04f 010a 	mov.w	r1, #10
   80f38:	47b8      	blx	r7
   80f3a:	e00e      	b.n	80f5a <UnityPrint+0xf6>
   80f3c:	f04f 015c 	mov.w	r1, #92	; 0x5c
   80f40:	47b8      	blx	r7
   80f42:	e00a      	b.n	80f5a <UnityPrint+0xf6>
   80f44:	6880      	ldr	r0, [r0, #8]
   80f46:	6803      	ldr	r3, [r0, #0]
   80f48:	f04f 025c 	mov.w	r2, #92	; 0x5c
   80f4c:	701a      	strb	r2, [r3, #0]
   80f4e:	6829      	ldr	r1, [r5, #0]
   80f50:	6888      	ldr	r0, [r1, #8]
   80f52:	6803      	ldr	r3, [r0, #0]
   80f54:	f103 0301 	add.w	r3, r3, #1
   80f58:	6003      	str	r3, [r0, #0]
                UNITY_OUTPUT_CHAR('r');
   80f5a:	6828      	ldr	r0, [r5, #0]
   80f5c:	6882      	ldr	r2, [r0, #8]
   80f5e:	6893      	ldr	r3, [r2, #8]
   80f60:	f103 31ff 	add.w	r1, r3, #4294967295
   80f64:	6091      	str	r1, [r2, #8]
   80f66:	2900      	cmp	r1, #0
   80f68:	da1a      	bge.n	80fa0 <UnityPrint+0x13c>
   80f6a:	6882      	ldr	r2, [r0, #8]
   80f6c:	6891      	ldr	r1, [r2, #8]
   80f6e:	6993      	ldr	r3, [r2, #24]
   80f70:	4299      	cmp	r1, r3
   80f72:	db11      	blt.n	80f98 <UnityPrint+0x134>
   80f74:	6810      	ldr	r0, [r2, #0]
   80f76:	f04f 0272 	mov.w	r2, #114	; 0x72
   80f7a:	7002      	strb	r2, [r0, #0]
   80f7c:	6828      	ldr	r0, [r5, #0]
   80f7e:	6882      	ldr	r2, [r0, #8]
   80f80:	6813      	ldr	r3, [r2, #0]
   80f82:	7819      	ldrb	r1, [r3, #0]
   80f84:	290a      	cmp	r1, #10
   80f86:	d003      	beq.n	80f90 <UnityPrint+0x12c>
   80f88:	f103 0301 	add.w	r3, r3, #1
   80f8c:	6013      	str	r3, [r2, #0]
   80f8e:	e0a5      	b.n	810dc <UnityPrint+0x278>
   80f90:	f04f 010a 	mov.w	r1, #10
   80f94:	47b8      	blx	r7
   80f96:	e0a1      	b.n	810dc <UnityPrint+0x278>
   80f98:	f04f 0172 	mov.w	r1, #114	; 0x72
   80f9c:	47b8      	blx	r7
   80f9e:	e09d      	b.n	810dc <UnityPrint+0x278>
   80fa0:	6880      	ldr	r0, [r0, #8]
   80fa2:	6803      	ldr	r3, [r0, #0]
   80fa4:	f04f 0272 	mov.w	r2, #114	; 0x72
   80fa8:	701a      	strb	r2, [r3, #0]
   80faa:	6829      	ldr	r1, [r5, #0]
   80fac:	6888      	ldr	r0, [r1, #8]
   80fae:	6803      	ldr	r3, [r0, #0]
   80fb0:	f103 0301 	add.w	r3, r3, #1
   80fb4:	6003      	str	r3, [r0, #0]
   80fb6:	e091      	b.n	810dc <UnityPrint+0x278>
            }
            //write escaped line feeds
            else if (*pch == 10)
   80fb8:	2b0a      	cmp	r3, #10
   80fba:	d15c      	bne.n	81076 <UnityPrint+0x212>
            {
                UNITY_OUTPUT_CHAR('\\');
   80fbc:	6828      	ldr	r0, [r5, #0]
   80fbe:	6882      	ldr	r2, [r0, #8]
   80fc0:	6893      	ldr	r3, [r2, #8]
   80fc2:	f103 31ff 	add.w	r1, r3, #4294967295
   80fc6:	6091      	str	r1, [r2, #8]
   80fc8:	2900      	cmp	r1, #0
   80fca:	da1a      	bge.n	81002 <UnityPrint+0x19e>
   80fcc:	6882      	ldr	r2, [r0, #8]
   80fce:	6891      	ldr	r1, [r2, #8]
   80fd0:	6993      	ldr	r3, [r2, #24]
   80fd2:	4299      	cmp	r1, r3
   80fd4:	db11      	blt.n	80ffa <UnityPrint+0x196>
   80fd6:	6810      	ldr	r0, [r2, #0]
   80fd8:	f04f 025c 	mov.w	r2, #92	; 0x5c
   80fdc:	7002      	strb	r2, [r0, #0]
   80fde:	6828      	ldr	r0, [r5, #0]
   80fe0:	6882      	ldr	r2, [r0, #8]
   80fe2:	6813      	ldr	r3, [r2, #0]
   80fe4:	7819      	ldrb	r1, [r3, #0]
   80fe6:	290a      	cmp	r1, #10
   80fe8:	d003      	beq.n	80ff2 <UnityPrint+0x18e>
   80fea:	f103 0301 	add.w	r3, r3, #1
   80fee:	6013      	str	r3, [r2, #0]
   80ff0:	e012      	b.n	81018 <UnityPrint+0x1b4>
   80ff2:	f04f 010a 	mov.w	r1, #10
   80ff6:	47b8      	blx	r7
   80ff8:	e00e      	b.n	81018 <UnityPrint+0x1b4>
   80ffa:	f04f 015c 	mov.w	r1, #92	; 0x5c
   80ffe:	47b8      	blx	r7
   81000:	e00a      	b.n	81018 <UnityPrint+0x1b4>
   81002:	6880      	ldr	r0, [r0, #8]
   81004:	6803      	ldr	r3, [r0, #0]
   81006:	f04f 025c 	mov.w	r2, #92	; 0x5c
   8100a:	701a      	strb	r2, [r3, #0]
   8100c:	6829      	ldr	r1, [r5, #0]
   8100e:	6888      	ldr	r0, [r1, #8]
   81010:	6803      	ldr	r3, [r0, #0]
   81012:	f103 0301 	add.w	r3, r3, #1
   81016:	6003      	str	r3, [r0, #0]
                UNITY_OUTPUT_CHAR('n');
   81018:	6828      	ldr	r0, [r5, #0]
   8101a:	6882      	ldr	r2, [r0, #8]
   8101c:	6893      	ldr	r3, [r2, #8]
   8101e:	f103 31ff 	add.w	r1, r3, #4294967295
   81022:	6091      	str	r1, [r2, #8]
   81024:	2900      	cmp	r1, #0
   81026:	da1a      	bge.n	8105e <UnityPrint+0x1fa>
   81028:	6882      	ldr	r2, [r0, #8]
   8102a:	6891      	ldr	r1, [r2, #8]
   8102c:	6993      	ldr	r3, [r2, #24]
   8102e:	4299      	cmp	r1, r3
   81030:	db11      	blt.n	81056 <UnityPrint+0x1f2>
   81032:	6810      	ldr	r0, [r2, #0]
   81034:	f04f 026e 	mov.w	r2, #110	; 0x6e
   81038:	7002      	strb	r2, [r0, #0]
   8103a:	6828      	ldr	r0, [r5, #0]
   8103c:	6882      	ldr	r2, [r0, #8]
   8103e:	6813      	ldr	r3, [r2, #0]
   81040:	7819      	ldrb	r1, [r3, #0]
   81042:	290a      	cmp	r1, #10
   81044:	d003      	beq.n	8104e <UnityPrint+0x1ea>
   81046:	f103 0301 	add.w	r3, r3, #1
   8104a:	6013      	str	r3, [r2, #0]
   8104c:	e046      	b.n	810dc <UnityPrint+0x278>
   8104e:	f04f 010a 	mov.w	r1, #10
   81052:	47b8      	blx	r7
   81054:	e042      	b.n	810dc <UnityPrint+0x278>
   81056:	f04f 016e 	mov.w	r1, #110	; 0x6e
   8105a:	47b8      	blx	r7
   8105c:	e03e      	b.n	810dc <UnityPrint+0x278>
   8105e:	6880      	ldr	r0, [r0, #8]
   81060:	6803      	ldr	r3, [r0, #0]
   81062:	f04f 026e 	mov.w	r2, #110	; 0x6e
   81066:	701a      	strb	r2, [r3, #0]
   81068:	6829      	ldr	r1, [r5, #0]
   8106a:	6888      	ldr	r0, [r1, #8]
   8106c:	6803      	ldr	r3, [r0, #0]
   8106e:	f103 0301 	add.w	r3, r3, #1
   81072:	6003      	str	r3, [r0, #0]
   81074:	e032      	b.n	810dc <UnityPrint+0x278>
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   81076:	6828      	ldr	r0, [r5, #0]
   81078:	6881      	ldr	r1, [r0, #8]
   8107a:	688b      	ldr	r3, [r1, #8]
   8107c:	f103 32ff 	add.w	r2, r3, #4294967295
   81080:	608a      	str	r2, [r1, #8]
   81082:	2a00      	cmp	r2, #0
   81084:	da1a      	bge.n	810bc <UnityPrint+0x258>
   81086:	6882      	ldr	r2, [r0, #8]
   81088:	6891      	ldr	r1, [r2, #8]
   8108a:	6993      	ldr	r3, [r2, #24]
   8108c:	4299      	cmp	r1, r3
   8108e:	db11      	blt.n	810b4 <UnityPrint+0x250>
   81090:	6810      	ldr	r0, [r2, #0]
   81092:	f04f 025c 	mov.w	r2, #92	; 0x5c
   81096:	7002      	strb	r2, [r0, #0]
   81098:	6828      	ldr	r0, [r5, #0]
   8109a:	6882      	ldr	r2, [r0, #8]
   8109c:	6813      	ldr	r3, [r2, #0]
   8109e:	7819      	ldrb	r1, [r3, #0]
   810a0:	290a      	cmp	r1, #10
   810a2:	d003      	beq.n	810ac <UnityPrint+0x248>
   810a4:	f103 0301 	add.w	r3, r3, #1
   810a8:	6013      	str	r3, [r2, #0]
   810aa:	e012      	b.n	810d2 <UnityPrint+0x26e>
   810ac:	f04f 010a 	mov.w	r1, #10
   810b0:	47b8      	blx	r7
   810b2:	e00e      	b.n	810d2 <UnityPrint+0x26e>
   810b4:	f04f 015c 	mov.w	r1, #92	; 0x5c
   810b8:	47b8      	blx	r7
   810ba:	e00a      	b.n	810d2 <UnityPrint+0x26e>
   810bc:	6880      	ldr	r0, [r0, #8]
   810be:	6801      	ldr	r1, [r0, #0]
   810c0:	f04f 035c 	mov.w	r3, #92	; 0x5c
   810c4:	700b      	strb	r3, [r1, #0]
   810c6:	682a      	ldr	r2, [r5, #0]
   810c8:	6890      	ldr	r0, [r2, #8]
   810ca:	6801      	ldr	r1, [r0, #0]
   810cc:	f101 0101 	add.w	r1, r1, #1
   810d0:	6001      	str	r1, [r0, #0]
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   810d2:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   810d6:	f04f 0102 	mov.w	r1, #2
   810da:	47b0      	blx	r6
{
    const char* pch = string;

    if (pch != NULL)
    {
        while (*pch)
   810dc:	f814 3b01 	ldrb.w	r3, [r4], #1
   810e0:	2b00      	cmp	r3, #0
   810e2:	f47f aed6 	bne.w	80e92 <UnityPrint+0x2e>
   810e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000810e8 <UnityTestResultsBegin>:
    UnityPrint(UnityStrOk);
}

//-----------------------------------------------
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
   810e8:	b538      	push	{r3, r4, r5, lr}
   810ea:	460d      	mov	r5, r1
    UnityPrint(file);
   810ec:	f640 6365 	movw	r3, #3685	; 0xe65
   810f0:	f2c0 0308 	movt	r3, #8
   810f4:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   810f6:	f240 0018 	movw	r0, #24
   810fa:	f2c2 0007 	movt	r0, #8199	; 0x2007
   810fe:	6800      	ldr	r0, [r0, #0]
   81100:	6884      	ldr	r4, [r0, #8]
   81102:	68a2      	ldr	r2, [r4, #8]
   81104:	f102 31ff 	add.w	r1, r2, #4294967295
   81108:	60a1      	str	r1, [r4, #8]
   8110a:	2900      	cmp	r1, #0
   8110c:	da26      	bge.n	8115c <UnityTestResultsBegin+0x74>
   8110e:	6882      	ldr	r2, [r0, #8]
   81110:	6893      	ldr	r3, [r2, #8]
   81112:	6991      	ldr	r1, [r2, #24]
   81114:	428b      	cmp	r3, r1
   81116:	db19      	blt.n	8114c <UnityTestResultsBegin+0x64>
   81118:	6810      	ldr	r0, [r2, #0]
   8111a:	f04f 023a 	mov.w	r2, #58	; 0x3a
   8111e:	7002      	strb	r2, [r0, #0]
   81120:	f240 0118 	movw	r1, #24
   81124:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81128:	6808      	ldr	r0, [r1, #0]
   8112a:	6882      	ldr	r2, [r0, #8]
   8112c:	6813      	ldr	r3, [r2, #0]
   8112e:	7819      	ldrb	r1, [r3, #0]
   81130:	290a      	cmp	r1, #10
   81132:	d003      	beq.n	8113c <UnityTestResultsBegin+0x54>
   81134:	f103 0301 	add.w	r3, r3, #1
   81138:	6013      	str	r3, [r2, #0]
   8113a:	e01e      	b.n	8117a <UnityTestResultsBegin+0x92>
   8113c:	f04f 010a 	mov.w	r1, #10
   81140:	f243 432d 	movw	r3, #13357	; 0x342d
   81144:	f2c0 0308 	movt	r3, #8
   81148:	4798      	blx	r3
   8114a:	e016      	b.n	8117a <UnityTestResultsBegin+0x92>
   8114c:	f04f 013a 	mov.w	r1, #58	; 0x3a
   81150:	f243 432d 	movw	r3, #13357	; 0x342d
   81154:	f2c0 0308 	movt	r3, #8
   81158:	4798      	blx	r3
   8115a:	e00e      	b.n	8117a <UnityTestResultsBegin+0x92>
   8115c:	6883      	ldr	r3, [r0, #8]
   8115e:	6818      	ldr	r0, [r3, #0]
   81160:	f04f 023a 	mov.w	r2, #58	; 0x3a
   81164:	7002      	strb	r2, [r0, #0]
   81166:	f240 0118 	movw	r1, #24
   8116a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8116e:	680b      	ldr	r3, [r1, #0]
   81170:	6898      	ldr	r0, [r3, #8]
   81172:	6802      	ldr	r2, [r0, #0]
   81174:	f102 0201 	add.w	r2, r2, #1
   81178:	6002      	str	r2, [r0, #0]
    UnityPrintNumber((_U_SINT)line);
   8117a:	4628      	mov	r0, r5
   8117c:	f640 2249 	movw	r2, #2633	; 0xa49
   81180:	f2c0 0208 	movt	r2, #8
   81184:	4790      	blx	r2
    UNITY_OUTPUT_CHAR(':');
   81186:	f240 0018 	movw	r0, #24
   8118a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8118e:	6800      	ldr	r0, [r0, #0]
   81190:	6881      	ldr	r1, [r0, #8]
   81192:	688b      	ldr	r3, [r1, #8]
   81194:	f103 32ff 	add.w	r2, r3, #4294967295
   81198:	608a      	str	r2, [r1, #8]
   8119a:	2a00      	cmp	r2, #0
   8119c:	da26      	bge.n	811ec <UnityTestResultsBegin+0x104>
   8119e:	6882      	ldr	r2, [r0, #8]
   811a0:	6891      	ldr	r1, [r2, #8]
   811a2:	6993      	ldr	r3, [r2, #24]
   811a4:	4299      	cmp	r1, r3
   811a6:	db19      	blt.n	811dc <UnityTestResultsBegin+0xf4>
   811a8:	6810      	ldr	r0, [r2, #0]
   811aa:	f04f 023a 	mov.w	r2, #58	; 0x3a
   811ae:	7002      	strb	r2, [r0, #0]
   811b0:	f240 0118 	movw	r1, #24
   811b4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   811b8:	6808      	ldr	r0, [r1, #0]
   811ba:	6882      	ldr	r2, [r0, #8]
   811bc:	6813      	ldr	r3, [r2, #0]
   811be:	7819      	ldrb	r1, [r3, #0]
   811c0:	290a      	cmp	r1, #10
   811c2:	d003      	beq.n	811cc <UnityTestResultsBegin+0xe4>
   811c4:	f103 0301 	add.w	r3, r3, #1
   811c8:	6013      	str	r3, [r2, #0]
   811ca:	e01e      	b.n	8120a <UnityTestResultsBegin+0x122>
   811cc:	f04f 010a 	mov.w	r1, #10
   811d0:	f243 432d 	movw	r3, #13357	; 0x342d
   811d4:	f2c0 0308 	movt	r3, #8
   811d8:	4798      	blx	r3
   811da:	e016      	b.n	8120a <UnityTestResultsBegin+0x122>
   811dc:	f04f 013a 	mov.w	r1, #58	; 0x3a
   811e0:	f243 432d 	movw	r3, #13357	; 0x342d
   811e4:	f2c0 0308 	movt	r3, #8
   811e8:	4798      	blx	r3
   811ea:	e00e      	b.n	8120a <UnityTestResultsBegin+0x122>
   811ec:	6880      	ldr	r0, [r0, #8]
   811ee:	6801      	ldr	r1, [r0, #0]
   811f0:	f04f 033a 	mov.w	r3, #58	; 0x3a
   811f4:	700b      	strb	r3, [r1, #0]
   811f6:	f240 0218 	movw	r2, #24
   811fa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   811fe:	6810      	ldr	r0, [r2, #0]
   81200:	6881      	ldr	r1, [r0, #8]
   81202:	680b      	ldr	r3, [r1, #0]
   81204:	f103 0301 	add.w	r3, r3, #1
   81208:	600b      	str	r3, [r1, #0]
    UnityPrint(Unity.CurrentTestName);
   8120a:	f640 2030 	movw	r0, #2608	; 0xa30
   8120e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81212:	6840      	ldr	r0, [r0, #4]
   81214:	f640 6265 	movw	r2, #3685	; 0xe65
   81218:	f2c0 0208 	movt	r2, #8
   8121c:	4790      	blx	r2
    UNITY_OUTPUT_CHAR(':');
   8121e:	f240 0118 	movw	r1, #24
   81222:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81226:	6808      	ldr	r0, [r1, #0]
   81228:	6882      	ldr	r2, [r0, #8]
   8122a:	6893      	ldr	r3, [r2, #8]
   8122c:	f103 31ff 	add.w	r1, r3, #4294967295
   81230:	6091      	str	r1, [r2, #8]
   81232:	2900      	cmp	r1, #0
   81234:	da26      	bge.n	81284 <UnityTestResultsBegin+0x19c>
   81236:	6882      	ldr	r2, [r0, #8]
   81238:	6891      	ldr	r1, [r2, #8]
   8123a:	6993      	ldr	r3, [r2, #24]
   8123c:	4299      	cmp	r1, r3
   8123e:	db19      	blt.n	81274 <UnityTestResultsBegin+0x18c>
   81240:	6810      	ldr	r0, [r2, #0]
   81242:	f04f 023a 	mov.w	r2, #58	; 0x3a
   81246:	7002      	strb	r2, [r0, #0]
   81248:	f240 0118 	movw	r1, #24
   8124c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81250:	6808      	ldr	r0, [r1, #0]
   81252:	6882      	ldr	r2, [r0, #8]
   81254:	6813      	ldr	r3, [r2, #0]
   81256:	7819      	ldrb	r1, [r3, #0]
   81258:	290a      	cmp	r1, #10
   8125a:	d003      	beq.n	81264 <UnityTestResultsBegin+0x17c>
   8125c:	f103 0301 	add.w	r3, r3, #1
   81260:	6013      	str	r3, [r2, #0]
   81262:	bd38      	pop	{r3, r4, r5, pc}
   81264:	f04f 010a 	mov.w	r1, #10
   81268:	f243 432d 	movw	r3, #13357	; 0x342d
   8126c:	f2c0 0308 	movt	r3, #8
   81270:	4798      	blx	r3
   81272:	bd38      	pop	{r3, r4, r5, pc}
   81274:	f04f 013a 	mov.w	r1, #58	; 0x3a
   81278:	f243 432d 	movw	r3, #13357	; 0x342d
   8127c:	f2c0 0308 	movt	r3, #8
   81280:	4798      	blx	r3
   81282:	bd38      	pop	{r3, r4, r5, pc}
   81284:	6880      	ldr	r0, [r0, #8]
   81286:	6803      	ldr	r3, [r0, #0]
   81288:	f04f 023a 	mov.w	r2, #58	; 0x3a
   8128c:	701a      	strb	r2, [r3, #0]
   8128e:	f240 0118 	movw	r1, #24
   81292:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81296:	6808      	ldr	r0, [r1, #0]
   81298:	6883      	ldr	r3, [r0, #8]
   8129a:	681a      	ldr	r2, [r3, #0]
   8129c:	f102 0201 	add.w	r2, r2, #1
   812a0:	601a      	str	r2, [r3, #0]
   812a2:	bd38      	pop	{r3, r4, r5, pc}

000812a4 <UnityTestResultsFailBegin>:
}

//-----------------------------------------------
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
   812a4:	b508      	push	{r3, lr}
   812a6:	4601      	mov	r1, r0
    UnityTestResultsBegin(Unity.TestFile, line);
   812a8:	f640 2330 	movw	r3, #2608	; 0xa30
   812ac:	f2c2 0307 	movt	r3, #8199	; 0x2007
   812b0:	6818      	ldr	r0, [r3, #0]
   812b2:	f241 02e9 	movw	r2, #4329	; 0x10e9
   812b6:	f2c0 0208 	movt	r2, #8
   812ba:	4790      	blx	r2
    UnityPrint(UnityStrFail);
   812bc:	f245 103c 	movw	r0, #20796	; 0x513c
   812c0:	f2c0 0008 	movt	r0, #8
   812c4:	f640 6165 	movw	r1, #3685	; 0xe65
   812c8:	f2c0 0108 	movt	r1, #8
   812cc:	4788      	blx	r1
    UNITY_OUTPUT_CHAR(':');
   812ce:	f240 0018 	movw	r0, #24
   812d2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   812d6:	6800      	ldr	r0, [r0, #0]
   812d8:	6882      	ldr	r2, [r0, #8]
   812da:	6893      	ldr	r3, [r2, #8]
   812dc:	f103 31ff 	add.w	r1, r3, #4294967295
   812e0:	6091      	str	r1, [r2, #8]
   812e2:	2900      	cmp	r1, #0
   812e4:	da26      	bge.n	81334 <UnityTestResultsFailBegin+0x90>
   812e6:	6882      	ldr	r2, [r0, #8]
   812e8:	6891      	ldr	r1, [r2, #8]
   812ea:	6993      	ldr	r3, [r2, #24]
   812ec:	4299      	cmp	r1, r3
   812ee:	db19      	blt.n	81324 <UnityTestResultsFailBegin+0x80>
   812f0:	6810      	ldr	r0, [r2, #0]
   812f2:	f04f 023a 	mov.w	r2, #58	; 0x3a
   812f6:	7002      	strb	r2, [r0, #0]
   812f8:	f240 0118 	movw	r1, #24
   812fc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81300:	6808      	ldr	r0, [r1, #0]
   81302:	6882      	ldr	r2, [r0, #8]
   81304:	6813      	ldr	r3, [r2, #0]
   81306:	7819      	ldrb	r1, [r3, #0]
   81308:	290a      	cmp	r1, #10
   8130a:	d003      	beq.n	81314 <UnityTestResultsFailBegin+0x70>
   8130c:	f103 0301 	add.w	r3, r3, #1
   81310:	6013      	str	r3, [r2, #0]
   81312:	bd08      	pop	{r3, pc}
   81314:	f04f 010a 	mov.w	r1, #10
   81318:	f243 432d 	movw	r3, #13357	; 0x342d
   8131c:	f2c0 0308 	movt	r3, #8
   81320:	4798      	blx	r3
   81322:	bd08      	pop	{r3, pc}
   81324:	f04f 013a 	mov.w	r1, #58	; 0x3a
   81328:	f243 432d 	movw	r3, #13357	; 0x342d
   8132c:	f2c0 0308 	movt	r3, #8
   81330:	4798      	blx	r3
   81332:	bd08      	pop	{r3, pc}
   81334:	6880      	ldr	r0, [r0, #8]
   81336:	6803      	ldr	r3, [r0, #0]
   81338:	f04f 023a 	mov.w	r2, #58	; 0x3a
   8133c:	701a      	strb	r2, [r3, #0]
   8133e:	f240 0118 	movw	r1, #24
   81342:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81346:	6808      	ldr	r0, [r1, #0]
   81348:	6883      	ldr	r3, [r0, #8]
   8134a:	681a      	ldr	r2, [r3, #0]
   8134c:	f102 0201 	add.w	r2, r2, #1
   81350:	601a      	str	r2, [r3, #0]
   81352:	bd08      	pop	{r3, pc}

00081354 <UnityAddMsgIfSpecified>:
    UNITY_PRINT_EOL;
}

//-----------------------------------------------
static void UnityAddMsgIfSpecified(const char* msg)
{
   81354:	b538      	push	{r3, r4, r5, lr}
    if (msg)
   81356:	4605      	mov	r5, r0
   81358:	b150      	cbz	r0, 81370 <UnityAddMsgIfSpecified+0x1c>
    {
        UnityPrint(UnityStrSpacer);
   8135a:	f245 1030 	movw	r0, #20784	; 0x5130
   8135e:	f2c0 0008 	movt	r0, #8
   81362:	f640 6465 	movw	r4, #3685	; 0xe65
   81366:	f2c0 0408 	movt	r4, #8
   8136a:	47a0      	blx	r4
        UnityPrint(msg);
   8136c:	4628      	mov	r0, r5
   8136e:	47a0      	blx	r4
   81370:	bd38      	pop	{r3, r4, r5, pc}
   81372:	bf00      	nop

00081374 <UnityPrintMask>:
    }
}

//-----------------------------------------------
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
   81374:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81378:	4607      	mov	r7, r0
   8137a:	4688      	mov	r8, r1
   8137c:	f04f 0520 	mov.w	r5, #32
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
   81380:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
                UNITY_OUTPUT_CHAR('0');
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   81384:	f240 0618 	movw	r6, #24
   81388:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8138c:	f04f 0958 	mov.w	r9, #88	; 0x58
   81390:	f243 4a2d 	movw	sl, #13357	; 0x342d
   81394:	f2c0 0a08 	movt	sl, #8
   81398:	f04f 0b0a 	mov.w	fp, #10
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
    {
        if (current_bit & mask)
   8139c:	423c      	tst	r4, r7
   8139e:	d05e      	beq.n	8145e <UnityPrintMask+0xea>
        {
            if (current_bit & number)
   813a0:	ea14 0f08 	tst.w	r4, r8
   813a4:	d02d      	beq.n	81402 <UnityPrintMask+0x8e>
            {
                UNITY_OUTPUT_CHAR('1');
   813a6:	6830      	ldr	r0, [r6, #0]
   813a8:	6882      	ldr	r2, [r0, #8]
   813aa:	6893      	ldr	r3, [r2, #8]
   813ac:	f103 31ff 	add.w	r1, r3, #4294967295
   813b0:	6091      	str	r1, [r2, #8]
   813b2:	2900      	cmp	r1, #0
   813b4:	da19      	bge.n	813ea <UnityPrintMask+0x76>
   813b6:	6882      	ldr	r2, [r0, #8]
   813b8:	6891      	ldr	r1, [r2, #8]
   813ba:	6993      	ldr	r3, [r2, #24]
   813bc:	4299      	cmp	r1, r3
   813be:	db10      	blt.n	813e2 <UnityPrintMask+0x6e>
   813c0:	6810      	ldr	r0, [r2, #0]
   813c2:	f04f 0231 	mov.w	r2, #49	; 0x31
   813c6:	7002      	strb	r2, [r0, #0]
   813c8:	6830      	ldr	r0, [r6, #0]
   813ca:	6882      	ldr	r2, [r0, #8]
   813cc:	6813      	ldr	r3, [r2, #0]
   813ce:	7819      	ldrb	r1, [r3, #0]
   813d0:	290a      	cmp	r1, #10
   813d2:	d003      	beq.n	813dc <UnityPrintMask+0x68>
   813d4:	f103 0301 	add.w	r3, r3, #1
   813d8:	6013      	str	r3, [r2, #0]
   813da:	e06a      	b.n	814b2 <UnityPrintMask+0x13e>
   813dc:	4659      	mov	r1, fp
   813de:	47d0      	blx	sl
   813e0:	e067      	b.n	814b2 <UnityPrintMask+0x13e>
   813e2:	f04f 0131 	mov.w	r1, #49	; 0x31
   813e6:	47d0      	blx	sl
   813e8:	e063      	b.n	814b2 <UnityPrintMask+0x13e>
   813ea:	6880      	ldr	r0, [r0, #8]
   813ec:	6803      	ldr	r3, [r0, #0]
   813ee:	f04f 0231 	mov.w	r2, #49	; 0x31
   813f2:	701a      	strb	r2, [r3, #0]
   813f4:	6831      	ldr	r1, [r6, #0]
   813f6:	6888      	ldr	r0, [r1, #8]
   813f8:	6803      	ldr	r3, [r0, #0]
   813fa:	f103 0301 	add.w	r3, r3, #1
   813fe:	6003      	str	r3, [r0, #0]
   81400:	e057      	b.n	814b2 <UnityPrintMask+0x13e>
            }
            else
            {
                UNITY_OUTPUT_CHAR('0');
   81402:	6830      	ldr	r0, [r6, #0]
   81404:	6882      	ldr	r2, [r0, #8]
   81406:	6893      	ldr	r3, [r2, #8]
   81408:	f103 31ff 	add.w	r1, r3, #4294967295
   8140c:	6091      	str	r1, [r2, #8]
   8140e:	2900      	cmp	r1, #0
   81410:	da19      	bge.n	81446 <UnityPrintMask+0xd2>
   81412:	6882      	ldr	r2, [r0, #8]
   81414:	6891      	ldr	r1, [r2, #8]
   81416:	6993      	ldr	r3, [r2, #24]
   81418:	4299      	cmp	r1, r3
   8141a:	db10      	blt.n	8143e <UnityPrintMask+0xca>
   8141c:	6810      	ldr	r0, [r2, #0]
   8141e:	f04f 0230 	mov.w	r2, #48	; 0x30
   81422:	7002      	strb	r2, [r0, #0]
   81424:	6830      	ldr	r0, [r6, #0]
   81426:	6882      	ldr	r2, [r0, #8]
   81428:	6813      	ldr	r3, [r2, #0]
   8142a:	7819      	ldrb	r1, [r3, #0]
   8142c:	290a      	cmp	r1, #10
   8142e:	d003      	beq.n	81438 <UnityPrintMask+0xc4>
   81430:	f103 0301 	add.w	r3, r3, #1
   81434:	6013      	str	r3, [r2, #0]
   81436:	e03c      	b.n	814b2 <UnityPrintMask+0x13e>
   81438:	4659      	mov	r1, fp
   8143a:	47d0      	blx	sl
   8143c:	e039      	b.n	814b2 <UnityPrintMask+0x13e>
   8143e:	f04f 0130 	mov.w	r1, #48	; 0x30
   81442:	47d0      	blx	sl
   81444:	e035      	b.n	814b2 <UnityPrintMask+0x13e>
   81446:	6880      	ldr	r0, [r0, #8]
   81448:	6803      	ldr	r3, [r0, #0]
   8144a:	f04f 0230 	mov.w	r2, #48	; 0x30
   8144e:	701a      	strb	r2, [r3, #0]
   81450:	6831      	ldr	r1, [r6, #0]
   81452:	6888      	ldr	r0, [r1, #8]
   81454:	6803      	ldr	r3, [r0, #0]
   81456:	f103 0301 	add.w	r3, r3, #1
   8145a:	6003      	str	r3, [r0, #0]
   8145c:	e029      	b.n	814b2 <UnityPrintMask+0x13e>
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   8145e:	6830      	ldr	r0, [r6, #0]
   81460:	6882      	ldr	r2, [r0, #8]
   81462:	6893      	ldr	r3, [r2, #8]
   81464:	f103 31ff 	add.w	r1, r3, #4294967295
   81468:	6091      	str	r1, [r2, #8]
   8146a:	2900      	cmp	r1, #0
   8146c:	da17      	bge.n	8149e <UnityPrintMask+0x12a>
   8146e:	6882      	ldr	r2, [r0, #8]
   81470:	6891      	ldr	r1, [r2, #8]
   81472:	6993      	ldr	r3, [r2, #24]
   81474:	4299      	cmp	r1, r3
   81476:	db0f      	blt.n	81498 <UnityPrintMask+0x124>
   81478:	6812      	ldr	r2, [r2, #0]
   8147a:	f882 9000 	strb.w	r9, [r2]
   8147e:	6830      	ldr	r0, [r6, #0]
   81480:	6882      	ldr	r2, [r0, #8]
   81482:	6813      	ldr	r3, [r2, #0]
   81484:	7819      	ldrb	r1, [r3, #0]
   81486:	290a      	cmp	r1, #10
   81488:	d003      	beq.n	81492 <UnityPrintMask+0x11e>
   8148a:	f103 0301 	add.w	r3, r3, #1
   8148e:	6013      	str	r3, [r2, #0]
   81490:	e00f      	b.n	814b2 <UnityPrintMask+0x13e>
   81492:	4659      	mov	r1, fp
   81494:	47d0      	blx	sl
   81496:	e00c      	b.n	814b2 <UnityPrintMask+0x13e>
   81498:	4649      	mov	r1, r9
   8149a:	47d0      	blx	sl
   8149c:	e009      	b.n	814b2 <UnityPrintMask+0x13e>
   8149e:	6880      	ldr	r0, [r0, #8]
   814a0:	6802      	ldr	r2, [r0, #0]
   814a2:	f882 9000 	strb.w	r9, [r2]
   814a6:	6833      	ldr	r3, [r6, #0]
   814a8:	6899      	ldr	r1, [r3, #8]
   814aa:	6808      	ldr	r0, [r1, #0]
   814ac:	f100 0001 	add.w	r0, r0, #1
   814b0:	6008      	str	r0, [r1, #0]
        }
        current_bit = current_bit >> 1;
   814b2:	ea4f 0454 	mov.w	r4, r4, lsr #1
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
   814b6:	3d01      	subs	r5, #1
   814b8:	f47f af70 	bne.w	8139c <UnityPrintMask+0x28>
        {
            UNITY_OUTPUT_CHAR('X');
        }
        current_bit = current_bit >> 1;
    }
}
   814bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000814c0 <UnityPrintFail>:
#endif

//-----------------------------------------------

void UnityPrintFail(void)
{
   814c0:	b508      	push	{r3, lr}
    UnityPrint(UnityStrFail);
   814c2:	f245 103c 	movw	r0, #20796	; 0x513c
   814c6:	f2c0 0008 	movt	r0, #8
   814ca:	f640 6365 	movw	r3, #3685	; 0xe65
   814ce:	f2c0 0308 	movt	r3, #8
   814d2:	4798      	blx	r3
   814d4:	bd08      	pop	{r3, pc}
   814d6:	bf00      	nop

000814d8 <UnityPrintOk>:
}

void UnityPrintOk(void)
{
   814d8:	b508      	push	{r3, lr}
    UnityPrint(UnityStrOk);
   814da:	f245 102c 	movw	r0, #20780	; 0x512c
   814de:	f2c0 0008 	movt	r0, #8
   814e2:	f640 6365 	movw	r3, #3685	; 0xe65
   814e6:	f2c0 0308 	movt	r3, #8
   814ea:	4798      	blx	r3
   814ec:	bd08      	pop	{r3, pc}
   814ee:	bf00      	nop

000814f0 <UnityConcludeTest>:
    UNITY_OUTPUT_CHAR(':');
}

//-----------------------------------------------
void UnityConcludeTest(void)
{
   814f0:	b508      	push	{r3, lr}
    if (Unity.CurrentTestIgnored)
   814f2:	f640 2330 	movw	r3, #2608	; 0xa30
   814f6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   814fa:	69d8      	ldr	r0, [r3, #28]
   814fc:	b140      	cbz	r0, 81510 <UnityConcludeTest+0x20>
    {
        Unity.TestIgnores++;
   814fe:	f640 2030 	movw	r0, #2608	; 0xa30
   81502:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81506:	6941      	ldr	r1, [r0, #20]
   81508:	f101 0101 	add.w	r1, r1, #1
   8150c:	6141      	str	r1, [r0, #20]
   8150e:	e022      	b.n	81556 <UnityConcludeTest+0x66>
    }
    else if (!Unity.CurrentTestFailed)
   81510:	f640 2130 	movw	r1, #2608	; 0xa30
   81514:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81518:	698a      	ldr	r2, [r1, #24]
   8151a:	b9a2      	cbnz	r2, 81546 <UnityConcludeTest+0x56>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
   8151c:	f640 2130 	movw	r1, #2608	; 0xa30
   81520:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81524:	6808      	ldr	r0, [r1, #0]
   81526:	6889      	ldr	r1, [r1, #8]
   81528:	f241 02e9 	movw	r2, #4329	; 0x10e9
   8152c:	f2c0 0208 	movt	r2, #8
   81530:	4790      	blx	r2
        UnityPrint(UnityStrPass);
   81532:	f245 1088 	movw	r0, #20872	; 0x5188
   81536:	f2c0 0008 	movt	r0, #8
   8153a:	f640 6365 	movw	r3, #3685	; 0xe65
   8153e:	f2c0 0308 	movt	r3, #8
   81542:	4798      	blx	r3
   81544:	e007      	b.n	81556 <UnityConcludeTest+0x66>
    }
    else
    {
        Unity.TestFailures++;
   81546:	f640 2330 	movw	r3, #2608	; 0xa30
   8154a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8154e:	6918      	ldr	r0, [r3, #16]
   81550:	f100 0001 	add.w	r0, r0, #1
   81554:	6118      	str	r0, [r3, #16]
    }

    Unity.CurrentTestFailed = 0;
   81556:	f640 2330 	movw	r3, #2608	; 0xa30
   8155a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8155e:	f04f 0200 	mov.w	r2, #0
   81562:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   81564:	61da      	str	r2, [r3, #28]
    UNITY_PRINT_EOL;
   81566:	f240 0018 	movw	r0, #24
   8156a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8156e:	6800      	ldr	r0, [r0, #0]
   81570:	6881      	ldr	r1, [r0, #8]
   81572:	688b      	ldr	r3, [r1, #8]
   81574:	f103 32ff 	add.w	r2, r3, #4294967295
   81578:	608a      	str	r2, [r1, #8]
   8157a:	2a00      	cmp	r2, #0
   8157c:	da26      	bge.n	815cc <UnityConcludeTest+0xdc>
   8157e:	6882      	ldr	r2, [r0, #8]
   81580:	6891      	ldr	r1, [r2, #8]
   81582:	6993      	ldr	r3, [r2, #24]
   81584:	4299      	cmp	r1, r3
   81586:	db19      	blt.n	815bc <UnityConcludeTest+0xcc>
   81588:	6810      	ldr	r0, [r2, #0]
   8158a:	f04f 020a 	mov.w	r2, #10
   8158e:	7002      	strb	r2, [r0, #0]
   81590:	f240 0118 	movw	r1, #24
   81594:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81598:	6808      	ldr	r0, [r1, #0]
   8159a:	6882      	ldr	r2, [r0, #8]
   8159c:	6813      	ldr	r3, [r2, #0]
   8159e:	7819      	ldrb	r1, [r3, #0]
   815a0:	290a      	cmp	r1, #10
   815a2:	d003      	beq.n	815ac <UnityConcludeTest+0xbc>
   815a4:	f103 0301 	add.w	r3, r3, #1
   815a8:	6013      	str	r3, [r2, #0]
   815aa:	bd08      	pop	{r3, pc}
   815ac:	f04f 010a 	mov.w	r1, #10
   815b0:	f243 432d 	movw	r3, #13357	; 0x342d
   815b4:	f2c0 0308 	movt	r3, #8
   815b8:	4798      	blx	r3
   815ba:	bd08      	pop	{r3, pc}
   815bc:	f04f 010a 	mov.w	r1, #10
   815c0:	f243 432d 	movw	r3, #13357	; 0x342d
   815c4:	f2c0 0308 	movt	r3, #8
   815c8:	4798      	blx	r3
   815ca:	bd08      	pop	{r3, pc}
   815cc:	6880      	ldr	r0, [r0, #8]
   815ce:	6801      	ldr	r1, [r0, #0]
   815d0:	f04f 030a 	mov.w	r3, #10
   815d4:	700b      	strb	r3, [r1, #0]
   815d6:	f240 0218 	movw	r2, #24
   815da:	f2c2 0207 	movt	r2, #8199	; 0x2007
   815de:	6810      	ldr	r0, [r2, #0]
   815e0:	6881      	ldr	r1, [r0, #8]
   815e2:	680b      	ldr	r3, [r1, #0]
   815e4:	f103 0301 	add.w	r3, r3, #1
   815e8:	600b      	str	r3, [r1, #0]
   815ea:	bd08      	pop	{r3, pc}

000815ec <UnityAssertBits>:
void UnityAssertBits(const _U_SINT mask,
                     const _U_SINT expected,
                     const _U_SINT actual,
                     const char* msg,
                     const UNITY_LINE_TYPE lineNumber)
{
   815ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   815f0:	4605      	mov	r5, r0
   815f2:	460f      	mov	r7, r1
   815f4:	4616      	mov	r6, r2
   815f6:	4698      	mov	r8, r3
    UNITY_SKIP_EXECUTION;
   815f8:	f640 2430 	movw	r4, #2608	; 0xa30
   815fc:	f2c2 0407 	movt	r4, #8199	; 0x2007
   81600:	69a4      	ldr	r4, [r4, #24]
   81602:	bb24      	cbnz	r4, 8164e <UnityAssertBits+0x62>
   81604:	f640 2330 	movw	r3, #2608	; 0xa30
   81608:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8160c:	69da      	ldr	r2, [r3, #28]
   8160e:	b9f2      	cbnz	r2, 8164e <UnityAssertBits+0x62>

    if ((mask & expected) != (mask & actual))
   81610:	ea86 0001 	eor.w	r0, r6, r1
   81614:	4228      	tst	r0, r5
   81616:	d01a      	beq.n	8164e <UnityAssertBits+0x62>
    {
        UnityTestResultsFailBegin(lineNumber);
   81618:	9808      	ldr	r0, [sp, #32]
   8161a:	490e      	ldr	r1, [pc, #56]	; (81654 <UnityAssertBits+0x68>)
   8161c:	4788      	blx	r1
        UnityPrint(UnityStrExpected);
   8161e:	480e      	ldr	r0, [pc, #56]	; (81658 <UnityAssertBits+0x6c>)
   81620:	f8df 904c 	ldr.w	r9, [pc, #76]	; 81670 <UnityAssertBits+0x84>
   81624:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)expected);
   81626:	4628      	mov	r0, r5
   81628:	4639      	mov	r1, r7
   8162a:	4f0c      	ldr	r7, [pc, #48]	; (8165c <UnityAssertBits+0x70>)
   8162c:	47b8      	blx	r7
        UnityPrint(UnityStrWas);
   8162e:	480c      	ldr	r0, [pc, #48]	; (81660 <UnityAssertBits+0x74>)
   81630:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)actual);
   81632:	4628      	mov	r0, r5
   81634:	4631      	mov	r1, r6
   81636:	47b8      	blx	r7
        UnityAddMsgIfSpecified(msg);
   81638:	4640      	mov	r0, r8
   8163a:	4d0a      	ldr	r5, [pc, #40]	; (81664 <UnityAssertBits+0x78>)
   8163c:	47a8      	blx	r5
        UNITY_FAIL_AND_BAIL;
   8163e:	480a      	ldr	r0, [pc, #40]	; (81668 <UnityAssertBits+0x7c>)
   81640:	f04f 0101 	mov.w	r1, #1
   81644:	6181      	str	r1, [r0, #24]
   81646:	f100 0020 	add.w	r0, r0, #32
   8164a:	4e08      	ldr	r6, [pc, #32]	; (8166c <UnityAssertBits+0x80>)
   8164c:	47b0      	blx	r6
   8164e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81652:	bf00      	nop
   81654:	000812a5 	.word	0x000812a5
   81658:	00085144 	.word	0x00085144
   8165c:	00081375 	.word	0x00081375
   81660:	00085134 	.word	0x00085134
   81664:	00081355 	.word	0x00081355
   81668:	20070a30 	.word	0x20070a30
   8166c:	00082a0d 	.word	0x00082a0d
   81670:	00080e65 	.word	0x00080e65

00081674 <UnityDefaultTestRun>:
    void setUp(void);
    void tearDown(void);
#endif
//-----------------------------------------------
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
   81674:	b500      	push	{lr}
   81676:	b083      	sub	sp, #12
   81678:	9001      	str	r0, [sp, #4]
    Unity.CurrentTestName = FuncName;
   8167a:	f640 2030 	movw	r0, #2608	; 0xa30
   8167e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81682:	6041      	str	r1, [r0, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
   81684:	6082      	str	r2, [r0, #8]
    Unity.NumberOfTests++;
   81686:	68c3      	ldr	r3, [r0, #12]
   81688:	f103 0301 	add.w	r3, r3, #1
   8168c:	60c3      	str	r3, [r0, #12]
    if (TEST_PROTECT())
   8168e:	f100 0020 	add.w	r0, r0, #32
   81692:	f642 2101 	movw	r1, #10753	; 0x2a01
   81696:	f2c0 0108 	movt	r1, #8
   8169a:	4788      	blx	r1
   8169c:	b930      	cbnz	r0, 816ac <UnityDefaultTestRun+0x38>
    {
        setUp();
   8169e:	f240 20c9 	movw	r0, #713	; 0x2c9
   816a2:	f2c0 0008 	movt	r0, #8
   816a6:	4780      	blx	r0
        Func();
   816a8:	9a01      	ldr	r2, [sp, #4]
   816aa:	4790      	blx	r2
    }
    if (TEST_PROTECT() && !(Unity.CurrentTestIgnored))
   816ac:	480c      	ldr	r0, [pc, #48]	; (816e0 <UnityDefaultTestRun+0x6c>)
   816ae:	f642 2301 	movw	r3, #10753	; 0x2a01
   816b2:	f2c0 0308 	movt	r3, #8
   816b6:	4798      	blx	r3
   816b8:	b950      	cbnz	r0, 816d0 <UnityDefaultTestRun+0x5c>
   816ba:	f640 2130 	movw	r1, #2608	; 0xa30
   816be:	f2c2 0107 	movt	r1, #8199	; 0x2007
   816c2:	69c8      	ldr	r0, [r1, #28]
   816c4:	b920      	cbnz	r0, 816d0 <UnityDefaultTestRun+0x5c>
    {
        tearDown();
   816c6:	f240 22cd 	movw	r2, #717	; 0x2cd
   816ca:	f2c0 0208 	movt	r2, #8
   816ce:	4790      	blx	r2
    }
    UnityConcludeTest();
   816d0:	f241 43f1 	movw	r3, #5361	; 0x14f1
   816d4:	f2c0 0308 	movt	r3, #8
   816d8:	4798      	blx	r3
}
   816da:	b003      	add	sp, #12
   816dc:	bd00      	pop	{pc}
   816de:	bf00      	nop
   816e0:	20070a50 	.word	0x20070a50

000816e4 <UnityBegin>:

//-----------------------------------------------
void UnityBegin(const char* filename)
{
    Unity.TestFile = filename;
   816e4:	f640 2330 	movw	r3, #2608	; 0xa30
   816e8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   816ec:	6018      	str	r0, [r3, #0]
    Unity.CurrentTestName = NULL;
   816ee:	f04f 0200 	mov.w	r2, #0
   816f2:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
   816f4:	609a      	str	r2, [r3, #8]
    Unity.NumberOfTests = 0;
   816f6:	60da      	str	r2, [r3, #12]
    Unity.TestFailures = 0;
   816f8:	611a      	str	r2, [r3, #16]
    Unity.TestIgnores = 0;
   816fa:	615a      	str	r2, [r3, #20]
    Unity.CurrentTestFailed = 0;
   816fc:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   816fe:	61da      	str	r2, [r3, #28]
   81700:	4770      	bx	lr
   81702:	bf00      	nop

00081704 <UnityEnd>:
    UNITY_OUTPUT_START();
}

//-----------------------------------------------
int UnityEnd(void)
{
   81704:	b570      	push	{r4, r5, r6, lr}
    UNITY_PRINT_EOL;
   81706:	f240 0318 	movw	r3, #24
   8170a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8170e:	6818      	ldr	r0, [r3, #0]
   81710:	6882      	ldr	r2, [r0, #8]
   81712:	6891      	ldr	r1, [r2, #8]
   81714:	f101 34ff 	add.w	r4, r1, #4294967295
   81718:	6094      	str	r4, [r2, #8]
   8171a:	2c00      	cmp	r4, #0
   8171c:	da26      	bge.n	8176c <UnityEnd+0x68>
   8171e:	6882      	ldr	r2, [r0, #8]
   81720:	6895      	ldr	r5, [r2, #8]
   81722:	6996      	ldr	r6, [r2, #24]
   81724:	42b5      	cmp	r5, r6
   81726:	db19      	blt.n	8175c <UnityEnd+0x58>
   81728:	6810      	ldr	r0, [r2, #0]
   8172a:	f04f 020a 	mov.w	r2, #10
   8172e:	7002      	strb	r2, [r0, #0]
   81730:	f240 0118 	movw	r1, #24
   81734:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81738:	6808      	ldr	r0, [r1, #0]
   8173a:	6882      	ldr	r2, [r0, #8]
   8173c:	6814      	ldr	r4, [r2, #0]
   8173e:	7825      	ldrb	r5, [r4, #0]
   81740:	2d0a      	cmp	r5, #10
   81742:	d003      	beq.n	8174c <UnityEnd+0x48>
   81744:	f104 0401 	add.w	r4, r4, #1
   81748:	6014      	str	r4, [r2, #0]
   8174a:	e01e      	b.n	8178a <UnityEnd+0x86>
   8174c:	f04f 010a 	mov.w	r1, #10
   81750:	f243 462d 	movw	r6, #13357	; 0x342d
   81754:	f2c0 0608 	movt	r6, #8
   81758:	47b0      	blx	r6
   8175a:	e016      	b.n	8178a <UnityEnd+0x86>
   8175c:	f04f 010a 	mov.w	r1, #10
   81760:	f243 432d 	movw	r3, #13357	; 0x342d
   81764:	f2c0 0308 	movt	r3, #8
   81768:	4798      	blx	r3
   8176a:	e00e      	b.n	8178a <UnityEnd+0x86>
   8176c:	6880      	ldr	r0, [r0, #8]
   8176e:	6805      	ldr	r5, [r0, #0]
   81770:	f04f 060a 	mov.w	r6, #10
   81774:	702e      	strb	r6, [r5, #0]
   81776:	f240 0318 	movw	r3, #24
   8177a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8177e:	681a      	ldr	r2, [r3, #0]
   81780:	6891      	ldr	r1, [r2, #8]
   81782:	680c      	ldr	r4, [r1, #0]
   81784:	f104 0401 	add.w	r4, r4, #1
   81788:	600c      	str	r4, [r1, #0]
    UnityPrint(UnityStrBreaker);
   8178a:	f245 1050 	movw	r0, #20816	; 0x5150
   8178e:	f2c0 0008 	movt	r0, #8
   81792:	f640 6365 	movw	r3, #3685	; 0xe65
   81796:	f2c0 0308 	movt	r3, #8
   8179a:	4798      	blx	r3
    UNITY_PRINT_EOL;
   8179c:	f240 0018 	movw	r0, #24
   817a0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   817a4:	6800      	ldr	r0, [r0, #0]
   817a6:	6882      	ldr	r2, [r0, #8]
   817a8:	6891      	ldr	r1, [r2, #8]
   817aa:	f101 34ff 	add.w	r4, r1, #4294967295
   817ae:	6094      	str	r4, [r2, #8]
   817b0:	2c00      	cmp	r4, #0
   817b2:	da26      	bge.n	81802 <UnityEnd+0xfe>
   817b4:	6882      	ldr	r2, [r0, #8]
   817b6:	6895      	ldr	r5, [r2, #8]
   817b8:	6996      	ldr	r6, [r2, #24]
   817ba:	42b5      	cmp	r5, r6
   817bc:	db19      	blt.n	817f2 <UnityEnd+0xee>
   817be:	6810      	ldr	r0, [r2, #0]
   817c0:	f04f 020a 	mov.w	r2, #10
   817c4:	7002      	strb	r2, [r0, #0]
   817c6:	f240 0118 	movw	r1, #24
   817ca:	f2c2 0107 	movt	r1, #8199	; 0x2007
   817ce:	6808      	ldr	r0, [r1, #0]
   817d0:	6882      	ldr	r2, [r0, #8]
   817d2:	6814      	ldr	r4, [r2, #0]
   817d4:	7825      	ldrb	r5, [r4, #0]
   817d6:	2d0a      	cmp	r5, #10
   817d8:	d003      	beq.n	817e2 <UnityEnd+0xde>
   817da:	f104 0401 	add.w	r4, r4, #1
   817de:	6014      	str	r4, [r2, #0]
   817e0:	e01e      	b.n	81820 <UnityEnd+0x11c>
   817e2:	f04f 010a 	mov.w	r1, #10
   817e6:	f243 462d 	movw	r6, #13357	; 0x342d
   817ea:	f2c0 0608 	movt	r6, #8
   817ee:	47b0      	blx	r6
   817f0:	e016      	b.n	81820 <UnityEnd+0x11c>
   817f2:	f04f 010a 	mov.w	r1, #10
   817f6:	f243 432d 	movw	r3, #13357	; 0x342d
   817fa:	f2c0 0308 	movt	r3, #8
   817fe:	4798      	blx	r3
   81800:	e00e      	b.n	81820 <UnityEnd+0x11c>
   81802:	6885      	ldr	r5, [r0, #8]
   81804:	682e      	ldr	r6, [r5, #0]
   81806:	f04f 030a 	mov.w	r3, #10
   8180a:	7033      	strb	r3, [r6, #0]
   8180c:	f240 0018 	movw	r0, #24
   81810:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81814:	6802      	ldr	r2, [r0, #0]
   81816:	6891      	ldr	r1, [r2, #8]
   81818:	680c      	ldr	r4, [r1, #0]
   8181a:	f104 0401 	add.w	r4, r4, #1
   8181e:	600c      	str	r4, [r1, #0]
    UnityPrintNumber((_U_SINT)(Unity.NumberOfTests));
   81820:	f640 2630 	movw	r6, #2608	; 0xa30
   81824:	f2c2 0607 	movt	r6, #8199	; 0x2007
   81828:	68f0      	ldr	r0, [r6, #12]
   8182a:	f640 2549 	movw	r5, #2633	; 0xa49
   8182e:	f2c0 0508 	movt	r5, #8
   81832:	47a8      	blx	r5
    UnityPrint(UnityStrResultsTests);
   81834:	f245 1080 	movw	r0, #20864	; 0x5180
   81838:	f2c0 0008 	movt	r0, #8
   8183c:	f640 6465 	movw	r4, #3685	; 0xe65
   81840:	f2c0 0408 	movt	r4, #8
   81844:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestFailures));
   81846:	6930      	ldr	r0, [r6, #16]
   81848:	47a8      	blx	r5
    UnityPrint(UnityStrResultsFailures);
   8184a:	f245 1068 	movw	r0, #20840	; 0x5168
   8184e:	f2c0 0008 	movt	r0, #8
   81852:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestIgnores));
   81854:	6970      	ldr	r0, [r6, #20]
   81856:	47a8      	blx	r5
    UnityPrint(UnityStrResultsIgnored);
   81858:	f245 1074 	movw	r0, #20852	; 0x5174
   8185c:	f2c0 0008 	movt	r0, #8
   81860:	47a0      	blx	r4
    UNITY_PRINT_EOL;
   81862:	f240 0318 	movw	r3, #24
   81866:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8186a:	6818      	ldr	r0, [r3, #0]
   8186c:	6882      	ldr	r2, [r0, #8]
   8186e:	6891      	ldr	r1, [r2, #8]
   81870:	f101 33ff 	add.w	r3, r1, #4294967295
   81874:	6093      	str	r3, [r2, #8]
   81876:	2b00      	cmp	r3, #0
   81878:	da26      	bge.n	818c8 <UnityEnd+0x1c4>
   8187a:	6882      	ldr	r2, [r0, #8]
   8187c:	6891      	ldr	r1, [r2, #8]
   8187e:	6993      	ldr	r3, [r2, #24]
   81880:	4299      	cmp	r1, r3
   81882:	db19      	blt.n	818b8 <UnityEnd+0x1b4>
   81884:	6810      	ldr	r0, [r2, #0]
   81886:	f04f 020a 	mov.w	r2, #10
   8188a:	7002      	strb	r2, [r0, #0]
   8188c:	f240 0118 	movw	r1, #24
   81890:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81894:	6808      	ldr	r0, [r1, #0]
   81896:	6882      	ldr	r2, [r0, #8]
   81898:	6813      	ldr	r3, [r2, #0]
   8189a:	7819      	ldrb	r1, [r3, #0]
   8189c:	290a      	cmp	r1, #10
   8189e:	d003      	beq.n	818a8 <UnityEnd+0x1a4>
   818a0:	f103 0301 	add.w	r3, r3, #1
   818a4:	6013      	str	r3, [r2, #0]
   818a6:	e01e      	b.n	818e6 <UnityEnd+0x1e2>
   818a8:	f04f 010a 	mov.w	r1, #10
   818ac:	f243 432d 	movw	r3, #13357	; 0x342d
   818b0:	f2c0 0308 	movt	r3, #8
   818b4:	4798      	blx	r3
   818b6:	e016      	b.n	818e6 <UnityEnd+0x1e2>
   818b8:	f04f 010a 	mov.w	r1, #10
   818bc:	f243 432d 	movw	r3, #13357	; 0x342d
   818c0:	f2c0 0308 	movt	r3, #8
   818c4:	4798      	blx	r3
   818c6:	e00e      	b.n	818e6 <UnityEnd+0x1e2>
   818c8:	6880      	ldr	r0, [r0, #8]
   818ca:	6801      	ldr	r1, [r0, #0]
   818cc:	f04f 020a 	mov.w	r2, #10
   818d0:	700a      	strb	r2, [r1, #0]
   818d2:	f240 0318 	movw	r3, #24
   818d6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   818da:	6818      	ldr	r0, [r3, #0]
   818dc:	6881      	ldr	r1, [r0, #8]
   818de:	680a      	ldr	r2, [r1, #0]
   818e0:	f102 0201 	add.w	r2, r2, #1
   818e4:	600a      	str	r2, [r1, #0]
    if (Unity.TestFailures == 0U)
   818e6:	f640 2030 	movw	r0, #2608	; 0xa30
   818ea:	f2c2 0007 	movt	r0, #8199	; 0x2007
   818ee:	6902      	ldr	r2, [r0, #16]
   818f0:	b92a      	cbnz	r2, 818fe <UnityEnd+0x1fa>
    {
        UnityPrintOk();
   818f2:	f241 43d9 	movw	r3, #5337	; 0x14d9
   818f6:	f2c0 0308 	movt	r3, #8
   818fa:	4798      	blx	r3
   818fc:	e004      	b.n	81908 <UnityEnd+0x204>
    }
    else
    {
        UnityPrintFail();
   818fe:	f241 41c1 	movw	r1, #5313	; 0x14c1
   81902:	f2c0 0108 	movt	r1, #8
   81906:	4788      	blx	r1
    }
    UNITY_PRINT_EOL;
   81908:	f240 0018 	movw	r0, #24
   8190c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81910:	6800      	ldr	r0, [r0, #0]
   81912:	6882      	ldr	r2, [r0, #8]
   81914:	6891      	ldr	r1, [r2, #8]
   81916:	f101 33ff 	add.w	r3, r1, #4294967295
   8191a:	6093      	str	r3, [r2, #8]
   8191c:	2b00      	cmp	r3, #0
   8191e:	da26      	bge.n	8196e <UnityEnd+0x26a>
   81920:	6882      	ldr	r2, [r0, #8]
   81922:	6891      	ldr	r1, [r2, #8]
   81924:	6993      	ldr	r3, [r2, #24]
   81926:	4299      	cmp	r1, r3
   81928:	db19      	blt.n	8195e <UnityEnd+0x25a>
   8192a:	6810      	ldr	r0, [r2, #0]
   8192c:	f04f 020a 	mov.w	r2, #10
   81930:	7002      	strb	r2, [r0, #0]
   81932:	f240 0118 	movw	r1, #24
   81936:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8193a:	6808      	ldr	r0, [r1, #0]
   8193c:	6882      	ldr	r2, [r0, #8]
   8193e:	6813      	ldr	r3, [r2, #0]
   81940:	7819      	ldrb	r1, [r3, #0]
   81942:	290a      	cmp	r1, #10
   81944:	d003      	beq.n	8194e <UnityEnd+0x24a>
   81946:	f103 0301 	add.w	r3, r3, #1
   8194a:	6013      	str	r3, [r2, #0]
   8194c:	e01e      	b.n	8198c <UnityEnd+0x288>
   8194e:	f04f 010a 	mov.w	r1, #10
   81952:	f243 432d 	movw	r3, #13357	; 0x342d
   81956:	f2c0 0308 	movt	r3, #8
   8195a:	4798      	blx	r3
   8195c:	e016      	b.n	8198c <UnityEnd+0x288>
   8195e:	f04f 010a 	mov.w	r1, #10
   81962:	f243 432d 	movw	r3, #13357	; 0x342d
   81966:	f2c0 0308 	movt	r3, #8
   8196a:	4798      	blx	r3
   8196c:	e00e      	b.n	8198c <UnityEnd+0x288>
   8196e:	6880      	ldr	r0, [r0, #8]
   81970:	6801      	ldr	r1, [r0, #0]
   81972:	f04f 020a 	mov.w	r2, #10
   81976:	700a      	strb	r2, [r1, #0]
   81978:	f240 0318 	movw	r3, #24
   8197c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81980:	6818      	ldr	r0, [r3, #0]
   81982:	6881      	ldr	r1, [r0, #8]
   81984:	680a      	ldr	r2, [r1, #0]
   81986:	f102 0201 	add.w	r2, r2, #1
   8198a:	600a      	str	r2, [r1, #0]
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
}
   8198c:	f640 2030 	movw	r0, #2608	; 0xa30
   81990:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81994:	6900      	ldr	r0, [r0, #16]
   81996:	bd70      	pop	{r4, r5, r6, pc}

00081998 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   81998:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   8199a:	685a      	ldr	r2, [r3, #4]
   8199c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   8199e:	6842      	ldr	r2, [r0, #4]
   819a0:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   819a2:	685a      	ldr	r2, [r3, #4]
   819a4:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   819a6:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   819a8:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   819aa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   819ac:	6801      	ldr	r1, [r0, #0]
   819ae:	f101 0101 	add.w	r1, r1, #1
   819b2:	6001      	str	r1, [r0, #0]
   819b4:	4770      	bx	lr
   819b6:	bf00      	nop

000819b8 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   819b8:	6843      	ldr	r3, [r0, #4]
   819ba:	6882      	ldr	r2, [r0, #8]
   819bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   819be:	6881      	ldr	r1, [r0, #8]
   819c0:	6843      	ldr	r3, [r0, #4]
   819c2:	604b      	str	r3, [r1, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   819c4:	6901      	ldr	r1, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   819c6:	684a      	ldr	r2, [r1, #4]
   819c8:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   819ca:	bf04      	itt	eq
   819cc:	6882      	ldreq	r2, [r0, #8]
   819ce:	604a      	streq	r2, [r1, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   819d0:	f04f 0300 	mov.w	r3, #0
   819d4:	6103      	str	r3, [r0, #16]
	( pxList->uxNumberOfItems )--;
   819d6:	6808      	ldr	r0, [r1, #0]
   819d8:	f100 32ff 	add.w	r2, r0, #4294967295
   819dc:	600a      	str	r2, [r1, #0]

	return pxList->uxNumberOfItems;
   819de:	6808      	ldr	r0, [r1, #0]
}
   819e0:	4770      	bx	lr
   819e2:	bf00      	nop

000819e4 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   819e4:	4b06      	ldr	r3, [pc, #24]	; (81a00 <pxCurrentTCBConst2>)
   819e6:	6819      	ldr	r1, [r3, #0]
   819e8:	6808      	ldr	r0, [r1, #0]
   819ea:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   819ee:	f380 8809 	msr	PSP, r0
   819f2:	f04f 0000 	mov.w	r0, #0
   819f6:	f380 8811 	msr	BASEPRI, r0
   819fa:	f04e 0e0d 	orr.w	lr, lr, #13
   819fe:	4770      	bx	lr

00081a00 <pxCurrentTCBConst2>:
   81a00:	20070968 	.word	0x20070968

00081a04 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   81a04:	f3ef 8011 	mrs	r0, BASEPRI
   81a08:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   81a0c:	f381 8811 	msr	BASEPRI, r1
   81a10:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   81a12:	f04f 0000 	mov.w	r0, #0
   81a16:	bf00      	nop

00081a18 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   81a18:	f380 8811 	msr	BASEPRI, r0
   81a1c:	4770      	bx	lr
   81a1e:	bf00      	nop

00081a20 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   81a20:	f3ef 8009 	mrs	r0, PSP
   81a24:	4b0c      	ldr	r3, [pc, #48]	; (81a58 <pxCurrentTCBConst>)
   81a26:	681a      	ldr	r2, [r3, #0]
   81a28:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81a2c:	6010      	str	r0, [r2, #0]
   81a2e:	e92d 4008 	stmdb	sp!, {r3, lr}
   81a32:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   81a36:	f380 8811 	msr	BASEPRI, r0
   81a3a:	f000 f8f1 	bl	81c20 <vTaskSwitchContext>
   81a3e:	f04f 0000 	mov.w	r0, #0
   81a42:	f380 8811 	msr	BASEPRI, r0
   81a46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   81a4a:	6819      	ldr	r1, [r3, #0]
   81a4c:	6808      	ldr	r0, [r1, #0]
   81a4e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81a52:	f380 8809 	msr	PSP, r0
   81a56:	4770      	bx	lr

00081a58 <pxCurrentTCBConst>:
   81a58:	20070968 	.word	0x20070968

00081a5c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   81a5c:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81a5e:	f64e 5304 	movw	r3, #60676	; 0xed04
   81a62:	f2ce 0300 	movt	r3, #57344	; 0xe000
   81a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81a6a:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   81a6c:	f641 2005 	movw	r0, #6661	; 0x1a05
   81a70:	f2c0 0008 	movt	r0, #8
   81a74:	4780      	blx	r0
	{
		vTaskIncrementTick();
   81a76:	f641 2191 	movw	r1, #6801	; 0x1a91
   81a7a:	f2c0 0108 	movt	r1, #8
   81a7e:	4788      	blx	r1
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   81a80:	f04f 0000 	mov.w	r0, #0
   81a84:	f641 2319 	movw	r3, #6681	; 0x1a19
   81a88:	f2c0 0308 	movt	r3, #8
   81a8c:	4798      	blx	r3
   81a8e:	bd08      	pop	{r3, pc}

00081a90 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81a94:	f640 1364 	movw	r3, #2404	; 0x964
   81a98:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81a9c:	6818      	ldr	r0, [r3, #0]
   81a9e:	2800      	cmp	r0, #0
   81aa0:	f040 80b3 	bne.w	81c0a <vTaskIncrementTick+0x17a>
	{
		++xTickCount;
   81aa4:	f640 1370 	movw	r3, #2416	; 0x970
   81aa8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81aac:	6818      	ldr	r0, [r3, #0]
   81aae:	f100 0001 	add.w	r0, r0, #1
   81ab2:	6018      	str	r0, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   81ab4:	6819      	ldr	r1, [r3, #0]
   81ab6:	2900      	cmp	r1, #0
   81ab8:	d139      	bne.n	81b2e <vTaskIncrementTick+0x9e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81aba:	f640 02f8 	movw	r2, #2296	; 0x8f8
   81abe:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81ac2:	6813      	ldr	r3, [r2, #0]
   81ac4:	6818      	ldr	r0, [r3, #0]
   81ac6:	b130      	cbz	r0, 81ad6 <vTaskIncrementTick+0x46>
   81ac8:	f641 2505 	movw	r5, #6661	; 0x1a05
   81acc:	f2c0 0508 	movt	r5, #8
   81ad0:	47a8      	blx	r5
   81ad2:	bf00      	nop
   81ad4:	e7fd      	b.n	81ad2 <vTaskIncrementTick+0x42>

			pxTemp = pxDelayedTaskList;
   81ad6:	f640 03f8 	movw	r3, #2296	; 0x8f8
   81ada:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81ade:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81ae0:	f640 1274 	movw	r2, #2420	; 0x974
   81ae4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81ae8:	6810      	ldr	r0, [r2, #0]
   81aea:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   81aec:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81aee:	f640 126c 	movw	r2, #2412	; 0x96c
   81af2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81af6:	6811      	ldr	r1, [r2, #0]
   81af8:	f101 0101 	add.w	r1, r1, #1
   81afc:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81afe:	681b      	ldr	r3, [r3, #0]
   81b00:	6818      	ldr	r0, [r3, #0]
   81b02:	b938      	cbnz	r0, 81b14 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   81b04:	f240 030c 	movw	r3, #12
   81b08:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81b0c:	f04f 30ff 	mov.w	r0, #4294967295
   81b10:	6018      	str	r0, [r3, #0]
   81b12:	e00c      	b.n	81b2e <vTaskIncrementTick+0x9e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81b14:	f640 02f8 	movw	r2, #2296	; 0x8f8
   81b18:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81b1c:	6811      	ldr	r1, [r2, #0]
   81b1e:	68cb      	ldr	r3, [r1, #12]
   81b20:	68d8      	ldr	r0, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81b22:	6842      	ldr	r2, [r0, #4]
   81b24:	f240 010c 	movw	r1, #12
   81b28:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81b2c:	600a      	str	r2, [r1, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   81b2e:	f640 1270 	movw	r2, #2416	; 0x970
   81b32:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81b36:	6811      	ldr	r1, [r2, #0]
   81b38:	f240 030c 	movw	r3, #12
   81b3c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81b40:	6818      	ldr	r0, [r3, #0]
   81b42:	4281      	cmp	r1, r0
   81b44:	d369      	bcc.n	81c1a <vTaskIncrementTick+0x18a>
   81b46:	f640 02f8 	movw	r2, #2296	; 0x8f8
   81b4a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81b4e:	6811      	ldr	r1, [r2, #0]
   81b50:	680b      	ldr	r3, [r1, #0]
   81b52:	b17b      	cbz	r3, 81b74 <vTaskIncrementTick+0xe4>
   81b54:	f640 04f8 	movw	r4, #2296	; 0x8f8
   81b58:	f2c2 0407 	movt	r4, #8199	; 0x2007
   81b5c:	6820      	ldr	r0, [r4, #0]
   81b5e:	68c2      	ldr	r2, [r0, #12]
   81b60:	68d4      	ldr	r4, [r2, #12]
   81b62:	6863      	ldr	r3, [r4, #4]
   81b64:	f640 1170 	movw	r1, #2416	; 0x970
   81b68:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81b6c:	6808      	ldr	r0, [r1, #0]
   81b6e:	4283      	cmp	r3, r0
   81b70:	d91a      	bls.n	81ba8 <vTaskIncrementTick+0x118>
   81b72:	e012      	b.n	81b9a <vTaskIncrementTick+0x10a>
   81b74:	f240 030c 	movw	r3, #12
   81b78:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81b7c:	f04f 30ff 	mov.w	r0, #4294967295
   81b80:	6018      	str	r0, [r3, #0]
   81b82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81b86:	6834      	ldr	r4, [r6, #0]
   81b88:	68e2      	ldr	r2, [r4, #12]
   81b8a:	68d4      	ldr	r4, [r2, #12]
   81b8c:	6863      	ldr	r3, [r4, #4]
   81b8e:	4648      	mov	r0, r9
   81b90:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81b94:	6801      	ldr	r1, [r0, #0]
   81b96:	428b      	cmp	r3, r1
   81b98:	d91c      	bls.n	81bd4 <vTaskIncrementTick+0x144>
   81b9a:	f240 020c 	movw	r2, #12
   81b9e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81ba2:	6013      	str	r3, [r2, #0]
   81ba4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81ba8:	f641 17b9 	movw	r7, #6585	; 0x19b9
   81bac:	f2c0 0708 	movt	r7, #8
   81bb0:	f640 08fc 	movw	r8, #2300	; 0x8fc
   81bb4:	f2c2 0807 	movt	r8, #8199	; 0x2007
   81bb8:	f640 1b00 	movw	fp, #2304	; 0x900
   81bbc:	f2c2 0b07 	movt	fp, #8199	; 0x2007
   81bc0:	f641 1a99 	movw	sl, #6553	; 0x1999
   81bc4:	f2c0 0a08 	movt	sl, #8
   81bc8:	f640 06f8 	movw	r6, #2296	; 0x8f8
   81bcc:	f2c2 0607 	movt	r6, #8199	; 0x2007
   81bd0:	f640 1970 	movw	r9, #2416	; 0x970
   81bd4:	f104 0504 	add.w	r5, r4, #4
   81bd8:	4628      	mov	r0, r5
   81bda:	47b8      	blx	r7
   81bdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81bde:	b113      	cbz	r3, 81be6 <vTaskIncrementTick+0x156>
   81be0:	f104 0018 	add.w	r0, r4, #24
   81be4:	47b8      	blx	r7
   81be6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   81be8:	f8d8 2000 	ldr.w	r2, [r8]
   81bec:	4291      	cmp	r1, r2
   81bee:	bf88      	it	hi
   81bf0:	f8c8 1000 	strhi.w	r1, [r8]
   81bf4:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   81bf8:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   81bfc:	4629      	mov	r1, r5
   81bfe:	47d0      	blx	sl
   81c00:	6833      	ldr	r3, [r6, #0]
   81c02:	6819      	ldr	r1, [r3, #0]
   81c04:	2900      	cmp	r1, #0
   81c06:	d1be      	bne.n	81b86 <vTaskIncrementTick+0xf6>
   81c08:	e7b4      	b.n	81b74 <vTaskIncrementTick+0xe4>
	}
	else
	{
		++uxMissedTicks;
   81c0a:	f640 01f4 	movw	r1, #2292	; 0x8f4
   81c0e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81c12:	680a      	ldr	r2, [r1, #0]
   81c14:	f102 0201 	add.w	r2, r2, #1
   81c18:	600a      	str	r2, [r1, #0]
   81c1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c1e:	bf00      	nop

00081c20 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81c20:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81c22:	f640 1364 	movw	r3, #2404	; 0x964
   81c26:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81c2a:	6818      	ldr	r0, [r3, #0]
   81c2c:	b9a8      	cbnz	r0, 81c5a <vTaskSwitchContext+0x3a>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81c2e:	f640 01fc 	movw	r1, #2300	; 0x8fc
   81c32:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81c36:	680a      	ldr	r2, [r1, #0]
   81c38:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   81c3c:	ea4f 0083 	mov.w	r0, r3, lsl #2
   81c40:	f640 1100 	movw	r1, #2304	; 0x900
   81c44:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81c48:	580a      	ldr	r2, [r1, r0]
   81c4a:	bb52      	cbnz	r2, 81ca2 <vTaskSwitchContext+0x82>
   81c4c:	f640 03fc 	movw	r3, #2300	; 0x8fc
   81c50:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81c54:	6818      	ldr	r0, [r3, #0]
   81c56:	b988      	cbnz	r0, 81c7c <vTaskSwitchContext+0x5c>
   81c58:	e009      	b.n	81c6e <vTaskSwitchContext+0x4e>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   81c5a:	f640 1178 	movw	r1, #2424	; 0x978
   81c5e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81c62:	f04f 0001 	mov.w	r0, #1
   81c66:	6008      	str	r0, [r1, #0]
   81c68:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81c6a:	681a      	ldr	r2, [r3, #0]
   81c6c:	b972      	cbnz	r2, 81c8c <vTaskSwitchContext+0x6c>
   81c6e:	f641 2305 	movw	r3, #6661	; 0x1a05
   81c72:	f2c0 0308 	movt	r3, #8
   81c76:	4798      	blx	r3
   81c78:	bf00      	nop
   81c7a:	e7fd      	b.n	81c78 <vTaskSwitchContext+0x58>
   81c7c:	f640 03fc 	movw	r3, #2300	; 0x8fc
   81c80:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81c84:	f640 1100 	movw	r1, #2304	; 0x900
   81c88:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81c8c:	681a      	ldr	r2, [r3, #0]
   81c8e:	f102 30ff 	add.w	r0, r2, #4294967295
   81c92:	6018      	str	r0, [r3, #0]
   81c94:	681a      	ldr	r2, [r3, #0]
   81c96:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   81c9a:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
   81c9e:	2a00      	cmp	r2, #0
   81ca0:	d0e3      	beq.n	81c6a <vTaskSwitchContext+0x4a>
   81ca2:	f640 03fc 	movw	r3, #2300	; 0x8fc
   81ca6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81caa:	6819      	ldr	r1, [r3, #0]
   81cac:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   81cb0:	f640 1200 	movw	r2, #2304	; 0x900
   81cb4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81cb8:	eb02 0380 	add.w	r3, r2, r0, lsl #2
   81cbc:	6859      	ldr	r1, [r3, #4]
   81cbe:	6848      	ldr	r0, [r1, #4]
   81cc0:	6058      	str	r0, [r3, #4]
   81cc2:	f103 0208 	add.w	r2, r3, #8
   81cc6:	4290      	cmp	r0, r2
   81cc8:	bf04      	itt	eq
   81cca:	6840      	ldreq	r0, [r0, #4]
   81ccc:	6058      	streq	r0, [r3, #4]
   81cce:	685b      	ldr	r3, [r3, #4]
   81cd0:	68d9      	ldr	r1, [r3, #12]
   81cd2:	f640 1068 	movw	r0, #2408	; 0x968
   81cd6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81cda:	6001      	str	r1, [r0, #0]
   81cdc:	bd08      	pop	{r3, pc}
   81cde:	bf00      	nop

00081ce0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81ce0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81ce2:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   81ce6:	f2c0 5001 	movt	r0, #1281	; 0x501
   81cea:	f242 7345 	movw	r3, #10053	; 0x2745
   81cee:	f2c0 0308 	movt	r3, #8
   81cf2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81cf4:	f04f 0000 	mov.w	r0, #0
   81cf8:	f04f 013e 	mov.w	r1, #62	; 0x3e
   81cfc:	f242 321d 	movw	r2, #8989	; 0x231d
   81d00:	f2c0 0208 	movt	r2, #8
   81d04:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81d06:	f242 348d 	movw	r4, #9101	; 0x238d
   81d0a:	f2c0 0408 	movt	r4, #8
   81d0e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81d10:	2800      	cmp	r0, #0
   81d12:	d0fc      	beq.n	81d0e <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81d14:	f242 309d 	movw	r0, #9117	; 0x239d
   81d18:	f2c0 0008 	movt	r0, #8
   81d1c:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81d1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   81d22:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81d26:	f643 7301 	movw	r3, #16129	; 0x3f01
   81d2a:	f2c2 030d 	movt	r3, #8205	; 0x200d
   81d2e:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81d30:	f242 34ad 	movw	r4, #9133	; 0x23ad
   81d34:	f2c0 0408 	movt	r4, #8
   81d38:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81d3a:	2800      	cmp	r0, #0
   81d3c:	d0fc      	beq.n	81d38 <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81d3e:	f04f 0010 	mov.w	r0, #16
   81d42:	f242 227d 	movw	r2, #8829	; 0x227d
   81d46:	f2c0 0208 	movt	r2, #8
   81d4a:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81d4c:	f242 507d 	movw	r0, #9597	; 0x257d
   81d50:	f2c0 0008 	movt	r0, #8
   81d54:	4780      	blx	r0

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81d56:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   81d5a:	f2c0 5001 	movt	r0, #1281	; 0x501
   81d5e:	f242 7145 	movw	r1, #10053	; 0x2745
   81d62:	f2c0 0108 	movt	r1, #8
   81d66:	4788      	blx	r1
   81d68:	bd10      	pop	{r4, pc}
   81d6a:	bf00      	nop

00081d6c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81d6c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81d6e:	f641 2350 	movw	r3, #6736	; 0x1a50
   81d72:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81d76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81d7a:	605a      	str	r2, [r3, #4]
   81d7c:	f04f 000b 	mov.w	r0, #11
   81d80:	f242 34bd 	movw	r4, #9149	; 0x23bd
   81d84:	f2c0 0408 	movt	r4, #8
   81d88:	47a0      	blx	r4
   81d8a:	f04f 000c 	mov.w	r0, #12
   81d8e:	47a0      	blx	r4
   81d90:	f04f 000d 	mov.w	r0, #13
   81d94:	47a0      	blx	r4
   81d96:	f04f 000e 	mov.w	r0, #14
   81d9a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81d9c:	f04f 003b 	mov.w	r0, #59	; 0x3b
   81da0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81da4:	f641 74d1 	movw	r4, #8145	; 0x1fd1
   81da8:	f2c0 0408 	movt	r4, #8
   81dac:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81dae:	f04f 0055 	mov.w	r0, #85	; 0x55
   81db2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81db6:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81db8:	f04f 0056 	mov.w	r0, #86	; 0x56
   81dbc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81dc0:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81dc2:	f04f 0068 	mov.w	r0, #104	; 0x68
   81dc6:	f04f 0179 	mov.w	r1, #121	; 0x79
   81dca:	f6c2 0100 	movt	r1, #10240	; 0x2800
   81dce:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81dd0:	f04f 005c 	mov.w	r0, #92	; 0x5c
   81dd4:	f04f 0101 	mov.w	r1, #1
   81dd8:	f6c2 0100 	movt	r1, #10240	; 0x2800
   81ddc:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81dde:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   81de2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81de6:	f44f 7140 	mov.w	r1, #768	; 0x300
   81dea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81dee:	f641 63f5 	movw	r3, #7925	; 0x1ef5
   81df2:	f2c0 0308 	movt	r3, #8
   81df6:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81df8:	f04f 002b 	mov.w	r0, #43	; 0x2b
   81dfc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81e00:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81e02:	f04f 002a 	mov.w	r0, #42	; 0x2a
   81e06:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81e0a:	47a0      	blx	r4
   81e0c:	bd10      	pop	{r4, pc}
   81e0e:	bf00      	nop

00081e10 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81e10:	b10a      	cbz	r2, 81e16 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   81e12:	6641      	str	r1, [r0, #100]	; 0x64
   81e14:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81e16:	6601      	str	r1, [r0, #96]	; 0x60
   81e18:	4770      	bx	lr
   81e1a:	bf00      	nop

00081e1c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81e1c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81e1e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81e22:	d016      	beq.n	81e52 <pio_set_peripheral+0x36>
   81e24:	d804      	bhi.n	81e30 <pio_set_peripheral+0x14>
   81e26:	b1c9      	cbz	r1, 81e5c <pio_set_peripheral+0x40>
   81e28:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81e2c:	d115      	bne.n	81e5a <pio_set_peripheral+0x3e>
   81e2e:	e009      	b.n	81e44 <pio_set_peripheral+0x28>
   81e30:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81e34:	d012      	beq.n	81e5c <pio_set_peripheral+0x40>
   81e36:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81e3a:	d00f      	beq.n	81e5c <pio_set_peripheral+0x40>
   81e3c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81e40:	d10b      	bne.n	81e5a <pio_set_peripheral+0x3e>
   81e42:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81e44:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81e46:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81e48:	400b      	ands	r3, r1
   81e4a:	ea23 0302 	bic.w	r3, r3, r2
   81e4e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81e50:	e003      	b.n	81e5a <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   81e52:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81e54:	ea42 0103 	orr.w	r1, r2, r3
   81e58:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81e5a:	6042      	str	r2, [r0, #4]
   81e5c:	4770      	bx	lr
   81e5e:	bf00      	nop

00081e60 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81e60:	6441      	str	r1, [r0, #68]	; 0x44
   81e62:	4770      	bx	lr

00081e64 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   81e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81e66:	4604      	mov	r4, r0
   81e68:	460d      	mov	r5, r1
   81e6a:	4616      	mov	r6, r2
   81e6c:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   81e6e:	f641 6361 	movw	r3, #7777	; 0x1e61
   81e72:	f2c0 0308 	movt	r3, #8
   81e76:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   81e78:	4620      	mov	r0, r4
   81e7a:	4629      	mov	r1, r5
   81e7c:	9a06      	ldr	r2, [sp, #24]
   81e7e:	f641 6311 	movw	r3, #7697	; 0x1e11
   81e82:	f2c0 0308 	movt	r3, #8
   81e86:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   81e88:	b10f      	cbz	r7, 81e8e <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   81e8a:	6525      	str	r5, [r4, #80]	; 0x50
   81e8c:	e000      	b.n	81e90 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   81e8e:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81e90:	b10e      	cbz	r6, 81e96 <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   81e92:	6325      	str	r5, [r4, #48]	; 0x30
   81e94:	e000      	b.n	81e98 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81e96:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   81e98:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   81e9a:	6025      	str	r5, [r4, #0]
   81e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81e9e:	bf00      	nop

00081ea0 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   81ea0:	b570      	push	{r4, r5, r6, lr}
   81ea2:	4604      	mov	r4, r0
   81ea4:	460d      	mov	r5, r1
   81ea6:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   81ea8:	f641 6361 	movw	r3, #7777	; 0x1e61
   81eac:	f2c0 0308 	movt	r3, #8
   81eb0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   81eb2:	4620      	mov	r0, r4
   81eb4:	4629      	mov	r1, r5
   81eb6:	f006 0201 	and.w	r2, r6, #1
   81eba:	f641 6311 	movw	r3, #7697	; 0x1e11
   81ebe:	f2c0 0308 	movt	r3, #8
   81ec2:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81ec4:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   81ec8:	bf14      	ite	ne
   81eca:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   81ecc:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   81ece:	f016 0f02 	tst.w	r6, #2
   81ed2:	d002      	beq.n	81eda <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   81ed4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   81ed8:	e004      	b.n	81ee4 <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   81eda:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_DIFSR = ul_mask;
   81ede:	bf18      	it	ne
   81ee0:	f8c4 5084 	strne.w	r5, [r4, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81ee4:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   81ee6:	6025      	str	r5, [r4, #0]
   81ee8:	bd70      	pop	{r4, r5, r6, pc}
   81eea:	bf00      	nop

00081eec <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81eec:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81eee:	4770      	bx	lr

00081ef0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81ef0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81ef2:	4770      	bx	lr

00081ef4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   81ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
   81ef6:	b083      	sub	sp, #12
   81ef8:	4607      	mov	r7, r0
   81efa:	460e      	mov	r6, r1
   81efc:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81efe:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   81f02:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81f06:	d036      	beq.n	81f76 <pio_configure_pin_group+0x82>
   81f08:	d806      	bhi.n	81f18 <pio_configure_pin_group+0x24>
   81f0a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   81f0e:	d00a      	beq.n	81f26 <pio_configure_pin_group+0x32>
   81f10:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81f14:	d14d      	bne.n	81fb2 <pio_configure_pin_group+0xbe>
   81f16:	e01a      	b.n	81f4e <pio_configure_pin_group+0x5a>
   81f18:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81f1c:	d033      	beq.n	81f86 <pio_configure_pin_group+0x92>
   81f1e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   81f22:	d146      	bne.n	81fb2 <pio_configure_pin_group+0xbe>
   81f24:	e02f      	b.n	81f86 <pio_configure_pin_group+0x92>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81f26:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f2a:	4632      	mov	r2, r6
   81f2c:	f641 631d 	movw	r3, #7709	; 0x1e1d
   81f30:	f2c0 0308 	movt	r3, #8
   81f34:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   81f36:	4638      	mov	r0, r7
   81f38:	4631      	mov	r1, r6
   81f3a:	f005 0201 	and.w	r2, r5, #1
   81f3e:	f641 6311 	movw	r3, #7697	; 0x1e11
   81f42:	f2c0 0308 	movt	r3, #8
   81f46:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81f48:	f04f 0001 	mov.w	r0, #1
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   81f4c:	e033      	b.n	81fb6 <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81f4e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81f52:	4632      	mov	r2, r6
   81f54:	f641 631d 	movw	r3, #7709	; 0x1e1d
   81f58:	f2c0 0308 	movt	r3, #8
   81f5c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   81f5e:	4638      	mov	r0, r7
   81f60:	4631      	mov	r1, r6
   81f62:	f005 0201 	and.w	r2, r5, #1
   81f66:	f641 6311 	movw	r3, #7697	; 0x1e11
   81f6a:	f2c0 0308 	movt	r3, #8
   81f6e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81f70:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   81f74:	e01f      	b.n	81fb6 <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   81f76:	f641 63a1 	movw	r3, #7841	; 0x1ea1
   81f7a:	f2c0 0308 	movt	r3, #8
   81f7e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81f80:	f04f 0001 	mov.w	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   81f84:	e017      	b.n	81fb6 <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81f86:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   81f8a:	f005 0001 	and.w	r0, r5, #1
   81f8e:	9000      	str	r0, [sp, #0]
   81f90:	4638      	mov	r0, r7
   81f92:	4631      	mov	r1, r6
   81f94:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81f98:	bf14      	ite	ne
   81f9a:	2200      	movne	r2, #0
   81f9c:	2201      	moveq	r2, #1
   81f9e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81fa2:	f641 6465 	movw	r4, #7781	; 0x1e65
   81fa6:	f2c0 0408 	movt	r4, #8
   81faa:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   81fac:	f04f 0001 	mov.w	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81fb0:	e001      	b.n	81fb6 <pio_configure_pin_group+0xc2>

	default:
		return 0;
   81fb2:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   81fb6:	b003      	add	sp, #12
   81fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81fba:	bf00      	nop

00081fbc <pio_get_pin_group>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81fbc:	ea4f 1050 	mov.w	r0, r0, lsr #5
   81fc0:	f500 1100 	add.w	r1, r0, #2097152	; 0x200000
   81fc4:	f201 7207 	addw	r2, r1, #1799	; 0x707
#endif
	return p_pio;
}
   81fc8:	ea4f 2042 	mov.w	r0, r2, lsl #9
   81fcc:	4770      	bx	lr
   81fce:	bf00      	nop

00081fd0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   81fd2:	b083      	sub	sp, #12
   81fd4:	4607      	mov	r7, r0
   81fd6:	460d      	mov	r5, r1
	Pio *p_pio = pio_get_pin_group(ul_pin);
   81fd8:	f641 73bd 	movw	r3, #8125	; 0x1fbd
   81fdc:	f2c0 0308 	movt	r3, #8
   81fe0:	4798      	blx	r3
   81fe2:	4606      	mov	r6, r0

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81fe4:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   81fe8:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81fec:	d041      	beq.n	82072 <pio_configure_pin+0xa2>
   81fee:	d806      	bhi.n	81ffe <pio_configure_pin+0x2e>
   81ff0:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   81ff4:	d00a      	beq.n	8200c <pio_configure_pin+0x3c>
   81ff6:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81ffa:	d162      	bne.n	820c2 <pio_configure_pin+0xf2>
   81ffc:	e020      	b.n	82040 <pio_configure_pin+0x70>
   81ffe:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   82002:	d044      	beq.n	8208e <pio_configure_pin+0xbe>
   82004:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   82008:	d15b      	bne.n	820c2 <pio_configure_pin+0xf2>
   8200a:	e040      	b.n	8208e <pio_configure_pin+0xbe>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8200c:	f007 001f 	and.w	r0, r7, #31
   82010:	f04f 0401 	mov.w	r4, #1
   82014:	fa04 f700 	lsl.w	r7, r4, r0
   82018:	4630      	mov	r0, r6
   8201a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8201e:	463a      	mov	r2, r7
   82020:	f641 631d 	movw	r3, #7709	; 0x1e1d
   82024:	f2c0 0308 	movt	r3, #8
   82028:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   8202a:	4630      	mov	r0, r6
   8202c:	4639      	mov	r1, r7
   8202e:	ea05 0204 	and.w	r2, r5, r4
   82032:	f641 6311 	movw	r3, #7697	; 0x1e11
   82036:	f2c0 0308 	movt	r3, #8
   8203a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8203c:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   8203e:	e042      	b.n	820c6 <pio_configure_pin+0xf6>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82040:	f007 071f 	and.w	r7, r7, #31
   82044:	f04f 0401 	mov.w	r4, #1
   82048:	fa04 f707 	lsl.w	r7, r4, r7
   8204c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82050:	463a      	mov	r2, r7
   82052:	f641 631d 	movw	r3, #7709	; 0x1e1d
   82056:	f2c0 0308 	movt	r3, #8
   8205a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   8205c:	4630      	mov	r0, r6
   8205e:	4639      	mov	r1, r7
   82060:	ea05 0204 	and.w	r2, r5, r4
   82064:	f641 6311 	movw	r3, #7697	; 0x1e11
   82068:	f2c0 0308 	movt	r3, #8
   8206c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8206e:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   82070:	e029      	b.n	820c6 <pio_configure_pin+0xf6>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82072:	f007 021f 	and.w	r2, r7, #31
   82076:	f04f 0401 	mov.w	r4, #1
   8207a:	fa04 f102 	lsl.w	r1, r4, r2
   8207e:	462a      	mov	r2, r5
   82080:	f641 63a1 	movw	r3, #7841	; 0x1ea1
   82084:	f2c0 0308 	movt	r3, #8
   82088:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8208a:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8208c:	e01b      	b.n	820c6 <pio_configure_pin+0xf6>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8208e:	f007 011f 	and.w	r1, r7, #31
   82092:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82096:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8209a:	ea05 0004 	and.w	r0, r5, r4
   8209e:	9000      	str	r0, [sp, #0]
   820a0:	4630      	mov	r0, r6
   820a2:	fa04 f101 	lsl.w	r1, r4, r1
   820a6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   820aa:	bf14      	ite	ne
   820ac:	2200      	movne	r2, #0
   820ae:	2201      	moveq	r2, #1
   820b0:	f3c5 0380 	ubfx	r3, r5, #2, #1
   820b4:	f641 6565 	movw	r5, #7781	; 0x1e65
   820b8:	f2c0 0508 	movt	r5, #8
   820bc:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   820be:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   820c0:	e001      	b.n	820c6 <pio_configure_pin+0xf6>

	default:
		return 0;
   820c2:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   820c6:	b003      	add	sp, #12
   820c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   820ca:	bf00      	nop

000820cc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   820cc:	b570      	push	{r4, r5, r6, lr}
   820ce:	4606      	mov	r6, r0
   820d0:	460c      	mov	r4, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   820d2:	f641 63ed 	movw	r3, #7917	; 0x1eed
   820d6:	f2c0 0308 	movt	r3, #8
   820da:	4798      	blx	r3
   820dc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   820de:	4630      	mov	r0, r6
   820e0:	f641 61f1 	movw	r1, #7921	; 0x1ef1
   820e4:	f2c0 0108 	movt	r1, #8
   820e8:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   820ea:	4005      	ands	r5, r0
   820ec:	f000 808c 	beq.w	82208 <pio_handler_process+0x13c>
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   820f0:	f640 107c 	movw	r0, #2428	; 0x97c
   820f4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   820f8:	6800      	ldr	r0, [r0, #0]
   820fa:	42a0      	cmp	r0, r4
   820fc:	d10c      	bne.n	82118 <pio_handler_process+0x4c>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   820fe:	f640 127c 	movw	r2, #2428	; 0x97c
   82102:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82106:	6851      	ldr	r1, [r2, #4]
   82108:	420d      	tst	r5, r1
   8210a:	d005      	beq.n	82118 <pio_handler_process+0x4c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8210c:	4616      	mov	r6, r2
   8210e:	68d3      	ldr	r3, [r2, #12]
   82110:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82112:	6871      	ldr	r1, [r6, #4]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82114:	438d      	bics	r5, r1
   82116:	d077      	beq.n	82208 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82118:	f640 107c 	movw	r0, #2428	; 0x97c
   8211c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82120:	6900      	ldr	r0, [r0, #16]
   82122:	42a0      	cmp	r0, r4
   82124:	d10c      	bne.n	82140 <pio_handler_process+0x74>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82126:	f640 127c 	movw	r2, #2428	; 0x97c
   8212a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8212e:	6951      	ldr	r1, [r2, #20]
   82130:	420d      	tst	r5, r1
   82132:	d005      	beq.n	82140 <pio_handler_process+0x74>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82134:	4616      	mov	r6, r2
   82136:	69d3      	ldr	r3, [r2, #28]
   82138:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8213a:	6971      	ldr	r1, [r6, #20]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8213c:	438d      	bics	r5, r1
   8213e:	d063      	beq.n	82208 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82140:	f640 107c 	movw	r0, #2428	; 0x97c
   82144:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82148:	6a00      	ldr	r0, [r0, #32]
   8214a:	42a0      	cmp	r0, r4
   8214c:	d10c      	bne.n	82168 <pio_handler_process+0x9c>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8214e:	f640 127c 	movw	r2, #2428	; 0x97c
   82152:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82156:	6a51      	ldr	r1, [r2, #36]	; 0x24
   82158:	420d      	tst	r5, r1
   8215a:	d005      	beq.n	82168 <pio_handler_process+0x9c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8215c:	4616      	mov	r6, r2
   8215e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   82160:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82162:	6a71      	ldr	r1, [r6, #36]	; 0x24

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82164:	438d      	bics	r5, r1
   82166:	d04f      	beq.n	82208 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82168:	f640 107c 	movw	r0, #2428	; 0x97c
   8216c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82170:	6b00      	ldr	r0, [r0, #48]	; 0x30
   82172:	42a0      	cmp	r0, r4
   82174:	d10c      	bne.n	82190 <pio_handler_process+0xc4>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82176:	f640 127c 	movw	r2, #2428	; 0x97c
   8217a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8217e:	6b51      	ldr	r1, [r2, #52]	; 0x34
   82180:	420d      	tst	r5, r1
   82182:	d005      	beq.n	82190 <pio_handler_process+0xc4>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82184:	4616      	mov	r6, r2
   82186:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   82188:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8218a:	6b71      	ldr	r1, [r6, #52]	; 0x34

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8218c:	438d      	bics	r5, r1
   8218e:	d03b      	beq.n	82208 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82190:	f640 107c 	movw	r0, #2428	; 0x97c
   82194:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82198:	6c00      	ldr	r0, [r0, #64]	; 0x40
   8219a:	42a0      	cmp	r0, r4
   8219c:	d10c      	bne.n	821b8 <pio_handler_process+0xec>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8219e:	f640 127c 	movw	r2, #2428	; 0x97c
   821a2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   821a6:	6c51      	ldr	r1, [r2, #68]	; 0x44
   821a8:	420d      	tst	r5, r1
   821aa:	d005      	beq.n	821b8 <pio_handler_process+0xec>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   821ac:	4616      	mov	r6, r2
   821ae:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   821b0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   821b2:	6c71      	ldr	r1, [r6, #68]	; 0x44

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   821b4:	438d      	bics	r5, r1
   821b6:	d027      	beq.n	82208 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   821b8:	f640 107c 	movw	r0, #2428	; 0x97c
   821bc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   821c0:	6d00      	ldr	r0, [r0, #80]	; 0x50
   821c2:	42a0      	cmp	r0, r4
   821c4:	d10c      	bne.n	821e0 <pio_handler_process+0x114>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   821c6:	f640 127c 	movw	r2, #2428	; 0x97c
   821ca:	f2c2 0207 	movt	r2, #8199	; 0x2007
   821ce:	6d51      	ldr	r1, [r2, #84]	; 0x54
   821d0:	420d      	tst	r5, r1
   821d2:	d005      	beq.n	821e0 <pio_handler_process+0x114>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   821d4:	4616      	mov	r6, r2
   821d6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   821d8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   821da:	6d71      	ldr	r1, [r6, #84]	; 0x54

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   821dc:	438d      	bics	r5, r1
   821de:	d013      	beq.n	82208 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   821e0:	f640 107c 	movw	r0, #2428	; 0x97c
   821e4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   821e8:	6e00      	ldr	r0, [r0, #96]	; 0x60
   821ea:	42a0      	cmp	r0, r4
   821ec:	d10c      	bne.n	82208 <pio_handler_process+0x13c>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   821ee:	f640 127c 	movw	r2, #2428	; 0x97c
   821f2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   821f6:	6e51      	ldr	r1, [r2, #100]	; 0x64
   821f8:	4229      	tst	r1, r5
   821fa:	d005      	beq.n	82208 <pio_handler_process+0x13c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   821fc:	f640 137c 	movw	r3, #2428	; 0x97c
   82200:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82204:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   82206:	4790      	blx	r2
   82208:	bd70      	pop	{r4, r5, r6, pc}
   8220a:	bf00      	nop

0008220c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8220c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8220e:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   82212:	f2c4 000e 	movt	r0, #16398	; 0x400e
   82216:	f04f 010b 	mov.w	r1, #11
   8221a:	f242 03cd 	movw	r3, #8397	; 0x20cd
   8221e:	f2c0 0308 	movt	r3, #8
   82222:	4798      	blx	r3
   82224:	bd08      	pop	{r3, pc}
   82226:	bf00      	nop

00082228 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82228:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8222a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   8222e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   82232:	f04f 010c 	mov.w	r1, #12
   82236:	f242 03cd 	movw	r3, #8397	; 0x20cd
   8223a:	f2c0 0308 	movt	r3, #8
   8223e:	4798      	blx	r3
   82240:	bd08      	pop	{r3, pc}
   82242:	bf00      	nop

00082244 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82244:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82246:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   8224a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8224e:	f04f 010d 	mov.w	r1, #13
   82252:	f242 03cd 	movw	r3, #8397	; 0x20cd
   82256:	f2c0 0308 	movt	r3, #8
   8225a:	4798      	blx	r3
   8225c:	bd08      	pop	{r3, pc}
   8225e:	bf00      	nop

00082260 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82260:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   82262:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   82266:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8226a:	f04f 010e 	mov.w	r1, #14
   8226e:	f242 03cd 	movw	r3, #8397	; 0x20cd
   82272:	f2c0 0308 	movt	r3, #8
   82276:	4798      	blx	r3
   82278:	bd08      	pop	{r3, pc}
   8227a:	bf00      	nop

0008227c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8227c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   82280:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82286:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   8228a:	4308      	orrs	r0, r1
   8228c:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8228e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   82290:	f010 0f08 	tst.w	r0, #8
   82294:	d007      	beq.n	822a6 <pmc_switch_mck_to_pllack+0x2a>
   82296:	e010      	b.n	822ba <pmc_switch_mck_to_pllack+0x3e>
   82298:	f100 33ff 	add.w	r3, r0, #4294967295
   8229c:	6e90      	ldr	r0, [r2, #104]	; 0x68
   8229e:	f010 0f08 	tst.w	r0, #8
   822a2:	d038      	beq.n	82316 <pmc_switch_mck_to_pllack+0x9a>
   822a4:	e009      	b.n	822ba <pmc_switch_mck_to_pllack+0x3e>
   822a6:	f44f 6000 	mov.w	r0, #2048	; 0x800
   822aa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   822ae:	f2c4 020e 	movt	r2, #16398	; 0x400e
   822b2:	6e91      	ldr	r1, [r2, #104]	; 0x68
   822b4:	f011 0f08 	tst.w	r1, #8
   822b8:	d0ee      	beq.n	82298 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   822ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   822be:	f2c4 010e 	movt	r1, #16398	; 0x400e
   822c2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   822c4:	f022 0303 	bic.w	r3, r2, #3
   822c8:	f043 0002 	orr.w	r0, r3, #2
   822cc:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   822ce:	6e89      	ldr	r1, [r1, #104]	; 0x68
   822d0:	f011 0f08 	tst.w	r1, #8
   822d4:	d009      	beq.n	822ea <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   822d6:	f04f 0000 	mov.w	r0, #0
   822da:	4770      	bx	lr
   822dc:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   822e0:	6e91      	ldr	r1, [r2, #104]	; 0x68
   822e2:	f011 0f08 	tst.w	r1, #8
   822e6:	d013      	beq.n	82310 <pmc_switch_mck_to_pllack+0x94>
   822e8:	e009      	b.n	822fe <pmc_switch_mck_to_pllack+0x82>
   822ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
   822ee:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   822f2:	f2c4 020e 	movt	r2, #16398	; 0x400e
   822f6:	6e90      	ldr	r0, [r2, #104]	; 0x68
   822f8:	f010 0f08 	tst.w	r0, #8
   822fc:	d0ee      	beq.n	822dc <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   822fe:	f04f 0000 	mov.w	r0, #0
   82302:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82304:	f04f 0001 	mov.w	r0, #1
   82308:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8230a:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   8230e:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   82310:	3b01      	subs	r3, #1
   82312:	d1f0      	bne.n	822f6 <pmc_switch_mck_to_pllack+0x7a>
   82314:	e7f9      	b.n	8230a <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   82316:	1e58      	subs	r0, r3, #1
   82318:	d1cb      	bne.n	822b2 <pmc_switch_mck_to_pllack+0x36>
   8231a:	e7f3      	b.n	82304 <pmc_switch_mck_to_pllack+0x88>

0008231c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   8231c:	b188      	cbz	r0, 82342 <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8231e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   82322:	f2c4 010e 	movt	r1, #16398	; 0x400e
   82326:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82328:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   8232c:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   82330:	4002      	ands	r2, r0
   82332:	f04f 0302 	mov.w	r3, #2
   82336:	f2c0 1337 	movt	r3, #311	; 0x137
   8233a:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8233e:	6208      	str	r0, [r1, #32]
   82340:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82342:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   82346:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8234a:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8234c:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   82350:	f020 0203 	bic.w	r2, r0, #3
   82354:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   82358:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8235c:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82360:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82364:	6218      	str	r0, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82366:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8236a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8236e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82370:	f013 0f01 	tst.w	r3, #1
   82374:	d0fb      	beq.n	8236e <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82376:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   8237a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8237e:	6a08      	ldr	r0, [r1, #32]
   82380:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   82384:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   82388:	620b      	str	r3, [r1, #32]
   8238a:	4770      	bx	lr

0008238c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8238c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   82390:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82394:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82396:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8239a:	4770      	bx	lr

0008239c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8239c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   823a0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   823a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   823a8:	629a      	str	r2, [r3, #40]	; 0x28
   823aa:	4770      	bx	lr

000823ac <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   823ac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   823b0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   823b4:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   823b6:	f000 0002 	and.w	r0, r0, #2
   823ba:	4770      	bx	lr

000823bc <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   823bc:	282c      	cmp	r0, #44	; 0x2c
   823be:	d835      	bhi.n	8242c <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   823c0:	281f      	cmp	r0, #31
   823c2:	d817      	bhi.n	823f4 <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   823c4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   823c8:	f2c4 010e 	movt	r1, #16398	; 0x400e
   823cc:	698a      	ldr	r2, [r1, #24]
   823ce:	f04f 0301 	mov.w	r3, #1
   823d2:	fa03 f300 	lsl.w	r3, r3, r0
   823d6:	401a      	ands	r2, r3
   823d8:	4293      	cmp	r3, r2
   823da:	d02a      	beq.n	82432 <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   823dc:	f04f 0101 	mov.w	r1, #1
   823e0:	fa01 f000 	lsl.w	r0, r1, r0
   823e4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   823e8:	f2c4 020e 	movt	r2, #16398	; 0x400e
   823ec:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   823ee:	f04f 0000 	mov.w	r0, #0
   823f2:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   823f4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   823f8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   823fc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
   82400:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82404:	f04f 0101 	mov.w	r1, #1
   82408:	fa01 f100 	lsl.w	r1, r1, r0
   8240c:	400a      	ands	r2, r1
   8240e:	4291      	cmp	r1, r2
   82410:	d012      	beq.n	82438 <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   82412:	f04f 0301 	mov.w	r3, #1
   82416:	fa03 f000 	lsl.w	r0, r3, r0
   8241a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8241e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   82422:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   82426:	f04f 0000 	mov.w	r0, #0
   8242a:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8242c:	f04f 0001 	mov.w	r0, #1
   82430:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82432:	f04f 0000 	mov.w	r0, #0
   82436:	4770      	bx	lr
   82438:	f04f 0000 	mov.w	r0, #0
}
   8243c:	4770      	bx	lr
   8243e:	bf00      	nop

00082440 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82440:	e7fe      	b.n	82440 <Dummy_Handler>
   82442:	bf00      	nop

00082444 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82444:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   82446:	f240 0300 	movw	r3, #0
   8244a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8244e:	f245 220c 	movw	r2, #21004	; 0x520c
   82452:	f2c0 0208 	movt	r2, #8
   82456:	429a      	cmp	r2, r3
   82458:	d003      	beq.n	82462 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   8245a:	4840      	ldr	r0, [pc, #256]	; (8255c <Reset_Handler+0x118>)
   8245c:	4940      	ldr	r1, [pc, #256]	; (82560 <Reset_Handler+0x11c>)
   8245e:	4281      	cmp	r1, r0
   82460:	d304      	bcc.n	8246c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82462:	4b40      	ldr	r3, [pc, #256]	; (82564 <Reset_Handler+0x120>)
   82464:	4a40      	ldr	r2, [pc, #256]	; (82568 <Reset_Handler+0x124>)
   82466:	429a      	cmp	r2, r3
   82468:	d325      	bcc.n	824b6 <Reset_Handler+0x72>
   8246a:	e042      	b.n	824f2 <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   8246c:	4d3f      	ldr	r5, [pc, #252]	; (8256c <Reset_Handler+0x128>)
   8246e:	4c40      	ldr	r4, [pc, #256]	; (82570 <Reset_Handler+0x12c>)
   82470:	1b63      	subs	r3, r4, r5
   82472:	f023 0503 	bic.w	r5, r3, #3
   82476:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   8247a:	f240 0200 	movw	r2, #0
   8247e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82482:	f245 210c 	movw	r1, #21004	; 0x520c
   82486:	f2c0 0108 	movt	r1, #8
   8248a:	f105 0004 	add.w	r0, r5, #4
   8248e:	f3c5 0480 	ubfx	r4, r5, #2, #1
   82492:	585d      	ldr	r5, [r3, r1]
   82494:	509d      	str	r5, [r3, r2]
   82496:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8249a:	4283      	cmp	r3, r0
   8249c:	d155      	bne.n	8254a <Reset_Handler+0x106>
   8249e:	e7e0      	b.n	82462 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   824a0:	585d      	ldr	r5, [r3, r1]
   824a2:	509d      	str	r5, [r3, r2]
   824a4:	f103 0304 	add.w	r3, r3, #4
   824a8:	585c      	ldr	r4, [r3, r1]
   824aa:	509c      	str	r4, [r3, r2]
   824ac:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   824b0:	4283      	cmp	r3, r0
   824b2:	d1f5      	bne.n	824a0 <Reset_Handler+0x5c>
   824b4:	e7d5      	b.n	82462 <Reset_Handler+0x1e>
   824b6:	4d2f      	ldr	r5, [pc, #188]	; (82574 <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   824b8:	492f      	ldr	r1, [pc, #188]	; (82578 <Reset_Handler+0x134>)
   824ba:	1b48      	subs	r0, r1, r5
   824bc:	f020 0403 	bic.w	r4, r0, #3
   824c0:	f640 03d8 	movw	r3, #2264	; 0x8d8
   824c4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   824c8:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   824ca:	f04f 0100 	mov.w	r1, #0
   824ce:	1b50      	subs	r0, r2, r5
   824d0:	f1a0 0004 	sub.w	r0, r0, #4
   824d4:	f3c0 0480 	ubfx	r4, r0, #2, #1
   824d8:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   824dc:	4295      	cmp	r5, r2
   824de:	d12d      	bne.n	8253c <Reset_Handler+0xf8>
   824e0:	e007      	b.n	824f2 <Reset_Handler+0xae>
   824e2:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   824e6:	6069      	str	r1, [r5, #4]
   824e8:	f105 0508 	add.w	r5, r5, #8
   824ec:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   824ee:	4295      	cmp	r5, r2
   824f0:	d1f7      	bne.n	824e2 <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   824f2:	f240 0500 	movw	r5, #0
   824f6:	f2c0 0508 	movt	r5, #8
   824fa:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   824fe:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   82502:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   82506:	f2ce 0000 	movt	r0, #57344	; 0xe000
   8250a:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8250c:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   82510:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   82514:	d207      	bcs.n	82526 <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82516:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   8251a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8251e:	689d      	ldr	r5, [r3, #8]
   82520:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   82524:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82526:	f642 1141 	movw	r1, #10561	; 0x2941
   8252a:	f2c0 0108 	movt	r1, #8
   8252e:	4788      	blx	r1

	/* Branch to main function */
	main();
   82530:	f240 50a1 	movw	r0, #1441	; 0x5a1
   82534:	f2c0 0008 	movt	r0, #8
   82538:	4780      	blx	r0
   8253a:	e7fe      	b.n	8253a <Reset_Handler+0xf6>
   8253c:	2c00      	cmp	r4, #0
   8253e:	d0d0      	beq.n	824e2 <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   82540:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82544:	4295      	cmp	r5, r2
   82546:	d1cc      	bne.n	824e2 <Reset_Handler+0x9e>
   82548:	e7d3      	b.n	824f2 <Reset_Handler+0xae>
   8254a:	2c00      	cmp	r4, #0
   8254c:	d0a8      	beq.n	824a0 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   8254e:	585c      	ldr	r4, [r3, r1]
   82550:	509c      	str	r4, [r3, r2]
   82552:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82556:	4283      	cmp	r3, r0
   82558:	d1a2      	bne.n	824a0 <Reset_Handler+0x5c>
   8255a:	e782      	b.n	82462 <Reset_Handler+0x1e>
   8255c:	200708d8 	.word	0x200708d8
   82560:	20070000 	.word	0x20070000
   82564:	20070ab0 	.word	0x20070ab0
   82568:	200708d8 	.word	0x200708d8
   8256c:	20070004 	.word	0x20070004
   82570:	200708db 	.word	0x200708db
   82574:	200708d4 	.word	0x200708d4
   82578:	20070aab 	.word	0x20070aab

0008257c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8257c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   82580:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82584:	6b18      	ldr	r0, [r3, #48]	; 0x30
   82586:	f000 0103 	and.w	r1, r0, #3
   8258a:	2903      	cmp	r1, #3
   8258c:	f200 80b1 	bhi.w	826f2 <SystemCoreClockUpdate+0x176>
   82590:	e8df f001 	tbb	[pc, r1]
   82594:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82598:	f641 2010 	movw	r0, #6672	; 0x1a10
   8259c:	f2c4 000e 	movt	r0, #16398	; 0x400e
   825a0:	6941      	ldr	r1, [r0, #20]
   825a2:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   825a6:	f240 0310 	movw	r3, #16
   825aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   825ae:	bf14      	ite	ne
   825b0:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   825b4:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   825b8:	601a      	str	r2, [r3, #0]
   825ba:	e09a      	b.n	826f2 <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   825bc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   825c0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   825c4:	6a18      	ldr	r0, [r3, #32]
   825c6:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   825ca:	d009      	beq.n	825e0 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   825cc:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   825d0:	f2c0 03b7 	movt	r3, #183	; 0xb7
   825d4:	f240 0210 	movw	r2, #16
   825d8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   825dc:	6013      	str	r3, [r2, #0]
   825de:	e088      	b.n	826f2 <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   825e0:	f44f 6110 	mov.w	r1, #2304	; 0x900
   825e4:	f2c0 013d 	movt	r1, #61	; 0x3d
   825e8:	f240 0210 	movw	r2, #16
   825ec:	f2c2 0207 	movt	r2, #8199	; 0x2007
   825f0:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   825f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   825f6:	f2c4 030e 	movt	r3, #16398	; 0x400e
   825fa:	6a18      	ldr	r0, [r3, #32]
   825fc:	f000 0170 	and.w	r1, r0, #112	; 0x70
   82600:	2910      	cmp	r1, #16
   82602:	d002      	beq.n	8260a <SystemCoreClockUpdate+0x8e>
   82604:	2920      	cmp	r1, #32
   82606:	d174      	bne.n	826f2 <SystemCoreClockUpdate+0x176>
   82608:	e009      	b.n	8261e <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8260a:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   8260e:	f2c0 007a 	movt	r0, #122	; 0x7a
   82612:	f240 0110 	movw	r1, #16
   82616:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8261a:	6008      	str	r0, [r1, #0]
				break;
   8261c:	e069      	b.n	826f2 <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8261e:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   82622:	f2c0 03b7 	movt	r3, #183	; 0xb7
   82626:	f240 0210 	movw	r2, #16
   8262a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8262e:	6013      	str	r3, [r2, #0]
				break;
   82630:	e05f      	b.n	826f2 <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82632:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   82636:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8263a:	6a13      	ldr	r3, [r2, #32]
   8263c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82640:	d009      	beq.n	82656 <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82642:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   82646:	f2c0 01b7 	movt	r1, #183	; 0xb7
   8264a:	f240 0210 	movw	r2, #16
   8264e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82652:	6011      	str	r1, [r2, #0]
   82654:	e027      	b.n	826a6 <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82656:	f44f 6010 	mov.w	r0, #2304	; 0x900
   8265a:	f2c0 003d 	movt	r0, #61	; 0x3d
   8265e:	f240 0110 	movw	r1, #16
   82662:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82666:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82668:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8266c:	f2c4 020e 	movt	r2, #16398	; 0x400e
   82670:	6a13      	ldr	r3, [r2, #32]
   82672:	f003 0070 	and.w	r0, r3, #112	; 0x70
   82676:	2810      	cmp	r0, #16
   82678:	d002      	beq.n	82680 <SystemCoreClockUpdate+0x104>
   8267a:	2820      	cmp	r0, #32
   8267c:	d113      	bne.n	826a6 <SystemCoreClockUpdate+0x12a>
   8267e:	e009      	b.n	82694 <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82680:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   82684:	f2c0 037a 	movt	r3, #122	; 0x7a
   82688:	f240 0010 	movw	r0, #16
   8268c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82690:	6003      	str	r3, [r0, #0]
				break;
   82692:	e008      	b.n	826a6 <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82694:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   82698:	f2c0 01b7 	movt	r1, #183	; 0xb7
   8269c:	f240 0210 	movw	r2, #16
   826a0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   826a4:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   826a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   826aa:	f2c4 030e 	movt	r3, #16398	; 0x400e
   826ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
   826b0:	f000 0103 	and.w	r1, r0, #3
   826b4:	2902      	cmp	r1, #2
   826b6:	d113      	bne.n	826e0 <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   826b8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   826bc:	f2c4 010e 	movt	r1, #16398	; 0x400e
   826c0:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   826c2:	6a89      	ldr	r1, [r1, #40]	; 0x28
   826c4:	f240 0310 	movw	r3, #16
   826c8:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   826cc:	f3c0 400a 	ubfx	r0, r0, #16, #11
   826d0:	681a      	ldr	r2, [r3, #0]
   826d2:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   826d6:	b2c9      	uxtb	r1, r1
   826d8:	fbb0 f2f1 	udiv	r2, r0, r1
   826dc:	601a      	str	r2, [r3, #0]
   826de:	e008      	b.n	826f2 <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   826e0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   826e4:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   826e8:	f240 0210 	movw	r2, #16
   826ec:	f2c2 0207 	movt	r2, #8199	; 0x2007
   826f0:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   826f2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   826f6:	f2c4 020e 	movt	r2, #16398	; 0x400e
   826fa:	6b10      	ldr	r0, [r2, #48]	; 0x30
   826fc:	f000 0170 	and.w	r1, r0, #112	; 0x70
   82700:	2970      	cmp	r1, #112	; 0x70
   82702:	d10e      	bne.n	82722 <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   82704:	f240 0310 	movw	r3, #16
   82708:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8270c:	6818      	ldr	r0, [r3, #0]
   8270e:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   82712:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   82716:	fba2 0100 	umull	r0, r1, r2, r0
   8271a:	ea4f 0051 	mov.w	r0, r1, lsr #1
   8271e:	6018      	str	r0, [r3, #0]
   82720:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82722:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   82726:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8272a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8272c:	f240 0010 	movw	r0, #16
   82730:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82734:	f3c2 1102 	ubfx	r1, r2, #4, #3
   82738:	6803      	ldr	r3, [r0, #0]
   8273a:	fa23 f301 	lsr.w	r3, r3, r1
   8273e:	6003      	str	r3, [r0, #0]
   82740:	4770      	bx	lr
   82742:	bf00      	nop

00082744 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   82744:	f64e 23bf 	movw	r3, #60095	; 0xeabf
   82748:	f2c0 1321 	movt	r3, #289	; 0x121
   8274c:	4298      	cmp	r0, r3
   8274e:	d80c      	bhi.n	8276a <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   82750:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   82754:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82758:	f04f 0000 	mov.w	r0, #0
   8275c:	6018      	str	r0, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   8275e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   82762:	f2c4 010e 	movt	r1, #16398	; 0x400e
   82766:	6008      	str	r0, [r1, #0]
   82768:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   8276a:	f24f 017f 	movw	r1, #61567	; 0xf07f
   8276e:	f2c0 21fa 	movt	r1, #762	; 0x2fa
   82772:	4288      	cmp	r0, r1
   82774:	d80c      	bhi.n	82790 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   82776:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   8277a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8277e:	f44f 7180 	mov.w	r1, #256	; 0x100
   82782:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   82784:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   82788:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8278c:	6011      	str	r1, [r2, #0]
   8278e:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   82790:	f648 73ff 	movw	r3, #36863	; 0x8fff
   82794:	f2c0 33d0 	movt	r3, #976	; 0x3d0
   82798:	4298      	cmp	r0, r3
   8279a:	d80c      	bhi.n	827b6 <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   8279c:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   827a0:	f2c4 010e 	movt	r1, #16398	; 0x400e
   827a4:	f44f 7200 	mov.w	r2, #512	; 0x200
   827a8:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   827aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   827ae:	f2c4 030e 	movt	r3, #16398	; 0x400e
   827b2:	601a      	str	r2, [r3, #0]
   827b4:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   827b6:	f24b 31ff 	movw	r1, #46079	; 0xb3ff
   827ba:	f2c0 41c4 	movt	r1, #1220	; 0x4c4
   827be:	4288      	cmp	r0, r1
   827c0:	d80c      	bhi.n	827dc <system_init_flash+0x98>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   827c2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   827c6:	f2c4 030e 	movt	r3, #16398	; 0x400e
   827ca:	f44f 7240 	mov.w	r2, #768	; 0x300
   827ce:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   827d0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   827d4:	f2c4 000e 	movt	r0, #16398	; 0x400e
   827d8:	6002      	str	r2, [r0, #0]
   827da:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   827dc:	f644 237f 	movw	r3, #19071	; 0x4a7f
   827e0:	f2c0 535d 	movt	r3, #1373	; 0x55d
   827e4:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   827e6:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   827ea:	f2c4 000e 	movt	r0, #16398	; 0x400e
   827ee:	bf94      	ite	ls
   827f0:	f44f 6280 	movls.w	r2, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   827f4:	f44f 62a0 	movhi.w	r2, #1280	; 0x500
   827f8:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   827fa:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   827fe:	f2c4 010e 	movt	r1, #16398	; 0x400e
   82802:	600a      	str	r2, [r1, #0]
   82804:	4770      	bx	lr
   82806:	bf00      	nop

00082808 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82808:	f640 13ec 	movw	r3, #2540	; 0x9ec
   8280c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82810:	6819      	ldr	r1, [r3, #0]
   82812:	b941      	cbnz	r1, 82826 <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
   82814:	f640 13ec 	movw	r3, #2540	; 0x9ec
   82818:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8281c:	f642 22b0 	movw	r2, #10928	; 0x2ab0
   82820:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82824:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   82826:	f640 11ec 	movw	r1, #2540	; 0x9ec
   8282a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8282e:	680b      	ldr	r3, [r1, #0]

	if (((int)prev_heap + incr) > ramend) {
   82830:	1818      	adds	r0, r3, r0
   82832:	f647 72fc 	movw	r2, #32764	; 0x7ffc
   82836:	f2c2 0208 	movt	r2, #8200	; 0x2008
   8283a:	4282      	cmp	r2, r0
   8283c:	db06      	blt.n	8284c <_sbrk+0x44>
		return (caddr_t) -1;	
	}

	heap += incr;
   8283e:	4601      	mov	r1, r0
   82840:	f640 10ec 	movw	r0, #2540	; 0x9ec
   82844:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82848:	6001      	str	r1, [r0, #0]

	return (caddr_t) prev_heap;
   8284a:	e001      	b.n	82850 <_sbrk+0x48>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   8284c:	f04f 33ff 	mov.w	r3, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   82850:	4618      	mov	r0, r3
   82852:	4770      	bx	lr

00082854 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82854:	f04f 30ff 	mov.w	r0, #4294967295
   82858:	4770      	bx	lr
   8285a:	bf00      	nop

0008285c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8285c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82860:	604b      	str	r3, [r1, #4]

	return 0;
}
   82862:	f04f 0000 	mov.w	r0, #0
   82866:	4770      	bx	lr

00082868 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82868:	f04f 0001 	mov.w	r0, #1
   8286c:	4770      	bx	lr
   8286e:	bf00      	nop

00082870 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82870:	f04f 0000 	mov.w	r0, #0
   82874:	4770      	bx	lr
   82876:	bf00      	nop

00082878 <__register_exitproc>:
   82878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8287c:	4698      	mov	r8, r3
   8287e:	4b23      	ldr	r3, [pc, #140]	; (8290c <__register_exitproc+0x94>)
   82880:	4606      	mov	r6, r0
   82882:	681c      	ldr	r4, [r3, #0]
   82884:	460f      	mov	r7, r1
   82886:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   8288a:	4691      	mov	r9, r2
   8288c:	b918      	cbnz	r0, 82896 <__register_exitproc+0x1e>
   8288e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   82892:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   82896:	6841      	ldr	r1, [r0, #4]
   82898:	291f      	cmp	r1, #31
   8289a:	dd16      	ble.n	828ca <__register_exitproc+0x52>
   8289c:	481c      	ldr	r0, [pc, #112]	; (82910 <__register_exitproc+0x98>)
   8289e:	b918      	cbnz	r0, 828a8 <__register_exitproc+0x30>
   828a0:	f04f 30ff 	mov.w	r0, #4294967295
   828a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   828a8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   828ac:	f001 fbb8 	bl	84020 <malloc>
   828b0:	2800      	cmp	r0, #0
   828b2:	d0f5      	beq.n	828a0 <__register_exitproc+0x28>
   828b4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   828b8:	2500      	movs	r5, #0
   828ba:	6045      	str	r5, [r0, #4]
   828bc:	6002      	str	r2, [r0, #0]
   828be:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   828c2:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   828c6:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   828ca:	b1b6      	cbz	r6, 828fa <__register_exitproc+0x82>
   828cc:	6844      	ldr	r4, [r0, #4]
   828ce:	2201      	movs	r2, #1
   828d0:	fa02 f204 	lsl.w	r2, r2, r4
   828d4:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   828d8:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   828dc:	4311      	orrs	r1, r2
   828de:	2e02      	cmp	r6, #2
   828e0:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   828e4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   828e8:	461c      	mov	r4, r3
   828ea:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   828ee:	d104      	bne.n	828fa <__register_exitproc+0x82>
   828f0:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   828f4:	431a      	orrs	r2, r3
   828f6:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   828fa:	6841      	ldr	r1, [r0, #4]
   828fc:	1c8b      	adds	r3, r1, #2
   828fe:	1c4a      	adds	r2, r1, #1
   82900:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   82904:	6042      	str	r2, [r0, #4]
   82906:	2000      	movs	r0, #0
   82908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8290c:	00085190 	.word	0x00085190
   82910:	00084021 	.word	0x00084021

00082914 <__libc_fini_array>:
   82914:	b570      	push	{r4, r5, r6, lr}
   82916:	4b08      	ldr	r3, [pc, #32]	; (82938 <__libc_fini_array+0x24>)
   82918:	4c08      	ldr	r4, [pc, #32]	; (8293c <__libc_fini_array+0x28>)
   8291a:	2500      	movs	r5, #0
   8291c:	1ae0      	subs	r0, r4, r3
   8291e:	1084      	asrs	r4, r0, #2
   82920:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   82924:	3d04      	subs	r5, #4
   82926:	b11c      	cbz	r4, 82930 <__libc_fini_array+0x1c>
   82928:	5972      	ldr	r2, [r6, r5]
   8292a:	4790      	blx	r2
   8292c:	3c01      	subs	r4, #1
   8292e:	e7f9      	b.n	82924 <__libc_fini_array+0x10>
   82930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   82934:	f002 bc5e 	b.w	851f4 <_fini>
   82938:	00085200 	.word	0x00085200
   8293c:	00085204 	.word	0x00085204

00082940 <__libc_init_array>:
   82940:	b538      	push	{r3, r4, r5, lr}
   82942:	4d0e      	ldr	r5, [pc, #56]	; (8297c <__libc_init_array+0x3c>)
   82944:	4b0e      	ldr	r3, [pc, #56]	; (82980 <__libc_init_array+0x40>)
   82946:	2400      	movs	r4, #0
   82948:	1ae8      	subs	r0, r5, r3
   8294a:	1085      	asrs	r5, r0, #2
   8294c:	42ac      	cmp	r4, r5
   8294e:	d005      	beq.n	8295c <__libc_init_array+0x1c>
   82950:	490b      	ldr	r1, [pc, #44]	; (82980 <__libc_init_array+0x40>)
   82952:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   82956:	4790      	blx	r2
   82958:	3401      	adds	r4, #1
   8295a:	e7f7      	b.n	8294c <__libc_init_array+0xc>
   8295c:	f002 fc40 	bl	851e0 <_init>
   82960:	4908      	ldr	r1, [pc, #32]	; (82984 <__libc_init_array+0x44>)
   82962:	4a09      	ldr	r2, [pc, #36]	; (82988 <__libc_init_array+0x48>)
   82964:	1a54      	subs	r4, r2, r1
   82966:	10a5      	asrs	r5, r4, #2
   82968:	2400      	movs	r4, #0
   8296a:	42ac      	cmp	r4, r5
   8296c:	d005      	beq.n	8297a <__libc_init_array+0x3a>
   8296e:	4b05      	ldr	r3, [pc, #20]	; (82984 <__libc_init_array+0x44>)
   82970:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   82974:	4780      	blx	r0
   82976:	3401      	adds	r4, #1
   82978:	e7f7      	b.n	8296a <__libc_init_array+0x2a>
   8297a:	bd38      	pop	{r3, r4, r5, pc}
   8297c:	000851ec 	.word	0x000851ec
   82980:	000851ec 	.word	0x000851ec
   82984:	000851ec 	.word	0x000851ec
   82988:	000851f4 	.word	0x000851f4

0008298c <iprintf>:
   8298c:	b40f      	push	{r0, r1, r2, r3}
   8298e:	b507      	push	{r0, r1, r2, lr}
   82990:	4906      	ldr	r1, [pc, #24]	; (829ac <iprintf+0x20>)
   82992:	ab04      	add	r3, sp, #16
   82994:	6808      	ldr	r0, [r1, #0]
   82996:	f853 2b04 	ldr.w	r2, [r3], #4
   8299a:	6881      	ldr	r1, [r0, #8]
   8299c:	9301      	str	r3, [sp, #4]
   8299e:	f000 f8ef 	bl	82b80 <_vfiprintf_r>
   829a2:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
   829a6:	b004      	add	sp, #16
   829a8:	4770      	bx	lr
   829aa:	bf00      	nop
   829ac:	20070018 	.word	0x20070018

000829b0 <_iprintf_r>:
   829b0:	b40e      	push	{r1, r2, r3}
   829b2:	b503      	push	{r0, r1, lr}
   829b4:	ab03      	add	r3, sp, #12
   829b6:	f853 2b04 	ldr.w	r2, [r3], #4
   829ba:	6881      	ldr	r1, [r0, #8]
   829bc:	9301      	str	r3, [sp, #4]
   829be:	f000 f8df 	bl	82b80 <_vfiprintf_r>
   829c2:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
   829c6:	b003      	add	sp, #12
   829c8:	4770      	bx	lr
   829ca:	bf00      	nop

000829cc <memcpy>:
   829cc:	b510      	push	{r4, lr}
   829ce:	2300      	movs	r3, #0
   829d0:	4293      	cmp	r3, r2
   829d2:	d003      	beq.n	829dc <memcpy+0x10>
   829d4:	5ccc      	ldrb	r4, [r1, r3]
   829d6:	54c4      	strb	r4, [r0, r3]
   829d8:	3301      	adds	r3, #1
   829da:	e7f9      	b.n	829d0 <memcpy+0x4>
   829dc:	bd10      	pop	{r4, pc}

000829de <memset>:
   829de:	1882      	adds	r2, r0, r2
   829e0:	4603      	mov	r3, r0
   829e2:	4293      	cmp	r3, r2
   829e4:	d002      	beq.n	829ec <memset+0xe>
   829e6:	f803 1b01 	strb.w	r1, [r3], #1
   829ea:	e7fa      	b.n	829e2 <memset+0x4>
   829ec:	4770      	bx	lr

000829ee <setbuf>:
   829ee:	2900      	cmp	r1, #0
   829f0:	bf0c      	ite	eq
   829f2:	2202      	moveq	r2, #2
   829f4:	2200      	movne	r2, #0
   829f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   829fa:	f000 b80f 	b.w	82a1c <setvbuf>
	...

00082a00 <setjmp>:
   82a00:	46ec      	mov	ip, sp
   82a02:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   82a06:	f04f 0000 	mov.w	r0, #0
   82a0a:	4770      	bx	lr

00082a0c <longjmp>:
   82a0c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   82a10:	46e5      	mov	sp, ip
   82a12:	0008      	movs	r0, r1
   82a14:	bf08      	it	eq
   82a16:	2001      	moveq	r0, #1
   82a18:	4770      	bx	lr
   82a1a:	bf00      	nop

00082a1c <setvbuf>:
   82a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82a20:	461d      	mov	r5, r3
   82a22:	4b37      	ldr	r3, [pc, #220]	; (82b00 <setvbuf+0xe4>)
   82a24:	4604      	mov	r4, r0
   82a26:	6818      	ldr	r0, [r3, #0]
   82a28:	460e      	mov	r6, r1
   82a2a:	4617      	mov	r7, r2
   82a2c:	4698      	mov	r8, r3
   82a2e:	b118      	cbz	r0, 82a38 <setvbuf+0x1c>
   82a30:	6b82      	ldr	r2, [r0, #56]	; 0x38
   82a32:	b90a      	cbnz	r2, 82a38 <setvbuf+0x1c>
   82a34:	f000 feb2 	bl	8379c <__sinit>
   82a38:	2f02      	cmp	r7, #2
   82a3a:	d85d      	bhi.n	82af8 <setvbuf+0xdc>
   82a3c:	2d00      	cmp	r5, #0
   82a3e:	db5b      	blt.n	82af8 <setvbuf+0xdc>
   82a40:	4621      	mov	r1, r4
   82a42:	f8d8 0000 	ldr.w	r0, [r8]
   82a46:	f000 fdb7 	bl	835b8 <_fflush_r>
   82a4a:	89a1      	ldrh	r1, [r4, #12]
   82a4c:	2000      	movs	r0, #0
   82a4e:	f001 0380 	and.w	r3, r1, #128	; 0x80
   82a52:	b21a      	sxth	r2, r3
   82a54:	6060      	str	r0, [r4, #4]
   82a56:	61a0      	str	r0, [r4, #24]
   82a58:	b122      	cbz	r2, 82a64 <setvbuf+0x48>
   82a5a:	4829      	ldr	r0, [pc, #164]	; (82b00 <setvbuf+0xe4>)
   82a5c:	6921      	ldr	r1, [r4, #16]
   82a5e:	6800      	ldr	r0, [r0, #0]
   82a60:	f000 ffda 	bl	83a18 <_free_r>
   82a64:	89a1      	ldrh	r1, [r4, #12]
   82a66:	2f02      	cmp	r7, #2
   82a68:	f021 0383 	bic.w	r3, r1, #131	; 0x83
   82a6c:	81a3      	strh	r3, [r4, #12]
   82a6e:	d012      	beq.n	82a96 <setvbuf+0x7a>
   82a70:	bb36      	cbnz	r6, 82ac0 <setvbuf+0xa4>
   82a72:	2d00      	cmp	r5, #0
   82a74:	bf08      	it	eq
   82a76:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   82a7a:	4628      	mov	r0, r5
   82a7c:	f001 fad0 	bl	84020 <malloc>
   82a80:	4606      	mov	r6, r0
   82a82:	b9c8      	cbnz	r0, 82ab8 <setvbuf+0x9c>
   82a84:	f44f 6080 	mov.w	r0, #1024	; 0x400
   82a88:	f001 faca 	bl	84020 <malloc>
   82a8c:	4606      	mov	r6, r0
   82a8e:	b988      	cbnz	r0, 82ab4 <setvbuf+0x98>
   82a90:	f04f 30ff 	mov.w	r0, #4294967295
   82a94:	e000      	b.n	82a98 <setvbuf+0x7c>
   82a96:	2000      	movs	r0, #0
   82a98:	89a1      	ldrh	r1, [r4, #12]
   82a9a:	2200      	movs	r2, #0
   82a9c:	f041 0302 	orr.w	r3, r1, #2
   82aa0:	81a3      	strh	r3, [r4, #12]
   82aa2:	f104 0143 	add.w	r1, r4, #67	; 0x43
   82aa6:	2301      	movs	r3, #1
   82aa8:	60a2      	str	r2, [r4, #8]
   82aaa:	6021      	str	r1, [r4, #0]
   82aac:	6121      	str	r1, [r4, #16]
   82aae:	6163      	str	r3, [r4, #20]
   82ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82ab4:	f44f 6580 	mov.w	r5, #1024	; 0x400
   82ab8:	89a2      	ldrh	r2, [r4, #12]
   82aba:	f042 0080 	orr.w	r0, r2, #128	; 0x80
   82abe:	81a0      	strh	r0, [r4, #12]
   82ac0:	2f01      	cmp	r7, #1
   82ac2:	d105      	bne.n	82ad0 <setvbuf+0xb4>
   82ac4:	89a1      	ldrh	r1, [r4, #12]
   82ac6:	426a      	negs	r2, r5
   82ac8:	f041 0301 	orr.w	r3, r1, #1
   82acc:	81a3      	strh	r3, [r4, #12]
   82ace:	61a2      	str	r2, [r4, #24]
   82ad0:	480b      	ldr	r0, [pc, #44]	; (82b00 <setvbuf+0xe4>)
   82ad2:	89a2      	ldrh	r2, [r4, #12]
   82ad4:	6801      	ldr	r1, [r0, #0]
   82ad6:	4b0b      	ldr	r3, [pc, #44]	; (82b04 <setvbuf+0xe8>)
   82ad8:	f002 0008 	and.w	r0, r2, #8
   82adc:	b200      	sxth	r0, r0
   82ade:	63cb      	str	r3, [r1, #60]	; 0x3c
   82ae0:	6026      	str	r6, [r4, #0]
   82ae2:	6126      	str	r6, [r4, #16]
   82ae4:	6165      	str	r5, [r4, #20]
   82ae6:	b148      	cbz	r0, 82afc <setvbuf+0xe0>
   82ae8:	f012 0f03 	tst.w	r2, #3
   82aec:	bf18      	it	ne
   82aee:	2500      	movne	r5, #0
   82af0:	60a5      	str	r5, [r4, #8]
   82af2:	2000      	movs	r0, #0
   82af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82af8:	f04f 30ff 	mov.w	r0, #4294967295
   82afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b00:	20070018 	.word	0x20070018
   82b04:	00083711 	.word	0x00083711

00082b08 <strlen>:
   82b08:	4603      	mov	r3, r0
   82b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
   82b0e:	2a00      	cmp	r2, #0
   82b10:	d1fb      	bne.n	82b0a <strlen+0x2>
   82b12:	1a18      	subs	r0, r3, r0
   82b14:	3801      	subs	r0, #1
   82b16:	4770      	bx	lr

00082b18 <__sprint_r>:
   82b18:	6893      	ldr	r3, [r2, #8]
   82b1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82b1e:	4681      	mov	r9, r0
   82b20:	460f      	mov	r7, r1
   82b22:	4614      	mov	r4, r2
   82b24:	b91b      	cbnz	r3, 82b2e <__sprint_r+0x16>
   82b26:	6053      	str	r3, [r2, #4]
   82b28:	4618      	mov	r0, r3
   82b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82b2e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   82b30:	049b      	lsls	r3, r3, #18
   82b32:	d51e      	bpl.n	82b72 <__sprint_r+0x5a>
   82b34:	6815      	ldr	r5, [r2, #0]
   82b36:	68a0      	ldr	r0, [r4, #8]
   82b38:	3508      	adds	r5, #8
   82b3a:	b1c8      	cbz	r0, 82b70 <__sprint_r+0x58>
   82b3c:	f855 1c04 	ldr.w	r1, [r5, #-4]
   82b40:	f855 ac08 	ldr.w	sl, [r5, #-8]
   82b44:	ea4f 0891 	mov.w	r8, r1, lsr #2
   82b48:	2600      	movs	r6, #0
   82b4a:	4546      	cmp	r6, r8
   82b4c:	da09      	bge.n	82b62 <__sprint_r+0x4a>
   82b4e:	4648      	mov	r0, r9
   82b50:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
   82b54:	463a      	mov	r2, r7
   82b56:	f000 fe9d 	bl	83894 <_fputwc_r>
   82b5a:	1c43      	adds	r3, r0, #1
   82b5c:	d00b      	beq.n	82b76 <__sprint_r+0x5e>
   82b5e:	3601      	adds	r6, #1
   82b60:	e7f3      	b.n	82b4a <__sprint_r+0x32>
   82b62:	68a2      	ldr	r2, [r4, #8]
   82b64:	ea4f 0888 	mov.w	r8, r8, lsl #2
   82b68:	ebc8 0302 	rsb	r3, r8, r2
   82b6c:	60a3      	str	r3, [r4, #8]
   82b6e:	e7e2      	b.n	82b36 <__sprint_r+0x1e>
   82b70:	e001      	b.n	82b76 <__sprint_r+0x5e>
   82b72:	f001 f807 	bl	83b84 <__sfvwrite_r>
   82b76:	2100      	movs	r1, #0
   82b78:	60a1      	str	r1, [r4, #8]
   82b7a:	6061      	str	r1, [r4, #4]
   82b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00082b80 <_vfiprintf_r>:
   82b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82b84:	4689      	mov	r9, r1
   82b86:	b0a9      	sub	sp, #164	; 0xa4
   82b88:	4614      	mov	r4, r2
   82b8a:	461d      	mov	r5, r3
   82b8c:	461e      	mov	r6, r3
   82b8e:	4682      	mov	sl, r0
   82b90:	b118      	cbz	r0, 82b9a <_vfiprintf_r+0x1a>
   82b92:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82b94:	b90b      	cbnz	r3, 82b9a <_vfiprintf_r+0x1a>
   82b96:	f000 fe01 	bl	8379c <__sinit>
   82b9a:	f8b9 000c 	ldrh.w	r0, [r9, #12]
   82b9e:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
   82ba2:	b211      	sxth	r1, r2
   82ba4:	b949      	cbnz	r1, 82bba <_vfiprintf_r+0x3a>
   82ba6:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
   82baa:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
   82bae:	f8a9 300c 	strh.w	r3, [r9, #12]
   82bb2:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   82bb6:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
   82bba:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   82bbe:	f001 0308 	and.w	r3, r1, #8
   82bc2:	b218      	sxth	r0, r3
   82bc4:	b148      	cbz	r0, 82bda <_vfiprintf_r+0x5a>
   82bc6:	f8d9 2010 	ldr.w	r2, [r9, #16]
   82bca:	b132      	cbz	r2, 82bda <_vfiprintf_r+0x5a>
   82bcc:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   82bd0:	f001 031a 	and.w	r3, r1, #26
   82bd4:	2b0a      	cmp	r3, #10
   82bd6:	d116      	bne.n	82c06 <_vfiprintf_r+0x86>
   82bd8:	e009      	b.n	82bee <_vfiprintf_r+0x6e>
   82bda:	4650      	mov	r0, sl
   82bdc:	4649      	mov	r1, r9
   82bde:	f000 fc7f 	bl	834e0 <__swsetup_r>
   82be2:	2800      	cmp	r0, #0
   82be4:	d0f2      	beq.n	82bcc <_vfiprintf_r+0x4c>
   82be6:	f04f 32ff 	mov.w	r2, #4294967295
   82bea:	9203      	str	r2, [sp, #12]
   82bec:	e3d3      	b.n	83396 <_vfiprintf_r+0x816>
   82bee:	f9b9 000e 	ldrsh.w	r0, [r9, #14]
   82bf2:	2800      	cmp	r0, #0
   82bf4:	db07      	blt.n	82c06 <_vfiprintf_r+0x86>
   82bf6:	4650      	mov	r0, sl
   82bf8:	4649      	mov	r1, r9
   82bfa:	4622      	mov	r2, r4
   82bfc:	462b      	mov	r3, r5
   82bfe:	f000 fbce 	bl	8339e <__sbprintf>
   82c02:	9003      	str	r0, [sp, #12]
   82c04:	e3c7      	b.n	83396 <_vfiprintf_r+0x816>
   82c06:	2200      	movs	r2, #0
   82c08:	ad18      	add	r5, sp, #96	; 0x60
   82c0a:	950b      	str	r5, [sp, #44]	; 0x2c
   82c0c:	920d      	str	r2, [sp, #52]	; 0x34
   82c0e:	920c      	str	r2, [sp, #48]	; 0x30
   82c10:	9401      	str	r4, [sp, #4]
   82c12:	9205      	str	r2, [sp, #20]
   82c14:	9203      	str	r2, [sp, #12]
   82c16:	46a8      	mov	r8, r5
   82c18:	9901      	ldr	r1, [sp, #4]
   82c1a:	460c      	mov	r4, r1
   82c1c:	f811 3b01 	ldrb.w	r3, [r1], #1
   82c20:	b10b      	cbz	r3, 82c26 <_vfiprintf_r+0xa6>
   82c22:	2b25      	cmp	r3, #37	; 0x25
   82c24:	d1f9      	bne.n	82c1a <_vfiprintf_r+0x9a>
   82c26:	9a01      	ldr	r2, [sp, #4]
   82c28:	1aa5      	subs	r5, r4, r2
   82c2a:	d019      	beq.n	82c60 <_vfiprintf_r+0xe0>
   82c2c:	990c      	ldr	r1, [sp, #48]	; 0x30
   82c2e:	980d      	ldr	r0, [sp, #52]	; 0x34
   82c30:	1c4b      	adds	r3, r1, #1
   82c32:	e888 0024 	stmia.w	r8, {r2, r5}
   82c36:	2b07      	cmp	r3, #7
   82c38:	eb00 0205 	add.w	r2, r0, r5
   82c3c:	920d      	str	r2, [sp, #52]	; 0x34
   82c3e:	f108 0808 	add.w	r8, r8, #8
   82c42:	930c      	str	r3, [sp, #48]	; 0x30
   82c44:	dd09      	ble.n	82c5a <_vfiprintf_r+0xda>
   82c46:	4650      	mov	r0, sl
   82c48:	4649      	mov	r1, r9
   82c4a:	aa0b      	add	r2, sp, #44	; 0x2c
   82c4c:	f7ff ff64 	bl	82b18 <__sprint_r>
   82c50:	2800      	cmp	r0, #0
   82c52:	f040 8398 	bne.w	83386 <_vfiprintf_r+0x806>
   82c56:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   82c5a:	9803      	ldr	r0, [sp, #12]
   82c5c:	1942      	adds	r2, r0, r5
   82c5e:	9203      	str	r2, [sp, #12]
   82c60:	7821      	ldrb	r1, [r4, #0]
   82c62:	2900      	cmp	r1, #0
   82c64:	f000 8388 	beq.w	83378 <_vfiprintf_r+0x7f8>
   82c68:	2200      	movs	r2, #0
   82c6a:	3401      	adds	r4, #1
   82c6c:	9401      	str	r4, [sp, #4]
   82c6e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   82c72:	f04f 3cff 	mov.w	ip, #4294967295
   82c76:	9204      	str	r2, [sp, #16]
   82c78:	4617      	mov	r7, r2
   82c7a:	9801      	ldr	r0, [sp, #4]
   82c7c:	f810 3b01 	ldrb.w	r3, [r0], #1
   82c80:	9001      	str	r0, [sp, #4]
   82c82:	2b63      	cmp	r3, #99	; 0x63
   82c84:	f000 80b3 	beq.w	82dee <_vfiprintf_r+0x26e>
   82c88:	dc33      	bgt.n	82cf2 <_vfiprintf_r+0x172>
   82c8a:	2b39      	cmp	r3, #57	; 0x39
   82c8c:	dc1a      	bgt.n	82cc4 <_vfiprintf_r+0x144>
   82c8e:	2b31      	cmp	r3, #49	; 0x31
   82c90:	f280 8091 	bge.w	82db6 <_vfiprintf_r+0x236>
   82c94:	2b2b      	cmp	r3, #43	; 0x2b
   82c96:	d101      	bne.n	82c9c <_vfiprintf_r+0x11c>
   82c98:	461a      	mov	r2, r3
   82c9a:	e7ee      	b.n	82c7a <_vfiprintf_r+0xfa>
   82c9c:	dc0a      	bgt.n	82cb4 <_vfiprintf_r+0x134>
   82c9e:	2b23      	cmp	r3, #35	; 0x23
   82ca0:	d055      	beq.n	82d4e <_vfiprintf_r+0x1ce>
   82ca2:	2b2a      	cmp	r3, #42	; 0x2a
   82ca4:	d056      	beq.n	82d54 <_vfiprintf_r+0x1d4>
   82ca6:	2b20      	cmp	r3, #32
   82ca8:	f040 81f5 	bne.w	83096 <_vfiprintf_r+0x516>
   82cac:	2a00      	cmp	r2, #0
   82cae:	bf08      	it	eq
   82cb0:	2220      	moveq	r2, #32
   82cb2:	e7e2      	b.n	82c7a <_vfiprintf_r+0xfa>
   82cb4:	2b2e      	cmp	r3, #46	; 0x2e
   82cb6:	d058      	beq.n	82d6a <_vfiprintf_r+0x1ea>
   82cb8:	2b30      	cmp	r3, #48	; 0x30
   82cba:	d079      	beq.n	82db0 <_vfiprintf_r+0x230>
   82cbc:	2b2d      	cmp	r3, #45	; 0x2d
   82cbe:	f040 81ea 	bne.w	83096 <_vfiprintf_r+0x516>
   82cc2:	e04f      	b.n	82d64 <_vfiprintf_r+0x1e4>
   82cc4:	2b4f      	cmp	r3, #79	; 0x4f
   82cc6:	f000 80de 	beq.w	82e86 <_vfiprintf_r+0x306>
   82cca:	dc07      	bgt.n	82cdc <_vfiprintf_r+0x15c>
   82ccc:	2b44      	cmp	r3, #68	; 0x44
   82cce:	f040 81e2 	bne.w	83096 <_vfiprintf_r+0x516>
   82cd2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   82cd6:	f047 0710 	orr.w	r7, r7, #16
   82cda:	e090      	b.n	82dfe <_vfiprintf_r+0x27e>
   82cdc:	2b55      	cmp	r3, #85	; 0x55
   82cde:	f000 811f 	beq.w	82f20 <_vfiprintf_r+0x3a0>
   82ce2:	2b58      	cmp	r3, #88	; 0x58
   82ce4:	f040 81d7 	bne.w	83096 <_vfiprintf_r+0x516>
   82ce8:	4dae      	ldr	r5, [pc, #696]	; (82fa4 <_vfiprintf_r+0x424>)
   82cea:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   82cee:	9505      	str	r5, [sp, #20]
   82cf0:	e130      	b.n	82f54 <_vfiprintf_r+0x3d4>
   82cf2:	2b6f      	cmp	r3, #111	; 0x6f
   82cf4:	f000 80c9 	beq.w	82e8a <_vfiprintf_r+0x30a>
   82cf8:	dc10      	bgt.n	82d1c <_vfiprintf_r+0x19c>
   82cfa:	2b69      	cmp	r3, #105	; 0x69
   82cfc:	d024      	beq.n	82d48 <_vfiprintf_r+0x1c8>
   82cfe:	dc07      	bgt.n	82d10 <_vfiprintf_r+0x190>
   82d00:	2b64      	cmp	r3, #100	; 0x64
   82d02:	d021      	beq.n	82d48 <_vfiprintf_r+0x1c8>
   82d04:	2b68      	cmp	r3, #104	; 0x68
   82d06:	f040 81c6 	bne.w	83096 <_vfiprintf_r+0x516>
   82d0a:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   82d0e:	e7b4      	b.n	82c7a <_vfiprintf_r+0xfa>
   82d10:	2b6c      	cmp	r3, #108	; 0x6c
   82d12:	d05f      	beq.n	82dd4 <_vfiprintf_r+0x254>
   82d14:	2b6e      	cmp	r3, #110	; 0x6e
   82d16:	f040 81be 	bne.w	83096 <_vfiprintf_r+0x516>
   82d1a:	e096      	b.n	82e4a <_vfiprintf_r+0x2ca>
   82d1c:	2b73      	cmp	r3, #115	; 0x73
   82d1e:	f000 80df 	beq.w	82ee0 <_vfiprintf_r+0x360>
   82d22:	dc06      	bgt.n	82d32 <_vfiprintf_r+0x1b2>
   82d24:	2b70      	cmp	r3, #112	; 0x70
   82d26:	f000 80cd 	beq.w	82ec4 <_vfiprintf_r+0x344>
   82d2a:	2b71      	cmp	r3, #113	; 0x71
   82d2c:	f040 81b3 	bne.w	83096 <_vfiprintf_r+0x516>
   82d30:	e05a      	b.n	82de8 <_vfiprintf_r+0x268>
   82d32:	2b75      	cmp	r3, #117	; 0x75
   82d34:	f000 80f6 	beq.w	82f24 <_vfiprintf_r+0x3a4>
   82d38:	2b78      	cmp	r3, #120	; 0x78
   82d3a:	f040 81ac 	bne.w	83096 <_vfiprintf_r+0x516>
   82d3e:	4d9a      	ldr	r5, [pc, #616]	; (82fa8 <_vfiprintf_r+0x428>)
   82d40:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   82d44:	9505      	str	r5, [sp, #20]
   82d46:	e105      	b.n	82f54 <_vfiprintf_r+0x3d4>
   82d48:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   82d4c:	e057      	b.n	82dfe <_vfiprintf_r+0x27e>
   82d4e:	f047 0701 	orr.w	r7, r7, #1
   82d52:	e792      	b.n	82c7a <_vfiprintf_r+0xfa>
   82d54:	1d33      	adds	r3, r6, #4
   82d56:	6836      	ldr	r6, [r6, #0]
   82d58:	2e00      	cmp	r6, #0
   82d5a:	9604      	str	r6, [sp, #16]
   82d5c:	da15      	bge.n	82d8a <_vfiprintf_r+0x20a>
   82d5e:	4270      	negs	r0, r6
   82d60:	9004      	str	r0, [sp, #16]
   82d62:	461e      	mov	r6, r3
   82d64:	f047 0704 	orr.w	r7, r7, #4
   82d68:	e787      	b.n	82c7a <_vfiprintf_r+0xfa>
   82d6a:	9901      	ldr	r1, [sp, #4]
   82d6c:	f811 3b01 	ldrb.w	r3, [r1], #1
   82d70:	2b2a      	cmp	r3, #42	; 0x2a
   82d72:	9101      	str	r1, [sp, #4]
   82d74:	d10b      	bne.n	82d8e <_vfiprintf_r+0x20e>
   82d76:	f8d6 c000 	ldr.w	ip, [r6]
   82d7a:	1d33      	adds	r3, r6, #4
   82d7c:	f1bc 0f00 	cmp.w	ip, #0
   82d80:	da03      	bge.n	82d8a <_vfiprintf_r+0x20a>
   82d82:	461e      	mov	r6, r3
   82d84:	f04f 3cff 	mov.w	ip, #4294967295
   82d88:	e777      	b.n	82c7a <_vfiprintf_r+0xfa>
   82d8a:	461e      	mov	r6, r3
   82d8c:	e775      	b.n	82c7a <_vfiprintf_r+0xfa>
   82d8e:	f04f 0c00 	mov.w	ip, #0
   82d92:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82d96:	2809      	cmp	r0, #9
   82d98:	d807      	bhi.n	82daa <_vfiprintf_r+0x22a>
   82d9a:	9901      	ldr	r1, [sp, #4]
   82d9c:	230a      	movs	r3, #10
   82d9e:	fb03 0c0c 	mla	ip, r3, ip, r0
   82da2:	f811 3b01 	ldrb.w	r3, [r1], #1
   82da6:	9101      	str	r1, [sp, #4]
   82da8:	e7f3      	b.n	82d92 <_vfiprintf_r+0x212>
   82daa:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   82dae:	e768      	b.n	82c82 <_vfiprintf_r+0x102>
   82db0:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   82db4:	e761      	b.n	82c7a <_vfiprintf_r+0xfa>
   82db6:	9801      	ldr	r0, [sp, #4]
   82db8:	2100      	movs	r1, #0
   82dba:	3b30      	subs	r3, #48	; 0x30
   82dbc:	240a      	movs	r4, #10
   82dbe:	fb04 3101 	mla	r1, r4, r1, r3
   82dc2:	f810 3b01 	ldrb.w	r3, [r0], #1
   82dc6:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   82dca:	2c09      	cmp	r4, #9
   82dcc:	9001      	str	r0, [sp, #4]
   82dce:	d9f4      	bls.n	82dba <_vfiprintf_r+0x23a>
   82dd0:	9104      	str	r1, [sp, #16]
   82dd2:	e756      	b.n	82c82 <_vfiprintf_r+0x102>
   82dd4:	9901      	ldr	r1, [sp, #4]
   82dd6:	780b      	ldrb	r3, [r1, #0]
   82dd8:	2b6c      	cmp	r3, #108	; 0x6c
   82dda:	d102      	bne.n	82de2 <_vfiprintf_r+0x262>
   82ddc:	1c48      	adds	r0, r1, #1
   82dde:	9001      	str	r0, [sp, #4]
   82de0:	e002      	b.n	82de8 <_vfiprintf_r+0x268>
   82de2:	f047 0710 	orr.w	r7, r7, #16
   82de6:	e748      	b.n	82c7a <_vfiprintf_r+0xfa>
   82de8:	f047 0720 	orr.w	r7, r7, #32
   82dec:	e745      	b.n	82c7a <_vfiprintf_r+0xfa>
   82dee:	6832      	ldr	r2, [r6, #0]
   82df0:	2500      	movs	r5, #0
   82df2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   82df6:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   82dfa:	3604      	adds	r6, #4
   82dfc:	e155      	b.n	830aa <_vfiprintf_r+0x52a>
   82dfe:	06ba      	lsls	r2, r7, #26
   82e00:	d507      	bpl.n	82e12 <_vfiprintf_r+0x292>
   82e02:	3607      	adds	r6, #7
   82e04:	f026 0507 	bic.w	r5, r6, #7
   82e08:	f105 0608 	add.w	r6, r5, #8
   82e0c:	e9d5 4500 	ldrd	r4, r5, [r5]
   82e10:	e00f      	b.n	82e32 <_vfiprintf_r+0x2b2>
   82e12:	f017 0f10 	tst.w	r7, #16
   82e16:	f106 0104 	add.w	r1, r6, #4
   82e1a:	d001      	beq.n	82e20 <_vfiprintf_r+0x2a0>
   82e1c:	6832      	ldr	r2, [r6, #0]
   82e1e:	e005      	b.n	82e2c <_vfiprintf_r+0x2ac>
   82e20:	f017 0f40 	tst.w	r7, #64	; 0x40
   82e24:	6832      	ldr	r2, [r6, #0]
   82e26:	d001      	beq.n	82e2c <_vfiprintf_r+0x2ac>
   82e28:	b214      	sxth	r4, r2
   82e2a:	e000      	b.n	82e2e <_vfiprintf_r+0x2ae>
   82e2c:	4614      	mov	r4, r2
   82e2e:	17e5      	asrs	r5, r4, #31
   82e30:	460e      	mov	r6, r1
   82e32:	2c00      	cmp	r4, #0
   82e34:	f175 0200 	sbcs.w	r2, r5, #0
   82e38:	f280 80b8 	bge.w	82fac <_vfiprintf_r+0x42c>
   82e3c:	232d      	movs	r3, #45	; 0x2d
   82e3e:	4264      	negs	r4, r4
   82e40:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   82e44:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   82e48:	e0b0      	b.n	82fac <_vfiprintf_r+0x42c>
   82e4a:	f017 0f20 	tst.w	r7, #32
   82e4e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   82e52:	f106 0204 	add.w	r2, r6, #4
   82e56:	d005      	beq.n	82e64 <_vfiprintf_r+0x2e4>
   82e58:	9c03      	ldr	r4, [sp, #12]
   82e5a:	6835      	ldr	r5, [r6, #0]
   82e5c:	17e0      	asrs	r0, r4, #31
   82e5e:	602c      	str	r4, [r5, #0]
   82e60:	6068      	str	r0, [r5, #4]
   82e62:	e004      	b.n	82e6e <_vfiprintf_r+0x2ee>
   82e64:	06fb      	lsls	r3, r7, #27
   82e66:	d504      	bpl.n	82e72 <_vfiprintf_r+0x2f2>
   82e68:	6833      	ldr	r3, [r6, #0]
   82e6a:	9903      	ldr	r1, [sp, #12]
   82e6c:	6019      	str	r1, [r3, #0]
   82e6e:	4616      	mov	r6, r2
   82e70:	e6d2      	b.n	82c18 <_vfiprintf_r+0x98>
   82e72:	6830      	ldr	r0, [r6, #0]
   82e74:	9c03      	ldr	r4, [sp, #12]
   82e76:	f017 0f40 	tst.w	r7, #64	; 0x40
   82e7a:	f106 0604 	add.w	r6, r6, #4
   82e7e:	bf14      	ite	ne
   82e80:	8004      	strhne	r4, [r0, #0]
   82e82:	6004      	streq	r4, [r0, #0]
   82e84:	e6c8      	b.n	82c18 <_vfiprintf_r+0x98>
   82e86:	f047 0710 	orr.w	r7, r7, #16
   82e8a:	f017 0020 	ands.w	r0, r7, #32
   82e8e:	d008      	beq.n	82ea2 <_vfiprintf_r+0x322>
   82e90:	1df3      	adds	r3, r6, #7
   82e92:	f023 0507 	bic.w	r5, r3, #7
   82e96:	f105 0608 	add.w	r6, r5, #8
   82e9a:	e9d5 4500 	ldrd	r4, r5, [r5]
   82e9e:	2000      	movs	r0, #0
   82ea0:	e07c      	b.n	82f9c <_vfiprintf_r+0x41c>
   82ea2:	f017 0110 	ands.w	r1, r7, #16
   82ea6:	f106 0204 	add.w	r2, r6, #4
   82eaa:	d106      	bne.n	82eba <_vfiprintf_r+0x33a>
   82eac:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   82eb0:	d003      	beq.n	82eba <_vfiprintf_r+0x33a>
   82eb2:	8834      	ldrh	r4, [r6, #0]
   82eb4:	2500      	movs	r5, #0
   82eb6:	4616      	mov	r6, r2
   82eb8:	e7f1      	b.n	82e9e <_vfiprintf_r+0x31e>
   82eba:	6836      	ldr	r6, [r6, #0]
   82ebc:	2500      	movs	r5, #0
   82ebe:	4634      	mov	r4, r6
   82ec0:	4616      	mov	r6, r2
   82ec2:	e06b      	b.n	82f9c <_vfiprintf_r+0x41c>
   82ec4:	4b38      	ldr	r3, [pc, #224]	; (82fa8 <_vfiprintf_r+0x428>)
   82ec6:	2130      	movs	r1, #48	; 0x30
   82ec8:	2278      	movs	r2, #120	; 0x78
   82eca:	6834      	ldr	r4, [r6, #0]
   82ecc:	2500      	movs	r5, #0
   82ece:	f047 0702 	orr.w	r7, r7, #2
   82ed2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   82ed6:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   82eda:	3604      	adds	r6, #4
   82edc:	9305      	str	r3, [sp, #20]
   82ede:	e05c      	b.n	82f9a <_vfiprintf_r+0x41a>
   82ee0:	4631      	mov	r1, r6
   82ee2:	2500      	movs	r5, #0
   82ee4:	f8d1 b000 	ldr.w	fp, [r1]
   82ee8:	3604      	adds	r6, #4
   82eea:	45ac      	cmp	ip, r5
   82eec:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   82ef0:	4658      	mov	r0, fp
   82ef2:	db11      	blt.n	82f18 <_vfiprintf_r+0x398>
   82ef4:	4662      	mov	r2, ip
   82ef6:	4629      	mov	r1, r5
   82ef8:	f8cd c000 	str.w	ip, [sp]
   82efc:	f001 faa2 	bl	84444 <memchr>
   82f00:	f8dd c000 	ldr.w	ip, [sp]
   82f04:	2800      	cmp	r0, #0
   82f06:	f000 80d4 	beq.w	830b2 <_vfiprintf_r+0x532>
   82f0a:	ebcb 0400 	rsb	r4, fp, r0
   82f0e:	4564      	cmp	r4, ip
   82f10:	f340 80d1 	ble.w	830b6 <_vfiprintf_r+0x536>
   82f14:	4664      	mov	r4, ip
   82f16:	e0ce      	b.n	830b6 <_vfiprintf_r+0x536>
   82f18:	f7ff fdf6 	bl	82b08 <strlen>
   82f1c:	4604      	mov	r4, r0
   82f1e:	e0ca      	b.n	830b6 <_vfiprintf_r+0x536>
   82f20:	f047 0710 	orr.w	r7, r7, #16
   82f24:	06bd      	lsls	r5, r7, #26
   82f26:	d506      	bpl.n	82f36 <_vfiprintf_r+0x3b6>
   82f28:	1df0      	adds	r0, r6, #7
   82f2a:	f020 0407 	bic.w	r4, r0, #7
   82f2e:	f104 0608 	add.w	r6, r4, #8
   82f32:	cc30      	ldmia	r4, {r4, r5}
   82f34:	e00c      	b.n	82f50 <_vfiprintf_r+0x3d0>
   82f36:	f017 0f10 	tst.w	r7, #16
   82f3a:	f106 0304 	add.w	r3, r6, #4
   82f3e:	d103      	bne.n	82f48 <_vfiprintf_r+0x3c8>
   82f40:	067c      	lsls	r4, r7, #25
   82f42:	d501      	bpl.n	82f48 <_vfiprintf_r+0x3c8>
   82f44:	8834      	ldrh	r4, [r6, #0]
   82f46:	e001      	b.n	82f4c <_vfiprintf_r+0x3cc>
   82f48:	6835      	ldr	r5, [r6, #0]
   82f4a:	462c      	mov	r4, r5
   82f4c:	2500      	movs	r5, #0
   82f4e:	461e      	mov	r6, r3
   82f50:	2001      	movs	r0, #1
   82f52:	e023      	b.n	82f9c <_vfiprintf_r+0x41c>
   82f54:	06b8      	lsls	r0, r7, #26
   82f56:	d507      	bpl.n	82f68 <_vfiprintf_r+0x3e8>
   82f58:	1df4      	adds	r4, r6, #7
   82f5a:	f024 0107 	bic.w	r1, r4, #7
   82f5e:	f101 0608 	add.w	r6, r1, #8
   82f62:	e9d1 4500 	ldrd	r4, r5, [r1]
   82f66:	e00c      	b.n	82f82 <_vfiprintf_r+0x402>
   82f68:	f017 0f10 	tst.w	r7, #16
   82f6c:	f106 0004 	add.w	r0, r6, #4
   82f70:	d103      	bne.n	82f7a <_vfiprintf_r+0x3fa>
   82f72:	0679      	lsls	r1, r7, #25
   82f74:	d501      	bpl.n	82f7a <_vfiprintf_r+0x3fa>
   82f76:	8834      	ldrh	r4, [r6, #0]
   82f78:	e001      	b.n	82f7e <_vfiprintf_r+0x3fe>
   82f7a:	6836      	ldr	r6, [r6, #0]
   82f7c:	4634      	mov	r4, r6
   82f7e:	2500      	movs	r5, #0
   82f80:	4606      	mov	r6, r0
   82f82:	07fa      	lsls	r2, r7, #31
   82f84:	d509      	bpl.n	82f9a <_vfiprintf_r+0x41a>
   82f86:	ea54 0205 	orrs.w	r2, r4, r5
   82f8a:	d006      	beq.n	82f9a <_vfiprintf_r+0x41a>
   82f8c:	2230      	movs	r2, #48	; 0x30
   82f8e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   82f92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   82f96:	f047 0702 	orr.w	r7, r7, #2
   82f9a:	2002      	movs	r0, #2
   82f9c:	2100      	movs	r1, #0
   82f9e:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   82fa2:	e004      	b.n	82fae <_vfiprintf_r+0x42e>
   82fa4:	000851b6 	.word	0x000851b6
   82fa8:	000851c7 	.word	0x000851c7
   82fac:	2001      	movs	r0, #1
   82fae:	f1bc 0f00 	cmp.w	ip, #0
   82fb2:	bfa8      	it	ge
   82fb4:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   82fb8:	ea54 0105 	orrs.w	r1, r4, r5
   82fbc:	d102      	bne.n	82fc4 <_vfiprintf_r+0x444>
   82fbe:	f1bc 0f00 	cmp.w	ip, #0
   82fc2:	d058      	beq.n	83076 <_vfiprintf_r+0x4f6>
   82fc4:	2801      	cmp	r0, #1
   82fc6:	d01d      	beq.n	83004 <_vfiprintf_r+0x484>
   82fc8:	2802      	cmp	r0, #2
   82fca:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   82fce:	d041      	beq.n	83054 <_vfiprintf_r+0x4d4>
   82fd0:	f004 0207 	and.w	r2, r4, #7
   82fd4:	08e4      	lsrs	r4, r4, #3
   82fd6:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   82fda:	08e9      	lsrs	r1, r5, #3
   82fdc:	4604      	mov	r4, r0
   82fde:	460d      	mov	r5, r1
   82fe0:	3230      	adds	r2, #48	; 0x30
   82fe2:	ea54 0105 	orrs.w	r1, r4, r5
   82fe6:	469b      	mov	fp, r3
   82fe8:	701a      	strb	r2, [r3, #0]
   82fea:	f103 33ff 	add.w	r3, r3, #4294967295
   82fee:	d1ef      	bne.n	82fd0 <_vfiprintf_r+0x450>
   82ff0:	07f8      	lsls	r0, r7, #31
   82ff2:	465d      	mov	r5, fp
   82ff4:	d54a      	bpl.n	8308c <_vfiprintf_r+0x50c>
   82ff6:	2a30      	cmp	r2, #48	; 0x30
   82ff8:	d048      	beq.n	8308c <_vfiprintf_r+0x50c>
   82ffa:	2230      	movs	r2, #48	; 0x30
   82ffc:	469b      	mov	fp, r3
   82ffe:	f805 2c01 	strb.w	r2, [r5, #-1]
   83002:	e043      	b.n	8308c <_vfiprintf_r+0x50c>
   83004:	2d00      	cmp	r5, #0
   83006:	bf08      	it	eq
   83008:	2c0a      	cmpeq	r4, #10
   8300a:	d203      	bcs.n	83014 <_vfiprintf_r+0x494>
   8300c:	3430      	adds	r4, #48	; 0x30
   8300e:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   83012:	e036      	b.n	83082 <_vfiprintf_r+0x502>
   83014:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   83018:	9302      	str	r3, [sp, #8]
   8301a:	4620      	mov	r0, r4
   8301c:	4629      	mov	r1, r5
   8301e:	220a      	movs	r2, #10
   83020:	2300      	movs	r3, #0
   83022:	f8cd c000 	str.w	ip, [sp]
   83026:	f001 fd0f 	bl	84a48 <__aeabi_uldivmod>
   8302a:	9802      	ldr	r0, [sp, #8]
   8302c:	3230      	adds	r2, #48	; 0x30
   8302e:	f800 2901 	strb.w	r2, [r0], #-1
   83032:	4629      	mov	r1, r5
   83034:	220a      	movs	r2, #10
   83036:	2300      	movs	r3, #0
   83038:	f8dd b008 	ldr.w	fp, [sp, #8]
   8303c:	9002      	str	r0, [sp, #8]
   8303e:	4620      	mov	r0, r4
   83040:	f001 fd02 	bl	84a48 <__aeabi_uldivmod>
   83044:	4604      	mov	r4, r0
   83046:	460d      	mov	r5, r1
   83048:	ea54 0105 	orrs.w	r1, r4, r5
   8304c:	f8dd c000 	ldr.w	ip, [sp]
   83050:	d1e3      	bne.n	8301a <_vfiprintf_r+0x49a>
   83052:	e01b      	b.n	8308c <_vfiprintf_r+0x50c>
   83054:	9905      	ldr	r1, [sp, #20]
   83056:	f004 000f 	and.w	r0, r4, #15
   8305a:	0924      	lsrs	r4, r4, #4
   8305c:	5c0a      	ldrb	r2, [r1, r0]
   8305e:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   83062:	0929      	lsrs	r1, r5, #4
   83064:	4604      	mov	r4, r0
   83066:	460d      	mov	r5, r1
   83068:	469b      	mov	fp, r3
   8306a:	f803 2901 	strb.w	r2, [r3], #-1
   8306e:	ea54 0205 	orrs.w	r2, r4, r5
   83072:	d1ef      	bne.n	83054 <_vfiprintf_r+0x4d4>
   83074:	e00a      	b.n	8308c <_vfiprintf_r+0x50c>
   83076:	b938      	cbnz	r0, 83088 <_vfiprintf_r+0x508>
   83078:	07f9      	lsls	r1, r7, #31
   8307a:	d505      	bpl.n	83088 <_vfiprintf_r+0x508>
   8307c:	2030      	movs	r0, #48	; 0x30
   8307e:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   83082:	f10d 0b5f 	add.w	fp, sp, #95	; 0x5f
   83086:	e001      	b.n	8308c <_vfiprintf_r+0x50c>
   83088:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
   8308c:	ad18      	add	r5, sp, #96	; 0x60
   8308e:	ebcb 0405 	rsb	r4, fp, r5
   83092:	4665      	mov	r5, ip
   83094:	e00f      	b.n	830b6 <_vfiprintf_r+0x536>
   83096:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8309a:	2b00      	cmp	r3, #0
   8309c:	f000 816c 	beq.w	83378 <_vfiprintf_r+0x7f8>
   830a0:	2500      	movs	r5, #0
   830a2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   830a6:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   830aa:	2401      	movs	r4, #1
   830ac:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
   830b0:	e001      	b.n	830b6 <_vfiprintf_r+0x536>
   830b2:	4664      	mov	r4, ip
   830b4:	4605      	mov	r5, r0
   830b6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   830ba:	42ac      	cmp	r4, r5
   830bc:	bfac      	ite	ge
   830be:	4621      	movge	r1, r4
   830c0:	4629      	movlt	r1, r5
   830c2:	9102      	str	r1, [sp, #8]
   830c4:	b113      	cbz	r3, 830cc <_vfiprintf_r+0x54c>
   830c6:	9802      	ldr	r0, [sp, #8]
   830c8:	1c42      	adds	r2, r0, #1
   830ca:	9202      	str	r2, [sp, #8]
   830cc:	f017 0102 	ands.w	r1, r7, #2
   830d0:	9106      	str	r1, [sp, #24]
   830d2:	d002      	beq.n	830da <_vfiprintf_r+0x55a>
   830d4:	9b02      	ldr	r3, [sp, #8]
   830d6:	1c98      	adds	r0, r3, #2
   830d8:	9002      	str	r0, [sp, #8]
   830da:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   830de:	9207      	str	r2, [sp, #28]
   830e0:	d13a      	bne.n	83158 <_vfiprintf_r+0x5d8>
   830e2:	9904      	ldr	r1, [sp, #16]
   830e4:	9b02      	ldr	r3, [sp, #8]
   830e6:	1acb      	subs	r3, r1, r3
   830e8:	2b00      	cmp	r3, #0
   830ea:	dd35      	ble.n	83158 <_vfiprintf_r+0x5d8>
   830ec:	48a0      	ldr	r0, [pc, #640]	; (83370 <_vfiprintf_r+0x7f0>)
   830ee:	2b10      	cmp	r3, #16
   830f0:	f8c8 0000 	str.w	r0, [r8]
   830f4:	dd1a      	ble.n	8312c <_vfiprintf_r+0x5ac>
   830f6:	990c      	ldr	r1, [sp, #48]	; 0x30
   830f8:	2010      	movs	r0, #16
   830fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   830fc:	f8c8 0004 	str.w	r0, [r8, #4]
   83100:	1c48      	adds	r0, r1, #1
   83102:	3210      	adds	r2, #16
   83104:	2807      	cmp	r0, #7
   83106:	920d      	str	r2, [sp, #52]	; 0x34
   83108:	f108 0808 	add.w	r8, r8, #8
   8310c:	900c      	str	r0, [sp, #48]	; 0x30
   8310e:	dd0b      	ble.n	83128 <_vfiprintf_r+0x5a8>
   83110:	4650      	mov	r0, sl
   83112:	4649      	mov	r1, r9
   83114:	aa0b      	add	r2, sp, #44	; 0x2c
   83116:	9300      	str	r3, [sp, #0]
   83118:	f7ff fcfe 	bl	82b18 <__sprint_r>
   8311c:	9b00      	ldr	r3, [sp, #0]
   8311e:	2800      	cmp	r0, #0
   83120:	f040 8131 	bne.w	83386 <_vfiprintf_r+0x806>
   83124:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   83128:	3b10      	subs	r3, #16
   8312a:	e7df      	b.n	830ec <_vfiprintf_r+0x56c>
   8312c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8312e:	f8c8 3004 	str.w	r3, [r8, #4]
   83132:	18d1      	adds	r1, r2, r3
   83134:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   83136:	910d      	str	r1, [sp, #52]	; 0x34
   83138:	1c58      	adds	r0, r3, #1
   8313a:	2807      	cmp	r0, #7
   8313c:	f108 0808 	add.w	r8, r8, #8
   83140:	900c      	str	r0, [sp, #48]	; 0x30
   83142:	dd09      	ble.n	83158 <_vfiprintf_r+0x5d8>
   83144:	4650      	mov	r0, sl
   83146:	4649      	mov	r1, r9
   83148:	aa0b      	add	r2, sp, #44	; 0x2c
   8314a:	f7ff fce5 	bl	82b18 <__sprint_r>
   8314e:	2800      	cmp	r0, #0
   83150:	f040 8119 	bne.w	83386 <_vfiprintf_r+0x806>
   83154:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   83158:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   8315c:	b1d2      	cbz	r2, 83194 <_vfiprintf_r+0x614>
   8315e:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   83162:	f8c8 1000 	str.w	r1, [r8]
   83166:	990c      	ldr	r1, [sp, #48]	; 0x30
   83168:	2301      	movs	r3, #1
   8316a:	980d      	ldr	r0, [sp, #52]	; 0x34
   8316c:	f8c8 3004 	str.w	r3, [r8, #4]
   83170:	1c4b      	adds	r3, r1, #1
   83172:	1c42      	adds	r2, r0, #1
   83174:	2b07      	cmp	r3, #7
   83176:	920d      	str	r2, [sp, #52]	; 0x34
   83178:	f108 0808 	add.w	r8, r8, #8
   8317c:	930c      	str	r3, [sp, #48]	; 0x30
   8317e:	dd09      	ble.n	83194 <_vfiprintf_r+0x614>
   83180:	4650      	mov	r0, sl
   83182:	4649      	mov	r1, r9
   83184:	aa0b      	add	r2, sp, #44	; 0x2c
   83186:	f7ff fcc7 	bl	82b18 <__sprint_r>
   8318a:	2800      	cmp	r0, #0
   8318c:	f040 80fb 	bne.w	83386 <_vfiprintf_r+0x806>
   83190:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   83194:	9806      	ldr	r0, [sp, #24]
   83196:	b1c8      	cbz	r0, 831cc <_vfiprintf_r+0x64c>
   83198:	aa0a      	add	r2, sp, #40	; 0x28
   8319a:	f8c8 2000 	str.w	r2, [r8]
   8319e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   831a0:	2102      	movs	r1, #2
   831a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   831a4:	f8c8 1004 	str.w	r1, [r8, #4]
   831a8:	1c51      	adds	r1, r2, #1
   831aa:	1c98      	adds	r0, r3, #2
   831ac:	2907      	cmp	r1, #7
   831ae:	900d      	str	r0, [sp, #52]	; 0x34
   831b0:	f108 0808 	add.w	r8, r8, #8
   831b4:	910c      	str	r1, [sp, #48]	; 0x30
   831b6:	dd09      	ble.n	831cc <_vfiprintf_r+0x64c>
   831b8:	4650      	mov	r0, sl
   831ba:	4649      	mov	r1, r9
   831bc:	aa0b      	add	r2, sp, #44	; 0x2c
   831be:	f7ff fcab 	bl	82b18 <__sprint_r>
   831c2:	2800      	cmp	r0, #0
   831c4:	f040 80df 	bne.w	83386 <_vfiprintf_r+0x806>
   831c8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   831cc:	9b07      	ldr	r3, [sp, #28]
   831ce:	2b80      	cmp	r3, #128	; 0x80
   831d0:	d13a      	bne.n	83248 <_vfiprintf_r+0x6c8>
   831d2:	9804      	ldr	r0, [sp, #16]
   831d4:	9a02      	ldr	r2, [sp, #8]
   831d6:	1a83      	subs	r3, r0, r2
   831d8:	2b00      	cmp	r3, #0
   831da:	dd35      	ble.n	83248 <_vfiprintf_r+0x6c8>
   831dc:	4965      	ldr	r1, [pc, #404]	; (83374 <_vfiprintf_r+0x7f4>)
   831de:	2b10      	cmp	r3, #16
   831e0:	f8c8 1000 	str.w	r1, [r8]
   831e4:	dd1a      	ble.n	8321c <_vfiprintf_r+0x69c>
   831e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   831e8:	2110      	movs	r1, #16
   831ea:	980d      	ldr	r0, [sp, #52]	; 0x34
   831ec:	f8c8 1004 	str.w	r1, [r8, #4]
   831f0:	1c51      	adds	r1, r2, #1
   831f2:	3010      	adds	r0, #16
   831f4:	2907      	cmp	r1, #7
   831f6:	900d      	str	r0, [sp, #52]	; 0x34
   831f8:	f108 0808 	add.w	r8, r8, #8
   831fc:	910c      	str	r1, [sp, #48]	; 0x30
   831fe:	dd0b      	ble.n	83218 <_vfiprintf_r+0x698>
   83200:	4650      	mov	r0, sl
   83202:	4649      	mov	r1, r9
   83204:	aa0b      	add	r2, sp, #44	; 0x2c
   83206:	9300      	str	r3, [sp, #0]
   83208:	f7ff fc86 	bl	82b18 <__sprint_r>
   8320c:	9b00      	ldr	r3, [sp, #0]
   8320e:	2800      	cmp	r0, #0
   83210:	f040 80b9 	bne.w	83386 <_vfiprintf_r+0x806>
   83214:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   83218:	3b10      	subs	r3, #16
   8321a:	e7df      	b.n	831dc <_vfiprintf_r+0x65c>
   8321c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8321e:	980d      	ldr	r0, [sp, #52]	; 0x34
   83220:	1c51      	adds	r1, r2, #1
   83222:	f8c8 3004 	str.w	r3, [r8, #4]
   83226:	2907      	cmp	r1, #7
   83228:	4403      	add	r3, r0
   8322a:	930d      	str	r3, [sp, #52]	; 0x34
   8322c:	f108 0808 	add.w	r8, r8, #8
   83230:	910c      	str	r1, [sp, #48]	; 0x30
   83232:	dd09      	ble.n	83248 <_vfiprintf_r+0x6c8>
   83234:	4650      	mov	r0, sl
   83236:	4649      	mov	r1, r9
   83238:	aa0b      	add	r2, sp, #44	; 0x2c
   8323a:	f7ff fc6d 	bl	82b18 <__sprint_r>
   8323e:	2800      	cmp	r0, #0
   83240:	f040 80a1 	bne.w	83386 <_vfiprintf_r+0x806>
   83244:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   83248:	1b2d      	subs	r5, r5, r4
   8324a:	2d00      	cmp	r5, #0
   8324c:	dd32      	ble.n	832b4 <_vfiprintf_r+0x734>
   8324e:	4849      	ldr	r0, [pc, #292]	; (83374 <_vfiprintf_r+0x7f4>)
   83250:	2d10      	cmp	r5, #16
   83252:	f8c8 0000 	str.w	r0, [r8]
   83256:	dd18      	ble.n	8328a <_vfiprintf_r+0x70a>
   83258:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8325a:	980d      	ldr	r0, [sp, #52]	; 0x34
   8325c:	1c53      	adds	r3, r2, #1
   8325e:	2110      	movs	r1, #16
   83260:	3010      	adds	r0, #16
   83262:	2b07      	cmp	r3, #7
   83264:	f8c8 1004 	str.w	r1, [r8, #4]
   83268:	900d      	str	r0, [sp, #52]	; 0x34
   8326a:	f108 0808 	add.w	r8, r8, #8
   8326e:	930c      	str	r3, [sp, #48]	; 0x30
   83270:	dd09      	ble.n	83286 <_vfiprintf_r+0x706>
   83272:	4650      	mov	r0, sl
   83274:	4649      	mov	r1, r9
   83276:	aa0b      	add	r2, sp, #44	; 0x2c
   83278:	f7ff fc4e 	bl	82b18 <__sprint_r>
   8327c:	2800      	cmp	r0, #0
   8327e:	f040 8082 	bne.w	83386 <_vfiprintf_r+0x806>
   83282:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   83286:	3d10      	subs	r5, #16
   83288:	e7e1      	b.n	8324e <_vfiprintf_r+0x6ce>
   8328a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8328c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8328e:	1c51      	adds	r1, r2, #1
   83290:	f8c8 5004 	str.w	r5, [r8, #4]
   83294:	2907      	cmp	r1, #7
   83296:	441d      	add	r5, r3
   83298:	950d      	str	r5, [sp, #52]	; 0x34
   8329a:	f108 0808 	add.w	r8, r8, #8
   8329e:	910c      	str	r1, [sp, #48]	; 0x30
   832a0:	dd08      	ble.n	832b4 <_vfiprintf_r+0x734>
   832a2:	4650      	mov	r0, sl
   832a4:	4649      	mov	r1, r9
   832a6:	aa0b      	add	r2, sp, #44	; 0x2c
   832a8:	f7ff fc36 	bl	82b18 <__sprint_r>
   832ac:	2800      	cmp	r0, #0
   832ae:	d16a      	bne.n	83386 <_vfiprintf_r+0x806>
   832b0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   832b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   832b6:	980d      	ldr	r0, [sp, #52]	; 0x34
   832b8:	1c51      	adds	r1, r2, #1
   832ba:	f8c8 4004 	str.w	r4, [r8, #4]
   832be:	2907      	cmp	r1, #7
   832c0:	4404      	add	r4, r0
   832c2:	f8c8 b000 	str.w	fp, [r8]
   832c6:	940d      	str	r4, [sp, #52]	; 0x34
   832c8:	f108 0308 	add.w	r3, r8, #8
   832cc:	910c      	str	r1, [sp, #48]	; 0x30
   832ce:	dd07      	ble.n	832e0 <_vfiprintf_r+0x760>
   832d0:	4650      	mov	r0, sl
   832d2:	4649      	mov	r1, r9
   832d4:	aa0b      	add	r2, sp, #44	; 0x2c
   832d6:	f7ff fc1f 	bl	82b18 <__sprint_r>
   832da:	2800      	cmp	r0, #0
   832dc:	d153      	bne.n	83386 <_vfiprintf_r+0x806>
   832de:	ab18      	add	r3, sp, #96	; 0x60
   832e0:	077a      	lsls	r2, r7, #29
   832e2:	d40b      	bmi.n	832fc <_vfiprintf_r+0x77c>
   832e4:	9b03      	ldr	r3, [sp, #12]
   832e6:	9a02      	ldr	r2, [sp, #8]
   832e8:	9904      	ldr	r1, [sp, #16]
   832ea:	980d      	ldr	r0, [sp, #52]	; 0x34
   832ec:	428a      	cmp	r2, r1
   832ee:	bfac      	ite	ge
   832f0:	189b      	addge	r3, r3, r2
   832f2:	185b      	addlt	r3, r3, r1
   832f4:	9303      	str	r3, [sp, #12]
   832f6:	2800      	cmp	r0, #0
   832f8:	d035      	beq.n	83366 <_vfiprintf_r+0x7e6>
   832fa:	e02e      	b.n	8335a <_vfiprintf_r+0x7da>
   832fc:	9c04      	ldr	r4, [sp, #16]
   832fe:	9802      	ldr	r0, [sp, #8]
   83300:	1a24      	subs	r4, r4, r0
   83302:	2c00      	cmp	r4, #0
   83304:	ddee      	ble.n	832e4 <_vfiprintf_r+0x764>
   83306:	4a1a      	ldr	r2, [pc, #104]	; (83370 <_vfiprintf_r+0x7f0>)
   83308:	2c10      	cmp	r4, #16
   8330a:	601a      	str	r2, [r3, #0]
   8330c:	dd14      	ble.n	83338 <_vfiprintf_r+0x7b8>
   8330e:	980c      	ldr	r0, [sp, #48]	; 0x30
   83310:	2210      	movs	r2, #16
   83312:	990d      	ldr	r1, [sp, #52]	; 0x34
   83314:	605a      	str	r2, [r3, #4]
   83316:	1c42      	adds	r2, r0, #1
   83318:	3110      	adds	r1, #16
   8331a:	3308      	adds	r3, #8
   8331c:	2a07      	cmp	r2, #7
   8331e:	910d      	str	r1, [sp, #52]	; 0x34
   83320:	920c      	str	r2, [sp, #48]	; 0x30
   83322:	dd07      	ble.n	83334 <_vfiprintf_r+0x7b4>
   83324:	4650      	mov	r0, sl
   83326:	4649      	mov	r1, r9
   83328:	aa0b      	add	r2, sp, #44	; 0x2c
   8332a:	f7ff fbf5 	bl	82b18 <__sprint_r>
   8332e:	2800      	cmp	r0, #0
   83330:	d129      	bne.n	83386 <_vfiprintf_r+0x806>
   83332:	ab18      	add	r3, sp, #96	; 0x60
   83334:	3c10      	subs	r4, #16
   83336:	e7e6      	b.n	83306 <_vfiprintf_r+0x786>
   83338:	990c      	ldr	r1, [sp, #48]	; 0x30
   8333a:	605c      	str	r4, [r3, #4]
   8333c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8333e:	1c48      	adds	r0, r1, #1
   83340:	191c      	adds	r4, r3, r4
   83342:	2807      	cmp	r0, #7
   83344:	940d      	str	r4, [sp, #52]	; 0x34
   83346:	900c      	str	r0, [sp, #48]	; 0x30
   83348:	ddcc      	ble.n	832e4 <_vfiprintf_r+0x764>
   8334a:	4650      	mov	r0, sl
   8334c:	4649      	mov	r1, r9
   8334e:	aa0b      	add	r2, sp, #44	; 0x2c
   83350:	f7ff fbe2 	bl	82b18 <__sprint_r>
   83354:	2800      	cmp	r0, #0
   83356:	d0c5      	beq.n	832e4 <_vfiprintf_r+0x764>
   83358:	e015      	b.n	83386 <_vfiprintf_r+0x806>
   8335a:	4650      	mov	r0, sl
   8335c:	4649      	mov	r1, r9
   8335e:	aa0b      	add	r2, sp, #44	; 0x2c
   83360:	f7ff fbda 	bl	82b18 <__sprint_r>
   83364:	b978      	cbnz	r0, 83386 <_vfiprintf_r+0x806>
   83366:	2500      	movs	r5, #0
   83368:	950c      	str	r5, [sp, #48]	; 0x30
   8336a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8336e:	e453      	b.n	82c18 <_vfiprintf_r+0x98>
   83370:	00085196 	.word	0x00085196
   83374:	000851a6 	.word	0x000851a6
   83378:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8337a:	b122      	cbz	r2, 83386 <_vfiprintf_r+0x806>
   8337c:	4650      	mov	r0, sl
   8337e:	4649      	mov	r1, r9
   83380:	aa0b      	add	r2, sp, #44	; 0x2c
   83382:	f7ff fbc9 	bl	82b18 <__sprint_r>
   83386:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   8338a:	f001 0040 	and.w	r0, r1, #64	; 0x40
   8338e:	b203      	sxth	r3, r0
   83390:	2b00      	cmp	r3, #0
   83392:	f47f ac28 	bne.w	82be6 <_vfiprintf_r+0x66>
   83396:	9803      	ldr	r0, [sp, #12]
   83398:	b029      	add	sp, #164	; 0xa4
   8339a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008339e <__sbprintf>:
   8339e:	b570      	push	{r4, r5, r6, lr}
   833a0:	460c      	mov	r4, r1
   833a2:	8989      	ldrh	r1, [r1, #12]
   833a4:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   833a8:	f021 0502 	bic.w	r5, r1, #2
   833ac:	6e61      	ldr	r1, [r4, #100]	; 0x64
   833ae:	f8ad 500c 	strh.w	r5, [sp, #12]
   833b2:	9119      	str	r1, [sp, #100]	; 0x64
   833b4:	89e5      	ldrh	r5, [r4, #14]
   833b6:	69e1      	ldr	r1, [r4, #28]
   833b8:	f8ad 500e 	strh.w	r5, [sp, #14]
   833bc:	9107      	str	r1, [sp, #28]
   833be:	6a65      	ldr	r5, [r4, #36]	; 0x24
   833c0:	a91a      	add	r1, sp, #104	; 0x68
   833c2:	9100      	str	r1, [sp, #0]
   833c4:	9104      	str	r1, [sp, #16]
   833c6:	2100      	movs	r1, #0
   833c8:	9509      	str	r5, [sp, #36]	; 0x24
   833ca:	9106      	str	r1, [sp, #24]
   833cc:	f44f 6580 	mov.w	r5, #1024	; 0x400
   833d0:	4669      	mov	r1, sp
   833d2:	9502      	str	r5, [sp, #8]
   833d4:	9505      	str	r5, [sp, #20]
   833d6:	4606      	mov	r6, r0
   833d8:	f7ff fbd2 	bl	82b80 <_vfiprintf_r>
   833dc:	1e05      	subs	r5, r0, #0
   833de:	db07      	blt.n	833f0 <__sbprintf+0x52>
   833e0:	4630      	mov	r0, r6
   833e2:	4669      	mov	r1, sp
   833e4:	f000 f8e8 	bl	835b8 <_fflush_r>
   833e8:	2800      	cmp	r0, #0
   833ea:	bf18      	it	ne
   833ec:	f04f 35ff 	movne.w	r5, #4294967295
   833f0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   833f4:	f003 0040 	and.w	r0, r3, #64	; 0x40
   833f8:	b202      	sxth	r2, r0
   833fa:	b11a      	cbz	r2, 83404 <__sbprintf+0x66>
   833fc:	89a1      	ldrh	r1, [r4, #12]
   833fe:	f041 0340 	orr.w	r3, r1, #64	; 0x40
   83402:	81a3      	strh	r3, [r4, #12]
   83404:	4628      	mov	r0, r5
   83406:	b01a      	add	sp, #104	; 0x68
   83408:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
   8340c:	bd70      	pop	{r4, r5, r6, pc}

0008340e <vfiprintf>:
   8340e:	b530      	push	{r4, r5, lr}
   83410:	4613      	mov	r3, r2
   83412:	4a05      	ldr	r2, [pc, #20]	; (83428 <vfiprintf+0x1a>)
   83414:	4605      	mov	r5, r0
   83416:	460c      	mov	r4, r1
   83418:	6810      	ldr	r0, [r2, #0]
   8341a:	4629      	mov	r1, r5
   8341c:	4622      	mov	r2, r4
   8341e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   83422:	f7ff bbad 	b.w	82b80 <_vfiprintf_r>
   83426:	bf00      	nop
   83428:	20070018 	.word	0x20070018

0008342c <__swbuf_r>:
   8342c:	b570      	push	{r4, r5, r6, lr}
   8342e:	460d      	mov	r5, r1
   83430:	4614      	mov	r4, r2
   83432:	4606      	mov	r6, r0
   83434:	b118      	cbz	r0, 8343e <__swbuf_r+0x12>
   83436:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83438:	b90b      	cbnz	r3, 8343e <__swbuf_r+0x12>
   8343a:	f000 f9af 	bl	8379c <__sinit>
   8343e:	89a1      	ldrh	r1, [r4, #12]
   83440:	69a0      	ldr	r0, [r4, #24]
   83442:	f001 0208 	and.w	r2, r1, #8
   83446:	b213      	sxth	r3, r2
   83448:	60a0      	str	r0, [r4, #8]
   8344a:	b10b      	cbz	r3, 83450 <__swbuf_r+0x24>
   8344c:	6920      	ldr	r0, [r4, #16]
   8344e:	b958      	cbnz	r0, 83468 <__swbuf_r+0x3c>
   83450:	4630      	mov	r0, r6
   83452:	4621      	mov	r1, r4
   83454:	f000 f844 	bl	834e0 <__swsetup_r>
   83458:	b130      	cbz	r0, 83468 <__swbuf_r+0x3c>
   8345a:	89a5      	ldrh	r5, [r4, #12]
   8345c:	2009      	movs	r0, #9
   8345e:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   83462:	81a1      	strh	r1, [r4, #12]
   83464:	6030      	str	r0, [r6, #0]
   83466:	e017      	b.n	83498 <__swbuf_r+0x6c>
   83468:	89a1      	ldrh	r1, [r4, #12]
   8346a:	b2ed      	uxtb	r5, r5
   8346c:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
   83470:	b213      	sxth	r3, r2
   83472:	b933      	cbnz	r3, 83482 <__swbuf_r+0x56>
   83474:	f441 5000 	orr.w	r0, r1, #8192	; 0x2000
   83478:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8347a:	81a0      	strh	r0, [r4, #12]
   8347c:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
   83480:	6662      	str	r2, [r4, #100]	; 0x64
   83482:	6820      	ldr	r0, [r4, #0]
   83484:	6923      	ldr	r3, [r4, #16]
   83486:	6961      	ldr	r1, [r4, #20]
   83488:	1ac0      	subs	r0, r0, r3
   8348a:	4288      	cmp	r0, r1
   8348c:	db07      	blt.n	8349e <__swbuf_r+0x72>
   8348e:	4630      	mov	r0, r6
   83490:	4621      	mov	r1, r4
   83492:	f000 f891 	bl	835b8 <_fflush_r>
   83496:	b110      	cbz	r0, 8349e <__swbuf_r+0x72>
   83498:	f04f 35ff 	mov.w	r5, #4294967295
   8349c:	e015      	b.n	834ca <__swbuf_r+0x9e>
   8349e:	68a2      	ldr	r2, [r4, #8]
   834a0:	6821      	ldr	r1, [r4, #0]
   834a2:	1e53      	subs	r3, r2, #1
   834a4:	60a3      	str	r3, [r4, #8]
   834a6:	f801 5b01 	strb.w	r5, [r1], #1
   834aa:	6962      	ldr	r2, [r4, #20]
   834ac:	3001      	adds	r0, #1
   834ae:	4290      	cmp	r0, r2
   834b0:	6021      	str	r1, [r4, #0]
   834b2:	d004      	beq.n	834be <__swbuf_r+0x92>
   834b4:	89a3      	ldrh	r3, [r4, #12]
   834b6:	07db      	lsls	r3, r3, #31
   834b8:	d507      	bpl.n	834ca <__swbuf_r+0x9e>
   834ba:	2d0a      	cmp	r5, #10
   834bc:	d105      	bne.n	834ca <__swbuf_r+0x9e>
   834be:	4630      	mov	r0, r6
   834c0:	4621      	mov	r1, r4
   834c2:	f000 f879 	bl	835b8 <_fflush_r>
   834c6:	2800      	cmp	r0, #0
   834c8:	d1e6      	bne.n	83498 <__swbuf_r+0x6c>
   834ca:	4628      	mov	r0, r5
   834cc:	bd70      	pop	{r4, r5, r6, pc}

000834ce <__swbuf>:
   834ce:	460a      	mov	r2, r1
   834d0:	4902      	ldr	r1, [pc, #8]	; (834dc <__swbuf+0xe>)
   834d2:	4603      	mov	r3, r0
   834d4:	6808      	ldr	r0, [r1, #0]
   834d6:	4619      	mov	r1, r3
   834d8:	f7ff bfa8 	b.w	8342c <__swbuf_r>
   834dc:	20070018 	.word	0x20070018

000834e0 <__swsetup_r>:
   834e0:	b538      	push	{r3, r4, r5, lr}
   834e2:	4b2c      	ldr	r3, [pc, #176]	; (83594 <__swsetup_r+0xb4>)
   834e4:	4605      	mov	r5, r0
   834e6:	6818      	ldr	r0, [r3, #0]
   834e8:	460c      	mov	r4, r1
   834ea:	b118      	cbz	r0, 834f4 <__swsetup_r+0x14>
   834ec:	6b82      	ldr	r2, [r0, #56]	; 0x38
   834ee:	b90a      	cbnz	r2, 834f4 <__swsetup_r+0x14>
   834f0:	f000 f954 	bl	8379c <__sinit>
   834f4:	89a0      	ldrh	r0, [r4, #12]
   834f6:	f000 0108 	and.w	r1, r0, #8
   834fa:	b20b      	sxth	r3, r1
   834fc:	bb0b      	cbnz	r3, 83542 <__swsetup_r+0x62>
   834fe:	f000 0210 	and.w	r2, r0, #16
   83502:	b211      	sxth	r1, r2
   83504:	b911      	cbnz	r1, 8350c <__swsetup_r+0x2c>
   83506:	f04f 30ff 	mov.w	r0, #4294967295
   8350a:	bd38      	pop	{r3, r4, r5, pc}
   8350c:	f000 0004 	and.w	r0, r0, #4
   83510:	b203      	sxth	r3, r0
   83512:	b193      	cbz	r3, 8353a <__swsetup_r+0x5a>
   83514:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83516:	b141      	cbz	r1, 8352a <__swsetup_r+0x4a>
   83518:	f104 0240 	add.w	r2, r4, #64	; 0x40
   8351c:	4291      	cmp	r1, r2
   8351e:	d002      	beq.n	83526 <__swsetup_r+0x46>
   83520:	4628      	mov	r0, r5
   83522:	f000 fa79 	bl	83a18 <_free_r>
   83526:	2100      	movs	r1, #0
   83528:	6321      	str	r1, [r4, #48]	; 0x30
   8352a:	89a0      	ldrh	r0, [r4, #12]
   8352c:	6921      	ldr	r1, [r4, #16]
   8352e:	f020 0324 	bic.w	r3, r0, #36	; 0x24
   83532:	2200      	movs	r2, #0
   83534:	81a3      	strh	r3, [r4, #12]
   83536:	6062      	str	r2, [r4, #4]
   83538:	6021      	str	r1, [r4, #0]
   8353a:	89a0      	ldrh	r0, [r4, #12]
   8353c:	f040 0308 	orr.w	r3, r0, #8
   83540:	81a3      	strh	r3, [r4, #12]
   83542:	6922      	ldr	r2, [r4, #16]
   83544:	b94a      	cbnz	r2, 8355a <__swsetup_r+0x7a>
   83546:	89a1      	ldrh	r1, [r4, #12]
   83548:	f401 7020 	and.w	r0, r1, #640	; 0x280
   8354c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   83550:	d003      	beq.n	8355a <__swsetup_r+0x7a>
   83552:	4628      	mov	r0, r5
   83554:	4621      	mov	r1, r4
   83556:	f000 fcf7 	bl	83f48 <__smakebuf_r>
   8355a:	89a3      	ldrh	r3, [r4, #12]
   8355c:	f013 0201 	ands.w	r2, r3, #1
   83560:	d005      	beq.n	8356e <__swsetup_r+0x8e>
   83562:	6961      	ldr	r1, [r4, #20]
   83564:	2200      	movs	r2, #0
   83566:	4248      	negs	r0, r1
   83568:	60a2      	str	r2, [r4, #8]
   8356a:	61a0      	str	r0, [r4, #24]
   8356c:	e007      	b.n	8357e <__swsetup_r+0x9e>
   8356e:	f003 0102 	and.w	r1, r3, #2
   83572:	b208      	sxth	r0, r1
   83574:	b908      	cbnz	r0, 8357a <__swsetup_r+0x9a>
   83576:	6963      	ldr	r3, [r4, #20]
   83578:	e000      	b.n	8357c <__swsetup_r+0x9c>
   8357a:	4613      	mov	r3, r2
   8357c:	60a3      	str	r3, [r4, #8]
   8357e:	6923      	ldr	r3, [r4, #16]
   83580:	b933      	cbnz	r3, 83590 <__swsetup_r+0xb0>
   83582:	89a2      	ldrh	r2, [r4, #12]
   83584:	f002 0180 	and.w	r1, r2, #128	; 0x80
   83588:	b208      	sxth	r0, r1
   8358a:	2800      	cmp	r0, #0
   8358c:	d1bb      	bne.n	83506 <__swsetup_r+0x26>
   8358e:	bd38      	pop	{r3, r4, r5, pc}
   83590:	2000      	movs	r0, #0
   83592:	bd38      	pop	{r3, r4, r5, pc}
   83594:	20070018 	.word	0x20070018

00083598 <register_fini>:
   83598:	4b02      	ldr	r3, [pc, #8]	; (835a4 <register_fini+0xc>)
   8359a:	b113      	cbz	r3, 835a2 <register_fini+0xa>
   8359c:	4802      	ldr	r0, [pc, #8]	; (835a8 <register_fini+0x10>)
   8359e:	f000 b805 	b.w	835ac <atexit>
   835a2:	4770      	bx	lr
   835a4:	00000000 	.word	0x00000000
   835a8:	00082915 	.word	0x00082915

000835ac <atexit>:
   835ac:	4601      	mov	r1, r0
   835ae:	2000      	movs	r0, #0
   835b0:	4602      	mov	r2, r0
   835b2:	4603      	mov	r3, r0
   835b4:	f7ff b960 	b.w	82878 <__register_exitproc>

000835b8 <_fflush_r>:
   835b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   835bc:	460c      	mov	r4, r1
   835be:	4605      	mov	r5, r0
   835c0:	b118      	cbz	r0, 835ca <_fflush_r+0x12>
   835c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   835c4:	b90b      	cbnz	r3, 835ca <_fflush_r+0x12>
   835c6:	f000 f8e9 	bl	8379c <__sinit>
   835ca:	89a2      	ldrh	r2, [r4, #12]
   835cc:	b332      	cbz	r2, 8361c <_fflush_r+0x64>
   835ce:	f002 0008 	and.w	r0, r2, #8
   835d2:	b201      	sxth	r1, r0
   835d4:	2900      	cmp	r1, #0
   835d6:	d162      	bne.n	8369e <_fflush_r+0xe6>
   835d8:	6861      	ldr	r1, [r4, #4]
   835da:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
   835de:	2900      	cmp	r1, #0
   835e0:	81a0      	strh	r0, [r4, #12]
   835e2:	dc02      	bgt.n	835ea <_fflush_r+0x32>
   835e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   835e6:	2b00      	cmp	r3, #0
   835e8:	dd18      	ble.n	8361c <_fflush_r+0x64>
   835ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   835ec:	b1b6      	cbz	r6, 8361c <_fflush_r+0x64>
   835ee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   835f2:	2000      	movs	r0, #0
   835f4:	b212      	sxth	r2, r2
   835f6:	682f      	ldr	r7, [r5, #0]
   835f8:	6028      	str	r0, [r5, #0]
   835fa:	b10a      	cbz	r2, 83600 <_fflush_r+0x48>
   835fc:	6d22      	ldr	r2, [r4, #80]	; 0x50
   835fe:	e010      	b.n	83622 <_fflush_r+0x6a>
   83600:	2301      	movs	r3, #1
   83602:	4628      	mov	r0, r5
   83604:	69e1      	ldr	r1, [r4, #28]
   83606:	47b0      	blx	r6
   83608:	4602      	mov	r2, r0
   8360a:	3001      	adds	r0, #1
   8360c:	d109      	bne.n	83622 <_fflush_r+0x6a>
   8360e:	6829      	ldr	r1, [r5, #0]
   83610:	b139      	cbz	r1, 83622 <_fflush_r+0x6a>
   83612:	291d      	cmp	r1, #29
   83614:	d001      	beq.n	8361a <_fflush_r+0x62>
   83616:	2916      	cmp	r1, #22
   83618:	d14e      	bne.n	836b8 <_fflush_r+0x100>
   8361a:	602f      	str	r7, [r5, #0]
   8361c:	2000      	movs	r0, #0
   8361e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83622:	89a6      	ldrh	r6, [r4, #12]
   83624:	f006 0104 	and.w	r1, r6, #4
   83628:	b20b      	sxth	r3, r1
   8362a:	b12b      	cbz	r3, 83638 <_fflush_r+0x80>
   8362c:	6860      	ldr	r0, [r4, #4]
   8362e:	6b26      	ldr	r6, [r4, #48]	; 0x30
   83630:	1a12      	subs	r2, r2, r0
   83632:	b10e      	cbz	r6, 83638 <_fflush_r+0x80>
   83634:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   83636:	1a52      	subs	r2, r2, r1
   83638:	69e1      	ldr	r1, [r4, #28]
   8363a:	2300      	movs	r3, #0
   8363c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   8363e:	4628      	mov	r0, r5
   83640:	47b0      	blx	r6
   83642:	1c41      	adds	r1, r0, #1
   83644:	d105      	bne.n	83652 <_fflush_r+0x9a>
   83646:	682a      	ldr	r2, [r5, #0]
   83648:	b11a      	cbz	r2, 83652 <_fflush_r+0x9a>
   8364a:	2a1d      	cmp	r2, #29
   8364c:	d001      	beq.n	83652 <_fflush_r+0x9a>
   8364e:	2a16      	cmp	r2, #22
   83650:	d11f      	bne.n	83692 <_fflush_r+0xda>
   83652:	89a3      	ldrh	r3, [r4, #12]
   83654:	2100      	movs	r1, #0
   83656:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
   8365a:	81a2      	strh	r2, [r4, #12]
   8365c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   83660:	6922      	ldr	r2, [r4, #16]
   83662:	6061      	str	r1, [r4, #4]
   83664:	b219      	sxth	r1, r3
   83666:	6022      	str	r2, [r4, #0]
   83668:	b121      	cbz	r1, 83674 <_fflush_r+0xbc>
   8366a:	1c42      	adds	r2, r0, #1
   8366c:	d101      	bne.n	83672 <_fflush_r+0xba>
   8366e:	682a      	ldr	r2, [r5, #0]
   83670:	b902      	cbnz	r2, 83674 <_fflush_r+0xbc>
   83672:	6520      	str	r0, [r4, #80]	; 0x50
   83674:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83676:	602f      	str	r7, [r5, #0]
   83678:	2900      	cmp	r1, #0
   8367a:	d0cf      	beq.n	8361c <_fflush_r+0x64>
   8367c:	f104 0040 	add.w	r0, r4, #64	; 0x40
   83680:	4281      	cmp	r1, r0
   83682:	d002      	beq.n	8368a <_fflush_r+0xd2>
   83684:	4628      	mov	r0, r5
   83686:	f000 f9c7 	bl	83a18 <_free_r>
   8368a:	2000      	movs	r0, #0
   8368c:	6320      	str	r0, [r4, #48]	; 0x30
   8368e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83692:	89a3      	ldrh	r3, [r4, #12]
   83694:	f043 0140 	orr.w	r1, r3, #64	; 0x40
   83698:	81a1      	strh	r1, [r4, #12]
   8369a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8369e:	6926      	ldr	r6, [r4, #16]
   836a0:	2e00      	cmp	r6, #0
   836a2:	d0bb      	beq.n	8361c <_fflush_r+0x64>
   836a4:	0792      	lsls	r2, r2, #30
   836a6:	6823      	ldr	r3, [r4, #0]
   836a8:	bf0c      	ite	eq
   836aa:	6962      	ldreq	r2, [r4, #20]
   836ac:	2200      	movne	r2, #0
   836ae:	ebc6 0803 	rsb	r8, r6, r3
   836b2:	6026      	str	r6, [r4, #0]
   836b4:	60a2      	str	r2, [r4, #8]
   836b6:	e012      	b.n	836de <_fflush_r+0x126>
   836b8:	89a3      	ldrh	r3, [r4, #12]
   836ba:	f043 0040 	orr.w	r0, r3, #64	; 0x40
   836be:	81a0      	strh	r0, [r4, #12]
   836c0:	f04f 30ff 	mov.w	r0, #4294967295
   836c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   836c8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   836ca:	4628      	mov	r0, r5
   836cc:	69e1      	ldr	r1, [r4, #28]
   836ce:	4632      	mov	r2, r6
   836d0:	4643      	mov	r3, r8
   836d2:	47b8      	blx	r7
   836d4:	2800      	cmp	r0, #0
   836d6:	ddef      	ble.n	836b8 <_fflush_r+0x100>
   836d8:	1836      	adds	r6, r6, r0
   836da:	ebc0 0808 	rsb	r8, r0, r8
   836de:	f1b8 0f00 	cmp.w	r8, #0
   836e2:	dcf1      	bgt.n	836c8 <_fflush_r+0x110>
   836e4:	e79a      	b.n	8361c <_fflush_r+0x64>

000836e6 <fflush>:
   836e6:	4601      	mov	r1, r0
   836e8:	b920      	cbnz	r0, 836f4 <fflush+0xe>
   836ea:	4804      	ldr	r0, [pc, #16]	; (836fc <fflush+0x16>)
   836ec:	4904      	ldr	r1, [pc, #16]	; (83700 <fflush+0x1a>)
   836ee:	6800      	ldr	r0, [r0, #0]
   836f0:	f000 bbc4 	b.w	83e7c <_fwalk_reent>
   836f4:	4b03      	ldr	r3, [pc, #12]	; (83704 <fflush+0x1e>)
   836f6:	6818      	ldr	r0, [r3, #0]
   836f8:	f7ff bf5e 	b.w	835b8 <_fflush_r>
   836fc:	00085190 	.word	0x00085190
   83700:	000835b9 	.word	0x000835b9
   83704:	20070018 	.word	0x20070018

00083708 <__fp_lock>:
   83708:	2000      	movs	r0, #0
   8370a:	4770      	bx	lr

0008370c <__fp_unlock>:
   8370c:	2000      	movs	r0, #0
   8370e:	4770      	bx	lr

00083710 <_cleanup_r>:
   83710:	4901      	ldr	r1, [pc, #4]	; (83718 <_cleanup_r+0x8>)
   83712:	f000 bb92 	b.w	83e3a <_fwalk>
   83716:	bf00      	nop
   83718:	000849ad 	.word	0x000849ad

0008371c <std.isra.0>:
   8371c:	2300      	movs	r3, #0
   8371e:	b510      	push	{r4, lr}
   83720:	4604      	mov	r4, r0
   83722:	6003      	str	r3, [r0, #0]
   83724:	6043      	str	r3, [r0, #4]
   83726:	6083      	str	r3, [r0, #8]
   83728:	8181      	strh	r1, [r0, #12]
   8372a:	6643      	str	r3, [r0, #100]	; 0x64
   8372c:	81c2      	strh	r2, [r0, #14]
   8372e:	6103      	str	r3, [r0, #16]
   83730:	6143      	str	r3, [r0, #20]
   83732:	6183      	str	r3, [r0, #24]
   83734:	4619      	mov	r1, r3
   83736:	2208      	movs	r2, #8
   83738:	f100 005c 	add.w	r0, r0, #92	; 0x5c
   8373c:	f7ff f94f 	bl	829de <memset>
   83740:	4804      	ldr	r0, [pc, #16]	; (83754 <std.isra.0+0x38>)
   83742:	4905      	ldr	r1, [pc, #20]	; (83758 <std.isra.0+0x3c>)
   83744:	4a05      	ldr	r2, [pc, #20]	; (8375c <std.isra.0+0x40>)
   83746:	4b06      	ldr	r3, [pc, #24]	; (83760 <std.isra.0+0x44>)
   83748:	61e4      	str	r4, [r4, #28]
   8374a:	6220      	str	r0, [r4, #32]
   8374c:	6261      	str	r1, [r4, #36]	; 0x24
   8374e:	62a2      	str	r2, [r4, #40]	; 0x28
   83750:	62e3      	str	r3, [r4, #44]	; 0x2c
   83752:	bd10      	pop	{r4, pc}
   83754:	00084795 	.word	0x00084795
   83758:	000847bb 	.word	0x000847bb
   8375c:	000847f7 	.word	0x000847f7
   83760:	0008481b 	.word	0x0008481b

00083764 <__sfmoreglue>:
   83764:	b570      	push	{r4, r5, r6, lr}
   83766:	2568      	movs	r5, #104	; 0x68
   83768:	434d      	muls	r5, r1
   8376a:	460e      	mov	r6, r1
   8376c:	f105 010c 	add.w	r1, r5, #12
   83770:	f000 fc66 	bl	84040 <_malloc_r>
   83774:	4604      	mov	r4, r0
   83776:	b140      	cbz	r0, 8378a <__sfmoreglue+0x26>
   83778:	f100 000c 	add.w	r0, r0, #12
   8377c:	2100      	movs	r1, #0
   8377e:	e884 0042 	stmia.w	r4, {r1, r6}
   83782:	60a0      	str	r0, [r4, #8]
   83784:	462a      	mov	r2, r5
   83786:	f7ff f92a 	bl	829de <memset>
   8378a:	4620      	mov	r0, r4
   8378c:	bd70      	pop	{r4, r5, r6, pc}

0008378e <_cleanup>:
   8378e:	4b02      	ldr	r3, [pc, #8]	; (83798 <_cleanup+0xa>)
   83790:	6818      	ldr	r0, [r3, #0]
   83792:	f7ff bfbd 	b.w	83710 <_cleanup_r>
   83796:	bf00      	nop
   83798:	00085190 	.word	0x00085190

0008379c <__sinit>:
   8379c:	b538      	push	{r3, r4, r5, lr}
   8379e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   837a0:	4604      	mov	r4, r0
   837a2:	b9eb      	cbnz	r3, 837e0 <__sinit+0x44>
   837a4:	4a0f      	ldr	r2, [pc, #60]	; (837e4 <__sinit+0x48>)
   837a6:	2501      	movs	r5, #1
   837a8:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
   837ac:	63c2      	str	r2, [r0, #60]	; 0x3c
   837ae:	6385      	str	r5, [r0, #56]	; 0x38
   837b0:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
   837b4:	2003      	movs	r0, #3
   837b6:	461a      	mov	r2, r3
   837b8:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   837bc:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
   837c0:	6860      	ldr	r0, [r4, #4]
   837c2:	2104      	movs	r1, #4
   837c4:	f7ff ffaa 	bl	8371c <std.isra.0>
   837c8:	68a0      	ldr	r0, [r4, #8]
   837ca:	2109      	movs	r1, #9
   837cc:	462a      	mov	r2, r5
   837ce:	f7ff ffa5 	bl	8371c <std.isra.0>
   837d2:	68e0      	ldr	r0, [r4, #12]
   837d4:	2112      	movs	r1, #18
   837d6:	2202      	movs	r2, #2
   837d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   837dc:	f7ff bf9e 	b.w	8371c <std.isra.0>
   837e0:	bd38      	pop	{r3, r4, r5, pc}
   837e2:	bf00      	nop
   837e4:	00083711 	.word	0x00083711

000837e8 <__sfp>:
   837e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   837ea:	4b1d      	ldr	r3, [pc, #116]	; (83860 <__sfp+0x78>)
   837ec:	4607      	mov	r7, r0
   837ee:	681e      	ldr	r6, [r3, #0]
   837f0:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   837f2:	b910      	cbnz	r0, 837fa <__sfp+0x12>
   837f4:	4630      	mov	r0, r6
   837f6:	f7ff ffd1 	bl	8379c <__sinit>
   837fa:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
   837fe:	68b4      	ldr	r4, [r6, #8]
   83800:	6871      	ldr	r1, [r6, #4]
   83802:	3901      	subs	r1, #1
   83804:	d404      	bmi.n	83810 <__sfp+0x28>
   83806:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   8380a:	b185      	cbz	r5, 8382e <__sfp+0x46>
   8380c:	3468      	adds	r4, #104	; 0x68
   8380e:	e7f8      	b.n	83802 <__sfp+0x1a>
   83810:	6832      	ldr	r2, [r6, #0]
   83812:	b10a      	cbz	r2, 83818 <__sfp+0x30>
   83814:	6836      	ldr	r6, [r6, #0]
   83816:	e7f2      	b.n	837fe <__sfp+0x16>
   83818:	4638      	mov	r0, r7
   8381a:	2104      	movs	r1, #4
   8381c:	f7ff ffa2 	bl	83764 <__sfmoreglue>
   83820:	6030      	str	r0, [r6, #0]
   83822:	2800      	cmp	r0, #0
   83824:	d1f6      	bne.n	83814 <__sfp+0x2c>
   83826:	240c      	movs	r4, #12
   83828:	603c      	str	r4, [r7, #0]
   8382a:	4604      	mov	r4, r0
   8382c:	e015      	b.n	8385a <__sfp+0x72>
   8382e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   83832:	2001      	movs	r0, #1
   83834:	81a0      	strh	r0, [r4, #12]
   83836:	81e3      	strh	r3, [r4, #14]
   83838:	6665      	str	r5, [r4, #100]	; 0x64
   8383a:	6025      	str	r5, [r4, #0]
   8383c:	60a5      	str	r5, [r4, #8]
   8383e:	6065      	str	r5, [r4, #4]
   83840:	6125      	str	r5, [r4, #16]
   83842:	6165      	str	r5, [r4, #20]
   83844:	61a5      	str	r5, [r4, #24]
   83846:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   8384a:	4629      	mov	r1, r5
   8384c:	2208      	movs	r2, #8
   8384e:	f7ff f8c6 	bl	829de <memset>
   83852:	6325      	str	r5, [r4, #48]	; 0x30
   83854:	6365      	str	r5, [r4, #52]	; 0x34
   83856:	6465      	str	r5, [r4, #68]	; 0x44
   83858:	64a5      	str	r5, [r4, #72]	; 0x48
   8385a:	4620      	mov	r0, r4
   8385c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8385e:	bf00      	nop
   83860:	00085190 	.word	0x00085190

00083864 <__sfp_lock_acquire>:
   83864:	4770      	bx	lr

00083866 <__sfp_lock_release>:
   83866:	4770      	bx	lr

00083868 <__sinit_lock_acquire>:
   83868:	4770      	bx	lr

0008386a <__sinit_lock_release>:
   8386a:	4770      	bx	lr

0008386c <__fp_lock_all>:
   8386c:	4b02      	ldr	r3, [pc, #8]	; (83878 <__fp_lock_all+0xc>)
   8386e:	4903      	ldr	r1, [pc, #12]	; (8387c <__fp_lock_all+0x10>)
   83870:	6818      	ldr	r0, [r3, #0]
   83872:	f000 bae2 	b.w	83e3a <_fwalk>
   83876:	bf00      	nop
   83878:	20070018 	.word	0x20070018
   8387c:	00083709 	.word	0x00083709

00083880 <__fp_unlock_all>:
   83880:	4b02      	ldr	r3, [pc, #8]	; (8388c <__fp_unlock_all+0xc>)
   83882:	4903      	ldr	r1, [pc, #12]	; (83890 <__fp_unlock_all+0x10>)
   83884:	6818      	ldr	r0, [r3, #0]
   83886:	f000 bad8 	b.w	83e3a <_fwalk>
   8388a:	bf00      	nop
   8388c:	20070018 	.word	0x20070018
   83890:	0008370d 	.word	0x0008370d

00083894 <_fputwc_r>:
   83894:	8993      	ldrh	r3, [r2, #12]
   83896:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   8389a:	4614      	mov	r4, r2
   8389c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
   838a0:	4680      	mov	r8, r0
   838a2:	b210      	sxth	r0, r2
   838a4:	460e      	mov	r6, r1
   838a6:	b930      	cbnz	r0, 838b6 <_fputwc_r+0x22>
   838a8:	6e67      	ldr	r7, [r4, #100]	; 0x64
   838aa:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
   838ae:	f447 5300 	orr.w	r3, r7, #8192	; 0x2000
   838b2:	81a1      	strh	r1, [r4, #12]
   838b4:	6663      	str	r3, [r4, #100]	; 0x64
   838b6:	f000 fb29 	bl	83f0c <__locale_mb_cur_max>
   838ba:	2801      	cmp	r0, #1
   838bc:	d106      	bne.n	838cc <_fputwc_r+0x38>
   838be:	b12e      	cbz	r6, 838cc <_fputwc_r+0x38>
   838c0:	2eff      	cmp	r6, #255	; 0xff
   838c2:	d803      	bhi.n	838cc <_fputwc_r+0x38>
   838c4:	f88d 6004 	strb.w	r6, [sp, #4]
   838c8:	4607      	mov	r7, r0
   838ca:	e00f      	b.n	838ec <_fputwc_r+0x58>
   838cc:	4632      	mov	r2, r6
   838ce:	4640      	mov	r0, r8
   838d0:	a901      	add	r1, sp, #4
   838d2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   838d6:	f000 ffaf 	bl	84838 <_wcrtomb_r>
   838da:	1c42      	adds	r2, r0, #1
   838dc:	4607      	mov	r7, r0
   838de:	d105      	bne.n	838ec <_fputwc_r+0x58>
   838e0:	89a2      	ldrh	r2, [r4, #12]
   838e2:	f042 0040 	orr.w	r0, r2, #64	; 0x40
   838e6:	81a0      	strh	r0, [r4, #12]
   838e8:	4638      	mov	r0, r7
   838ea:	e031      	b.n	83950 <_fputwc_r+0xbc>
   838ec:	2500      	movs	r5, #0
   838ee:	42bd      	cmp	r5, r7
   838f0:	d02a      	beq.n	83948 <_fputwc_r+0xb4>
   838f2:	68a1      	ldr	r1, [r4, #8]
   838f4:	ab01      	add	r3, sp, #4
   838f6:	1e4a      	subs	r2, r1, #1
   838f8:	2a00      	cmp	r2, #0
   838fa:	60a2      	str	r2, [r4, #8]
   838fc:	da1a      	bge.n	83934 <_fputwc_r+0xa0>
   838fe:	69a0      	ldr	r0, [r4, #24]
   83900:	4282      	cmp	r2, r0
   83902:	db0c      	blt.n	8391e <_fputwc_r+0x8a>
   83904:	6821      	ldr	r1, [r4, #0]
   83906:	5d5a      	ldrb	r2, [r3, r5]
   83908:	700a      	strb	r2, [r1, #0]
   8390a:	6823      	ldr	r3, [r4, #0]
   8390c:	7819      	ldrb	r1, [r3, #0]
   8390e:	290a      	cmp	r1, #10
   83910:	d003      	beq.n	8391a <_fputwc_r+0x86>
   83912:	3301      	adds	r3, #1
   83914:	2200      	movs	r2, #0
   83916:	6023      	str	r3, [r4, #0]
   83918:	e013      	b.n	83942 <_fputwc_r+0xae>
   8391a:	4640      	mov	r0, r8
   8391c:	e001      	b.n	83922 <_fputwc_r+0x8e>
   8391e:	5d59      	ldrb	r1, [r3, r5]
   83920:	4640      	mov	r0, r8
   83922:	4622      	mov	r2, r4
   83924:	f7ff fd82 	bl	8342c <__swbuf_r>
   83928:	f1b0 31ff 	subs.w	r1, r0, #4294967295
   8392c:	4248      	negs	r0, r1
   8392e:	eb50 0201 	adcs.w	r2, r0, r1
   83932:	e006      	b.n	83942 <_fputwc_r+0xae>
   83934:	6820      	ldr	r0, [r4, #0]
   83936:	5d59      	ldrb	r1, [r3, r5]
   83938:	7001      	strb	r1, [r0, #0]
   8393a:	6822      	ldr	r2, [r4, #0]
   8393c:	1c53      	adds	r3, r2, #1
   8393e:	6023      	str	r3, [r4, #0]
   83940:	e000      	b.n	83944 <_fputwc_r+0xb0>
   83942:	b91a      	cbnz	r2, 8394c <_fputwc_r+0xb8>
   83944:	3501      	adds	r5, #1
   83946:	e7d2      	b.n	838ee <_fputwc_r+0x5a>
   83948:	4630      	mov	r0, r6
   8394a:	e001      	b.n	83950 <_fputwc_r+0xbc>
   8394c:	f04f 30ff 	mov.w	r0, #4294967295
   83950:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

00083954 <fputwc>:
   83954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83956:	4c08      	ldr	r4, [pc, #32]	; (83978 <fputwc+0x24>)
   83958:	4607      	mov	r7, r0
   8395a:	6820      	ldr	r0, [r4, #0]
   8395c:	460e      	mov	r6, r1
   8395e:	b118      	cbz	r0, 83968 <fputwc+0x14>
   83960:	6b85      	ldr	r5, [r0, #56]	; 0x38
   83962:	b90d      	cbnz	r5, 83968 <fputwc+0x14>
   83964:	f7ff ff1a 	bl	8379c <__sinit>
   83968:	6820      	ldr	r0, [r4, #0]
   8396a:	4639      	mov	r1, r7
   8396c:	4632      	mov	r2, r6
   8396e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   83972:	f7ff bf8f 	b.w	83894 <_fputwc_r>
   83976:	bf00      	nop
   83978:	20070018 	.word	0x20070018

0008397c <_malloc_trim_r>:
   8397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8397e:	4d23      	ldr	r5, [pc, #140]	; (83a0c <_malloc_trim_r+0x90>)
   83980:	460e      	mov	r6, r1
   83982:	4604      	mov	r4, r0
   83984:	f000 fd86 	bl	84494 <__malloc_lock>
   83988:	68ab      	ldr	r3, [r5, #8]
   8398a:	685f      	ldr	r7, [r3, #4]
   8398c:	f027 0703 	bic.w	r7, r7, #3
   83990:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
   83994:	1b81      	subs	r1, r0, r6
   83996:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   8399a:	f022 060f 	bic.w	r6, r2, #15
   8399e:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   839a2:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   839a6:	da04      	bge.n	839b2 <_malloc_trim_r+0x36>
   839a8:	4620      	mov	r0, r4
   839aa:	f000 fd74 	bl	84496 <__malloc_unlock>
   839ae:	2000      	movs	r0, #0
   839b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   839b2:	2100      	movs	r1, #0
   839b4:	4620      	mov	r0, r4
   839b6:	f000 fedd 	bl	84774 <_sbrk_r>
   839ba:	68ab      	ldr	r3, [r5, #8]
   839bc:	19d9      	adds	r1, r3, r7
   839be:	4288      	cmp	r0, r1
   839c0:	d1f2      	bne.n	839a8 <_malloc_trim_r+0x2c>
   839c2:	4271      	negs	r1, r6
   839c4:	4620      	mov	r0, r4
   839c6:	f000 fed5 	bl	84774 <_sbrk_r>
   839ca:	3001      	adds	r0, #1
   839cc:	d110      	bne.n	839f0 <_malloc_trim_r+0x74>
   839ce:	2100      	movs	r1, #0
   839d0:	4620      	mov	r0, r4
   839d2:	f000 fecf 	bl	84774 <_sbrk_r>
   839d6:	68ab      	ldr	r3, [r5, #8]
   839d8:	1ac2      	subs	r2, r0, r3
   839da:	2a0f      	cmp	r2, #15
   839dc:	dde4      	ble.n	839a8 <_malloc_trim_r+0x2c>
   839de:	490c      	ldr	r1, [pc, #48]	; (83a10 <_malloc_trim_r+0x94>)
   839e0:	f042 0201 	orr.w	r2, r2, #1
   839e4:	6809      	ldr	r1, [r1, #0]
   839e6:	605a      	str	r2, [r3, #4]
   839e8:	1a40      	subs	r0, r0, r1
   839ea:	490a      	ldr	r1, [pc, #40]	; (83a14 <_malloc_trim_r+0x98>)
   839ec:	6008      	str	r0, [r1, #0]
   839ee:	e7db      	b.n	839a8 <_malloc_trim_r+0x2c>
   839f0:	4b08      	ldr	r3, [pc, #32]	; (83a14 <_malloc_trim_r+0x98>)
   839f2:	68a8      	ldr	r0, [r5, #8]
   839f4:	681a      	ldr	r2, [r3, #0]
   839f6:	1bbf      	subs	r7, r7, r6
   839f8:	f047 0701 	orr.w	r7, r7, #1
   839fc:	6047      	str	r7, [r0, #4]
   839fe:	1b96      	subs	r6, r2, r6
   83a00:	4620      	mov	r0, r4
   83a02:	601e      	str	r6, [r3, #0]
   83a04:	f000 fd47 	bl	84496 <__malloc_unlock>
   83a08:	2001      	movs	r0, #1
   83a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a0c:	200704c4 	.word	0x200704c4
   83a10:	200708cc 	.word	0x200708cc
   83a14:	200709f4 	.word	0x200709f4

00083a18 <_free_r>:
   83a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83a1a:	4606      	mov	r6, r0
   83a1c:	460d      	mov	r5, r1
   83a1e:	2900      	cmp	r1, #0
   83a20:	f000 80a6 	beq.w	83b70 <_free_r+0x158>
   83a24:	f000 fd36 	bl	84494 <__malloc_lock>
   83a28:	f855 cc04 	ldr.w	ip, [r5, #-4]
   83a2c:	4f51      	ldr	r7, [pc, #324]	; (83b74 <_free_r+0x15c>)
   83a2e:	f1a5 0308 	sub.w	r3, r5, #8
   83a32:	f02c 0201 	bic.w	r2, ip, #1
   83a36:	189c      	adds	r4, r3, r2
   83a38:	68b9      	ldr	r1, [r7, #8]
   83a3a:	6860      	ldr	r0, [r4, #4]
   83a3c:	428c      	cmp	r4, r1
   83a3e:	f020 0003 	bic.w	r0, r0, #3
   83a42:	f00c 0101 	and.w	r1, ip, #1
   83a46:	d11c      	bne.n	83a82 <_free_r+0x6a>
   83a48:	1882      	adds	r2, r0, r2
   83a4a:	b939      	cbnz	r1, 83a5c <_free_r+0x44>
   83a4c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   83a50:	1a5b      	subs	r3, r3, r1
   83a52:	6898      	ldr	r0, [r3, #8]
   83a54:	1852      	adds	r2, r2, r1
   83a56:	68d9      	ldr	r1, [r3, #12]
   83a58:	60c1      	str	r1, [r0, #12]
   83a5a:	6088      	str	r0, [r1, #8]
   83a5c:	4845      	ldr	r0, [pc, #276]	; (83b74 <_free_r+0x15c>)
   83a5e:	f042 0101 	orr.w	r1, r2, #1
   83a62:	6059      	str	r1, [r3, #4]
   83a64:	6083      	str	r3, [r0, #8]
   83a66:	4b44      	ldr	r3, [pc, #272]	; (83b78 <_free_r+0x160>)
   83a68:	6819      	ldr	r1, [r3, #0]
   83a6a:	428a      	cmp	r2, r1
   83a6c:	d304      	bcc.n	83a78 <_free_r+0x60>
   83a6e:	4a43      	ldr	r2, [pc, #268]	; (83b7c <_free_r+0x164>)
   83a70:	4630      	mov	r0, r6
   83a72:	6811      	ldr	r1, [r2, #0]
   83a74:	f7ff ff82 	bl	8397c <_malloc_trim_r>
   83a78:	4630      	mov	r0, r6
   83a7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   83a7e:	f000 bd0a 	b.w	84496 <__malloc_unlock>
   83a82:	6060      	str	r0, [r4, #4]
   83a84:	b959      	cbnz	r1, 83a9e <_free_r+0x86>
   83a86:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83a8a:	3708      	adds	r7, #8
   83a8c:	1b5b      	subs	r3, r3, r5
   83a8e:	1952      	adds	r2, r2, r5
   83a90:	689d      	ldr	r5, [r3, #8]
   83a92:	42bd      	cmp	r5, r7
   83a94:	d005      	beq.n	83aa2 <_free_r+0x8a>
   83a96:	68df      	ldr	r7, [r3, #12]
   83a98:	60ef      	str	r7, [r5, #12]
   83a9a:	60bd      	str	r5, [r7, #8]
   83a9c:	e002      	b.n	83aa4 <_free_r+0x8c>
   83a9e:	2100      	movs	r1, #0
   83aa0:	e000      	b.n	83aa4 <_free_r+0x8c>
   83aa2:	2101      	movs	r1, #1
   83aa4:	1825      	adds	r5, r4, r0
   83aa6:	686d      	ldr	r5, [r5, #4]
   83aa8:	f015 0f01 	tst.w	r5, #1
   83aac:	d10f      	bne.n	83ace <_free_r+0xb6>
   83aae:	1812      	adds	r2, r2, r0
   83ab0:	b949      	cbnz	r1, 83ac6 <_free_r+0xae>
   83ab2:	68a0      	ldr	r0, [r4, #8]
   83ab4:	4d32      	ldr	r5, [pc, #200]	; (83b80 <_free_r+0x168>)
   83ab6:	42a8      	cmp	r0, r5
   83ab8:	d105      	bne.n	83ac6 <_free_r+0xae>
   83aba:	60eb      	str	r3, [r5, #12]
   83abc:	60ab      	str	r3, [r5, #8]
   83abe:	60d8      	str	r0, [r3, #12]
   83ac0:	6098      	str	r0, [r3, #8]
   83ac2:	2101      	movs	r1, #1
   83ac4:	e003      	b.n	83ace <_free_r+0xb6>
   83ac6:	68e0      	ldr	r0, [r4, #12]
   83ac8:	68a4      	ldr	r4, [r4, #8]
   83aca:	60e0      	str	r0, [r4, #12]
   83acc:	6084      	str	r4, [r0, #8]
   83ace:	f042 0001 	orr.w	r0, r2, #1
   83ad2:	6058      	str	r0, [r3, #4]
   83ad4:	509a      	str	r2, [r3, r2]
   83ad6:	2900      	cmp	r1, #0
   83ad8:	d1ce      	bne.n	83a78 <_free_r+0x60>
   83ada:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   83ade:	d20c      	bcs.n	83afa <_free_r+0xe2>
   83ae0:	08d2      	lsrs	r2, r2, #3
   83ae2:	1090      	asrs	r0, r2, #2
   83ae4:	2401      	movs	r4, #1
   83ae6:	fa04 f400 	lsl.w	r4, r4, r0
   83aea:	4922      	ldr	r1, [pc, #136]	; (83b74 <_free_r+0x15c>)
   83aec:	6848      	ldr	r0, [r1, #4]
   83aee:	4320      	orrs	r0, r4
   83af0:	6048      	str	r0, [r1, #4]
   83af2:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   83af6:	6881      	ldr	r1, [r0, #8]
   83af8:	e035      	b.n	83b66 <_free_r+0x14e>
   83afa:	0a54      	lsrs	r4, r2, #9
   83afc:	2c04      	cmp	r4, #4
   83afe:	d802      	bhi.n	83b06 <_free_r+0xee>
   83b00:	0994      	lsrs	r4, r2, #6
   83b02:	3438      	adds	r4, #56	; 0x38
   83b04:	e016      	b.n	83b34 <_free_r+0x11c>
   83b06:	2c14      	cmp	r4, #20
   83b08:	d801      	bhi.n	83b0e <_free_r+0xf6>
   83b0a:	345b      	adds	r4, #91	; 0x5b
   83b0c:	e012      	b.n	83b34 <_free_r+0x11c>
   83b0e:	2c54      	cmp	r4, #84	; 0x54
   83b10:	d802      	bhi.n	83b18 <_free_r+0x100>
   83b12:	0b14      	lsrs	r4, r2, #12
   83b14:	346e      	adds	r4, #110	; 0x6e
   83b16:	e00d      	b.n	83b34 <_free_r+0x11c>
   83b18:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
   83b1c:	d802      	bhi.n	83b24 <_free_r+0x10c>
   83b1e:	0bd4      	lsrs	r4, r2, #15
   83b20:	3477      	adds	r4, #119	; 0x77
   83b22:	e007      	b.n	83b34 <_free_r+0x11c>
   83b24:	f240 5554 	movw	r5, #1364	; 0x554
   83b28:	42ac      	cmp	r4, r5
   83b2a:	d802      	bhi.n	83b32 <_free_r+0x11a>
   83b2c:	0c94      	lsrs	r4, r2, #18
   83b2e:	347c      	adds	r4, #124	; 0x7c
   83b30:	e000      	b.n	83b34 <_free_r+0x11c>
   83b32:	247e      	movs	r4, #126	; 0x7e
   83b34:	4d0f      	ldr	r5, [pc, #60]	; (83b74 <_free_r+0x15c>)
   83b36:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   83b3a:	6881      	ldr	r1, [r0, #8]
   83b3c:	4281      	cmp	r1, r0
   83b3e:	d10c      	bne.n	83b5a <_free_r+0x142>
   83b40:	2201      	movs	r2, #1
   83b42:	10a4      	asrs	r4, r4, #2
   83b44:	fa02 f404 	lsl.w	r4, r2, r4
   83b48:	6868      	ldr	r0, [r5, #4]
   83b4a:	ea44 0200 	orr.w	r2, r4, r0
   83b4e:	606a      	str	r2, [r5, #4]
   83b50:	4608      	mov	r0, r1
   83b52:	e008      	b.n	83b66 <_free_r+0x14e>
   83b54:	6889      	ldr	r1, [r1, #8]
   83b56:	4281      	cmp	r1, r0
   83b58:	d004      	beq.n	83b64 <_free_r+0x14c>
   83b5a:	684c      	ldr	r4, [r1, #4]
   83b5c:	f024 0403 	bic.w	r4, r4, #3
   83b60:	42a2      	cmp	r2, r4
   83b62:	d3f7      	bcc.n	83b54 <_free_r+0x13c>
   83b64:	68c8      	ldr	r0, [r1, #12]
   83b66:	60d8      	str	r0, [r3, #12]
   83b68:	6099      	str	r1, [r3, #8]
   83b6a:	6083      	str	r3, [r0, #8]
   83b6c:	60cb      	str	r3, [r1, #12]
   83b6e:	e783      	b.n	83a78 <_free_r+0x60>
   83b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83b72:	bf00      	nop
   83b74:	200704c4 	.word	0x200704c4
   83b78:	200708d0 	.word	0x200708d0
   83b7c:	200709f0 	.word	0x200709f0
   83b80:	200704cc 	.word	0x200704cc

00083b84 <__sfvwrite_r>:
   83b84:	6893      	ldr	r3, [r2, #8]
   83b86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83b8a:	4606      	mov	r6, r0
   83b8c:	460c      	mov	r4, r1
   83b8e:	4691      	mov	r9, r2
   83b90:	b90b      	cbnz	r3, 83b96 <__sfvwrite_r+0x12>
   83b92:	2000      	movs	r0, #0
   83b94:	e14f      	b.n	83e36 <__sfvwrite_r+0x2b2>
   83b96:	8988      	ldrh	r0, [r1, #12]
   83b98:	f000 0108 	and.w	r1, r0, #8
   83b9c:	b20a      	sxth	r2, r1
   83b9e:	b10a      	cbz	r2, 83ba4 <__sfvwrite_r+0x20>
   83ba0:	6923      	ldr	r3, [r4, #16]
   83ba2:	b95b      	cbnz	r3, 83bbc <__sfvwrite_r+0x38>
   83ba4:	4630      	mov	r0, r6
   83ba6:	4621      	mov	r1, r4
   83ba8:	f7ff fc9a 	bl	834e0 <__swsetup_r>
   83bac:	b130      	cbz	r0, 83bbc <__sfvwrite_r+0x38>
   83bae:	89a1      	ldrh	r1, [r4, #12]
   83bb0:	2209      	movs	r2, #9
   83bb2:	f041 0040 	orr.w	r0, r1, #64	; 0x40
   83bb6:	81a0      	strh	r0, [r4, #12]
   83bb8:	6032      	str	r2, [r6, #0]
   83bba:	e13a      	b.n	83e32 <__sfvwrite_r+0x2ae>
   83bbc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
   83bc0:	f8d9 8000 	ldr.w	r8, [r9]
   83bc4:	f00a 0c02 	and.w	ip, sl, #2
   83bc8:	fa0f f58c 	sxth.w	r5, ip
   83bcc:	b315      	cbz	r5, 83c14 <__sfvwrite_r+0x90>
   83bce:	f04f 0a00 	mov.w	sl, #0
   83bd2:	4657      	mov	r7, sl
   83bd4:	b937      	cbnz	r7, 83be4 <__sfvwrite_r+0x60>
   83bd6:	f8d8 a000 	ldr.w	sl, [r8]
   83bda:	f8d8 7004 	ldr.w	r7, [r8, #4]
   83bde:	f108 0808 	add.w	r8, r8, #8
   83be2:	e7f7      	b.n	83bd4 <__sfvwrite_r+0x50>
   83be4:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   83be8:	bf34      	ite	cc
   83bea:	463b      	movcc	r3, r7
   83bec:	f44f 6380 	movcs.w	r3, #1024	; 0x400
   83bf0:	4630      	mov	r0, r6
   83bf2:	69e1      	ldr	r1, [r4, #28]
   83bf4:	4652      	mov	r2, sl
   83bf6:	6a65      	ldr	r5, [r4, #36]	; 0x24
   83bf8:	47a8      	blx	r5
   83bfa:	2800      	cmp	r0, #0
   83bfc:	f340 8115 	ble.w	83e2a <__sfvwrite_r+0x2a6>
   83c00:	f8d9 1008 	ldr.w	r1, [r9, #8]
   83c04:	4482      	add	sl, r0
   83c06:	1a3f      	subs	r7, r7, r0
   83c08:	1a08      	subs	r0, r1, r0
   83c0a:	f8c9 0008 	str.w	r0, [r9, #8]
   83c0e:	2800      	cmp	r0, #0
   83c10:	d1e0      	bne.n	83bd4 <__sfvwrite_r+0x50>
   83c12:	e7be      	b.n	83b92 <__sfvwrite_r+0xe>
   83c14:	f01a 0a01 	ands.w	sl, sl, #1
   83c18:	d004      	beq.n	83c24 <__sfvwrite_r+0xa0>
   83c1a:	46ab      	mov	fp, r5
   83c1c:	9501      	str	r5, [sp, #4]
   83c1e:	462f      	mov	r7, r5
   83c20:	46aa      	mov	sl, r5
   83c22:	e0c7      	b.n	83db4 <__sfvwrite_r+0x230>
   83c24:	4655      	mov	r5, sl
   83c26:	b935      	cbnz	r5, 83c36 <__sfvwrite_r+0xb2>
   83c28:	f8d8 a000 	ldr.w	sl, [r8]
   83c2c:	f8d8 5004 	ldr.w	r5, [r8, #4]
   83c30:	f108 0808 	add.w	r8, r8, #8
   83c34:	e7f7      	b.n	83c26 <__sfvwrite_r+0xa2>
   83c36:	89a2      	ldrh	r2, [r4, #12]
   83c38:	f8d4 b008 	ldr.w	fp, [r4, #8]
   83c3c:	f402 7000 	and.w	r0, r2, #512	; 0x200
   83c40:	b203      	sxth	r3, r0
   83c42:	2b00      	cmp	r3, #0
   83c44:	d052      	beq.n	83cec <__sfvwrite_r+0x168>
   83c46:	455d      	cmp	r5, fp
   83c48:	d340      	bcc.n	83ccc <__sfvwrite_r+0x148>
   83c4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
   83c4e:	d03b      	beq.n	83cc8 <__sfvwrite_r+0x144>
   83c50:	6963      	ldr	r3, [r4, #20]
   83c52:	f04f 0b03 	mov.w	fp, #3
   83c56:	fb0b f303 	mul.w	r3, fp, r3
   83c5a:	6921      	ldr	r1, [r4, #16]
   83c5c:	6827      	ldr	r7, [r4, #0]
   83c5e:	2002      	movs	r0, #2
   83c60:	1a7f      	subs	r7, r7, r1
   83c62:	fb93 fcf0 	sdiv	ip, r3, r0
   83c66:	1c7b      	adds	r3, r7, #1
   83c68:	1958      	adds	r0, r3, r5
   83c6a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   83c6e:	4584      	cmp	ip, r0
   83c70:	bf28      	it	cs
   83c72:	4660      	movcs	r0, ip
   83c74:	b213      	sxth	r3, r2
   83c76:	9001      	str	r0, [sp, #4]
   83c78:	4630      	mov	r0, r6
   83c7a:	b17b      	cbz	r3, 83c9c <__sfvwrite_r+0x118>
   83c7c:	9901      	ldr	r1, [sp, #4]
   83c7e:	f000 f9df 	bl	84040 <_malloc_r>
   83c82:	4683      	mov	fp, r0
   83c84:	b198      	cbz	r0, 83cae <__sfvwrite_r+0x12a>
   83c86:	6921      	ldr	r1, [r4, #16]
   83c88:	463a      	mov	r2, r7
   83c8a:	f7fe fe9f 	bl	829cc <memcpy>
   83c8e:	89a1      	ldrh	r1, [r4, #12]
   83c90:	f421 6090 	bic.w	r0, r1, #1152	; 0x480
   83c94:	f040 0280 	orr.w	r2, r0, #128	; 0x80
   83c98:	81a2      	strh	r2, [r4, #12]
   83c9a:	e00b      	b.n	83cb4 <__sfvwrite_r+0x130>
   83c9c:	9a01      	ldr	r2, [sp, #4]
   83c9e:	f000 fbfb 	bl	84498 <_realloc_r>
   83ca2:	4683      	mov	fp, r0
   83ca4:	b930      	cbnz	r0, 83cb4 <__sfvwrite_r+0x130>
   83ca6:	4630      	mov	r0, r6
   83ca8:	6921      	ldr	r1, [r4, #16]
   83caa:	f7ff feb5 	bl	83a18 <_free_r>
   83cae:	230c      	movs	r3, #12
   83cb0:	6033      	str	r3, [r6, #0]
   83cb2:	e0ba      	b.n	83e2a <__sfvwrite_r+0x2a6>
   83cb4:	9901      	ldr	r1, [sp, #4]
   83cb6:	eb0b 0307 	add.w	r3, fp, r7
   83cba:	1bcf      	subs	r7, r1, r7
   83cbc:	f8c4 b010 	str.w	fp, [r4, #16]
   83cc0:	6023      	str	r3, [r4, #0]
   83cc2:	6161      	str	r1, [r4, #20]
   83cc4:	46ab      	mov	fp, r5
   83cc6:	60a7      	str	r7, [r4, #8]
   83cc8:	455d      	cmp	r5, fp
   83cca:	d200      	bcs.n	83cce <__sfvwrite_r+0x14a>
   83ccc:	46ab      	mov	fp, r5
   83cce:	465a      	mov	r2, fp
   83cd0:	4651      	mov	r1, sl
   83cd2:	6820      	ldr	r0, [r4, #0]
   83cd4:	f000 fbc4 	bl	84460 <memmove>
   83cd8:	68a0      	ldr	r0, [r4, #8]
   83cda:	6823      	ldr	r3, [r4, #0]
   83cdc:	ebcb 0200 	rsb	r2, fp, r0
   83ce0:	eb03 010b 	add.w	r1, r3, fp
   83ce4:	60a2      	str	r2, [r4, #8]
   83ce6:	6021      	str	r1, [r4, #0]
   83ce8:	46ab      	mov	fp, r5
   83cea:	e02a      	b.n	83d42 <__sfvwrite_r+0x1be>
   83cec:	6820      	ldr	r0, [r4, #0]
   83cee:	6921      	ldr	r1, [r4, #16]
   83cf0:	4288      	cmp	r0, r1
   83cf2:	d90f      	bls.n	83d14 <__sfvwrite_r+0x190>
   83cf4:	455d      	cmp	r5, fp
   83cf6:	d90d      	bls.n	83d14 <__sfvwrite_r+0x190>
   83cf8:	4651      	mov	r1, sl
   83cfa:	465a      	mov	r2, fp
   83cfc:	f000 fbb0 	bl	84460 <memmove>
   83d00:	6822      	ldr	r2, [r4, #0]
   83d02:	4621      	mov	r1, r4
   83d04:	eb02 000b 	add.w	r0, r2, fp
   83d08:	6020      	str	r0, [r4, #0]
   83d0a:	4630      	mov	r0, r6
   83d0c:	f7ff fc54 	bl	835b8 <_fflush_r>
   83d10:	b1b8      	cbz	r0, 83d42 <__sfvwrite_r+0x1be>
   83d12:	e08a      	b.n	83e2a <__sfvwrite_r+0x2a6>
   83d14:	6963      	ldr	r3, [r4, #20]
   83d16:	429d      	cmp	r5, r3
   83d18:	d308      	bcc.n	83d2c <__sfvwrite_r+0x1a8>
   83d1a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83d1c:	4630      	mov	r0, r6
   83d1e:	69e1      	ldr	r1, [r4, #28]
   83d20:	4652      	mov	r2, sl
   83d22:	47b8      	blx	r7
   83d24:	f1b0 0b00 	subs.w	fp, r0, #0
   83d28:	dc0b      	bgt.n	83d42 <__sfvwrite_r+0x1be>
   83d2a:	e07e      	b.n	83e2a <__sfvwrite_r+0x2a6>
   83d2c:	4651      	mov	r1, sl
   83d2e:	462a      	mov	r2, r5
   83d30:	f000 fb96 	bl	84460 <memmove>
   83d34:	68a2      	ldr	r2, [r4, #8]
   83d36:	6823      	ldr	r3, [r4, #0]
   83d38:	1b50      	subs	r0, r2, r5
   83d3a:	1959      	adds	r1, r3, r5
   83d3c:	46ab      	mov	fp, r5
   83d3e:	60a0      	str	r0, [r4, #8]
   83d40:	6021      	str	r1, [r4, #0]
   83d42:	f8d9 0008 	ldr.w	r0, [r9, #8]
   83d46:	44da      	add	sl, fp
   83d48:	ebcb 0200 	rsb	r2, fp, r0
   83d4c:	ebcb 0505 	rsb	r5, fp, r5
   83d50:	f8c9 2008 	str.w	r2, [r9, #8]
   83d54:	2a00      	cmp	r2, #0
   83d56:	f47f af66 	bne.w	83c26 <__sfvwrite_r+0xa2>
   83d5a:	e71a      	b.n	83b92 <__sfvwrite_r+0xe>
   83d5c:	9801      	ldr	r0, [sp, #4]
   83d5e:	2800      	cmp	r0, #0
   83d60:	d032      	beq.n	83dc8 <__sfvwrite_r+0x244>
   83d62:	6820      	ldr	r0, [r4, #0]
   83d64:	6921      	ldr	r1, [r4, #16]
   83d66:	45d3      	cmp	fp, sl
   83d68:	bf34      	ite	cc
   83d6a:	465b      	movcc	r3, fp
   83d6c:	4653      	movcs	r3, sl
   83d6e:	4288      	cmp	r0, r1
   83d70:	68a5      	ldr	r5, [r4, #8]
   83d72:	f8d4 e014 	ldr.w	lr, [r4, #20]
   83d76:	d937      	bls.n	83de8 <__sfvwrite_r+0x264>
   83d78:	4475      	add	r5, lr
   83d7a:	42ab      	cmp	r3, r5
   83d7c:	dd34      	ble.n	83de8 <__sfvwrite_r+0x264>
   83d7e:	4639      	mov	r1, r7
   83d80:	462a      	mov	r2, r5
   83d82:	f000 fb6d 	bl	84460 <memmove>
   83d86:	6820      	ldr	r0, [r4, #0]
   83d88:	4621      	mov	r1, r4
   83d8a:	1943      	adds	r3, r0, r5
   83d8c:	6023      	str	r3, [r4, #0]
   83d8e:	4630      	mov	r0, r6
   83d90:	f7ff fc12 	bl	835b8 <_fflush_r>
   83d94:	2800      	cmp	r0, #0
   83d96:	d148      	bne.n	83e2a <__sfvwrite_r+0x2a6>
   83d98:	ebbb 0b05 	subs.w	fp, fp, r5
   83d9c:	d03d      	beq.n	83e1a <__sfvwrite_r+0x296>
   83d9e:	f8d9 2008 	ldr.w	r2, [r9, #8]
   83da2:	197f      	adds	r7, r7, r5
   83da4:	ebc5 0a0a 	rsb	sl, r5, sl
   83da8:	1b55      	subs	r5, r2, r5
   83daa:	f8c9 5008 	str.w	r5, [r9, #8]
   83dae:	2d00      	cmp	r5, #0
   83db0:	f43f aeef 	beq.w	83b92 <__sfvwrite_r+0xe>
   83db4:	f1ba 0f00 	cmp.w	sl, #0
   83db8:	d1d0      	bne.n	83d5c <__sfvwrite_r+0x1d8>
   83dba:	2100      	movs	r1, #0
   83dbc:	e898 0480 	ldmia.w	r8, {r7, sl}
   83dc0:	9101      	str	r1, [sp, #4]
   83dc2:	f108 0808 	add.w	r8, r8, #8
   83dc6:	e7f5      	b.n	83db4 <__sfvwrite_r+0x230>
   83dc8:	4638      	mov	r0, r7
   83dca:	210a      	movs	r1, #10
   83dcc:	4652      	mov	r2, sl
   83dce:	f000 fb39 	bl	84444 <memchr>
   83dd2:	b120      	cbz	r0, 83dde <__sfvwrite_r+0x25a>
   83dd4:	f100 0101 	add.w	r1, r0, #1
   83dd8:	ebc7 0b01 	rsb	fp, r7, r1
   83ddc:	e001      	b.n	83de2 <__sfvwrite_r+0x25e>
   83dde:	f10a 0b01 	add.w	fp, sl, #1
   83de2:	2201      	movs	r2, #1
   83de4:	9201      	str	r2, [sp, #4]
   83de6:	e7bc      	b.n	83d62 <__sfvwrite_r+0x1de>
   83de8:	4573      	cmp	r3, lr
   83dea:	db08      	blt.n	83dfe <__sfvwrite_r+0x27a>
   83dec:	6a65      	ldr	r5, [r4, #36]	; 0x24
   83dee:	4630      	mov	r0, r6
   83df0:	69e1      	ldr	r1, [r4, #28]
   83df2:	463a      	mov	r2, r7
   83df4:	4673      	mov	r3, lr
   83df6:	47a8      	blx	r5
   83df8:	1e05      	subs	r5, r0, #0
   83dfa:	dccd      	bgt.n	83d98 <__sfvwrite_r+0x214>
   83dfc:	e015      	b.n	83e2a <__sfvwrite_r+0x2a6>
   83dfe:	461a      	mov	r2, r3
   83e00:	4639      	mov	r1, r7
   83e02:	9300      	str	r3, [sp, #0]
   83e04:	f000 fb2c 	bl	84460 <memmove>
   83e08:	9b00      	ldr	r3, [sp, #0]
   83e0a:	6825      	ldr	r5, [r4, #0]
   83e0c:	68a0      	ldr	r0, [r4, #8]
   83e0e:	18e9      	adds	r1, r5, r3
   83e10:	1ac2      	subs	r2, r0, r3
   83e12:	60a2      	str	r2, [r4, #8]
   83e14:	6021      	str	r1, [r4, #0]
   83e16:	461d      	mov	r5, r3
   83e18:	e7be      	b.n	83d98 <__sfvwrite_r+0x214>
   83e1a:	4630      	mov	r0, r6
   83e1c:	4621      	mov	r1, r4
   83e1e:	f7ff fbcb 	bl	835b8 <_fflush_r>
   83e22:	b910      	cbnz	r0, 83e2a <__sfvwrite_r+0x2a6>
   83e24:	f8cd b004 	str.w	fp, [sp, #4]
   83e28:	e7b9      	b.n	83d9e <__sfvwrite_r+0x21a>
   83e2a:	89a2      	ldrh	r2, [r4, #12]
   83e2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   83e30:	81a3      	strh	r3, [r4, #12]
   83e32:	f04f 30ff 	mov.w	r0, #4294967295
   83e36:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00083e3a <_fwalk>:
   83e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83e3e:	4604      	mov	r4, r0
   83e40:	4688      	mov	r8, r1
   83e42:	f7ff fd0f 	bl	83864 <__sfp_lock_acquire>
   83e46:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
   83e4a:	2600      	movs	r6, #0
   83e4c:	b18c      	cbz	r4, 83e72 <_fwalk+0x38>
   83e4e:	68a5      	ldr	r5, [r4, #8]
   83e50:	6867      	ldr	r7, [r4, #4]
   83e52:	3f01      	subs	r7, #1
   83e54:	d40b      	bmi.n	83e6e <_fwalk+0x34>
   83e56:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   83e5a:	b133      	cbz	r3, 83e6a <_fwalk+0x30>
   83e5c:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   83e60:	1c43      	adds	r3, r0, #1
   83e62:	d002      	beq.n	83e6a <_fwalk+0x30>
   83e64:	4628      	mov	r0, r5
   83e66:	47c0      	blx	r8
   83e68:	4306      	orrs	r6, r0
   83e6a:	3568      	adds	r5, #104	; 0x68
   83e6c:	e7f1      	b.n	83e52 <_fwalk+0x18>
   83e6e:	6824      	ldr	r4, [r4, #0]
   83e70:	e7ec      	b.n	83e4c <_fwalk+0x12>
   83e72:	f7ff fcf8 	bl	83866 <__sfp_lock_release>
   83e76:	4630      	mov	r0, r6
   83e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083e7c <_fwalk_reent>:
   83e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83e80:	4680      	mov	r8, r0
   83e82:	4689      	mov	r9, r1
   83e84:	f7ff fcee 	bl	83864 <__sfp_lock_acquire>
   83e88:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
   83e8c:	2600      	movs	r6, #0
   83e8e:	b194      	cbz	r4, 83eb6 <_fwalk_reent+0x3a>
   83e90:	68a5      	ldr	r5, [r4, #8]
   83e92:	6867      	ldr	r7, [r4, #4]
   83e94:	3f01      	subs	r7, #1
   83e96:	d40c      	bmi.n	83eb2 <_fwalk_reent+0x36>
   83e98:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   83e9c:	b13b      	cbz	r3, 83eae <_fwalk_reent+0x32>
   83e9e:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   83ea2:	1c43      	adds	r3, r0, #1
   83ea4:	d003      	beq.n	83eae <_fwalk_reent+0x32>
   83ea6:	4640      	mov	r0, r8
   83ea8:	4629      	mov	r1, r5
   83eaa:	47c8      	blx	r9
   83eac:	4306      	orrs	r6, r0
   83eae:	3568      	adds	r5, #104	; 0x68
   83eb0:	e7f0      	b.n	83e94 <_fwalk_reent+0x18>
   83eb2:	6824      	ldr	r4, [r4, #0]
   83eb4:	e7eb      	b.n	83e8e <_fwalk_reent+0x12>
   83eb6:	f7ff fcd6 	bl	83866 <__sfp_lock_release>
   83eba:	4630      	mov	r0, r6
   83ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00083ec0 <_setlocale_r>:
   83ec0:	b510      	push	{r4, lr}
   83ec2:	4614      	mov	r4, r2
   83ec4:	b90a      	cbnz	r2, 83eca <_setlocale_r+0xa>
   83ec6:	480c      	ldr	r0, [pc, #48]	; (83ef8 <_setlocale_r+0x38>)
   83ec8:	bd10      	pop	{r4, pc}
   83eca:	4610      	mov	r0, r2
   83ecc:	490b      	ldr	r1, [pc, #44]	; (83efc <_setlocale_r+0x3c>)
   83ece:	f000 fca8 	bl	84822 <strcmp>
   83ed2:	2800      	cmp	r0, #0
   83ed4:	d0f7      	beq.n	83ec6 <_setlocale_r+0x6>
   83ed6:	4620      	mov	r0, r4
   83ed8:	4907      	ldr	r1, [pc, #28]	; (83ef8 <_setlocale_r+0x38>)
   83eda:	f000 fca2 	bl	84822 <strcmp>
   83ede:	2800      	cmp	r0, #0
   83ee0:	d0f1      	beq.n	83ec6 <_setlocale_r+0x6>
   83ee2:	4620      	mov	r0, r4
   83ee4:	4906      	ldr	r1, [pc, #24]	; (83f00 <_setlocale_r+0x40>)
   83ee6:	f000 fc9c 	bl	84822 <strcmp>
   83eea:	4b03      	ldr	r3, [pc, #12]	; (83ef8 <_setlocale_r+0x38>)
   83eec:	2800      	cmp	r0, #0
   83eee:	bf0c      	ite	eq
   83ef0:	4618      	moveq	r0, r3
   83ef2:	2000      	movne	r0, #0
   83ef4:	bd10      	pop	{r4, pc}
   83ef6:	bf00      	nop
   83ef8:	00085194 	.word	0x00085194
   83efc:	000851d8 	.word	0x000851d8
   83f00:	000851df 	.word	0x000851df

00083f04 <__locale_charset>:
   83f04:	4800      	ldr	r0, [pc, #0]	; (83f08 <__locale_charset+0x4>)
   83f06:	4770      	bx	lr
   83f08:	20070448 	.word	0x20070448

00083f0c <__locale_mb_cur_max>:
   83f0c:	4b01      	ldr	r3, [pc, #4]	; (83f14 <__locale_mb_cur_max+0x8>)
   83f0e:	6a18      	ldr	r0, [r3, #32]
   83f10:	4770      	bx	lr
   83f12:	bf00      	nop
   83f14:	20070448 	.word	0x20070448

00083f18 <__locale_msgcharset>:
   83f18:	4800      	ldr	r0, [pc, #0]	; (83f1c <__locale_msgcharset+0x4>)
   83f1a:	4770      	bx	lr
   83f1c:	2007046c 	.word	0x2007046c

00083f20 <__locale_cjk_lang>:
   83f20:	2000      	movs	r0, #0
   83f22:	4770      	bx	lr

00083f24 <_localeconv_r>:
   83f24:	4800      	ldr	r0, [pc, #0]	; (83f28 <_localeconv_r+0x4>)
   83f26:	4770      	bx	lr
   83f28:	2007048c 	.word	0x2007048c

00083f2c <setlocale>:
   83f2c:	460a      	mov	r2, r1
   83f2e:	4903      	ldr	r1, [pc, #12]	; (83f3c <setlocale+0x10>)
   83f30:	4603      	mov	r3, r0
   83f32:	6808      	ldr	r0, [r1, #0]
   83f34:	4619      	mov	r1, r3
   83f36:	f7ff bfc3 	b.w	83ec0 <_setlocale_r>
   83f3a:	bf00      	nop
   83f3c:	20070018 	.word	0x20070018

00083f40 <localeconv>:
   83f40:	4800      	ldr	r0, [pc, #0]	; (83f44 <localeconv+0x4>)
   83f42:	4770      	bx	lr
   83f44:	2007048c 	.word	0x2007048c

00083f48 <__smakebuf_r>:
   83f48:	b5f0      	push	{r4, r5, r6, r7, lr}
   83f4a:	898b      	ldrh	r3, [r1, #12]
   83f4c:	460c      	mov	r4, r1
   83f4e:	f003 0102 	and.w	r1, r3, #2
   83f52:	b20a      	sxth	r2, r1
   83f54:	b091      	sub	sp, #68	; 0x44
   83f56:	4606      	mov	r6, r0
   83f58:	2a00      	cmp	r2, #0
   83f5a:	d13f      	bne.n	83fdc <__smakebuf_r+0x94>
   83f5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83f60:	2900      	cmp	r1, #0
   83f62:	da0d      	bge.n	83f80 <__smakebuf_r+0x38>
   83f64:	89a7      	ldrh	r7, [r4, #12]
   83f66:	f007 0280 	and.w	r2, r7, #128	; 0x80
   83f6a:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
   83f6e:	b210      	sxth	r0, r2
   83f70:	2800      	cmp	r0, #0
   83f72:	bf0c      	ite	eq
   83f74:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   83f78:	2540      	movne	r5, #64	; 0x40
   83f7a:	81a3      	strh	r3, [r4, #12]
   83f7c:	2700      	movs	r7, #0
   83f7e:	e020      	b.n	83fc2 <__smakebuf_r+0x7a>
   83f80:	aa01      	add	r2, sp, #4
   83f82:	f000 fd1b 	bl	849bc <_fstat_r>
   83f86:	2800      	cmp	r0, #0
   83f88:	dbec      	blt.n	83f64 <__smakebuf_r+0x1c>
   83f8a:	9802      	ldr	r0, [sp, #8]
   83f8c:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
   83f90:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
   83f94:	425f      	negs	r7, r3
   83f96:	415f      	adcs	r7, r3
   83f98:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   83f9c:	d10b      	bne.n	83fb6 <__smakebuf_r+0x6e>
   83f9e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   83fa0:	4a1d      	ldr	r2, [pc, #116]	; (84018 <__smakebuf_r+0xd0>)
   83fa2:	4291      	cmp	r1, r2
   83fa4:	d107      	bne.n	83fb6 <__smakebuf_r+0x6e>
   83fa6:	89a3      	ldrh	r3, [r4, #12]
   83fa8:	f44f 6580 	mov.w	r5, #1024	; 0x400
   83fac:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
   83fb0:	81a1      	strh	r1, [r4, #12]
   83fb2:	64e5      	str	r5, [r4, #76]	; 0x4c
   83fb4:	e005      	b.n	83fc2 <__smakebuf_r+0x7a>
   83fb6:	89a0      	ldrh	r0, [r4, #12]
   83fb8:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
   83fbc:	81a5      	strh	r5, [r4, #12]
   83fbe:	f44f 6580 	mov.w	r5, #1024	; 0x400
   83fc2:	4630      	mov	r0, r6
   83fc4:	4629      	mov	r1, r5
   83fc6:	f000 f83b 	bl	84040 <_malloc_r>
   83fca:	b970      	cbnz	r0, 83fea <__smakebuf_r+0xa2>
   83fcc:	89a3      	ldrh	r3, [r4, #12]
   83fce:	f403 7200 	and.w	r2, r3, #512	; 0x200
   83fd2:	b210      	sxth	r0, r2
   83fd4:	b9e8      	cbnz	r0, 84012 <__smakebuf_r+0xca>
   83fd6:	f043 0102 	orr.w	r1, r3, #2
   83fda:	81a1      	strh	r1, [r4, #12]
   83fdc:	f104 0343 	add.w	r3, r4, #67	; 0x43
   83fe0:	2201      	movs	r2, #1
   83fe2:	6023      	str	r3, [r4, #0]
   83fe4:	6123      	str	r3, [r4, #16]
   83fe6:	6162      	str	r2, [r4, #20]
   83fe8:	e013      	b.n	84012 <__smakebuf_r+0xca>
   83fea:	89a2      	ldrh	r2, [r4, #12]
   83fec:	490b      	ldr	r1, [pc, #44]	; (8401c <__smakebuf_r+0xd4>)
   83fee:	f042 0380 	orr.w	r3, r2, #128	; 0x80
   83ff2:	63f1      	str	r1, [r6, #60]	; 0x3c
   83ff4:	81a3      	strh	r3, [r4, #12]
   83ff6:	6020      	str	r0, [r4, #0]
   83ff8:	6120      	str	r0, [r4, #16]
   83ffa:	6165      	str	r5, [r4, #20]
   83ffc:	b14f      	cbz	r7, 84012 <__smakebuf_r+0xca>
   83ffe:	4630      	mov	r0, r6
   84000:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84004:	f000 fcec 	bl	849e0 <_isatty_r>
   84008:	b118      	cbz	r0, 84012 <__smakebuf_r+0xca>
   8400a:	89a0      	ldrh	r0, [r4, #12]
   8400c:	f040 0101 	orr.w	r1, r0, #1
   84010:	81a1      	strh	r1, [r4, #12]
   84012:	b011      	add	sp, #68	; 0x44
   84014:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84016:	bf00      	nop
   84018:	000847f7 	.word	0x000847f7
   8401c:	00083711 	.word	0x00083711

00084020 <malloc>:
   84020:	4b02      	ldr	r3, [pc, #8]	; (8402c <malloc+0xc>)
   84022:	4601      	mov	r1, r0
   84024:	6818      	ldr	r0, [r3, #0]
   84026:	f000 b80b 	b.w	84040 <_malloc_r>
   8402a:	bf00      	nop
   8402c:	20070018 	.word	0x20070018

00084030 <free>:
   84030:	4b02      	ldr	r3, [pc, #8]	; (8403c <free+0xc>)
   84032:	4601      	mov	r1, r0
   84034:	6818      	ldr	r0, [r3, #0]
   84036:	f7ff bcef 	b.w	83a18 <_free_r>
   8403a:	bf00      	nop
   8403c:	20070018 	.word	0x20070018

00084040 <_malloc_r>:
   84040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   84044:	f101 040b 	add.w	r4, r1, #11
   84048:	2c16      	cmp	r4, #22
   8404a:	4606      	mov	r6, r0
   8404c:	d903      	bls.n	84056 <_malloc_r+0x16>
   8404e:	f034 0407 	bics.w	r4, r4, #7
   84052:	d501      	bpl.n	84058 <_malloc_r+0x18>
   84054:	e002      	b.n	8405c <_malloc_r+0x1c>
   84056:	2410      	movs	r4, #16
   84058:	428c      	cmp	r4, r1
   8405a:	d202      	bcs.n	84062 <_malloc_r+0x22>
   8405c:	250c      	movs	r5, #12
   8405e:	6035      	str	r5, [r6, #0]
   84060:	e1d9      	b.n	84416 <_malloc_r+0x3d6>
   84062:	4630      	mov	r0, r6
   84064:	f000 fa16 	bl	84494 <__malloc_lock>
   84068:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   8406c:	d214      	bcs.n	84098 <_malloc_r+0x58>
   8406e:	4da0      	ldr	r5, [pc, #640]	; (842f0 <_malloc_r+0x2b0>)
   84070:	08e1      	lsrs	r1, r4, #3
   84072:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   84076:	68c5      	ldr	r5, [r0, #12]
   84078:	4285      	cmp	r5, r0
   8407a:	d105      	bne.n	84088 <_malloc_r+0x48>
   8407c:	f105 0308 	add.w	r3, r5, #8
   84080:	696d      	ldr	r5, [r5, #20]
   84082:	1c8a      	adds	r2, r1, #2
   84084:	429d      	cmp	r5, r3
   84086:	d044      	beq.n	84112 <_malloc_r+0xd2>
   84088:	68e8      	ldr	r0, [r5, #12]
   8408a:	68a9      	ldr	r1, [r5, #8]
   8408c:	686a      	ldr	r2, [r5, #4]
   8408e:	60c8      	str	r0, [r1, #12]
   84090:	f022 0303 	bic.w	r3, r2, #3
   84094:	6081      	str	r1, [r0, #8]
   84096:	e059      	b.n	8414c <_malloc_r+0x10c>
   84098:	0a62      	lsrs	r2, r4, #9
   8409a:	d101      	bne.n	840a0 <_malloc_r+0x60>
   8409c:	08e2      	lsrs	r2, r4, #3
   8409e:	e01b      	b.n	840d8 <_malloc_r+0x98>
   840a0:	2a04      	cmp	r2, #4
   840a2:	d802      	bhi.n	840aa <_malloc_r+0x6a>
   840a4:	09a2      	lsrs	r2, r4, #6
   840a6:	3238      	adds	r2, #56	; 0x38
   840a8:	e016      	b.n	840d8 <_malloc_r+0x98>
   840aa:	2a14      	cmp	r2, #20
   840ac:	d801      	bhi.n	840b2 <_malloc_r+0x72>
   840ae:	325b      	adds	r2, #91	; 0x5b
   840b0:	e012      	b.n	840d8 <_malloc_r+0x98>
   840b2:	2a54      	cmp	r2, #84	; 0x54
   840b4:	d802      	bhi.n	840bc <_malloc_r+0x7c>
   840b6:	0b22      	lsrs	r2, r4, #12
   840b8:	326e      	adds	r2, #110	; 0x6e
   840ba:	e00d      	b.n	840d8 <_malloc_r+0x98>
   840bc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   840c0:	d802      	bhi.n	840c8 <_malloc_r+0x88>
   840c2:	0be2      	lsrs	r2, r4, #15
   840c4:	3277      	adds	r2, #119	; 0x77
   840c6:	e007      	b.n	840d8 <_malloc_r+0x98>
   840c8:	f240 5354 	movw	r3, #1364	; 0x554
   840cc:	429a      	cmp	r2, r3
   840ce:	d802      	bhi.n	840d6 <_malloc_r+0x96>
   840d0:	0ca2      	lsrs	r2, r4, #18
   840d2:	327c      	adds	r2, #124	; 0x7c
   840d4:	e000      	b.n	840d8 <_malloc_r+0x98>
   840d6:	227e      	movs	r2, #126	; 0x7e
   840d8:	4885      	ldr	r0, [pc, #532]	; (842f0 <_malloc_r+0x2b0>)
   840da:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
   840de:	68dd      	ldr	r5, [r3, #12]
   840e0:	429d      	cmp	r5, r3
   840e2:	d015      	beq.n	84110 <_malloc_r+0xd0>
   840e4:	6869      	ldr	r1, [r5, #4]
   840e6:	f021 0103 	bic.w	r1, r1, #3
   840ea:	1b08      	subs	r0, r1, r4
   840ec:	280f      	cmp	r0, #15
   840ee:	dd01      	ble.n	840f4 <_malloc_r+0xb4>
   840f0:	3a01      	subs	r2, #1
   840f2:	e00d      	b.n	84110 <_malloc_r+0xd0>
   840f4:	2800      	cmp	r0, #0
   840f6:	db09      	blt.n	8410c <_malloc_r+0xcc>
   840f8:	68eb      	ldr	r3, [r5, #12]
   840fa:	68aa      	ldr	r2, [r5, #8]
   840fc:	60d3      	str	r3, [r2, #12]
   840fe:	609a      	str	r2, [r3, #8]
   84100:	186b      	adds	r3, r5, r1
   84102:	685a      	ldr	r2, [r3, #4]
   84104:	f042 0001 	orr.w	r0, r2, #1
   84108:	6058      	str	r0, [r3, #4]
   8410a:	e190      	b.n	8442e <_malloc_r+0x3ee>
   8410c:	68ed      	ldr	r5, [r5, #12]
   8410e:	e7e7      	b.n	840e0 <_malloc_r+0xa0>
   84110:	3201      	adds	r2, #1
   84112:	4977      	ldr	r1, [pc, #476]	; (842f0 <_malloc_r+0x2b0>)
   84114:	690d      	ldr	r5, [r1, #16]
   84116:	f101 0708 	add.w	r7, r1, #8
   8411a:	42bd      	cmp	r5, r7
   8411c:	d068      	beq.n	841f0 <_malloc_r+0x1b0>
   8411e:	6868      	ldr	r0, [r5, #4]
   84120:	f020 0303 	bic.w	r3, r0, #3
   84124:	1b18      	subs	r0, r3, r4
   84126:	280f      	cmp	r0, #15
   84128:	dd0c      	ble.n	84144 <_malloc_r+0x104>
   8412a:	192b      	adds	r3, r5, r4
   8412c:	614b      	str	r3, [r1, #20]
   8412e:	610b      	str	r3, [r1, #16]
   84130:	f044 0401 	orr.w	r4, r4, #1
   84134:	f040 0101 	orr.w	r1, r0, #1
   84138:	606c      	str	r4, [r5, #4]
   8413a:	60df      	str	r7, [r3, #12]
   8413c:	609f      	str	r7, [r3, #8]
   8413e:	6059      	str	r1, [r3, #4]
   84140:	5018      	str	r0, [r3, r0]
   84142:	e174      	b.n	8442e <_malloc_r+0x3ee>
   84144:	2800      	cmp	r0, #0
   84146:	614f      	str	r7, [r1, #20]
   84148:	610f      	str	r7, [r1, #16]
   8414a:	db01      	blt.n	84150 <_malloc_r+0x110>
   8414c:	18eb      	adds	r3, r5, r3
   8414e:	e7d8      	b.n	84102 <_malloc_r+0xc2>
   84150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84154:	d20f      	bcs.n	84176 <_malloc_r+0x136>
   84156:	08db      	lsrs	r3, r3, #3
   84158:	1098      	asrs	r0, r3, #2
   8415a:	2701      	movs	r7, #1
   8415c:	fa07 f700 	lsl.w	r7, r7, r0
   84160:	6848      	ldr	r0, [r1, #4]
   84162:	4307      	orrs	r7, r0
   84164:	604f      	str	r7, [r1, #4]
   84166:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   8416a:	688b      	ldr	r3, [r1, #8]
   8416c:	60e9      	str	r1, [r5, #12]
   8416e:	60ab      	str	r3, [r5, #8]
   84170:	60dd      	str	r5, [r3, #12]
   84172:	608d      	str	r5, [r1, #8]
   84174:	e03c      	b.n	841f0 <_malloc_r+0x1b0>
   84176:	0a58      	lsrs	r0, r3, #9
   84178:	2804      	cmp	r0, #4
   8417a:	d802      	bhi.n	84182 <_malloc_r+0x142>
   8417c:	0998      	lsrs	r0, r3, #6
   8417e:	3038      	adds	r0, #56	; 0x38
   84180:	e016      	b.n	841b0 <_malloc_r+0x170>
   84182:	2814      	cmp	r0, #20
   84184:	d801      	bhi.n	8418a <_malloc_r+0x14a>
   84186:	305b      	adds	r0, #91	; 0x5b
   84188:	e012      	b.n	841b0 <_malloc_r+0x170>
   8418a:	2854      	cmp	r0, #84	; 0x54
   8418c:	d802      	bhi.n	84194 <_malloc_r+0x154>
   8418e:	0b18      	lsrs	r0, r3, #12
   84190:	306e      	adds	r0, #110	; 0x6e
   84192:	e00d      	b.n	841b0 <_malloc_r+0x170>
   84194:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   84198:	d802      	bhi.n	841a0 <_malloc_r+0x160>
   8419a:	0bd8      	lsrs	r0, r3, #15
   8419c:	3077      	adds	r0, #119	; 0x77
   8419e:	e007      	b.n	841b0 <_malloc_r+0x170>
   841a0:	f240 5754 	movw	r7, #1364	; 0x554
   841a4:	42b8      	cmp	r0, r7
   841a6:	d802      	bhi.n	841ae <_malloc_r+0x16e>
   841a8:	0c98      	lsrs	r0, r3, #18
   841aa:	307c      	adds	r0, #124	; 0x7c
   841ac:	e000      	b.n	841b0 <_malloc_r+0x170>
   841ae:	207e      	movs	r0, #126	; 0x7e
   841b0:	f8df e13c 	ldr.w	lr, [pc, #316]	; 842f0 <_malloc_r+0x2b0>
   841b4:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
   841b8:	68b9      	ldr	r1, [r7, #8]
   841ba:	42b9      	cmp	r1, r7
   841bc:	d10e      	bne.n	841dc <_malloc_r+0x19c>
   841be:	1087      	asrs	r7, r0, #2
   841c0:	2301      	movs	r3, #1
   841c2:	fa03 f007 	lsl.w	r0, r3, r7
   841c6:	f8de 7004 	ldr.w	r7, [lr, #4]
   841ca:	ea40 0307 	orr.w	r3, r0, r7
   841ce:	f8ce 3004 	str.w	r3, [lr, #4]
   841d2:	4608      	mov	r0, r1
   841d4:	e008      	b.n	841e8 <_malloc_r+0x1a8>
   841d6:	6889      	ldr	r1, [r1, #8]
   841d8:	42b9      	cmp	r1, r7
   841da:	d004      	beq.n	841e6 <_malloc_r+0x1a6>
   841dc:	6848      	ldr	r0, [r1, #4]
   841de:	f020 0003 	bic.w	r0, r0, #3
   841e2:	4283      	cmp	r3, r0
   841e4:	d3f7      	bcc.n	841d6 <_malloc_r+0x196>
   841e6:	68c8      	ldr	r0, [r1, #12]
   841e8:	60e8      	str	r0, [r5, #12]
   841ea:	60a9      	str	r1, [r5, #8]
   841ec:	60cd      	str	r5, [r1, #12]
   841ee:	6085      	str	r5, [r0, #8]
   841f0:	1095      	asrs	r5, r2, #2
   841f2:	2001      	movs	r0, #1
   841f4:	fa00 f305 	lsl.w	r3, r0, r5
   841f8:	4f3d      	ldr	r7, [pc, #244]	; (842f0 <_malloc_r+0x2b0>)
   841fa:	6879      	ldr	r1, [r7, #4]
   841fc:	428b      	cmp	r3, r1
   841fe:	d85d      	bhi.n	842bc <_malloc_r+0x27c>
   84200:	420b      	tst	r3, r1
   84202:	d105      	bne.n	84210 <_malloc_r+0x1d0>
   84204:	f022 0203 	bic.w	r2, r2, #3
   84208:	005b      	lsls	r3, r3, #1
   8420a:	3204      	adds	r2, #4
   8420c:	420b      	tst	r3, r1
   8420e:	d0fb      	beq.n	84208 <_malloc_r+0x1c8>
   84210:	4d37      	ldr	r5, [pc, #220]	; (842f0 <_malloc_r+0x2b0>)
   84212:	4610      	mov	r0, r2
   84214:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
   84218:	4677      	mov	r7, lr
   8421a:	68fd      	ldr	r5, [r7, #12]
   8421c:	42bd      	cmp	r5, r7
   8421e:	d02d      	beq.n	8427c <_malloc_r+0x23c>
   84220:	6869      	ldr	r1, [r5, #4]
   84222:	f021 0c03 	bic.w	ip, r1, #3
   84226:	ebc4 010c 	rsb	r1, r4, ip
   8422a:	290f      	cmp	r1, #15
   8422c:	dd13      	ble.n	84256 <_malloc_r+0x216>
   8422e:	192b      	adds	r3, r5, r4
   84230:	f044 0401 	orr.w	r4, r4, #1
   84234:	68ea      	ldr	r2, [r5, #12]
   84236:	606c      	str	r4, [r5, #4]
   84238:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8423c:	5059      	str	r1, [r3, r1]
   8423e:	60c2      	str	r2, [r0, #12]
   84240:	6090      	str	r0, [r2, #8]
   84242:	4a2b      	ldr	r2, [pc, #172]	; (842f0 <_malloc_r+0x2b0>)
   84244:	f041 0001 	orr.w	r0, r1, #1
   84248:	6153      	str	r3, [r2, #20]
   8424a:	6113      	str	r3, [r2, #16]
   8424c:	3208      	adds	r2, #8
   8424e:	60da      	str	r2, [r3, #12]
   84250:	609a      	str	r2, [r3, #8]
   84252:	6058      	str	r0, [r3, #4]
   84254:	e00c      	b.n	84270 <_malloc_r+0x230>
   84256:	2900      	cmp	r1, #0
   84258:	db0e      	blt.n	84278 <_malloc_r+0x238>
   8425a:	eb05 000c 	add.w	r0, r5, ip
   8425e:	6842      	ldr	r2, [r0, #4]
   84260:	68e9      	ldr	r1, [r5, #12]
   84262:	f042 0301 	orr.w	r3, r2, #1
   84266:	6043      	str	r3, [r0, #4]
   84268:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8426c:	60c1      	str	r1, [r0, #12]
   8426e:	6088      	str	r0, [r1, #8]
   84270:	4630      	mov	r0, r6
   84272:	f000 f910 	bl	84496 <__malloc_unlock>
   84276:	e0de      	b.n	84436 <_malloc_r+0x3f6>
   84278:	68ed      	ldr	r5, [r5, #12]
   8427a:	e7cf      	b.n	8421c <_malloc_r+0x1dc>
   8427c:	3001      	adds	r0, #1
   8427e:	0781      	lsls	r1, r0, #30
   84280:	f105 0708 	add.w	r7, r5, #8
   84284:	d1c9      	bne.n	8421a <_malloc_r+0x1da>
   84286:	4671      	mov	r1, lr
   84288:	0795      	lsls	r5, r2, #30
   8428a:	d105      	bne.n	84298 <_malloc_r+0x258>
   8428c:	4a18      	ldr	r2, [pc, #96]	; (842f0 <_malloc_r+0x2b0>)
   8428e:	6855      	ldr	r5, [r2, #4]
   84290:	ea25 0503 	bic.w	r5, r5, r3
   84294:	6055      	str	r5, [r2, #4]
   84296:	e005      	b.n	842a4 <_malloc_r+0x264>
   84298:	f1a1 0708 	sub.w	r7, r1, #8
   8429c:	6809      	ldr	r1, [r1, #0]
   8429e:	3a01      	subs	r2, #1
   842a0:	42b9      	cmp	r1, r7
   842a2:	d0f1      	beq.n	84288 <_malloc_r+0x248>
   842a4:	4f12      	ldr	r7, [pc, #72]	; (842f0 <_malloc_r+0x2b0>)
   842a6:	005b      	lsls	r3, r3, #1
   842a8:	687f      	ldr	r7, [r7, #4]
   842aa:	42bb      	cmp	r3, r7
   842ac:	d806      	bhi.n	842bc <_malloc_r+0x27c>
   842ae:	b12b      	cbz	r3, 842bc <_malloc_r+0x27c>
   842b0:	4602      	mov	r2, r0
   842b2:	423b      	tst	r3, r7
   842b4:	d1ac      	bne.n	84210 <_malloc_r+0x1d0>
   842b6:	3204      	adds	r2, #4
   842b8:	005b      	lsls	r3, r3, #1
   842ba:	e7fa      	b.n	842b2 <_malloc_r+0x272>
   842bc:	4b0c      	ldr	r3, [pc, #48]	; (842f0 <_malloc_r+0x2b0>)
   842be:	689f      	ldr	r7, [r3, #8]
   842c0:	4619      	mov	r1, r3
   842c2:	6878      	ldr	r0, [r7, #4]
   842c4:	f020 0903 	bic.w	r9, r0, #3
   842c8:	45a1      	cmp	r9, r4
   842ca:	d304      	bcc.n	842d6 <_malloc_r+0x296>
   842cc:	ebc4 0009 	rsb	r0, r4, r9
   842d0:	280f      	cmp	r0, #15
   842d2:	f300 80a2 	bgt.w	8441a <_malloc_r+0x3da>
   842d6:	4a07      	ldr	r2, [pc, #28]	; (842f4 <_malloc_r+0x2b4>)
   842d8:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
   842dc:	6815      	ldr	r5, [r2, #0]
   842de:	3301      	adds	r3, #1
   842e0:	eb07 0a09 	add.w	sl, r7, r9
   842e4:	eb04 0805 	add.w	r8, r4, r5
   842e8:	d106      	bne.n	842f8 <_malloc_r+0x2b8>
   842ea:	f108 0810 	add.w	r8, r8, #16
   842ee:	e00b      	b.n	84308 <_malloc_r+0x2c8>
   842f0:	200704c4 	.word	0x200704c4
   842f4:	200709f0 	.word	0x200709f0
   842f8:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   842fc:	f100 010f 	add.w	r1, r0, #15
   84300:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   84304:	f022 080f 	bic.w	r8, r2, #15
   84308:	4630      	mov	r0, r6
   8430a:	4641      	mov	r1, r8
   8430c:	f000 fa32 	bl	84774 <_sbrk_r>
   84310:	1c42      	adds	r2, r0, #1
   84312:	4605      	mov	r5, r0
   84314:	d071      	beq.n	843fa <_malloc_r+0x3ba>
   84316:	4550      	cmp	r0, sl
   84318:	d202      	bcs.n	84320 <_malloc_r+0x2e0>
   8431a:	4b48      	ldr	r3, [pc, #288]	; (8443c <_malloc_r+0x3fc>)
   8431c:	429f      	cmp	r7, r3
   8431e:	d16c      	bne.n	843fa <_malloc_r+0x3ba>
   84320:	4847      	ldr	r0, [pc, #284]	; (84440 <_malloc_r+0x400>)
   84322:	4555      	cmp	r5, sl
   84324:	6841      	ldr	r1, [r0, #4]
   84326:	4a45      	ldr	r2, [pc, #276]	; (8443c <_malloc_r+0x3fc>)
   84328:	eb08 0301 	add.w	r3, r8, r1
   8432c:	6043      	str	r3, [r0, #4]
   8432e:	d107      	bne.n	84340 <_malloc_r+0x300>
   84330:	0529      	lsls	r1, r5, #20
   84332:	d105      	bne.n	84340 <_malloc_r+0x300>
   84334:	6895      	ldr	r5, [r2, #8]
   84336:	44c8      	add	r8, r9
   84338:	f048 0001 	orr.w	r0, r8, #1
   8433c:	6068      	str	r0, [r5, #4]
   8433e:	e051      	b.n	843e4 <_malloc_r+0x3a4>
   84340:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   84344:	1c42      	adds	r2, r0, #1
   84346:	d103      	bne.n	84350 <_malloc_r+0x310>
   84348:	4a3c      	ldr	r2, [pc, #240]	; (8443c <_malloc_r+0x3fc>)
   8434a:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
   8434e:	e005      	b.n	8435c <_malloc_r+0x31c>
   84350:	ebca 0a05 	rsb	sl, sl, r5
   84354:	eb03 010a 	add.w	r1, r3, sl
   84358:	4b39      	ldr	r3, [pc, #228]	; (84440 <_malloc_r+0x400>)
   8435a:	6059      	str	r1, [r3, #4]
   8435c:	f015 0007 	ands.w	r0, r5, #7
   84360:	bf1c      	itt	ne
   84362:	f1c0 0008 	rsbne	r0, r0, #8
   84366:	182d      	addne	r5, r5, r0
   84368:	eb05 0c08 	add.w	ip, r5, r8
   8436c:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   84370:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
   84374:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
   84378:	4641      	mov	r1, r8
   8437a:	4630      	mov	r0, r6
   8437c:	f000 f9fa 	bl	84774 <_sbrk_r>
   84380:	4a2f      	ldr	r2, [pc, #188]	; (84440 <_malloc_r+0x400>)
   84382:	1c43      	adds	r3, r0, #1
   84384:	6853      	ldr	r3, [r2, #4]
   84386:	bf08      	it	eq
   84388:	f04f 0800 	moveq.w	r8, #0
   8438c:	eb08 0103 	add.w	r1, r8, r3
   84390:	bf08      	it	eq
   84392:	4628      	moveq	r0, r5
   84394:	6051      	str	r1, [r2, #4]
   84396:	1b40      	subs	r0, r0, r5
   84398:	4a28      	ldr	r2, [pc, #160]	; (8443c <_malloc_r+0x3fc>)
   8439a:	eb00 0308 	add.w	r3, r0, r8
   8439e:	f043 0101 	orr.w	r1, r3, #1
   843a2:	4297      	cmp	r7, r2
   843a4:	6095      	str	r5, [r2, #8]
   843a6:	6069      	str	r1, [r5, #4]
   843a8:	d01c      	beq.n	843e4 <_malloc_r+0x3a4>
   843aa:	f1b9 0f0f 	cmp.w	r9, #15
   843ae:	d802      	bhi.n	843b6 <_malloc_r+0x376>
   843b0:	2201      	movs	r2, #1
   843b2:	606a      	str	r2, [r5, #4]
   843b4:	e021      	b.n	843fa <_malloc_r+0x3ba>
   843b6:	687d      	ldr	r5, [r7, #4]
   843b8:	f1a9 090c 	sub.w	r9, r9, #12
   843bc:	f029 0907 	bic.w	r9, r9, #7
   843c0:	f005 0201 	and.w	r2, r5, #1
   843c4:	2105      	movs	r1, #5
   843c6:	eb07 0309 	add.w	r3, r7, r9
   843ca:	ea49 0002 	orr.w	r0, r9, r2
   843ce:	f1b9 0f0f 	cmp.w	r9, #15
   843d2:	6078      	str	r0, [r7, #4]
   843d4:	6059      	str	r1, [r3, #4]
   843d6:	6099      	str	r1, [r3, #8]
   843d8:	d904      	bls.n	843e4 <_malloc_r+0x3a4>
   843da:	4630      	mov	r0, r6
   843dc:	f107 0108 	add.w	r1, r7, #8
   843e0:	f7ff fb1a 	bl	83a18 <_free_r>
   843e4:	4a16      	ldr	r2, [pc, #88]	; (84440 <_malloc_r+0x400>)
   843e6:	6853      	ldr	r3, [r2, #4]
   843e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   843ea:	6b15      	ldr	r5, [r2, #48]	; 0x30
   843ec:	428b      	cmp	r3, r1
   843ee:	bf88      	it	hi
   843f0:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   843f2:	42ab      	cmp	r3, r5
   843f4:	bf84      	itt	hi
   843f6:	4d12      	ldrhi	r5, [pc, #72]	; (84440 <_malloc_r+0x400>)
   843f8:	632b      	strhi	r3, [r5, #48]	; 0x30
   843fa:	4810      	ldr	r0, [pc, #64]	; (8443c <_malloc_r+0x3fc>)
   843fc:	6882      	ldr	r2, [r0, #8]
   843fe:	6853      	ldr	r3, [r2, #4]
   84400:	f023 0103 	bic.w	r1, r3, #3
   84404:	42a1      	cmp	r1, r4
   84406:	ebc4 0001 	rsb	r0, r4, r1
   8440a:	d301      	bcc.n	84410 <_malloc_r+0x3d0>
   8440c:	280f      	cmp	r0, #15
   8440e:	dc04      	bgt.n	8441a <_malloc_r+0x3da>
   84410:	4630      	mov	r0, r6
   84412:	f000 f840 	bl	84496 <__malloc_unlock>
   84416:	2500      	movs	r5, #0
   84418:	e00d      	b.n	84436 <_malloc_r+0x3f6>
   8441a:	4a08      	ldr	r2, [pc, #32]	; (8443c <_malloc_r+0x3fc>)
   8441c:	f044 0301 	orr.w	r3, r4, #1
   84420:	6895      	ldr	r5, [r2, #8]
   84422:	f040 0101 	orr.w	r1, r0, #1
   84426:	192c      	adds	r4, r5, r4
   84428:	606b      	str	r3, [r5, #4]
   8442a:	6094      	str	r4, [r2, #8]
   8442c:	6061      	str	r1, [r4, #4]
   8442e:	4630      	mov	r0, r6
   84430:	f000 f831 	bl	84496 <__malloc_unlock>
   84434:	3508      	adds	r5, #8
   84436:	4628      	mov	r0, r5
   84438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8443c:	200704c4 	.word	0x200704c4
   84440:	200709f0 	.word	0x200709f0

00084444 <memchr>:
   84444:	b510      	push	{r4, lr}
   84446:	b2c9      	uxtb	r1, r1
   84448:	4603      	mov	r3, r0
   8444a:	1882      	adds	r2, r0, r2
   8444c:	4293      	cmp	r3, r2
   8444e:	4618      	mov	r0, r3
   84450:	d004      	beq.n	8445c <memchr+0x18>
   84452:	7804      	ldrb	r4, [r0, #0]
   84454:	3301      	adds	r3, #1
   84456:	428c      	cmp	r4, r1
   84458:	d1f8      	bne.n	8444c <memchr+0x8>
   8445a:	e000      	b.n	8445e <memchr+0x1a>
   8445c:	2000      	movs	r0, #0
   8445e:	bd10      	pop	{r4, pc}

00084460 <memmove>:
   84460:	4281      	cmp	r1, r0
   84462:	b570      	push	{r4, r5, r6, lr}
   84464:	d20e      	bcs.n	84484 <memmove+0x24>
   84466:	188c      	adds	r4, r1, r2
   84468:	42a0      	cmp	r0, r4
   8446a:	d20b      	bcs.n	84484 <memmove+0x24>
   8446c:	1885      	adds	r5, r0, r2
   8446e:	4613      	mov	r3, r2
   84470:	f113 33ff 	adds.w	r3, r3, #4294967295
   84474:	d305      	bcc.n	84482 <memmove+0x22>
   84476:	4251      	negs	r1, r2
   84478:	1866      	adds	r6, r4, r1
   8447a:	5cf6      	ldrb	r6, [r6, r3]
   8447c:	1869      	adds	r1, r5, r1
   8447e:	54ce      	strb	r6, [r1, r3]
   84480:	e7f6      	b.n	84470 <memmove+0x10>
   84482:	bd70      	pop	{r4, r5, r6, pc}
   84484:	2300      	movs	r3, #0
   84486:	4293      	cmp	r3, r2
   84488:	d003      	beq.n	84492 <memmove+0x32>
   8448a:	5ccc      	ldrb	r4, [r1, r3]
   8448c:	54c4      	strb	r4, [r0, r3]
   8448e:	3301      	adds	r3, #1
   84490:	e7f9      	b.n	84486 <memmove+0x26>
   84492:	bd70      	pop	{r4, r5, r6, pc}

00084494 <__malloc_lock>:
   84494:	4770      	bx	lr

00084496 <__malloc_unlock>:
   84496:	4770      	bx	lr

00084498 <_realloc_r>:
   84498:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8449c:	4681      	mov	r9, r0
   8449e:	4616      	mov	r6, r2
   844a0:	460c      	mov	r4, r1
   844a2:	b921      	cbnz	r1, 844ae <_realloc_r+0x16>
   844a4:	4611      	mov	r1, r2
   844a6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   844aa:	f7ff bdc9 	b.w	84040 <_malloc_r>
   844ae:	f7ff fff1 	bl	84494 <__malloc_lock>
   844b2:	f106 070b 	add.w	r7, r6, #11
   844b6:	f854 5c04 	ldr.w	r5, [r4, #-4]
   844ba:	2f16      	cmp	r7, #22
   844bc:	f1a4 0b08 	sub.w	fp, r4, #8
   844c0:	f025 0803 	bic.w	r8, r5, #3
   844c4:	d903      	bls.n	844ce <_realloc_r+0x36>
   844c6:	f037 0707 	bics.w	r7, r7, #7
   844ca:	d501      	bpl.n	844d0 <_realloc_r+0x38>
   844cc:	e002      	b.n	844d4 <_realloc_r+0x3c>
   844ce:	2710      	movs	r7, #16
   844d0:	42b7      	cmp	r7, r6
   844d2:	d204      	bcs.n	844de <_realloc_r+0x46>
   844d4:	200c      	movs	r0, #12
   844d6:	f8c9 0000 	str.w	r0, [r9]
   844da:	2600      	movs	r6, #0
   844dc:	e145      	b.n	8476a <_realloc_r+0x2d2>
   844de:	45b8      	cmp	r8, r7
   844e0:	f280 811a 	bge.w	84718 <_realloc_r+0x280>
   844e4:	4aa2      	ldr	r2, [pc, #648]	; (84770 <_realloc_r+0x2d8>)
   844e6:	eb0b 0308 	add.w	r3, fp, r8
   844ea:	6891      	ldr	r1, [r2, #8]
   844ec:	428b      	cmp	r3, r1
   844ee:	d006      	beq.n	844fe <_realloc_r+0x66>
   844f0:	6858      	ldr	r0, [r3, #4]
   844f2:	f020 0201 	bic.w	r2, r0, #1
   844f6:	1898      	adds	r0, r3, r2
   844f8:	6842      	ldr	r2, [r0, #4]
   844fa:	07d0      	lsls	r0, r2, #31
   844fc:	d426      	bmi.n	8454c <_realloc_r+0xb4>
   844fe:	685a      	ldr	r2, [r3, #4]
   84500:	428b      	cmp	r3, r1
   84502:	f022 0003 	bic.w	r0, r2, #3
   84506:	eb00 0a08 	add.w	sl, r0, r8
   8450a:	d118      	bne.n	8453e <_realloc_r+0xa6>
   8450c:	f107 0210 	add.w	r2, r7, #16
   84510:	4592      	cmp	sl, r2
   84512:	db1d      	blt.n	84550 <_realloc_r+0xb8>
   84514:	ebc7 0a0a 	rsb	sl, r7, sl
   84518:	eb0b 0507 	add.w	r5, fp, r7
   8451c:	f04a 0101 	orr.w	r1, sl, #1
   84520:	6069      	str	r1, [r5, #4]
   84522:	f854 2c04 	ldr.w	r2, [r4, #-4]
   84526:	4e92      	ldr	r6, [pc, #584]	; (84770 <_realloc_r+0x2d8>)
   84528:	f002 0301 	and.w	r3, r2, #1
   8452c:	431f      	orrs	r7, r3
   8452e:	60b5      	str	r5, [r6, #8]
   84530:	f844 7c04 	str.w	r7, [r4, #-4]
   84534:	4648      	mov	r0, r9
   84536:	f7ff ffae 	bl	84496 <__malloc_unlock>
   8453a:	4626      	mov	r6, r4
   8453c:	e115      	b.n	8476a <_realloc_r+0x2d2>
   8453e:	45ba      	cmp	sl, r7
   84540:	db06      	blt.n	84550 <_realloc_r+0xb8>
   84542:	68dd      	ldr	r5, [r3, #12]
   84544:	689e      	ldr	r6, [r3, #8]
   84546:	60f5      	str	r5, [r6, #12]
   84548:	60ae      	str	r6, [r5, #8]
   8454a:	e0e6      	b.n	8471a <_realloc_r+0x282>
   8454c:	2000      	movs	r0, #0
   8454e:	4603      	mov	r3, r0
   84550:	07ea      	lsls	r2, r5, #31
   84552:	f100 8091 	bmi.w	84678 <_realloc_r+0x1e0>
   84556:	f854 5c08 	ldr.w	r5, [r4, #-8]
   8455a:	ebc5 050b 	rsb	r5, r5, fp
   8455e:	686a      	ldr	r2, [r5, #4]
   84560:	f022 0203 	bic.w	r2, r2, #3
   84564:	2b00      	cmp	r3, #0
   84566:	d051      	beq.n	8460c <_realloc_r+0x174>
   84568:	eb02 0a08 	add.w	sl, r2, r8
   8456c:	428b      	cmp	r3, r1
   8456e:	4482      	add	sl, r0
   84570:	d145      	bne.n	845fe <_realloc_r+0x166>
   84572:	f107 0310 	add.w	r3, r7, #16
   84576:	459a      	cmp	sl, r3
   84578:	db48      	blt.n	8460c <_realloc_r+0x174>
   8457a:	462e      	mov	r6, r5
   8457c:	68e9      	ldr	r1, [r5, #12]
   8457e:	f856 3f08 	ldr.w	r3, [r6, #8]!
   84582:	f1a8 0204 	sub.w	r2, r8, #4
   84586:	2a24      	cmp	r2, #36	; 0x24
   84588:	60d9      	str	r1, [r3, #12]
   8458a:	608b      	str	r3, [r1, #8]
   8458c:	d825      	bhi.n	845da <_realloc_r+0x142>
   8458e:	2a13      	cmp	r2, #19
   84590:	d91b      	bls.n	845ca <_realloc_r+0x132>
   84592:	6821      	ldr	r1, [r4, #0]
   84594:	2a1b      	cmp	r2, #27
   84596:	60a9      	str	r1, [r5, #8]
   84598:	6863      	ldr	r3, [r4, #4]
   8459a:	60eb      	str	r3, [r5, #12]
   8459c:	d803      	bhi.n	845a6 <_realloc_r+0x10e>
   8459e:	f105 0010 	add.w	r0, r5, #16
   845a2:	3408      	adds	r4, #8
   845a4:	e012      	b.n	845cc <_realloc_r+0x134>
   845a6:	68a0      	ldr	r0, [r4, #8]
   845a8:	2a24      	cmp	r2, #36	; 0x24
   845aa:	6128      	str	r0, [r5, #16]
   845ac:	68e1      	ldr	r1, [r4, #12]
   845ae:	6169      	str	r1, [r5, #20]
   845b0:	d003      	beq.n	845ba <_realloc_r+0x122>
   845b2:	f105 0018 	add.w	r0, r5, #24
   845b6:	3410      	adds	r4, #16
   845b8:	e008      	b.n	845cc <_realloc_r+0x134>
   845ba:	6922      	ldr	r2, [r4, #16]
   845bc:	f105 0020 	add.w	r0, r5, #32
   845c0:	61aa      	str	r2, [r5, #24]
   845c2:	6963      	ldr	r3, [r4, #20]
   845c4:	3418      	adds	r4, #24
   845c6:	61eb      	str	r3, [r5, #28]
   845c8:	e000      	b.n	845cc <_realloc_r+0x134>
   845ca:	4630      	mov	r0, r6
   845cc:	6821      	ldr	r1, [r4, #0]
   845ce:	6001      	str	r1, [r0, #0]
   845d0:	6862      	ldr	r2, [r4, #4]
   845d2:	6042      	str	r2, [r0, #4]
   845d4:	68a3      	ldr	r3, [r4, #8]
   845d6:	6083      	str	r3, [r0, #8]
   845d8:	e003      	b.n	845e2 <_realloc_r+0x14a>
   845da:	4630      	mov	r0, r6
   845dc:	4621      	mov	r1, r4
   845de:	f7ff ff3f 	bl	84460 <memmove>
   845e2:	ebc7 0a0a 	rsb	sl, r7, sl
   845e6:	19e8      	adds	r0, r5, r7
   845e8:	f04a 0201 	orr.w	r2, sl, #1
   845ec:	6042      	str	r2, [r0, #4]
   845ee:	686b      	ldr	r3, [r5, #4]
   845f0:	495f      	ldr	r1, [pc, #380]	; (84770 <_realloc_r+0x2d8>)
   845f2:	6088      	str	r0, [r1, #8]
   845f4:	f003 0001 	and.w	r0, r3, #1
   845f8:	4307      	orrs	r7, r0
   845fa:	606f      	str	r7, [r5, #4]
   845fc:	e088      	b.n	84710 <_realloc_r+0x278>
   845fe:	45ba      	cmp	sl, r7
   84600:	db04      	blt.n	8460c <_realloc_r+0x174>
   84602:	68d9      	ldr	r1, [r3, #12]
   84604:	6898      	ldr	r0, [r3, #8]
   84606:	60c1      	str	r1, [r0, #12]
   84608:	6088      	str	r0, [r1, #8]
   8460a:	e003      	b.n	84614 <_realloc_r+0x17c>
   8460c:	eb02 0a08 	add.w	sl, r2, r8
   84610:	45ba      	cmp	sl, r7
   84612:	db31      	blt.n	84678 <_realloc_r+0x1e0>
   84614:	4628      	mov	r0, r5
   84616:	68eb      	ldr	r3, [r5, #12]
   84618:	f850 1f08 	ldr.w	r1, [r0, #8]!
   8461c:	f1a8 0204 	sub.w	r2, r8, #4
   84620:	2a24      	cmp	r2, #36	; 0x24
   84622:	60cb      	str	r3, [r1, #12]
   84624:	6099      	str	r1, [r3, #8]
   84626:	d823      	bhi.n	84670 <_realloc_r+0x1d8>
   84628:	2a13      	cmp	r2, #19
   8462a:	d91a      	bls.n	84662 <_realloc_r+0x1ca>
   8462c:	6820      	ldr	r0, [r4, #0]
   8462e:	2a1b      	cmp	r2, #27
   84630:	60a8      	str	r0, [r5, #8]
   84632:	6866      	ldr	r6, [r4, #4]
   84634:	60ee      	str	r6, [r5, #12]
   84636:	d803      	bhi.n	84640 <_realloc_r+0x1a8>
   84638:	f105 0010 	add.w	r0, r5, #16
   8463c:	3408      	adds	r4, #8
   8463e:	e010      	b.n	84662 <_realloc_r+0x1ca>
   84640:	68a3      	ldr	r3, [r4, #8]
   84642:	2a24      	cmp	r2, #36	; 0x24
   84644:	612b      	str	r3, [r5, #16]
   84646:	68e1      	ldr	r1, [r4, #12]
   84648:	6169      	str	r1, [r5, #20]
   8464a:	d003      	beq.n	84654 <_realloc_r+0x1bc>
   8464c:	f105 0018 	add.w	r0, r5, #24
   84650:	3410      	adds	r4, #16
   84652:	e006      	b.n	84662 <_realloc_r+0x1ca>
   84654:	6922      	ldr	r2, [r4, #16]
   84656:	61aa      	str	r2, [r5, #24]
   84658:	6960      	ldr	r0, [r4, #20]
   8465a:	3418      	adds	r4, #24
   8465c:	61e8      	str	r0, [r5, #28]
   8465e:	f105 0020 	add.w	r0, r5, #32
   84662:	6826      	ldr	r6, [r4, #0]
   84664:	6006      	str	r6, [r0, #0]
   84666:	6863      	ldr	r3, [r4, #4]
   84668:	6043      	str	r3, [r0, #4]
   8466a:	68a1      	ldr	r1, [r4, #8]
   8466c:	6081      	str	r1, [r0, #8]
   8466e:	e055      	b.n	8471c <_realloc_r+0x284>
   84670:	4621      	mov	r1, r4
   84672:	f7ff fef5 	bl	84460 <memmove>
   84676:	e051      	b.n	8471c <_realloc_r+0x284>
   84678:	4631      	mov	r1, r6
   8467a:	4648      	mov	r0, r9
   8467c:	f7ff fce0 	bl	84040 <_malloc_r>
   84680:	4606      	mov	r6, r0
   84682:	2800      	cmp	r0, #0
   84684:	d044      	beq.n	84710 <_realloc_r+0x278>
   84686:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8468a:	f1a0 0208 	sub.w	r2, r0, #8
   8468e:	f021 0301 	bic.w	r3, r1, #1
   84692:	eb0b 0103 	add.w	r1, fp, r3
   84696:	428a      	cmp	r2, r1
   84698:	d106      	bne.n	846a8 <_realloc_r+0x210>
   8469a:	f850 6c04 	ldr.w	r6, [r0, #-4]
   8469e:	f026 0503 	bic.w	r5, r6, #3
   846a2:	eb05 0a08 	add.w	sl, r5, r8
   846a6:	e038      	b.n	8471a <_realloc_r+0x282>
   846a8:	f1a8 0204 	sub.w	r2, r8, #4
   846ac:	2a24      	cmp	r2, #36	; 0x24
   846ae:	d828      	bhi.n	84702 <_realloc_r+0x26a>
   846b0:	2a13      	cmp	r2, #19
   846b2:	d91e      	bls.n	846f2 <_realloc_r+0x25a>
   846b4:	6823      	ldr	r3, [r4, #0]
   846b6:	2a1b      	cmp	r2, #27
   846b8:	6003      	str	r3, [r0, #0]
   846ba:	6861      	ldr	r1, [r4, #4]
   846bc:	6041      	str	r1, [r0, #4]
   846be:	d804      	bhi.n	846ca <_realloc_r+0x232>
   846c0:	f100 0008 	add.w	r0, r0, #8
   846c4:	f104 0208 	add.w	r2, r4, #8
   846c8:	e014      	b.n	846f4 <_realloc_r+0x25c>
   846ca:	68a0      	ldr	r0, [r4, #8]
   846cc:	2a24      	cmp	r2, #36	; 0x24
   846ce:	60b0      	str	r0, [r6, #8]
   846d0:	68e3      	ldr	r3, [r4, #12]
   846d2:	60f3      	str	r3, [r6, #12]
   846d4:	d004      	beq.n	846e0 <_realloc_r+0x248>
   846d6:	f106 0010 	add.w	r0, r6, #16
   846da:	f104 0210 	add.w	r2, r4, #16
   846de:	e009      	b.n	846f4 <_realloc_r+0x25c>
   846e0:	6922      	ldr	r2, [r4, #16]
   846e2:	f106 0018 	add.w	r0, r6, #24
   846e6:	6132      	str	r2, [r6, #16]
   846e8:	6961      	ldr	r1, [r4, #20]
   846ea:	f104 0218 	add.w	r2, r4, #24
   846ee:	6171      	str	r1, [r6, #20]
   846f0:	e000      	b.n	846f4 <_realloc_r+0x25c>
   846f2:	4622      	mov	r2, r4
   846f4:	6813      	ldr	r3, [r2, #0]
   846f6:	6003      	str	r3, [r0, #0]
   846f8:	6851      	ldr	r1, [r2, #4]
   846fa:	6041      	str	r1, [r0, #4]
   846fc:	6892      	ldr	r2, [r2, #8]
   846fe:	6082      	str	r2, [r0, #8]
   84700:	e002      	b.n	84708 <_realloc_r+0x270>
   84702:	4621      	mov	r1, r4
   84704:	f7ff feac 	bl	84460 <memmove>
   84708:	4648      	mov	r0, r9
   8470a:	4621      	mov	r1, r4
   8470c:	f7ff f984 	bl	83a18 <_free_r>
   84710:	4648      	mov	r0, r9
   84712:	f7ff fec0 	bl	84496 <__malloc_unlock>
   84716:	e028      	b.n	8476a <_realloc_r+0x2d2>
   84718:	46c2      	mov	sl, r8
   8471a:	465d      	mov	r5, fp
   8471c:	ebc7 000a 	rsb	r0, r7, sl
   84720:	280f      	cmp	r0, #15
   84722:	686a      	ldr	r2, [r5, #4]
   84724:	d911      	bls.n	8474a <_realloc_r+0x2b2>
   84726:	f002 0601 	and.w	r6, r2, #1
   8472a:	19e9      	adds	r1, r5, r7
   8472c:	f040 0301 	orr.w	r3, r0, #1
   84730:	4337      	orrs	r7, r6
   84732:	606f      	str	r7, [r5, #4]
   84734:	1808      	adds	r0, r1, r0
   84736:	604b      	str	r3, [r1, #4]
   84738:	6842      	ldr	r2, [r0, #4]
   8473a:	3108      	adds	r1, #8
   8473c:	f042 0601 	orr.w	r6, r2, #1
   84740:	6046      	str	r6, [r0, #4]
   84742:	4648      	mov	r0, r9
   84744:	f7ff f968 	bl	83a18 <_free_r>
   84748:	e00a      	b.n	84760 <_realloc_r+0x2c8>
   8474a:	f002 0601 	and.w	r6, r2, #1
   8474e:	ea4a 0306 	orr.w	r3, sl, r6
   84752:	606b      	str	r3, [r5, #4]
   84754:	eb05 010a 	add.w	r1, r5, sl
   84758:	6848      	ldr	r0, [r1, #4]
   8475a:	f040 0201 	orr.w	r2, r0, #1
   8475e:	604a      	str	r2, [r1, #4]
   84760:	4648      	mov	r0, r9
   84762:	f7ff fe98 	bl	84496 <__malloc_unlock>
   84766:	f105 0608 	add.w	r6, r5, #8
   8476a:	4630      	mov	r0, r6
   8476c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84770:	200704c4 	.word	0x200704c4

00084774 <_sbrk_r>:
   84774:	b538      	push	{r3, r4, r5, lr}
   84776:	4c06      	ldr	r4, [pc, #24]	; (84790 <_sbrk_r+0x1c>)
   84778:	2300      	movs	r3, #0
   8477a:	4605      	mov	r5, r0
   8477c:	4608      	mov	r0, r1
   8477e:	6023      	str	r3, [r4, #0]
   84780:	f7fe f842 	bl	82808 <_sbrk>
   84784:	1c43      	adds	r3, r0, #1
   84786:	d102      	bne.n	8478e <_sbrk_r+0x1a>
   84788:	6821      	ldr	r1, [r4, #0]
   8478a:	b101      	cbz	r1, 8478e <_sbrk_r+0x1a>
   8478c:	6029      	str	r1, [r5, #0]
   8478e:	bd38      	pop	{r3, r4, r5, pc}
   84790:	20070aac 	.word	0x20070aac

00084794 <__sread>:
   84794:	b510      	push	{r4, lr}
   84796:	460c      	mov	r4, r1
   84798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8479c:	f000 f942 	bl	84a24 <_read_r>
   847a0:	2800      	cmp	r0, #0
   847a2:	db03      	blt.n	847ac <__sread+0x18>
   847a4:	6d22      	ldr	r2, [r4, #80]	; 0x50
   847a6:	1813      	adds	r3, r2, r0
   847a8:	6523      	str	r3, [r4, #80]	; 0x50
   847aa:	bd10      	pop	{r4, pc}
   847ac:	89a3      	ldrh	r3, [r4, #12]
   847ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
   847b2:	81a1      	strh	r1, [r4, #12]
   847b4:	bd10      	pop	{r4, pc}

000847b6 <__seofread>:
   847b6:	2000      	movs	r0, #0
   847b8:	4770      	bx	lr

000847ba <__swrite>:
   847ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   847be:	461d      	mov	r5, r3
   847c0:	898b      	ldrh	r3, [r1, #12]
   847c2:	460c      	mov	r4, r1
   847c4:	f403 7180 	and.w	r1, r3, #256	; 0x100
   847c8:	4616      	mov	r6, r2
   847ca:	b20a      	sxth	r2, r1
   847cc:	4607      	mov	r7, r0
   847ce:	b12a      	cbz	r2, 847dc <__swrite+0x22>
   847d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   847d4:	2200      	movs	r2, #0
   847d6:	2302      	movs	r3, #2
   847d8:	f000 f912 	bl	84a00 <_lseek_r>
   847dc:	89a0      	ldrh	r0, [r4, #12]
   847de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   847e2:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
   847e6:	81a3      	strh	r3, [r4, #12]
   847e8:	4638      	mov	r0, r7
   847ea:	4632      	mov	r2, r6
   847ec:	462b      	mov	r3, r5
   847ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   847f2:	f000 b877 	b.w	848e4 <_write_r>

000847f6 <__sseek>:
   847f6:	b510      	push	{r4, lr}
   847f8:	460c      	mov	r4, r1
   847fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   847fe:	f000 f8ff 	bl	84a00 <_lseek_r>
   84802:	1c43      	adds	r3, r0, #1
   84804:	89a3      	ldrh	r3, [r4, #12]
   84806:	d103      	bne.n	84810 <__sseek+0x1a>
   84808:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
   8480c:	81a2      	strh	r2, [r4, #12]
   8480e:	bd10      	pop	{r4, pc}
   84810:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
   84814:	81a1      	strh	r1, [r4, #12]
   84816:	6520      	str	r0, [r4, #80]	; 0x50
   84818:	bd10      	pop	{r4, pc}

0008481a <__sclose>:
   8481a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8481e:	f000 b873 	b.w	84908 <_close_r>

00084822 <strcmp>:
   84822:	f810 2b01 	ldrb.w	r2, [r0], #1
   84826:	f811 3b01 	ldrb.w	r3, [r1], #1
   8482a:	2a01      	cmp	r2, #1
   8482c:	bf28      	it	cs
   8482e:	429a      	cmpcs	r2, r3
   84830:	d0f7      	beq.n	84822 <strcmp>
   84832:	eba2 0003 	sub.w	r0, r2, r3
   84836:	4770      	bx	lr

00084838 <_wcrtomb_r>:
   84838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8483c:	461d      	mov	r5, r3
   8483e:	4b10      	ldr	r3, [pc, #64]	; (84880 <_wcrtomb_r+0x48>)
   84840:	b086      	sub	sp, #24
   84842:	4604      	mov	r4, r0
   84844:	4690      	mov	r8, r2
   84846:	460e      	mov	r6, r1
   84848:	681f      	ldr	r7, [r3, #0]
   8484a:	b939      	cbnz	r1, 8485c <_wcrtomb_r+0x24>
   8484c:	f7ff fb5a 	bl	83f04 <__locale_charset>
   84850:	9500      	str	r5, [sp, #0]
   84852:	4603      	mov	r3, r0
   84854:	a903      	add	r1, sp, #12
   84856:	4620      	mov	r0, r4
   84858:	4632      	mov	r2, r6
   8485a:	e006      	b.n	8486a <_wcrtomb_r+0x32>
   8485c:	f7ff fb52 	bl	83f04 <__locale_charset>
   84860:	9500      	str	r5, [sp, #0]
   84862:	4603      	mov	r3, r0
   84864:	4631      	mov	r1, r6
   84866:	4620      	mov	r0, r4
   84868:	4642      	mov	r2, r8
   8486a:	47b8      	blx	r7
   8486c:	1c43      	adds	r3, r0, #1
   8486e:	d103      	bne.n	84878 <_wcrtomb_r+0x40>
   84870:	2100      	movs	r1, #0
   84872:	228a      	movs	r2, #138	; 0x8a
   84874:	6029      	str	r1, [r5, #0]
   84876:	6022      	str	r2, [r4, #0]
   84878:	b006      	add	sp, #24
   8487a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8487e:	bf00      	nop
   84880:	200708d4 	.word	0x200708d4

00084884 <wcrtomb>:
   84884:	b530      	push	{r4, r5, lr}
   84886:	4613      	mov	r3, r2
   84888:	4a04      	ldr	r2, [pc, #16]	; (8489c <wcrtomb+0x18>)
   8488a:	4605      	mov	r5, r0
   8488c:	460c      	mov	r4, r1
   8488e:	6810      	ldr	r0, [r2, #0]
   84890:	4629      	mov	r1, r5
   84892:	4622      	mov	r2, r4
   84894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   84898:	f7ff bfce 	b.w	84838 <_wcrtomb_r>
   8489c:	20070018 	.word	0x20070018

000848a0 <__ascii_wctomb>:
   848a0:	b149      	cbz	r1, 848b6 <__ascii_wctomb+0x16>
   848a2:	2aff      	cmp	r2, #255	; 0xff
   848a4:	d904      	bls.n	848b0 <__ascii_wctomb+0x10>
   848a6:	238a      	movs	r3, #138	; 0x8a
   848a8:	6003      	str	r3, [r0, #0]
   848aa:	f04f 30ff 	mov.w	r0, #4294967295
   848ae:	4770      	bx	lr
   848b0:	700a      	strb	r2, [r1, #0]
   848b2:	2001      	movs	r0, #1
   848b4:	4770      	bx	lr
   848b6:	4608      	mov	r0, r1
   848b8:	4770      	bx	lr

000848ba <_wctomb_r>:
   848ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   848be:	4698      	mov	r8, r3
   848c0:	4b07      	ldr	r3, [pc, #28]	; (848e0 <_wctomb_r+0x26>)
   848c2:	4605      	mov	r5, r0
   848c4:	460f      	mov	r7, r1
   848c6:	4616      	mov	r6, r2
   848c8:	681c      	ldr	r4, [r3, #0]
   848ca:	f7ff fb1b 	bl	83f04 <__locale_charset>
   848ce:	f8cd 8000 	str.w	r8, [sp]
   848d2:	4603      	mov	r3, r0
   848d4:	4639      	mov	r1, r7
   848d6:	4628      	mov	r0, r5
   848d8:	4632      	mov	r2, r6
   848da:	47a0      	blx	r4
   848dc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   848e0:	200708d4 	.word	0x200708d4

000848e4 <_write_r>:
   848e4:	b538      	push	{r3, r4, r5, lr}
   848e6:	4c07      	ldr	r4, [pc, #28]	; (84904 <_write_r+0x20>)
   848e8:	4605      	mov	r5, r0
   848ea:	2000      	movs	r0, #0
   848ec:	6020      	str	r0, [r4, #0]
   848ee:	4608      	mov	r0, r1
   848f0:	4611      	mov	r1, r2
   848f2:	461a      	mov	r2, r3
   848f4:	f7fb ffbc 	bl	80870 <_write>
   848f8:	1c43      	adds	r3, r0, #1
   848fa:	d102      	bne.n	84902 <_write_r+0x1e>
   848fc:	6823      	ldr	r3, [r4, #0]
   848fe:	b103      	cbz	r3, 84902 <_write_r+0x1e>
   84900:	602b      	str	r3, [r5, #0]
   84902:	bd38      	pop	{r3, r4, r5, pc}
   84904:	20070aac 	.word	0x20070aac

00084908 <_close_r>:
   84908:	b538      	push	{r3, r4, r5, lr}
   8490a:	4c06      	ldr	r4, [pc, #24]	; (84924 <_close_r+0x1c>)
   8490c:	2300      	movs	r3, #0
   8490e:	4605      	mov	r5, r0
   84910:	4608      	mov	r0, r1
   84912:	6023      	str	r3, [r4, #0]
   84914:	f7fd ff9e 	bl	82854 <_close>
   84918:	1c43      	adds	r3, r0, #1
   8491a:	d102      	bne.n	84922 <_close_r+0x1a>
   8491c:	6821      	ldr	r1, [r4, #0]
   8491e:	b101      	cbz	r1, 84922 <_close_r+0x1a>
   84920:	6029      	str	r1, [r5, #0]
   84922:	bd38      	pop	{r3, r4, r5, pc}
   84924:	20070aac 	.word	0x20070aac

00084928 <_fclose_r>:
   84928:	b570      	push	{r4, r5, r6, lr}
   8492a:	4605      	mov	r5, r0
   8492c:	460c      	mov	r4, r1
   8492e:	2900      	cmp	r1, #0
   84930:	d039      	beq.n	849a6 <_fclose_r+0x7e>
   84932:	f7fe ff97 	bl	83864 <__sfp_lock_acquire>
   84936:	b125      	cbz	r5, 84942 <_fclose_r+0x1a>
   84938:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8493a:	b913      	cbnz	r3, 84942 <_fclose_r+0x1a>
   8493c:	4628      	mov	r0, r5
   8493e:	f7fe ff2d 	bl	8379c <__sinit>
   84942:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   84946:	b35e      	cbz	r6, 849a0 <_fclose_r+0x78>
   84948:	4628      	mov	r0, r5
   8494a:	4621      	mov	r1, r4
   8494c:	f7fe fe34 	bl	835b8 <_fflush_r>
   84950:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   84952:	4606      	mov	r6, r0
   84954:	b13a      	cbz	r2, 84966 <_fclose_r+0x3e>
   84956:	4628      	mov	r0, r5
   84958:	69e1      	ldr	r1, [r4, #28]
   8495a:	4790      	blx	r2
   8495c:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   84960:	bf28      	it	cs
   84962:	f04f 36ff 	movcs.w	r6, #4294967295
   84966:	89a0      	ldrh	r0, [r4, #12]
   84968:	f000 0180 	and.w	r1, r0, #128	; 0x80
   8496c:	b20b      	sxth	r3, r1
   8496e:	b11b      	cbz	r3, 84978 <_fclose_r+0x50>
   84970:	4628      	mov	r0, r5
   84972:	6921      	ldr	r1, [r4, #16]
   84974:	f7ff f850 	bl	83a18 <_free_r>
   84978:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8497a:	b141      	cbz	r1, 8498e <_fclose_r+0x66>
   8497c:	f104 0240 	add.w	r2, r4, #64	; 0x40
   84980:	4291      	cmp	r1, r2
   84982:	d002      	beq.n	8498a <_fclose_r+0x62>
   84984:	4628      	mov	r0, r5
   84986:	f7ff f847 	bl	83a18 <_free_r>
   8498a:	2000      	movs	r0, #0
   8498c:	6320      	str	r0, [r4, #48]	; 0x30
   8498e:	6c61      	ldr	r1, [r4, #68]	; 0x44
   84990:	b121      	cbz	r1, 8499c <_fclose_r+0x74>
   84992:	4628      	mov	r0, r5
   84994:	f7ff f840 	bl	83a18 <_free_r>
   84998:	2100      	movs	r1, #0
   8499a:	6461      	str	r1, [r4, #68]	; 0x44
   8499c:	2300      	movs	r3, #0
   8499e:	81a3      	strh	r3, [r4, #12]
   849a0:	f7fe ff61 	bl	83866 <__sfp_lock_release>
   849a4:	e000      	b.n	849a8 <_fclose_r+0x80>
   849a6:	460e      	mov	r6, r1
   849a8:	4630      	mov	r0, r6
   849aa:	bd70      	pop	{r4, r5, r6, pc}

000849ac <fclose>:
   849ac:	4b02      	ldr	r3, [pc, #8]	; (849b8 <fclose+0xc>)
   849ae:	4601      	mov	r1, r0
   849b0:	6818      	ldr	r0, [r3, #0]
   849b2:	f7ff bfb9 	b.w	84928 <_fclose_r>
   849b6:	bf00      	nop
   849b8:	20070018 	.word	0x20070018

000849bc <_fstat_r>:
   849bc:	b538      	push	{r3, r4, r5, lr}
   849be:	4c07      	ldr	r4, [pc, #28]	; (849dc <_fstat_r+0x20>)
   849c0:	2300      	movs	r3, #0
   849c2:	4605      	mov	r5, r0
   849c4:	4608      	mov	r0, r1
   849c6:	4611      	mov	r1, r2
   849c8:	6023      	str	r3, [r4, #0]
   849ca:	f7fd ff47 	bl	8285c <_fstat>
   849ce:	1c43      	adds	r3, r0, #1
   849d0:	d102      	bne.n	849d8 <_fstat_r+0x1c>
   849d2:	6821      	ldr	r1, [r4, #0]
   849d4:	b101      	cbz	r1, 849d8 <_fstat_r+0x1c>
   849d6:	6029      	str	r1, [r5, #0]
   849d8:	bd38      	pop	{r3, r4, r5, pc}
   849da:	bf00      	nop
   849dc:	20070aac 	.word	0x20070aac

000849e0 <_isatty_r>:
   849e0:	b538      	push	{r3, r4, r5, lr}
   849e2:	4c06      	ldr	r4, [pc, #24]	; (849fc <_isatty_r+0x1c>)
   849e4:	2300      	movs	r3, #0
   849e6:	4605      	mov	r5, r0
   849e8:	4608      	mov	r0, r1
   849ea:	6023      	str	r3, [r4, #0]
   849ec:	f7fd ff3c 	bl	82868 <_isatty>
   849f0:	1c43      	adds	r3, r0, #1
   849f2:	d102      	bne.n	849fa <_isatty_r+0x1a>
   849f4:	6821      	ldr	r1, [r4, #0]
   849f6:	b101      	cbz	r1, 849fa <_isatty_r+0x1a>
   849f8:	6029      	str	r1, [r5, #0]
   849fa:	bd38      	pop	{r3, r4, r5, pc}
   849fc:	20070aac 	.word	0x20070aac

00084a00 <_lseek_r>:
   84a00:	b538      	push	{r3, r4, r5, lr}
   84a02:	4c07      	ldr	r4, [pc, #28]	; (84a20 <_lseek_r+0x20>)
   84a04:	4605      	mov	r5, r0
   84a06:	2000      	movs	r0, #0
   84a08:	6020      	str	r0, [r4, #0]
   84a0a:	4608      	mov	r0, r1
   84a0c:	4611      	mov	r1, r2
   84a0e:	461a      	mov	r2, r3
   84a10:	f7fd ff2e 	bl	82870 <_lseek>
   84a14:	1c43      	adds	r3, r0, #1
   84a16:	d102      	bne.n	84a1e <_lseek_r+0x1e>
   84a18:	6823      	ldr	r3, [r4, #0]
   84a1a:	b103      	cbz	r3, 84a1e <_lseek_r+0x1e>
   84a1c:	602b      	str	r3, [r5, #0]
   84a1e:	bd38      	pop	{r3, r4, r5, pc}
   84a20:	20070aac 	.word	0x20070aac

00084a24 <_read_r>:
   84a24:	b538      	push	{r3, r4, r5, lr}
   84a26:	4c07      	ldr	r4, [pc, #28]	; (84a44 <_read_r+0x20>)
   84a28:	4605      	mov	r5, r0
   84a2a:	2000      	movs	r0, #0
   84a2c:	6020      	str	r0, [r4, #0]
   84a2e:	4608      	mov	r0, r1
   84a30:	4611      	mov	r1, r2
   84a32:	461a      	mov	r2, r3
   84a34:	f7fb fed8 	bl	807e8 <_read>
   84a38:	1c43      	adds	r3, r0, #1
   84a3a:	d102      	bne.n	84a42 <_read_r+0x1e>
   84a3c:	6823      	ldr	r3, [r4, #0]
   84a3e:	b103      	cbz	r3, 84a42 <_read_r+0x1e>
   84a40:	602b      	str	r3, [r5, #0]
   84a42:	bd38      	pop	{r3, r4, r5, pc}
   84a44:	20070aac 	.word	0x20070aac

00084a48 <__aeabi_uldivmod>:
   84a48:	b94b      	cbnz	r3, 84a5e <__aeabi_uldivmod+0x16>
   84a4a:	b942      	cbnz	r2, 84a5e <__aeabi_uldivmod+0x16>
   84a4c:	2900      	cmp	r1, #0
   84a4e:	bf08      	it	eq
   84a50:	2800      	cmpeq	r0, #0
   84a52:	d002      	beq.n	84a5a <__aeabi_uldivmod+0x12>
   84a54:	f04f 31ff 	mov.w	r1, #4294967295
   84a58:	4608      	mov	r0, r1
   84a5a:	f000 b83b 	b.w	84ad4 <__aeabi_idiv0>
   84a5e:	b082      	sub	sp, #8
   84a60:	46ec      	mov	ip, sp
   84a62:	e92d 5000 	stmdb	sp!, {ip, lr}
   84a66:	f000 f81d 	bl	84aa4 <__gnu_uldivmod_helper>
   84a6a:	f8dd e004 	ldr.w	lr, [sp, #4]
   84a6e:	b002      	add	sp, #8
   84a70:	bc0c      	pop	{r2, r3}
   84a72:	4770      	bx	lr

00084a74 <__gnu_ldivmod_helper>:
   84a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84a78:	4616      	mov	r6, r2
   84a7a:	4698      	mov	r8, r3
   84a7c:	4604      	mov	r4, r0
   84a7e:	460d      	mov	r5, r1
   84a80:	f000 f82a 	bl	84ad8 <__divdi3>
   84a84:	fb06 fc01 	mul.w	ip, r6, r1
   84a88:	fba6 2300 	umull	r2, r3, r6, r0
   84a8c:	fb00 c708 	mla	r7, r0, r8, ip
   84a90:	18fb      	adds	r3, r7, r3
   84a92:	1aa2      	subs	r2, r4, r2
   84a94:	eb65 0303 	sbc.w	r3, r5, r3
   84a98:	9c06      	ldr	r4, [sp, #24]
   84a9a:	e9c4 2300 	strd	r2, r3, [r4]
   84a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84aa2:	bf00      	nop

00084aa4 <__gnu_uldivmod_helper>:
   84aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84aa8:	4690      	mov	r8, r2
   84aaa:	4606      	mov	r6, r0
   84aac:	460f      	mov	r7, r1
   84aae:	461d      	mov	r5, r3
   84ab0:	f000 f970 	bl	84d94 <__udivdi3>
   84ab4:	fb00 f305 	mul.w	r3, r0, r5
   84ab8:	fba0 4508 	umull	r4, r5, r0, r8
   84abc:	fb08 3801 	mla	r8, r8, r1, r3
   84ac0:	9b06      	ldr	r3, [sp, #24]
   84ac2:	4445      	add	r5, r8
   84ac4:	1b34      	subs	r4, r6, r4
   84ac6:	eb67 0505 	sbc.w	r5, r7, r5
   84aca:	e9c3 4500 	strd	r4, r5, [r3]
   84ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84ad2:	bf00      	nop

00084ad4 <__aeabi_idiv0>:
   84ad4:	4770      	bx	lr
   84ad6:	bf00      	nop

00084ad8 <__divdi3>:
   84ad8:	2900      	cmp	r1, #0
   84ada:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84ade:	461d      	mov	r5, r3
   84ae0:	f2c0 809d 	blt.w	84c1e <__divdi3+0x146>
   84ae4:	2400      	movs	r4, #0
   84ae6:	2d00      	cmp	r5, #0
   84ae8:	f2c0 8094 	blt.w	84c14 <__divdi3+0x13c>
   84aec:	4680      	mov	r8, r0
   84aee:	460f      	mov	r7, r1
   84af0:	4694      	mov	ip, r2
   84af2:	461e      	mov	r6, r3
   84af4:	bbe3      	cbnz	r3, 84b70 <__divdi3+0x98>
   84af6:	428a      	cmp	r2, r1
   84af8:	d955      	bls.n	84ba6 <__divdi3+0xce>
   84afa:	fab2 f782 	clz	r7, r2
   84afe:	b147      	cbz	r7, 84b12 <__divdi3+0x3a>
   84b00:	f1c7 0520 	rsb	r5, r7, #32
   84b04:	fa20 f605 	lsr.w	r6, r0, r5
   84b08:	fa01 f107 	lsl.w	r1, r1, r7
   84b0c:	40ba      	lsls	r2, r7
   84b0e:	40b8      	lsls	r0, r7
   84b10:	4331      	orrs	r1, r6
   84b12:	0c17      	lsrs	r7, r2, #16
   84b14:	fbb1 f6f7 	udiv	r6, r1, r7
   84b18:	fa1f fc82 	uxth.w	ip, r2
   84b1c:	fb07 1116 	mls	r1, r7, r6, r1
   84b20:	fb0c f506 	mul.w	r5, ip, r6
   84b24:	0c03      	lsrs	r3, r0, #16
   84b26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   84b2a:	429d      	cmp	r5, r3
   84b2c:	d908      	bls.n	84b40 <__divdi3+0x68>
   84b2e:	1e71      	subs	r1, r6, #1
   84b30:	189b      	adds	r3, r3, r2
   84b32:	f080 8113 	bcs.w	84d5c <__divdi3+0x284>
   84b36:	429d      	cmp	r5, r3
   84b38:	f240 8110 	bls.w	84d5c <__divdi3+0x284>
   84b3c:	3e02      	subs	r6, #2
   84b3e:	189b      	adds	r3, r3, r2
   84b40:	1b59      	subs	r1, r3, r5
   84b42:	fbb1 f5f7 	udiv	r5, r1, r7
   84b46:	fb07 1315 	mls	r3, r7, r5, r1
   84b4a:	fb0c fc05 	mul.w	ip, ip, r5
   84b4e:	b280      	uxth	r0, r0
   84b50:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
   84b54:	458c      	cmp	ip, r1
   84b56:	d907      	bls.n	84b68 <__divdi3+0x90>
   84b58:	1e6b      	subs	r3, r5, #1
   84b5a:	188a      	adds	r2, r1, r2
   84b5c:	f080 8100 	bcs.w	84d60 <__divdi3+0x288>
   84b60:	4594      	cmp	ip, r2
   84b62:	f240 80fd 	bls.w	84d60 <__divdi3+0x288>
   84b66:	3d02      	subs	r5, #2
   84b68:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
   84b6c:	2500      	movs	r5, #0
   84b6e:	e003      	b.n	84b78 <__divdi3+0xa0>
   84b70:	428b      	cmp	r3, r1
   84b72:	d90c      	bls.n	84b8e <__divdi3+0xb6>
   84b74:	2500      	movs	r5, #0
   84b76:	4629      	mov	r1, r5
   84b78:	460a      	mov	r2, r1
   84b7a:	462b      	mov	r3, r5
   84b7c:	b114      	cbz	r4, 84b84 <__divdi3+0xac>
   84b7e:	4252      	negs	r2, r2
   84b80:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   84b84:	4610      	mov	r0, r2
   84b86:	4619      	mov	r1, r3
   84b88:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84b8c:	4770      	bx	lr
   84b8e:	fab3 f583 	clz	r5, r3
   84b92:	2d00      	cmp	r5, #0
   84b94:	f040 8087 	bne.w	84ca6 <__divdi3+0x1ce>
   84b98:	428b      	cmp	r3, r1
   84b9a:	d301      	bcc.n	84ba0 <__divdi3+0xc8>
   84b9c:	4282      	cmp	r2, r0
   84b9e:	d8ea      	bhi.n	84b76 <__divdi3+0x9e>
   84ba0:	2500      	movs	r5, #0
   84ba2:	2101      	movs	r1, #1
   84ba4:	e7e8      	b.n	84b78 <__divdi3+0xa0>
   84ba6:	b912      	cbnz	r2, 84bae <__divdi3+0xd6>
   84ba8:	2601      	movs	r6, #1
   84baa:	fbb6 f2f2 	udiv	r2, r6, r2
   84bae:	fab2 f682 	clz	r6, r2
   84bb2:	2e00      	cmp	r6, #0
   84bb4:	d139      	bne.n	84c2a <__divdi3+0x152>
   84bb6:	1a8e      	subs	r6, r1, r2
   84bb8:	0c13      	lsrs	r3, r2, #16
   84bba:	fa1f fc82 	uxth.w	ip, r2
   84bbe:	2501      	movs	r5, #1
   84bc0:	fbb6 f7f3 	udiv	r7, r6, r3
   84bc4:	fb03 6117 	mls	r1, r3, r7, r6
   84bc8:	fb0c f807 	mul.w	r8, ip, r7
   84bcc:	ea4f 4910 	mov.w	r9, r0, lsr #16
   84bd0:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
   84bd4:	45b0      	cmp	r8, r6
   84bd6:	d906      	bls.n	84be6 <__divdi3+0x10e>
   84bd8:	1e79      	subs	r1, r7, #1
   84bda:	18b6      	adds	r6, r6, r2
   84bdc:	d202      	bcs.n	84be4 <__divdi3+0x10c>
   84bde:	45b0      	cmp	r8, r6
   84be0:	f200 80d3 	bhi.w	84d8a <__divdi3+0x2b2>
   84be4:	460f      	mov	r7, r1
   84be6:	ebc8 0606 	rsb	r6, r8, r6
   84bea:	fbb6 f1f3 	udiv	r1, r6, r3
   84bee:	fb03 6311 	mls	r3, r3, r1, r6
   84bf2:	fb0c fc01 	mul.w	ip, ip, r1
   84bf6:	b280      	uxth	r0, r0
   84bf8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   84bfc:	459c      	cmp	ip, r3
   84bfe:	d906      	bls.n	84c0e <__divdi3+0x136>
   84c00:	1e4e      	subs	r6, r1, #1
   84c02:	189a      	adds	r2, r3, r2
   84c04:	d202      	bcs.n	84c0c <__divdi3+0x134>
   84c06:	4594      	cmp	ip, r2
   84c08:	f200 80c2 	bhi.w	84d90 <__divdi3+0x2b8>
   84c0c:	4631      	mov	r1, r6
   84c0e:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   84c12:	e7b1      	b.n	84b78 <__divdi3+0xa0>
   84c14:	43e4      	mvns	r4, r4
   84c16:	4252      	negs	r2, r2
   84c18:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   84c1c:	e766      	b.n	84aec <__divdi3+0x14>
   84c1e:	4240      	negs	r0, r0
   84c20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84c24:	f04f 34ff 	mov.w	r4, #4294967295
   84c28:	e75d      	b.n	84ae6 <__divdi3+0xe>
   84c2a:	40b2      	lsls	r2, r6
   84c2c:	f1c6 0920 	rsb	r9, r6, #32
   84c30:	fa21 f709 	lsr.w	r7, r1, r9
   84c34:	fa20 f909 	lsr.w	r9, r0, r9
   84c38:	fa01 f106 	lsl.w	r1, r1, r6
   84c3c:	0c13      	lsrs	r3, r2, #16
   84c3e:	fbb7 f8f3 	udiv	r8, r7, r3
   84c42:	fa1f fc82 	uxth.w	ip, r2
   84c46:	fb03 7718 	mls	r7, r3, r8, r7
   84c4a:	fb0c f508 	mul.w	r5, ip, r8
   84c4e:	ea49 0901 	orr.w	r9, r9, r1
   84c52:	ea4f 4119 	mov.w	r1, r9, lsr #16
   84c56:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
   84c5a:	40b0      	lsls	r0, r6
   84c5c:	42bd      	cmp	r5, r7
   84c5e:	d90a      	bls.n	84c76 <__divdi3+0x19e>
   84c60:	18bf      	adds	r7, r7, r2
   84c62:	f108 36ff 	add.w	r6, r8, #4294967295
   84c66:	f080 808e 	bcs.w	84d86 <__divdi3+0x2ae>
   84c6a:	42bd      	cmp	r5, r7
   84c6c:	f240 808b 	bls.w	84d86 <__divdi3+0x2ae>
   84c70:	f1a8 0802 	sub.w	r8, r8, #2
   84c74:	18bf      	adds	r7, r7, r2
   84c76:	1b79      	subs	r1, r7, r5
   84c78:	fbb1 f5f3 	udiv	r5, r1, r3
   84c7c:	fb03 1715 	mls	r7, r3, r5, r1
   84c80:	fb0c f605 	mul.w	r6, ip, r5
   84c84:	fa1f f989 	uxth.w	r9, r9
   84c88:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
   84c8c:	428e      	cmp	r6, r1
   84c8e:	d906      	bls.n	84c9e <__divdi3+0x1c6>
   84c90:	1e6f      	subs	r7, r5, #1
   84c92:	1889      	adds	r1, r1, r2
   84c94:	d271      	bcs.n	84d7a <__divdi3+0x2a2>
   84c96:	428e      	cmp	r6, r1
   84c98:	d96f      	bls.n	84d7a <__divdi3+0x2a2>
   84c9a:	3d02      	subs	r5, #2
   84c9c:	1889      	adds	r1, r1, r2
   84c9e:	1b8e      	subs	r6, r1, r6
   84ca0:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
   84ca4:	e78c      	b.n	84bc0 <__divdi3+0xe8>
   84ca6:	f1c5 0120 	rsb	r1, r5, #32
   84caa:	fa22 f301 	lsr.w	r3, r2, r1
   84cae:	fa06 f605 	lsl.w	r6, r6, r5
   84cb2:	fa27 f201 	lsr.w	r2, r7, r1
   84cb6:	fa07 f705 	lsl.w	r7, r7, r5
   84cba:	fa20 f101 	lsr.w	r1, r0, r1
   84cbe:	431e      	orrs	r6, r3
   84cc0:	ea4f 4916 	mov.w	r9, r6, lsr #16
   84cc4:	fbb2 f8f9 	udiv	r8, r2, r9
   84cc8:	fa1f fa86 	uxth.w	sl, r6
   84ccc:	fb09 2218 	mls	r2, r9, r8, r2
   84cd0:	fb0a fb08 	mul.w	fp, sl, r8
   84cd4:	430f      	orrs	r7, r1
   84cd6:	0c3b      	lsrs	r3, r7, #16
   84cd8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   84cdc:	4593      	cmp	fp, r2
   84cde:	fa0c fc05 	lsl.w	ip, ip, r5
   84ce2:	d908      	bls.n	84cf6 <__divdi3+0x21e>
   84ce4:	1992      	adds	r2, r2, r6
   84ce6:	f108 31ff 	add.w	r1, r8, #4294967295
   84cea:	d24a      	bcs.n	84d82 <__divdi3+0x2aa>
   84cec:	4593      	cmp	fp, r2
   84cee:	d948      	bls.n	84d82 <__divdi3+0x2aa>
   84cf0:	f1a8 0802 	sub.w	r8, r8, #2
   84cf4:	1992      	adds	r2, r2, r6
   84cf6:	ebcb 0302 	rsb	r3, fp, r2
   84cfa:	fbb3 f1f9 	udiv	r1, r3, r9
   84cfe:	fb09 3211 	mls	r2, r9, r1, r3
   84d02:	fb0a fa01 	mul.w	sl, sl, r1
   84d06:	b2bf      	uxth	r7, r7
   84d08:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
   84d0c:	459a      	cmp	sl, r3
   84d0e:	d906      	bls.n	84d1e <__divdi3+0x246>
   84d10:	1e4a      	subs	r2, r1, #1
   84d12:	199b      	adds	r3, r3, r6
   84d14:	d233      	bcs.n	84d7e <__divdi3+0x2a6>
   84d16:	459a      	cmp	sl, r3
   84d18:	d931      	bls.n	84d7e <__divdi3+0x2a6>
   84d1a:	3902      	subs	r1, #2
   84d1c:	199b      	adds	r3, r3, r6
   84d1e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
   84d22:	0c0f      	lsrs	r7, r1, #16
   84d24:	fa1f f88c 	uxth.w	r8, ip
   84d28:	fb08 f607 	mul.w	r6, r8, r7
   84d2c:	b28a      	uxth	r2, r1
   84d2e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   84d32:	fb08 f802 	mul.w	r8, r8, r2
   84d36:	fb0c 6202 	mla	r2, ip, r2, r6
   84d3a:	fb0c fc07 	mul.w	ip, ip, r7
   84d3e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   84d42:	4296      	cmp	r6, r2
   84d44:	bf88      	it	hi
   84d46:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
   84d4a:	ebca 0303 	rsb	r3, sl, r3
   84d4e:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
   84d52:	4563      	cmp	r3, ip
   84d54:	d30e      	bcc.n	84d74 <__divdi3+0x29c>
   84d56:	d005      	beq.n	84d64 <__divdi3+0x28c>
   84d58:	2500      	movs	r5, #0
   84d5a:	e70d      	b.n	84b78 <__divdi3+0xa0>
   84d5c:	460e      	mov	r6, r1
   84d5e:	e6ef      	b.n	84b40 <__divdi3+0x68>
   84d60:	461d      	mov	r5, r3
   84d62:	e701      	b.n	84b68 <__divdi3+0x90>
   84d64:	fa00 f005 	lsl.w	r0, r0, r5
   84d68:	fa1f f888 	uxth.w	r8, r8
   84d6c:	eb08 4502 	add.w	r5, r8, r2, lsl #16
   84d70:	42a8      	cmp	r0, r5
   84d72:	d2f1      	bcs.n	84d58 <__divdi3+0x280>
   84d74:	3901      	subs	r1, #1
   84d76:	2500      	movs	r5, #0
   84d78:	e6fe      	b.n	84b78 <__divdi3+0xa0>
   84d7a:	463d      	mov	r5, r7
   84d7c:	e78f      	b.n	84c9e <__divdi3+0x1c6>
   84d7e:	4611      	mov	r1, r2
   84d80:	e7cd      	b.n	84d1e <__divdi3+0x246>
   84d82:	4688      	mov	r8, r1
   84d84:	e7b7      	b.n	84cf6 <__divdi3+0x21e>
   84d86:	46b0      	mov	r8, r6
   84d88:	e775      	b.n	84c76 <__divdi3+0x19e>
   84d8a:	3f02      	subs	r7, #2
   84d8c:	18b6      	adds	r6, r6, r2
   84d8e:	e72a      	b.n	84be6 <__divdi3+0x10e>
   84d90:	3902      	subs	r1, #2
   84d92:	e73c      	b.n	84c0e <__divdi3+0x136>

00084d94 <__udivdi3>:
   84d94:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   84d98:	4614      	mov	r4, r2
   84d9a:	4605      	mov	r5, r0
   84d9c:	460e      	mov	r6, r1
   84d9e:	2b00      	cmp	r3, #0
   84da0:	d13d      	bne.n	84e1e <__udivdi3+0x8a>
   84da2:	428a      	cmp	r2, r1
   84da4:	d949      	bls.n	84e3a <__udivdi3+0xa6>
   84da6:	fab2 f782 	clz	r7, r2
   84daa:	b147      	cbz	r7, 84dbe <__udivdi3+0x2a>
   84dac:	f1c7 0120 	rsb	r1, r7, #32
   84db0:	fa20 f201 	lsr.w	r2, r0, r1
   84db4:	fa06 f607 	lsl.w	r6, r6, r7
   84db8:	40bc      	lsls	r4, r7
   84dba:	40bd      	lsls	r5, r7
   84dbc:	4316      	orrs	r6, r2
   84dbe:	0c22      	lsrs	r2, r4, #16
   84dc0:	fbb6 f0f2 	udiv	r0, r6, r2
   84dc4:	b2a1      	uxth	r1, r4
   84dc6:	fb02 6610 	mls	r6, r2, r0, r6
   84dca:	fb01 f300 	mul.w	r3, r1, r0
   84dce:	0c2f      	lsrs	r7, r5, #16
   84dd0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   84dd4:	42b3      	cmp	r3, r6
   84dd6:	d908      	bls.n	84dea <__udivdi3+0x56>
   84dd8:	1e47      	subs	r7, r0, #1
   84dda:	1936      	adds	r6, r6, r4
   84ddc:	f080 80fa 	bcs.w	84fd4 <__udivdi3+0x240>
   84de0:	42b3      	cmp	r3, r6
   84de2:	f240 80f7 	bls.w	84fd4 <__udivdi3+0x240>
   84de6:	3802      	subs	r0, #2
   84de8:	1936      	adds	r6, r6, r4
   84dea:	1af6      	subs	r6, r6, r3
   84dec:	fbb6 f3f2 	udiv	r3, r6, r2
   84df0:	fb02 6213 	mls	r2, r2, r3, r6
   84df4:	fb01 f103 	mul.w	r1, r1, r3
   84df8:	b2ad      	uxth	r5, r5
   84dfa:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
   84dfe:	4291      	cmp	r1, r2
   84e00:	d907      	bls.n	84e12 <__udivdi3+0x7e>
   84e02:	1e5e      	subs	r6, r3, #1
   84e04:	1912      	adds	r2, r2, r4
   84e06:	f080 80e7 	bcs.w	84fd8 <__udivdi3+0x244>
   84e0a:	4291      	cmp	r1, r2
   84e0c:	f240 80e4 	bls.w	84fd8 <__udivdi3+0x244>
   84e10:	3b02      	subs	r3, #2
   84e12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   84e16:	2100      	movs	r1, #0
   84e18:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   84e1c:	4770      	bx	lr
   84e1e:	428b      	cmp	r3, r1
   84e20:	d843      	bhi.n	84eaa <__udivdi3+0x116>
   84e22:	fab3 f483 	clz	r4, r3
   84e26:	2c00      	cmp	r4, #0
   84e28:	d142      	bne.n	84eb0 <__udivdi3+0x11c>
   84e2a:	428b      	cmp	r3, r1
   84e2c:	d302      	bcc.n	84e34 <__udivdi3+0xa0>
   84e2e:	4282      	cmp	r2, r0
   84e30:	f200 80e1 	bhi.w	84ff6 <__udivdi3+0x262>
   84e34:	2100      	movs	r1, #0
   84e36:	2001      	movs	r0, #1
   84e38:	e7ee      	b.n	84e18 <__udivdi3+0x84>
   84e3a:	b912      	cbnz	r2, 84e42 <__udivdi3+0xae>
   84e3c:	2701      	movs	r7, #1
   84e3e:	fbb7 f4f2 	udiv	r4, r7, r2
   84e42:	fab4 f284 	clz	r2, r4
   84e46:	2a00      	cmp	r2, #0
   84e48:	f040 8089 	bne.w	84f5e <__udivdi3+0x1ca>
   84e4c:	1b0a      	subs	r2, r1, r4
   84e4e:	0c23      	lsrs	r3, r4, #16
   84e50:	b2a7      	uxth	r7, r4
   84e52:	2101      	movs	r1, #1
   84e54:	fbb2 f6f3 	udiv	r6, r2, r3
   84e58:	fb03 2216 	mls	r2, r3, r6, r2
   84e5c:	fb07 f006 	mul.w	r0, r7, r6
   84e60:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   84e64:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   84e68:	4290      	cmp	r0, r2
   84e6a:	d907      	bls.n	84e7c <__udivdi3+0xe8>
   84e6c:	1912      	adds	r2, r2, r4
   84e6e:	f106 3cff 	add.w	ip, r6, #4294967295
   84e72:	d202      	bcs.n	84e7a <__udivdi3+0xe6>
   84e74:	4290      	cmp	r0, r2
   84e76:	f200 80d0 	bhi.w	8501a <__udivdi3+0x286>
   84e7a:	4666      	mov	r6, ip
   84e7c:	1a12      	subs	r2, r2, r0
   84e7e:	fbb2 f0f3 	udiv	r0, r2, r3
   84e82:	fb03 2310 	mls	r3, r3, r0, r2
   84e86:	fb07 f700 	mul.w	r7, r7, r0
   84e8a:	b2ad      	uxth	r5, r5
   84e8c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   84e90:	429f      	cmp	r7, r3
   84e92:	d907      	bls.n	84ea4 <__udivdi3+0x110>
   84e94:	1e42      	subs	r2, r0, #1
   84e96:	191b      	adds	r3, r3, r4
   84e98:	f080 80a0 	bcs.w	84fdc <__udivdi3+0x248>
   84e9c:	429f      	cmp	r7, r3
   84e9e:	f240 809d 	bls.w	84fdc <__udivdi3+0x248>
   84ea2:	3802      	subs	r0, #2
   84ea4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   84ea8:	e7b6      	b.n	84e18 <__udivdi3+0x84>
   84eaa:	2100      	movs	r1, #0
   84eac:	4608      	mov	r0, r1
   84eae:	e7b3      	b.n	84e18 <__udivdi3+0x84>
   84eb0:	f1c4 0620 	rsb	r6, r4, #32
   84eb4:	fa22 f706 	lsr.w	r7, r2, r6
   84eb8:	fa03 f304 	lsl.w	r3, r3, r4
   84ebc:	fa21 f506 	lsr.w	r5, r1, r6
   84ec0:	fa01 f104 	lsl.w	r1, r1, r4
   84ec4:	fa20 f606 	lsr.w	r6, r0, r6
   84ec8:	433b      	orrs	r3, r7
   84eca:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   84ece:	fbb5 f7fc 	udiv	r7, r5, ip
   84ed2:	fa1f f883 	uxth.w	r8, r3
   84ed6:	fb0c 5517 	mls	r5, ip, r7, r5
   84eda:	fb08 f907 	mul.w	r9, r8, r7
   84ede:	ea46 0a01 	orr.w	sl, r6, r1
   84ee2:	ea4f 411a 	mov.w	r1, sl, lsr #16
   84ee6:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   84eea:	45a9      	cmp	r9, r5
   84eec:	fa02 f204 	lsl.w	r2, r2, r4
   84ef0:	d904      	bls.n	84efc <__udivdi3+0x168>
   84ef2:	1e7e      	subs	r6, r7, #1
   84ef4:	18ed      	adds	r5, r5, r3
   84ef6:	f0c0 8081 	bcc.w	84ffc <__udivdi3+0x268>
   84efa:	4637      	mov	r7, r6
   84efc:	ebc9 0105 	rsb	r1, r9, r5
   84f00:	fbb1 f6fc 	udiv	r6, r1, ip
   84f04:	fb0c 1516 	mls	r5, ip, r6, r1
   84f08:	fb08 f806 	mul.w	r8, r8, r6
   84f0c:	fa1f fa8a 	uxth.w	sl, sl
   84f10:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
   84f14:	4588      	cmp	r8, r1
   84f16:	d903      	bls.n	84f20 <__udivdi3+0x18c>
   84f18:	1e75      	subs	r5, r6, #1
   84f1a:	18c9      	adds	r1, r1, r3
   84f1c:	d374      	bcc.n	85008 <__udivdi3+0x274>
   84f1e:	462e      	mov	r6, r5
   84f20:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   84f24:	0c37      	lsrs	r7, r6, #16
   84f26:	fa1f fc82 	uxth.w	ip, r2
   84f2a:	fb0c f507 	mul.w	r5, ip, r7
   84f2e:	0c12      	lsrs	r2, r2, #16
   84f30:	b2b3      	uxth	r3, r6
   84f32:	fb0c fc03 	mul.w	ip, ip, r3
   84f36:	fb02 5303 	mla	r3, r2, r3, r5
   84f3a:	fb02 f207 	mul.w	r2, r2, r7
   84f3e:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   84f42:	429d      	cmp	r5, r3
   84f44:	bf88      	it	hi
   84f46:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
   84f4a:	ebc8 0101 	rsb	r1, r8, r1
   84f4e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   84f52:	4291      	cmp	r1, r2
   84f54:	d34c      	bcc.n	84ff0 <__udivdi3+0x25c>
   84f56:	d043      	beq.n	84fe0 <__udivdi3+0x24c>
   84f58:	4630      	mov	r0, r6
   84f5a:	2100      	movs	r1, #0
   84f5c:	e75c      	b.n	84e18 <__udivdi3+0x84>
   84f5e:	4094      	lsls	r4, r2
   84f60:	f1c2 0520 	rsb	r5, r2, #32
   84f64:	fa21 f605 	lsr.w	r6, r1, r5
   84f68:	fa20 f505 	lsr.w	r5, r0, r5
   84f6c:	fa01 f102 	lsl.w	r1, r1, r2
   84f70:	0c23      	lsrs	r3, r4, #16
   84f72:	fbb6 fcf3 	udiv	ip, r6, r3
   84f76:	b2a7      	uxth	r7, r4
   84f78:	fb03 661c 	mls	r6, r3, ip, r6
   84f7c:	fb07 f80c 	mul.w	r8, r7, ip
   84f80:	4329      	orrs	r1, r5
   84f82:	0c0d      	lsrs	r5, r1, #16
   84f84:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   84f88:	45b0      	cmp	r8, r6
   84f8a:	fa00 f502 	lsl.w	r5, r0, r2
   84f8e:	d908      	bls.n	84fa2 <__udivdi3+0x20e>
   84f90:	1936      	adds	r6, r6, r4
   84f92:	f10c 30ff 	add.w	r0, ip, #4294967295
   84f96:	d23e      	bcs.n	85016 <__udivdi3+0x282>
   84f98:	45b0      	cmp	r8, r6
   84f9a:	d93c      	bls.n	85016 <__udivdi3+0x282>
   84f9c:	f1ac 0c02 	sub.w	ip, ip, #2
   84fa0:	1936      	adds	r6, r6, r4
   84fa2:	ebc8 0206 	rsb	r2, r8, r6
   84fa6:	fbb2 f0f3 	udiv	r0, r2, r3
   84faa:	fb03 2610 	mls	r6, r3, r0, r2
   84fae:	fb07 f800 	mul.w	r8, r7, r0
   84fb2:	b289      	uxth	r1, r1
   84fb4:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   84fb8:	4590      	cmp	r8, r2
   84fba:	d906      	bls.n	84fca <__udivdi3+0x236>
   84fbc:	1e46      	subs	r6, r0, #1
   84fbe:	1912      	adds	r2, r2, r4
   84fc0:	d227      	bcs.n	85012 <__udivdi3+0x27e>
   84fc2:	4590      	cmp	r8, r2
   84fc4:	d925      	bls.n	85012 <__udivdi3+0x27e>
   84fc6:	3802      	subs	r0, #2
   84fc8:	1912      	adds	r2, r2, r4
   84fca:	ebc8 0202 	rsb	r2, r8, r2
   84fce:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
   84fd2:	e73f      	b.n	84e54 <__udivdi3+0xc0>
   84fd4:	4638      	mov	r0, r7
   84fd6:	e708      	b.n	84dea <__udivdi3+0x56>
   84fd8:	4633      	mov	r3, r6
   84fda:	e71a      	b.n	84e12 <__udivdi3+0x7e>
   84fdc:	4610      	mov	r0, r2
   84fde:	e761      	b.n	84ea4 <__udivdi3+0x110>
   84fe0:	fa00 f004 	lsl.w	r0, r0, r4
   84fe4:	fa1f fc8c 	uxth.w	ip, ip
   84fe8:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
   84fec:	4298      	cmp	r0, r3
   84fee:	d2b3      	bcs.n	84f58 <__udivdi3+0x1c4>
   84ff0:	1e70      	subs	r0, r6, #1
   84ff2:	2100      	movs	r1, #0
   84ff4:	e710      	b.n	84e18 <__udivdi3+0x84>
   84ff6:	4621      	mov	r1, r4
   84ff8:	4620      	mov	r0, r4
   84ffa:	e70d      	b.n	84e18 <__udivdi3+0x84>
   84ffc:	45a9      	cmp	r9, r5
   84ffe:	f67f af7c 	bls.w	84efa <__udivdi3+0x166>
   85002:	3f02      	subs	r7, #2
   85004:	18ed      	adds	r5, r5, r3
   85006:	e779      	b.n	84efc <__udivdi3+0x168>
   85008:	4588      	cmp	r8, r1
   8500a:	d988      	bls.n	84f1e <__udivdi3+0x18a>
   8500c:	3e02      	subs	r6, #2
   8500e:	18c9      	adds	r1, r1, r3
   85010:	e786      	b.n	84f20 <__udivdi3+0x18c>
   85012:	4630      	mov	r0, r6
   85014:	e7d9      	b.n	84fca <__udivdi3+0x236>
   85016:	4684      	mov	ip, r0
   85018:	e7c3      	b.n	84fa2 <__udivdi3+0x20e>
   8501a:	3e02      	subs	r6, #2
   8501c:	1912      	adds	r2, r2, r4
   8501e:	e72d      	b.n	84e7c <__udivdi3+0xe8>
   85020:	20434441 	.word	0x20434441
   85024:	31207369 	.word	0x31207369
   85028:	74696230 	.word	0x74696230
   8502c:	00000000 	.word	0x00000000
   85030:	6e616843 	.word	0x6e616843
   85034:	206c656e 	.word	0x206c656e
   85038:	69642033 	.word	0x69642033
   8503c:	6c626173 	.word	0x6c626173
   85040:	00006465 	.word	0x00006465
   85044:	206e6950 	.word	0x206e6950
   85048:	73692033 	.word	0x73692033
   8504c:	73696420 	.word	0x73696420
   85050:	656c6261 	.word	0x656c6261
   85054:	00000064 	.word	0x00000064
   85058:	206e6950 	.word	0x206e6950
   8505c:	73692033 	.word	0x73692033
   85060:	74756f20 	.word	0x74756f20
   85064:	00747570 	.word	0x00747570
   85068:	206e6950 	.word	0x206e6950
   8506c:	6f6d2033 	.word	0x6f6d2033
   85070:	69206564 	.word	0x69206564
   85074:	6f6e2073 	.word	0x6f6e2073
   85078:	75702074 	.word	0x75702074
   8507c:	70756c6c 	.word	0x70756c6c
   85080:	00000000 	.word	0x00000000
   85084:	74736574 	.word	0x74736574
   85088:	7365742f 	.word	0x7365742f
   8508c:	64615f74 	.word	0x64615f74
   85090:	00632e63 	.word	0x00632e63
   85094:	74736574 	.word	0x74736574
   85098:	6364615f 	.word	0x6364615f
   8509c:	6232315f 	.word	0x6232315f
   850a0:	00007469 	.word	0x00007469
   850a4:	74736574 	.word	0x74736574
   850a8:	6168635f 	.word	0x6168635f
   850ac:	6c656e6e 	.word	0x6c656e6e
   850b0:	655f335f 	.word	0x655f335f
   850b4:	6c62616e 	.word	0x6c62616e
   850b8:	00006465 	.word	0x00006465
   850bc:	74736574 	.word	0x74736574
   850c0:	6364615f 	.word	0x6364615f
   850c4:	6e69705f 	.word	0x6e69705f
   850c8:	616e655f 	.word	0x616e655f
   850cc:	64656c62 	.word	0x64656c62
   850d0:	00000000 	.word	0x00000000
   850d4:	74736574 	.word	0x74736574
   850d8:	6364615f 	.word	0x6364615f
   850dc:	6e69705f 	.word	0x6e69705f
   850e0:	706e695f 	.word	0x706e695f
   850e4:	00007475 	.word	0x00007475
   850e8:	74736574 	.word	0x74736574
   850ec:	6364615f 	.word	0x6364615f
   850f0:	6e69705f 	.word	0x6e69705f
   850f4:	6c75705f 	.word	0x6c75705f
   850f8:	0070756c 	.word	0x0070756c
   850fc:	20334123 	.word	0x20334123
   85100:	0d0a6425 	.word	0x0d0a6425
   85104:	00000000 	.word	0x00000000
   85108:	20344123 	.word	0x20344123
   8510c:	0d0a6425 	.word	0x0d0a6425
   85110:	00000000 	.word	0x00000000
   85114:	20324123 	.word	0x20324123
   85118:	0d0a6425 	.word	0x0d0a6425
   8511c:	00000000 	.word	0x00000000
   85120:	20314123 	.word	0x20314123
   85124:	0d0a6425 	.word	0x0d0a6425
   85128:	00000000 	.word	0x00000000

0008512c <UnityStrOk>:
   8512c:	00004b4f                                OK..

00085130 <UnityStrSpacer>:
   85130:	0000202e                                . ..

00085134 <UnityStrWas>:
   85134:	73615720 00000020                        Was ...

0008513c <UnityStrFail>:
   8513c:	4c494146 00000000                       FAIL....

00085144 <UnityStrExpected>:
   85144:	70784520 65746365 00002064               Expected ..

00085150 <UnityStrBreaker>:
   85150:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   85160:	2d2d2d2d 002d2d2d                       -------.

00085168 <UnityStrResultsFailures>:
   85168:	69614620 6572756c 00002073               Failures ..

00085174 <UnityStrResultsIgnored>:
   85174:	6e674920 6465726f 00000020               Ignored ...

00085180 <UnityStrResultsTests>:
   85180:	73655420 00207374                        Tests .

00085188 <UnityStrPass>:
   85188:	53534150 00000000                       PASS....

00085190 <_global_impure_ptr>:
   85190:	20070020 20200043                                 .. C.

00085196 <blanks.6678>:
   85196:	20202020 20202020 20202020 20202020                     

000851a6 <zeroes.6679>:
   851a6:	30303030 30303030 30303030 30303030     0000000000000000
   851b6:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   851c6:	32313000 36353433 61393837 65646362     .0123456789abcde
   851d6:	4f500066 00584953 b5f8002e                       f.POSIX...

000851e0 <_init>:
   851e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   851e2:	bf00      	nop
   851e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   851e6:	bc08      	pop	{r3}
   851e8:	469e      	mov	lr, r3
   851ea:	4770      	bx	lr

000851ec <__init_array_start>:
   851ec:	00083599 	.word	0x00083599

000851f0 <__frame_dummy_init_array_entry>:
   851f0:	0008016d                                m...

000851f4 <_fini>:
   851f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   851f6:	bf00      	nop
   851f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   851fa:	bc08      	pop	{r3}
   851fc:	469e      	mov	lr, r3
   851fe:	4770      	bx	lr

00085200 <__fini_array_start>:
   85200:	00080145 	.word	0x00080145

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
// Delay loop is put to SRAM so that FWS will not affect delay time
OPTIMIZE_HIGH
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <xNextTaskUnblockTime>:
2007000c:	ffff ffff                                   ....

20070010 <SystemCoreClock>:
20070010:	0900 003d 0000 0000                         ..=.....

20070018 <_impure_ptr>:
20070018:	0020 2007 0000 0000                          .. ....

20070020 <impure_data>:
20070020:	0000 0000 030c 2007 0374 2007 03dc 2007     ....... t.. ... 
	...
20070054:	5194 0008 0000 0000 0000 0000 0000 0000     .Q..............
	...
200700c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200700d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20070448 <lc_ctype_charset>:
20070448:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20070468 <__mb_cur_max>:
20070468:	0001 0000                                   ....

2007046c <lc_message_charset>:
2007046c:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

2007048c <lconv>:
2007048c:	51de 0008 51df 0008 51df 0008 51df 0008     .Q...Q...Q...Q..
2007049c:	51df 0008 51df 0008 51df 0008 51df 0008     .Q...Q...Q...Q..
200704ac:	51df 0008 51df 0008 ffff ffff ffff ffff     .Q...Q..........
200704bc:	ffff ffff ffff 0000                         ........

200704c4 <__malloc_av_>:
	...
200704cc:	04c4 2007 04c4 2007 04cc 2007 04cc 2007     ... ... ... ... 
200704dc:	04d4 2007 04d4 2007 04dc 2007 04dc 2007     ... ... ... ... 
200704ec:	04e4 2007 04e4 2007 04ec 2007 04ec 2007     ... ... ... ... 
200704fc:	04f4 2007 04f4 2007 04fc 2007 04fc 2007     ... ... ... ... 
2007050c:	0504 2007 0504 2007 050c 2007 050c 2007     ... ... ... ... 
2007051c:	0514 2007 0514 2007 051c 2007 051c 2007     ... ... ... ... 
2007052c:	0524 2007 0524 2007 052c 2007 052c 2007     $.. $.. ,.. ,.. 
2007053c:	0534 2007 0534 2007 053c 2007 053c 2007     4.. 4.. <.. <.. 
2007054c:	0544 2007 0544 2007 054c 2007 054c 2007     D.. D.. L.. L.. 
2007055c:	0554 2007 0554 2007 055c 2007 055c 2007     T.. T.. \.. \.. 
2007056c:	0564 2007 0564 2007 056c 2007 056c 2007     d.. d.. l.. l.. 
2007057c:	0574 2007 0574 2007 057c 2007 057c 2007     t.. t.. |.. |.. 
2007058c:	0584 2007 0584 2007 058c 2007 058c 2007     ... ... ... ... 
2007059c:	0594 2007 0594 2007 059c 2007 059c 2007     ... ... ... ... 
200705ac:	05a4 2007 05a4 2007 05ac 2007 05ac 2007     ... ... ... ... 
200705bc:	05b4 2007 05b4 2007 05bc 2007 05bc 2007     ... ... ... ... 
200705cc:	05c4 2007 05c4 2007 05cc 2007 05cc 2007     ... ... ... ... 
200705dc:	05d4 2007 05d4 2007 05dc 2007 05dc 2007     ... ... ... ... 
200705ec:	05e4 2007 05e4 2007 05ec 2007 05ec 2007     ... ... ... ... 
200705fc:	05f4 2007 05f4 2007 05fc 2007 05fc 2007     ... ... ... ... 
2007060c:	0604 2007 0604 2007 060c 2007 060c 2007     ... ... ... ... 
2007061c:	0614 2007 0614 2007 061c 2007 061c 2007     ... ... ... ... 
2007062c:	0624 2007 0624 2007 062c 2007 062c 2007     $.. $.. ,.. ,.. 
2007063c:	0634 2007 0634 2007 063c 2007 063c 2007     4.. 4.. <.. <.. 
2007064c:	0644 2007 0644 2007 064c 2007 064c 2007     D.. D.. L.. L.. 
2007065c:	0654 2007 0654 2007 065c 2007 065c 2007     T.. T.. \.. \.. 
2007066c:	0664 2007 0664 2007 066c 2007 066c 2007     d.. d.. l.. l.. 
2007067c:	0674 2007 0674 2007 067c 2007 067c 2007     t.. t.. |.. |.. 
2007068c:	0684 2007 0684 2007 068c 2007 068c 2007     ... ... ... ... 
2007069c:	0694 2007 0694 2007 069c 2007 069c 2007     ... ... ... ... 
200706ac:	06a4 2007 06a4 2007 06ac 2007 06ac 2007     ... ... ... ... 
200706bc:	06b4 2007 06b4 2007 06bc 2007 06bc 2007     ... ... ... ... 
200706cc:	06c4 2007 06c4 2007 06cc 2007 06cc 2007     ... ... ... ... 
200706dc:	06d4 2007 06d4 2007 06dc 2007 06dc 2007     ... ... ... ... 
200706ec:	06e4 2007 06e4 2007 06ec 2007 06ec 2007     ... ... ... ... 
200706fc:	06f4 2007 06f4 2007 06fc 2007 06fc 2007     ... ... ... ... 
2007070c:	0704 2007 0704 2007 070c 2007 070c 2007     ... ... ... ... 
2007071c:	0714 2007 0714 2007 071c 2007 071c 2007     ... ... ... ... 
2007072c:	0724 2007 0724 2007 072c 2007 072c 2007     $.. $.. ,.. ,.. 
2007073c:	0734 2007 0734 2007 073c 2007 073c 2007     4.. 4.. <.. <.. 
2007074c:	0744 2007 0744 2007 074c 2007 074c 2007     D.. D.. L.. L.. 
2007075c:	0754 2007 0754 2007 075c 2007 075c 2007     T.. T.. \.. \.. 
2007076c:	0764 2007 0764 2007 076c 2007 076c 2007     d.. d.. l.. l.. 
2007077c:	0774 2007 0774 2007 077c 2007 077c 2007     t.. t.. |.. |.. 
2007078c:	0784 2007 0784 2007 078c 2007 078c 2007     ... ... ... ... 
2007079c:	0794 2007 0794 2007 079c 2007 079c 2007     ... ... ... ... 
200707ac:	07a4 2007 07a4 2007 07ac 2007 07ac 2007     ... ... ... ... 
200707bc:	07b4 2007 07b4 2007 07bc 2007 07bc 2007     ... ... ... ... 
200707cc:	07c4 2007 07c4 2007 07cc 2007 07cc 2007     ... ... ... ... 
200707dc:	07d4 2007 07d4 2007 07dc 2007 07dc 2007     ... ... ... ... 
200707ec:	07e4 2007 07e4 2007 07ec 2007 07ec 2007     ... ... ... ... 
200707fc:	07f4 2007 07f4 2007 07fc 2007 07fc 2007     ... ... ... ... 
2007080c:	0804 2007 0804 2007 080c 2007 080c 2007     ... ... ... ... 
2007081c:	0814 2007 0814 2007 081c 2007 081c 2007     ... ... ... ... 
2007082c:	0824 2007 0824 2007 082c 2007 082c 2007     $.. $.. ,.. ,.. 
2007083c:	0834 2007 0834 2007 083c 2007 083c 2007     4.. 4.. <.. <.. 
2007084c:	0844 2007 0844 2007 084c 2007 084c 2007     D.. D.. L.. L.. 
2007085c:	0854 2007 0854 2007 085c 2007 085c 2007     T.. T.. \.. \.. 
2007086c:	0864 2007 0864 2007 086c 2007 086c 2007     d.. d.. l.. l.. 
2007087c:	0874 2007 0874 2007 087c 2007 087c 2007     t.. t.. |.. |.. 
2007088c:	0884 2007 0884 2007 088c 2007 088c 2007     ... ... ... ... 
2007089c:	0894 2007 0894 2007 089c 2007 089c 2007     ... ... ... ... 
200708ac:	08a4 2007 08a4 2007 08ac 2007 08ac 2007     ... ... ... ... 
200708bc:	08b4 2007 08b4 2007 08bc 2007 08bc 2007     ... ... ... ... 

200708cc <__malloc_sbrk_base>:
200708cc:	ffff ffff                                   ....

200708d0 <__malloc_trim_threshold>:
200708d0:	0000 0002                                   ....

200708d4 <__wctomb>:
200708d4:	48a1 0008                                   .H..
