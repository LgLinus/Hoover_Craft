
HoverCraft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000707c  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008707c  0008707c  0000f07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008d0  20070000  00087084  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000083dc  200708d0  00087958  000108d0  2**3
                  ALLOC
  4 .stack        00002004  20078cac  0008fd34  000108d0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000108d0  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  000108f9  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002c2b2  00000000  00000000  0001096a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007fc7  00000000  00000000  0003cc1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000100bc  00000000  00000000  00044be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001560  00000000  00000000  00054ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001218  00000000  00000000  00056200  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000079a9  00000000  00000000  00057418  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00018490  00000000  00000000  0005edc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00072625  00000000  00000000  00077251  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002eec  00000000  00000000  000e9878  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007acb0 	.word	0x2007acb0
   80004:	000841dd 	.word	0x000841dd
   80008:	000841d9 	.word	0x000841d9
   8000c:	000841d9 	.word	0x000841d9
   80010:	000841d9 	.word	0x000841d9
   80014:	000841d9 	.word	0x000841d9
   80018:	000841d9 	.word	0x000841d9
	...
   8002c:	00081cf5 	.word	0x00081cf5
   80030:	000841d9 	.word	0x000841d9
   80034:	00000000 	.word	0x00000000
   80038:	00081d85 	.word	0x00081d85
   8003c:	00081dc1 	.word	0x00081dc1
   80040:	000841d9 	.word	0x000841d9
   80044:	000841d9 	.word	0x000841d9
   80048:	000841d9 	.word	0x000841d9
   8004c:	000841d9 	.word	0x000841d9
   80050:	000841d9 	.word	0x000841d9
   80054:	000841d9 	.word	0x000841d9
   80058:	000841d9 	.word	0x000841d9
   8005c:	000841d9 	.word	0x000841d9
   80060:	000841d9 	.word	0x000841d9
   80064:	000841d9 	.word	0x000841d9
   80068:	00000000 	.word	0x00000000
   8006c:	00083fa5 	.word	0x00083fa5
   80070:	00083fc1 	.word	0x00083fc1
   80074:	00083fdd 	.word	0x00083fdd
   80078:	00083ff9 	.word	0x00083ff9
	...
   80084:	000841d9 	.word	0x000841d9
   80088:	000841d9 	.word	0x000841d9
   8008c:	000841d9 	.word	0x000841d9
   80090:	000841d9 	.word	0x000841d9
   80094:	000841d9 	.word	0x000841d9
   80098:	000841d9 	.word	0x000841d9
   8009c:	000841d9 	.word	0x000841d9
   800a0:	000841d9 	.word	0x000841d9
   800a4:	00000000 	.word	0x00000000
   800a8:	000841d9 	.word	0x000841d9
   800ac:	000841d9 	.word	0x000841d9
   800b0:	000841d9 	.word	0x000841d9
   800b4:	000841d9 	.word	0x000841d9
   800b8:	000841d9 	.word	0x000841d9
   800bc:	000841d9 	.word	0x000841d9
   800c0:	000841d9 	.word	0x000841d9
   800c4:	000841d9 	.word	0x000841d9
   800c8:	000841d9 	.word	0x000841d9
   800cc:	000841d9 	.word	0x000841d9
   800d0:	000841d9 	.word	0x000841d9
   800d4:	000841d9 	.word	0x000841d9
   800d8:	000841d9 	.word	0x000841d9
   800dc:	000841d9 	.word	0x000841d9
   800e0:	000841d9 	.word	0x000841d9
   800e4:	000841d9 	.word	0x000841d9
   800e8:	000841d9 	.word	0x000841d9
   800ec:	000841d9 	.word	0x000841d9
   800f0:	000841d9 	.word	0x000841d9

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	00087084 	.word	0x00087084
   80110:	00087087 	.word	0x00087087
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	00087084 	.word	0x00087084
   8013c:	00087084 	.word	0x00087084
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	200708d0 	.word	0x200708d0
   80164:	00000000 	.word	0x00000000
   80168:	00087084 	.word	0x00087084

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	00087084 	.word	0x00087084
   80198:	200708d4 	.word	0x200708d4
   8019c:	00087084 	.word	0x00087084
   801a0:	00000000 	.word	0x00000000

000801a4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   801a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   801a8:	460c      	mov	r4, r1
   801aa:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   801ac:	bb48      	cbnz	r0, 80202 <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
   801ae:	2a00      	cmp	r2, #0
   801b0:	dd2b      	ble.n	8020a <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
   801b2:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   801b4:	f648 4628 	movw	r6, #35880	; 0x8c28
   801b8:	f2c2 0607 	movt	r6, #8199	; 0x2007
   801bc:	f648 4520 	movw	r5, #35872	; 0x8c20
   801c0:	f2c2 0507 	movt	r5, #8199	; 0x2007
   801c4:	ea6f 0901 	mvn.w	r9, r1
   801c8:	eb07 0009 	add.w	r0, r7, r9
   801cc:	f000 0901 	and.w	r9, r0, #1
   801d0:	6830      	ldr	r0, [r6, #0]
   801d2:	682b      	ldr	r3, [r5, #0]
   801d4:	4798      	blx	r3
		ptr++;
   801d6:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801da:	42bc      	cmp	r4, r7
   801dc:	d119      	bne.n	80212 <_read+0x6e>
   801de:	e00d      	b.n	801fc <_read+0x58>
		ptr_get(stdio_base, ptr);
   801e0:	6830      	ldr	r0, [r6, #0]
   801e2:	682b      	ldr	r3, [r5, #0]
   801e4:	4621      	mov	r1, r4
   801e6:	4798      	blx	r3
		ptr++;
   801e8:	f104 0401 	add.w	r4, r4, #1
   801ec:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   801ee:	6830      	ldr	r0, [r6, #0]
   801f0:	682a      	ldr	r2, [r5, #0]
   801f2:	4790      	blx	r2
		ptr++;
   801f4:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801f8:	42bc      	cmp	r4, r7
   801fa:	d1f1      	bne.n	801e0 <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   801fc:	4640      	mov	r0, r8
   801fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80202:	f04f 30ff 	mov.w	r0, #4294967295
   80206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
   8020a:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   8020e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80212:	f1b9 0f00 	cmp.w	r9, #0
   80216:	d0e3      	beq.n	801e0 <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   80218:	6830      	ldr	r0, [r6, #0]
   8021a:	682a      	ldr	r2, [r5, #0]
   8021c:	4621      	mov	r1, r4
   8021e:	4790      	blx	r2
		ptr++;
   80220:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80224:	42bc      	cmp	r4, r7
   80226:	d1db      	bne.n	801e0 <_read+0x3c>
   80228:	e7e8      	b.n	801fc <_read+0x58>
   8022a:	bf00      	nop

0008022c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   8022c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80230:	460d      	mov	r5, r1
   80232:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80234:	f100 30ff 	add.w	r0, r0, #4294967295
   80238:	2802      	cmp	r0, #2
   8023a:	d824      	bhi.n	80286 <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
   8023c:	b332      	cbz	r2, 8028c <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8023e:	f648 4628 	movw	r6, #35880	; 0x8c28
   80242:	f2c2 0607 	movt	r6, #8199	; 0x2007
   80246:	f648 4724 	movw	r7, #35876	; 0x8c24
   8024a:	f2c2 0707 	movt	r7, #8199	; 0x2007
   8024e:	f04f 0400 	mov.w	r4, #0
   80252:	f102 39ff 	add.w	r9, r2, #4294967295
   80256:	f009 0901 	and.w	r9, r9, #1
   8025a:	6830      	ldr	r0, [r6, #0]
   8025c:	683b      	ldr	r3, [r7, #0]
   8025e:	5d09      	ldrb	r1, [r1, r4]
   80260:	4798      	blx	r3
   80262:	42a0      	cmp	r0, r4
   80264:	da1a      	bge.n	8029c <_write+0x70>
   80266:	e014      	b.n	80292 <_write+0x66>
   80268:	6830      	ldr	r0, [r6, #0]
   8026a:	683b      	ldr	r3, [r7, #0]
   8026c:	5d29      	ldrb	r1, [r5, r4]
   8026e:	4798      	blx	r3
   80270:	2800      	cmp	r0, #0
   80272:	db0e      	blt.n	80292 <_write+0x66>
			return -1;
		}
		++nChars;
   80274:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80278:	6830      	ldr	r0, [r6, #0]
   8027a:	683a      	ldr	r2, [r7, #0]
   8027c:	5d29      	ldrb	r1, [r5, r4]
   8027e:	4790      	blx	r2
   80280:	2800      	cmp	r0, #0
   80282:	da1d      	bge.n	802c0 <_write+0x94>
   80284:	e005      	b.n	80292 <_write+0x66>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80286:	f04f 34ff 	mov.w	r4, #4294967295
   8028a:	e004      	b.n	80296 <_write+0x6a>
	}

	for (; len != 0; --len) {
   8028c:	f04f 0400 	mov.w	r4, #0
   80290:	e001      	b.n	80296 <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80292:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80296:	4620      	mov	r0, r4
   80298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   8029c:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   802a0:	45a0      	cmp	r8, r4
   802a2:	d0f8      	beq.n	80296 <_write+0x6a>
   802a4:	f1b9 0f00 	cmp.w	r9, #0
   802a8:	d0de      	beq.n	80268 <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   802aa:	6830      	ldr	r0, [r6, #0]
   802ac:	683a      	ldr	r2, [r7, #0]
   802ae:	5d29      	ldrb	r1, [r5, r4]
   802b0:	4790      	blx	r2
   802b2:	2800      	cmp	r0, #0
   802b4:	dbed      	blt.n	80292 <_write+0x66>
			return -1;
		}
		++nChars;
   802b6:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   802ba:	45a0      	cmp	r8, r4
   802bc:	d1d4      	bne.n	80268 <_write+0x3c>
   802be:	e7ea      	b.n	80296 <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   802c0:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   802c4:	45a0      	cmp	r8, r4
   802c6:	d1cf      	bne.n	80268 <_write+0x3c>
   802c8:	e7e5      	b.n	80296 <_write+0x6a>
   802ca:	bf00      	nop

000802cc <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   802cc:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   802ce:	f04f 03ac 	mov.w	r3, #172	; 0xac
   802d2:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   802d4:	680a      	ldr	r2, [r1, #0]
   802d6:	684c      	ldr	r4, [r1, #4]
   802d8:	fbb2 f3f4 	udiv	r3, r2, r4
   802dc:	ea4f 1313 	mov.w	r3, r3, lsr #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   802e0:	f103 34ff 	add.w	r4, r3, #4294967295
   802e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   802e8:	4294      	cmp	r4, r2
   802ea:	d80c      	bhi.n	80306 <uart_init+0x3a>
		return 1;

	p_uart->UART_BRGR = cd;
   802ec:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   802ee:	6889      	ldr	r1, [r1, #8]
   802f0:	6041      	str	r1, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   802f2:	f240 2302 	movw	r3, #514	; 0x202
   802f6:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   802fa:	f04f 0250 	mov.w	r2, #80	; 0x50
   802fe:	6002      	str	r2, [r0, #0]

	return 0;
   80300:	f04f 0000 	mov.w	r0, #0
   80304:	e001      	b.n	8030a <uart_init+0x3e>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80306:	f04f 0001 	mov.w	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8030a:	bc10      	pop	{r4}
   8030c:	4770      	bx	lr
   8030e:	bf00      	nop

00080310 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80310:	6943      	ldr	r3, [r0, #20]
   80312:	f013 0f02 	tst.w	r3, #2
   80316:	d003      	beq.n	80320 <uart_write+0x10>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80318:	61c1      	str	r1, [r0, #28]
	return 0;
   8031a:	f04f 0000 	mov.w	r0, #0
   8031e:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80320:	f04f 0001 	mov.w	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80324:	4770      	bx	lr
   80326:	bf00      	nop

00080328 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80328:	6943      	ldr	r3, [r0, #20]
   8032a:	f013 0f01 	tst.w	r3, #1
   8032e:	d004      	beq.n	8033a <uart_read+0x12>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80330:	6980      	ldr	r0, [r0, #24]
   80332:	7008      	strb	r0, [r1, #0]
	return 0;
   80334:	f04f 0000 	mov.w	r0, #0
   80338:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8033a:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   8033e:	4770      	bx	lr

00080340 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80340:	6943      	ldr	r3, [r0, #20]
   80342:	f013 0f02 	tst.w	r3, #2
   80346:	d007      	beq.n	80358 <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80348:	ea4f 51c1 	mov.w	r1, r1, lsl #23
   8034c:	ea4f 52d1 	mov.w	r2, r1, lsr #23
   80350:	61c2      	str	r2, [r0, #28]
	return 0;
   80352:	f04f 0000 	mov.w	r0, #0
   80356:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80358:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8035c:	4770      	bx	lr
   8035e:	bf00      	nop

00080360 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80360:	6943      	ldr	r3, [r0, #20]
   80362:	f013 0f01 	tst.w	r3, #1
   80366:	d008      	beq.n	8037a <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80368:	6980      	ldr	r0, [r0, #24]
   8036a:	ea4f 52c0 	mov.w	r2, r0, lsl #23
   8036e:	ea4f 53d2 	mov.w	r3, r2, lsr #23
   80372:	600b      	str	r3, [r1, #0]

	return 0;
   80374:	f04f 0000 	mov.w	r0, #0
   80378:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8037a:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8037e:	4770      	bx	lr

00080380 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80380:	b5f0      	push	{r4, r5, r6, r7, lr}
   80382:	b083      	sub	sp, #12
   80384:	4604      	mov	r4, r0
   80386:	460d      	mov	r5, r1
	uint32_t val;

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80388:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8038c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80390:	4298      	cmp	r0, r3
   80392:	d10d      	bne.n	803b0 <usart_serial_getchar+0x30>
		while (uart_read((Uart*)p_usart, data));
   80394:	f44f 6600 	mov.w	r6, #2048	; 0x800
   80398:	f2c4 060e 	movt	r6, #16398	; 0x400e
   8039c:	f240 3729 	movw	r7, #809	; 0x329
   803a0:	f2c0 0708 	movt	r7, #8
   803a4:	4630      	mov	r0, r6
   803a6:	4629      	mov	r1, r5
   803a8:	47b8      	blx	r7
   803aa:	2800      	cmp	r0, #0
   803ac:	d1fa      	bne.n	803a4 <usart_serial_getchar+0x24>
   803ae:	e02b      	b.n	80408 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   803b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   803b4:	f2c4 0009 	movt	r0, #16393	; 0x4009
   803b8:	4284      	cmp	r4, r0
   803ba:	d10f      	bne.n	803dc <usart_serial_getchar+0x5c>
		while (usart_read(p_usart, &val));
   803bc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   803c0:	f2c4 0609 	movt	r6, #16393	; 0x4009
   803c4:	f240 3761 	movw	r7, #865	; 0x361
   803c8:	f2c0 0708 	movt	r7, #8
   803cc:	4630      	mov	r0, r6
   803ce:	a901      	add	r1, sp, #4
   803d0:	47b8      	blx	r7
   803d2:	2800      	cmp	r0, #0
   803d4:	d1fa      	bne.n	803cc <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
   803d6:	9b01      	ldr	r3, [sp, #4]
   803d8:	702b      	strb	r3, [r5, #0]
   803da:	e02b      	b.n	80434 <usart_serial_getchar+0xb4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   803dc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   803e0:	f2c4 0109 	movt	r1, #16393	; 0x4009
   803e4:	428c      	cmp	r4, r1
   803e6:	d10f      	bne.n	80408 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   803e8:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   803ec:	f2c4 0409 	movt	r4, #16393	; 0x4009
   803f0:	f240 3661 	movw	r6, #865	; 0x361
   803f4:	f2c0 0608 	movt	r6, #8
   803f8:	4620      	mov	r0, r4
   803fa:	a901      	add	r1, sp, #4
   803fc:	47b0      	blx	r6
   803fe:	2800      	cmp	r0, #0
   80400:	d1fa      	bne.n	803f8 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   80402:	9a01      	ldr	r2, [sp, #4]
   80404:	702a      	strb	r2, [r5, #0]
   80406:	e02a      	b.n	8045e <usart_serial_getchar+0xde>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80408:	f04f 0000 	mov.w	r0, #0
   8040c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   80410:	4284      	cmp	r4, r0
   80412:	d10f      	bne.n	80434 <usart_serial_getchar+0xb4>
		while (usart_read(p_usart, &val));
   80414:	f04f 0400 	mov.w	r4, #0
   80418:	f2c4 040a 	movt	r4, #16394	; 0x400a
   8041c:	f240 3661 	movw	r6, #865	; 0x361
   80420:	f2c0 0608 	movt	r6, #8
   80424:	4620      	mov	r0, r4
   80426:	a901      	add	r1, sp, #4
   80428:	47b0      	blx	r6
   8042a:	2800      	cmp	r0, #0
   8042c:	d1fa      	bne.n	80424 <usart_serial_getchar+0xa4>
		*data = (uint8_t)(val & 0xFF);
   8042e:	9b01      	ldr	r3, [sp, #4]
   80430:	702b      	strb	r3, [r5, #0]
   80432:	e014      	b.n	8045e <usart_serial_getchar+0xde>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80434:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80438:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8043c:	428c      	cmp	r4, r1
   8043e:	d10e      	bne.n	8045e <usart_serial_getchar+0xde>
		while (usart_read(p_usart, &val));
   80440:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   80444:	f2c4 040a 	movt	r4, #16394	; 0x400a
   80448:	f240 3661 	movw	r6, #865	; 0x361
   8044c:	f2c0 0608 	movt	r6, #8
   80450:	4620      	mov	r0, r4
   80452:	a901      	add	r1, sp, #4
   80454:	47b0      	blx	r6
   80456:	2800      	cmp	r0, #0
   80458:	d1fa      	bne.n	80450 <usart_serial_getchar+0xd0>
		*data = (uint8_t)(val & 0xFF);
   8045a:	9a01      	ldr	r2, [sp, #4]
   8045c:	702a      	strb	r2, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8045e:	b003      	add	sp, #12
   80460:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80462:	bf00      	nop

00080464 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80464:	b570      	push	{r4, r5, r6, lr}
   80466:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80468:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8046c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80470:	4298      	cmp	r0, r3
   80472:	d10f      	bne.n	80494 <usart_serial_putchar+0x30>
		while (uart_write((Uart*)p_usart, c)!=0);
   80474:	f44f 6500 	mov.w	r5, #2048	; 0x800
   80478:	f2c4 050e 	movt	r5, #16398	; 0x400e
   8047c:	f240 3611 	movw	r6, #785	; 0x311
   80480:	f2c0 0608 	movt	r6, #8
   80484:	4628      	mov	r0, r5
   80486:	4621      	mov	r1, r4
   80488:	47b0      	blx	r6
   8048a:	2800      	cmp	r0, #0
   8048c:	d1fa      	bne.n	80484 <usart_serial_putchar+0x20>
		return 1;
   8048e:	f04f 0001 	mov.w	r0, #1
   80492:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80494:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   80498:	f2c4 0109 	movt	r1, #16393	; 0x4009
   8049c:	4288      	cmp	r0, r1
   8049e:	d10f      	bne.n	804c0 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   804a0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   804a4:	f2c4 0509 	movt	r5, #16393	; 0x4009
   804a8:	f240 3641 	movw	r6, #833	; 0x341
   804ac:	f2c0 0608 	movt	r6, #8
   804b0:	4628      	mov	r0, r5
   804b2:	4621      	mov	r1, r4
   804b4:	47b0      	blx	r6
   804b6:	2800      	cmp	r0, #0
   804b8:	d1fa      	bne.n	804b0 <usart_serial_putchar+0x4c>
		return 1;
   804ba:	f04f 0001 	mov.w	r0, #1
   804be:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   804c0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   804c4:	f2c4 0209 	movt	r2, #16393	; 0x4009
   804c8:	4290      	cmp	r0, r2
   804ca:	d10f      	bne.n	804ec <usart_serial_putchar+0x88>
		while (usart_write(p_usart, c)!=0);
   804cc:	f44f 4540 	mov.w	r5, #49152	; 0xc000
   804d0:	f2c4 0509 	movt	r5, #16393	; 0x4009
   804d4:	f240 3641 	movw	r6, #833	; 0x341
   804d8:	f2c0 0608 	movt	r6, #8
   804dc:	4628      	mov	r0, r5
   804de:	4621      	mov	r1, r4
   804e0:	47b0      	blx	r6
   804e2:	2800      	cmp	r0, #0
   804e4:	d1fa      	bne.n	804dc <usart_serial_putchar+0x78>
		return 1;
   804e6:	f04f 0001 	mov.w	r0, #1
   804ea:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   804ec:	f04f 0300 	mov.w	r3, #0
   804f0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   804f4:	4298      	cmp	r0, r3
   804f6:	d10f      	bne.n	80518 <usart_serial_putchar+0xb4>
		while (usart_write(p_usart, c)!=0);
   804f8:	f04f 0500 	mov.w	r5, #0
   804fc:	f2c4 050a 	movt	r5, #16394	; 0x400a
   80500:	f240 3641 	movw	r6, #833	; 0x341
   80504:	f2c0 0608 	movt	r6, #8
   80508:	4628      	mov	r0, r5
   8050a:	4621      	mov	r1, r4
   8050c:	47b0      	blx	r6
   8050e:	2800      	cmp	r0, #0
   80510:	d1fa      	bne.n	80508 <usart_serial_putchar+0xa4>
		return 1;
   80512:	f04f 0001 	mov.w	r0, #1
   80516:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80518:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   8051c:	f2c4 010a 	movt	r1, #16394	; 0x400a
   80520:	4288      	cmp	r0, r1
   80522:	d10f      	bne.n	80544 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
   80524:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   80528:	f2c4 050a 	movt	r5, #16394	; 0x400a
   8052c:	f240 3641 	movw	r6, #833	; 0x341
   80530:	f2c0 0608 	movt	r6, #8
   80534:	4628      	mov	r0, r5
   80536:	4621      	mov	r1, r4
   80538:	47b0      	blx	r6
   8053a:	2800      	cmp	r0, #0
   8053c:	d1fa      	bne.n	80534 <usart_serial_putchar+0xd0>
		return 1;
   8053e:	f04f 0001 	mov.w	r0, #1
   80542:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80544:	f04f 0000 	mov.w	r0, #0
}
   80548:	bd70      	pop	{r4, r5, r6, pc}
   8054a:	bf00      	nop

0008054c <init_pwm>:
	
}

/* Initialize the pwm signals */
void init_pwm(void)
{
   8054c:	b508      	push	{r3, lr}
	initialize_pwm();
   8054e:	f240 7341 	movw	r3, #1857	; 0x741
   80552:	f2c0 0308 	movt	r3, #8
   80556:	4798      	blx	r3
	update_duty_cycle_DAC1(999);		// 999 is the highest duty cycle
   80558:	f240 30e7 	movw	r0, #999	; 0x3e7
   8055c:	f640 1135 	movw	r1, #2357	; 0x935
   80560:	f2c0 0108 	movt	r1, #8
   80564:	4788      	blx	r1
	update_duty_cycle_36(600);
   80566:	f44f 7016 	mov.w	r0, #600	; 0x258
   8056a:	f640 1261 	movw	r2, #2401	; 0x961
   8056e:	f2c0 0208 	movt	r2, #8
   80572:	4790      	blx	r2
	update_duty_cycle_38(600);
   80574:	f44f 7016 	mov.w	r0, #600	; 0x258
   80578:	f640 138d 	movw	r3, #2445	; 0x98d
   8057c:	f2c0 0308 	movt	r3, #8
   80580:	4798      	blx	r3
	update_duty_cycle_40(500);
   80582:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   80586:	f640 11b9 	movw	r1, #2489	; 0x9b9
   8058a:	f2c0 0108 	movt	r1, #8
   8058e:	4788      	blx	r1
	update_duty_cycle_9(700);
   80590:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   80594:	f640 12e5 	movw	r2, #2533	; 0x9e5
   80598:	f2c0 0208 	movt	r2, #8
   8059c:	4790      	blx	r2
   8059e:	bd08      	pop	{r3, pc}

000805a0 <init_tasks>:

}

void init_tasks(void)
{
   805a0:	b510      	push	{r4, lr}
   805a2:	b084      	sub	sp, #16
	/* Create and start the communication task */
	if(xTaskCreate(start_communication,(const signed char * const) "Communication", 2048, NULL, 1, NULL) !=pdPASS)
   805a4:	f04f 0301 	mov.w	r3, #1
   805a8:	9300      	str	r3, [sp, #0]
   805aa:	f04f 0300 	mov.w	r3, #0
   805ae:	9301      	str	r3, [sp, #4]
   805b0:	9302      	str	r3, [sp, #8]
   805b2:	9303      	str	r3, [sp, #12]
   805b4:	f640 2011 	movw	r0, #2577	; 0xa11
   805b8:	f2c0 0008 	movt	r0, #8
   805bc:	f646 51e4 	movw	r1, #28132	; 0x6de4
   805c0:	f2c0 0108 	movt	r1, #8
   805c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   805c8:	f242 7415 	movw	r4, #10005	; 0x2715
   805cc:	f2c0 0408 	movt	r4, #8
   805d0:	47a0      	blx	r4
   805d2:	2801      	cmp	r0, #1
   805d4:	d008      	beq.n	805e8 <init_tasks+0x48>
	{
		printf("Could not create task Communication");
   805d6:	f646 50f4 	movw	r0, #28148	; 0x6df4
   805da:	f2c0 0008 	movt	r0, #8
   805de:	f244 7125 	movw	r1, #18213	; 0x4725
   805e2:	f2c0 0108 	movt	r1, #8
   805e6:	4788      	blx	r1
	}
	
	vTaskStartScheduler(); // Start the tasks
   805e8:	f642 10d1 	movw	r0, #10705	; 0x29d1
   805ec:	f2c0 0008 	movt	r0, #8
   805f0:	4780      	blx	r0
}
   805f2:	b004      	add	sp, #16
   805f4:	bd10      	pop	{r4, pc}
   805f6:	bf00      	nop

000805f8 <init_sempahores>:

void init_sempahores(void)
{
   805f8:	b510      	push	{r4, lr}
	vSemaphoreCreateBinary(semahpore_duty_cycles);	
   805fa:	f04f 0001 	mov.w	r0, #1
   805fe:	f04f 0100 	mov.w	r1, #0
   80602:	f04f 0203 	mov.w	r2, #3
   80606:	f242 13d1 	movw	r3, #8657	; 0x21d1
   8060a:	f2c0 0308 	movt	r3, #8
   8060e:	4798      	blx	r3
   80610:	f640 01ec 	movw	r1, #2284	; 0x8ec
   80614:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80618:	6008      	str	r0, [r1, #0]
   8061a:	b140      	cbz	r0, 8062e <init_sempahores+0x36>
   8061c:	f04f 0100 	mov.w	r1, #0
   80620:	460a      	mov	r2, r1
   80622:	460b      	mov	r3, r1
   80624:	f242 243d 	movw	r4, #8765	; 0x223d
   80628:	f2c0 0408 	movt	r4, #8
   8062c:	47a0      	blx	r4
   8062e:	bd10      	pop	{r4, pc}

00080630 <main>:
	
	#endif
}

int main(void)
{
   80630:	b530      	push	{r4, r5, lr}
   80632:	b085      	sub	sp, #20
	/* Setup */
	sysclk_init();
   80634:	f643 2379 	movw	r3, #14969	; 0x3a79
   80638:	f2c0 0308 	movt	r3, #8
   8063c:	4798      	blx	r3
	board_init();
   8063e:	f643 3005 	movw	r0, #15109	; 0x3b05
   80642:	f2c0 0008 	movt	r0, #8
   80646:	4780      	blx	r0
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80648:	f04f 000b 	mov.w	r0, #11
   8064c:	f244 1455 	movw	r4, #16725	; 0x4155
   80650:	f2c0 0408 	movt	r4, #8
   80654:	47a0      	blx	r4
   80656:	f04f 000c 	mov.w	r0, #12
   8065a:	47a0      	blx	r4
   8065c:	f04f 000d 	mov.w	r0, #13
   80660:	47a0      	blx	r4
   80662:	f04f 000e 	mov.w	r0, #14
   80666:	47a0      	blx	r4
   80668:	f04f 0008 	mov.w	r0, #8
   8066c:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8066e:	f44f 6500 	mov.w	r5, #2048	; 0x800
   80672:	f2c4 050e 	movt	r5, #16398	; 0x400e
   80676:	f648 4128 	movw	r1, #35880	; 0x8c28
   8067a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8067e:	600d      	str	r5, [r1, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80680:	f648 4324 	movw	r3, #35876	; 0x8c24
   80684:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80688:	f240 4265 	movw	r2, #1125	; 0x465
   8068c:	f2c0 0208 	movt	r2, #8
   80690:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80692:	f648 4020 	movw	r0, #35872	; 0x8c20
   80696:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8069a:	f240 3181 	movw	r1, #897	; 0x381
   8069e:	f2c0 0108 	movt	r1, #8
   806a2:	6001      	str	r1, [r0, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   806a4:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
   806a8:	f2c0 5301 	movt	r3, #1281	; 0x501
   806ac:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   806ae:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   806b2:	9201      	str	r2, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   806b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
   806b8:	9002      	str	r0, [sp, #8]
   806ba:	f04f 0008 	mov.w	r0, #8
   806be:	47a0      	blx	r4
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   806c0:	4628      	mov	r0, r5
   806c2:	4669      	mov	r1, sp
   806c4:	f240 24cd 	movw	r4, #717	; 0x2cd
   806c8:	f2c0 0408 	movt	r4, #8
   806cc:	47a0      	blx	r4
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   806ce:	f240 0510 	movw	r5, #16
   806d2:	f2c2 0507 	movt	r5, #8199	; 0x2007
   806d6:	6829      	ldr	r1, [r5, #0]
   806d8:	6888      	ldr	r0, [r1, #8]
   806da:	f04f 0100 	mov.w	r1, #0
   806de:	f244 7487 	movw	r4, #18311	; 0x4787
   806e2:	f2c0 0408 	movt	r4, #8
   806e6:	47a0      	blx	r4
	setbuf(stdin, NULL);
   806e8:	682b      	ldr	r3, [r5, #0]
   806ea:	6858      	ldr	r0, [r3, #4]
   806ec:	f04f 0100 	mov.w	r1, #0
   806f0:	47a0      	blx	r4
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   806f2:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   806f6:	f2c4 000e 	movt	r0, #16398	; 0x400e
   806fa:	f44f 7280 	mov.w	r2, #256	; 0x100
   806fe:	6642      	str	r2, [r0, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80700:	6542      	str	r2, [r0, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80702:	6242      	str	r2, [r0, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80704:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   80708:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8070a:	f421 7380 	bic.w	r3, r1, #256	; 0x100
   8070e:	6703      	str	r3, [r0, #112]	; 0x70
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	ioport_set_pin_mode(PIO_PA8_IDX,IOPORT_MODE_PULLUP);// No stdout buffer
	#if defined(__GNUC__)
	setbuf(stdout, NULL);
   80710:	6828      	ldr	r0, [r5, #0]
   80712:	6880      	ldr	r0, [r0, #8]
   80714:	f04f 0100 	mov.w	r1, #0
   80718:	47a0      	blx	r4
	sysclk_init();
	board_init();
	ioport_init();
	configure_console();
	
	init_pwm();
   8071a:	f240 524d 	movw	r2, #1357	; 0x54d
   8071e:	f2c0 0208 	movt	r2, #8
   80722:	4790      	blx	r2
	init_sempahores();
   80724:	f240 51f9 	movw	r1, #1529	; 0x5f9
   80728:	f2c0 0108 	movt	r1, #8
   8072c:	4788      	blx	r1
	init_tasks();
   8072e:	f240 53a1 	movw	r3, #1441	; 0x5a1
   80732:	f2c0 0308 	movt	r3, #8
   80736:	4798      	blx	r3
	
}
   80738:	f04f 0000 	mov.w	r0, #0
   8073c:	b005      	add	sp, #20
   8073e:	bd30      	pop	{r4, r5, pc}

00080740 <initialize_pwm>:
int duty_cycle_9 = 0;
int duty_cycle_DAC1= 0;

/* Function for initialize PWM on pins DAC1, 9, 36, 38 and 40 */
void initialize_pwm(void)
{
   80740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80744:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_PWM);
   80746:	f04f 0024 	mov.w	r0, #36	; 0x24
   8074a:	f244 1555 	movw	r5, #16725	; 0x4155
   8074e:	f2c0 0508 	movt	r5, #8
   80752:	47a8      	blx	r5
	pwm_channel_enable(PWM, PWM_CHANNEL_0);
   80754:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   80758:	f2c4 0409 	movt	r4, #16393	; 0x4009
   8075c:	4620      	mov	r0, r4
   8075e:	f04f 0100 	mov.w	r1, #0
   80762:	f643 2661 	movw	r6, #14945	; 0x3a61
   80766:	f2c0 0608 	movt	r6, #8
   8076a:	47b0      	blx	r6
	pwm_channel_enable(PWM, PWM_CHANNEL_1);
   8076c:	4620      	mov	r0, r4
   8076e:	f04f 0101 	mov.w	r1, #1
   80772:	47b0      	blx	r6
	pwm_channel_enable(PWM, PWM_CHANNEL_2);
   80774:	4620      	mov	r0, r4
   80776:	f04f 0102 	mov.w	r1, #2
   8077a:	47b0      	blx	r6
	pwm_channel_enable(PWM, PWM_CHANNEL_3);
   8077c:	4620      	mov	r0, r4
   8077e:	f04f 0103 	mov.w	r1, #3
   80782:	47b0      	blx	r6
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   80784:	4620      	mov	r0, r4
   80786:	f04f 0104 	mov.w	r1, #4
   8078a:	47b0      	blx	r6
	
	/* General clock settings for the PWM */
	pmc_enable_periph_clk(ID_PWM);
   8078c:	f04f 0024 	mov.w	r0, #36	; 0x24
   80790:	47a8      	blx	r5
	pwm_clock_t clock_setting = {
   80792:	f643 6358 	movw	r3, #15960	; 0x3e58
   80796:	f2c0 030f 	movt	r3, #15
   8079a:	9301      	str	r3, [sp, #4]
   8079c:	f04f 0500 	mov.w	r5, #0
   807a0:	9502      	str	r5, [sp, #8]
   807a2:	f44f 40f4 	mov.w	r0, #31232	; 0x7a00
   807a6:	f6c0 2003 	movt	r0, #2563	; 0xa03
   807aa:	9003      	str	r0, [sp, #12]
		.ul_clka = PWM_FREQUENCY * PWM_RESOLUTION,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_main_hz()
	};
	pwm_init(PWM, &clock_setting);
   807ac:	4620      	mov	r0, r4
   807ae:	a901      	add	r1, sp, #4
   807b0:	f643 02c9 	movw	r2, #14537	; 0x38c9
   807b4:	f2c0 0208 	movt	r2, #8
   807b8:	4790      	blx	r2
	
	/* Disables the PWM channels for setup */
	pwm_channel_disable(PWM, PWM_CHANNEL_0);
   807ba:	4620      	mov	r0, r4
   807bc:	4629      	mov	r1, r5
   807be:	f643 276d 	movw	r7, #14957	; 0x3a6d
   807c2:	f2c0 0708 	movt	r7, #8
   807c6:	47b8      	blx	r7
	pwm_channel_disable(PWM, PWM_CHANNEL_1);
   807c8:	4620      	mov	r0, r4
   807ca:	f04f 0101 	mov.w	r1, #1
   807ce:	47b8      	blx	r7
	pwm_channel_disable(PWM, PWM_CHANNEL_2);
   807d0:	4620      	mov	r0, r4
   807d2:	f04f 0102 	mov.w	r1, #2
   807d6:	47b8      	blx	r7
	pwm_channel_disable(PWM, PWM_CHANNEL_3);
   807d8:	4620      	mov	r0, r4
   807da:	f04f 0103 	mov.w	r1, #3
   807de:	47b8      	blx	r7
	pwm_channel_disable(PWM, PWM_CHANNEL_4);
   807e0:	4620      	mov	r0, r4
   807e2:	f04f 0104 	mov.w	r1, #4
   807e6:	47b8      	blx	r7
	
	
	/* DAC1 */
	pwm_channel_DAC1.alignment = PWM_ALIGN_LEFT;
   807e8:	f640 111c 	movw	r1, #2332	; 0x91c
   807ec:	f2c2 0107 	movt	r1, #8199	; 0x2007
   807f0:	46ab      	mov	fp, r5
   807f2:	810d      	strh	r5, [r1, #8]
	pwm_channel_DAC1.polarity = PWM_POLARITY;
   807f4:	728d      	strb	r5, [r1, #10]
	pwm_channel_DAC1.ul_prescaler = PWM_CMR_CPRE_CLKA;
   807f6:	f04f 0a0b 	mov.w	sl, #11
   807fa:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_DAC1.ul_period = PWM_RESOLUTION;
   807fe:	f240 39e7 	movw	r9, #999	; 0x3e7
   80802:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_DAC1.ul_duty = 0;
   80806:	60cd      	str	r5, [r1, #12]
	pwm_channel_DAC1.channel = PWM_CHANNEL_0;
   80808:	600d      	str	r5, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_DAC1);
   8080a:	4620      	mov	r0, r4
   8080c:	f643 1315 	movw	r3, #14613	; 0x3915
   80810:	f2c0 0308 	movt	r3, #8
   80814:	4798      	blx	r3
	pio_set_peripheral(PWM_PIO_B, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_DAC1);
   80816:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   8081a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8081e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80822:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80826:	f643 37b5 	movw	r7, #15285	; 0x3bb5
   8082a:	46b8      	mov	r8, r7
   8082c:	f2c0 0808 	movt	r8, #8
   80830:	47c0      	blx	r8
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_0);
   80832:	4620      	mov	r0, r4
   80834:	4629      	mov	r1, r5
   80836:	47b0      	blx	r6
	
	/* Pin 36 */
	pwm_channel_36.alignment = PWM_ALIGN_LEFT;
   80838:	f640 1170 	movw	r1, #2416	; 0x970
   8083c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80840:	810d      	strh	r5, [r1, #8]
	pwm_channel_36.polarity = PWM_POLARITY;
   80842:	728d      	strb	r5, [r1, #10]
	pwm_channel_36.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80844:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_36.ul_period = PWM_RESOLUTION;
   80848:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_36.ul_duty = 0;
   8084c:	60cd      	str	r5, [r1, #12]
	pwm_channel_36.channel = PWM_CHANNEL_1;
   8084e:	f04f 0001 	mov.w	r0, #1
   80852:	6008      	str	r0, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_36);
   80854:	4620      	mov	r0, r4
   80856:	f643 1215 	movw	r2, #14613	; 0x3915
   8085a:	f2c0 0208 	movt	r2, #8
   8085e:	4790      	blx	r2
	pio_set_peripheral(PWM_PIO_C, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_36);
   80860:	f44f 5790 	mov.w	r7, #4608	; 0x1200
   80864:	f2c4 070e 	movt	r7, #16398	; 0x400e
   80868:	4638      	mov	r0, r7
   8086a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8086e:	f04f 0210 	mov.w	r2, #16
   80872:	47c0      	blx	r8
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_1);
   80874:	4620      	mov	r0, r4
   80876:	f04f 0101 	mov.w	r1, #1
   8087a:	47b0      	blx	r6
	
	/* Pin 38 */
	pwm_channel_38.alignment = PWM_ALIGN_LEFT;
   8087c:	f640 119c 	movw	r1, #2460	; 0x99c
   80880:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80884:	810d      	strh	r5, [r1, #8]
	pwm_channel_38.polarity = PWM_POLARITY;
   80886:	728d      	strb	r5, [r1, #10]
	pwm_channel_38.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80888:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_38.ul_period = PWM_RESOLUTION;
   8088c:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_38.ul_duty = 0;
   80890:	60cd      	str	r5, [r1, #12]
	pwm_channel_38.channel = PWM_CHANNEL_2;
   80892:	f04f 0302 	mov.w	r3, #2
   80896:	600b      	str	r3, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_38);
   80898:	4620      	mov	r0, r4
   8089a:	f643 1215 	movw	r2, #14613	; 0x3915
   8089e:	f2c0 0208 	movt	r2, #8
   808a2:	4790      	blx	r2
	pio_set_peripheral(PWM_PIO_C, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_38);
   808a4:	4638      	mov	r0, r7
   808a6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   808aa:	f04f 0240 	mov.w	r2, #64	; 0x40
   808ae:	47c0      	blx	r8
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_2);
   808b0:	4620      	mov	r0, r4
   808b2:	f04f 0102 	mov.w	r1, #2
   808b6:	47b0      	blx	r6
	
	/* Pin 40 */
	pwm_channel_40.alignment = PWM_ALIGN_LEFT;
   808b8:	f640 1148 	movw	r1, #2376	; 0x948
   808bc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   808c0:	810d      	strh	r5, [r1, #8]
	pwm_channel_40.polarity = PWM_POLARITY;
   808c2:	728d      	strb	r5, [r1, #10]
	pwm_channel_40.ul_prescaler = PWM_CMR_CPRE_CLKA;
   808c4:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_40.ul_period = PWM_RESOLUTION;
   808c8:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_40.ul_duty = 0;
   808cc:	60cd      	str	r5, [r1, #12]
	pwm_channel_40.channel = PWM_CHANNEL_3;
   808ce:	f04f 0003 	mov.w	r0, #3
   808d2:	6008      	str	r0, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_40);
   808d4:	4620      	mov	r0, r4
   808d6:	f643 1315 	movw	r3, #14613	; 0x3915
   808da:	f2c0 0308 	movt	r3, #8
   808de:	4798      	blx	r3
	pio_set_peripheral(PWM_PIO_C, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_40);
   808e0:	4638      	mov	r0, r7
   808e2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   808e6:	f44f 7280 	mov.w	r2, #256	; 0x100
   808ea:	47c0      	blx	r8
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_3);
   808ec:	4620      	mov	r0, r4
   808ee:	f04f 0103 	mov.w	r1, #3
   808f2:	47b0      	blx	r6
	
	/* Pin 9 */
	pwm_channel_9.alignment = PWM_ALIGN_LEFT;
   808f4:	f640 01f4 	movw	r1, #2292	; 0x8f4
   808f8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   808fc:	810d      	strh	r5, [r1, #8]
	pwm_channel_9.polarity = PWM_POLARITY;
   808fe:	728d      	strb	r5, [r1, #10]
	pwm_channel_9.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80900:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_9.ul_period = PWM_RESOLUTION;
   80904:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_9.ul_duty = 0;
   80908:	60cd      	str	r5, [r1, #12]
	pwm_channel_9.channel = PWM_CHANNEL_4;
   8090a:	f04f 0504 	mov.w	r5, #4
   8090e:	600d      	str	r5, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_9);
   80910:	4620      	mov	r0, r4
   80912:	f643 1215 	movw	r2, #14613	; 0x3915
   80916:	f2c0 0208 	movt	r2, #8
   8091a:	4790      	blx	r2
	pio_set_peripheral(PWM_PIO_C, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_9);
   8091c:	4638      	mov	r0, r7
   8091e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80922:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   80926:	47c0      	blx	r8
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   80928:	4620      	mov	r0, r4
   8092a:	4629      	mov	r1, r5
   8092c:	47b0      	blx	r6
}
   8092e:	b005      	add	sp, #20
   80930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00080934 <update_duty_cycle_DAC1>:

/* Updates the dutycycle of the PWM signal on DAC1 */
void update_duty_cycle_DAC1(uint32_t duty_cycle_temp)
{
   80934:	b508      	push	{r3, lr}
   80936:	4602      	mov	r2, r0
	duty_cycle_DAC1 = duty_cycle_temp;
   80938:	f640 1344 	movw	r3, #2372	; 0x944
   8093c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80940:	6018      	str	r0, [r3, #0]
	pwm_channel_update_duty(PWM, &pwm_channel_DAC1, duty_cycle_temp);
   80942:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80946:	f2c4 0009 	movt	r0, #16393	; 0x4009
   8094a:	f640 111c 	movw	r1, #2332	; 0x91c
   8094e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80952:	f643 233d 	movw	r3, #14909	; 0x3a3d
   80956:	f2c0 0308 	movt	r3, #8
   8095a:	4798      	blx	r3
   8095c:	bd08      	pop	{r3, pc}
   8095e:	bf00      	nop

00080960 <update_duty_cycle_36>:
}

/* Update the dutycycle of the PWM signal on pin 36 */
void update_duty_cycle_36(uint32_t duty_cycle_temp)
{
   80960:	b508      	push	{r3, lr}
   80962:	4602      	mov	r2, r0
	duty_cycle_36 = duty_cycle_temp;
   80964:	f640 13c8 	movw	r3, #2504	; 0x9c8
   80968:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8096c:	6018      	str	r0, [r3, #0]
	pwm_channel_update_duty(PWM, &pwm_channel_36, duty_cycle_temp);
   8096e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80972:	f2c4 0009 	movt	r0, #16393	; 0x4009
   80976:	f640 1170 	movw	r1, #2416	; 0x970
   8097a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8097e:	f643 233d 	movw	r3, #14909	; 0x3a3d
   80982:	f2c0 0308 	movt	r3, #8
   80986:	4798      	blx	r3
   80988:	bd08      	pop	{r3, pc}
   8098a:	bf00      	nop

0008098c <update_duty_cycle_38>:
}

/* Updates the dutycycle of the PMW signal on pin 38 */
void update_duty_cycle_38(uint32_t duty_cycle_temp)
{
   8098c:	b508      	push	{r3, lr}
   8098e:	4602      	mov	r2, r0
	duty_cycle_38 = duty_cycle_temp;
   80990:	f640 03f0 	movw	r3, #2288	; 0x8f0
   80994:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80998:	6018      	str	r0, [r3, #0]
	pwm_channel_update_duty(PWM, &pwm_channel_38, duty_cycle_temp);
   8099a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   8099e:	f2c4 0009 	movt	r0, #16393	; 0x4009
   809a2:	f640 119c 	movw	r1, #2460	; 0x99c
   809a6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   809aa:	f643 233d 	movw	r3, #14909	; 0x3a3d
   809ae:	f2c0 0308 	movt	r3, #8
   809b2:	4798      	blx	r3
   809b4:	bd08      	pop	{r3, pc}
   809b6:	bf00      	nop

000809b8 <update_duty_cycle_40>:
}

/* Updates the dutycycle of the PWM signal on pin 40 */
void update_duty_cycle_40(uint32_t duty_cycle_temp)
{
   809b8:	b508      	push	{r3, lr}
   809ba:	4602      	mov	r2, r0
	duty_cycle_40 = duty_cycle_temp;
   809bc:	f640 13c4 	movw	r3, #2500	; 0x9c4
   809c0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   809c4:	6018      	str	r0, [r3, #0]
	pwm_channel_update_duty(PWM, &pwm_channel_40, duty_cycle_temp);
   809c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   809ca:	f2c4 0009 	movt	r0, #16393	; 0x4009
   809ce:	f640 1148 	movw	r1, #2376	; 0x948
   809d2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   809d6:	f643 233d 	movw	r3, #14909	; 0x3a3d
   809da:	f2c0 0308 	movt	r3, #8
   809de:	4798      	blx	r3
   809e0:	bd08      	pop	{r3, pc}
   809e2:	bf00      	nop

000809e4 <update_duty_cycle_9>:
}

/* Updates the dutycycle of the PWM signal on pin 9 */
void update_duty_cycle_9(uint32_t duty_cycle_temp)
{
   809e4:	b508      	push	{r3, lr}
   809e6:	4602      	mov	r2, r0
	duty_cycle_9 = duty_cycle_temp;
   809e8:	f640 1398 	movw	r3, #2456	; 0x998
   809ec:	f2c2 0307 	movt	r3, #8199	; 0x2007
   809f0:	6018      	str	r0, [r3, #0]
	pwm_channel_update_duty(PWM, &pwm_channel_9, duty_cycle_temp);
   809f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   809f6:	f2c4 0009 	movt	r0, #16393	; 0x4009
   809fa:	f640 01f4 	movw	r1, #2292	; 0x8f4
   809fe:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80a02:	f643 233d 	movw	r3, #14909	; 0x3a3d
   80a06:	f2c0 0308 	movt	r3, #8
   80a0a:	4798      	blx	r3
   80a0c:	bd08      	pop	{r3, pc}
   80a0e:	bf00      	nop

00080a10 <start_communication>:
extern void test_duty_cycle_DAC1(void);
extern void test_update_duty_cycle_DAC1(void);

/* Start the communication task */
void start_communication(void *p)
{
   80a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80a14:	b083      	sub	sp, #12
	
 	portTickType xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount(); //Retrieve the startup tick timer
   80a16:	f642 236d 	movw	r3, #10861	; 0x2a6d
   80a1a:	f2c0 0308 	movt	r3, #8
   80a1e:	4798      	blx	r3
   80a20:	f8ad 0006 	strh.w	r0, [sp, #6]
	
 	int i;
	i = 0;
	UnityBegin("test/test_duty_cycle.h");
   80a24:	f646 6018 	movw	r0, #28184	; 0x6e18
   80a28:	f2c0 0008 	movt	r0, #8
   80a2c:	f641 115d 	movw	r1, #6493	; 0x195d
   80a30:	f2c0 0108 	movt	r1, #8
   80a34:	4788      	blx	r1
	RUN_TEST(test_duty_cycle_36,20);
   80a36:	f640 30c5 	movw	r0, #3013	; 0xbc5
   80a3a:	f2c0 0008 	movt	r0, #8
   80a3e:	f646 6130 	movw	r1, #28208	; 0x6e30
   80a42:	f2c0 0108 	movt	r1, #8
   80a46:	f04f 0214 	mov.w	r2, #20
   80a4a:	f641 04ed 	movw	r4, #6381	; 0x18ed
   80a4e:	f2c0 0408 	movt	r4, #8
   80a52:	47a0      	blx	r4
	RUN_TEST(test_duty_cycle_38,20);
   80a54:	f640 30f9 	movw	r0, #3065	; 0xbf9
   80a58:	f2c0 0008 	movt	r0, #8
   80a5c:	f646 6144 	movw	r1, #28228	; 0x6e44
   80a60:	f2c0 0108 	movt	r1, #8
   80a64:	f04f 0214 	mov.w	r2, #20
   80a68:	47a0      	blx	r4
	RUN_TEST(test_duty_cycle_40,20);
   80a6a:	f640 402d 	movw	r0, #3117	; 0xc2d
   80a6e:	f2c0 0008 	movt	r0, #8
   80a72:	f646 6158 	movw	r1, #28248	; 0x6e58
   80a76:	f2c0 0108 	movt	r1, #8
   80a7a:	f04f 0214 	mov.w	r2, #20
   80a7e:	47a0      	blx	r4
	RUN_TEST(test_duty_cycle_9,20);
   80a80:	f640 4061 	movw	r0, #3169	; 0xc61
   80a84:	f2c0 0008 	movt	r0, #8
   80a88:	f646 616c 	movw	r1, #28268	; 0x6e6c
   80a8c:	f2c0 0108 	movt	r1, #8
   80a90:	f04f 0214 	mov.w	r2, #20
   80a94:	47a0      	blx	r4
	RUN_TEST(test_duty_cycle_DAC1,20);
   80a96:	f640 3091 	movw	r0, #2961	; 0xb91
   80a9a:	f2c0 0008 	movt	r0, #8
   80a9e:	f646 6180 	movw	r1, #28288	; 0x6e80
   80aa2:	f2c0 0108 	movt	r1, #8
   80aa6:	f04f 0214 	mov.w	r2, #20
   80aaa:	47a0      	blx	r4
	RUN_TEST(test_update_duty_cycle_DAC1,20);
   80aac:	f640 4095 	movw	r0, #3221	; 0xc95
   80ab0:	f2c0 0008 	movt	r0, #8
   80ab4:	f646 6198 	movw	r1, #28312	; 0x6e98
   80ab8:	f2c0 0108 	movt	r1, #8
   80abc:	f04f 0214 	mov.w	r2, #20
   80ac0:	47a0      	blx	r4
	UnityEnd();
   80ac2:	f641 107d 	movw	r0, #6525	; 0x197d
   80ac6:	f2c0 0008 	movt	r0, #8
   80aca:	4780      	blx	r0
	
	/* Simple infinite loop, printing text with a given delay */
 	while(1)
	 {
		 
		xSemaphoreTake(semahpore_duty_cycles,portMAX_DELAY); // Take semaphore
   80acc:	f640 05ec 	movw	r5, #2284	; 0x8ec
   80ad0:	f2c2 0507 	movt	r5, #8199	; 0x2007
		/* Store the external variables temporarely */
		int duty_cycle_36_temp = duty_cycle_36;
   80ad4:	f640 1ac8 	movw	sl, #2504	; 0x9c8
   80ad8:	f2c2 0a07 	movt	sl, #8199	; 0x2007
		int duty_cycle_38_temp = duty_cycle_38;
		int duty_cycle_40_temp = duty_cycle_40;
		int duty_cycle_9_temp = duty_cycle_9;
   80adc:	f640 1298 	movw	r2, #2456	; 0x998
   80ae0:	4693      	mov	fp, r2
   80ae2:	f2c2 0b07 	movt	fp, #8199	; 0x2007
	
	/* Simple infinite loop, printing text with a given delay */
 	while(1)
	 {
		 
		xSemaphoreTake(semahpore_duty_cycles,portMAX_DELAY); // Take semaphore
   80ae6:	6828      	ldr	r0, [r5, #0]
   80ae8:	f04f 0100 	mov.w	r1, #0
   80aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80af0:	460b      	mov	r3, r1
   80af2:	f242 466d 	movw	r6, #9325	; 0x246d
   80af6:	f2c0 0608 	movt	r6, #8
   80afa:	47b0      	blx	r6
		/* Store the external variables temporarely */
		int duty_cycle_36_temp = duty_cycle_36;
   80afc:	f8da 9000 	ldr.w	r9, [sl]
		int duty_cycle_38_temp = duty_cycle_38;
   80b00:	f640 07f0 	movw	r7, #2288	; 0x8f0
   80b04:	f2c2 0707 	movt	r7, #8199	; 0x2007
   80b08:	f8d7 8000 	ldr.w	r8, [r7]
		int duty_cycle_40_temp = duty_cycle_40;
   80b0c:	f640 13c4 	movw	r3, #2500	; 0x9c4
   80b10:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80b14:	681f      	ldr	r7, [r3, #0]
		int duty_cycle_9_temp = duty_cycle_9;
   80b16:	f8db 6000 	ldr.w	r6, [fp]
		int duty_cycle_DAC1_temp = duty_cycle_DAC1;
   80b1a:	f640 1144 	movw	r1, #2372	; 0x944
   80b1e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80b22:	680c      	ldr	r4, [r1, #0]

		xSemaphoreGive(semahpore_duty_cycles); // Give back the semaphore
   80b24:	6828      	ldr	r0, [r5, #0]
   80b26:	f04f 0100 	mov.w	r1, #0
   80b2a:	460a      	mov	r2, r1
   80b2c:	460b      	mov	r3, r1
   80b2e:	f242 2c3d 	movw	ip, #8765	; 0x223d
   80b32:	f2c0 0c08 	movt	ip, #8
   80b36:	47e0      	blx	ip
		
		/* Print out duty cycle information */
		printf("Duty cycle DAC1: %d\n\r",duty_cycle_DAC1_temp);
   80b38:	f646 60b4 	movw	r0, #28340	; 0x6eb4
   80b3c:	f2c0 0008 	movt	r0, #8
   80b40:	4621      	mov	r1, r4
   80b42:	f244 7425 	movw	r4, #18213	; 0x4725
   80b46:	f2c0 0408 	movt	r4, #8
   80b4a:	47a0      	blx	r4
		printf("Duty cycle 36: %d\n\r",duty_cycle_36_temp);
   80b4c:	f646 60cc 	movw	r0, #28364	; 0x6ecc
   80b50:	f2c0 0008 	movt	r0, #8
   80b54:	4649      	mov	r1, r9
   80b56:	47a0      	blx	r4
		printf("Duty cycle 38: %d\n\r",duty_cycle_38_temp);
   80b58:	f646 60e0 	movw	r0, #28384	; 0x6ee0
   80b5c:	f2c0 0008 	movt	r0, #8
   80b60:	4641      	mov	r1, r8
   80b62:	47a0      	blx	r4
		printf("Duty cycle 40: %d\n\r",duty_cycle_40_temp);
   80b64:	f646 60f4 	movw	r0, #28404	; 0x6ef4
   80b68:	f2c0 0008 	movt	r0, #8
   80b6c:	4639      	mov	r1, r7
   80b6e:	47a0      	blx	r4
		printf("Duty cycle 9: %d\n\r",duty_cycle_9_temp);
   80b70:	f646 7008 	movw	r0, #28424	; 0x6f08
   80b74:	f2c0 0008 	movt	r0, #8
   80b78:	4631      	mov	r1, r6
   80b7a:	47a0      	blx	r4
		
 		vTaskDelayUntil(&xLastWakeTime,COMMUNICATION_SCHEDULE_TIME);
   80b7c:	f10d 0006 	add.w	r0, sp, #6
   80b80:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   80b84:	f642 621d 	movw	r2, #11805	; 0x2e1d
   80b88:	f2c0 0208 	movt	r2, #8
   80b8c:	4790      	blx	r2
   80b8e:	e7aa      	b.n	80ae6 <start_communication+0xd6>

00080b90 <test_duty_cycle_DAC1>:
 * Created: 2015-05-05 10:11:29
 *  Author: ad2302
 */ 
#include "pwm_controller.h"
#include "unity.h"
void test_duty_cycle_DAC1(void) {
   80b90:	b510      	push	{r4, lr}
   80b92:	b082      	sub	sp, #8
	TEST_ASSERT_EQUAL_MESSAGE(999,duty_cycle_DAC1,"wrong duty cycle DAC1");
   80b94:	f640 1344 	movw	r3, #2372	; 0x944
   80b98:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80b9c:	6819      	ldr	r1, [r3, #0]
   80b9e:	f04f 0094 	mov.w	r0, #148	; 0x94
   80ba2:	9000      	str	r0, [sp, #0]
   80ba4:	f240 30e7 	movw	r0, #999	; 0x3e7
   80ba8:	f646 721c 	movw	r2, #28444	; 0x6f1c
   80bac:	f2c0 0208 	movt	r2, #8
   80bb0:	f04f 030a 	mov.w	r3, #10
   80bb4:	f641 0461 	movw	r4, #6241	; 0x1861
   80bb8:	f2c0 0408 	movt	r4, #8
   80bbc:	47a0      	blx	r4
}
   80bbe:	b002      	add	sp, #8
   80bc0:	bd10      	pop	{r4, pc}
   80bc2:	bf00      	nop

00080bc4 <test_duty_cycle_36>:

void test_duty_cycle_36(void) {
   80bc4:	b510      	push	{r4, lr}
   80bc6:	b082      	sub	sp, #8
	TEST_ASSERT_EQUAL_MESSAGE(600,duty_cycle_36,"wrong duty cycle DAC1");
   80bc8:	f640 13c8 	movw	r3, #2504	; 0x9c8
   80bcc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80bd0:	6819      	ldr	r1, [r3, #0]
   80bd2:	f04f 0094 	mov.w	r0, #148	; 0x94
   80bd6:	9000      	str	r0, [sp, #0]
   80bd8:	f44f 7016 	mov.w	r0, #600	; 0x258
   80bdc:	f646 721c 	movw	r2, #28444	; 0x6f1c
   80be0:	f2c0 0208 	movt	r2, #8
   80be4:	f04f 030e 	mov.w	r3, #14
   80be8:	f641 0461 	movw	r4, #6241	; 0x1861
   80bec:	f2c0 0408 	movt	r4, #8
   80bf0:	47a0      	blx	r4
}
   80bf2:	b002      	add	sp, #8
   80bf4:	bd10      	pop	{r4, pc}
   80bf6:	bf00      	nop

00080bf8 <test_duty_cycle_38>:

void test_duty_cycle_38(void) {
   80bf8:	b510      	push	{r4, lr}
   80bfa:	b082      	sub	sp, #8
	TEST_ASSERT_EQUAL_MESSAGE(600,duty_cycle_38,"wrong duty cycle DAC1");
   80bfc:	f640 03f0 	movw	r3, #2288	; 0x8f0
   80c00:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80c04:	6819      	ldr	r1, [r3, #0]
   80c06:	f04f 0094 	mov.w	r0, #148	; 0x94
   80c0a:	9000      	str	r0, [sp, #0]
   80c0c:	f44f 7016 	mov.w	r0, #600	; 0x258
   80c10:	f646 721c 	movw	r2, #28444	; 0x6f1c
   80c14:	f2c0 0208 	movt	r2, #8
   80c18:	f04f 0312 	mov.w	r3, #18
   80c1c:	f641 0461 	movw	r4, #6241	; 0x1861
   80c20:	f2c0 0408 	movt	r4, #8
   80c24:	47a0      	blx	r4
}
   80c26:	b002      	add	sp, #8
   80c28:	bd10      	pop	{r4, pc}
   80c2a:	bf00      	nop

00080c2c <test_duty_cycle_40>:

void test_duty_cycle_40(void) {
   80c2c:	b510      	push	{r4, lr}
   80c2e:	b082      	sub	sp, #8
	TEST_ASSERT_EQUAL_MESSAGE(500,duty_cycle_40,"wrong duty cycle DAC1");
   80c30:	f640 13c4 	movw	r3, #2500	; 0x9c4
   80c34:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80c38:	6819      	ldr	r1, [r3, #0]
   80c3a:	f04f 0094 	mov.w	r0, #148	; 0x94
   80c3e:	9000      	str	r0, [sp, #0]
   80c40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   80c44:	f646 721c 	movw	r2, #28444	; 0x6f1c
   80c48:	f2c0 0208 	movt	r2, #8
   80c4c:	f04f 0316 	mov.w	r3, #22
   80c50:	f641 0461 	movw	r4, #6241	; 0x1861
   80c54:	f2c0 0408 	movt	r4, #8
   80c58:	47a0      	blx	r4
}
   80c5a:	b002      	add	sp, #8
   80c5c:	bd10      	pop	{r4, pc}
   80c5e:	bf00      	nop

00080c60 <test_duty_cycle_9>:

void test_duty_cycle_9(void) {
   80c60:	b510      	push	{r4, lr}
   80c62:	b082      	sub	sp, #8
	TEST_ASSERT_EQUAL_MESSAGE(700,duty_cycle_9,"wrong duty cycle DAC1");
   80c64:	f640 1398 	movw	r3, #2456	; 0x998
   80c68:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80c6c:	6819      	ldr	r1, [r3, #0]
   80c6e:	f04f 0094 	mov.w	r0, #148	; 0x94
   80c72:	9000      	str	r0, [sp, #0]
   80c74:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   80c78:	f646 721c 	movw	r2, #28444	; 0x6f1c
   80c7c:	f2c0 0208 	movt	r2, #8
   80c80:	f04f 031a 	mov.w	r3, #26
   80c84:	f641 0461 	movw	r4, #6241	; 0x1861
   80c88:	f2c0 0408 	movt	r4, #8
   80c8c:	47a0      	blx	r4
}
   80c8e:	b002      	add	sp, #8
   80c90:	bd10      	pop	{r4, pc}
   80c92:	bf00      	nop

00080c94 <test_update_duty_cycle_DAC1>:
void test_update_duty_cycle_DAC1(void) {
   80c94:	b510      	push	{r4, lr}
   80c96:	b082      	sub	sp, #8
	update_duty_cycle_DAC1(0);
   80c98:	f04f 0000 	mov.w	r0, #0
   80c9c:	f640 1335 	movw	r3, #2357	; 0x935
   80ca0:	f2c0 0308 	movt	r3, #8
   80ca4:	4798      	blx	r3
	TEST_ASSERT_EQUAL_MESSAGE(0,duty_cycle_DAC1,"wrong duty cycle DAC1");
   80ca6:	f640 1044 	movw	r0, #2372	; 0x944
   80caa:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80cae:	6801      	ldr	r1, [r0, #0]
   80cb0:	f04f 0294 	mov.w	r2, #148	; 0x94
   80cb4:	9200      	str	r2, [sp, #0]
   80cb6:	f04f 0000 	mov.w	r0, #0
   80cba:	f646 721c 	movw	r2, #28444	; 0x6f1c
   80cbe:	f2c0 0208 	movt	r2, #8
   80cc2:	f04f 031e 	mov.w	r3, #30
   80cc6:	f641 0461 	movw	r4, #6241	; 0x1861
   80cca:	f2c0 0408 	movt	r4, #8
   80cce:	47a0      	blx	r4
   80cd0:	b002      	add	sp, #8
   80cd2:	bd10      	pop	{r4, pc}

00080cd4 <UnityPrintNumber>:
}

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumber(const _U_SINT number_to_print)
{
   80cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80cd8:	4606      	mov	r6, r0
    _U_SINT divisor = 1;
    _U_SINT next_divisor;
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
   80cda:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   80cde:	d148      	bne.n	80d72 <UnityPrintNumber+0x9e>
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80ce0:	f240 0310 	movw	r3, #16
   80ce4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80ce8:	6818      	ldr	r0, [r3, #0]
   80cea:	6882      	ldr	r2, [r0, #8]
   80cec:	6891      	ldr	r1, [r2, #8]
   80cee:	f101 34ff 	add.w	r4, r1, #4294967295
   80cf2:	6094      	str	r4, [r2, #8]
   80cf4:	2c00      	cmp	r4, #0
   80cf6:	da2a      	bge.n	80d4e <UnityPrintNumber+0x7a>
   80cf8:	6882      	ldr	r2, [r0, #8]
   80cfa:	6894      	ldr	r4, [r2, #8]
   80cfc:	6995      	ldr	r5, [r2, #24]
   80cfe:	42ac      	cmp	r4, r5
   80d00:	db1b      	blt.n	80d3a <UnityPrintNumber+0x66>
   80d02:	6810      	ldr	r0, [r2, #0]
   80d04:	f04f 072d 	mov.w	r7, #45	; 0x2d
   80d08:	7007      	strb	r7, [r0, #0]
   80d0a:	f240 0310 	movw	r3, #16
   80d0e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80d12:	6818      	ldr	r0, [r3, #0]
   80d14:	6882      	ldr	r2, [r0, #8]
   80d16:	6814      	ldr	r4, [r2, #0]
   80d18:	7821      	ldrb	r1, [r4, #0]
   80d1a:	290a      	cmp	r1, #10
   80d1c:	d003      	beq.n	80d26 <UnityPrintNumber+0x52>
   80d1e:	f104 0401 	add.w	r4, r4, #1
   80d22:	6014      	str	r4, [r2, #0]
   80d24:	e073      	b.n	80e0e <UnityPrintNumber+0x13a>
   80d26:	f04f 010a 	mov.w	r1, #10
   80d2a:	f245 15f1 	movw	r5, #20977	; 0x51f1
   80d2e:	f2c0 0508 	movt	r5, #8
   80d32:	47a8      	blx	r5
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80d34:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
   80d38:	e069      	b.n	80e0e <UnityPrintNumber+0x13a>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80d3a:	f04f 012d 	mov.w	r1, #45	; 0x2d
   80d3e:	f245 16f1 	movw	r6, #20977	; 0x51f1
   80d42:	f2c0 0608 	movt	r6, #8
   80d46:	47b0      	blx	r6
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80d48:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
   80d4c:	e05f      	b.n	80e0e <UnityPrintNumber+0x13a>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80d4e:	6886      	ldr	r6, [r0, #8]
   80d50:	6830      	ldr	r0, [r6, #0]
   80d52:	f04f 052d 	mov.w	r5, #45	; 0x2d
   80d56:	7005      	strb	r5, [r0, #0]
   80d58:	f240 0710 	movw	r7, #16
   80d5c:	f2c2 0707 	movt	r7, #8199	; 0x2007
   80d60:	683b      	ldr	r3, [r7, #0]
   80d62:	6899      	ldr	r1, [r3, #8]
   80d64:	680a      	ldr	r2, [r1, #0]
   80d66:	f102 0201 	add.w	r2, r2, #1
   80d6a:	600a      	str	r2, [r1, #0]
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80d6c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
   80d70:	e04d      	b.n	80e0e <UnityPrintNumber+0x13a>
    }
    else if (number_to_print < 0)
   80d72:	2800      	cmp	r0, #0
   80d74:	da4b      	bge.n	80e0e <UnityPrintNumber+0x13a>
    {
        //Some other negative number
        UNITY_OUTPUT_CHAR('-');
   80d76:	f240 0310 	movw	r3, #16
   80d7a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80d7e:	6818      	ldr	r0, [r3, #0]
   80d80:	6882      	ldr	r2, [r0, #8]
   80d82:	6891      	ldr	r1, [r2, #8]
   80d84:	f101 34ff 	add.w	r4, r1, #4294967295
   80d88:	6094      	str	r4, [r2, #8]
   80d8a:	2c00      	cmp	r4, #0
   80d8c:	da26      	bge.n	80ddc <UnityPrintNumber+0x108>
   80d8e:	6882      	ldr	r2, [r0, #8]
   80d90:	6895      	ldr	r5, [r2, #8]
   80d92:	6997      	ldr	r7, [r2, #24]
   80d94:	42bd      	cmp	r5, r7
   80d96:	db19      	blt.n	80dcc <UnityPrintNumber+0xf8>
   80d98:	6810      	ldr	r0, [r2, #0]
   80d9a:	f04f 022d 	mov.w	r2, #45	; 0x2d
   80d9e:	7002      	strb	r2, [r0, #0]
   80da0:	f240 0110 	movw	r1, #16
   80da4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80da8:	6808      	ldr	r0, [r1, #0]
   80daa:	6882      	ldr	r2, [r0, #8]
   80dac:	6814      	ldr	r4, [r2, #0]
   80dae:	7825      	ldrb	r5, [r4, #0]
   80db0:	2d0a      	cmp	r5, #10
   80db2:	d003      	beq.n	80dbc <UnityPrintNumber+0xe8>
   80db4:	f104 0401 	add.w	r4, r4, #1
   80db8:	6014      	str	r4, [r2, #0]
   80dba:	e01e      	b.n	80dfa <UnityPrintNumber+0x126>
   80dbc:	f04f 010a 	mov.w	r1, #10
   80dc0:	f245 17f1 	movw	r7, #20977	; 0x51f1
   80dc4:	f2c0 0708 	movt	r7, #8
   80dc8:	47b8      	blx	r7
   80dca:	e016      	b.n	80dfa <UnityPrintNumber+0x126>
   80dcc:	f04f 012d 	mov.w	r1, #45	; 0x2d
   80dd0:	f245 13f1 	movw	r3, #20977	; 0x51f1
   80dd4:	f2c0 0308 	movt	r3, #8
   80dd8:	4798      	blx	r3
   80dda:	e00e      	b.n	80dfa <UnityPrintNumber+0x126>
   80ddc:	6880      	ldr	r0, [r0, #8]
   80dde:	6805      	ldr	r5, [r0, #0]
   80de0:	f04f 072d 	mov.w	r7, #45	; 0x2d
   80de4:	702f      	strb	r7, [r5, #0]
   80de6:	f240 0310 	movw	r3, #16
   80dea:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80dee:	681a      	ldr	r2, [r3, #0]
   80df0:	6891      	ldr	r1, [r2, #8]
   80df2:	680c      	ldr	r4, [r1, #0]
   80df4:	f104 0401 	add.w	r4, r4, #1
   80df8:	600c      	str	r4, [r1, #0]
        number = (_U_UINT)(-number_to_print);
   80dfa:	f1c6 0600 	rsb	r6, r6, #0
   80dfe:	e006      	b.n	80e0e <UnityPrintNumber+0x13a>
    }

    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
   80e00:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   80e04:	ea4f 0740 	mov.w	r7, r0, lsl #1
        if (next_divisor > divisor)
   80e08:	42bc      	cmp	r4, r7
   80e0a:	db03      	blt.n	80e14 <UnityPrintNumber+0x140>
   80e0c:	e007      	b.n	80e1e <UnityPrintNumber+0x14a>

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80e0e:	f04f 0401 	mov.w	r4, #1
   80e12:	e000      	b.n	80e16 <UnityPrintNumber+0x142>
    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
        if (next_divisor > divisor)
            divisor = next_divisor;
   80e14:	463c      	mov	r4, r7
        //Positive number
        number = (_U_UINT)number_to_print;
    }

    // figure out initial divisor
    while (number / divisor > 9)
   80e16:	fbb6 f2f4 	udiv	r2, r6, r4
   80e1a:	2a09      	cmp	r2, #9
   80e1c:	d8f0      	bhi.n	80e00 <UnityPrintNumber+0x12c>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   80e1e:	f240 0510 	movw	r5, #16
   80e22:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80e26:	f64c 48cd 	movw	r8, #52429	; 0xcccd
   80e2a:	f6cc 48cc 	movt	r8, #52428	; 0xcccc
   80e2e:	f245 19f1 	movw	r9, #20977	; 0x51f1
   80e32:	f2c0 0908 	movt	r9, #8
   80e36:	f04f 0a0a 	mov.w	sl, #10
        divisor /= 10;
   80e3a:	f246 6767 	movw	r7, #26215	; 0x6667
   80e3e:	f2c6 6766 	movt	r7, #26214	; 0x6666
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   80e42:	6828      	ldr	r0, [r5, #0]
   80e44:	6881      	ldr	r1, [r0, #8]
   80e46:	688b      	ldr	r3, [r1, #8]
   80e48:	f103 32ff 	add.w	r2, r3, #4294967295
   80e4c:	608a      	str	r2, [r1, #8]
   80e4e:	2a00      	cmp	r2, #0
   80e50:	da2e      	bge.n	80eb0 <UnityPrintNumber+0x1dc>
   80e52:	6882      	ldr	r2, [r0, #8]
   80e54:	6891      	ldr	r1, [r2, #8]
   80e56:	6993      	ldr	r3, [r2, #24]
   80e58:	4299      	cmp	r1, r3
   80e5a:	db1a      	blt.n	80e92 <UnityPrintNumber+0x1be>
   80e5c:	6811      	ldr	r1, [r2, #0]
   80e5e:	fbb6 f3f4 	udiv	r3, r6, r4
   80e62:	fba8 0203 	umull	r0, r2, r8, r3
   80e66:	ea4f 00d2 	mov.w	r0, r2, lsr #3
   80e6a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   80e6e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   80e72:	f103 0330 	add.w	r3, r3, #48	; 0x30
   80e76:	700b      	strb	r3, [r1, #0]
   80e78:	6828      	ldr	r0, [r5, #0]
   80e7a:	6882      	ldr	r2, [r0, #8]
   80e7c:	6813      	ldr	r3, [r2, #0]
   80e7e:	7819      	ldrb	r1, [r3, #0]
   80e80:	290a      	cmp	r1, #10
   80e82:	d003      	beq.n	80e8c <UnityPrintNumber+0x1b8>
   80e84:	f103 0301 	add.w	r3, r3, #1
   80e88:	6013      	str	r3, [r2, #0]
   80e8a:	e026      	b.n	80eda <UnityPrintNumber+0x206>
   80e8c:	4651      	mov	r1, sl
   80e8e:	47c8      	blx	r9
   80e90:	e023      	b.n	80eda <UnityPrintNumber+0x206>
   80e92:	fbb6 f3f4 	udiv	r3, r6, r4
   80e96:	fba8 e103 	umull	lr, r1, r8, r3
   80e9a:	ea4f 01d1 	mov.w	r1, r1, lsr #3
   80e9e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   80ea2:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
   80ea6:	f103 0330 	add.w	r3, r3, #48	; 0x30
   80eaa:	b2d9      	uxtb	r1, r3
   80eac:	47c8      	blx	r9
   80eae:	e014      	b.n	80eda <UnityPrintNumber+0x206>
   80eb0:	6880      	ldr	r0, [r0, #8]
   80eb2:	6801      	ldr	r1, [r0, #0]
   80eb4:	fbb6 f3f4 	udiv	r3, r6, r4
   80eb8:	fba8 0203 	umull	r0, r2, r8, r3
   80ebc:	ea4f 00d2 	mov.w	r0, r2, lsr #3
   80ec0:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   80ec4:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   80ec8:	f103 0330 	add.w	r3, r3, #48	; 0x30
   80ecc:	700b      	strb	r3, [r1, #0]
   80ece:	6829      	ldr	r1, [r5, #0]
   80ed0:	6888      	ldr	r0, [r1, #8]
   80ed2:	6802      	ldr	r2, [r0, #0]
   80ed4:	f102 0201 	add.w	r2, r2, #1
   80ed8:	6002      	str	r2, [r0, #0]
        divisor /= 10;
   80eda:	fb87 2004 	smull	r2, r0, r7, r4
   80ede:	ea4f 74e4 	mov.w	r4, r4, asr #31
   80ee2:	ebc4 04a0 	rsb	r4, r4, r0, asr #2
    }
    while (divisor > 0);
   80ee6:	2c00      	cmp	r4, #0
   80ee8:	dcab      	bgt.n	80e42 <UnityPrintNumber+0x16e>
}
   80eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80eee:	bf00      	nop

00080ef0 <UnityPrintNumberUnsigned>:

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumberUnsigned(const _U_UINT number)
{
   80ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80ef4:	4606      	mov	r6, r0
    _U_UINT divisor = 1;
   80ef6:	f04f 0401 	mov.w	r4, #1
    _U_UINT next_divisor;

    // figure out initial divisor
    while (number / divisor > 9)
   80efa:	e006      	b.n	80f0a <UnityPrintNumberUnsigned+0x1a>
    {
        next_divisor = divisor * 10;
   80efc:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   80f00:	ea4f 0140 	mov.w	r1, r0, lsl #1
        if (next_divisor > divisor)
   80f04:	428c      	cmp	r4, r1
   80f06:	d204      	bcs.n	80f12 <UnityPrintNumberUnsigned+0x22>
            divisor = next_divisor;
   80f08:	460c      	mov	r4, r1
{
    _U_UINT divisor = 1;
    _U_UINT next_divisor;

    // figure out initial divisor
    while (number / divisor > 9)
   80f0a:	fbb6 f3f4 	udiv	r3, r6, r4
   80f0e:	2b09      	cmp	r3, #9
   80f10:	d8f4      	bhi.n	80efc <UnityPrintNumberUnsigned+0xc>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   80f12:	f240 0710 	movw	r7, #16
   80f16:	f2c2 0707 	movt	r7, #8199	; 0x2007
   80f1a:	f64c 45cd 	movw	r5, #52429	; 0xcccd
   80f1e:	f6cc 45cc 	movt	r5, #52428	; 0xcccc
   80f22:	f245 18f1 	movw	r8, #20977	; 0x51f1
   80f26:	f2c0 0808 	movt	r8, #8
   80f2a:	f04f 090a 	mov.w	r9, #10
   80f2e:	683b      	ldr	r3, [r7, #0]
   80f30:	6898      	ldr	r0, [r3, #8]
   80f32:	6882      	ldr	r2, [r0, #8]
   80f34:	f102 31ff 	add.w	r1, r2, #4294967295
   80f38:	6081      	str	r1, [r0, #8]
   80f3a:	2900      	cmp	r1, #0
   80f3c:	da2f      	bge.n	80f9e <UnityPrintNumberUnsigned+0xae>
   80f3e:	689a      	ldr	r2, [r3, #8]
   80f40:	6890      	ldr	r0, [r2, #8]
   80f42:	6991      	ldr	r1, [r2, #24]
   80f44:	4288      	cmp	r0, r1
   80f46:	db1a      	blt.n	80f7e <UnityPrintNumberUnsigned+0x8e>
   80f48:	6811      	ldr	r1, [r2, #0]
   80f4a:	fbb6 f3f4 	udiv	r3, r6, r4
   80f4e:	fba5 0203 	umull	r0, r2, r5, r3
   80f52:	ea4f 00d2 	mov.w	r0, r2, lsr #3
   80f56:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   80f5a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   80f5e:	f103 0330 	add.w	r3, r3, #48	; 0x30
   80f62:	700b      	strb	r3, [r1, #0]
   80f64:	6838      	ldr	r0, [r7, #0]
   80f66:	6882      	ldr	r2, [r0, #8]
   80f68:	6813      	ldr	r3, [r2, #0]
   80f6a:	7819      	ldrb	r1, [r3, #0]
   80f6c:	290a      	cmp	r1, #10
   80f6e:	d003      	beq.n	80f78 <UnityPrintNumberUnsigned+0x88>
   80f70:	f103 0301 	add.w	r3, r3, #1
   80f74:	6013      	str	r3, [r2, #0]
   80f76:	e027      	b.n	80fc8 <UnityPrintNumberUnsigned+0xd8>
   80f78:	4649      	mov	r1, r9
   80f7a:	47c0      	blx	r8
   80f7c:	e024      	b.n	80fc8 <UnityPrintNumberUnsigned+0xd8>
   80f7e:	fbb6 f1f4 	udiv	r1, r6, r4
   80f82:	fba5 e001 	umull	lr, r0, r5, r1
   80f86:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   80f8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80f8e:	eba1 0140 	sub.w	r1, r1, r0, lsl #1
   80f92:	f101 0130 	add.w	r1, r1, #48	; 0x30
   80f96:	4618      	mov	r0, r3
   80f98:	b2c9      	uxtb	r1, r1
   80f9a:	47c0      	blx	r8
   80f9c:	e014      	b.n	80fc8 <UnityPrintNumberUnsigned+0xd8>
   80f9e:	689b      	ldr	r3, [r3, #8]
   80fa0:	6819      	ldr	r1, [r3, #0]
   80fa2:	fbb6 f3f4 	udiv	r3, r6, r4
   80fa6:	fba5 0203 	umull	r0, r2, r5, r3
   80faa:	ea4f 00d2 	mov.w	r0, r2, lsr #3
   80fae:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   80fb2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   80fb6:	f103 0330 	add.w	r3, r3, #48	; 0x30
   80fba:	700b      	strb	r3, [r1, #0]
   80fbc:	6839      	ldr	r1, [r7, #0]
   80fbe:	6888      	ldr	r0, [r1, #8]
   80fc0:	6802      	ldr	r2, [r0, #0]
   80fc2:	f102 0201 	add.w	r2, r2, #1
   80fc6:	6002      	str	r2, [r0, #0]
        divisor /= 10;
   80fc8:	fba5 3404 	umull	r3, r4, r5, r4
    }
    while (divisor > 0);
   80fcc:	08e4      	lsrs	r4, r4, #3
   80fce:	d1ae      	bne.n	80f2e <UnityPrintNumberUnsigned+0x3e>
}
   80fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00080fd4 <UnityPrintNumberHex>:

//-----------------------------------------------
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
   80fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80fd8:	4606      	mov	r6, r0
   80fda:	460c      	mov	r4, r1
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
   80fdc:	f240 0310 	movw	r3, #16
   80fe0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80fe4:	6818      	ldr	r0, [r3, #0]
   80fe6:	6882      	ldr	r2, [r0, #8]
   80fe8:	6891      	ldr	r1, [r2, #8]
   80fea:	f101 33ff 	add.w	r3, r1, #4294967295
   80fee:	6093      	str	r3, [r2, #8]
   80ff0:	2b00      	cmp	r3, #0
   80ff2:	da26      	bge.n	81042 <UnityPrintNumberHex+0x6e>
   80ff4:	6882      	ldr	r2, [r0, #8]
   80ff6:	6891      	ldr	r1, [r2, #8]
   80ff8:	6993      	ldr	r3, [r2, #24]
   80ffa:	4299      	cmp	r1, r3
   80ffc:	db19      	blt.n	81032 <UnityPrintNumberHex+0x5e>
   80ffe:	6810      	ldr	r0, [r2, #0]
   81000:	f04f 0230 	mov.w	r2, #48	; 0x30
   81004:	7002      	strb	r2, [r0, #0]
   81006:	f240 0110 	movw	r1, #16
   8100a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8100e:	6808      	ldr	r0, [r1, #0]
   81010:	6882      	ldr	r2, [r0, #8]
   81012:	6813      	ldr	r3, [r2, #0]
   81014:	7819      	ldrb	r1, [r3, #0]
   81016:	290a      	cmp	r1, #10
   81018:	d003      	beq.n	81022 <UnityPrintNumberHex+0x4e>
   8101a:	f103 0301 	add.w	r3, r3, #1
   8101e:	6013      	str	r3, [r2, #0]
   81020:	e01e      	b.n	81060 <UnityPrintNumberHex+0x8c>
   81022:	f04f 010a 	mov.w	r1, #10
   81026:	f245 13f1 	movw	r3, #20977	; 0x51f1
   8102a:	f2c0 0308 	movt	r3, #8
   8102e:	4798      	blx	r3
   81030:	e016      	b.n	81060 <UnityPrintNumberHex+0x8c>
   81032:	f04f 0130 	mov.w	r1, #48	; 0x30
   81036:	f245 13f1 	movw	r3, #20977	; 0x51f1
   8103a:	f2c0 0308 	movt	r3, #8
   8103e:	4798      	blx	r3
   81040:	e00e      	b.n	81060 <UnityPrintNumberHex+0x8c>
   81042:	6880      	ldr	r0, [r0, #8]
   81044:	6801      	ldr	r1, [r0, #0]
   81046:	f04f 0230 	mov.w	r2, #48	; 0x30
   8104a:	700a      	strb	r2, [r1, #0]
   8104c:	f240 0310 	movw	r3, #16
   81050:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81054:	6818      	ldr	r0, [r3, #0]
   81056:	6881      	ldr	r1, [r0, #8]
   81058:	680a      	ldr	r2, [r1, #0]
   8105a:	f102 0201 	add.w	r2, r2, #1
   8105e:	600a      	str	r2, [r1, #0]
    UNITY_OUTPUT_CHAR('x');
   81060:	f240 0010 	movw	r0, #16
   81064:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81068:	6800      	ldr	r0, [r0, #0]
   8106a:	6882      	ldr	r2, [r0, #8]
   8106c:	6891      	ldr	r1, [r2, #8]
   8106e:	f101 33ff 	add.w	r3, r1, #4294967295
   81072:	6093      	str	r3, [r2, #8]
   81074:	2b00      	cmp	r3, #0
   81076:	da28      	bge.n	810ca <UnityPrintNumberHex+0xf6>
   81078:	6882      	ldr	r2, [r0, #8]
   8107a:	6891      	ldr	r1, [r2, #8]
   8107c:	6993      	ldr	r3, [r2, #24]
   8107e:	4299      	cmp	r1, r3
   81080:	db19      	blt.n	810b6 <UnityPrintNumberHex+0xe2>
   81082:	6810      	ldr	r0, [r2, #0]
   81084:	f04f 0278 	mov.w	r2, #120	; 0x78
   81088:	7002      	strb	r2, [r0, #0]
   8108a:	f240 0110 	movw	r1, #16
   8108e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81092:	6808      	ldr	r0, [r1, #0]
   81094:	6882      	ldr	r2, [r0, #8]
   81096:	6813      	ldr	r3, [r2, #0]
   81098:	7819      	ldrb	r1, [r3, #0]
   8109a:	290a      	cmp	r1, #10
   8109c:	d003      	beq.n	810a6 <UnityPrintNumberHex+0xd2>
   8109e:	f103 0301 	add.w	r3, r3, #1
   810a2:	6013      	str	r3, [r2, #0]
   810a4:	e00e      	b.n	810c4 <UnityPrintNumberHex+0xf0>
   810a6:	f04f 010a 	mov.w	r1, #10
   810aa:	f245 13f1 	movw	r3, #20977	; 0x51f1
   810ae:	f2c0 0308 	movt	r3, #8
   810b2:	4798      	blx	r3
   810b4:	e006      	b.n	810c4 <UnityPrintNumberHex+0xf0>
   810b6:	f04f 0178 	mov.w	r1, #120	; 0x78
   810ba:	f245 13f1 	movw	r3, #20977	; 0x51f1
   810be:	f2c0 0308 	movt	r3, #8
   810c2:	4798      	blx	r3

    while (nibbles > 0)
   810c4:	b98c      	cbnz	r4, 810ea <UnityPrintNumberHex+0x116>
   810c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');
   810ca:	6880      	ldr	r0, [r0, #8]
   810cc:	6801      	ldr	r1, [r0, #0]
   810ce:	f04f 0278 	mov.w	r2, #120	; 0x78
   810d2:	700a      	strb	r2, [r1, #0]
   810d4:	f240 0310 	movw	r3, #16
   810d8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   810dc:	6818      	ldr	r0, [r3, #0]
   810de:	6881      	ldr	r1, [r0, #8]
   810e0:	680a      	ldr	r2, [r1, #0]
   810e2:	f102 0201 	add.w	r2, r2, #1
   810e6:	600a      	str	r2, [r1, #0]
   810e8:	e7ec      	b.n	810c4 <UnityPrintNumberHex+0xf0>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   810ea:	f240 0510 	movw	r5, #16
   810ee:	f2c2 0507 	movt	r5, #8199	; 0x2007
   810f2:	f245 17f1 	movw	r7, #20977	; 0x51f1
   810f6:	46b9      	mov	r9, r7
   810f8:	f2c0 0908 	movt	r9, #8
   810fc:	f04f 080a 	mov.w	r8, #10
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
    {
        nibble = (number >> (--nibbles << 2)) & 0x0000000F;
   81100:	f104 34ff 	add.w	r4, r4, #4294967295
   81104:	b2e4      	uxtb	r4, r4
   81106:	ea4f 0084 	mov.w	r0, r4, lsl #2
   8110a:	fa26 f200 	lsr.w	r2, r6, r0
   8110e:	f002 030f 	and.w	r3, r2, #15
        if (nibble <= 9)
   81112:	2b09      	cmp	r3, #9
   81114:	d82d      	bhi.n	81172 <UnityPrintNumberHex+0x19e>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
   81116:	6828      	ldr	r0, [r5, #0]
   81118:	6881      	ldr	r1, [r0, #8]
   8111a:	688a      	ldr	r2, [r1, #8]
   8111c:	f102 32ff 	add.w	r2, r2, #4294967295
   81120:	608a      	str	r2, [r1, #8]
   81122:	2a00      	cmp	r2, #0
   81124:	da19      	bge.n	8115a <UnityPrintNumberHex+0x186>
   81126:	6882      	ldr	r2, [r0, #8]
   81128:	6891      	ldr	r1, [r2, #8]
   8112a:	6997      	ldr	r7, [r2, #24]
   8112c:	42b9      	cmp	r1, r7
   8112e:	db10      	blt.n	81152 <UnityPrintNumberHex+0x17e>
   81130:	6810      	ldr	r0, [r2, #0]
   81132:	f103 0330 	add.w	r3, r3, #48	; 0x30
   81136:	7003      	strb	r3, [r0, #0]
   81138:	6828      	ldr	r0, [r5, #0]
   8113a:	6882      	ldr	r2, [r0, #8]
   8113c:	6813      	ldr	r3, [r2, #0]
   8113e:	7819      	ldrb	r1, [r3, #0]
   81140:	290a      	cmp	r1, #10
   81142:	d003      	beq.n	8114c <UnityPrintNumberHex+0x178>
   81144:	f103 0301 	add.w	r3, r3, #1
   81148:	6013      	str	r3, [r2, #0]
   8114a:	e03f      	b.n	811cc <UnityPrintNumberHex+0x1f8>
   8114c:	4641      	mov	r1, r8
   8114e:	47c8      	blx	r9
   81150:	e03c      	b.n	811cc <UnityPrintNumberHex+0x1f8>
   81152:	f103 0130 	add.w	r1, r3, #48	; 0x30
   81156:	47c8      	blx	r9
   81158:	e038      	b.n	811cc <UnityPrintNumberHex+0x1f8>
   8115a:	6880      	ldr	r0, [r0, #8]
   8115c:	6801      	ldr	r1, [r0, #0]
   8115e:	f103 0330 	add.w	r3, r3, #48	; 0x30
   81162:	700b      	strb	r3, [r1, #0]
   81164:	682b      	ldr	r3, [r5, #0]
   81166:	6898      	ldr	r0, [r3, #8]
   81168:	6802      	ldr	r2, [r0, #0]
   8116a:	f102 0201 	add.w	r2, r2, #1
   8116e:	6002      	str	r2, [r0, #0]
   81170:	e02c      	b.n	811cc <UnityPrintNumberHex+0x1f8>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   81172:	6828      	ldr	r0, [r5, #0]
   81174:	6881      	ldr	r1, [r0, #8]
   81176:	688a      	ldr	r2, [r1, #8]
   81178:	f102 32ff 	add.w	r2, r2, #4294967295
   8117c:	608a      	str	r2, [r1, #8]
   8117e:	2a00      	cmp	r2, #0
   81180:	da19      	bge.n	811b6 <UnityPrintNumberHex+0x1e2>
   81182:	6882      	ldr	r2, [r0, #8]
   81184:	6891      	ldr	r1, [r2, #8]
   81186:	6997      	ldr	r7, [r2, #24]
   81188:	42b9      	cmp	r1, r7
   8118a:	db10      	blt.n	811ae <UnityPrintNumberHex+0x1da>
   8118c:	6810      	ldr	r0, [r2, #0]
   8118e:	f103 0337 	add.w	r3, r3, #55	; 0x37
   81192:	7003      	strb	r3, [r0, #0]
   81194:	6828      	ldr	r0, [r5, #0]
   81196:	6882      	ldr	r2, [r0, #8]
   81198:	6813      	ldr	r3, [r2, #0]
   8119a:	7819      	ldrb	r1, [r3, #0]
   8119c:	290a      	cmp	r1, #10
   8119e:	d003      	beq.n	811a8 <UnityPrintNumberHex+0x1d4>
   811a0:	f103 0301 	add.w	r3, r3, #1
   811a4:	6013      	str	r3, [r2, #0]
   811a6:	e011      	b.n	811cc <UnityPrintNumberHex+0x1f8>
   811a8:	4641      	mov	r1, r8
   811aa:	47c8      	blx	r9
   811ac:	e00e      	b.n	811cc <UnityPrintNumberHex+0x1f8>
   811ae:	f103 0137 	add.w	r1, r3, #55	; 0x37
   811b2:	47c8      	blx	r9
   811b4:	e00a      	b.n	811cc <UnityPrintNumberHex+0x1f8>
   811b6:	6880      	ldr	r0, [r0, #8]
   811b8:	6801      	ldr	r1, [r0, #0]
   811ba:	f103 0337 	add.w	r3, r3, #55	; 0x37
   811be:	700b      	strb	r3, [r1, #0]
   811c0:	682b      	ldr	r3, [r5, #0]
   811c2:	6898      	ldr	r0, [r3, #8]
   811c4:	6802      	ldr	r2, [r0, #0]
   811c6:	f102 0201 	add.w	r2, r2, #1
   811ca:	6002      	str	r2, [r0, #0]
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
   811cc:	2c00      	cmp	r4, #0
   811ce:	d197      	bne.n	81100 <UnityPrintNumberHex+0x12c>
   811d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000811d4 <UnityPrintNumberByStyle>:
    }
}

//-----------------------------------------------
void UnityPrintNumberByStyle(const _U_SINT number, const UNITY_DISPLAY_STYLE_T style)
{
   811d4:	b508      	push	{r3, lr}
    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
   811d6:	f011 0f10 	tst.w	r1, #16
   811da:	d005      	beq.n	811e8 <UnityPrintNumberByStyle+0x14>
    {
        UnityPrintNumber(number);
   811dc:	f640 43d5 	movw	r3, #3285	; 0xcd5
   811e0:	f2c0 0308 	movt	r3, #8
   811e4:	4798      	blx	r3
   811e6:	bd08      	pop	{r3, pc}
    }
    else if ((style & UNITY_DISPLAY_RANGE_UINT) == UNITY_DISPLAY_RANGE_UINT)
   811e8:	f011 0f20 	tst.w	r1, #32
   811ec:	d010      	beq.n	81210 <UnityPrintNumberByStyle+0x3c>
    {
        UnityPrintNumberUnsigned(  (_U_UINT)number  &  UnitySizeMask[((_U_UINT)style & (_U_UINT)0x0F) - 1]  );
   811ee:	f001 020f 	and.w	r2, r1, #15
   811f2:	f102 31ff 	add.w	r1, r2, #4294967295
   811f6:	f646 7334 	movw	r3, #28468	; 0x6f34
   811fa:	f2c0 0308 	movt	r3, #8
   811fe:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   81202:	4010      	ands	r0, r2
   81204:	f640 61f1 	movw	r1, #3825	; 0xef1
   81208:	f2c0 0108 	movt	r1, #8
   8120c:	4788      	blx	r1
   8120e:	bd08      	pop	{r3, pc}
    }
    else
    {
        UnityPrintNumberHex((_U_UINT)number, (char)((style & 0x000F) << 1));
   81210:	f001 010f 	and.w	r1, r1, #15
   81214:	ea4f 0141 	mov.w	r1, r1, lsl #1
   81218:	f640 73d5 	movw	r3, #4053	; 0xfd5
   8121c:	f2c0 0308 	movt	r3, #8
   81220:	4798      	blx	r3
   81222:	bd08      	pop	{r3, pc}

00081224 <UnityPrint>:
//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
{
   81224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const char* pch = string;

    if (pch != NULL)
   81226:	4604      	mov	r4, r0
   81228:	2800      	cmp	r0, #0
   8122a:	f000 813c 	beq.w	814a6 <UnityPrint+0x282>
    {
        while (*pch)
   8122e:	7803      	ldrb	r3, [r0, #0]
   81230:	2b00      	cmp	r3, #0
   81232:	f000 8138 	beq.w	814a6 <UnityPrint+0x282>

//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
   81236:	f104 0401 	add.w	r4, r4, #1
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   8123a:	f240 0510 	movw	r5, #16
   8123e:	f2c2 0507 	movt	r5, #8199	; 0x2007
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   81242:	f640 76d5 	movw	r6, #4053	; 0xfd5
   81246:	f2c0 0608 	movt	r6, #8
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   8124a:	f245 17f1 	movw	r7, #20977	; 0x51f1
   8124e:	f2c0 0708 	movt	r7, #8
    if (pch != NULL)
    {
        while (*pch)
        {
            // printable characters plus CR & LF are printed
            if ((*pch <= 126) && (*pch >= 32))
   81252:	f1a3 0220 	sub.w	r2, r3, #32
   81256:	b2d0      	uxtb	r0, r2
   81258:	285e      	cmp	r0, #94	; 0x5e
   8125a:	d82e      	bhi.n	812ba <UnityPrint+0x96>
            {
                UNITY_OUTPUT_CHAR(*pch);
   8125c:	6828      	ldr	r0, [r5, #0]
   8125e:	6882      	ldr	r2, [r0, #8]
   81260:	6893      	ldr	r3, [r2, #8]
   81262:	f103 31ff 	add.w	r1, r3, #4294967295
   81266:	6091      	str	r1, [r2, #8]
   81268:	2900      	cmp	r1, #0
   8126a:	da1a      	bge.n	812a2 <UnityPrint+0x7e>
   8126c:	6882      	ldr	r2, [r0, #8]
   8126e:	6891      	ldr	r1, [r2, #8]
   81270:	6993      	ldr	r3, [r2, #24]
   81272:	4299      	cmp	r1, r3
   81274:	db11      	blt.n	8129a <UnityPrint+0x76>
   81276:	6810      	ldr	r0, [r2, #0]
   81278:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   8127c:	7002      	strb	r2, [r0, #0]
   8127e:	6828      	ldr	r0, [r5, #0]
   81280:	6882      	ldr	r2, [r0, #8]
   81282:	6813      	ldr	r3, [r2, #0]
   81284:	7819      	ldrb	r1, [r3, #0]
   81286:	290a      	cmp	r1, #10
   81288:	d003      	beq.n	81292 <UnityPrint+0x6e>
   8128a:	f103 0301 	add.w	r3, r3, #1
   8128e:	6013      	str	r3, [r2, #0]
   81290:	e104      	b.n	8149c <UnityPrint+0x278>
   81292:	f04f 010a 	mov.w	r1, #10
   81296:	47b8      	blx	r7
   81298:	e100      	b.n	8149c <UnityPrint+0x278>
   8129a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   8129e:	47b8      	blx	r7
   812a0:	e0fc      	b.n	8149c <UnityPrint+0x278>
   812a2:	6880      	ldr	r0, [r0, #8]
   812a4:	6803      	ldr	r3, [r0, #0]
   812a6:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   812aa:	701a      	strb	r2, [r3, #0]
   812ac:	6829      	ldr	r1, [r5, #0]
   812ae:	6888      	ldr	r0, [r1, #8]
   812b0:	6803      	ldr	r3, [r0, #0]
   812b2:	f103 0301 	add.w	r3, r3, #1
   812b6:	6003      	str	r3, [r0, #0]
   812b8:	e0f0      	b.n	8149c <UnityPrint+0x278>
            }
            //write escaped carriage returns
            else if (*pch == 13)
   812ba:	2b0d      	cmp	r3, #13
   812bc:	d15c      	bne.n	81378 <UnityPrint+0x154>
            {
                UNITY_OUTPUT_CHAR('\\');
   812be:	6828      	ldr	r0, [r5, #0]
   812c0:	6882      	ldr	r2, [r0, #8]
   812c2:	6893      	ldr	r3, [r2, #8]
   812c4:	f103 31ff 	add.w	r1, r3, #4294967295
   812c8:	6091      	str	r1, [r2, #8]
   812ca:	2900      	cmp	r1, #0
   812cc:	da1a      	bge.n	81304 <UnityPrint+0xe0>
   812ce:	6882      	ldr	r2, [r0, #8]
   812d0:	6891      	ldr	r1, [r2, #8]
   812d2:	6993      	ldr	r3, [r2, #24]
   812d4:	4299      	cmp	r1, r3
   812d6:	db11      	blt.n	812fc <UnityPrint+0xd8>
   812d8:	6810      	ldr	r0, [r2, #0]
   812da:	f04f 025c 	mov.w	r2, #92	; 0x5c
   812de:	7002      	strb	r2, [r0, #0]
   812e0:	6828      	ldr	r0, [r5, #0]
   812e2:	6882      	ldr	r2, [r0, #8]
   812e4:	6813      	ldr	r3, [r2, #0]
   812e6:	7819      	ldrb	r1, [r3, #0]
   812e8:	290a      	cmp	r1, #10
   812ea:	d003      	beq.n	812f4 <UnityPrint+0xd0>
   812ec:	f103 0301 	add.w	r3, r3, #1
   812f0:	6013      	str	r3, [r2, #0]
   812f2:	e012      	b.n	8131a <UnityPrint+0xf6>
   812f4:	f04f 010a 	mov.w	r1, #10
   812f8:	47b8      	blx	r7
   812fa:	e00e      	b.n	8131a <UnityPrint+0xf6>
   812fc:	f04f 015c 	mov.w	r1, #92	; 0x5c
   81300:	47b8      	blx	r7
   81302:	e00a      	b.n	8131a <UnityPrint+0xf6>
   81304:	6880      	ldr	r0, [r0, #8]
   81306:	6803      	ldr	r3, [r0, #0]
   81308:	f04f 025c 	mov.w	r2, #92	; 0x5c
   8130c:	701a      	strb	r2, [r3, #0]
   8130e:	6829      	ldr	r1, [r5, #0]
   81310:	6888      	ldr	r0, [r1, #8]
   81312:	6803      	ldr	r3, [r0, #0]
   81314:	f103 0301 	add.w	r3, r3, #1
   81318:	6003      	str	r3, [r0, #0]
                UNITY_OUTPUT_CHAR('r');
   8131a:	6828      	ldr	r0, [r5, #0]
   8131c:	6882      	ldr	r2, [r0, #8]
   8131e:	6893      	ldr	r3, [r2, #8]
   81320:	f103 31ff 	add.w	r1, r3, #4294967295
   81324:	6091      	str	r1, [r2, #8]
   81326:	2900      	cmp	r1, #0
   81328:	da1a      	bge.n	81360 <UnityPrint+0x13c>
   8132a:	6882      	ldr	r2, [r0, #8]
   8132c:	6891      	ldr	r1, [r2, #8]
   8132e:	6993      	ldr	r3, [r2, #24]
   81330:	4299      	cmp	r1, r3
   81332:	db11      	blt.n	81358 <UnityPrint+0x134>
   81334:	6810      	ldr	r0, [r2, #0]
   81336:	f04f 0272 	mov.w	r2, #114	; 0x72
   8133a:	7002      	strb	r2, [r0, #0]
   8133c:	6828      	ldr	r0, [r5, #0]
   8133e:	6882      	ldr	r2, [r0, #8]
   81340:	6813      	ldr	r3, [r2, #0]
   81342:	7819      	ldrb	r1, [r3, #0]
   81344:	290a      	cmp	r1, #10
   81346:	d003      	beq.n	81350 <UnityPrint+0x12c>
   81348:	f103 0301 	add.w	r3, r3, #1
   8134c:	6013      	str	r3, [r2, #0]
   8134e:	e0a5      	b.n	8149c <UnityPrint+0x278>
   81350:	f04f 010a 	mov.w	r1, #10
   81354:	47b8      	blx	r7
   81356:	e0a1      	b.n	8149c <UnityPrint+0x278>
   81358:	f04f 0172 	mov.w	r1, #114	; 0x72
   8135c:	47b8      	blx	r7
   8135e:	e09d      	b.n	8149c <UnityPrint+0x278>
   81360:	6880      	ldr	r0, [r0, #8]
   81362:	6803      	ldr	r3, [r0, #0]
   81364:	f04f 0272 	mov.w	r2, #114	; 0x72
   81368:	701a      	strb	r2, [r3, #0]
   8136a:	6829      	ldr	r1, [r5, #0]
   8136c:	6888      	ldr	r0, [r1, #8]
   8136e:	6803      	ldr	r3, [r0, #0]
   81370:	f103 0301 	add.w	r3, r3, #1
   81374:	6003      	str	r3, [r0, #0]
   81376:	e091      	b.n	8149c <UnityPrint+0x278>
            }
            //write escaped line feeds
            else if (*pch == 10)
   81378:	2b0a      	cmp	r3, #10
   8137a:	d15c      	bne.n	81436 <UnityPrint+0x212>
            {
                UNITY_OUTPUT_CHAR('\\');
   8137c:	6828      	ldr	r0, [r5, #0]
   8137e:	6882      	ldr	r2, [r0, #8]
   81380:	6893      	ldr	r3, [r2, #8]
   81382:	f103 31ff 	add.w	r1, r3, #4294967295
   81386:	6091      	str	r1, [r2, #8]
   81388:	2900      	cmp	r1, #0
   8138a:	da1a      	bge.n	813c2 <UnityPrint+0x19e>
   8138c:	6882      	ldr	r2, [r0, #8]
   8138e:	6891      	ldr	r1, [r2, #8]
   81390:	6993      	ldr	r3, [r2, #24]
   81392:	4299      	cmp	r1, r3
   81394:	db11      	blt.n	813ba <UnityPrint+0x196>
   81396:	6810      	ldr	r0, [r2, #0]
   81398:	f04f 025c 	mov.w	r2, #92	; 0x5c
   8139c:	7002      	strb	r2, [r0, #0]
   8139e:	6828      	ldr	r0, [r5, #0]
   813a0:	6882      	ldr	r2, [r0, #8]
   813a2:	6813      	ldr	r3, [r2, #0]
   813a4:	7819      	ldrb	r1, [r3, #0]
   813a6:	290a      	cmp	r1, #10
   813a8:	d003      	beq.n	813b2 <UnityPrint+0x18e>
   813aa:	f103 0301 	add.w	r3, r3, #1
   813ae:	6013      	str	r3, [r2, #0]
   813b0:	e012      	b.n	813d8 <UnityPrint+0x1b4>
   813b2:	f04f 010a 	mov.w	r1, #10
   813b6:	47b8      	blx	r7
   813b8:	e00e      	b.n	813d8 <UnityPrint+0x1b4>
   813ba:	f04f 015c 	mov.w	r1, #92	; 0x5c
   813be:	47b8      	blx	r7
   813c0:	e00a      	b.n	813d8 <UnityPrint+0x1b4>
   813c2:	6880      	ldr	r0, [r0, #8]
   813c4:	6803      	ldr	r3, [r0, #0]
   813c6:	f04f 025c 	mov.w	r2, #92	; 0x5c
   813ca:	701a      	strb	r2, [r3, #0]
   813cc:	6829      	ldr	r1, [r5, #0]
   813ce:	6888      	ldr	r0, [r1, #8]
   813d0:	6803      	ldr	r3, [r0, #0]
   813d2:	f103 0301 	add.w	r3, r3, #1
   813d6:	6003      	str	r3, [r0, #0]
                UNITY_OUTPUT_CHAR('n');
   813d8:	6828      	ldr	r0, [r5, #0]
   813da:	6882      	ldr	r2, [r0, #8]
   813dc:	6893      	ldr	r3, [r2, #8]
   813de:	f103 31ff 	add.w	r1, r3, #4294967295
   813e2:	6091      	str	r1, [r2, #8]
   813e4:	2900      	cmp	r1, #0
   813e6:	da1a      	bge.n	8141e <UnityPrint+0x1fa>
   813e8:	6882      	ldr	r2, [r0, #8]
   813ea:	6891      	ldr	r1, [r2, #8]
   813ec:	6993      	ldr	r3, [r2, #24]
   813ee:	4299      	cmp	r1, r3
   813f0:	db11      	blt.n	81416 <UnityPrint+0x1f2>
   813f2:	6810      	ldr	r0, [r2, #0]
   813f4:	f04f 026e 	mov.w	r2, #110	; 0x6e
   813f8:	7002      	strb	r2, [r0, #0]
   813fa:	6828      	ldr	r0, [r5, #0]
   813fc:	6882      	ldr	r2, [r0, #8]
   813fe:	6813      	ldr	r3, [r2, #0]
   81400:	7819      	ldrb	r1, [r3, #0]
   81402:	290a      	cmp	r1, #10
   81404:	d003      	beq.n	8140e <UnityPrint+0x1ea>
   81406:	f103 0301 	add.w	r3, r3, #1
   8140a:	6013      	str	r3, [r2, #0]
   8140c:	e046      	b.n	8149c <UnityPrint+0x278>
   8140e:	f04f 010a 	mov.w	r1, #10
   81412:	47b8      	blx	r7
   81414:	e042      	b.n	8149c <UnityPrint+0x278>
   81416:	f04f 016e 	mov.w	r1, #110	; 0x6e
   8141a:	47b8      	blx	r7
   8141c:	e03e      	b.n	8149c <UnityPrint+0x278>
   8141e:	6880      	ldr	r0, [r0, #8]
   81420:	6803      	ldr	r3, [r0, #0]
   81422:	f04f 026e 	mov.w	r2, #110	; 0x6e
   81426:	701a      	strb	r2, [r3, #0]
   81428:	6829      	ldr	r1, [r5, #0]
   8142a:	6888      	ldr	r0, [r1, #8]
   8142c:	6803      	ldr	r3, [r0, #0]
   8142e:	f103 0301 	add.w	r3, r3, #1
   81432:	6003      	str	r3, [r0, #0]
   81434:	e032      	b.n	8149c <UnityPrint+0x278>
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   81436:	6828      	ldr	r0, [r5, #0]
   81438:	6881      	ldr	r1, [r0, #8]
   8143a:	688b      	ldr	r3, [r1, #8]
   8143c:	f103 32ff 	add.w	r2, r3, #4294967295
   81440:	608a      	str	r2, [r1, #8]
   81442:	2a00      	cmp	r2, #0
   81444:	da1a      	bge.n	8147c <UnityPrint+0x258>
   81446:	6882      	ldr	r2, [r0, #8]
   81448:	6891      	ldr	r1, [r2, #8]
   8144a:	6993      	ldr	r3, [r2, #24]
   8144c:	4299      	cmp	r1, r3
   8144e:	db11      	blt.n	81474 <UnityPrint+0x250>
   81450:	6810      	ldr	r0, [r2, #0]
   81452:	f04f 025c 	mov.w	r2, #92	; 0x5c
   81456:	7002      	strb	r2, [r0, #0]
   81458:	6828      	ldr	r0, [r5, #0]
   8145a:	6882      	ldr	r2, [r0, #8]
   8145c:	6813      	ldr	r3, [r2, #0]
   8145e:	7819      	ldrb	r1, [r3, #0]
   81460:	290a      	cmp	r1, #10
   81462:	d003      	beq.n	8146c <UnityPrint+0x248>
   81464:	f103 0301 	add.w	r3, r3, #1
   81468:	6013      	str	r3, [r2, #0]
   8146a:	e012      	b.n	81492 <UnityPrint+0x26e>
   8146c:	f04f 010a 	mov.w	r1, #10
   81470:	47b8      	blx	r7
   81472:	e00e      	b.n	81492 <UnityPrint+0x26e>
   81474:	f04f 015c 	mov.w	r1, #92	; 0x5c
   81478:	47b8      	blx	r7
   8147a:	e00a      	b.n	81492 <UnityPrint+0x26e>
   8147c:	6880      	ldr	r0, [r0, #8]
   8147e:	6801      	ldr	r1, [r0, #0]
   81480:	f04f 035c 	mov.w	r3, #92	; 0x5c
   81484:	700b      	strb	r3, [r1, #0]
   81486:	682a      	ldr	r2, [r5, #0]
   81488:	6890      	ldr	r0, [r2, #8]
   8148a:	6801      	ldr	r1, [r0, #0]
   8148c:	f101 0101 	add.w	r1, r1, #1
   81490:	6001      	str	r1, [r0, #0]
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   81492:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   81496:	f04f 0102 	mov.w	r1, #2
   8149a:	47b0      	blx	r6
{
    const char* pch = string;

    if (pch != NULL)
    {
        while (*pch)
   8149c:	f814 3b01 	ldrb.w	r3, [r4], #1
   814a0:	2b00      	cmp	r3, #0
   814a2:	f47f aed6 	bne.w	81252 <UnityPrint+0x2e>
   814a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000814a8 <UnityTestResultsBegin>:
    UnityPrint(UnityStrOk);
}

//-----------------------------------------------
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
   814a8:	b538      	push	{r3, r4, r5, lr}
   814aa:	460d      	mov	r5, r1
    UnityPrint(file);
   814ac:	f241 2325 	movw	r3, #4645	; 0x1225
   814b0:	f2c0 0308 	movt	r3, #8
   814b4:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   814b6:	f240 0010 	movw	r0, #16
   814ba:	f2c2 0007 	movt	r0, #8199	; 0x2007
   814be:	6800      	ldr	r0, [r0, #0]
   814c0:	6884      	ldr	r4, [r0, #8]
   814c2:	68a2      	ldr	r2, [r4, #8]
   814c4:	f102 31ff 	add.w	r1, r2, #4294967295
   814c8:	60a1      	str	r1, [r4, #8]
   814ca:	2900      	cmp	r1, #0
   814cc:	da26      	bge.n	8151c <UnityTestResultsBegin+0x74>
   814ce:	6882      	ldr	r2, [r0, #8]
   814d0:	6893      	ldr	r3, [r2, #8]
   814d2:	6991      	ldr	r1, [r2, #24]
   814d4:	428b      	cmp	r3, r1
   814d6:	db19      	blt.n	8150c <UnityTestResultsBegin+0x64>
   814d8:	6810      	ldr	r0, [r2, #0]
   814da:	f04f 023a 	mov.w	r2, #58	; 0x3a
   814de:	7002      	strb	r2, [r0, #0]
   814e0:	f240 0110 	movw	r1, #16
   814e4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   814e8:	6808      	ldr	r0, [r1, #0]
   814ea:	6882      	ldr	r2, [r0, #8]
   814ec:	6813      	ldr	r3, [r2, #0]
   814ee:	7819      	ldrb	r1, [r3, #0]
   814f0:	290a      	cmp	r1, #10
   814f2:	d003      	beq.n	814fc <UnityTestResultsBegin+0x54>
   814f4:	f103 0301 	add.w	r3, r3, #1
   814f8:	6013      	str	r3, [r2, #0]
   814fa:	e01e      	b.n	8153a <UnityTestResultsBegin+0x92>
   814fc:	f04f 010a 	mov.w	r1, #10
   81500:	f245 13f1 	movw	r3, #20977	; 0x51f1
   81504:	f2c0 0308 	movt	r3, #8
   81508:	4798      	blx	r3
   8150a:	e016      	b.n	8153a <UnityTestResultsBegin+0x92>
   8150c:	f04f 013a 	mov.w	r1, #58	; 0x3a
   81510:	f245 13f1 	movw	r3, #20977	; 0x51f1
   81514:	f2c0 0308 	movt	r3, #8
   81518:	4798      	blx	r3
   8151a:	e00e      	b.n	8153a <UnityTestResultsBegin+0x92>
   8151c:	6883      	ldr	r3, [r0, #8]
   8151e:	6818      	ldr	r0, [r3, #0]
   81520:	f04f 023a 	mov.w	r2, #58	; 0x3a
   81524:	7002      	strb	r2, [r0, #0]
   81526:	f240 0110 	movw	r1, #16
   8152a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8152e:	680b      	ldr	r3, [r1, #0]
   81530:	6898      	ldr	r0, [r3, #8]
   81532:	6802      	ldr	r2, [r0, #0]
   81534:	f102 0201 	add.w	r2, r2, #1
   81538:	6002      	str	r2, [r0, #0]
    UnityPrintNumber((_U_SINT)line);
   8153a:	4628      	mov	r0, r5
   8153c:	f640 42d5 	movw	r2, #3285	; 0xcd5
   81540:	f2c0 0208 	movt	r2, #8
   81544:	4790      	blx	r2
    UNITY_OUTPUT_CHAR(':');
   81546:	f240 0010 	movw	r0, #16
   8154a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8154e:	6800      	ldr	r0, [r0, #0]
   81550:	6881      	ldr	r1, [r0, #8]
   81552:	688b      	ldr	r3, [r1, #8]
   81554:	f103 32ff 	add.w	r2, r3, #4294967295
   81558:	608a      	str	r2, [r1, #8]
   8155a:	2a00      	cmp	r2, #0
   8155c:	da26      	bge.n	815ac <UnityTestResultsBegin+0x104>
   8155e:	6882      	ldr	r2, [r0, #8]
   81560:	6891      	ldr	r1, [r2, #8]
   81562:	6993      	ldr	r3, [r2, #24]
   81564:	4299      	cmp	r1, r3
   81566:	db19      	blt.n	8159c <UnityTestResultsBegin+0xf4>
   81568:	6810      	ldr	r0, [r2, #0]
   8156a:	f04f 023a 	mov.w	r2, #58	; 0x3a
   8156e:	7002      	strb	r2, [r0, #0]
   81570:	f240 0110 	movw	r1, #16
   81574:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81578:	6808      	ldr	r0, [r1, #0]
   8157a:	6882      	ldr	r2, [r0, #8]
   8157c:	6813      	ldr	r3, [r2, #0]
   8157e:	7819      	ldrb	r1, [r3, #0]
   81580:	290a      	cmp	r1, #10
   81582:	d003      	beq.n	8158c <UnityTestResultsBegin+0xe4>
   81584:	f103 0301 	add.w	r3, r3, #1
   81588:	6013      	str	r3, [r2, #0]
   8158a:	e01e      	b.n	815ca <UnityTestResultsBegin+0x122>
   8158c:	f04f 010a 	mov.w	r1, #10
   81590:	f245 13f1 	movw	r3, #20977	; 0x51f1
   81594:	f2c0 0308 	movt	r3, #8
   81598:	4798      	blx	r3
   8159a:	e016      	b.n	815ca <UnityTestResultsBegin+0x122>
   8159c:	f04f 013a 	mov.w	r1, #58	; 0x3a
   815a0:	f245 13f1 	movw	r3, #20977	; 0x51f1
   815a4:	f2c0 0308 	movt	r3, #8
   815a8:	4798      	blx	r3
   815aa:	e00e      	b.n	815ca <UnityTestResultsBegin+0x122>
   815ac:	6880      	ldr	r0, [r0, #8]
   815ae:	6801      	ldr	r1, [r0, #0]
   815b0:	f04f 033a 	mov.w	r3, #58	; 0x3a
   815b4:	700b      	strb	r3, [r1, #0]
   815b6:	f240 0210 	movw	r2, #16
   815ba:	f2c2 0207 	movt	r2, #8199	; 0x2007
   815be:	6810      	ldr	r0, [r2, #0]
   815c0:	6881      	ldr	r1, [r0, #8]
   815c2:	680b      	ldr	r3, [r1, #0]
   815c4:	f103 0301 	add.w	r3, r3, #1
   815c8:	600b      	str	r3, [r1, #0]
    UnityPrint(Unity.CurrentTestName);
   815ca:	f648 402c 	movw	r0, #35884	; 0x8c2c
   815ce:	f2c2 0007 	movt	r0, #8199	; 0x2007
   815d2:	6840      	ldr	r0, [r0, #4]
   815d4:	f241 2225 	movw	r2, #4645	; 0x1225
   815d8:	f2c0 0208 	movt	r2, #8
   815dc:	4790      	blx	r2
    UNITY_OUTPUT_CHAR(':');
   815de:	f240 0110 	movw	r1, #16
   815e2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   815e6:	6808      	ldr	r0, [r1, #0]
   815e8:	6882      	ldr	r2, [r0, #8]
   815ea:	6893      	ldr	r3, [r2, #8]
   815ec:	f103 31ff 	add.w	r1, r3, #4294967295
   815f0:	6091      	str	r1, [r2, #8]
   815f2:	2900      	cmp	r1, #0
   815f4:	da26      	bge.n	81644 <UnityTestResultsBegin+0x19c>
   815f6:	6882      	ldr	r2, [r0, #8]
   815f8:	6891      	ldr	r1, [r2, #8]
   815fa:	6993      	ldr	r3, [r2, #24]
   815fc:	4299      	cmp	r1, r3
   815fe:	db19      	blt.n	81634 <UnityTestResultsBegin+0x18c>
   81600:	6810      	ldr	r0, [r2, #0]
   81602:	f04f 023a 	mov.w	r2, #58	; 0x3a
   81606:	7002      	strb	r2, [r0, #0]
   81608:	f240 0110 	movw	r1, #16
   8160c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81610:	6808      	ldr	r0, [r1, #0]
   81612:	6882      	ldr	r2, [r0, #8]
   81614:	6813      	ldr	r3, [r2, #0]
   81616:	7819      	ldrb	r1, [r3, #0]
   81618:	290a      	cmp	r1, #10
   8161a:	d003      	beq.n	81624 <UnityTestResultsBegin+0x17c>
   8161c:	f103 0301 	add.w	r3, r3, #1
   81620:	6013      	str	r3, [r2, #0]
   81622:	bd38      	pop	{r3, r4, r5, pc}
   81624:	f04f 010a 	mov.w	r1, #10
   81628:	f245 13f1 	movw	r3, #20977	; 0x51f1
   8162c:	f2c0 0308 	movt	r3, #8
   81630:	4798      	blx	r3
   81632:	bd38      	pop	{r3, r4, r5, pc}
   81634:	f04f 013a 	mov.w	r1, #58	; 0x3a
   81638:	f245 13f1 	movw	r3, #20977	; 0x51f1
   8163c:	f2c0 0308 	movt	r3, #8
   81640:	4798      	blx	r3
   81642:	bd38      	pop	{r3, r4, r5, pc}
   81644:	6880      	ldr	r0, [r0, #8]
   81646:	6803      	ldr	r3, [r0, #0]
   81648:	f04f 023a 	mov.w	r2, #58	; 0x3a
   8164c:	701a      	strb	r2, [r3, #0]
   8164e:	f240 0110 	movw	r1, #16
   81652:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81656:	6808      	ldr	r0, [r1, #0]
   81658:	6883      	ldr	r3, [r0, #8]
   8165a:	681a      	ldr	r2, [r3, #0]
   8165c:	f102 0201 	add.w	r2, r2, #1
   81660:	601a      	str	r2, [r3, #0]
   81662:	bd38      	pop	{r3, r4, r5, pc}

00081664 <UnityTestResultsFailBegin>:
}

//-----------------------------------------------
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
   81664:	b508      	push	{r3, lr}
   81666:	4601      	mov	r1, r0
    UnityTestResultsBegin(Unity.TestFile, line);
   81668:	f648 432c 	movw	r3, #35884	; 0x8c2c
   8166c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81670:	6818      	ldr	r0, [r3, #0]
   81672:	f241 42a9 	movw	r2, #5289	; 0x14a9
   81676:	f2c0 0208 	movt	r2, #8
   8167a:	4790      	blx	r2
    UnityPrint(UnityStrFail);
   8167c:	f646 7060 	movw	r0, #28512	; 0x6f60
   81680:	f2c0 0008 	movt	r0, #8
   81684:	f241 2125 	movw	r1, #4645	; 0x1225
   81688:	f2c0 0108 	movt	r1, #8
   8168c:	4788      	blx	r1
    UNITY_OUTPUT_CHAR(':');
   8168e:	f240 0010 	movw	r0, #16
   81692:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81696:	6800      	ldr	r0, [r0, #0]
   81698:	6882      	ldr	r2, [r0, #8]
   8169a:	6893      	ldr	r3, [r2, #8]
   8169c:	f103 31ff 	add.w	r1, r3, #4294967295
   816a0:	6091      	str	r1, [r2, #8]
   816a2:	2900      	cmp	r1, #0
   816a4:	da26      	bge.n	816f4 <UnityTestResultsFailBegin+0x90>
   816a6:	6882      	ldr	r2, [r0, #8]
   816a8:	6891      	ldr	r1, [r2, #8]
   816aa:	6993      	ldr	r3, [r2, #24]
   816ac:	4299      	cmp	r1, r3
   816ae:	db19      	blt.n	816e4 <UnityTestResultsFailBegin+0x80>
   816b0:	6810      	ldr	r0, [r2, #0]
   816b2:	f04f 023a 	mov.w	r2, #58	; 0x3a
   816b6:	7002      	strb	r2, [r0, #0]
   816b8:	f240 0110 	movw	r1, #16
   816bc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   816c0:	6808      	ldr	r0, [r1, #0]
   816c2:	6882      	ldr	r2, [r0, #8]
   816c4:	6813      	ldr	r3, [r2, #0]
   816c6:	7819      	ldrb	r1, [r3, #0]
   816c8:	290a      	cmp	r1, #10
   816ca:	d003      	beq.n	816d4 <UnityTestResultsFailBegin+0x70>
   816cc:	f103 0301 	add.w	r3, r3, #1
   816d0:	6013      	str	r3, [r2, #0]
   816d2:	bd08      	pop	{r3, pc}
   816d4:	f04f 010a 	mov.w	r1, #10
   816d8:	f245 13f1 	movw	r3, #20977	; 0x51f1
   816dc:	f2c0 0308 	movt	r3, #8
   816e0:	4798      	blx	r3
   816e2:	bd08      	pop	{r3, pc}
   816e4:	f04f 013a 	mov.w	r1, #58	; 0x3a
   816e8:	f245 13f1 	movw	r3, #20977	; 0x51f1
   816ec:	f2c0 0308 	movt	r3, #8
   816f0:	4798      	blx	r3
   816f2:	bd08      	pop	{r3, pc}
   816f4:	6880      	ldr	r0, [r0, #8]
   816f6:	6803      	ldr	r3, [r0, #0]
   816f8:	f04f 023a 	mov.w	r2, #58	; 0x3a
   816fc:	701a      	strb	r2, [r3, #0]
   816fe:	f240 0110 	movw	r1, #16
   81702:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81706:	6808      	ldr	r0, [r1, #0]
   81708:	6883      	ldr	r3, [r0, #8]
   8170a:	681a      	ldr	r2, [r3, #0]
   8170c:	f102 0201 	add.w	r2, r2, #1
   81710:	601a      	str	r2, [r3, #0]
   81712:	bd08      	pop	{r3, pc}

00081714 <UnityAddMsgIfSpecified>:
    UNITY_PRINT_EOL;
}

//-----------------------------------------------
static void UnityAddMsgIfSpecified(const char* msg)
{
   81714:	b538      	push	{r3, r4, r5, lr}
    if (msg)
   81716:	4605      	mov	r5, r0
   81718:	b150      	cbz	r0, 81730 <UnityAddMsgIfSpecified+0x1c>
    {
        UnityPrint(UnityStrSpacer);
   8171a:	f646 7054 	movw	r0, #28500	; 0x6f54
   8171e:	f2c0 0008 	movt	r0, #8
   81722:	f241 2425 	movw	r4, #4645	; 0x1225
   81726:	f2c0 0408 	movt	r4, #8
   8172a:	47a0      	blx	r4
        UnityPrint(msg);
   8172c:	4628      	mov	r0, r5
   8172e:	47a0      	blx	r4
   81730:	bd38      	pop	{r3, r4, r5, pc}
   81732:	bf00      	nop

00081734 <UnityPrintFail>:
#endif

//-----------------------------------------------

void UnityPrintFail(void)
{
   81734:	b508      	push	{r3, lr}
    UnityPrint(UnityStrFail);
   81736:	f646 7060 	movw	r0, #28512	; 0x6f60
   8173a:	f2c0 0008 	movt	r0, #8
   8173e:	f241 2325 	movw	r3, #4645	; 0x1225
   81742:	f2c0 0308 	movt	r3, #8
   81746:	4798      	blx	r3
   81748:	bd08      	pop	{r3, pc}
   8174a:	bf00      	nop

0008174c <UnityPrintOk>:
}

void UnityPrintOk(void)
{
   8174c:	b508      	push	{r3, lr}
    UnityPrint(UnityStrOk);
   8174e:	f646 7050 	movw	r0, #28496	; 0x6f50
   81752:	f2c0 0008 	movt	r0, #8
   81756:	f241 2325 	movw	r3, #4645	; 0x1225
   8175a:	f2c0 0308 	movt	r3, #8
   8175e:	4798      	blx	r3
   81760:	bd08      	pop	{r3, pc}
   81762:	bf00      	nop

00081764 <UnityConcludeTest>:
    UNITY_OUTPUT_CHAR(':');
}

//-----------------------------------------------
void UnityConcludeTest(void)
{
   81764:	b508      	push	{r3, lr}
    if (Unity.CurrentTestIgnored)
   81766:	f648 432c 	movw	r3, #35884	; 0x8c2c
   8176a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8176e:	69d8      	ldr	r0, [r3, #28]
   81770:	b140      	cbz	r0, 81784 <UnityConcludeTest+0x20>
    {
        Unity.TestIgnores++;
   81772:	f648 402c 	movw	r0, #35884	; 0x8c2c
   81776:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8177a:	6941      	ldr	r1, [r0, #20]
   8177c:	f101 0101 	add.w	r1, r1, #1
   81780:	6141      	str	r1, [r0, #20]
   81782:	e022      	b.n	817ca <UnityConcludeTest+0x66>
    }
    else if (!Unity.CurrentTestFailed)
   81784:	f648 412c 	movw	r1, #35884	; 0x8c2c
   81788:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8178c:	698a      	ldr	r2, [r1, #24]
   8178e:	b9a2      	cbnz	r2, 817ba <UnityConcludeTest+0x56>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
   81790:	f648 412c 	movw	r1, #35884	; 0x8c2c
   81794:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81798:	6808      	ldr	r0, [r1, #0]
   8179a:	6889      	ldr	r1, [r1, #8]
   8179c:	f241 42a9 	movw	r2, #5289	; 0x14a9
   817a0:	f2c0 0208 	movt	r2, #8
   817a4:	4790      	blx	r2
        UnityPrint(UnityStrPass);
   817a6:	f646 70ac 	movw	r0, #28588	; 0x6fac
   817aa:	f2c0 0008 	movt	r0, #8
   817ae:	f241 2325 	movw	r3, #4645	; 0x1225
   817b2:	f2c0 0308 	movt	r3, #8
   817b6:	4798      	blx	r3
   817b8:	e007      	b.n	817ca <UnityConcludeTest+0x66>
    }
    else
    {
        Unity.TestFailures++;
   817ba:	f648 432c 	movw	r3, #35884	; 0x8c2c
   817be:	f2c2 0307 	movt	r3, #8199	; 0x2007
   817c2:	6918      	ldr	r0, [r3, #16]
   817c4:	f100 0001 	add.w	r0, r0, #1
   817c8:	6118      	str	r0, [r3, #16]
    }

    Unity.CurrentTestFailed = 0;
   817ca:	f648 432c 	movw	r3, #35884	; 0x8c2c
   817ce:	f2c2 0307 	movt	r3, #8199	; 0x2007
   817d2:	f04f 0200 	mov.w	r2, #0
   817d6:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   817d8:	61da      	str	r2, [r3, #28]
    UNITY_PRINT_EOL;
   817da:	f240 0010 	movw	r0, #16
   817de:	f2c2 0007 	movt	r0, #8199	; 0x2007
   817e2:	6800      	ldr	r0, [r0, #0]
   817e4:	6881      	ldr	r1, [r0, #8]
   817e6:	688b      	ldr	r3, [r1, #8]
   817e8:	f103 32ff 	add.w	r2, r3, #4294967295
   817ec:	608a      	str	r2, [r1, #8]
   817ee:	2a00      	cmp	r2, #0
   817f0:	da26      	bge.n	81840 <UnityConcludeTest+0xdc>
   817f2:	6882      	ldr	r2, [r0, #8]
   817f4:	6891      	ldr	r1, [r2, #8]
   817f6:	6993      	ldr	r3, [r2, #24]
   817f8:	4299      	cmp	r1, r3
   817fa:	db19      	blt.n	81830 <UnityConcludeTest+0xcc>
   817fc:	6810      	ldr	r0, [r2, #0]
   817fe:	f04f 020a 	mov.w	r2, #10
   81802:	7002      	strb	r2, [r0, #0]
   81804:	f240 0110 	movw	r1, #16
   81808:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8180c:	6808      	ldr	r0, [r1, #0]
   8180e:	6882      	ldr	r2, [r0, #8]
   81810:	6813      	ldr	r3, [r2, #0]
   81812:	7819      	ldrb	r1, [r3, #0]
   81814:	290a      	cmp	r1, #10
   81816:	d003      	beq.n	81820 <UnityConcludeTest+0xbc>
   81818:	f103 0301 	add.w	r3, r3, #1
   8181c:	6013      	str	r3, [r2, #0]
   8181e:	bd08      	pop	{r3, pc}
   81820:	f04f 010a 	mov.w	r1, #10
   81824:	f245 13f1 	movw	r3, #20977	; 0x51f1
   81828:	f2c0 0308 	movt	r3, #8
   8182c:	4798      	blx	r3
   8182e:	bd08      	pop	{r3, pc}
   81830:	f04f 010a 	mov.w	r1, #10
   81834:	f245 13f1 	movw	r3, #20977	; 0x51f1
   81838:	f2c0 0308 	movt	r3, #8
   8183c:	4798      	blx	r3
   8183e:	bd08      	pop	{r3, pc}
   81840:	6880      	ldr	r0, [r0, #8]
   81842:	6801      	ldr	r1, [r0, #0]
   81844:	f04f 030a 	mov.w	r3, #10
   81848:	700b      	strb	r3, [r1, #0]
   8184a:	f240 0210 	movw	r2, #16
   8184e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81852:	6810      	ldr	r0, [r2, #0]
   81854:	6881      	ldr	r1, [r0, #8]
   81856:	680b      	ldr	r3, [r1, #0]
   81858:	f103 0301 	add.w	r3, r3, #1
   8185c:	600b      	str	r3, [r1, #0]
   8185e:	bd08      	pop	{r3, pc}

00081860 <UnityAssertEqualNumber>:
void UnityAssertEqualNumber(const _U_SINT expected,
                            const _U_SINT actual,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber,
                            const UNITY_DISPLAY_STYLE_T style)
{
   81860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81864:	4606      	mov	r6, r0
   81866:	460d      	mov	r5, r1
   81868:	4690      	mov	r8, r2
   8186a:	f89d 7020 	ldrb.w	r7, [sp, #32]
    UNITY_SKIP_EXECUTION;
   8186e:	f648 442c 	movw	r4, #35884	; 0x8c2c
   81872:	f2c2 0407 	movt	r4, #8199	; 0x2007
   81876:	69a4      	ldr	r4, [r4, #24]
   81878:	bb14      	cbnz	r4, 818c0 <UnityAssertEqualNumber+0x60>
   8187a:	f648 422c 	movw	r2, #35884	; 0x8c2c
   8187e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81882:	69d4      	ldr	r4, [r2, #28]
   81884:	b9e4      	cbnz	r4, 818c0 <UnityAssertEqualNumber+0x60>

    if (expected != actual)
   81886:	4288      	cmp	r0, r1
   81888:	d01a      	beq.n	818c0 <UnityAssertEqualNumber+0x60>
    {
        UnityTestResultsFailBegin(lineNumber);
   8188a:	4618      	mov	r0, r3
   8188c:	4b0d      	ldr	r3, [pc, #52]	; (818c4 <UnityAssertEqualNumber+0x64>)
   8188e:	4798      	blx	r3
        UnityPrint(UnityStrExpected);
   81890:	480d      	ldr	r0, [pc, #52]	; (818c8 <UnityAssertEqualNumber+0x68>)
   81892:	f8df 904c 	ldr.w	r9, [pc, #76]	; 818e0 <UnityAssertEqualNumber+0x80>
   81896:	47c8      	blx	r9
        UnityPrintNumberByStyle(expected, style);
   81898:	4630      	mov	r0, r6
   8189a:	4639      	mov	r1, r7
   8189c:	4e0b      	ldr	r6, [pc, #44]	; (818cc <UnityAssertEqualNumber+0x6c>)
   8189e:	47b0      	blx	r6
        UnityPrint(UnityStrWas);
   818a0:	480b      	ldr	r0, [pc, #44]	; (818d0 <UnityAssertEqualNumber+0x70>)
   818a2:	47c8      	blx	r9
        UnityPrintNumberByStyle(actual, style);
   818a4:	4628      	mov	r0, r5
   818a6:	4639      	mov	r1, r7
   818a8:	47b0      	blx	r6
        UnityAddMsgIfSpecified(msg);
   818aa:	4640      	mov	r0, r8
   818ac:	4909      	ldr	r1, [pc, #36]	; (818d4 <UnityAssertEqualNumber+0x74>)
   818ae:	4788      	blx	r1
        UNITY_FAIL_AND_BAIL;
   818b0:	4809      	ldr	r0, [pc, #36]	; (818d8 <UnityAssertEqualNumber+0x78>)
   818b2:	f04f 0101 	mov.w	r1, #1
   818b6:	6181      	str	r1, [r0, #24]
   818b8:	f100 0020 	add.w	r0, r0, #32
   818bc:	4d07      	ldr	r5, [pc, #28]	; (818dc <UnityAssertEqualNumber+0x7c>)
   818be:	47a8      	blx	r5
   818c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   818c4:	00081665 	.word	0x00081665
   818c8:	00086f68 	.word	0x00086f68
   818cc:	000811d5 	.word	0x000811d5
   818d0:	00086f58 	.word	0x00086f58
   818d4:	00081715 	.word	0x00081715
   818d8:	20078c2c 	.word	0x20078c2c
   818dc:	000847a5 	.word	0x000847a5
   818e0:	00081225 	.word	0x00081225

000818e4 <setUp>:

//-----------------------------------------------
#if defined(UNITY_WEAK_ATTRIBUTE)
    void setUp(void);
    void tearDown(void);
    UNITY_WEAK_ATTRIBUTE void setUp(void) { }
   818e4:	4770      	bx	lr
   818e6:	bf00      	nop

000818e8 <tearDown>:
    UNITY_WEAK_ATTRIBUTE void tearDown(void) { }
   818e8:	4770      	bx	lr
   818ea:	bf00      	nop

000818ec <UnityDefaultTestRun>:
    void setUp(void);
    void tearDown(void);
#endif
//-----------------------------------------------
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
   818ec:	b500      	push	{lr}
   818ee:	b083      	sub	sp, #12
   818f0:	9001      	str	r0, [sp, #4]
    Unity.CurrentTestName = FuncName;
   818f2:	f648 402c 	movw	r0, #35884	; 0x8c2c
   818f6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   818fa:	6041      	str	r1, [r0, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
   818fc:	6082      	str	r2, [r0, #8]
    Unity.NumberOfTests++;
   818fe:	68c3      	ldr	r3, [r0, #12]
   81900:	f103 0301 	add.w	r3, r3, #1
   81904:	60c3      	str	r3, [r0, #12]
    if (TEST_PROTECT())
   81906:	f100 0020 	add.w	r0, r0, #32
   8190a:	f244 7199 	movw	r1, #18329	; 0x4799
   8190e:	f2c0 0108 	movt	r1, #8
   81912:	4788      	blx	r1
   81914:	b930      	cbnz	r0, 81924 <UnityDefaultTestRun+0x38>
    {
        setUp();
   81916:	f641 00e5 	movw	r0, #6373	; 0x18e5
   8191a:	f2c0 0008 	movt	r0, #8
   8191e:	4780      	blx	r0
        Func();
   81920:	9a01      	ldr	r2, [sp, #4]
   81922:	4790      	blx	r2
    }
    if (TEST_PROTECT() && !(Unity.CurrentTestIgnored))
   81924:	480c      	ldr	r0, [pc, #48]	; (81958 <UnityDefaultTestRun+0x6c>)
   81926:	f244 7399 	movw	r3, #18329	; 0x4799
   8192a:	f2c0 0308 	movt	r3, #8
   8192e:	4798      	blx	r3
   81930:	b950      	cbnz	r0, 81948 <UnityDefaultTestRun+0x5c>
   81932:	f648 412c 	movw	r1, #35884	; 0x8c2c
   81936:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8193a:	69c8      	ldr	r0, [r1, #28]
   8193c:	b920      	cbnz	r0, 81948 <UnityDefaultTestRun+0x5c>
    {
        tearDown();
   8193e:	f641 02e9 	movw	r2, #6377	; 0x18e9
   81942:	f2c0 0208 	movt	r2, #8
   81946:	4790      	blx	r2
    }
    UnityConcludeTest();
   81948:	f241 7365 	movw	r3, #5989	; 0x1765
   8194c:	f2c0 0308 	movt	r3, #8
   81950:	4798      	blx	r3
}
   81952:	b003      	add	sp, #12
   81954:	bd00      	pop	{pc}
   81956:	bf00      	nop
   81958:	20078c4c 	.word	0x20078c4c

0008195c <UnityBegin>:

//-----------------------------------------------
void UnityBegin(const char* filename)
{
    Unity.TestFile = filename;
   8195c:	f648 432c 	movw	r3, #35884	; 0x8c2c
   81960:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81964:	6018      	str	r0, [r3, #0]
    Unity.CurrentTestName = NULL;
   81966:	f04f 0200 	mov.w	r2, #0
   8196a:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
   8196c:	609a      	str	r2, [r3, #8]
    Unity.NumberOfTests = 0;
   8196e:	60da      	str	r2, [r3, #12]
    Unity.TestFailures = 0;
   81970:	611a      	str	r2, [r3, #16]
    Unity.TestIgnores = 0;
   81972:	615a      	str	r2, [r3, #20]
    Unity.CurrentTestFailed = 0;
   81974:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   81976:	61da      	str	r2, [r3, #28]
   81978:	4770      	bx	lr
   8197a:	bf00      	nop

0008197c <UnityEnd>:
    UNITY_OUTPUT_START();
}

//-----------------------------------------------
int UnityEnd(void)
{
   8197c:	b570      	push	{r4, r5, r6, lr}
    UNITY_PRINT_EOL;
   8197e:	f240 0310 	movw	r3, #16
   81982:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81986:	6818      	ldr	r0, [r3, #0]
   81988:	6882      	ldr	r2, [r0, #8]
   8198a:	6891      	ldr	r1, [r2, #8]
   8198c:	f101 34ff 	add.w	r4, r1, #4294967295
   81990:	6094      	str	r4, [r2, #8]
   81992:	2c00      	cmp	r4, #0
   81994:	da26      	bge.n	819e4 <UnityEnd+0x68>
   81996:	6882      	ldr	r2, [r0, #8]
   81998:	6895      	ldr	r5, [r2, #8]
   8199a:	6996      	ldr	r6, [r2, #24]
   8199c:	42b5      	cmp	r5, r6
   8199e:	db19      	blt.n	819d4 <UnityEnd+0x58>
   819a0:	6810      	ldr	r0, [r2, #0]
   819a2:	f04f 020a 	mov.w	r2, #10
   819a6:	7002      	strb	r2, [r0, #0]
   819a8:	f240 0110 	movw	r1, #16
   819ac:	f2c2 0107 	movt	r1, #8199	; 0x2007
   819b0:	6808      	ldr	r0, [r1, #0]
   819b2:	6882      	ldr	r2, [r0, #8]
   819b4:	6814      	ldr	r4, [r2, #0]
   819b6:	7825      	ldrb	r5, [r4, #0]
   819b8:	2d0a      	cmp	r5, #10
   819ba:	d003      	beq.n	819c4 <UnityEnd+0x48>
   819bc:	f104 0401 	add.w	r4, r4, #1
   819c0:	6014      	str	r4, [r2, #0]
   819c2:	e01e      	b.n	81a02 <UnityEnd+0x86>
   819c4:	f04f 010a 	mov.w	r1, #10
   819c8:	f245 16f1 	movw	r6, #20977	; 0x51f1
   819cc:	f2c0 0608 	movt	r6, #8
   819d0:	47b0      	blx	r6
   819d2:	e016      	b.n	81a02 <UnityEnd+0x86>
   819d4:	f04f 010a 	mov.w	r1, #10
   819d8:	f245 13f1 	movw	r3, #20977	; 0x51f1
   819dc:	f2c0 0308 	movt	r3, #8
   819e0:	4798      	blx	r3
   819e2:	e00e      	b.n	81a02 <UnityEnd+0x86>
   819e4:	6880      	ldr	r0, [r0, #8]
   819e6:	6805      	ldr	r5, [r0, #0]
   819e8:	f04f 060a 	mov.w	r6, #10
   819ec:	702e      	strb	r6, [r5, #0]
   819ee:	f240 0310 	movw	r3, #16
   819f2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   819f6:	681a      	ldr	r2, [r3, #0]
   819f8:	6891      	ldr	r1, [r2, #8]
   819fa:	680c      	ldr	r4, [r1, #0]
   819fc:	f104 0401 	add.w	r4, r4, #1
   81a00:	600c      	str	r4, [r1, #0]
    UnityPrint(UnityStrBreaker);
   81a02:	f646 7074 	movw	r0, #28532	; 0x6f74
   81a06:	f2c0 0008 	movt	r0, #8
   81a0a:	f241 2325 	movw	r3, #4645	; 0x1225
   81a0e:	f2c0 0308 	movt	r3, #8
   81a12:	4798      	blx	r3
    UNITY_PRINT_EOL;
   81a14:	f240 0010 	movw	r0, #16
   81a18:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81a1c:	6800      	ldr	r0, [r0, #0]
   81a1e:	6882      	ldr	r2, [r0, #8]
   81a20:	6891      	ldr	r1, [r2, #8]
   81a22:	f101 34ff 	add.w	r4, r1, #4294967295
   81a26:	6094      	str	r4, [r2, #8]
   81a28:	2c00      	cmp	r4, #0
   81a2a:	da26      	bge.n	81a7a <UnityEnd+0xfe>
   81a2c:	6882      	ldr	r2, [r0, #8]
   81a2e:	6895      	ldr	r5, [r2, #8]
   81a30:	6996      	ldr	r6, [r2, #24]
   81a32:	42b5      	cmp	r5, r6
   81a34:	db19      	blt.n	81a6a <UnityEnd+0xee>
   81a36:	6810      	ldr	r0, [r2, #0]
   81a38:	f04f 020a 	mov.w	r2, #10
   81a3c:	7002      	strb	r2, [r0, #0]
   81a3e:	f240 0110 	movw	r1, #16
   81a42:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81a46:	6808      	ldr	r0, [r1, #0]
   81a48:	6882      	ldr	r2, [r0, #8]
   81a4a:	6814      	ldr	r4, [r2, #0]
   81a4c:	7825      	ldrb	r5, [r4, #0]
   81a4e:	2d0a      	cmp	r5, #10
   81a50:	d003      	beq.n	81a5a <UnityEnd+0xde>
   81a52:	f104 0401 	add.w	r4, r4, #1
   81a56:	6014      	str	r4, [r2, #0]
   81a58:	e01e      	b.n	81a98 <UnityEnd+0x11c>
   81a5a:	f04f 010a 	mov.w	r1, #10
   81a5e:	f245 16f1 	movw	r6, #20977	; 0x51f1
   81a62:	f2c0 0608 	movt	r6, #8
   81a66:	47b0      	blx	r6
   81a68:	e016      	b.n	81a98 <UnityEnd+0x11c>
   81a6a:	f04f 010a 	mov.w	r1, #10
   81a6e:	f245 13f1 	movw	r3, #20977	; 0x51f1
   81a72:	f2c0 0308 	movt	r3, #8
   81a76:	4798      	blx	r3
   81a78:	e00e      	b.n	81a98 <UnityEnd+0x11c>
   81a7a:	6885      	ldr	r5, [r0, #8]
   81a7c:	682e      	ldr	r6, [r5, #0]
   81a7e:	f04f 030a 	mov.w	r3, #10
   81a82:	7033      	strb	r3, [r6, #0]
   81a84:	f240 0010 	movw	r0, #16
   81a88:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81a8c:	6802      	ldr	r2, [r0, #0]
   81a8e:	6891      	ldr	r1, [r2, #8]
   81a90:	680c      	ldr	r4, [r1, #0]
   81a92:	f104 0401 	add.w	r4, r4, #1
   81a96:	600c      	str	r4, [r1, #0]
    UnityPrintNumber((_U_SINT)(Unity.NumberOfTests));
   81a98:	f648 462c 	movw	r6, #35884	; 0x8c2c
   81a9c:	f2c2 0607 	movt	r6, #8199	; 0x2007
   81aa0:	68f0      	ldr	r0, [r6, #12]
   81aa2:	f640 45d5 	movw	r5, #3285	; 0xcd5
   81aa6:	f2c0 0508 	movt	r5, #8
   81aaa:	47a8      	blx	r5
    UnityPrint(UnityStrResultsTests);
   81aac:	f646 70a4 	movw	r0, #28580	; 0x6fa4
   81ab0:	f2c0 0008 	movt	r0, #8
   81ab4:	f241 2425 	movw	r4, #4645	; 0x1225
   81ab8:	f2c0 0408 	movt	r4, #8
   81abc:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestFailures));
   81abe:	6930      	ldr	r0, [r6, #16]
   81ac0:	47a8      	blx	r5
    UnityPrint(UnityStrResultsFailures);
   81ac2:	f646 708c 	movw	r0, #28556	; 0x6f8c
   81ac6:	f2c0 0008 	movt	r0, #8
   81aca:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestIgnores));
   81acc:	6970      	ldr	r0, [r6, #20]
   81ace:	47a8      	blx	r5
    UnityPrint(UnityStrResultsIgnored);
   81ad0:	f646 7098 	movw	r0, #28568	; 0x6f98
   81ad4:	f2c0 0008 	movt	r0, #8
   81ad8:	47a0      	blx	r4
    UNITY_PRINT_EOL;
   81ada:	f240 0310 	movw	r3, #16
   81ade:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81ae2:	6818      	ldr	r0, [r3, #0]
   81ae4:	6882      	ldr	r2, [r0, #8]
   81ae6:	6891      	ldr	r1, [r2, #8]
   81ae8:	f101 33ff 	add.w	r3, r1, #4294967295
   81aec:	6093      	str	r3, [r2, #8]
   81aee:	2b00      	cmp	r3, #0
   81af0:	da26      	bge.n	81b40 <UnityEnd+0x1c4>
   81af2:	6882      	ldr	r2, [r0, #8]
   81af4:	6891      	ldr	r1, [r2, #8]
   81af6:	6993      	ldr	r3, [r2, #24]
   81af8:	4299      	cmp	r1, r3
   81afa:	db19      	blt.n	81b30 <UnityEnd+0x1b4>
   81afc:	6810      	ldr	r0, [r2, #0]
   81afe:	f04f 020a 	mov.w	r2, #10
   81b02:	7002      	strb	r2, [r0, #0]
   81b04:	f240 0110 	movw	r1, #16
   81b08:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81b0c:	6808      	ldr	r0, [r1, #0]
   81b0e:	6882      	ldr	r2, [r0, #8]
   81b10:	6813      	ldr	r3, [r2, #0]
   81b12:	7819      	ldrb	r1, [r3, #0]
   81b14:	290a      	cmp	r1, #10
   81b16:	d003      	beq.n	81b20 <UnityEnd+0x1a4>
   81b18:	f103 0301 	add.w	r3, r3, #1
   81b1c:	6013      	str	r3, [r2, #0]
   81b1e:	e01e      	b.n	81b5e <UnityEnd+0x1e2>
   81b20:	f04f 010a 	mov.w	r1, #10
   81b24:	f245 13f1 	movw	r3, #20977	; 0x51f1
   81b28:	f2c0 0308 	movt	r3, #8
   81b2c:	4798      	blx	r3
   81b2e:	e016      	b.n	81b5e <UnityEnd+0x1e2>
   81b30:	f04f 010a 	mov.w	r1, #10
   81b34:	f245 13f1 	movw	r3, #20977	; 0x51f1
   81b38:	f2c0 0308 	movt	r3, #8
   81b3c:	4798      	blx	r3
   81b3e:	e00e      	b.n	81b5e <UnityEnd+0x1e2>
   81b40:	6880      	ldr	r0, [r0, #8]
   81b42:	6801      	ldr	r1, [r0, #0]
   81b44:	f04f 020a 	mov.w	r2, #10
   81b48:	700a      	strb	r2, [r1, #0]
   81b4a:	f240 0310 	movw	r3, #16
   81b4e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81b52:	6818      	ldr	r0, [r3, #0]
   81b54:	6881      	ldr	r1, [r0, #8]
   81b56:	680a      	ldr	r2, [r1, #0]
   81b58:	f102 0201 	add.w	r2, r2, #1
   81b5c:	600a      	str	r2, [r1, #0]
    if (Unity.TestFailures == 0U)
   81b5e:	f648 402c 	movw	r0, #35884	; 0x8c2c
   81b62:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81b66:	6902      	ldr	r2, [r0, #16]
   81b68:	b92a      	cbnz	r2, 81b76 <UnityEnd+0x1fa>
    {
        UnityPrintOk();
   81b6a:	f241 734d 	movw	r3, #5965	; 0x174d
   81b6e:	f2c0 0308 	movt	r3, #8
   81b72:	4798      	blx	r3
   81b74:	e004      	b.n	81b80 <UnityEnd+0x204>
    }
    else
    {
        UnityPrintFail();
   81b76:	f241 7135 	movw	r1, #5941	; 0x1735
   81b7a:	f2c0 0108 	movt	r1, #8
   81b7e:	4788      	blx	r1
    }
    UNITY_PRINT_EOL;
   81b80:	f240 0010 	movw	r0, #16
   81b84:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81b88:	6800      	ldr	r0, [r0, #0]
   81b8a:	6882      	ldr	r2, [r0, #8]
   81b8c:	6891      	ldr	r1, [r2, #8]
   81b8e:	f101 33ff 	add.w	r3, r1, #4294967295
   81b92:	6093      	str	r3, [r2, #8]
   81b94:	2b00      	cmp	r3, #0
   81b96:	da26      	bge.n	81be6 <UnityEnd+0x26a>
   81b98:	6882      	ldr	r2, [r0, #8]
   81b9a:	6891      	ldr	r1, [r2, #8]
   81b9c:	6993      	ldr	r3, [r2, #24]
   81b9e:	4299      	cmp	r1, r3
   81ba0:	db19      	blt.n	81bd6 <UnityEnd+0x25a>
   81ba2:	6810      	ldr	r0, [r2, #0]
   81ba4:	f04f 020a 	mov.w	r2, #10
   81ba8:	7002      	strb	r2, [r0, #0]
   81baa:	f240 0110 	movw	r1, #16
   81bae:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81bb2:	6808      	ldr	r0, [r1, #0]
   81bb4:	6882      	ldr	r2, [r0, #8]
   81bb6:	6813      	ldr	r3, [r2, #0]
   81bb8:	7819      	ldrb	r1, [r3, #0]
   81bba:	290a      	cmp	r1, #10
   81bbc:	d003      	beq.n	81bc6 <UnityEnd+0x24a>
   81bbe:	f103 0301 	add.w	r3, r3, #1
   81bc2:	6013      	str	r3, [r2, #0]
   81bc4:	e01e      	b.n	81c04 <UnityEnd+0x288>
   81bc6:	f04f 010a 	mov.w	r1, #10
   81bca:	f245 13f1 	movw	r3, #20977	; 0x51f1
   81bce:	f2c0 0308 	movt	r3, #8
   81bd2:	4798      	blx	r3
   81bd4:	e016      	b.n	81c04 <UnityEnd+0x288>
   81bd6:	f04f 010a 	mov.w	r1, #10
   81bda:	f245 13f1 	movw	r3, #20977	; 0x51f1
   81bde:	f2c0 0308 	movt	r3, #8
   81be2:	4798      	blx	r3
   81be4:	e00e      	b.n	81c04 <UnityEnd+0x288>
   81be6:	6880      	ldr	r0, [r0, #8]
   81be8:	6801      	ldr	r1, [r0, #0]
   81bea:	f04f 020a 	mov.w	r2, #10
   81bee:	700a      	strb	r2, [r1, #0]
   81bf0:	f240 0310 	movw	r3, #16
   81bf4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81bf8:	6818      	ldr	r0, [r3, #0]
   81bfa:	6881      	ldr	r1, [r0, #8]
   81bfc:	680a      	ldr	r2, [r1, #0]
   81bfe:	f102 0201 	add.w	r2, r2, #1
   81c02:	600a      	str	r2, [r1, #0]
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
}
   81c04:	f648 402c 	movw	r0, #35884	; 0x8c2c
   81c08:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81c0c:	6900      	ldr	r0, [r0, #16]
   81c0e:	bd70      	pop	{r4, r5, r6, pc}

00081c10 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   81c10:	f100 0308 	add.w	r3, r0, #8
   81c14:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   81c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81c1a:	8102      	strh	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   81c1c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   81c1e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   81c20:	f04f 0100 	mov.w	r1, #0
   81c24:	6001      	str	r1, [r0, #0]
   81c26:	4770      	bx	lr

00081c28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   81c28:	f04f 0300 	mov.w	r3, #0
   81c2c:	6103      	str	r3, [r0, #16]
   81c2e:	4770      	bx	lr

00081c30 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   81c30:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   81c32:	685a      	ldr	r2, [r3, #4]
   81c34:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   81c36:	6842      	ldr	r2, [r0, #4]
   81c38:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   81c3a:	685a      	ldr	r2, [r3, #4]
   81c3c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   81c3e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   81c40:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   81c42:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81c44:	6801      	ldr	r1, [r0, #0]
   81c46:	f101 0101 	add.w	r1, r1, #1
   81c4a:	6001      	str	r1, [r0, #0]
   81c4c:	4770      	bx	lr
   81c4e:	bf00      	nop

00081c50 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   81c50:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   81c52:	880c      	ldrh	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   81c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81c58:	429c      	cmp	r4, r3
   81c5a:	d101      	bne.n	81c60 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   81c5c:	6903      	ldr	r3, [r0, #16]
   81c5e:	e00c      	b.n	81c7a <vListInsert+0x2a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   81c60:	f100 0308 	add.w	r3, r0, #8
   81c64:	68c2      	ldr	r2, [r0, #12]
   81c66:	8812      	ldrh	r2, [r2, #0]
   81c68:	b292      	uxth	r2, r2
   81c6a:	4294      	cmp	r4, r2
   81c6c:	d305      	bcc.n	81c7a <vListInsert+0x2a>
   81c6e:	685b      	ldr	r3, [r3, #4]
   81c70:	685a      	ldr	r2, [r3, #4]
   81c72:	8812      	ldrh	r2, [r2, #0]
   81c74:	b292      	uxth	r2, r2
   81c76:	4294      	cmp	r4, r2
   81c78:	d2f9      	bcs.n	81c6e <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   81c7a:	685a      	ldr	r2, [r3, #4]
   81c7c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   81c7e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   81c80:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   81c82:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   81c84:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81c86:	6801      	ldr	r1, [r0, #0]
   81c88:	f101 0101 	add.w	r1, r1, #1
   81c8c:	6001      	str	r1, [r0, #0]
}
   81c8e:	bc10      	pop	{r4}
   81c90:	4770      	bx	lr
   81c92:	bf00      	nop

00081c94 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   81c94:	6843      	ldr	r3, [r0, #4]
   81c96:	6882      	ldr	r2, [r0, #8]
   81c98:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   81c9a:	6881      	ldr	r1, [r0, #8]
   81c9c:	6843      	ldr	r3, [r0, #4]
   81c9e:	604b      	str	r3, [r1, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   81ca0:	6901      	ldr	r1, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   81ca2:	684a      	ldr	r2, [r1, #4]
   81ca4:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   81ca6:	bf04      	itt	eq
   81ca8:	6882      	ldreq	r2, [r0, #8]
   81caa:	604a      	streq	r2, [r1, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   81cac:	f04f 0300 	mov.w	r3, #0
   81cb0:	6103      	str	r3, [r0, #16]
	( pxList->uxNumberOfItems )--;
   81cb2:	6808      	ldr	r0, [r1, #0]
   81cb4:	f100 32ff 	add.w	r2, r0, #4294967295
   81cb8:	600a      	str	r2, [r1, #0]

	return pxList->uxNumberOfItems;
   81cba:	6808      	ldr	r0, [r1, #0]
}
   81cbc:	4770      	bx	lr
   81cbe:	bf00      	nop

00081cc0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   81cc0:	4803      	ldr	r0, [pc, #12]	; (81cd0 <prvPortStartFirstTask+0x10>)
   81cc2:	6800      	ldr	r0, [r0, #0]
   81cc4:	6800      	ldr	r0, [r0, #0]
   81cc6:	f380 8808 	msr	MSP, r0
   81cca:	b662      	cpsie	i
   81ccc:	df00      	svc	0
   81cce:	bf00      	nop
   81cd0:	e000ed08 	.word	0xe000ed08

00081cd4 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   81cd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   81cd8:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   81cdc:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   81ce0:	f04f 0100 	mov.w	r1, #0
   81ce4:	f840 1c0c 	str.w	r1, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   81ce8:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   81cec:	f1a0 0040 	sub.w	r0, r0, #64	; 0x40
   81cf0:	4770      	bx	lr
   81cf2:	bf00      	nop

00081cf4 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   81cf4:	4b06      	ldr	r3, [pc, #24]	; (81d10 <pxCurrentTCBConst2>)
   81cf6:	6819      	ldr	r1, [r3, #0]
   81cf8:	6808      	ldr	r0, [r1, #0]
   81cfa:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81cfe:	f380 8809 	msr	PSP, r0
   81d02:	f04f 0000 	mov.w	r0, #0
   81d06:	f380 8811 	msr	BASEPRI, r0
   81d0a:	f04e 0e0d 	orr.w	lr, lr, #13
   81d0e:	4770      	bx	lr

00081d10 <pxCurrentTCBConst2>:
   81d10:	20078af8 	.word	0x20078af8

00081d14 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81d14:	f64e 5304 	movw	r3, #60676	; 0xed04
   81d18:	f2ce 0300 	movt	r3, #57344	; 0xe000
   81d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81d20:	601a      	str	r2, [r3, #0]
   81d22:	4770      	bx	lr

00081d24 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   81d24:	f3ef 8011 	mrs	r0, BASEPRI
   81d28:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   81d2c:	f381 8811 	msr	BASEPRI, r1
   81d30:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   81d32:	f04f 0000 	mov.w	r0, #0
   81d36:	bf00      	nop

00081d38 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   81d38:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   81d3a:	f641 5325 	movw	r3, #7461	; 0x1d25
   81d3e:	f2c0 0308 	movt	r3, #8
   81d42:	4798      	blx	r3
	uxCriticalNesting++;
   81d44:	f240 0000 	movw	r0, #0
   81d48:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81d4c:	6802      	ldr	r2, [r0, #0]
   81d4e:	f102 0201 	add.w	r2, r2, #1
   81d52:	6002      	str	r2, [r0, #0]
   81d54:	bd08      	pop	{r3, pc}
   81d56:	bf00      	nop

00081d58 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   81d58:	f380 8811 	msr	BASEPRI, r0
   81d5c:	4770      	bx	lr
   81d5e:	bf00      	nop

00081d60 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   81d60:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   81d62:	f240 0200 	movw	r2, #0
   81d66:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81d6a:	6813      	ldr	r3, [r2, #0]
   81d6c:	f103 30ff 	add.w	r0, r3, #4294967295
   81d70:	6010      	str	r0, [r2, #0]
	if( uxCriticalNesting == 0 )
   81d72:	b930      	cbnz	r0, 81d82 <vPortExitCritical+0x22>
	{
		portENABLE_INTERRUPTS();
   81d74:	f04f 0000 	mov.w	r0, #0
   81d78:	f641 5159 	movw	r1, #7513	; 0x1d59
   81d7c:	f2c0 0108 	movt	r1, #8
   81d80:	4788      	blx	r1
   81d82:	bd08      	pop	{r3, pc}

00081d84 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   81d84:	f3ef 8009 	mrs	r0, PSP
   81d88:	4b0c      	ldr	r3, [pc, #48]	; (81dbc <pxCurrentTCBConst>)
   81d8a:	681a      	ldr	r2, [r3, #0]
   81d8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81d90:	6010      	str	r0, [r2, #0]
   81d92:	e92d 4008 	stmdb	sp!, {r3, lr}
   81d96:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   81d9a:	f380 8811 	msr	BASEPRI, r0
   81d9e:	f001 f89b 	bl	82ed8 <vTaskSwitchContext>
   81da2:	f04f 0000 	mov.w	r0, #0
   81da6:	f380 8811 	msr	BASEPRI, r0
   81daa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   81dae:	6819      	ldr	r1, [r3, #0]
   81db0:	6808      	ldr	r0, [r1, #0]
   81db2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81db6:	f380 8809 	msr	PSP, r0
   81dba:	4770      	bx	lr

00081dbc <pxCurrentTCBConst>:
   81dbc:	20078af8 	.word	0x20078af8

00081dc0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   81dc0:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81dc2:	f64e 5304 	movw	r3, #60676	; 0xed04
   81dc6:	f2ce 0300 	movt	r3, #57344	; 0xe000
   81dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81dce:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   81dd0:	f641 5025 	movw	r0, #7461	; 0x1d25
   81dd4:	f2c0 0008 	movt	r0, #8
   81dd8:	4780      	blx	r0
	{
		vTaskIncrementTick();
   81dda:	f642 2195 	movw	r1, #10901	; 0x2a95
   81dde:	f2c0 0108 	movt	r1, #8
   81de2:	4788      	blx	r1
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   81de4:	f04f 0000 	mov.w	r0, #0
   81de8:	f641 5359 	movw	r3, #7513	; 0x1d59
   81dec:	f2c0 0308 	movt	r3, #8
   81df0:	4798      	blx	r3
   81df2:	bd08      	pop	{r3, pc}

00081df4 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   81df4:	f24e 0314 	movw	r3, #57364	; 0xe014
   81df8:	f2ce 0300 	movt	r3, #57344	; 0xe000
   81dfc:	f644 021f 	movw	r2, #18463	; 0x481f
   81e00:	f2c0 0201 	movt	r2, #1
   81e04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   81e06:	f24e 0010 	movw	r0, #57360	; 0xe010
   81e0a:	f2ce 0000 	movt	r0, #57344	; 0xe000
   81e0e:	f04f 0107 	mov.w	r1, #7
   81e12:	6001      	str	r1, [r0, #0]
   81e14:	4770      	bx	lr
   81e16:	bf00      	nop

00081e18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   81e18:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   81e1a:	f64e 5320 	movw	r3, #60704	; 0xed20
   81e1e:	f2ce 0300 	movt	r3, #57344	; 0xe000
   81e22:	681a      	ldr	r2, [r3, #0]
   81e24:	f442 0070 	orr.w	r0, r2, #15728640	; 0xf00000
   81e28:	6018      	str	r0, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   81e2a:	6819      	ldr	r1, [r3, #0]
   81e2c:	f041 4470 	orr.w	r4, r1, #4026531840	; 0xf0000000
   81e30:	601c      	str	r4, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   81e32:	f641 53f5 	movw	r3, #7669	; 0x1df5
   81e36:	f2c0 0308 	movt	r3, #8
   81e3a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   81e3c:	f04f 0400 	mov.w	r4, #0
   81e40:	f240 0200 	movw	r2, #0
   81e44:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81e48:	6014      	str	r4, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   81e4a:	f641 40c1 	movw	r0, #7361	; 0x1cc1
   81e4e:	f2c0 0008 	movt	r0, #8
   81e52:	4780      	blx	r0

	/* Should not get here! */
	return 0;
}
   81e54:	4620      	mov	r0, r4
   81e56:	bd10      	pop	{r4, pc}

00081e58 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   81e58:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   81e5a:	f648 12d4 	movw	r2, #35284	; 0x89d4
   81e5e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81e62:	e000      	b.n	81e66 <prvInsertBlockIntoFreeList+0xe>
   81e64:	461a      	mov	r2, r3
   81e66:	6813      	ldr	r3, [r2, #0]
   81e68:	4283      	cmp	r3, r0
   81e6a:	d3fb      	bcc.n	81e64 <prvInsertBlockIntoFreeList+0xc>
   81e6c:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   81e6e:	6854      	ldr	r4, [r2, #4]
   81e70:	1915      	adds	r5, r2, r4
   81e72:	4285      	cmp	r5, r0
   81e74:	d103      	bne.n	81e7e <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   81e76:	6868      	ldr	r0, [r5, #4]
   81e78:	1904      	adds	r4, r0, r4
   81e7a:	6054      	str	r4, [r2, #4]
   81e7c:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   81e7e:	6842      	ldr	r2, [r0, #4]
   81e80:	1884      	adds	r4, r0, r2
   81e82:	42a3      	cmp	r3, r4
   81e84:	d10f      	bne.n	81ea6 <prvInsertBlockIntoFreeList+0x4e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   81e86:	f648 14d0 	movw	r4, #35280	; 0x89d0
   81e8a:	f2c2 0407 	movt	r4, #8199	; 0x2007
   81e8e:	6824      	ldr	r4, [r4, #0]
   81e90:	429c      	cmp	r4, r3
   81e92:	d006      	beq.n	81ea2 <prvInsertBlockIntoFreeList+0x4a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   81e94:	685b      	ldr	r3, [r3, #4]
   81e96:	189a      	adds	r2, r3, r2
   81e98:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   81e9a:	680b      	ldr	r3, [r1, #0]
   81e9c:	681a      	ldr	r2, [r3, #0]
   81e9e:	6002      	str	r2, [r0, #0]
   81ea0:	e002      	b.n	81ea8 <prvInsertBlockIntoFreeList+0x50>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   81ea2:	6003      	str	r3, [r0, #0]
   81ea4:	e000      	b.n	81ea8 <prvInsertBlockIntoFreeList+0x50>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   81ea6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   81ea8:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   81eaa:	bf18      	it	ne
   81eac:	6008      	strne	r0, [r1, #0]
	}
}
   81eae:	bc30      	pop	{r4, r5}
   81eb0:	4770      	bx	lr
   81eb2:	bf00      	nop

00081eb4 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   81eb4:	b538      	push	{r3, r4, r5, lr}
   81eb6:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   81eb8:	f642 2359 	movw	r3, #10841	; 0x2a59
   81ebc:	f2c0 0308 	movt	r3, #8
   81ec0:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   81ec2:	f648 10d0 	movw	r0, #35280	; 0x89d0
   81ec6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81eca:	6801      	ldr	r1, [r0, #0]
   81ecc:	bb11      	cbnz	r1, 81f14 <pvPortMalloc+0x60>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   81ece:	f648 12d4 	movw	r2, #35284	; 0x89d4
   81ed2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81ed6:	f640 13d0 	movw	r3, #2512	; 0x9d0
   81eda:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81ede:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   81ee0:	f04f 0100 	mov.w	r1, #0
   81ee4:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   81ee6:	f503 42ff 	add.w	r2, r3, #32640	; 0x7f80
   81eea:	f102 0070 	add.w	r0, r2, #112	; 0x70
   81eee:	f648 15d0 	movw	r5, #35280	; 0x89d0
   81ef2:	f2c2 0507 	movt	r5, #8199	; 0x2007
   81ef6:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   81ef8:	6751      	str	r1, [r2, #116]	; 0x74
	pxEnd->pxNextFreeBlock = NULL;
   81efa:	6711      	str	r1, [r2, #112]	; 0x70

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   81efc:	f647 71f0 	movw	r1, #32752	; 0x7ff0
   81f00:	6059      	str	r1, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   81f02:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   81f04:	f240 0304 	movw	r3, #4
   81f08:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81f0c:	681a      	ldr	r2, [r3, #0]
   81f0e:	f1a2 0210 	sub.w	r2, r2, #16
   81f12:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   81f14:	2c00      	cmp	r4, #0
   81f16:	d03c      	beq.n	81f92 <pvPortMalloc+0xde>
		{
			xWantedSize += heapSTRUCT_SIZE;
   81f18:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   81f1c:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   81f20:	bf1c      	itt	ne
   81f22:	f022 0207 	bicne.w	r2, r2, #7
   81f26:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   81f28:	f102 30ff 	add.w	r0, r2, #4294967295
   81f2c:	f647 75fe 	movw	r5, #32766	; 0x7ffe
   81f30:	42a8      	cmp	r0, r5
   81f32:	d831      	bhi.n	81f98 <pvPortMalloc+0xe4>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   81f34:	f648 11d4 	movw	r1, #35284	; 0x89d4
   81f38:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81f3c:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81f3e:	e001      	b.n	81f44 <pvPortMalloc+0x90>
   81f40:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   81f42:	4604      	mov	r4, r0
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81f44:	6863      	ldr	r3, [r4, #4]
   81f46:	429a      	cmp	r2, r3
   81f48:	d902      	bls.n	81f50 <pvPortMalloc+0x9c>
   81f4a:	6820      	ldr	r0, [r4, #0]
   81f4c:	2800      	cmp	r0, #0
   81f4e:	d1f7      	bne.n	81f40 <pvPortMalloc+0x8c>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   81f50:	f648 15d0 	movw	r5, #35280	; 0x89d0
   81f54:	f2c2 0507 	movt	r5, #8199	; 0x2007
   81f58:	682b      	ldr	r3, [r5, #0]
   81f5a:	429c      	cmp	r4, r3
   81f5c:	d01f      	beq.n	81f9e <pvPortMalloc+0xea>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   81f5e:	680d      	ldr	r5, [r1, #0]
   81f60:	f105 0510 	add.w	r5, r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   81f64:	6820      	ldr	r0, [r4, #0]
   81f66:	6008      	str	r0, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   81f68:	6861      	ldr	r1, [r4, #4]
   81f6a:	1a8b      	subs	r3, r1, r2
   81f6c:	2b20      	cmp	r3, #32
   81f6e:	d907      	bls.n	81f80 <pvPortMalloc+0xcc>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   81f70:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   81f72:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   81f74:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   81f76:	f641 6259 	movw	r2, #7769	; 0x1e59
   81f7a:	f2c0 0208 	movt	r2, #8
   81f7e:	4790      	blx	r2
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   81f80:	f240 0004 	movw	r0, #4
   81f84:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81f88:	6803      	ldr	r3, [r0, #0]
   81f8a:	6861      	ldr	r1, [r4, #4]
   81f8c:	1a5a      	subs	r2, r3, r1
   81f8e:	6002      	str	r2, [r0, #0]
   81f90:	e007      	b.n	81fa2 <pvPortMalloc+0xee>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   81f92:	f04f 0500 	mov.w	r5, #0
   81f96:	e004      	b.n	81fa2 <pvPortMalloc+0xee>
   81f98:	f04f 0500 	mov.w	r5, #0
   81f9c:	e001      	b.n	81fa2 <pvPortMalloc+0xee>
   81f9e:	f04f 0500 	mov.w	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   81fa2:	f642 4031 	movw	r0, #11313	; 0x2c31
   81fa6:	f2c0 0008 	movt	r0, #8
   81faa:	4780      	blx	r0
		}
	}
	#endif

	return pvReturn;
}
   81fac:	4628      	mov	r0, r5
   81fae:	bd38      	pop	{r3, r4, r5, pc}

00081fb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   81fb0:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   81fb2:	4604      	mov	r4, r0
   81fb4:	b1c8      	cbz	r0, 81fea <vPortFree+0x3a>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   81fb6:	f642 2359 	movw	r3, #10841	; 0x2a59
   81fba:	f2c0 0308 	movt	r3, #8
   81fbe:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   81fc0:	f240 0004 	movw	r0, #4
   81fc4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81fc8:	6801      	ldr	r1, [r0, #0]
   81fca:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   81fce:	188b      	adds	r3, r1, r2
   81fd0:	6003      	str	r3, [r0, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   81fd2:	f1a4 0010 	sub.w	r0, r4, #16
   81fd6:	f641 6159 	movw	r1, #7769	; 0x1e59
   81fda:	f2c0 0108 	movt	r1, #8
   81fde:	4788      	blx	r1
		}
		xTaskResumeAll();
   81fe0:	f642 4031 	movw	r0, #11313	; 0x2c31
   81fe4:	f2c0 0008 	movt	r0, #8
   81fe8:	4780      	blx	r0
   81fea:	bd10      	pop	{r4, pc}

00081fec <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   81fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81fee:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   81ff0:	f641 5339 	movw	r3, #7481	; 0x1d39
   81ff4:	f2c0 0308 	movt	r3, #8
   81ff8:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81ffa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   81ffc:	2800      	cmp	r0, #0
   81ffe:	dd1a      	ble.n	82036 <prvUnlockQueue+0x4a>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   82000:	6a61      	ldr	r1, [r4, #36]	; 0x24
   82002:	b919      	cbnz	r1, 8200c <prvUnlockQueue+0x20>
   82004:	e017      	b.n	82036 <prvUnlockQueue+0x4a>
   82006:	6a61      	ldr	r1, [r4, #36]	; 0x24
   82008:	b951      	cbnz	r1, 82020 <prvUnlockQueue+0x34>
   8200a:	e014      	b.n	82036 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8200c:	f104 0624 	add.w	r6, r4, #36	; 0x24
   82010:	f243 0569 	movw	r5, #12393	; 0x3069
   82014:	f2c0 0508 	movt	r5, #8
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   82018:	f243 17f5 	movw	r7, #12789	; 0x31f5
   8201c:	f2c0 0708 	movt	r7, #8
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   82020:	4630      	mov	r0, r6
   82022:	47a8      	blx	r5
   82024:	b100      	cbz	r0, 82028 <prvUnlockQueue+0x3c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   82026:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   82028:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   8202a:	f102 33ff 	add.w	r3, r2, #4294967295
   8202e:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   82030:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   82032:	2800      	cmp	r0, #0
   82034:	dce7      	bgt.n	82006 <prvUnlockQueue+0x1a>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   82036:	f04f 32ff 	mov.w	r2, #4294967295
   8203a:	64a2      	str	r2, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   8203c:	f641 5361 	movw	r3, #7521	; 0x1d61
   82040:	f2c0 0308 	movt	r3, #8
   82044:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   82046:	f641 5039 	movw	r0, #7481	; 0x1d39
   8204a:	f2c0 0008 	movt	r0, #8
   8204e:	4780      	blx	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   82050:	6c61      	ldr	r1, [r4, #68]	; 0x44
   82052:	2900      	cmp	r1, #0
   82054:	dd1a      	ble.n	8208c <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   82056:	6922      	ldr	r2, [r4, #16]
   82058:	b91a      	cbnz	r2, 82062 <prvUnlockQueue+0x76>
   8205a:	e017      	b.n	8208c <prvUnlockQueue+0xa0>
   8205c:	6922      	ldr	r2, [r4, #16]
   8205e:	b952      	cbnz	r2, 82076 <prvUnlockQueue+0x8a>
   82060:	e014      	b.n	8208c <prvUnlockQueue+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   82062:	f104 0610 	add.w	r6, r4, #16
   82066:	f243 0569 	movw	r5, #12393	; 0x3069
   8206a:	f2c0 0508 	movt	r5, #8
				{
					vTaskMissedYield();
   8206e:	f243 17f5 	movw	r7, #12789	; 0x31f5
   82072:	f2c0 0708 	movt	r7, #8
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   82076:	4630      	mov	r0, r6
   82078:	47a8      	blx	r5
   8207a:	b100      	cbz	r0, 8207e <prvUnlockQueue+0x92>
				{
					vTaskMissedYield();
   8207c:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   8207e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   82080:	f103 30ff 	add.w	r0, r3, #4294967295
   82084:	6460      	str	r0, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   82086:	6c61      	ldr	r1, [r4, #68]	; 0x44
   82088:	2900      	cmp	r1, #0
   8208a:	dce7      	bgt.n	8205c <prvUnlockQueue+0x70>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   8208c:	f04f 33ff 	mov.w	r3, #4294967295
   82090:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   82092:	f641 5061 	movw	r0, #7521	; 0x1d61
   82096:	f2c0 0008 	movt	r0, #8
   8209a:	4780      	blx	r0
   8209c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8209e:	bf00      	nop

000820a0 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   820a0:	b538      	push	{r3, r4, r5, lr}
   820a2:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   820a4:	6805      	ldr	r5, [r0, #0]
   820a6:	b175      	cbz	r5, 820c6 <prvCopyDataFromQueue+0x26>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   820a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
   820aa:	68c4      	ldr	r4, [r0, #12]
   820ac:	18a4      	adds	r4, r4, r2
   820ae:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   820b0:	6840      	ldr	r0, [r0, #4]
   820b2:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   820b4:	bf28      	it	cs
   820b6:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   820b8:	4608      	mov	r0, r1
   820ba:	68d9      	ldr	r1, [r3, #12]
   820bc:	f244 7365 	movw	r3, #18277	; 0x4765
   820c0:	f2c0 0308 	movt	r3, #8
   820c4:	4798      	blx	r3
   820c6:	bd38      	pop	{r3, r4, r5, pc}

000820c8 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   820c8:	b510      	push	{r4, lr}
   820ca:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   820cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
   820ce:	b963      	cbnz	r3, 820ea <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   820d0:	6801      	ldr	r1, [r0, #0]
   820d2:	2900      	cmp	r1, #0
   820d4:	d12e      	bne.n	82134 <prvCopyDataToQueue+0x6c>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   820d6:	6840      	ldr	r0, [r0, #4]
   820d8:	f243 23e1 	movw	r3, #13025	; 0x32e1
   820dc:	f2c0 0308 	movt	r3, #8
   820e0:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   820e2:	f04f 0000 	mov.w	r0, #0
   820e6:	6060      	str	r0, [r4, #4]
   820e8:	e024      	b.n	82134 <prvCopyDataToQueue+0x6c>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   820ea:	b982      	cbnz	r2, 8210e <prvCopyDataToQueue+0x46>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   820ec:	6880      	ldr	r0, [r0, #8]
   820ee:	461a      	mov	r2, r3
   820f0:	f244 7365 	movw	r3, #18277	; 0x4765
   820f4:	f2c0 0308 	movt	r3, #8
   820f8:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   820fa:	68a2      	ldr	r2, [r4, #8]
   820fc:	6c21      	ldr	r1, [r4, #64]	; 0x40
   820fe:	1850      	adds	r0, r2, r1
   82100:	60a0      	str	r0, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   82102:	6863      	ldr	r3, [r4, #4]
   82104:	4298      	cmp	r0, r3
   82106:	d315      	bcc.n	82134 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   82108:	6822      	ldr	r2, [r4, #0]
   8210a:	60a2      	str	r2, [r4, #8]
   8210c:	e012      	b.n	82134 <prvCopyDataToQueue+0x6c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   8210e:	68c0      	ldr	r0, [r0, #12]
   82110:	461a      	mov	r2, r3
   82112:	f244 7365 	movw	r3, #18277	; 0x4765
   82116:	f2c0 0308 	movt	r3, #8
   8211a:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   8211c:	6c22      	ldr	r2, [r4, #64]	; 0x40
   8211e:	f1c2 0000 	rsb	r0, r2, #0
   82122:	68e1      	ldr	r1, [r4, #12]
   82124:	180b      	adds	r3, r1, r0
   82126:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   82128:	6822      	ldr	r2, [r4, #0]
   8212a:	4293      	cmp	r3, r2
   8212c:	d202      	bcs.n	82134 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   8212e:	6861      	ldr	r1, [r4, #4]
   82130:	1808      	adds	r0, r1, r0
   82132:	60e0      	str	r0, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   82134:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   82136:	f102 0201 	add.w	r2, r2, #1
   8213a:	63a2      	str	r2, [r4, #56]	; 0x38
   8213c:	bd10      	pop	{r4, pc}
   8213e:	bf00      	nop

00082140 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   82140:	b538      	push	{r3, r4, r5, lr}
   82142:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   82144:	4604      	mov	r4, r0
   82146:	b930      	cbnz	r0, 82156 <xQueueGenericReset+0x16>
   82148:	f641 5425 	movw	r4, #7461	; 0x1d25
   8214c:	f2c0 0408 	movt	r4, #8
   82150:	47a0      	blx	r4
   82152:	bf00      	nop
   82154:	e7fd      	b.n	82152 <xQueueGenericReset+0x12>

	taskENTER_CRITICAL();
   82156:	f641 5339 	movw	r3, #7481	; 0x1d39
   8215a:	f2c0 0308 	movt	r3, #8
   8215e:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   82160:	6823      	ldr	r3, [r4, #0]
   82162:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   82164:	6c22      	ldr	r2, [r4, #64]	; 0x40
   82166:	fb00 3102 	mla	r1, r0, r2, r3
   8216a:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   8216c:	f04f 0100 	mov.w	r1, #0
   82170:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   82172:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   82174:	f100 30ff 	add.w	r0, r0, #4294967295
   82178:	fb02 3300 	mla	r3, r2, r0, r3
   8217c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   8217e:	f04f 32ff 	mov.w	r2, #4294967295
   82182:	6462      	str	r2, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   82184:	64a2      	str	r2, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   82186:	b985      	cbnz	r5, 821aa <xQueueGenericReset+0x6a>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   82188:	6921      	ldr	r1, [r4, #16]
   8218a:	b1c1      	cbz	r1, 821be <xQueueGenericReset+0x7e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   8218c:	f104 0010 	add.w	r0, r4, #16
   82190:	f243 0369 	movw	r3, #12393	; 0x3069
   82194:	f2c0 0308 	movt	r3, #8
   82198:	4798      	blx	r3
   8219a:	2801      	cmp	r0, #1
   8219c:	d10f      	bne.n	821be <xQueueGenericReset+0x7e>
				{
					portYIELD_WITHIN_API();
   8219e:	f641 5015 	movw	r0, #7445	; 0x1d15
   821a2:	f2c0 0008 	movt	r0, #8
   821a6:	4780      	blx	r0
   821a8:	e009      	b.n	821be <xQueueGenericReset+0x7e>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   821aa:	f104 0010 	add.w	r0, r4, #16
   821ae:	f641 4511 	movw	r5, #7185	; 0x1c11
   821b2:	f2c0 0508 	movt	r5, #8
   821b6:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   821b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   821bc:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   821be:	f641 5261 	movw	r2, #7521	; 0x1d61
   821c2:	f2c0 0208 	movt	r2, #8
   821c6:	4790      	blx	r2

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   821c8:	f04f 0001 	mov.w	r0, #1
   821cc:	bd38      	pop	{r3, r4, r5, pc}
   821ce:	bf00      	nop

000821d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   821d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   821d2:	460d      	mov	r5, r1
   821d4:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   821d6:	4606      	mov	r6, r0
   821d8:	b1e0      	cbz	r0, 82214 <xQueueGenericCreate+0x44>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   821da:	f04f 0050 	mov.w	r0, #80	; 0x50
   821de:	f641 63b5 	movw	r3, #7861	; 0x1eb5
   821e2:	f2c0 0308 	movt	r3, #8
   821e6:	4798      	blx	r3
		if( pxNewQueue != NULL )
   821e8:	4604      	mov	r4, r0
   821ea:	b198      	cbz	r0, 82214 <xQueueGenericCreate+0x44>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   821ec:	fb06 f005 	mul.w	r0, r6, r5

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   821f0:	f100 0001 	add.w	r0, r0, #1
   821f4:	f641 61b5 	movw	r1, #7861	; 0x1eb5
   821f8:	f2c0 0108 	movt	r1, #8
   821fc:	4788      	blx	r1
   821fe:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   82200:	b970      	cbnz	r0, 82220 <xQueueGenericCreate+0x50>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   82202:	4620      	mov	r0, r4
   82204:	f641 72b1 	movw	r2, #8113	; 0x1fb1
   82208:	f2c0 0208 	movt	r2, #8
   8220c:	4790      	blx	r2
   8220e:	e001      	b.n	82214 <xQueueGenericCreate+0x44>
			}
		}
	}

	configASSERT( xReturn );
   82210:	bf00      	nop
   82212:	e7fd      	b.n	82210 <xQueueGenericCreate+0x40>
   82214:	f641 5025 	movw	r0, #7461	; 0x1d25
   82218:	f2c0 0008 	movt	r0, #8
   8221c:	4780      	blx	r0
   8221e:	e7f7      	b.n	82210 <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   82220:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   82222:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   82224:	4620      	mov	r0, r4
   82226:	f04f 0101 	mov.w	r1, #1
   8222a:	f242 1341 	movw	r3, #8513	; 0x2141
   8222e:	f2c0 0308 	movt	r3, #8
   82232:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   82234:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   82238:	4620      	mov	r0, r4
   8223a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0008223c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   8223c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82240:	b085      	sub	sp, #20
   82242:	468a      	mov	sl, r1
   82244:	469b      	mov	fp, r3
   82246:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   8224a:	4604      	mov	r4, r0
   8224c:	b930      	cbnz	r0, 8225c <xQueueGenericSend+0x20>
   8224e:	f641 5425 	movw	r4, #7461	; 0x1d25
   82252:	f2c0 0408 	movt	r4, #8
   82256:	47a0      	blx	r4
   82258:	bf00      	nop
   8225a:	e7fd      	b.n	82258 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8225c:	b941      	cbnz	r1, 82270 <xQueueGenericSend+0x34>
   8225e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   82260:	b14b      	cbz	r3, 82276 <xQueueGenericSend+0x3a>
   82262:	f641 5025 	movw	r0, #7461	; 0x1d25
   82266:	f2c0 0008 	movt	r0, #8
   8226a:	4780      	blx	r0
   8226c:	bf00      	nop
   8226e:	e7fd      	b.n	8226c <xQueueGenericSend+0x30>
   82270:	f04f 0700 	mov.w	r7, #0
   82274:	e001      	b.n	8227a <xQueueGenericSend+0x3e>
   82276:	f04f 0700 	mov.w	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   8227a:	f641 5639 	movw	r6, #7481	; 0x1d39
   8227e:	f2c0 0608 	movt	r6, #8
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   82282:	f243 1111 	movw	r1, #12561	; 0x3111
   82286:	f2c0 0108 	movt	r1, #8
   8228a:	9100      	str	r1, [sp, #0]
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   8228c:	f641 5561 	movw	r5, #7521	; 0x1d61
   82290:	f2c0 0508 	movt	r5, #8
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   82294:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   82296:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   82298:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8229a:	429a      	cmp	r2, r3
   8229c:	d21f      	bcs.n	822de <xQueueGenericSend+0xa2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   8229e:	4620      	mov	r0, r4
   822a0:	4651      	mov	r1, sl
   822a2:	465a      	mov	r2, fp
   822a4:	f242 03c9 	movw	r3, #8393	; 0x20c9
   822a8:	f2c0 0308 	movt	r3, #8
   822ac:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   822ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
   822b0:	b169      	cbz	r1, 822ce <xQueueGenericSend+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   822b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   822b6:	f243 0269 	movw	r2, #12393	; 0x3069
   822ba:	f2c0 0208 	movt	r2, #8
   822be:	4790      	blx	r2
   822c0:	2801      	cmp	r0, #1
   822c2:	d104      	bne.n	822ce <xQueueGenericSend+0x92>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   822c4:	f641 5015 	movw	r0, #7445	; 0x1d15
   822c8:	f2c0 0008 	movt	r0, #8
   822cc:	4780      	blx	r0
					}
				}

				taskEXIT_CRITICAL();
   822ce:	f641 5361 	movw	r3, #7521	; 0x1d61
   822d2:	f2c0 0308 	movt	r3, #8
   822d6:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   822d8:	f04f 0001 	mov.w	r0, #1
   822dc:	e06a      	b.n	823b4 <xQueueGenericSend+0x178>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   822de:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   822e2:	b938      	cbnz	r0, 822f4 <xQueueGenericSend+0xb8>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   822e4:	f641 5361 	movw	r3, #7521	; 0x1d61
   822e8:	f2c0 0308 	movt	r3, #8
   822ec:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   822ee:	f04f 0000 	mov.w	r0, #0
   822f2:	e05f      	b.n	823b4 <xQueueGenericSend+0x178>
				}
				else if( xEntryTimeSet == pdFALSE )
   822f4:	b927      	cbnz	r7, 82300 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   822f6:	a802      	add	r0, sp, #8
   822f8:	9f00      	ldr	r7, [sp, #0]
   822fa:	47b8      	blx	r7
					xEntryTimeSet = pdTRUE;
   822fc:	f04f 0701 	mov.w	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   82300:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   82302:	f642 2159 	movw	r1, #10841	; 0x2a59
   82306:	f2c0 0108 	movt	r1, #8
   8230a:	4788      	blx	r1
		prvLockQueue( pxQueue );
   8230c:	47b0      	blx	r6
   8230e:	6c62      	ldr	r2, [r4, #68]	; 0x44
   82310:	f1b2 3fff 	cmp.w	r2, #4294967295
   82314:	bf04      	itt	eq
   82316:	2200      	moveq	r2, #0
   82318:	6462      	streq	r2, [r4, #68]	; 0x44
   8231a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8231c:	f1b3 3fff 	cmp.w	r3, #4294967295
   82320:	bf04      	itt	eq
   82322:	2300      	moveq	r3, #0
   82324:	64a3      	streq	r3, [r4, #72]	; 0x48
   82326:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   82328:	a802      	add	r0, sp, #8
   8232a:	f10d 0106 	add.w	r1, sp, #6
   8232e:	f243 1241 	movw	r2, #12609	; 0x3141
   82332:	f2c0 0208 	movt	r2, #8
   82336:	4790      	blx	r2
   82338:	bb78      	cbnz	r0, 8239a <xQueueGenericSend+0x15e>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   8233a:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   8233c:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   82340:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   82344:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   82346:	45c1      	cmp	r9, r8
   82348:	d11b      	bne.n	82382 <xQueueGenericSend+0x146>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   8234a:	f104 0010 	add.w	r0, r4, #16
   8234e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   82352:	f642 7399 	movw	r3, #12185	; 0x2f99
   82356:	f2c0 0308 	movt	r3, #8
   8235a:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   8235c:	4620      	mov	r0, r4
   8235e:	f641 71ed 	movw	r1, #8173	; 0x1fed
   82362:	f2c0 0108 	movt	r1, #8
   82366:	4788      	blx	r1
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   82368:	f642 4031 	movw	r0, #11313	; 0x2c31
   8236c:	f2c0 0008 	movt	r0, #8
   82370:	4780      	blx	r0
   82372:	2800      	cmp	r0, #0
   82374:	d18e      	bne.n	82294 <xQueueGenericSend+0x58>
				{
					portYIELD_WITHIN_API();
   82376:	f641 5215 	movw	r2, #7445	; 0x1d15
   8237a:	f2c0 0208 	movt	r2, #8
   8237e:	4790      	blx	r2
   82380:	e788      	b.n	82294 <xQueueGenericSend+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   82382:	4620      	mov	r0, r4
   82384:	f641 73ed 	movw	r3, #8173	; 0x1fed
   82388:	f2c0 0308 	movt	r3, #8
   8238c:	4798      	blx	r3
				( void ) xTaskResumeAll();
   8238e:	f642 4231 	movw	r2, #11313	; 0x2c31
   82392:	f2c0 0208 	movt	r2, #8
   82396:	4790      	blx	r2
   82398:	e77c      	b.n	82294 <xQueueGenericSend+0x58>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   8239a:	4620      	mov	r0, r4
   8239c:	f641 71ed 	movw	r1, #8173	; 0x1fed
   823a0:	f2c0 0108 	movt	r1, #8
   823a4:	4788      	blx	r1
			( void ) xTaskResumeAll();
   823a6:	f642 4031 	movw	r0, #11313	; 0x2c31
   823aa:	f2c0 0008 	movt	r0, #8
   823ae:	4780      	blx	r0

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   823b0:	f04f 0000 	mov.w	r0, #0
		}
	}
}
   823b4:	b005      	add	sp, #20
   823b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   823ba:	bf00      	nop

000823bc <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   823bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   823c0:	460e      	mov	r6, r1
   823c2:	4615      	mov	r5, r2
   823c4:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   823c6:	4604      	mov	r4, r0
   823c8:	b930      	cbnz	r0, 823d8 <xQueueGenericSendFromISR+0x1c>
   823ca:	f641 5525 	movw	r5, #7461	; 0x1d25
   823ce:	f2c0 0508 	movt	r5, #8
   823d2:	47a8      	blx	r5
   823d4:	bf00      	nop
   823d6:	e7fd      	b.n	823d4 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   823d8:	b941      	cbnz	r1, 823ec <xQueueGenericSendFromISR+0x30>
   823da:	6c03      	ldr	r3, [r0, #64]	; 0x40
   823dc:	b133      	cbz	r3, 823ec <xQueueGenericSendFromISR+0x30>
   823de:	f641 5025 	movw	r0, #7461	; 0x1d25
   823e2:	f2c0 0008 	movt	r0, #8
   823e6:	4780      	blx	r0
   823e8:	bf00      	nop
   823ea:	e7fd      	b.n	823e8 <xQueueGenericSendFromISR+0x2c>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   823ec:	f641 5125 	movw	r1, #7461	; 0x1d25
   823f0:	f2c0 0108 	movt	r1, #8
   823f4:	4788      	blx	r1
   823f6:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   823f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   823fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   823fc:	429a      	cmp	r2, r3
   823fe:	d221      	bcs.n	82444 <xQueueGenericSendFromISR+0x88>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   82400:	4620      	mov	r0, r4
   82402:	4631      	mov	r1, r6
   82404:	4642      	mov	r2, r8
   82406:	f242 03c9 	movw	r3, #8393	; 0x20c9
   8240a:	f2c0 0308 	movt	r3, #8
   8240e:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   82410:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   82412:	f1b0 3fff 	cmp.w	r0, #4294967295
   82416:	d10e      	bne.n	82436 <xQueueGenericSendFromISR+0x7a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   82418:	6a62      	ldr	r2, [r4, #36]	; 0x24
   8241a:	b1b2      	cbz	r2, 8244a <xQueueGenericSendFromISR+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8241c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   82420:	f243 0469 	movw	r4, #12393	; 0x3069
   82424:	f2c0 0408 	movt	r4, #8
   82428:	47a0      	blx	r4
   8242a:	b188      	cbz	r0, 82450 <xQueueGenericSendFromISR+0x94>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   8242c:	b19d      	cbz	r5, 82456 <xQueueGenericSendFromISR+0x9a>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   8242e:	f04f 0401 	mov.w	r4, #1
   82432:	602c      	str	r4, [r5, #0]
   82434:	e011      	b.n	8245a <xQueueGenericSendFromISR+0x9e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   82436:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   82438:	f101 0101 	add.w	r1, r1, #1
   8243c:	64a1      	str	r1, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   8243e:	f04f 0401 	mov.w	r4, #1
   82442:	e00a      	b.n	8245a <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   82444:	f04f 0400 	mov.w	r4, #0
   82448:	e007      	b.n	8245a <xQueueGenericSendFromISR+0x9e>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   8244a:	f04f 0401 	mov.w	r4, #1
   8244e:	e004      	b.n	8245a <xQueueGenericSendFromISR+0x9e>
   82450:	f04f 0401 	mov.w	r4, #1
   82454:	e001      	b.n	8245a <xQueueGenericSendFromISR+0x9e>
   82456:	f04f 0401 	mov.w	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   8245a:	4638      	mov	r0, r7
   8245c:	f641 5359 	movw	r3, #7513	; 0x1d59
   82460:	f2c0 0308 	movt	r3, #8
   82464:	4798      	blx	r3

	return xReturn;
}
   82466:	4620      	mov	r0, r4
   82468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0008246c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   8246c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82470:	b085      	sub	sp, #20
   82472:	4689      	mov	r9, r1
   82474:	469a      	mov	sl, r3
   82476:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   8247a:	4604      	mov	r4, r0
   8247c:	b930      	cbnz	r0, 8248c <xQueueGenericReceive+0x20>
   8247e:	f641 5425 	movw	r4, #7461	; 0x1d25
   82482:	f2c0 0408 	movt	r4, #8
   82486:	47a0      	blx	r4
   82488:	bf00      	nop
   8248a:	e7fd      	b.n	82488 <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8248c:	b941      	cbnz	r1, 824a0 <xQueueGenericReceive+0x34>
   8248e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   82490:	b14b      	cbz	r3, 824a6 <xQueueGenericReceive+0x3a>
   82492:	f641 5025 	movw	r0, #7461	; 0x1d25
   82496:	f2c0 0008 	movt	r0, #8
   8249a:	4780      	blx	r0
   8249c:	bf00      	nop
   8249e:	e7fd      	b.n	8249c <xQueueGenericReceive+0x30>
   824a0:	f04f 0700 	mov.w	r7, #0
   824a4:	e001      	b.n	824aa <xQueueGenericReceive+0x3e>
   824a6:	f04f 0700 	mov.w	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   824aa:	f641 5639 	movw	r6, #7481	; 0x1d39
   824ae:	f2c0 0608 	movt	r6, #8
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   824b2:	f243 1b11 	movw	fp, #12561	; 0x3111
   824b6:	f2c0 0b08 	movt	fp, #8
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   824ba:	f641 5561 	movw	r5, #7521	; 0x1d61
   824be:	f2c0 0508 	movt	r5, #8
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   824c2:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   824c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   824c6:	2900      	cmp	r1, #0
   824c8:	d03f      	beq.n	8254a <xQueueGenericReceive+0xde>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   824ca:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   824cc:	4620      	mov	r0, r4
   824ce:	4649      	mov	r1, r9
   824d0:	f242 03a1 	movw	r3, #8353	; 0x20a1
   824d4:	f2c0 0308 	movt	r3, #8
   824d8:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   824da:	f1ba 0f00 	cmp.w	sl, #0
   824de:	d11c      	bne.n	8251a <xQueueGenericReceive+0xae>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   824e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   824e2:	f103 30ff 	add.w	r0, r3, #4294967295
   824e6:	63a0      	str	r0, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   824e8:	6821      	ldr	r1, [r4, #0]
   824ea:	b929      	cbnz	r1, 824f8 <xQueueGenericReceive+0x8c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   824ec:	f243 2205 	movw	r2, #12805	; 0x3205
   824f0:	f2c0 0208 	movt	r2, #8
   824f4:	4790      	blx	r2
   824f6:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   824f8:	6923      	ldr	r3, [r4, #16]
   824fa:	b1f3      	cbz	r3, 8253a <xQueueGenericReceive+0xce>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   824fc:	f104 0010 	add.w	r0, r4, #16
   82500:	f243 0169 	movw	r1, #12393	; 0x3069
   82504:	f2c0 0108 	movt	r1, #8
   82508:	4788      	blx	r1
   8250a:	2801      	cmp	r0, #1
   8250c:	d115      	bne.n	8253a <xQueueGenericReceive+0xce>
						{
							portYIELD_WITHIN_API();
   8250e:	f641 5015 	movw	r0, #7445	; 0x1d15
   82512:	f2c0 0008 	movt	r0, #8
   82516:	4780      	blx	r0
   82518:	e00f      	b.n	8253a <xQueueGenericReceive+0xce>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   8251a:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8251c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   8251e:	b160      	cbz	r0, 8253a <xQueueGenericReceive+0xce>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   82520:	f104 0024 	add.w	r0, r4, #36	; 0x24
   82524:	f243 0169 	movw	r1, #12393	; 0x3069
   82528:	f2c0 0108 	movt	r1, #8
   8252c:	4788      	blx	r1
   8252e:	b120      	cbz	r0, 8253a <xQueueGenericReceive+0xce>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   82530:	f641 5215 	movw	r2, #7445	; 0x1d15
   82534:	f2c0 0208 	movt	r2, #8
   82538:	4790      	blx	r2
						}
					}
				}

				taskEXIT_CRITICAL();
   8253a:	f641 5261 	movw	r2, #7521	; 0x1d61
   8253e:	f2c0 0208 	movt	r2, #8
   82542:	4790      	blx	r2
				return pdPASS;
   82544:	f04f 0001 	mov.w	r0, #1
   82548:	e074      	b.n	82634 <xQueueGenericReceive+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   8254a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   8254e:	b93a      	cbnz	r2, 82560 <xQueueGenericReceive+0xf4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   82550:	f641 5261 	movw	r2, #7521	; 0x1d61
   82554:	f2c0 0208 	movt	r2, #8
   82558:	4790      	blx	r2
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   8255a:	f04f 0000 	mov.w	r0, #0
   8255e:	e069      	b.n	82634 <xQueueGenericReceive+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
   82560:	b91f      	cbnz	r7, 8256a <xQueueGenericReceive+0xfe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   82562:	a802      	add	r0, sp, #8
   82564:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   82566:	f04f 0701 	mov.w	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   8256a:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   8256c:	f642 2359 	movw	r3, #10841	; 0x2a59
   82570:	f2c0 0308 	movt	r3, #8
   82574:	4798      	blx	r3
		prvLockQueue( pxQueue );
   82576:	47b0      	blx	r6
   82578:	6c60      	ldr	r0, [r4, #68]	; 0x44
   8257a:	f1b0 3fff 	cmp.w	r0, #4294967295
   8257e:	bf04      	itt	eq
   82580:	2000      	moveq	r0, #0
   82582:	6460      	streq	r0, [r4, #68]	; 0x44
   82584:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   82586:	f1b1 3fff 	cmp.w	r1, #4294967295
   8258a:	bf04      	itt	eq
   8258c:	2100      	moveq	r1, #0
   8258e:	64a1      	streq	r1, [r4, #72]	; 0x48
   82590:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   82592:	a802      	add	r0, sp, #8
   82594:	f10d 0106 	add.w	r1, sp, #6
   82598:	f243 1241 	movw	r2, #12609	; 0x3141
   8259c:	f2c0 0208 	movt	r2, #8
   825a0:	4790      	blx	r2
   825a2:	2800      	cmp	r0, #0
   825a4:	d139      	bne.n	8261a <xQueueGenericReceive+0x1ae>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   825a6:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   825a8:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   825ac:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   825ae:	f1b8 0f00 	cmp.w	r8, #0
   825b2:	d126      	bne.n	82602 <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   825b4:	6823      	ldr	r3, [r4, #0]
   825b6:	b93b      	cbnz	r3, 825c8 <xQueueGenericReceive+0x15c>
					{
						portENTER_CRITICAL();
   825b8:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   825ba:	6860      	ldr	r0, [r4, #4]
   825bc:	f243 2139 	movw	r1, #12857	; 0x3239
   825c0:	f2c0 0108 	movt	r1, #8
   825c4:	4788      	blx	r1
						}
						portEXIT_CRITICAL();
   825c6:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   825c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   825cc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   825d0:	f642 7299 	movw	r2, #12185	; 0x2f99
   825d4:	f2c0 0208 	movt	r2, #8
   825d8:	4790      	blx	r2
				prvUnlockQueue( pxQueue );
   825da:	4620      	mov	r0, r4
   825dc:	f641 73ed 	movw	r3, #8173	; 0x1fed
   825e0:	f2c0 0308 	movt	r3, #8
   825e4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   825e6:	f642 4031 	movw	r0, #11313	; 0x2c31
   825ea:	f2c0 0008 	movt	r0, #8
   825ee:	4780      	blx	r0
   825f0:	2800      	cmp	r0, #0
   825f2:	f47f af66 	bne.w	824c2 <xQueueGenericReceive+0x56>
				{
					portYIELD_WITHIN_API();
   825f6:	f641 5115 	movw	r1, #7445	; 0x1d15
   825fa:	f2c0 0108 	movt	r1, #8
   825fe:	4788      	blx	r1
   82600:	e75f      	b.n	824c2 <xQueueGenericReceive+0x56>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   82602:	4620      	mov	r0, r4
   82604:	f641 71ed 	movw	r1, #8173	; 0x1fed
   82608:	f2c0 0108 	movt	r1, #8
   8260c:	4788      	blx	r1
				( void ) xTaskResumeAll();
   8260e:	f642 4231 	movw	r2, #11313	; 0x2c31
   82612:	f2c0 0208 	movt	r2, #8
   82616:	4790      	blx	r2
   82618:	e753      	b.n	824c2 <xQueueGenericReceive+0x56>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   8261a:	4620      	mov	r0, r4
   8261c:	f641 73ed 	movw	r3, #8173	; 0x1fed
   82620:	f2c0 0308 	movt	r3, #8
   82624:	4798      	blx	r3
			( void ) xTaskResumeAll();
   82626:	f642 4031 	movw	r0, #11313	; 0x2c31
   8262a:	f2c0 0008 	movt	r0, #8
   8262e:	4780      	blx	r0
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   82630:	f04f 0000 	mov.w	r0, #0
		}
	}
}
   82634:	b005      	add	sp, #20
   82636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8263a:	bf00      	nop

0008263c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   8263c:	b538      	push	{r3, r4, r5, lr}
   8263e:	4604      	mov	r4, r0
   82640:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   82642:	f641 5339 	movw	r3, #7481	; 0x1d39
   82646:	f2c0 0308 	movt	r3, #8
   8264a:	4798      	blx	r3
   8264c:	6c60      	ldr	r0, [r4, #68]	; 0x44
   8264e:	f1b0 3fff 	cmp.w	r0, #4294967295
   82652:	bf04      	itt	eq
   82654:	2000      	moveq	r0, #0
   82656:	6460      	streq	r0, [r4, #68]	; 0x44
   82658:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   8265a:	f1b1 3fff 	cmp.w	r1, #4294967295
   8265e:	bf04      	itt	eq
   82660:	2100      	moveq	r1, #0
   82662:	64a1      	streq	r1, [r4, #72]	; 0x48
   82664:	f641 5261 	movw	r2, #7521	; 0x1d61
   82668:	f2c0 0208 	movt	r2, #8
   8266c:	4790      	blx	r2
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   8266e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   82670:	b93b      	cbnz	r3, 82682 <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   82672:	f104 0024 	add.w	r0, r4, #36	; 0x24
   82676:	4629      	mov	r1, r5
   82678:	f243 0211 	movw	r2, #12305	; 0x3011
   8267c:	f2c0 0208 	movt	r2, #8
   82680:	4790      	blx	r2
		}
		prvUnlockQueue( pxQueue );
   82682:	4620      	mov	r0, r4
   82684:	f641 71ed 	movw	r1, #8173	; 0x1fed
   82688:	f2c0 0108 	movt	r1, #8
   8268c:	4788      	blx	r1
   8268e:	bd38      	pop	{r3, r4, r5, pc}

00082690 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   82690:	b510      	push	{r4, lr}
   82692:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   82694:	f648 23f8 	movw	r3, #35576	; 0x8af8
   82698:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8269c:	6818      	ldr	r0, [r3, #0]
   8269e:	8084      	strh	r4, [r0, #4]

	if( xTimeToWake < xTickCount )
   826a0:	f648 3114 	movw	r1, #35604	; 0x8b14
   826a4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   826a8:	880a      	ldrh	r2, [r1, #0]
   826aa:	b293      	uxth	r3, r2
   826ac:	429c      	cmp	r4, r3
   826ae:	d211      	bcs.n	826d4 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   826b0:	f648 3318 	movw	r3, #35608	; 0x8b18
   826b4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   826b8:	6818      	ldr	r0, [r3, #0]
   826ba:	f648 21f8 	movw	r1, #35576	; 0x8af8
   826be:	f2c2 0107 	movt	r1, #8199	; 0x2007
   826c2:	6809      	ldr	r1, [r1, #0]
   826c4:	f101 0104 	add.w	r1, r1, #4
   826c8:	f641 4251 	movw	r2, #7249	; 0x1c51
   826cc:	f2c0 0208 	movt	r2, #8
   826d0:	4790      	blx	r2
   826d2:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   826d4:	f648 10f4 	movw	r0, #35316	; 0x89f4
   826d8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   826dc:	6800      	ldr	r0, [r0, #0]
   826de:	f648 21f8 	movw	r1, #35576	; 0x8af8
   826e2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   826e6:	6809      	ldr	r1, [r1, #0]
   826e8:	f101 0104 	add.w	r1, r1, #4
   826ec:	f641 4251 	movw	r2, #7249	; 0x1c51
   826f0:	f2c0 0208 	movt	r2, #8
   826f4:	4790      	blx	r2

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   826f6:	f240 0308 	movw	r3, #8
   826fa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   826fe:	8818      	ldrh	r0, [r3, #0]
   82700:	b281      	uxth	r1, r0
   82702:	428c      	cmp	r4, r1
   82704:	d204      	bcs.n	82710 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
   82706:	f240 0208 	movw	r2, #8
   8270a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8270e:	8014      	strh	r4, [r2, #0]
   82710:	bd10      	pop	{r4, pc}
   82712:	bf00      	nop

00082714 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   82714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82718:	460f      	mov	r7, r1
   8271a:	4690      	mov	r8, r2
   8271c:	469a      	mov	sl, r3
   8271e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   82720:	9e0c      	ldr	r6, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   82722:	4681      	mov	r9, r0
   82724:	b930      	cbnz	r0, 82734 <xTaskGenericCreate+0x20>
   82726:	f641 5725 	movw	r7, #7461	; 0x1d25
   8272a:	f2c0 0708 	movt	r7, #8
   8272e:	47b8      	blx	r7
   82730:	bf00      	nop
   82732:	e7fd      	b.n	82730 <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   82734:	2d09      	cmp	r5, #9
   82736:	d906      	bls.n	82746 <xTaskGenericCreate+0x32>
   82738:	f641 5525 	movw	r5, #7461	; 0x1d25
   8273c:	f2c0 0508 	movt	r5, #8
   82740:	47a8      	blx	r5
   82742:	bf00      	nop
   82744:	e7fd      	b.n	82742 <xTaskGenericCreate+0x2e>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   82746:	f04f 0050 	mov.w	r0, #80	; 0x50
   8274a:	f641 63b5 	movw	r3, #7861	; 0x1eb5
   8274e:	f2c0 0308 	movt	r3, #8
   82752:	4798      	blx	r3

	if( pxNewTCB != NULL )
   82754:	4604      	mov	r4, r0
   82756:	2800      	cmp	r0, #0
   82758:	f000 8136 	beq.w	829c8 <xTaskGenericCreate+0x2b4>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   8275c:	2e00      	cmp	r6, #0
   8275e:	f040 8131 	bne.w	829c4 <xTaskGenericCreate+0x2b0>
   82762:	ea4f 0088 	mov.w	r0, r8, lsl #2
   82766:	f641 61b5 	movw	r1, #7861	; 0x1eb5
   8276a:	f2c0 0108 	movt	r1, #8
   8276e:	4788      	blx	r1
   82770:	4606      	mov	r6, r0
   82772:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   82774:	b930      	cbnz	r0, 82784 <xTaskGenericCreate+0x70>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   82776:	4620      	mov	r0, r4
   82778:	f641 72b1 	movw	r2, #8113	; 0x1fb1
   8277c:	f2c0 0208 	movt	r2, #8
   82780:	4790      	blx	r2
   82782:	e121      	b.n	829c8 <xTaskGenericCreate+0x2b4>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   82784:	4630      	mov	r0, r6
   82786:	f04f 01a5 	mov.w	r1, #165	; 0xa5
   8278a:	ea4f 0288 	mov.w	r2, r8, lsl #2
   8278e:	f244 7677 	movw	r6, #18295	; 0x4777
   82792:	f2c0 0608 	movt	r6, #8
   82796:	47b0      	blx	r6
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   82798:	f108 38ff 	add.w	r8, r8, #4294967295
   8279c:	6b20      	ldr	r0, [r4, #48]	; 0x30
   8279e:	eb00 0288 	add.w	r2, r0, r8, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   827a2:	f022 0b07 	bic.w	fp, r2, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   827a6:	f104 0034 	add.w	r0, r4, #52	; 0x34
   827aa:	4639      	mov	r1, r7
   827ac:	f04f 0210 	mov.w	r2, #16
   827b0:	f644 07b1 	movw	r7, #18609	; 0x48b1
   827b4:	f2c0 0708 	movt	r7, #8
   827b8:	47b8      	blx	r7
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   827ba:	f04f 0300 	mov.w	r3, #0
   827be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   827c2:	2d09      	cmp	r5, #9
   827c4:	bf34      	ite	cc
   827c6:	462e      	movcc	r6, r5
   827c8:	2609      	movcs	r6, #9
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   827ca:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   827cc:	64e6      	str	r6, [r4, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   827ce:	f104 0704 	add.w	r7, r4, #4
   827d2:	4638      	mov	r0, r7
   827d4:	f641 4829 	movw	r8, #7209	; 0x1c29
   827d8:	f2c0 0808 	movt	r8, #8
   827dc:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   827de:	f104 0018 	add.w	r0, r4, #24
   827e2:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   827e4:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   827e6:	f1c6 060a 	rsb	r6, r6, #10
   827ea:	8326      	strh	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   827ec:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   827ee:	4658      	mov	r0, fp
   827f0:	4649      	mov	r1, r9
   827f2:	4652      	mov	r2, sl
   827f4:	f641 43d5 	movw	r3, #7381	; 0x1cd5
   827f8:	f2c0 0308 	movt	r3, #8
   827fc:	4798      	blx	r3
   827fe:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   82800:	f010 0f07 	tst.w	r0, #7
   82804:	d006      	beq.n	82814 <xTaskGenericCreate+0x100>
   82806:	f641 5425 	movw	r4, #7461	; 0x1d25
   8280a:	f2c0 0408 	movt	r4, #8
   8280e:	47a0      	blx	r4
   82810:	bf00      	nop
   82812:	e7fd      	b.n	82810 <xTaskGenericCreate+0xfc>

		if( ( void * ) pxCreatedTask != NULL )
   82814:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82816:	b101      	cbz	r1, 8281a <xTaskGenericCreate+0x106>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   82818:	600c      	str	r4, [r1, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   8281a:	f641 5039 	movw	r0, #7481	; 0x1d39
   8281e:	f2c0 0008 	movt	r0, #8
   82822:	4780      	blx	r0
		{
			uxCurrentNumberOfTasks++;
   82824:	f648 3338 	movw	r3, #35640	; 0x8b38
   82828:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8282c:	681a      	ldr	r2, [r3, #0]
   8282e:	f102 0201 	add.w	r2, r2, #1
   82832:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   82834:	f648 21f8 	movw	r1, #35576	; 0x8af8
   82838:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8283c:	6808      	ldr	r0, [r1, #0]
   8283e:	2800      	cmp	r0, #0
   82840:	d158      	bne.n	828f4 <xTaskGenericCreate+0x1e0>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   82842:	f648 21f8 	movw	r1, #35576	; 0x8af8
   82846:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8284a:	600c      	str	r4, [r1, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   8284c:	f648 3038 	movw	r0, #35640	; 0x8b38
   82850:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82854:	6803      	ldr	r3, [r0, #0]
   82856:	2b01      	cmp	r3, #1
   82858:	d15f      	bne.n	8291a <xTaskGenericCreate+0x206>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   8285a:	f648 292c 	movw	r9, #35372	; 0x8a2c
   8285e:	f2c2 0907 	movt	r9, #8199	; 0x2007
   82862:	4648      	mov	r0, r9
   82864:	f641 4611 	movw	r6, #7185	; 0x1c11
   82868:	f2c0 0608 	movt	r6, #8
   8286c:	47b0      	blx	r6
   8286e:	f109 0014 	add.w	r0, r9, #20
   82872:	47b0      	blx	r6
   82874:	f109 0028 	add.w	r0, r9, #40	; 0x28
   82878:	47b0      	blx	r6
   8287a:	f109 003c 	add.w	r0, r9, #60	; 0x3c
   8287e:	47b0      	blx	r6
   82880:	f109 0050 	add.w	r0, r9, #80	; 0x50
   82884:	47b0      	blx	r6
   82886:	f109 0064 	add.w	r0, r9, #100	; 0x64
   8288a:	47b0      	blx	r6
   8288c:	f109 0078 	add.w	r0, r9, #120	; 0x78
   82890:	47b0      	blx	r6
   82892:	f109 008c 	add.w	r0, r9, #140	; 0x8c
   82896:	47b0      	blx	r6
   82898:	f109 00a0 	add.w	r0, r9, #160	; 0xa0
   8289c:	47b0      	blx	r6
   8289e:	f109 00b4 	add.w	r0, r9, #180	; 0xb4
   828a2:	47b0      	blx	r6
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   828a4:	f648 3920 	movw	r9, #35616	; 0x8b20
   828a8:	f2c2 0907 	movt	r9, #8199	; 0x2007
   828ac:	4648      	mov	r0, r9
   828ae:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   828b0:	f648 2814 	movw	r8, #35348	; 0x8a14
   828b4:	f2c2 0807 	movt	r8, #8199	; 0x2007
   828b8:	4640      	mov	r0, r8
   828ba:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   828bc:	f648 20fc 	movw	r0, #35580	; 0x8afc
   828c0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   828c4:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   828c6:	f648 2000 	movw	r0, #35328	; 0x8a00
   828ca:	f2c2 0007 	movt	r0, #8199	; 0x2007
   828ce:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   828d0:	f648 10e0 	movw	r0, #35296	; 0x89e0
   828d4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   828d8:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   828da:	f648 12f4 	movw	r2, #35316	; 0x89f4
   828de:	f2c2 0207 	movt	r2, #8199	; 0x2007
   828e2:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   828e6:	f648 3118 	movw	r1, #35608	; 0x8b18
   828ea:	f2c2 0107 	movt	r1, #8199	; 0x2007
   828ee:	f8c1 8000 	str.w	r8, [r1]
   828f2:	e012      	b.n	8291a <xTaskGenericCreate+0x206>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   828f4:	f648 13f8 	movw	r3, #35320	; 0x89f8
   828f8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   828fc:	681a      	ldr	r2, [r3, #0]
   828fe:	b962      	cbnz	r2, 8291a <xTaskGenericCreate+0x206>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   82900:	f648 21f8 	movw	r1, #35576	; 0x8af8
   82904:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82908:	6808      	ldr	r0, [r1, #0]
   8290a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   8290c:	429d      	cmp	r5, r3
   8290e:	d304      	bcc.n	8291a <xTaskGenericCreate+0x206>
					{
						pxCurrentTCB = pxNewTCB;
   82910:	f648 22f8 	movw	r2, #35576	; 0x8af8
   82914:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82918:	6014      	str	r4, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   8291a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8291c:	f648 333c 	movw	r3, #35644	; 0x8b3c
   82920:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82924:	681a      	ldr	r2, [r3, #0]
   82926:	4290      	cmp	r0, r2
   82928:	d904      	bls.n	82934 <xTaskGenericCreate+0x220>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   8292a:	f648 313c 	movw	r1, #35644	; 0x8b3c
   8292e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82932:	6008      	str	r0, [r1, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   82934:	f648 331c 	movw	r3, #35612	; 0x8b1c
   82938:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8293c:	681a      	ldr	r2, [r3, #0]
   8293e:	6462      	str	r2, [r4, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
   82940:	f102 0201 	add.w	r2, r2, #1
   82944:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   82946:	f648 2128 	movw	r1, #35368	; 0x8a28
   8294a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8294e:	680b      	ldr	r3, [r1, #0]
   82950:	4298      	cmp	r0, r3
   82952:	d904      	bls.n	8295e <xTaskGenericCreate+0x24a>
   82954:	f648 2228 	movw	r2, #35368	; 0x8a28
   82958:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8295c:	6010      	str	r0, [r2, #0]
   8295e:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   82962:	f648 202c 	movw	r0, #35372	; 0x8a2c
   82966:	4603      	mov	r3, r0
   82968:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8296c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   82970:	4639      	mov	r1, r7
   82972:	f641 4231 	movw	r2, #7217	; 0x1c31
   82976:	f2c0 0208 	movt	r2, #8
   8297a:	4790      	blx	r2

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   8297c:	f641 5161 	movw	r1, #7521	; 0x1d61
   82980:	f2c0 0108 	movt	r1, #8
   82984:	4788      	blx	r1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   82986:	f648 10f8 	movw	r0, #35320	; 0x89f8
   8298a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8298e:	6803      	ldr	r3, [r0, #0]
   82990:	b183      	cbz	r3, 829b4 <xTaskGenericCreate+0x2a0>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   82992:	f648 22f8 	movw	r2, #35576	; 0x8af8
   82996:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8299a:	6811      	ldr	r1, [r2, #0]
   8299c:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
   8299e:	4285      	cmp	r5, r0
   829a0:	d90c      	bls.n	829bc <xTaskGenericCreate+0x2a8>
			{
				portYIELD_WITHIN_API();
   829a2:	f641 5315 	movw	r3, #7445	; 0x1d15
   829a6:	f2c0 0308 	movt	r3, #8
   829aa:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   829ac:	f04f 0001 	mov.w	r0, #1
   829b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   829b4:	f04f 0001 	mov.w	r0, #1
   829b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   829bc:	f04f 0001 	mov.w	r0, #1
   829c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   829c4:	6306      	str	r6, [r0, #48]	; 0x30
   829c6:	e6dd      	b.n	82784 <xTaskGenericCreate+0x70>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   829c8:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   829cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000829d0 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   829d0:	b510      	push	{r4, lr}
   829d2:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   829d4:	f04f 0300 	mov.w	r3, #0
   829d8:	9300      	str	r3, [sp, #0]
   829da:	9301      	str	r3, [sp, #4]
   829dc:	9302      	str	r3, [sp, #8]
   829de:	9303      	str	r3, [sp, #12]
   829e0:	f642 507d 	movw	r0, #11645	; 0x2d7d
   829e4:	f2c0 0008 	movt	r0, #8
   829e8:	f646 71c8 	movw	r1, #28616	; 0x6fc8
   829ec:	f2c0 0108 	movt	r1, #8
   829f0:	f44f 7280 	mov.w	r2, #256	; 0x100
   829f4:	f242 7415 	movw	r4, #10005	; 0x2715
   829f8:	f2c0 0408 	movt	r4, #8
   829fc:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   829fe:	2801      	cmp	r0, #1
   82a00:	d11f      	bne.n	82a42 <vTaskStartScheduler+0x72>
		{
			xReturn = xTimerCreateTimerTask();
   82a02:	f243 4321 	movw	r3, #13345	; 0x3421
   82a06:	f2c0 0308 	movt	r3, #8
   82a0a:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   82a0c:	2801      	cmp	r0, #1
   82a0e:	d118      	bne.n	82a42 <vTaskStartScheduler+0x72>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   82a10:	f641 5125 	movw	r1, #7461	; 0x1d25
   82a14:	f2c0 0108 	movt	r1, #8
   82a18:	4788      	blx	r1

		xSchedulerRunning = pdTRUE;
   82a1a:	f648 13f8 	movw	r3, #35320	; 0x89f8
   82a1e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82a22:	f04f 0201 	mov.w	r2, #1
   82a26:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   82a28:	f648 3014 	movw	r0, #35604	; 0x8b14
   82a2c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82a30:	f04f 0100 	mov.w	r1, #0
   82a34:	8001      	strh	r1, [r0, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   82a36:	f641 6319 	movw	r3, #7705	; 0x1e19
   82a3a:	f2c0 0308 	movt	r3, #8
   82a3e:	4798      	blx	r3
   82a40:	e007      	b.n	82a52 <vTaskStartScheduler+0x82>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   82a42:	b930      	cbnz	r0, 82a52 <vTaskStartScheduler+0x82>
   82a44:	f641 5025 	movw	r0, #7461	; 0x1d25
   82a48:	f2c0 0008 	movt	r0, #8
   82a4c:	4780      	blx	r0
   82a4e:	bf00      	nop
   82a50:	e7fd      	b.n	82a4e <vTaskStartScheduler+0x7e>
}
   82a52:	b004      	add	sp, #16
   82a54:	bd10      	pop	{r4, pc}
   82a56:	bf00      	nop

00082a58 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   82a58:	f648 23f4 	movw	r3, #35572	; 0x8af4
   82a5c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82a60:	681a      	ldr	r2, [r3, #0]
   82a62:	f102 0201 	add.w	r2, r2, #1
   82a66:	601a      	str	r2, [r3, #0]
   82a68:	4770      	bx	lr
   82a6a:	bf00      	nop

00082a6c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   82a6c:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   82a6e:	f641 5339 	movw	r3, #7481	; 0x1d39
   82a72:	f2c0 0308 	movt	r3, #8
   82a76:	4798      	blx	r3
	{
		xTicks = xTickCount;
   82a78:	f648 3014 	movw	r0, #35604	; 0x8b14
   82a7c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82a80:	8804      	ldrh	r4, [r0, #0]
   82a82:	b2a4      	uxth	r4, r4
	}
	taskEXIT_CRITICAL();
   82a84:	f641 5161 	movw	r1, #7521	; 0x1d61
   82a88:	f2c0 0108 	movt	r1, #8
   82a8c:	4788      	blx	r1

	return xTicks;
}
   82a8e:	4620      	mov	r0, r4
   82a90:	bd10      	pop	{r4, pc}
   82a92:	bf00      	nop

00082a94 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   82a94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82a98:	f648 23f4 	movw	r3, #35572	; 0x8af4
   82a9c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82aa0:	6818      	ldr	r0, [r3, #0]
   82aa2:	2800      	cmp	r0, #0
   82aa4:	f040 80b9 	bne.w	82c1a <vTaskIncrementTick+0x186>
	{
		++xTickCount;
   82aa8:	f648 3314 	movw	r3, #35604	; 0x8b14
   82aac:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82ab0:	8818      	ldrh	r0, [r3, #0]
   82ab2:	f100 0001 	add.w	r0, r0, #1
   82ab6:	b281      	uxth	r1, r0
   82ab8:	8019      	strh	r1, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   82aba:	881a      	ldrh	r2, [r3, #0]
   82abc:	b293      	uxth	r3, r2
   82abe:	2b00      	cmp	r3, #0
   82ac0:	d139      	bne.n	82b36 <vTaskIncrementTick+0xa2>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   82ac2:	f648 10f4 	movw	r0, #35316	; 0x89f4
   82ac6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82aca:	6801      	ldr	r1, [r0, #0]
   82acc:	680a      	ldr	r2, [r1, #0]
   82ace:	b132      	cbz	r2, 82ade <vTaskIncrementTick+0x4a>
   82ad0:	f641 5525 	movw	r5, #7461	; 0x1d25
   82ad4:	f2c0 0508 	movt	r5, #8
   82ad8:	47a8      	blx	r5
   82ada:	bf00      	nop
   82adc:	e7fd      	b.n	82ada <vTaskIncrementTick+0x46>

			pxTemp = pxDelayedTaskList;
   82ade:	f648 13f4 	movw	r3, #35316	; 0x89f4
   82ae2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82ae6:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   82ae8:	f648 3218 	movw	r2, #35608	; 0x8b18
   82aec:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82af0:	6810      	ldr	r0, [r2, #0]
   82af2:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   82af4:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   82af6:	f648 3210 	movw	r2, #35600	; 0x8b10
   82afa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82afe:	6811      	ldr	r1, [r2, #0]
   82b00:	f101 0101 	add.w	r1, r1, #1
   82b04:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   82b06:	681b      	ldr	r3, [r3, #0]
   82b08:	6818      	ldr	r0, [r3, #0]
   82b0a:	b938      	cbnz	r0, 82b1c <vTaskIncrementTick+0x88>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   82b0c:	f240 0308 	movw	r3, #8
   82b10:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82b14:	f64f 70ff 	movw	r0, #65535	; 0xffff
   82b18:	8018      	strh	r0, [r3, #0]
   82b1a:	e00c      	b.n	82b36 <vTaskIncrementTick+0xa2>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   82b1c:	f648 12f4 	movw	r2, #35316	; 0x89f4
   82b20:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82b24:	6811      	ldr	r1, [r2, #0]
   82b26:	68cb      	ldr	r3, [r1, #12]
   82b28:	68d8      	ldr	r0, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   82b2a:	8882      	ldrh	r2, [r0, #4]
   82b2c:	f240 0108 	movw	r1, #8
   82b30:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82b34:	800a      	strh	r2, [r1, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   82b36:	f648 3214 	movw	r2, #35604	; 0x8b14
   82b3a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82b3e:	8811      	ldrh	r1, [r2, #0]
   82b40:	b288      	uxth	r0, r1
   82b42:	f240 0308 	movw	r3, #8
   82b46:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82b4a:	881a      	ldrh	r2, [r3, #0]
   82b4c:	b291      	uxth	r1, r2
   82b4e:	4288      	cmp	r0, r1
   82b50:	d36b      	bcc.n	82c2a <vTaskIncrementTick+0x196>
   82b52:	f648 10f4 	movw	r0, #35316	; 0x89f4
   82b56:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82b5a:	6803      	ldr	r3, [r0, #0]
   82b5c:	681a      	ldr	r2, [r3, #0]
   82b5e:	b182      	cbz	r2, 82b82 <vTaskIncrementTick+0xee>
   82b60:	f648 14f4 	movw	r4, #35316	; 0x89f4
   82b64:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82b68:	6821      	ldr	r1, [r4, #0]
   82b6a:	68c8      	ldr	r0, [r1, #12]
   82b6c:	68c4      	ldr	r4, [r0, #12]
   82b6e:	88a3      	ldrh	r3, [r4, #4]
   82b70:	f648 3214 	movw	r2, #35604	; 0x8b14
   82b74:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82b78:	8811      	ldrh	r1, [r2, #0]
   82b7a:	b288      	uxth	r0, r1
   82b7c:	4283      	cmp	r3, r0
   82b7e:	d91b      	bls.n	82bb8 <vTaskIncrementTick+0x124>
   82b80:	e013      	b.n	82baa <vTaskIncrementTick+0x116>
   82b82:	f240 0308 	movw	r3, #8
   82b86:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82b8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   82b8e:	8019      	strh	r1, [r3, #0]
   82b90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b94:	6834      	ldr	r4, [r6, #0]
   82b96:	68e2      	ldr	r2, [r4, #12]
   82b98:	68d4      	ldr	r4, [r2, #12]
   82b9a:	88a3      	ldrh	r3, [r4, #4]
   82b9c:	4648      	mov	r0, r9
   82b9e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82ba2:	8801      	ldrh	r1, [r0, #0]
   82ba4:	b28a      	uxth	r2, r1
   82ba6:	4293      	cmp	r3, r2
   82ba8:	d91c      	bls.n	82be4 <vTaskIncrementTick+0x150>
   82baa:	f240 0008 	movw	r0, #8
   82bae:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82bb2:	8003      	strh	r3, [r0, #0]
   82bb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82bb8:	f641 4795 	movw	r7, #7317	; 0x1c95
   82bbc:	f2c0 0708 	movt	r7, #8
   82bc0:	f648 2828 	movw	r8, #35368	; 0x8a28
   82bc4:	f2c2 0807 	movt	r8, #8199	; 0x2007
   82bc8:	f648 2b2c 	movw	fp, #35372	; 0x8a2c
   82bcc:	f2c2 0b07 	movt	fp, #8199	; 0x2007
   82bd0:	f641 4a31 	movw	sl, #7217	; 0x1c31
   82bd4:	f2c0 0a08 	movt	sl, #8
   82bd8:	f648 16f4 	movw	r6, #35316	; 0x89f4
   82bdc:	f2c2 0607 	movt	r6, #8199	; 0x2007
   82be0:	f648 3914 	movw	r9, #35604	; 0x8b14
   82be4:	f104 0504 	add.w	r5, r4, #4
   82be8:	4628      	mov	r0, r5
   82bea:	47b8      	blx	r7
   82bec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82bee:	b113      	cbz	r3, 82bf6 <vTaskIncrementTick+0x162>
   82bf0:	f104 0018 	add.w	r0, r4, #24
   82bf4:	47b8      	blx	r7
   82bf6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   82bf8:	f8d8 2000 	ldr.w	r2, [r8]
   82bfc:	4291      	cmp	r1, r2
   82bfe:	bf88      	it	hi
   82c00:	f8c8 1000 	strhi.w	r1, [r8]
   82c04:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   82c08:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   82c0c:	4629      	mov	r1, r5
   82c0e:	47d0      	blx	sl
   82c10:	6833      	ldr	r3, [r6, #0]
   82c12:	6819      	ldr	r1, [r3, #0]
   82c14:	2900      	cmp	r1, #0
   82c16:	d1bd      	bne.n	82b94 <vTaskIncrementTick+0x100>
   82c18:	e7b3      	b.n	82b82 <vTaskIncrementTick+0xee>
	}
	else
	{
		++uxMissedTicks;
   82c1a:	f648 11dc 	movw	r1, #35292	; 0x89dc
   82c1e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82c22:	680a      	ldr	r2, [r1, #0]
   82c24:	f102 0201 	add.w	r2, r2, #1
   82c28:	600a      	str	r2, [r1, #0]
   82c2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c2e:	bf00      	nop

00082c30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   82c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   82c34:	f648 23f4 	movw	r3, #35572	; 0x8af4
   82c38:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82c3c:	6818      	ldr	r0, [r3, #0]
   82c3e:	b930      	cbnz	r0, 82c4e <xTaskResumeAll+0x1e>
   82c40:	f641 5525 	movw	r5, #7461	; 0x1d25
   82c44:	f2c0 0508 	movt	r5, #8
   82c48:	47a8      	blx	r5
   82c4a:	bf00      	nop
   82c4c:	e7fd      	b.n	82c4a <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   82c4e:	f641 5139 	movw	r1, #7481	; 0x1d39
   82c52:	f2c0 0108 	movt	r1, #8
   82c56:	4788      	blx	r1
	{
		--uxSchedulerSuspended;
   82c58:	f648 24f4 	movw	r4, #35572	; 0x8af4
   82c5c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82c60:	6822      	ldr	r2, [r4, #0]
   82c62:	f102 33ff 	add.w	r3, r2, #4294967295
   82c66:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82c68:	6820      	ldr	r0, [r4, #0]
   82c6a:	2800      	cmp	r0, #0
   82c6c:	d178      	bne.n	82d60 <xTaskResumeAll+0x130>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   82c6e:	f648 3138 	movw	r1, #35640	; 0x8b38
   82c72:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82c76:	680c      	ldr	r4, [r1, #0]
   82c78:	bb4c      	cbnz	r4, 82cce <xTaskResumeAll+0x9e>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   82c7a:	f04f 0400 	mov.w	r4, #0
   82c7e:	e074      	b.n	82d6a <xTaskResumeAll+0x13a>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   82c80:	f8d8 200c 	ldr.w	r2, [r8, #12]
   82c84:	68d4      	ldr	r4, [r2, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   82c86:	f104 0018 	add.w	r0, r4, #24
   82c8a:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   82c8c:	f104 0904 	add.w	r9, r4, #4
   82c90:	4648      	mov	r0, r9
   82c92:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   82c94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   82c96:	6830      	ldr	r0, [r6, #0]
   82c98:	4283      	cmp	r3, r0
   82c9a:	bf88      	it	hi
   82c9c:	6033      	strhi	r3, [r6, #0]
   82c9e:	4651      	mov	r1, sl
   82ca0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82ca4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   82ca8:	eb01 0082 	add.w	r0, r1, r2, lsl #2
   82cac:	4649      	mov	r1, r9
   82cae:	f641 4331 	movw	r3, #7217	; 0x1c31
   82cb2:	f2c0 0308 	movt	r3, #8
   82cb6:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   82cb8:	f648 20f8 	movw	r0, #35576	; 0x8af8
   82cbc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82cc0:	6801      	ldr	r1, [r0, #0]
   82cc2:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
   82cc4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   82cc6:	4294      	cmp	r4, r2
   82cc8:	bf28      	it	cs
   82cca:	2501      	movcs	r5, #1
   82ccc:	e00f      	b.n	82cee <xTaskResumeAll+0xbe>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   82cce:	f04f 0500 	mov.w	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   82cd2:	f648 28fc 	movw	r8, #35580	; 0x8afc
   82cd6:	f2c2 0807 	movt	r8, #8199	; 0x2007
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   82cda:	f641 4795 	movw	r7, #7317	; 0x1c95
   82cde:	f2c0 0708 	movt	r7, #8
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   82ce2:	f648 2628 	movw	r6, #35368	; 0x8a28
   82ce6:	f2c2 0607 	movt	r6, #8199	; 0x2007
   82cea:	f648 2a2c 	movw	sl, #35372	; 0x8a2c
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   82cee:	f8d8 2000 	ldr.w	r2, [r8]
   82cf2:	2a00      	cmp	r2, #0
   82cf4:	d1c4      	bne.n	82c80 <xTaskResumeAll+0x50>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   82cf6:	f648 13dc 	movw	r3, #35292	; 0x89dc
   82cfa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82cfe:	6818      	ldr	r0, [r3, #0]
   82d00:	b1b0      	cbz	r0, 82d30 <xTaskResumeAll+0x100>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   82d02:	f648 12dc 	movw	r2, #35292	; 0x89dc
   82d06:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82d0a:	6813      	ldr	r3, [r2, #0]
   82d0c:	b1cb      	cbz	r3, 82d42 <xTaskResumeAll+0x112>
					{
						vTaskIncrementTick();
   82d0e:	f642 2595 	movw	r5, #10901	; 0x2a95
   82d12:	f2c0 0508 	movt	r5, #8
						--uxMissedTicks;
   82d16:	f648 14dc 	movw	r4, #35292	; 0x89dc
   82d1a:	f2c2 0407 	movt	r4, #8199	; 0x2007
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   82d1e:	47a8      	blx	r5
						--uxMissedTicks;
   82d20:	6820      	ldr	r0, [r4, #0]
   82d22:	f100 31ff 	add.w	r1, r0, #4294967295
   82d26:	6021      	str	r1, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   82d28:	6822      	ldr	r2, [r4, #0]
   82d2a:	2a00      	cmp	r2, #0
   82d2c:	d1f7      	bne.n	82d1e <xTaskResumeAll+0xee>
   82d2e:	e008      	b.n	82d42 <xTaskResumeAll+0x112>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   82d30:	2d01      	cmp	r5, #1
   82d32:	d006      	beq.n	82d42 <xTaskResumeAll+0x112>
   82d34:	f648 3134 	movw	r1, #35636	; 0x8b34
   82d38:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82d3c:	680c      	ldr	r4, [r1, #0]
   82d3e:	2c01      	cmp	r4, #1
   82d40:	d111      	bne.n	82d66 <xTaskResumeAll+0x136>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   82d42:	f648 3334 	movw	r3, #35636	; 0x8b34
   82d46:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82d4a:	f04f 0400 	mov.w	r4, #0
   82d4e:	601c      	str	r4, [r3, #0]
					portYIELD_WITHIN_API();
   82d50:	f641 5015 	movw	r0, #7445	; 0x1d15
   82d54:	f2c0 0008 	movt	r0, #8
   82d58:	4780      	blx	r0
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   82d5a:	f04f 0401 	mov.w	r4, #1
   82d5e:	e004      	b.n	82d6a <xTaskResumeAll+0x13a>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   82d60:	f04f 0400 	mov.w	r4, #0
   82d64:	e001      	b.n	82d6a <xTaskResumeAll+0x13a>
   82d66:	f04f 0400 	mov.w	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   82d6a:	f641 5161 	movw	r1, #7521	; 0x1d61
   82d6e:	f2c0 0108 	movt	r1, #8
   82d72:	4788      	blx	r1

	return xAlreadyYielded;
}
   82d74:	4620      	mov	r0, r4
   82d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82d7a:	bf00      	nop

00082d7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   82d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   82d80:	f648 15fc 	movw	r5, #35324	; 0x89fc
   82d84:	f2c2 0507 	movt	r5, #8199	; 0x2007
		{
			vTaskSuspendAll();
   82d88:	f642 2859 	movw	r8, #10841	; 0x2a59
   82d8c:	f2c0 0808 	movt	r8, #8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   82d90:	f648 2600 	movw	r6, #35328	; 0x8a00
   82d94:	f2c2 0607 	movt	r6, #8199	; 0x2007
			xTaskResumeAll();
   82d98:	f642 4731 	movw	r7, #11313	; 0x2c31
   82d9c:	e02d      	b.n	82dfa <prvIdleTask+0x7e>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   82d9e:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   82da0:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   82da2:	463b      	mov	r3, r7
   82da4:	f2c0 0308 	movt	r3, #8
   82da8:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   82daa:	b334      	cbz	r4, 82dfa <prvIdleTask+0x7e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   82dac:	f641 5039 	movw	r0, #7481	; 0x1d39
   82db0:	f2c0 0008 	movt	r0, #8
   82db4:	4780      	blx	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   82db6:	68f1      	ldr	r1, [r6, #12]
   82db8:	68cc      	ldr	r4, [r1, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   82dba:	f104 0004 	add.w	r0, r4, #4
   82dbe:	f641 4295 	movw	r2, #7317	; 0x1c95
   82dc2:	f2c0 0208 	movt	r2, #8
   82dc6:	4790      	blx	r2
					--uxCurrentNumberOfTasks;
   82dc8:	f648 3338 	movw	r3, #35640	; 0x8b38
   82dcc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82dd0:	6818      	ldr	r0, [r3, #0]
   82dd2:	f100 31ff 	add.w	r1, r0, #4294967295
   82dd6:	6019      	str	r1, [r3, #0]
					--uxTasksDeleted;
   82dd8:	682a      	ldr	r2, [r5, #0]
   82dda:	f102 33ff 	add.w	r3, r2, #4294967295
   82dde:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   82de0:	f641 5061 	movw	r0, #7521	; 0x1d61
   82de4:	f2c0 0008 	movt	r0, #8
   82de8:	4780      	blx	r0
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   82dea:	6b20      	ldr	r0, [r4, #48]	; 0x30
   82dec:	f641 79b1 	movw	r9, #8113	; 0x1fb1
   82df0:	f2c0 0908 	movt	r9, #8
   82df4:	47c8      	blx	r9
		vPortFree( pxTCB );
   82df6:	4620      	mov	r0, r4
   82df8:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   82dfa:	682b      	ldr	r3, [r5, #0]
   82dfc:	2b00      	cmp	r3, #0
   82dfe:	d1ce      	bne.n	82d9e <prvIdleTask+0x22>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   82e00:	f648 202c 	movw	r0, #35372	; 0x8a2c
   82e04:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82e08:	6801      	ldr	r1, [r0, #0]
   82e0a:	2901      	cmp	r1, #1
   82e0c:	d9f5      	bls.n	82dfa <prvIdleTask+0x7e>
			{
				taskYIELD();
   82e0e:	f641 5215 	movw	r2, #7445	; 0x1d15
   82e12:	f2c0 0208 	movt	r2, #8
   82e16:	4790      	blx	r2
   82e18:	e7ef      	b.n	82dfa <prvIdleTask+0x7e>
   82e1a:	bf00      	nop

00082e1c <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   82e1c:	b538      	push	{r3, r4, r5, lr}
   82e1e:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   82e20:	4605      	mov	r5, r0
   82e22:	b930      	cbnz	r0, 82e32 <vTaskDelayUntil+0x16>
   82e24:	f641 5425 	movw	r4, #7461	; 0x1d25
   82e28:	f2c0 0408 	movt	r4, #8
   82e2c:	47a0      	blx	r4
   82e2e:	bf00      	nop
   82e30:	e7fd      	b.n	82e2e <vTaskDelayUntil+0x12>
		configASSERT( ( xTimeIncrement > 0U ) );
   82e32:	b931      	cbnz	r1, 82e42 <vTaskDelayUntil+0x26>
   82e34:	f641 5525 	movw	r5, #7461	; 0x1d25
   82e38:	f2c0 0508 	movt	r5, #8
   82e3c:	47a8      	blx	r5
   82e3e:	bf00      	nop
   82e40:	e7fd      	b.n	82e3e <vTaskDelayUntil+0x22>

		vTaskSuspendAll();
   82e42:	f642 2359 	movw	r3, #10841	; 0x2a59
   82e46:	f2c0 0308 	movt	r3, #8
   82e4a:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   82e4c:	8828      	ldrh	r0, [r5, #0]
   82e4e:	1901      	adds	r1, r0, r4
   82e50:	b28c      	uxth	r4, r1

			if( xTickCount < *pxPreviousWakeTime )
   82e52:	f648 3214 	movw	r2, #35604	; 0x8b14
   82e56:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82e5a:	8813      	ldrh	r3, [r2, #0]
   82e5c:	b299      	uxth	r1, r3
   82e5e:	4288      	cmp	r0, r1
   82e60:	d90b      	bls.n	82e7a <vTaskDelayUntil+0x5e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   82e62:	42a0      	cmp	r0, r4
   82e64:	d934      	bls.n	82ed0 <vTaskDelayUntil+0xb4>
   82e66:	f648 3114 	movw	r1, #35604	; 0x8b14
   82e6a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82e6e:	8808      	ldrh	r0, [r1, #0]
   82e70:	b282      	uxth	r2, r0
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   82e72:	802c      	strh	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   82e74:	4294      	cmp	r4, r2
   82e76:	d91d      	bls.n	82eb4 <vTaskDelayUntil+0x98>
   82e78:	e00a      	b.n	82e90 <vTaskDelayUntil+0x74>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   82e7a:	42a0      	cmp	r0, r4
   82e7c:	d826      	bhi.n	82ecc <vTaskDelayUntil+0xb0>
   82e7e:	f648 3014 	movw	r0, #35604	; 0x8b14
   82e82:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82e86:	8802      	ldrh	r2, [r0, #0]
   82e88:	b293      	uxth	r3, r2
   82e8a:	429c      	cmp	r4, r3
   82e8c:	d81e      	bhi.n	82ecc <vTaskDelayUntil+0xb0>
   82e8e:	e01f      	b.n	82ed0 <vTaskDelayUntil+0xb4>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82e90:	f648 23f8 	movw	r3, #35576	; 0x8af8
   82e94:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82e98:	6818      	ldr	r0, [r3, #0]
   82e9a:	f100 0004 	add.w	r0, r0, #4
   82e9e:	f641 4195 	movw	r1, #7317	; 0x1c95
   82ea2:	f2c0 0108 	movt	r1, #8
   82ea6:	4788      	blx	r1
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   82ea8:	4620      	mov	r0, r4
   82eaa:	f242 6291 	movw	r2, #9873	; 0x2691
   82eae:	f2c0 0208 	movt	r2, #8
   82eb2:	4790      	blx	r2
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   82eb4:	f642 4031 	movw	r0, #11313	; 0x2c31
   82eb8:	f2c0 0008 	movt	r0, #8
   82ebc:	4780      	blx	r0

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   82ebe:	b948      	cbnz	r0, 82ed4 <vTaskDelayUntil+0xb8>
		{
			portYIELD_WITHIN_API();
   82ec0:	f641 5315 	movw	r3, #7445	; 0x1d15
   82ec4:	f2c0 0308 	movt	r3, #8
   82ec8:	4798      	blx	r3
   82eca:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   82ecc:	802c      	strh	r4, [r5, #0]
   82ece:	e7df      	b.n	82e90 <vTaskDelayUntil+0x74>
   82ed0:	802c      	strh	r4, [r5, #0]
   82ed2:	e7ef      	b.n	82eb4 <vTaskDelayUntil+0x98>
   82ed4:	bd38      	pop	{r3, r4, r5, pc}
   82ed6:	bf00      	nop

00082ed8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   82ed8:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   82eda:	f648 23f4 	movw	r3, #35572	; 0x8af4
   82ede:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82ee2:	6818      	ldr	r0, [r3, #0]
   82ee4:	b9a8      	cbnz	r0, 82f12 <vTaskSwitchContext+0x3a>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   82ee6:	f648 2128 	movw	r1, #35368	; 0x8a28
   82eea:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82eee:	680a      	ldr	r2, [r1, #0]
   82ef0:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   82ef4:	ea4f 0083 	mov.w	r0, r3, lsl #2
   82ef8:	f648 212c 	movw	r1, #35372	; 0x8a2c
   82efc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82f00:	580a      	ldr	r2, [r1, r0]
   82f02:	bb52      	cbnz	r2, 82f5a <vTaskSwitchContext+0x82>
   82f04:	f648 2328 	movw	r3, #35368	; 0x8a28
   82f08:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82f0c:	6818      	ldr	r0, [r3, #0]
   82f0e:	b988      	cbnz	r0, 82f34 <vTaskSwitchContext+0x5c>
   82f10:	e009      	b.n	82f26 <vTaskSwitchContext+0x4e>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   82f12:	f648 3134 	movw	r1, #35636	; 0x8b34
   82f16:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82f1a:	f04f 0001 	mov.w	r0, #1
   82f1e:	6008      	str	r0, [r1, #0]
   82f20:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   82f22:	681a      	ldr	r2, [r3, #0]
   82f24:	b972      	cbnz	r2, 82f44 <vTaskSwitchContext+0x6c>
   82f26:	f641 5325 	movw	r3, #7461	; 0x1d25
   82f2a:	f2c0 0308 	movt	r3, #8
   82f2e:	4798      	blx	r3
   82f30:	bf00      	nop
   82f32:	e7fd      	b.n	82f30 <vTaskSwitchContext+0x58>
   82f34:	f648 2328 	movw	r3, #35368	; 0x8a28
   82f38:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82f3c:	f648 212c 	movw	r1, #35372	; 0x8a2c
   82f40:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82f44:	681a      	ldr	r2, [r3, #0]
   82f46:	f102 30ff 	add.w	r0, r2, #4294967295
   82f4a:	6018      	str	r0, [r3, #0]
   82f4c:	681a      	ldr	r2, [r3, #0]
   82f4e:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   82f52:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
   82f56:	2a00      	cmp	r2, #0
   82f58:	d0e3      	beq.n	82f22 <vTaskSwitchContext+0x4a>
   82f5a:	f648 2328 	movw	r3, #35368	; 0x8a28
   82f5e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82f62:	6819      	ldr	r1, [r3, #0]
   82f64:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   82f68:	f648 222c 	movw	r2, #35372	; 0x8a2c
   82f6c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82f70:	eb02 0380 	add.w	r3, r2, r0, lsl #2
   82f74:	6859      	ldr	r1, [r3, #4]
   82f76:	6848      	ldr	r0, [r1, #4]
   82f78:	6058      	str	r0, [r3, #4]
   82f7a:	f103 0208 	add.w	r2, r3, #8
   82f7e:	4290      	cmp	r0, r2
   82f80:	bf04      	itt	eq
   82f82:	6840      	ldreq	r0, [r0, #4]
   82f84:	6058      	streq	r0, [r3, #4]
   82f86:	685b      	ldr	r3, [r3, #4]
   82f88:	68d9      	ldr	r1, [r3, #12]
   82f8a:	f648 20f8 	movw	r0, #35576	; 0x8af8
   82f8e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82f92:	6001      	str	r1, [r0, #0]
   82f94:	bd08      	pop	{r3, pc}
   82f96:	bf00      	nop

00082f98 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   82f98:	b538      	push	{r3, r4, r5, lr}
   82f9a:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   82f9c:	b930      	cbnz	r0, 82fac <vTaskPlaceOnEventList+0x14>
   82f9e:	f641 5425 	movw	r4, #7461	; 0x1d25
   82fa2:	f2c0 0408 	movt	r4, #8
   82fa6:	47a0      	blx	r4
   82fa8:	bf00      	nop
   82faa:	e7fd      	b.n	82fa8 <vTaskPlaceOnEventList+0x10>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   82fac:	f648 25f8 	movw	r5, #35576	; 0x8af8
   82fb0:	f2c2 0507 	movt	r5, #8199	; 0x2007
   82fb4:	6829      	ldr	r1, [r5, #0]
   82fb6:	f101 0118 	add.w	r1, r1, #24
   82fba:	f641 4251 	movw	r2, #7249	; 0x1c51
   82fbe:	f2c0 0208 	movt	r2, #8
   82fc2:	4790      	blx	r2

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82fc4:	6828      	ldr	r0, [r5, #0]
   82fc6:	f100 0004 	add.w	r0, r0, #4
   82fca:	f641 4195 	movw	r1, #7317	; 0x1c95
   82fce:	f2c0 0108 	movt	r1, #8
   82fd2:	4788      	blx	r1
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   82fd4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   82fd8:	4284      	cmp	r4, r0
   82fda:	d10c      	bne.n	82ff6 <vTaskPlaceOnEventList+0x5e>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   82fdc:	6829      	ldr	r1, [r5, #0]
   82fde:	f648 10e0 	movw	r0, #35296	; 0x89e0
   82fe2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82fe6:	f101 0104 	add.w	r1, r1, #4
   82fea:	f641 4231 	movw	r2, #7217	; 0x1c31
   82fee:	f2c0 0208 	movt	r2, #8
   82ff2:	4790      	blx	r2
   82ff4:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   82ff6:	f648 3314 	movw	r3, #35604	; 0x8b14
   82ffa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82ffe:	881a      	ldrh	r2, [r3, #0]
   83000:	18a1      	adds	r1, r4, r2
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   83002:	b288      	uxth	r0, r1
   83004:	f242 6391 	movw	r3, #9873	; 0x2691
   83008:	f2c0 0308 	movt	r3, #8
   8300c:	4798      	blx	r3
   8300e:	bd38      	pop	{r3, r4, r5, pc}

00083010 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   83010:	b538      	push	{r3, r4, r5, lr}
   83012:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   83014:	b930      	cbnz	r0, 83024 <vTaskPlaceOnEventListRestricted+0x14>
   83016:	f641 5425 	movw	r4, #7461	; 0x1d25
   8301a:	f2c0 0408 	movt	r4, #8
   8301e:	47a0      	blx	r4
   83020:	bf00      	nop
   83022:	e7fd      	b.n	83020 <vTaskPlaceOnEventListRestricted+0x10>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   83024:	f648 24f8 	movw	r4, #35576	; 0x8af8
   83028:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8302c:	6821      	ldr	r1, [r4, #0]
   8302e:	f101 0118 	add.w	r1, r1, #24
   83032:	f641 4231 	movw	r2, #7217	; 0x1c31
   83036:	f2c0 0208 	movt	r2, #8
   8303a:	4790      	blx	r2

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   8303c:	6820      	ldr	r0, [r4, #0]
   8303e:	f100 0004 	add.w	r0, r0, #4
   83042:	f641 4195 	movw	r1, #7317	; 0x1c95
   83046:	f2c0 0108 	movt	r1, #8
   8304a:	4788      	blx	r1
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   8304c:	f648 3014 	movw	r0, #35604	; 0x8b14
   83050:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83054:	8803      	ldrh	r3, [r0, #0]
   83056:	18ea      	adds	r2, r5, r3
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   83058:	b290      	uxth	r0, r2
   8305a:	f242 6191 	movw	r1, #9873	; 0x2691
   8305e:	f2c0 0108 	movt	r1, #8
   83062:	4788      	blx	r1
   83064:	bd38      	pop	{r3, r4, r5, pc}
   83066:	bf00      	nop

00083068 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   83068:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   8306a:	68c3      	ldr	r3, [r0, #12]
   8306c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   8306e:	b934      	cbnz	r4, 8307e <xTaskRemoveFromEventList+0x16>
   83070:	f641 5425 	movw	r4, #7461	; 0x1d25
   83074:	f2c0 0408 	movt	r4, #8
   83078:	47a0      	blx	r4
   8307a:	bf00      	nop
   8307c:	e7fd      	b.n	8307a <xTaskRemoveFromEventList+0x12>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   8307e:	f104 0518 	add.w	r5, r4, #24
   83082:	4628      	mov	r0, r5
   83084:	f641 4195 	movw	r1, #7317	; 0x1c95
   83088:	f2c0 0108 	movt	r1, #8
   8308c:	4788      	blx	r1

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8308e:	f648 20f4 	movw	r0, #35572	; 0x8af4
   83092:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83096:	6802      	ldr	r2, [r0, #0]
   83098:	bb22      	cbnz	r2, 830e4 <xTaskRemoveFromEventList+0x7c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   8309a:	f104 0504 	add.w	r5, r4, #4
   8309e:	4628      	mov	r0, r5
   830a0:	f641 4195 	movw	r1, #7317	; 0x1c95
   830a4:	f2c0 0108 	movt	r1, #8
   830a8:	4788      	blx	r1
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   830aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   830ac:	f648 2228 	movw	r2, #35368	; 0x8a28
   830b0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   830b4:	6813      	ldr	r3, [r2, #0]
   830b6:	4298      	cmp	r0, r3
   830b8:	d904      	bls.n	830c4 <xTaskRemoveFromEventList+0x5c>
   830ba:	f648 2128 	movw	r1, #35368	; 0x8a28
   830be:	f2c2 0107 	movt	r1, #8199	; 0x2007
   830c2:	6008      	str	r0, [r1, #0]
   830c4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   830c8:	f648 202c 	movw	r0, #35372	; 0x8a2c
   830cc:	4602      	mov	r2, r0
   830ce:	f2c2 0207 	movt	r2, #8199	; 0x2007
   830d2:	eb02 0083 	add.w	r0, r2, r3, lsl #2
   830d6:	4629      	mov	r1, r5
   830d8:	f641 4331 	movw	r3, #7217	; 0x1c31
   830dc:	f2c0 0308 	movt	r3, #8
   830e0:	4798      	blx	r3
   830e2:	e009      	b.n	830f8 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   830e4:	f648 20fc 	movw	r0, #35580	; 0x8afc
   830e8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   830ec:	4629      	mov	r1, r5
   830ee:	f641 4331 	movw	r3, #7217	; 0x1c31
   830f2:	f2c0 0308 	movt	r3, #8
   830f6:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   830f8:	f648 21f8 	movw	r1, #35576	; 0x8af8
   830fc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83100:	680a      	ldr	r2, [r1, #0]
   83102:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   83104:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   83106:	4298      	cmp	r0, r3
   83108:	bf34      	ite	cc
   8310a:	2000      	movcc	r0, #0
   8310c:	2001      	movcs	r0, #1
   8310e:	bd38      	pop	{r3, r4, r5, pc}

00083110 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   83110:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   83112:	4603      	mov	r3, r0
   83114:	b930      	cbnz	r0, 83124 <vTaskSetTimeOutState+0x14>
   83116:	f641 5325 	movw	r3, #7461	; 0x1d25
   8311a:	f2c0 0308 	movt	r3, #8
   8311e:	4798      	blx	r3
   83120:	bf00      	nop
   83122:	e7fd      	b.n	83120 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   83124:	f648 3210 	movw	r2, #35600	; 0x8b10
   83128:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8312c:	6810      	ldr	r0, [r2, #0]
   8312e:	6018      	str	r0, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   83130:	f648 3114 	movw	r1, #35604	; 0x8b14
   83134:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83138:	880a      	ldrh	r2, [r1, #0]
   8313a:	809a      	strh	r2, [r3, #4]
   8313c:	bd08      	pop	{r3, pc}
   8313e:	bf00      	nop

00083140 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   83140:	b538      	push	{r3, r4, r5, lr}
   83142:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   83144:	4604      	mov	r4, r0
   83146:	b930      	cbnz	r0, 83156 <xTaskCheckForTimeOut+0x16>
   83148:	f641 5325 	movw	r3, #7461	; 0x1d25
   8314c:	f2c0 0308 	movt	r3, #8
   83150:	4798      	blx	r3
   83152:	bf00      	nop
   83154:	e7fd      	b.n	83152 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   83156:	b931      	cbnz	r1, 83166 <xTaskCheckForTimeOut+0x26>
   83158:	f641 5525 	movw	r5, #7461	; 0x1d25
   8315c:	f2c0 0508 	movt	r5, #8
   83160:	47a8      	blx	r5
   83162:	bf00      	nop
   83164:	e7fd      	b.n	83162 <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
   83166:	f641 5339 	movw	r3, #7481	; 0x1d39
   8316a:	f2c0 0308 	movt	r3, #8
   8316e:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   83170:	8828      	ldrh	r0, [r5, #0]
   83172:	f64f 72ff 	movw	r2, #65535	; 0xffff
   83176:	4290      	cmp	r0, r2
   83178:	d02c      	beq.n	831d4 <xTaskCheckForTimeOut+0x94>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   8317a:	f648 3110 	movw	r1, #35600	; 0x8b10
   8317e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83182:	680b      	ldr	r3, [r1, #0]
   83184:	6822      	ldr	r2, [r4, #0]
   83186:	429a      	cmp	r2, r3
   83188:	d008      	beq.n	8319c <xTaskCheckForTimeOut+0x5c>
   8318a:	f648 3114 	movw	r1, #35604	; 0x8b14
   8318e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83192:	880b      	ldrh	r3, [r1, #0]
   83194:	b29a      	uxth	r2, r3
   83196:	88a1      	ldrh	r1, [r4, #4]
   83198:	4291      	cmp	r1, r2
   8319a:	d91e      	bls.n	831da <xTaskCheckForTimeOut+0x9a>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   8319c:	f648 3314 	movw	r3, #35604	; 0x8b14
   831a0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   831a4:	8819      	ldrh	r1, [r3, #0]
   831a6:	88a2      	ldrh	r2, [r4, #4]
   831a8:	1a8b      	subs	r3, r1, r2
   831aa:	b299      	uxth	r1, r3
   831ac:	4288      	cmp	r0, r1
   831ae:	d917      	bls.n	831e0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   831b0:	f648 3314 	movw	r3, #35604	; 0x8b14
   831b4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   831b8:	8819      	ldrh	r1, [r3, #0]
   831ba:	b28b      	uxth	r3, r1
   831bc:	1ad2      	subs	r2, r2, r3
   831be:	1880      	adds	r0, r0, r2
   831c0:	8028      	strh	r0, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   831c2:	4620      	mov	r0, r4
   831c4:	f243 1411 	movw	r4, #12561	; 0x3111
   831c8:	f2c0 0408 	movt	r4, #8
   831cc:	47a0      	blx	r4
			xReturn = pdFALSE;
   831ce:	f04f 0400 	mov.w	r4, #0
   831d2:	e007      	b.n	831e4 <xTaskCheckForTimeOut+0xa4>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   831d4:	f04f 0400 	mov.w	r4, #0
   831d8:	e004      	b.n	831e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   831da:	f04f 0401 	mov.w	r4, #1
   831de:	e001      	b.n	831e4 <xTaskCheckForTimeOut+0xa4>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   831e0:	f04f 0401 	mov.w	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   831e4:	f641 5161 	movw	r1, #7521	; 0x1d61
   831e8:	f2c0 0108 	movt	r1, #8
   831ec:	4788      	blx	r1

	return xReturn;
}
   831ee:	4620      	mov	r0, r4
   831f0:	bd38      	pop	{r3, r4, r5, pc}
   831f2:	bf00      	nop

000831f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   831f4:	f648 3334 	movw	r3, #35636	; 0x8b34
   831f8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   831fc:	f04f 0201 	mov.w	r2, #1
   83200:	601a      	str	r2, [r3, #0]
   83202:	4770      	bx	lr

00083204 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   83204:	f648 23f8 	movw	r3, #35576	; 0x8af8
   83208:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8320c:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   8320e:	4770      	bx	lr

00083210 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   83210:	f648 13f8 	movw	r3, #35320	; 0x89f8
   83214:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83218:	6818      	ldr	r0, [r3, #0]
   8321a:	b148      	cbz	r0, 83230 <xTaskGetSchedulerState+0x20>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8321c:	f648 21f4 	movw	r1, #35572	; 0x8af4
   83220:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83224:	680a      	ldr	r2, [r1, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   83226:	2a00      	cmp	r2, #0
   83228:	bf14      	ite	ne
   8322a:	2002      	movne	r0, #2
   8322c:	2001      	moveq	r0, #1
   8322e:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   83230:	f04f 0000 	mov.w	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   83234:	4770      	bx	lr
   83236:	bf00      	nop

00083238 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   83238:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   8323a:	4604      	mov	r4, r0
   8323c:	2800      	cmp	r0, #0
   8323e:	d04e      	beq.n	832de <vTaskPriorityInherit+0xa6>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   83240:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   83242:	f648 22f8 	movw	r2, #35576	; 0x8af8
   83246:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8324a:	6810      	ldr	r0, [r2, #0]
   8324c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   8324e:	428b      	cmp	r3, r1
   83250:	d245      	bcs.n	832de <vTaskPriorityInherit+0xa6>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   83252:	f648 22f8 	movw	r2, #35576	; 0x8af8
   83256:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8325a:	6810      	ldr	r0, [r2, #0]
   8325c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   8325e:	f1c1 020a 	rsb	r2, r1, #10
   83262:	8322      	strh	r2, [r4, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   83264:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   83268:	f648 202c 	movw	r0, #35372	; 0x8a2c
   8326c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83270:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   83274:	6962      	ldr	r2, [r4, #20]
   83276:	428a      	cmp	r2, r1
   83278:	d12a      	bne.n	832d0 <vTaskPriorityInherit+0x98>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   8327a:	f104 0504 	add.w	r5, r4, #4
   8327e:	4628      	mov	r0, r5
   83280:	f641 4295 	movw	r2, #7317	; 0x1c95
   83284:	f2c0 0208 	movt	r2, #8
   83288:	4790      	blx	r2
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   8328a:	f648 23f8 	movw	r3, #35576	; 0x8af8
   8328e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83292:	6818      	ldr	r0, [r3, #0]
   83294:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   83296:	62e1      	str	r1, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   83298:	f648 2228 	movw	r2, #35368	; 0x8a28
   8329c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   832a0:	6813      	ldr	r3, [r2, #0]
   832a2:	4299      	cmp	r1, r3
   832a4:	d904      	bls.n	832b0 <vTaskPriorityInherit+0x78>
   832a6:	f648 2028 	movw	r0, #35368	; 0x8a28
   832aa:	f2c2 0007 	movt	r0, #8199	; 0x2007
   832ae:	6001      	str	r1, [r0, #0]
   832b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   832b4:	f648 222c 	movw	r2, #35372	; 0x8a2c
   832b8:	4613      	mov	r3, r2
   832ba:	f2c2 0307 	movt	r3, #8199	; 0x2007
   832be:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   832c2:	4629      	mov	r1, r5
   832c4:	f641 4231 	movw	r2, #7217	; 0x1c31
   832c8:	f2c0 0208 	movt	r2, #8
   832cc:	4790      	blx	r2
   832ce:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   832d0:	f648 23f8 	movw	r3, #35576	; 0x8af8
   832d4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   832d8:	6818      	ldr	r0, [r3, #0]
   832da:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   832dc:	62e1      	str	r1, [r4, #44]	; 0x2c
   832de:	bd38      	pop	{r3, r4, r5, pc}

000832e0 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   832e0:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   832e2:	4604      	mov	r4, r0
   832e4:	b350      	cbz	r0, 8333c <vTaskPriorityDisinherit+0x5c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   832e6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   832e8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   832ea:	429a      	cmp	r2, r3
   832ec:	d026      	beq.n	8333c <vTaskPriorityDisinherit+0x5c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   832ee:	f100 0504 	add.w	r5, r0, #4
   832f2:	4628      	mov	r0, r5
   832f4:	f641 4195 	movw	r1, #7317	; 0x1c95
   832f8:	f2c0 0108 	movt	r1, #8
   832fc:	4788      	blx	r1
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   832fe:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   83300:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   83302:	f1c0 020a 	rsb	r2, r0, #10
   83306:	8322      	strh	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   83308:	f648 2328 	movw	r3, #35368	; 0x8a28
   8330c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83310:	6819      	ldr	r1, [r3, #0]
   83312:	4288      	cmp	r0, r1
   83314:	d904      	bls.n	83320 <vTaskPriorityDisinherit+0x40>
   83316:	f648 2228 	movw	r2, #35368	; 0x8a28
   8331a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8331e:	6010      	str	r0, [r2, #0]
   83320:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   83324:	f648 202c 	movw	r0, #35372	; 0x8a2c
   83328:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8332c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   83330:	4629      	mov	r1, r5
   83332:	f641 4231 	movw	r2, #7217	; 0x1c31
   83336:	f2c0 0208 	movt	r2, #8
   8333a:	4790      	blx	r2
   8333c:	bd38      	pop	{r3, r4, r5, pc}
   8333e:	bf00      	nop

00083340 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   83340:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   83342:	f641 5339 	movw	r3, #7481	; 0x1d39
   83346:	f2c0 0308 	movt	r3, #8
   8334a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   8334c:	f648 3070 	movw	r0, #35696	; 0x8b70
   83350:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83354:	6801      	ldr	r1, [r0, #0]
   83356:	bb49      	cbnz	r1, 833ac <prvCheckForValidListAndQueue+0x6c>
		{
			vListInitialise( &xActiveTimerList1 );
   83358:	f648 3544 	movw	r5, #35652	; 0x8b44
   8335c:	f2c2 0507 	movt	r5, #8199	; 0x2007
   83360:	4628      	mov	r0, r5
   83362:	f641 4611 	movw	r6, #7185	; 0x1c11
   83366:	f2c0 0608 	movt	r6, #8
   8336a:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   8336c:	f648 3458 	movw	r4, #35672	; 0x8b58
   83370:	f2c2 0407 	movt	r4, #8199	; 0x2007
   83374:	4620      	mov	r0, r4
   83376:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   83378:	f648 3240 	movw	r2, #35648	; 0x8b40
   8337c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83380:	6015      	str	r5, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   83382:	f648 3374 	movw	r3, #35700	; 0x8b74
   83386:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8338a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   8338c:	f04f 0005 	mov.w	r0, #5
   83390:	f04f 010c 	mov.w	r1, #12
   83394:	f04f 0200 	mov.w	r2, #0
   83398:	f242 13d1 	movw	r3, #8657	; 0x21d1
   8339c:	f2c0 0308 	movt	r3, #8
   833a0:	4798      	blx	r3
   833a2:	f648 3170 	movw	r1, #35696	; 0x8b70
   833a6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   833aa:	6008      	str	r0, [r1, #0]
		}
	}
	taskEXIT_CRITICAL();
   833ac:	f641 5061 	movw	r0, #7521	; 0x1d61
   833b0:	f2c0 0008 	movt	r0, #8
   833b4:	4780      	blx	r0
   833b6:	bd70      	pop	{r4, r5, r6, pc}

000833b8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   833b8:	b510      	push	{r4, lr}
   833ba:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   833bc:	8081      	strh	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   833be:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   833c0:	4291      	cmp	r1, r2
   833c2:	d813      	bhi.n	833ec <prvInsertTimerInActiveList+0x34>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   833c4:	1ad0      	subs	r0, r2, r3
   833c6:	8b21      	ldrh	r1, [r4, #24]
   833c8:	b283      	uxth	r3, r0
   833ca:	4299      	cmp	r1, r3
   833cc:	d921      	bls.n	83412 <prvInsertTimerInActiveList+0x5a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   833ce:	f648 3274 	movw	r2, #35700	; 0x8b74
   833d2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   833d6:	6810      	ldr	r0, [r2, #0]
   833d8:	f104 0104 	add.w	r1, r4, #4
   833dc:	f641 4351 	movw	r3, #7249	; 0x1c51
   833e0:	f2c0 0308 	movt	r3, #8
   833e4:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   833e6:	f04f 0000 	mov.w	r0, #0
   833ea:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   833ec:	429a      	cmp	r2, r3
   833ee:	d201      	bcs.n	833f4 <prvInsertTimerInActiveList+0x3c>
   833f0:	4299      	cmp	r1, r3
   833f2:	d211      	bcs.n	83418 <prvInsertTimerInActiveList+0x60>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   833f4:	f648 3340 	movw	r3, #35648	; 0x8b40
   833f8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   833fc:	6818      	ldr	r0, [r3, #0]
   833fe:	f104 0104 	add.w	r1, r4, #4
   83402:	f641 4251 	movw	r2, #7249	; 0x1c51
   83406:	f2c0 0208 	movt	r2, #8
   8340a:	4790      	blx	r2
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   8340c:	f04f 0000 	mov.w	r0, #0
   83410:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   83412:	f04f 0001 	mov.w	r0, #1
   83416:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   83418:	f04f 0001 	mov.w	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   8341c:	bd10      	pop	{r4, pc}
   8341e:	bf00      	nop

00083420 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   83420:	b510      	push	{r4, lr}
   83422:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   83424:	f243 3341 	movw	r3, #13121	; 0x3341
   83428:	f2c0 0308 	movt	r3, #8
   8342c:	4798      	blx	r3

	if( xTimerQueue != NULL )
   8342e:	f648 3070 	movw	r0, #35696	; 0x8b70
   83432:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83436:	6801      	ldr	r1, [r0, #0]
   83438:	b1b9      	cbz	r1, 8346a <xTimerCreateTimerTask+0x4a>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   8343a:	f04f 0209 	mov.w	r2, #9
   8343e:	9200      	str	r2, [sp, #0]
   83440:	f04f 0300 	mov.w	r3, #0
   83444:	9301      	str	r3, [sp, #4]
   83446:	9302      	str	r3, [sp, #8]
   83448:	9303      	str	r3, [sp, #12]
   8344a:	f243 50c9 	movw	r0, #13769	; 0x35c9
   8344e:	f2c0 0008 	movt	r0, #8
   83452:	f646 71d4 	movw	r1, #28628	; 0x6fd4
   83456:	f2c0 0108 	movt	r1, #8
   8345a:	f44f 7200 	mov.w	r2, #512	; 0x200
   8345e:	f242 7415 	movw	r4, #10005	; 0x2715
   83462:	f2c0 0408 	movt	r4, #8
   83466:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   83468:	b930      	cbnz	r0, 83478 <xTimerCreateTimerTask+0x58>
   8346a:	f641 5425 	movw	r4, #7461	; 0x1d25
   8346e:	f2c0 0408 	movt	r4, #8
   83472:	47a0      	blx	r4
   83474:	bf00      	nop
   83476:	e7fd      	b.n	83474 <xTimerCreateTimerTask+0x54>
	return xReturn;
}
   83478:	b004      	add	sp, #16
   8347a:	bd10      	pop	{r4, pc}

0008347c <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   8347c:	b510      	push	{r4, lr}
   8347e:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   83480:	f648 3470 	movw	r4, #35696	; 0x8b70
   83484:	f2c2 0407 	movt	r4, #8199	; 0x2007
   83488:	6824      	ldr	r4, [r4, #0]
   8348a:	b33c      	cbz	r4, 834dc <xTimerGenericCommand+0x60>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   8348c:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   8348e:	f8ad 2008 	strh.w	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   83492:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   83494:	b9bb      	cbnz	r3, 834c6 <xTimerGenericCommand+0x4a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   83496:	f243 2311 	movw	r3, #12817	; 0x3211
   8349a:	f2c0 0308 	movt	r3, #8
   8349e:	4798      	blx	r3
   834a0:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   834a2:	f648 3370 	movw	r3, #35696	; 0x8b70
   834a6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   834aa:	6818      	ldr	r0, [r3, #0]
   834ac:	a901      	add	r1, sp, #4
   834ae:	bf07      	ittee	eq
   834b0:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
   834b4:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   834b6:	2200      	movne	r2, #0
   834b8:	4613      	movne	r3, r2
   834ba:	f242 243d 	movw	r4, #8765	; 0x223d
   834be:	f2c0 0408 	movt	r4, #8
   834c2:	47a0      	blx	r4
   834c4:	e00c      	b.n	834e0 <xTimerGenericCommand+0x64>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   834c6:	4620      	mov	r0, r4
   834c8:	a901      	add	r1, sp, #4
   834ca:	461a      	mov	r2, r3
   834cc:	f04f 0300 	mov.w	r3, #0
   834d0:	f242 34bd 	movw	r4, #9149	; 0x23bd
   834d4:	f2c0 0408 	movt	r4, #8
   834d8:	47a0      	blx	r4
   834da:	e001      	b.n	834e0 <xTimerGenericCommand+0x64>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   834dc:	f04f 0000 	mov.w	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   834e0:	b004      	add	sp, #16
   834e2:	bd10      	pop	{r4, pc}

000834e4 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   834e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   834e8:	b085      	sub	sp, #20
   834ea:	4682      	mov	sl, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   834ec:	f642 236d 	movw	r3, #10861	; 0x2a6d
   834f0:	f2c0 0308 	movt	r3, #8
   834f4:	4798      	blx	r3
   834f6:	4681      	mov	r9, r0

	if( xTimeNow < xLastTime )
   834f8:	f648 306c 	movw	r0, #35692	; 0x8b6c
   834fc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83500:	8801      	ldrh	r1, [r0, #0]
   83502:	4549      	cmp	r1, r9
   83504:	d951      	bls.n	835aa <prvSampleTimeNow+0xc6>
   83506:	e02d      	b.n	83564 <prvSampleTimeNow+0x80>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   83508:	68dc      	ldr	r4, [r3, #12]
   8350a:	8826      	ldrh	r6, [r4, #0]
   8350c:	b2b6      	uxth	r6, r6

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   8350e:	68dd      	ldr	r5, [r3, #12]
   83510:	68ec      	ldr	r4, [r5, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   83512:	f104 0504 	add.w	r5, r4, #4
   83516:	4628      	mov	r0, r5
   83518:	47c0      	blx	r8

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8351a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   8351c:	4620      	mov	r0, r4
   8351e:	4788      	blx	r1

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   83520:	69e0      	ldr	r0, [r4, #28]
   83522:	2801      	cmp	r0, #1
   83524:	d12d      	bne.n	83582 <prvSampleTimeNow+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   83526:	8b23      	ldrh	r3, [r4, #24]
   83528:	18f2      	adds	r2, r6, r3
   8352a:	b291      	uxth	r1, r2
			if( xReloadTime > xNextExpireTime )
   8352c:	42b1      	cmp	r1, r6
   8352e:	d909      	bls.n	83544 <prvSampleTimeNow+0x60>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   83530:	80a1      	strh	r1, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   83532:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   83534:	6838      	ldr	r0, [r7, #0]
   83536:	4629      	mov	r1, r5
   83538:	f641 4351 	movw	r3, #7249	; 0x1c51
   8353c:	f2c0 0308 	movt	r3, #8
   83540:	4798      	blx	r3
   83542:	e01e      	b.n	83582 <prvSampleTimeNow+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   83544:	f8cd b000 	str.w	fp, [sp]
   83548:	4620      	mov	r0, r4
   8354a:	4659      	mov	r1, fp
   8354c:	4632      	mov	r2, r6
   8354e:	465b      	mov	r3, fp
   83550:	9c03      	ldr	r4, [sp, #12]
   83552:	47a0      	blx	r4
				configASSERT( xResult );
   83554:	b9a8      	cbnz	r0, 83582 <prvSampleTimeNow+0x9e>
   83556:	f641 5725 	movw	r7, #7461	; 0x1d25
   8355a:	f2c0 0708 	movt	r7, #8
   8355e:	47b8      	blx	r7
   83560:	bf00      	nop
   83562:	e7fd      	b.n	83560 <prvSampleTimeNow+0x7c>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   83564:	f648 3740 	movw	r7, #35648	; 0x8b40
   83568:	f2c2 0707 	movt	r7, #8199	; 0x2007
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   8356c:	f641 4895 	movw	r8, #7317	; 0x1c95
   83570:	f2c0 0808 	movt	r8, #8
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   83574:	f04f 0b00 	mov.w	fp, #0
   83578:	f243 437d 	movw	r3, #13437	; 0x347d
   8357c:	f2c0 0308 	movt	r3, #8
   83580:	9303      	str	r3, [sp, #12]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   83582:	683b      	ldr	r3, [r7, #0]
   83584:	6818      	ldr	r0, [r3, #0]
   83586:	2800      	cmp	r0, #0
   83588:	d1be      	bne.n	83508 <prvSampleTimeNow+0x24>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   8358a:	f648 3274 	movw	r2, #35700	; 0x8b74
   8358e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83592:	6811      	ldr	r1, [r2, #0]
   83594:	f648 3040 	movw	r0, #35648	; 0x8b40
   83598:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8359c:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   8359e:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   835a0:	f04f 0301 	mov.w	r3, #1
   835a4:	f8ca 3000 	str.w	r3, [sl]
   835a8:	e003      	b.n	835b2 <prvSampleTimeNow+0xce>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   835aa:	f04f 0200 	mov.w	r2, #0
   835ae:	f8ca 2000 	str.w	r2, [sl]
	}

	xLastTime = xTimeNow;
   835b2:	f648 326c 	movw	r2, #35692	; 0x8b6c
   835b6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   835ba:	f8a2 9000 	strh.w	r9, [r2]

	return xTimeNow;
}
   835be:	4648      	mov	r0, r9
   835c0:	b005      	add	sp, #20
   835c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   835c6:	bf00      	nop

000835c8 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   835c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   835cc:	b089      	sub	sp, #36	; 0x24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   835ce:	f648 3b40 	movw	fp, #35648	; 0x8b40
   835d2:	f2c2 0b07 	movt	fp, #8199	; 0x2007
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   835d6:	f642 2359 	movw	r3, #10841	; 0x2a59
   835da:	f2c0 0308 	movt	r3, #8
   835de:	9303      	str	r3, [sp, #12]
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   835e0:	f243 4ae5 	movw	sl, #13541	; 0x34e5
   835e4:	f2c0 0a08 	movt	sl, #8
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   835e8:	f8db 0000 	ldr.w	r0, [fp]
   835ec:	6802      	ldr	r2, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
   835ee:	2a00      	cmp	r2, #0
   835f0:	f000 80cd 	beq.w	8378e <prvTimerTask+0x1c6>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   835f4:	68c7      	ldr	r7, [r0, #12]
   835f6:	883b      	ldrh	r3, [r7, #0]
   835f8:	b29d      	uxth	r5, r3
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   835fa:	9803      	ldr	r0, [sp, #12]
   835fc:	4780      	blx	r0
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   835fe:	a804      	add	r0, sp, #16
   83600:	47d0      	blx	sl
   83602:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   83604:	9a04      	ldr	r2, [sp, #16]
   83606:	2a00      	cmp	r2, #0
   83608:	d152      	bne.n	836b0 <prvTimerTask+0xe8>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   8360a:	4285      	cmp	r5, r0
   8360c:	d838      	bhi.n	83680 <prvTimerTask+0xb8>
			{
				xTaskResumeAll();
   8360e:	f642 4031 	movw	r0, #11313	; 0x2c31
   83612:	f2c0 0008 	movt	r0, #8
   83616:	4780      	blx	r0
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   83618:	f8db 2000 	ldr.w	r2, [fp]
   8361c:	68d1      	ldr	r1, [r2, #12]
   8361e:	68cc      	ldr	r4, [r1, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   83620:	f104 0004 	add.w	r0, r4, #4
   83624:	f641 4795 	movw	r7, #7317	; 0x1c95
   83628:	f2c0 0708 	movt	r7, #8
   8362c:	47b8      	blx	r7
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8362e:	69e3      	ldr	r3, [r4, #28]
   83630:	2b01      	cmp	r3, #1
   83632:	d11f      	bne.n	83674 <prvTimerTask+0xac>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   83634:	8b20      	ldrh	r0, [r4, #24]
   83636:	182a      	adds	r2, r5, r0
   83638:	4620      	mov	r0, r4
   8363a:	b291      	uxth	r1, r2
   8363c:	4632      	mov	r2, r6
   8363e:	462b      	mov	r3, r5
   83640:	f243 36b9 	movw	r6, #13241	; 0x33b9
   83644:	f2c0 0608 	movt	r6, #8
   83648:	47b0      	blx	r6
   8364a:	2801      	cmp	r0, #1
   8364c:	d112      	bne.n	83674 <prvTimerTask+0xac>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   8364e:	f04f 0300 	mov.w	r3, #0
   83652:	9300      	str	r3, [sp, #0]
   83654:	4620      	mov	r0, r4
   83656:	4619      	mov	r1, r3
   83658:	462a      	mov	r2, r5
   8365a:	f243 457d 	movw	r5, #13437	; 0x347d
   8365e:	f2c0 0508 	movt	r5, #8
   83662:	47a8      	blx	r5
			configASSERT( xResult );
   83664:	b930      	cbnz	r0, 83674 <prvTimerTask+0xac>
   83666:	f641 5725 	movw	r7, #7461	; 0x1d25
   8366a:	f2c0 0708 	movt	r7, #8
   8366e:	47b8      	blx	r7
   83670:	bf00      	nop
   83672:	e7fd      	b.n	83670 <prvTimerTask+0xa8>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   83674:	6a61      	ldr	r1, [r4, #36]	; 0x24
   83676:	4620      	mov	r0, r4
   83678:	4788      	blx	r1
   8367a:	e01e      	b.n	836ba <prvTimerTask+0xf2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   8367c:	f04f 0500 	mov.w	r5, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   83680:	1bae      	subs	r6, r5, r6
   83682:	f648 3470 	movw	r4, #35696	; 0x8b70
   83686:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8368a:	6820      	ldr	r0, [r4, #0]
   8368c:	b2b1      	uxth	r1, r6
   8368e:	f242 653d 	movw	r5, #9789	; 0x263d
   83692:	f2c0 0508 	movt	r5, #8
   83696:	47a8      	blx	r5

				if( xTaskResumeAll() == pdFALSE )
   83698:	f642 4731 	movw	r7, #11313	; 0x2c31
   8369c:	f2c0 0708 	movt	r7, #8
   836a0:	47b8      	blx	r7
   836a2:	b950      	cbnz	r0, 836ba <prvTimerTask+0xf2>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   836a4:	f641 5315 	movw	r3, #7445	; 0x1d15
   836a8:	f2c0 0308 	movt	r3, #8
   836ac:	4798      	blx	r3
   836ae:	e004      	b.n	836ba <prvTimerTask+0xf2>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   836b0:	f642 4131 	movw	r1, #11313	; 0x2c31
   836b4:	f2c0 0108 	movt	r1, #8
   836b8:	4788      	blx	r1
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   836ba:	a804      	add	r0, sp, #16
   836bc:	47d0      	blx	sl
   836be:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   836c0:	f648 3670 	movw	r6, #35696	; 0x8b70
   836c4:	f2c2 0607 	movt	r6, #8199	; 0x2007
   836c8:	f242 456d 	movw	r5, #9325	; 0x246d
   836cc:	f2c0 0508 	movt	r5, #8
		if( pxTimer != NULL )
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   836d0:	f641 4895 	movw	r8, #7317	; 0x1c95
   836d4:	f2c0 0808 	movt	r8, #8
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   836d8:	f243 39b9 	movw	r9, #13241	; 0x33b9
   836dc:	f2c0 0908 	movt	r9, #8
   836e0:	e04c      	b.n	8377c <prvTimerTask+0x1b4>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   836e2:	9c07      	ldr	r4, [sp, #28]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   836e4:	b124      	cbz	r4, 836f0 <prvTimerTask+0x128>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   836e6:	6963      	ldr	r3, [r4, #20]
   836e8:	b113      	cbz	r3, 836f0 <prvTimerTask+0x128>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   836ea:	f104 0004 	add.w	r0, r4, #4
   836ee:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   836f0:	9805      	ldr	r0, [sp, #20]
   836f2:	2802      	cmp	r0, #2
   836f4:	d02a      	beq.n	8374c <prvTimerTask+0x184>
   836f6:	2803      	cmp	r0, #3
   836f8:	d03a      	beq.n	83770 <prvTimerTask+0x1a8>
   836fa:	2800      	cmp	r0, #0
   836fc:	d13e      	bne.n	8377c <prvTimerTask+0x1b4>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   836fe:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   83702:	8b22      	ldrh	r2, [r4, #24]
   83704:	1899      	adds	r1, r3, r2
   83706:	4620      	mov	r0, r4
   83708:	b289      	uxth	r1, r1
   8370a:	463a      	mov	r2, r7
   8370c:	47c8      	blx	r9
   8370e:	2801      	cmp	r0, #1
   83710:	d134      	bne.n	8377c <prvTimerTask+0x1b4>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   83712:	6a63      	ldr	r3, [r4, #36]	; 0x24
   83714:	4620      	mov	r0, r4
   83716:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   83718:	69e0      	ldr	r0, [r4, #28]
   8371a:	2801      	cmp	r0, #1
   8371c:	d12e      	bne.n	8377c <prvTimerTask+0x1b4>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   8371e:	8b22      	ldrh	r2, [r4, #24]
   83720:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   83724:	1852      	adds	r2, r2, r1
   83726:	f04f 0300 	mov.w	r3, #0
   8372a:	9300      	str	r3, [sp, #0]
   8372c:	4620      	mov	r0, r4
   8372e:	4619      	mov	r1, r3
   83730:	b292      	uxth	r2, r2
   83732:	f243 447d 	movw	r4, #13437	; 0x347d
   83736:	f2c0 0408 	movt	r4, #8
   8373a:	47a0      	blx	r4
						configASSERT( xResult );
   8373c:	b9f0      	cbnz	r0, 8377c <prvTimerTask+0x1b4>
   8373e:	f641 5525 	movw	r5, #7461	; 0x1d25
   83742:	f2c0 0508 	movt	r5, #8
   83746:	47a8      	blx	r5
   83748:	bf00      	nop
   8374a:	e7fd      	b.n	83748 <prvTimerTask+0x180>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   8374c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   83750:	8320      	strh	r0, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   83752:	b930      	cbnz	r0, 83762 <prvTimerTask+0x19a>
   83754:	f641 5625 	movw	r6, #7461	; 0x1d25
   83758:	f2c0 0608 	movt	r6, #8
   8375c:	47b0      	blx	r6
   8375e:	bf00      	nop
   83760:	e7fd      	b.n	8375e <prvTimerTask+0x196>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   83762:	1839      	adds	r1, r7, r0
   83764:	4620      	mov	r0, r4
   83766:	b289      	uxth	r1, r1
   83768:	463a      	mov	r2, r7
   8376a:	463b      	mov	r3, r7
   8376c:	47c8      	blx	r9
   8376e:	e005      	b.n	8377c <prvTimerTask+0x1b4>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   83770:	4620      	mov	r0, r4
   83772:	f641 73b1 	movw	r3, #8113	; 0x1fb1
   83776:	f2c0 0308 	movt	r3, #8
   8377a:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   8377c:	6830      	ldr	r0, [r6, #0]
   8377e:	a905      	add	r1, sp, #20
   83780:	f04f 0200 	mov.w	r2, #0
   83784:	4613      	mov	r3, r2
   83786:	47a8      	blx	r5
   83788:	2800      	cmp	r0, #0
   8378a:	d1aa      	bne.n	836e2 <prvTimerTask+0x11a>
   8378c:	e72c      	b.n	835e8 <prvTimerTask+0x20>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   8378e:	9903      	ldr	r1, [sp, #12]
   83790:	4788      	blx	r1
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   83792:	a804      	add	r0, sp, #16
   83794:	47d0      	blx	sl
   83796:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   83798:	9c04      	ldr	r4, [sp, #16]
   8379a:	2c00      	cmp	r4, #0
   8379c:	f43f af6e 	beq.w	8367c <prvTimerTask+0xb4>
   837a0:	e786      	b.n	836b0 <prvTimerTask+0xe8>
   837a2:	bf00      	nop

000837a4 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   837a4:	b4f0      	push	{r4, r5, r6, r7}
   837a6:	b08c      	sub	sp, #48	; 0x30
   837a8:	4606      	mov	r6, r0
   837aa:	460f      	mov	r7, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   837ac:	ac01      	add	r4, sp, #4
   837ae:	f646 75dc 	movw	r5, #28636	; 0x6fdc
   837b2:	f2c0 0508 	movt	r5, #8
   837b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   837b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   837ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   837bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   837be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   837c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   837c6:	9b01      	ldr	r3, [sp, #4]
   837c8:	fbb7 f0f3 	udiv	r0, r7, r3
   837cc:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   837d0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   837d4:	d952      	bls.n	8387c <pwm_clocks_generate+0xd8>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   837d6:	9902      	ldr	r1, [sp, #8]
   837d8:	fbb7 f2f1 	udiv	r2, r7, r1
   837dc:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   837e0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   837e4:	d94d      	bls.n	83882 <pwm_clocks_generate+0xde>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   837e6:	9b03      	ldr	r3, [sp, #12]
   837e8:	fbb7 f0f3 	udiv	r0, r7, r3
   837ec:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   837f0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   837f4:	d948      	bls.n	83888 <pwm_clocks_generate+0xe4>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   837f6:	9904      	ldr	r1, [sp, #16]
   837f8:	fbb7 f2f1 	udiv	r2, r7, r1
   837fc:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   83800:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83804:	d943      	bls.n	8388e <pwm_clocks_generate+0xea>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   83806:	9b05      	ldr	r3, [sp, #20]
   83808:	fbb7 f0f3 	udiv	r0, r7, r3
   8380c:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   83810:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83814:	d93e      	bls.n	83894 <pwm_clocks_generate+0xf0>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   83816:	9906      	ldr	r1, [sp, #24]
   83818:	fbb7 f2f1 	udiv	r2, r7, r1
   8381c:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   83820:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83824:	d939      	bls.n	8389a <pwm_clocks_generate+0xf6>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   83826:	9b07      	ldr	r3, [sp, #28]
   83828:	fbb7 f0f3 	udiv	r0, r7, r3
   8382c:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   83830:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83834:	d934      	bls.n	838a0 <pwm_clocks_generate+0xfc>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   83836:	9908      	ldr	r1, [sp, #32]
   83838:	fbb7 f2f1 	udiv	r2, r7, r1
   8383c:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   83840:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83844:	d92f      	bls.n	838a6 <pwm_clocks_generate+0x102>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   83846:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83848:	fbb7 f0f3 	udiv	r0, r7, r3
   8384c:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   83850:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83854:	d92a      	bls.n	838ac <pwm_clocks_generate+0x108>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   83856:	990a      	ldr	r1, [sp, #40]	; 0x28
   83858:	fbb7 f2f1 	udiv	r2, r7, r1
   8385c:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   83860:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83864:	d925      	bls.n	838b2 <pwm_clocks_generate+0x10e>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   83866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83868:	fbb7 f0f3 	udiv	r0, r7, r3
   8386c:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   83870:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83874:	d920      	bls.n	838b8 <pwm_clocks_generate+0x114>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   83876:	f64f 70ff 	movw	r0, #65535	; 0xffff
   8387a:	e021      	b.n	838c0 <pwm_clocks_generate+0x11c>
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   8387c:	f04f 0200 	mov.w	r2, #0
   83880:	e01c      	b.n	838bc <pwm_clocks_generate+0x118>
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
			break;
		}
		ul_pre++;
   83882:	f04f 0201 	mov.w	r2, #1
   83886:	e019      	b.n	838bc <pwm_clocks_generate+0x118>
   83888:	f04f 0202 	mov.w	r2, #2
   8388c:	e016      	b.n	838bc <pwm_clocks_generate+0x118>
   8388e:	f04f 0203 	mov.w	r2, #3
   83892:	e013      	b.n	838bc <pwm_clocks_generate+0x118>
   83894:	f04f 0204 	mov.w	r2, #4
   83898:	e010      	b.n	838bc <pwm_clocks_generate+0x118>
   8389a:	f04f 0205 	mov.w	r2, #5
   8389e:	e00d      	b.n	838bc <pwm_clocks_generate+0x118>
   838a0:	f04f 0206 	mov.w	r2, #6
   838a4:	e00a      	b.n	838bc <pwm_clocks_generate+0x118>
   838a6:	f04f 0207 	mov.w	r2, #7
   838aa:	e007      	b.n	838bc <pwm_clocks_generate+0x118>
   838ac:	f04f 0208 	mov.w	r2, #8
   838b0:	e004      	b.n	838bc <pwm_clocks_generate+0x118>
   838b2:	f04f 0209 	mov.w	r2, #9
   838b6:	e001      	b.n	838bc <pwm_clocks_generate+0x118>
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   838b8:	f04f 020a 	mov.w	r2, #10
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
   838bc:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
	}
}
   838c0:	b00c      	add	sp, #48	; 0x30
   838c2:	bcf0      	pop	{r4, r5, r6, r7}
   838c4:	4770      	bx	lr
   838c6:	bf00      	nop

000838c8 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   838c8:	b570      	push	{r4, r5, r6, lr}
   838ca:	4606      	mov	r6, r0
   838cc:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   838ce:	6808      	ldr	r0, [r1, #0]
   838d0:	b158      	cbz	r0, 838ea <pwm_init+0x22>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   838d2:	6889      	ldr	r1, [r1, #8]
   838d4:	f243 73a5 	movw	r3, #14245	; 0x37a5
   838d8:	f2c0 0308 	movt	r3, #8
   838dc:	4798      	blx	r3
		if (result == PWM_INVALID_ARGUMENT) {
   838de:	f64f 71ff 	movw	r1, #65535	; 0xffff
   838e2:	4288      	cmp	r0, r1
   838e4:	d014      	beq.n	83910 <pwm_init+0x48>
			return result;
		}

		clock = result;
   838e6:	4605      	mov	r5, r0
   838e8:	e001      	b.n	838ee <pwm_init+0x26>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   838ea:	f04f 0500 	mov.w	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   838ee:	6860      	ldr	r0, [r4, #4]
   838f0:	b158      	cbz	r0, 8390a <pwm_init+0x42>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   838f2:	68a1      	ldr	r1, [r4, #8]
   838f4:	f243 72a5 	movw	r2, #14245	; 0x37a5
   838f8:	f2c0 0208 	movt	r2, #8
   838fc:	4790      	blx	r2

		if (result == PWM_INVALID_ARGUMENT) {
   838fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   83902:	4298      	cmp	r0, r3
   83904:	d004      	beq.n	83910 <pwm_init+0x48>
			return result;
		}

		clock |= (result << 16);
   83906:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   8390a:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   8390c:	f04f 0000 	mov.w	r0, #0
}
   83910:	bd70      	pop	{r4, r5, r6, pc}
   83912:	bf00      	nop

00083914 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   83914:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   83916:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   83918:	8a8d      	ldrh	r5, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8391a:	684a      	ldr	r2, [r1, #4]
   8391c:	f002 040f 	and.w	r4, r2, #15
   83920:	4325      	orrs	r5, r4
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   83922:	890e      	ldrh	r6, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   83924:	4335      	orrs	r5, r6
   83926:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   83928:	ea45 2542 	orr.w	r5, r5, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   8392c:	7d8c      	ldrb	r4, [r1, #22]
   8392e:	ea45 4604 	orr.w	r6, r5, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   83932:	7dca      	ldrb	r2, [r1, #23]
   83934:	ea46 4542 	orr.w	r5, r6, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   83938:	7e0c      	ldrb	r4, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8393a:	ea45 4684 	orr.w	r6, r5, r4, lsl #18
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   8393e:	f103 0210 	add.w	r2, r3, #16
   83942:	ea4f 1542 	mov.w	r5, r2, lsl #5
   83946:	1944      	adds	r4, r0, r5
   83948:	5146      	str	r6, [r0, r5]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   8394a:	68ce      	ldr	r6, [r1, #12]
   8394c:	6066      	str	r6, [r4, #4]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   8394e:	690a      	ldr	r2, [r1, #16]
   83950:	eb00 1543 	add.w	r5, r0, r3, lsl #5
   83954:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   83958:	7d8c      	ldrb	r4, [r1, #22]
   8395a:	b13c      	cbz	r4, 8396c <pwm_channel_init+0x58>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   8395c:	8b8e      	ldrh	r6, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   8395e:	8b4a      	ldrh	r2, [r1, #26]
   83960:	ea42 4506 	orr.w	r5, r2, r6, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   83964:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   83968:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   8396c:	6c85      	ldr	r5, [r0, #72]	; 0x48
   8396e:	f04f 1601 	mov.w	r6, #65537	; 0x10001
   83972:	fa06 f603 	lsl.w	r6, r6, r3
   83976:	ea6f 0206 	mvn.w	r2, r6
   8397a:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   8397c:	7fce      	ldrb	r6, [r1, #31]
   8397e:	fa06 f603 	lsl.w	r6, r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   83982:	7f8c      	ldrb	r4, [r1, #30]
   83984:	fa04 f403 	lsl.w	r4, r4, r3
   83988:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8398c:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   8398e:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   83990:	6c45      	ldr	r5, [r0, #68]	; 0x44
   83992:	402a      	ands	r2, r5
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   83994:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   83998:	fa05 f503 	lsl.w	r5, r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   8399c:	f891 4020 	ldrb.w	r4, [r1, #32]
   839a0:	fa04 f403 	lsl.w	r4, r4, r3
   839a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   839a8:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   839aa:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   839ac:	f04f 0201 	mov.w	r2, #1
   839b0:	fa02 f203 	lsl.w	r2, r2, r3
	if (p_channel->b_sync_ch) {
   839b4:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   839b8:	b11c      	cbz	r4, 839c2 <pwm_channel_init+0xae>
		p_pwm->PWM_SCM |= channel;
   839ba:	6a04      	ldr	r4, [r0, #32]
   839bc:	4314      	orrs	r4, r2
   839be:	6204      	str	r4, [r0, #32]
   839c0:	e003      	b.n	839ca <pwm_channel_init+0xb6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   839c2:	6a04      	ldr	r4, [r0, #32]
   839c4:	ea24 0402 	bic.w	r4, r4, r2
   839c8:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   839ca:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   839ce:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   839d0:	6e84      	ldr	r4, [r0, #104]	; 0x68
   839d2:	bf0c      	ite	eq
   839d4:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   839d6:	4394      	bicne	r4, r2
   839d8:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   839da:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   839de:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   839e0:	6e84      	ldr	r4, [r0, #104]	; 0x68
   839e2:	bf0c      	ite	eq
   839e4:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   839e8:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   839ec:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   839ee:	2b03      	cmp	r3, #3
   839f0:	d80f      	bhi.n	83a12 <pwm_channel_init+0xfe>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   839f2:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   839f4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   839f8:	f04f 02ff 	mov.w	r2, #255	; 0xff
   839fc:	fa02 f203 	lsl.w	r2, r2, r3
   83a00:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   83a04:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   83a08:	fa01 f303 	lsl.w	r3, r1, r3
   83a0c:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE1 = fault_enable_reg;
   83a0e:	66c2      	str	r2, [r0, #108]	; 0x6c
   83a10:	e010      	b.n	83a34 <pwm_channel_init+0x120>
	} else {
		ch_num -= 4;
   83a12:	f1a3 0304 	sub.w	r3, r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   83a16:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   83a18:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   83a1c:	f04f 02ff 	mov.w	r2, #255	; 0xff
   83a20:	fa02 f203 	lsl.w	r2, r2, r3
   83a24:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   83a28:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   83a2c:	fa01 f303 	lsl.w	r3, r1, r3
   83a30:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE2 = fault_enable_reg;
   83a32:	6702      	str	r2, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   83a34:	f04f 0000 	mov.w	r0, #0
   83a38:	bc70      	pop	{r4, r5, r6}
   83a3a:	4770      	bx	lr

00083a3c <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   83a3c:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   83a3e:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   83a40:	690b      	ldr	r3, [r1, #16]
   83a42:	4293      	cmp	r3, r2
   83a44:	d307      	bcc.n	83a56 <pwm_channel_update_duty+0x1a>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   83a46:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   83a48:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   83a4c:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   83a50:	f04f 0000 	mov.w	r0, #0
   83a54:	e001      	b.n	83a5a <pwm_channel_update_duty+0x1e>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   83a56:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   83a5a:	bc10      	pop	{r4}
   83a5c:	4770      	bx	lr
   83a5e:	bf00      	nop

00083a60 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   83a60:	f04f 0301 	mov.w	r3, #1
   83a64:	fa03 f101 	lsl.w	r1, r3, r1
   83a68:	6041      	str	r1, [r0, #4]
   83a6a:	4770      	bx	lr

00083a6c <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   83a6c:	f04f 0301 	mov.w	r3, #1
   83a70:	fa03 f101 	lsl.w	r1, r3, r1
   83a74:	6081      	str	r1, [r0, #8]
   83a76:	4770      	bx	lr

00083a78 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   83a78:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   83a7a:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   83a7e:	f2c0 5001 	movt	r0, #1281	; 0x501
   83a82:	f244 43dd 	movw	r3, #17629	; 0x44dd
   83a86:	f2c0 0308 	movt	r3, #8
   83a8a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   83a8c:	f04f 0000 	mov.w	r0, #0
   83a90:	f04f 013e 	mov.w	r1, #62	; 0x3e
   83a94:	f244 02b5 	movw	r2, #16565	; 0x40b5
   83a98:	f2c0 0208 	movt	r2, #8
   83a9c:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   83a9e:	f244 1425 	movw	r4, #16677	; 0x4125
   83aa2:	f2c0 0408 	movt	r4, #8
   83aa6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   83aa8:	2800      	cmp	r0, #0
   83aaa:	d0fc      	beq.n	83aa6 <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   83aac:	f244 1035 	movw	r0, #16693	; 0x4135
   83ab0:	f2c0 0008 	movt	r0, #8
   83ab4:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   83ab6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   83aba:	f2c4 010e 	movt	r1, #16398	; 0x400e
   83abe:	f643 7301 	movw	r3, #16129	; 0x3f01
   83ac2:	f2c2 030d 	movt	r3, #8205	; 0x200d
   83ac6:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   83ac8:	f244 1445 	movw	r4, #16709	; 0x4145
   83acc:	f2c0 0408 	movt	r4, #8
   83ad0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   83ad2:	2800      	cmp	r0, #0
   83ad4:	d0fc      	beq.n	83ad0 <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   83ad6:	f04f 0010 	mov.w	r0, #16
   83ada:	f244 0215 	movw	r2, #16405	; 0x4015
   83ade:	f2c0 0208 	movt	r2, #8
   83ae2:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   83ae4:	f244 3015 	movw	r0, #17173	; 0x4315
   83ae8:	f2c0 0008 	movt	r0, #8
   83aec:	4780      	blx	r0

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83aee:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   83af2:	f2c0 5001 	movt	r0, #1281	; 0x501
   83af6:	f244 41dd 	movw	r1, #17629	; 0x44dd
   83afa:	f2c0 0108 	movt	r1, #8
   83afe:	4788      	blx	r1
   83b00:	bd10      	pop	{r4, pc}
   83b02:	bf00      	nop

00083b04 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   83b04:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   83b06:	f641 2350 	movw	r3, #6736	; 0x1a50
   83b0a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   83b0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83b12:	605a      	str	r2, [r3, #4]
   83b14:	f04f 000b 	mov.w	r0, #11
   83b18:	f244 1455 	movw	r4, #16725	; 0x4155
   83b1c:	f2c0 0408 	movt	r4, #8
   83b20:	47a0      	blx	r4
   83b22:	f04f 000c 	mov.w	r0, #12
   83b26:	47a0      	blx	r4
   83b28:	f04f 000d 	mov.w	r0, #13
   83b2c:	47a0      	blx	r4
   83b2e:	f04f 000e 	mov.w	r0, #14
   83b32:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   83b34:	f04f 003b 	mov.w	r0, #59	; 0x3b
   83b38:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83b3c:	f643 5469 	movw	r4, #15721	; 0x3d69
   83b40:	f2c0 0408 	movt	r4, #8
   83b44:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   83b46:	f04f 0055 	mov.w	r0, #85	; 0x55
   83b4a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83b4e:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   83b50:	f04f 0056 	mov.w	r0, #86	; 0x56
   83b54:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83b58:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   83b5a:	f04f 0068 	mov.w	r0, #104	; 0x68
   83b5e:	f04f 0179 	mov.w	r1, #121	; 0x79
   83b62:	f6c2 0100 	movt	r1, #10240	; 0x2800
   83b66:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   83b68:	f04f 005c 	mov.w	r0, #92	; 0x5c
   83b6c:	f04f 0101 	mov.w	r1, #1
   83b70:	f6c2 0100 	movt	r1, #10240	; 0x2800
   83b74:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   83b76:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   83b7a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   83b7e:	f44f 7140 	mov.w	r1, #768	; 0x300
   83b82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   83b86:	f643 438d 	movw	r3, #15501	; 0x3c8d
   83b8a:	f2c0 0308 	movt	r3, #8
   83b8e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   83b90:	f04f 002b 	mov.w	r0, #43	; 0x2b
   83b94:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83b98:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   83b9a:	f04f 002a 	mov.w	r0, #42	; 0x2a
   83b9e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83ba2:	47a0      	blx	r4
   83ba4:	bd10      	pop	{r4, pc}
   83ba6:	bf00      	nop

00083ba8 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   83ba8:	b10a      	cbz	r2, 83bae <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   83baa:	6641      	str	r1, [r0, #100]	; 0x64
   83bac:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   83bae:	6601      	str	r1, [r0, #96]	; 0x60
   83bb0:	4770      	bx	lr
   83bb2:	bf00      	nop

00083bb4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   83bb4:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   83bb6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   83bba:	d016      	beq.n	83bea <pio_set_peripheral+0x36>
   83bbc:	d804      	bhi.n	83bc8 <pio_set_peripheral+0x14>
   83bbe:	b1c9      	cbz	r1, 83bf4 <pio_set_peripheral+0x40>
   83bc0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   83bc4:	d115      	bne.n	83bf2 <pio_set_peripheral+0x3e>
   83bc6:	e009      	b.n	83bdc <pio_set_peripheral+0x28>
   83bc8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   83bcc:	d012      	beq.n	83bf4 <pio_set_peripheral+0x40>
   83bce:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   83bd2:	d00f      	beq.n	83bf4 <pio_set_peripheral+0x40>
   83bd4:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   83bd8:	d10b      	bne.n	83bf2 <pio_set_peripheral+0x3e>
   83bda:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   83bdc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   83bde:	6f01      	ldr	r1, [r0, #112]	; 0x70
   83be0:	400b      	ands	r3, r1
   83be2:	ea23 0302 	bic.w	r3, r3, r2
   83be6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   83be8:	e003      	b.n	83bf2 <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   83bea:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   83bec:	ea42 0103 	orr.w	r1, r2, r3
   83bf0:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   83bf2:	6042      	str	r2, [r0, #4]
   83bf4:	4770      	bx	lr
   83bf6:	bf00      	nop

00083bf8 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   83bf8:	6441      	str	r1, [r0, #68]	; 0x44
   83bfa:	4770      	bx	lr

00083bfc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   83bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83bfe:	4604      	mov	r4, r0
   83c00:	460d      	mov	r5, r1
   83c02:	4616      	mov	r6, r2
   83c04:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   83c06:	f643 33f9 	movw	r3, #15353	; 0x3bf9
   83c0a:	f2c0 0308 	movt	r3, #8
   83c0e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   83c10:	4620      	mov	r0, r4
   83c12:	4629      	mov	r1, r5
   83c14:	9a06      	ldr	r2, [sp, #24]
   83c16:	f643 33a9 	movw	r3, #15273	; 0x3ba9
   83c1a:	f2c0 0308 	movt	r3, #8
   83c1e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   83c20:	b10f      	cbz	r7, 83c26 <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   83c22:	6525      	str	r5, [r4, #80]	; 0x50
   83c24:	e000      	b.n	83c28 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   83c26:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   83c28:	b10e      	cbz	r6, 83c2e <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   83c2a:	6325      	str	r5, [r4, #48]	; 0x30
   83c2c:	e000      	b.n	83c30 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   83c2e:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   83c30:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   83c32:	6025      	str	r5, [r4, #0]
   83c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83c36:	bf00      	nop

00083c38 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   83c38:	b570      	push	{r4, r5, r6, lr}
   83c3a:	4604      	mov	r4, r0
   83c3c:	460d      	mov	r5, r1
   83c3e:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   83c40:	f643 33f9 	movw	r3, #15353	; 0x3bf9
   83c44:	f2c0 0308 	movt	r3, #8
   83c48:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   83c4a:	4620      	mov	r0, r4
   83c4c:	4629      	mov	r1, r5
   83c4e:	f006 0201 	and.w	r2, r6, #1
   83c52:	f643 33a9 	movw	r3, #15273	; 0x3ba9
   83c56:	f2c0 0308 	movt	r3, #8
   83c5a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   83c5c:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   83c60:	bf14      	ite	ne
   83c62:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   83c64:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   83c66:	f016 0f02 	tst.w	r6, #2
   83c6a:	d002      	beq.n	83c72 <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   83c6c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   83c70:	e004      	b.n	83c7c <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   83c72:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_DIFSR = ul_mask;
   83c76:	bf18      	it	ne
   83c78:	f8c4 5084 	strne.w	r5, [r4, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   83c7c:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   83c7e:	6025      	str	r5, [r4, #0]
   83c80:	bd70      	pop	{r4, r5, r6, pc}
   83c82:	bf00      	nop

00083c84 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   83c84:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   83c86:	4770      	bx	lr

00083c88 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   83c88:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   83c8a:	4770      	bx	lr

00083c8c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   83c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   83c8e:	b083      	sub	sp, #12
   83c90:	4607      	mov	r7, r0
   83c92:	460e      	mov	r6, r1
   83c94:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   83c96:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   83c9a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   83c9e:	d036      	beq.n	83d0e <pio_configure_pin_group+0x82>
   83ca0:	d806      	bhi.n	83cb0 <pio_configure_pin_group+0x24>
   83ca2:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   83ca6:	d00a      	beq.n	83cbe <pio_configure_pin_group+0x32>
   83ca8:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   83cac:	d14d      	bne.n	83d4a <pio_configure_pin_group+0xbe>
   83cae:	e01a      	b.n	83ce6 <pio_configure_pin_group+0x5a>
   83cb0:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   83cb4:	d033      	beq.n	83d1e <pio_configure_pin_group+0x92>
   83cb6:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   83cba:	d146      	bne.n	83d4a <pio_configure_pin_group+0xbe>
   83cbc:	e02f      	b.n	83d1e <pio_configure_pin_group+0x92>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   83cbe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83cc2:	4632      	mov	r2, r6
   83cc4:	f643 33b5 	movw	r3, #15285	; 0x3bb5
   83cc8:	f2c0 0308 	movt	r3, #8
   83ccc:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   83cce:	4638      	mov	r0, r7
   83cd0:	4631      	mov	r1, r6
   83cd2:	f005 0201 	and.w	r2, r5, #1
   83cd6:	f643 33a9 	movw	r3, #15273	; 0x3ba9
   83cda:	f2c0 0308 	movt	r3, #8
   83cde:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   83ce0:	f04f 0001 	mov.w	r0, #1
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   83ce4:	e033      	b.n	83d4e <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   83ce6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83cea:	4632      	mov	r2, r6
   83cec:	f643 33b5 	movw	r3, #15285	; 0x3bb5
   83cf0:	f2c0 0308 	movt	r3, #8
   83cf4:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   83cf6:	4638      	mov	r0, r7
   83cf8:	4631      	mov	r1, r6
   83cfa:	f005 0201 	and.w	r2, r5, #1
   83cfe:	f643 33a9 	movw	r3, #15273	; 0x3ba9
   83d02:	f2c0 0308 	movt	r3, #8
   83d06:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   83d08:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   83d0c:	e01f      	b.n	83d4e <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   83d0e:	f643 4339 	movw	r3, #15417	; 0x3c39
   83d12:	f2c0 0308 	movt	r3, #8
   83d16:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   83d18:	f04f 0001 	mov.w	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   83d1c:	e017      	b.n	83d4e <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83d1e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   83d22:	f005 0001 	and.w	r0, r5, #1
   83d26:	9000      	str	r0, [sp, #0]
   83d28:	4638      	mov	r0, r7
   83d2a:	4631      	mov	r1, r6
   83d2c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   83d30:	bf14      	ite	ne
   83d32:	2200      	movne	r2, #0
   83d34:	2201      	moveq	r2, #1
   83d36:	f3c5 0380 	ubfx	r3, r5, #2, #1
   83d3a:	f643 34fd 	movw	r4, #15357	; 0x3bfd
   83d3e:	f2c0 0408 	movt	r4, #8
   83d42:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   83d44:	f04f 0001 	mov.w	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   83d48:	e001      	b.n	83d4e <pio_configure_pin_group+0xc2>

	default:
		return 0;
   83d4a:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   83d4e:	b003      	add	sp, #12
   83d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83d52:	bf00      	nop

00083d54 <pio_get_pin_group>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83d54:	ea4f 1050 	mov.w	r0, r0, lsr #5
   83d58:	f500 1100 	add.w	r1, r0, #2097152	; 0x200000
   83d5c:	f201 7207 	addw	r2, r1, #1799	; 0x707
#endif
	return p_pio;
}
   83d60:	ea4f 2042 	mov.w	r0, r2, lsl #9
   83d64:	4770      	bx	lr
   83d66:	bf00      	nop

00083d68 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   83d68:	b5f0      	push	{r4, r5, r6, r7, lr}
   83d6a:	b083      	sub	sp, #12
   83d6c:	4607      	mov	r7, r0
   83d6e:	460d      	mov	r5, r1
	Pio *p_pio = pio_get_pin_group(ul_pin);
   83d70:	f643 5355 	movw	r3, #15701	; 0x3d55
   83d74:	f2c0 0308 	movt	r3, #8
   83d78:	4798      	blx	r3
   83d7a:	4606      	mov	r6, r0

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   83d7c:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   83d80:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   83d84:	d041      	beq.n	83e0a <pio_configure_pin+0xa2>
   83d86:	d806      	bhi.n	83d96 <pio_configure_pin+0x2e>
   83d88:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   83d8c:	d00a      	beq.n	83da4 <pio_configure_pin+0x3c>
   83d8e:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   83d92:	d162      	bne.n	83e5a <pio_configure_pin+0xf2>
   83d94:	e020      	b.n	83dd8 <pio_configure_pin+0x70>
   83d96:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   83d9a:	d044      	beq.n	83e26 <pio_configure_pin+0xbe>
   83d9c:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   83da0:	d15b      	bne.n	83e5a <pio_configure_pin+0xf2>
   83da2:	e040      	b.n	83e26 <pio_configure_pin+0xbe>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   83da4:	f007 001f 	and.w	r0, r7, #31
   83da8:	f04f 0401 	mov.w	r4, #1
   83dac:	fa04 f700 	lsl.w	r7, r4, r0
   83db0:	4630      	mov	r0, r6
   83db2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83db6:	463a      	mov	r2, r7
   83db8:	f643 33b5 	movw	r3, #15285	; 0x3bb5
   83dbc:	f2c0 0308 	movt	r3, #8
   83dc0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   83dc2:	4630      	mov	r0, r6
   83dc4:	4639      	mov	r1, r7
   83dc6:	ea05 0204 	and.w	r2, r5, r4
   83dca:	f643 33a9 	movw	r3, #15273	; 0x3ba9
   83dce:	f2c0 0308 	movt	r3, #8
   83dd2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   83dd4:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   83dd6:	e042      	b.n	83e5e <pio_configure_pin+0xf6>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   83dd8:	f007 071f 	and.w	r7, r7, #31
   83ddc:	f04f 0401 	mov.w	r4, #1
   83de0:	fa04 f707 	lsl.w	r7, r4, r7
   83de4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83de8:	463a      	mov	r2, r7
   83dea:	f643 33b5 	movw	r3, #15285	; 0x3bb5
   83dee:	f2c0 0308 	movt	r3, #8
   83df2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   83df4:	4630      	mov	r0, r6
   83df6:	4639      	mov	r1, r7
   83df8:	ea05 0204 	and.w	r2, r5, r4
   83dfc:	f643 33a9 	movw	r3, #15273	; 0x3ba9
   83e00:	f2c0 0308 	movt	r3, #8
   83e04:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   83e06:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   83e08:	e029      	b.n	83e5e <pio_configure_pin+0xf6>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   83e0a:	f007 021f 	and.w	r2, r7, #31
   83e0e:	f04f 0401 	mov.w	r4, #1
   83e12:	fa04 f102 	lsl.w	r1, r4, r2
   83e16:	462a      	mov	r2, r5
   83e18:	f643 4339 	movw	r3, #15417	; 0x3c39
   83e1c:	f2c0 0308 	movt	r3, #8
   83e20:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   83e22:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   83e24:	e01b      	b.n	83e5e <pio_configure_pin+0xf6>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83e26:	f007 011f 	and.w	r1, r7, #31
   83e2a:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83e2e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83e32:	ea05 0004 	and.w	r0, r5, r4
   83e36:	9000      	str	r0, [sp, #0]
   83e38:	4630      	mov	r0, r6
   83e3a:	fa04 f101 	lsl.w	r1, r4, r1
   83e3e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   83e42:	bf14      	ite	ne
   83e44:	2200      	movne	r2, #0
   83e46:	2201      	moveq	r2, #1
   83e48:	f3c5 0380 	ubfx	r3, r5, #2, #1
   83e4c:	f643 35fd 	movw	r5, #15357	; 0x3bfd
   83e50:	f2c0 0508 	movt	r5, #8
   83e54:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   83e56:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   83e58:	e001      	b.n	83e5e <pio_configure_pin+0xf6>

	default:
		return 0;
   83e5a:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   83e5e:	b003      	add	sp, #12
   83e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83e62:	bf00      	nop

00083e64 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   83e64:	b570      	push	{r4, r5, r6, lr}
   83e66:	4606      	mov	r6, r0
   83e68:	460c      	mov	r4, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   83e6a:	f643 4385 	movw	r3, #15493	; 0x3c85
   83e6e:	f2c0 0308 	movt	r3, #8
   83e72:	4798      	blx	r3
   83e74:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   83e76:	4630      	mov	r0, r6
   83e78:	f643 4189 	movw	r1, #15497	; 0x3c89
   83e7c:	f2c0 0108 	movt	r1, #8
   83e80:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   83e82:	4005      	ands	r5, r0
   83e84:	f000 808c 	beq.w	83fa0 <pio_handler_process+0x13c>
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   83e88:	f648 3078 	movw	r0, #35704	; 0x8b78
   83e8c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83e90:	6800      	ldr	r0, [r0, #0]
   83e92:	42a0      	cmp	r0, r4
   83e94:	d10c      	bne.n	83eb0 <pio_handler_process+0x4c>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   83e96:	f648 3278 	movw	r2, #35704	; 0x8b78
   83e9a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83e9e:	6851      	ldr	r1, [r2, #4]
   83ea0:	420d      	tst	r5, r1
   83ea2:	d005      	beq.n	83eb0 <pio_handler_process+0x4c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   83ea4:	4616      	mov	r6, r2
   83ea6:	68d3      	ldr	r3, [r2, #12]
   83ea8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   83eaa:	6871      	ldr	r1, [r6, #4]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   83eac:	438d      	bics	r5, r1
   83eae:	d077      	beq.n	83fa0 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   83eb0:	f648 3078 	movw	r0, #35704	; 0x8b78
   83eb4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83eb8:	6900      	ldr	r0, [r0, #16]
   83eba:	42a0      	cmp	r0, r4
   83ebc:	d10c      	bne.n	83ed8 <pio_handler_process+0x74>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   83ebe:	f648 3278 	movw	r2, #35704	; 0x8b78
   83ec2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83ec6:	6951      	ldr	r1, [r2, #20]
   83ec8:	420d      	tst	r5, r1
   83eca:	d005      	beq.n	83ed8 <pio_handler_process+0x74>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   83ecc:	4616      	mov	r6, r2
   83ece:	69d3      	ldr	r3, [r2, #28]
   83ed0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   83ed2:	6971      	ldr	r1, [r6, #20]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   83ed4:	438d      	bics	r5, r1
   83ed6:	d063      	beq.n	83fa0 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   83ed8:	f648 3078 	movw	r0, #35704	; 0x8b78
   83edc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83ee0:	6a00      	ldr	r0, [r0, #32]
   83ee2:	42a0      	cmp	r0, r4
   83ee4:	d10c      	bne.n	83f00 <pio_handler_process+0x9c>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   83ee6:	f648 3278 	movw	r2, #35704	; 0x8b78
   83eea:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83eee:	6a51      	ldr	r1, [r2, #36]	; 0x24
   83ef0:	420d      	tst	r5, r1
   83ef2:	d005      	beq.n	83f00 <pio_handler_process+0x9c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   83ef4:	4616      	mov	r6, r2
   83ef6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   83ef8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   83efa:	6a71      	ldr	r1, [r6, #36]	; 0x24

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   83efc:	438d      	bics	r5, r1
   83efe:	d04f      	beq.n	83fa0 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   83f00:	f648 3078 	movw	r0, #35704	; 0x8b78
   83f04:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83f08:	6b00      	ldr	r0, [r0, #48]	; 0x30
   83f0a:	42a0      	cmp	r0, r4
   83f0c:	d10c      	bne.n	83f28 <pio_handler_process+0xc4>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   83f0e:	f648 3278 	movw	r2, #35704	; 0x8b78
   83f12:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83f16:	6b51      	ldr	r1, [r2, #52]	; 0x34
   83f18:	420d      	tst	r5, r1
   83f1a:	d005      	beq.n	83f28 <pio_handler_process+0xc4>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   83f1c:	4616      	mov	r6, r2
   83f1e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   83f20:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   83f22:	6b71      	ldr	r1, [r6, #52]	; 0x34

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   83f24:	438d      	bics	r5, r1
   83f26:	d03b      	beq.n	83fa0 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   83f28:	f648 3078 	movw	r0, #35704	; 0x8b78
   83f2c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83f30:	6c00      	ldr	r0, [r0, #64]	; 0x40
   83f32:	42a0      	cmp	r0, r4
   83f34:	d10c      	bne.n	83f50 <pio_handler_process+0xec>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   83f36:	f648 3278 	movw	r2, #35704	; 0x8b78
   83f3a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83f3e:	6c51      	ldr	r1, [r2, #68]	; 0x44
   83f40:	420d      	tst	r5, r1
   83f42:	d005      	beq.n	83f50 <pio_handler_process+0xec>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   83f44:	4616      	mov	r6, r2
   83f46:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   83f48:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   83f4a:	6c71      	ldr	r1, [r6, #68]	; 0x44

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   83f4c:	438d      	bics	r5, r1
   83f4e:	d027      	beq.n	83fa0 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   83f50:	f648 3078 	movw	r0, #35704	; 0x8b78
   83f54:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83f58:	6d00      	ldr	r0, [r0, #80]	; 0x50
   83f5a:	42a0      	cmp	r0, r4
   83f5c:	d10c      	bne.n	83f78 <pio_handler_process+0x114>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   83f5e:	f648 3278 	movw	r2, #35704	; 0x8b78
   83f62:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83f66:	6d51      	ldr	r1, [r2, #84]	; 0x54
   83f68:	420d      	tst	r5, r1
   83f6a:	d005      	beq.n	83f78 <pio_handler_process+0x114>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   83f6c:	4616      	mov	r6, r2
   83f6e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   83f70:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   83f72:	6d71      	ldr	r1, [r6, #84]	; 0x54

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   83f74:	438d      	bics	r5, r1
   83f76:	d013      	beq.n	83fa0 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   83f78:	f648 3078 	movw	r0, #35704	; 0x8b78
   83f7c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83f80:	6e00      	ldr	r0, [r0, #96]	; 0x60
   83f82:	42a0      	cmp	r0, r4
   83f84:	d10c      	bne.n	83fa0 <pio_handler_process+0x13c>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   83f86:	f648 3278 	movw	r2, #35704	; 0x8b78
   83f8a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83f8e:	6e51      	ldr	r1, [r2, #100]	; 0x64
   83f90:	4229      	tst	r1, r5
   83f92:	d005      	beq.n	83fa0 <pio_handler_process+0x13c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   83f94:	f648 3378 	movw	r3, #35704	; 0x8b78
   83f98:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83f9c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   83f9e:	4790      	blx	r2
   83fa0:	bd70      	pop	{r4, r5, r6, pc}
   83fa2:	bf00      	nop

00083fa4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   83fa4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   83fa6:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   83faa:	f2c4 000e 	movt	r0, #16398	; 0x400e
   83fae:	f04f 010b 	mov.w	r1, #11
   83fb2:	f643 6365 	movw	r3, #15973	; 0x3e65
   83fb6:	f2c0 0308 	movt	r3, #8
   83fba:	4798      	blx	r3
   83fbc:	bd08      	pop	{r3, pc}
   83fbe:	bf00      	nop

00083fc0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   83fc0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   83fc2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   83fc6:	f2c4 000e 	movt	r0, #16398	; 0x400e
   83fca:	f04f 010c 	mov.w	r1, #12
   83fce:	f643 6365 	movw	r3, #15973	; 0x3e65
   83fd2:	f2c0 0308 	movt	r3, #8
   83fd6:	4798      	blx	r3
   83fd8:	bd08      	pop	{r3, pc}
   83fda:	bf00      	nop

00083fdc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   83fdc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   83fde:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   83fe2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   83fe6:	f04f 010d 	mov.w	r1, #13
   83fea:	f643 6365 	movw	r3, #15973	; 0x3e65
   83fee:	f2c0 0308 	movt	r3, #8
   83ff2:	4798      	blx	r3
   83ff4:	bd08      	pop	{r3, pc}
   83ff6:	bf00      	nop

00083ff8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   83ff8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   83ffa:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   83ffe:	f2c4 000e 	movt	r0, #16398	; 0x400e
   84002:	f04f 010e 	mov.w	r1, #14
   84006:	f643 6365 	movw	r3, #15973	; 0x3e65
   8400a:	f2c0 0308 	movt	r3, #8
   8400e:	4798      	blx	r3
   84010:	bd08      	pop	{r3, pc}
   84012:	bf00      	nop

00084014 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   84014:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   84018:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8401c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8401e:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   84022:	4308      	orrs	r0, r1
   84024:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84026:	6e98      	ldr	r0, [r3, #104]	; 0x68
   84028:	f010 0f08 	tst.w	r0, #8
   8402c:	d007      	beq.n	8403e <pmc_switch_mck_to_pllack+0x2a>
   8402e:	e010      	b.n	84052 <pmc_switch_mck_to_pllack+0x3e>
   84030:	f100 33ff 	add.w	r3, r0, #4294967295
   84034:	6e90      	ldr	r0, [r2, #104]	; 0x68
   84036:	f010 0f08 	tst.w	r0, #8
   8403a:	d038      	beq.n	840ae <pmc_switch_mck_to_pllack+0x9a>
   8403c:	e009      	b.n	84052 <pmc_switch_mck_to_pllack+0x3e>
   8403e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   84042:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   84046:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8404a:	6e91      	ldr	r1, [r2, #104]	; 0x68
   8404c:	f011 0f08 	tst.w	r1, #8
   84050:	d0ee      	beq.n	84030 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   84052:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   84056:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8405a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   8405c:	f022 0303 	bic.w	r3, r2, #3
   84060:	f043 0002 	orr.w	r0, r3, #2
   84064:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84066:	6e89      	ldr	r1, [r1, #104]	; 0x68
   84068:	f011 0f08 	tst.w	r1, #8
   8406c:	d009      	beq.n	84082 <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   8406e:	f04f 0000 	mov.w	r0, #0
   84072:	4770      	bx	lr
   84074:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84078:	6e91      	ldr	r1, [r2, #104]	; 0x68
   8407a:	f011 0f08 	tst.w	r1, #8
   8407e:	d013      	beq.n	840a8 <pmc_switch_mck_to_pllack+0x94>
   84080:	e009      	b.n	84096 <pmc_switch_mck_to_pllack+0x82>
   84082:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84086:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8408a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8408e:	6e90      	ldr	r0, [r2, #104]	; 0x68
   84090:	f010 0f08 	tst.w	r0, #8
   84094:	d0ee      	beq.n	84074 <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   84096:	f04f 0000 	mov.w	r0, #0
   8409a:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8409c:	f04f 0001 	mov.w	r0, #1
   840a0:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   840a2:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   840a6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   840a8:	3b01      	subs	r3, #1
   840aa:	d1f0      	bne.n	8408e <pmc_switch_mck_to_pllack+0x7a>
   840ac:	e7f9      	b.n	840a2 <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   840ae:	1e58      	subs	r0, r3, #1
   840b0:	d1cb      	bne.n	8404a <pmc_switch_mck_to_pllack+0x36>
   840b2:	e7f3      	b.n	8409c <pmc_switch_mck_to_pllack+0x88>

000840b4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   840b4:	b188      	cbz	r0, 840da <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   840b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   840ba:	f2c4 010e 	movt	r1, #16398	; 0x400e
   840be:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   840c0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   840c4:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   840c8:	4002      	ands	r2, r0
   840ca:	f04f 0302 	mov.w	r3, #2
   840ce:	f2c0 1337 	movt	r3, #311	; 0x137
   840d2:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   840d6:	6208      	str	r0, [r1, #32]
   840d8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   840da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   840de:	f2c4 030e 	movt	r3, #16398	; 0x400e
   840e2:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   840e4:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   840e8:	f020 0203 	bic.w	r2, r0, #3
   840ec:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   840f0:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   840f4:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   840f8:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   840fc:	6218      	str	r0, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   840fe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   84102:	f2c4 020e 	movt	r2, #16398	; 0x400e
   84106:	6e93      	ldr	r3, [r2, #104]	; 0x68
   84108:	f013 0f01 	tst.w	r3, #1
   8410c:	d0fb      	beq.n	84106 <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8410e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   84112:	f2c4 010e 	movt	r1, #16398	; 0x400e
   84116:	6a08      	ldr	r0, [r1, #32]
   84118:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   8411c:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   84120:	620b      	str	r3, [r1, #32]
   84122:	4770      	bx	lr

00084124 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   84124:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   84128:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8412c:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8412e:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   84132:	4770      	bx	lr

00084134 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   84134:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   84138:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8413c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   84140:	629a      	str	r2, [r3, #40]	; 0x28
   84142:	4770      	bx	lr

00084144 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   84144:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   84148:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8414c:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8414e:	f000 0002 	and.w	r0, r0, #2
   84152:	4770      	bx	lr

00084154 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   84154:	282c      	cmp	r0, #44	; 0x2c
   84156:	d835      	bhi.n	841c4 <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   84158:	281f      	cmp	r0, #31
   8415a:	d817      	bhi.n	8418c <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8415c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   84160:	f2c4 010e 	movt	r1, #16398	; 0x400e
   84164:	698a      	ldr	r2, [r1, #24]
   84166:	f04f 0301 	mov.w	r3, #1
   8416a:	fa03 f300 	lsl.w	r3, r3, r0
   8416e:	401a      	ands	r2, r3
   84170:	4293      	cmp	r3, r2
   84172:	d02a      	beq.n	841ca <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   84174:	f04f 0101 	mov.w	r1, #1
   84178:	fa01 f000 	lsl.w	r0, r1, r0
   8417c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   84180:	f2c4 020e 	movt	r2, #16398	; 0x400e
   84184:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   84186:	f04f 0000 	mov.w	r0, #0
   8418a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8418c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   84190:	f2c4 030e 	movt	r3, #16398	; 0x400e
   84194:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
   84198:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8419c:	f04f 0101 	mov.w	r1, #1
   841a0:	fa01 f100 	lsl.w	r1, r1, r0
   841a4:	400a      	ands	r2, r1
   841a6:	4291      	cmp	r1, r2
   841a8:	d012      	beq.n	841d0 <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   841aa:	f04f 0301 	mov.w	r3, #1
   841ae:	fa03 f000 	lsl.w	r0, r3, r0
   841b2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   841b6:	f2c4 020e 	movt	r2, #16398	; 0x400e
   841ba:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   841be:	f04f 0000 	mov.w	r0, #0
   841c2:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   841c4:	f04f 0001 	mov.w	r0, #1
   841c8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   841ca:	f04f 0000 	mov.w	r0, #0
   841ce:	4770      	bx	lr
   841d0:	f04f 0000 	mov.w	r0, #0
}
   841d4:	4770      	bx	lr
   841d6:	bf00      	nop

000841d8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   841d8:	e7fe      	b.n	841d8 <Dummy_Handler>
   841da:	bf00      	nop

000841dc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   841dc:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   841de:	f240 0300 	movw	r3, #0
   841e2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   841e6:	f247 0284 	movw	r2, #28804	; 0x7084
   841ea:	f2c0 0208 	movt	r2, #8
   841ee:	429a      	cmp	r2, r3
   841f0:	d003      	beq.n	841fa <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   841f2:	4840      	ldr	r0, [pc, #256]	; (842f4 <Reset_Handler+0x118>)
   841f4:	4940      	ldr	r1, [pc, #256]	; (842f8 <Reset_Handler+0x11c>)
   841f6:	4281      	cmp	r1, r0
   841f8:	d304      	bcc.n	84204 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   841fa:	4b40      	ldr	r3, [pc, #256]	; (842fc <Reset_Handler+0x120>)
   841fc:	4a40      	ldr	r2, [pc, #256]	; (84300 <Reset_Handler+0x124>)
   841fe:	429a      	cmp	r2, r3
   84200:	d325      	bcc.n	8424e <Reset_Handler+0x72>
   84202:	e042      	b.n	8428a <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   84204:	4d3f      	ldr	r5, [pc, #252]	; (84304 <Reset_Handler+0x128>)
   84206:	4c40      	ldr	r4, [pc, #256]	; (84308 <Reset_Handler+0x12c>)
   84208:	1b63      	subs	r3, r4, r5
   8420a:	f023 0503 	bic.w	r5, r3, #3
   8420e:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   84212:	f240 0200 	movw	r2, #0
   84216:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8421a:	f247 0184 	movw	r1, #28804	; 0x7084
   8421e:	f2c0 0108 	movt	r1, #8
   84222:	f105 0004 	add.w	r0, r5, #4
   84226:	f3c5 0480 	ubfx	r4, r5, #2, #1
   8422a:	585d      	ldr	r5, [r3, r1]
   8422c:	509d      	str	r5, [r3, r2]
   8422e:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   84232:	4283      	cmp	r3, r0
   84234:	d155      	bne.n	842e2 <Reset_Handler+0x106>
   84236:	e7e0      	b.n	841fa <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   84238:	585d      	ldr	r5, [r3, r1]
   8423a:	509d      	str	r5, [r3, r2]
   8423c:	f103 0304 	add.w	r3, r3, #4
   84240:	585c      	ldr	r4, [r3, r1]
   84242:	509c      	str	r4, [r3, r2]
   84244:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   84248:	4283      	cmp	r3, r0
   8424a:	d1f5      	bne.n	84238 <Reset_Handler+0x5c>
   8424c:	e7d5      	b.n	841fa <Reset_Handler+0x1e>
   8424e:	4d2f      	ldr	r5, [pc, #188]	; (8430c <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   84250:	492f      	ldr	r1, [pc, #188]	; (84310 <Reset_Handler+0x134>)
   84252:	1b48      	subs	r0, r1, r5
   84254:	f020 0403 	bic.w	r4, r0, #3
   84258:	f640 03d0 	movw	r3, #2256	; 0x8d0
   8425c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84260:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   84262:	f04f 0100 	mov.w	r1, #0
   84266:	1b50      	subs	r0, r2, r5
   84268:	f1a0 0004 	sub.w	r0, r0, #4
   8426c:	f3c0 0480 	ubfx	r4, r0, #2, #1
   84270:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   84274:	4295      	cmp	r5, r2
   84276:	d12d      	bne.n	842d4 <Reset_Handler+0xf8>
   84278:	e007      	b.n	8428a <Reset_Handler+0xae>
   8427a:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   8427e:	6069      	str	r1, [r5, #4]
   84280:	f105 0508 	add.w	r5, r5, #8
   84284:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   84286:	4295      	cmp	r5, r2
   84288:	d1f7      	bne.n	8427a <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8428a:	f240 0500 	movw	r5, #0
   8428e:	f2c0 0508 	movt	r5, #8
   84292:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   84296:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   8429a:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   8429e:	f2ce 0000 	movt	r0, #57344	; 0xe000
   842a2:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   842a4:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   842a8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   842ac:	d207      	bcs.n	842be <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   842ae:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   842b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
   842b6:	689d      	ldr	r5, [r3, #8]
   842b8:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   842bc:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   842be:	f244 61d9 	movw	r1, #18137	; 0x46d9
   842c2:	f2c0 0108 	movt	r1, #8
   842c6:	4788      	blx	r1

	/* Branch to main function */
	main();
   842c8:	f240 6031 	movw	r0, #1585	; 0x631
   842cc:	f2c0 0008 	movt	r0, #8
   842d0:	4780      	blx	r0
   842d2:	e7fe      	b.n	842d2 <Reset_Handler+0xf6>
   842d4:	2c00      	cmp	r4, #0
   842d6:	d0d0      	beq.n	8427a <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   842d8:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   842dc:	4295      	cmp	r5, r2
   842de:	d1cc      	bne.n	8427a <Reset_Handler+0x9e>
   842e0:	e7d3      	b.n	8428a <Reset_Handler+0xae>
   842e2:	2c00      	cmp	r4, #0
   842e4:	d0a8      	beq.n	84238 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   842e6:	585c      	ldr	r4, [r3, r1]
   842e8:	509c      	str	r4, [r3, r2]
   842ea:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   842ee:	4283      	cmp	r3, r0
   842f0:	d1a2      	bne.n	84238 <Reset_Handler+0x5c>
   842f2:	e782      	b.n	841fa <Reset_Handler+0x1e>
   842f4:	200708d0 	.word	0x200708d0
   842f8:	20070000 	.word	0x20070000
   842fc:	20078cac 	.word	0x20078cac
   84300:	200708d0 	.word	0x200708d0
   84304:	20070004 	.word	0x20070004
   84308:	200708d3 	.word	0x200708d3
   8430c:	200708cc 	.word	0x200708cc
   84310:	20078ca7 	.word	0x20078ca7

00084314 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   84314:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   84318:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8431c:	6b18      	ldr	r0, [r3, #48]	; 0x30
   8431e:	f000 0103 	and.w	r1, r0, #3
   84322:	2903      	cmp	r1, #3
   84324:	f200 80b1 	bhi.w	8448a <SystemCoreClockUpdate+0x176>
   84328:	e8df f001 	tbb	[pc, r1]
   8432c:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   84330:	f641 2010 	movw	r0, #6672	; 0x1a10
   84334:	f2c4 000e 	movt	r0, #16398	; 0x400e
   84338:	6941      	ldr	r1, [r0, #20]
   8433a:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8433e:	f240 030c 	movw	r3, #12
   84342:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84346:	bf14      	ite	ne
   84348:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8434c:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   84350:	601a      	str	r2, [r3, #0]
   84352:	e09a      	b.n	8448a <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   84354:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   84358:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8435c:	6a18      	ldr	r0, [r3, #32]
   8435e:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   84362:	d009      	beq.n	84378 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   84364:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   84368:	f2c0 03b7 	movt	r3, #183	; 0xb7
   8436c:	f240 020c 	movw	r2, #12
   84370:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84374:	6013      	str	r3, [r2, #0]
   84376:	e088      	b.n	8448a <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   84378:	f44f 6110 	mov.w	r1, #2304	; 0x900
   8437c:	f2c0 013d 	movt	r1, #61	; 0x3d
   84380:	f240 020c 	movw	r2, #12
   84384:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84388:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8438a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8438e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   84392:	6a18      	ldr	r0, [r3, #32]
   84394:	f000 0170 	and.w	r1, r0, #112	; 0x70
   84398:	2910      	cmp	r1, #16
   8439a:	d002      	beq.n	843a2 <SystemCoreClockUpdate+0x8e>
   8439c:	2920      	cmp	r1, #32
   8439e:	d174      	bne.n	8448a <SystemCoreClockUpdate+0x176>
   843a0:	e009      	b.n	843b6 <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   843a2:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   843a6:	f2c0 007a 	movt	r0, #122	; 0x7a
   843aa:	f240 010c 	movw	r1, #12
   843ae:	f2c2 0107 	movt	r1, #8199	; 0x2007
   843b2:	6008      	str	r0, [r1, #0]
				break;
   843b4:	e069      	b.n	8448a <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   843b6:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   843ba:	f2c0 03b7 	movt	r3, #183	; 0xb7
   843be:	f240 020c 	movw	r2, #12
   843c2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   843c6:	6013      	str	r3, [r2, #0]
				break;
   843c8:	e05f      	b.n	8448a <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   843ca:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   843ce:	f2c4 020e 	movt	r2, #16398	; 0x400e
   843d2:	6a13      	ldr	r3, [r2, #32]
   843d4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   843d8:	d009      	beq.n	843ee <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   843da:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   843de:	f2c0 01b7 	movt	r1, #183	; 0xb7
   843e2:	f240 020c 	movw	r2, #12
   843e6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   843ea:	6011      	str	r1, [r2, #0]
   843ec:	e027      	b.n	8443e <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   843ee:	f44f 6010 	mov.w	r0, #2304	; 0x900
   843f2:	f2c0 003d 	movt	r0, #61	; 0x3d
   843f6:	f240 010c 	movw	r1, #12
   843fa:	f2c2 0107 	movt	r1, #8199	; 0x2007
   843fe:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   84400:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   84404:	f2c4 020e 	movt	r2, #16398	; 0x400e
   84408:	6a13      	ldr	r3, [r2, #32]
   8440a:	f003 0070 	and.w	r0, r3, #112	; 0x70
   8440e:	2810      	cmp	r0, #16
   84410:	d002      	beq.n	84418 <SystemCoreClockUpdate+0x104>
   84412:	2820      	cmp	r0, #32
   84414:	d113      	bne.n	8443e <SystemCoreClockUpdate+0x12a>
   84416:	e009      	b.n	8442c <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   84418:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   8441c:	f2c0 037a 	movt	r3, #122	; 0x7a
   84420:	f240 000c 	movw	r0, #12
   84424:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84428:	6003      	str	r3, [r0, #0]
				break;
   8442a:	e008      	b.n	8443e <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8442c:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   84430:	f2c0 01b7 	movt	r1, #183	; 0xb7
   84434:	f240 020c 	movw	r2, #12
   84438:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8443c:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8443e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   84442:	f2c4 030e 	movt	r3, #16398	; 0x400e
   84446:	6b18      	ldr	r0, [r3, #48]	; 0x30
   84448:	f000 0103 	and.w	r1, r0, #3
   8444c:	2902      	cmp	r1, #2
   8444e:	d113      	bne.n	84478 <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   84450:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   84454:	f2c4 010e 	movt	r1, #16398	; 0x400e
   84458:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8445a:	6a89      	ldr	r1, [r1, #40]	; 0x28
   8445c:	f240 030c 	movw	r3, #12
   84460:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   84464:	f3c0 400a 	ubfx	r0, r0, #16, #11
   84468:	681a      	ldr	r2, [r3, #0]
   8446a:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8446e:	b2c9      	uxtb	r1, r1
   84470:	fbb0 f2f1 	udiv	r2, r0, r1
   84474:	601a      	str	r2, [r3, #0]
   84476:	e008      	b.n	8448a <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   84478:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   8447c:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   84480:	f240 020c 	movw	r2, #12
   84484:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84488:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8448a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8448e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   84492:	6b10      	ldr	r0, [r2, #48]	; 0x30
   84494:	f000 0170 	and.w	r1, r0, #112	; 0x70
   84498:	2970      	cmp	r1, #112	; 0x70
   8449a:	d10e      	bne.n	844ba <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   8449c:	f240 030c 	movw	r3, #12
   844a0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   844a4:	6818      	ldr	r0, [r3, #0]
   844a6:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   844aa:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   844ae:	fba2 0100 	umull	r0, r1, r2, r0
   844b2:	ea4f 0051 	mov.w	r0, r1, lsr #1
   844b6:	6018      	str	r0, [r3, #0]
   844b8:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   844ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   844be:	f2c4 030e 	movt	r3, #16398	; 0x400e
   844c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   844c4:	f240 000c 	movw	r0, #12
   844c8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   844cc:	f3c2 1102 	ubfx	r1, r2, #4, #3
   844d0:	6803      	ldr	r3, [r0, #0]
   844d2:	fa23 f301 	lsr.w	r3, r3, r1
   844d6:	6003      	str	r3, [r0, #0]
   844d8:	4770      	bx	lr
   844da:	bf00      	nop

000844dc <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   844dc:	f64e 23bf 	movw	r3, #60095	; 0xeabf
   844e0:	f2c0 1321 	movt	r3, #289	; 0x121
   844e4:	4298      	cmp	r0, r3
   844e6:	d80c      	bhi.n	84502 <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   844e8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   844ec:	f2c4 030e 	movt	r3, #16398	; 0x400e
   844f0:	f04f 0000 	mov.w	r0, #0
   844f4:	6018      	str	r0, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   844f6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   844fa:	f2c4 010e 	movt	r1, #16398	; 0x400e
   844fe:	6008      	str	r0, [r1, #0]
   84500:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   84502:	f24f 017f 	movw	r1, #61567	; 0xf07f
   84506:	f2c0 21fa 	movt	r1, #762	; 0x2fa
   8450a:	4288      	cmp	r0, r1
   8450c:	d80c      	bhi.n	84528 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   8450e:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   84512:	f2c4 000e 	movt	r0, #16398	; 0x400e
   84516:	f44f 7180 	mov.w	r1, #256	; 0x100
   8451a:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   8451c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   84520:	f2c4 020e 	movt	r2, #16398	; 0x400e
   84524:	6011      	str	r1, [r2, #0]
   84526:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   84528:	f648 73ff 	movw	r3, #36863	; 0x8fff
   8452c:	f2c0 33d0 	movt	r3, #976	; 0x3d0
   84530:	4298      	cmp	r0, r3
   84532:	d80c      	bhi.n	8454e <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   84534:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   84538:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8453c:	f44f 7200 	mov.w	r2, #512	; 0x200
   84540:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   84542:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   84546:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8454a:	601a      	str	r2, [r3, #0]
   8454c:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   8454e:	f24b 31ff 	movw	r1, #46079	; 0xb3ff
   84552:	f2c0 41c4 	movt	r1, #1220	; 0x4c4
   84556:	4288      	cmp	r0, r1
   84558:	d80c      	bhi.n	84574 <system_init_flash+0x98>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   8455a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   8455e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   84562:	f44f 7240 	mov.w	r2, #768	; 0x300
   84566:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   84568:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   8456c:	f2c4 000e 	movt	r0, #16398	; 0x400e
   84570:	6002      	str	r2, [r0, #0]
   84572:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   84574:	f644 237f 	movw	r3, #19071	; 0x4a7f
   84578:	f2c0 535d 	movt	r3, #1373	; 0x55d
   8457c:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   8457e:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   84582:	f2c4 000e 	movt	r0, #16398	; 0x400e
   84586:	bf94      	ite	ls
   84588:	f44f 6280 	movls.w	r2, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   8458c:	f44f 62a0 	movhi.w	r2, #1280	; 0x500
   84590:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   84592:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   84596:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8459a:	600a      	str	r2, [r1, #0]
   8459c:	4770      	bx	lr
   8459e:	bf00      	nop

000845a0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   845a0:	f648 33e8 	movw	r3, #35816	; 0x8be8
   845a4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   845a8:	6819      	ldr	r1, [r3, #0]
   845aa:	b941      	cbnz	r1, 845be <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
   845ac:	f648 33e8 	movw	r3, #35816	; 0x8be8
   845b0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   845b4:	f64a 42b0 	movw	r2, #44208	; 0xacb0
   845b8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   845bc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   845be:	f648 31e8 	movw	r1, #35816	; 0x8be8
   845c2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   845c6:	680b      	ldr	r3, [r1, #0]

	if (((int)prev_heap + incr) > ramend) {
   845c8:	1818      	adds	r0, r3, r0
   845ca:	f647 72fc 	movw	r2, #32764	; 0x7ffc
   845ce:	f2c2 0208 	movt	r2, #8200	; 0x2008
   845d2:	4282      	cmp	r2, r0
   845d4:	db06      	blt.n	845e4 <_sbrk+0x44>
		return (caddr_t) -1;	
	}

	heap += incr;
   845d6:	4601      	mov	r1, r0
   845d8:	f648 30e8 	movw	r0, #35816	; 0x8be8
   845dc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   845e0:	6001      	str	r1, [r0, #0]

	return (caddr_t) prev_heap;
   845e2:	e001      	b.n	845e8 <_sbrk+0x48>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   845e4:	f04f 33ff 	mov.w	r3, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   845e8:	4618      	mov	r0, r3
   845ea:	4770      	bx	lr

000845ec <_close>:
}

extern int _close(int file)
{
	return -1;
}
   845ec:	f04f 30ff 	mov.w	r0, #4294967295
   845f0:	4770      	bx	lr
   845f2:	bf00      	nop

000845f4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   845f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   845f8:	604b      	str	r3, [r1, #4]

	return 0;
}
   845fa:	f04f 0000 	mov.w	r0, #0
   845fe:	4770      	bx	lr

00084600 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   84600:	f04f 0001 	mov.w	r0, #1
   84604:	4770      	bx	lr
   84606:	bf00      	nop

00084608 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   84608:	f04f 0000 	mov.w	r0, #0
   8460c:	4770      	bx	lr
   8460e:	bf00      	nop

00084610 <__register_exitproc>:
   84610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84614:	4698      	mov	r8, r3
   84616:	4b23      	ldr	r3, [pc, #140]	; (846a4 <__register_exitproc+0x94>)
   84618:	4606      	mov	r6, r0
   8461a:	681c      	ldr	r4, [r3, #0]
   8461c:	460f      	mov	r7, r1
   8461e:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   84622:	4691      	mov	r9, r2
   84624:	b918      	cbnz	r0, 8462e <__register_exitproc+0x1e>
   84626:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   8462a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   8462e:	6841      	ldr	r1, [r0, #4]
   84630:	291f      	cmp	r1, #31
   84632:	dd16      	ble.n	84662 <__register_exitproc+0x52>
   84634:	481c      	ldr	r0, [pc, #112]	; (846a8 <__register_exitproc+0x98>)
   84636:	b918      	cbnz	r0, 84640 <__register_exitproc+0x30>
   84638:	f04f 30ff 	mov.w	r0, #4294967295
   8463c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84640:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84644:	f001 fbce 	bl	85de4 <malloc>
   84648:	2800      	cmp	r0, #0
   8464a:	d0f5      	beq.n	84638 <__register_exitproc+0x28>
   8464c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   84650:	2500      	movs	r5, #0
   84652:	6045      	str	r5, [r0, #4]
   84654:	6002      	str	r2, [r0, #0]
   84656:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   8465a:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   8465e:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   84662:	b1b6      	cbz	r6, 84692 <__register_exitproc+0x82>
   84664:	6844      	ldr	r4, [r0, #4]
   84666:	2201      	movs	r2, #1
   84668:	fa02 f204 	lsl.w	r2, r2, r4
   8466c:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   84670:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   84674:	4311      	orrs	r1, r2
   84676:	2e02      	cmp	r6, #2
   84678:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   8467c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   84680:	461c      	mov	r4, r3
   84682:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   84686:	d104      	bne.n	84692 <__register_exitproc+0x82>
   84688:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   8468c:	431a      	orrs	r2, r3
   8468e:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   84692:	6841      	ldr	r1, [r0, #4]
   84694:	1c8b      	adds	r3, r1, #2
   84696:	1c4a      	adds	r2, r1, #1
   84698:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   8469c:	6042      	str	r2, [r0, #4]
   8469e:	2000      	movs	r0, #0
   846a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   846a4:	00087008 	.word	0x00087008
   846a8:	00085de5 	.word	0x00085de5

000846ac <__libc_fini_array>:
   846ac:	b570      	push	{r4, r5, r6, lr}
   846ae:	4b08      	ldr	r3, [pc, #32]	; (846d0 <__libc_fini_array+0x24>)
   846b0:	4c08      	ldr	r4, [pc, #32]	; (846d4 <__libc_fini_array+0x28>)
   846b2:	2500      	movs	r5, #0
   846b4:	1ae0      	subs	r0, r4, r3
   846b6:	1084      	asrs	r4, r0, #2
   846b8:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   846bc:	3d04      	subs	r5, #4
   846be:	b11c      	cbz	r4, 846c8 <__libc_fini_array+0x1c>
   846c0:	5972      	ldr	r2, [r6, r5]
   846c2:	4790      	blx	r2
   846c4:	3c01      	subs	r4, #1
   846c6:	e7f9      	b.n	846bc <__libc_fini_array+0x10>
   846c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   846cc:	f002 bcce 	b.w	8706c <_fini>
   846d0:	00087078 	.word	0x00087078
   846d4:	0008707c 	.word	0x0008707c

000846d8 <__libc_init_array>:
   846d8:	b538      	push	{r3, r4, r5, lr}
   846da:	4d0e      	ldr	r5, [pc, #56]	; (84714 <__libc_init_array+0x3c>)
   846dc:	4b0e      	ldr	r3, [pc, #56]	; (84718 <__libc_init_array+0x40>)
   846de:	2400      	movs	r4, #0
   846e0:	1ae8      	subs	r0, r5, r3
   846e2:	1085      	asrs	r5, r0, #2
   846e4:	42ac      	cmp	r4, r5
   846e6:	d005      	beq.n	846f4 <__libc_init_array+0x1c>
   846e8:	490b      	ldr	r1, [pc, #44]	; (84718 <__libc_init_array+0x40>)
   846ea:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   846ee:	4790      	blx	r2
   846f0:	3401      	adds	r4, #1
   846f2:	e7f7      	b.n	846e4 <__libc_init_array+0xc>
   846f4:	f002 fcb0 	bl	87058 <_init>
   846f8:	4908      	ldr	r1, [pc, #32]	; (8471c <__libc_init_array+0x44>)
   846fa:	4a09      	ldr	r2, [pc, #36]	; (84720 <__libc_init_array+0x48>)
   846fc:	1a54      	subs	r4, r2, r1
   846fe:	10a5      	asrs	r5, r4, #2
   84700:	2400      	movs	r4, #0
   84702:	42ac      	cmp	r4, r5
   84704:	d005      	beq.n	84712 <__libc_init_array+0x3a>
   84706:	4b05      	ldr	r3, [pc, #20]	; (8471c <__libc_init_array+0x44>)
   84708:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8470c:	4780      	blx	r0
   8470e:	3401      	adds	r4, #1
   84710:	e7f7      	b.n	84702 <__libc_init_array+0x2a>
   84712:	bd38      	pop	{r3, r4, r5, pc}
   84714:	00087064 	.word	0x00087064
   84718:	00087064 	.word	0x00087064
   8471c:	00087064 	.word	0x00087064
   84720:	0008706c 	.word	0x0008706c

00084724 <iprintf>:
   84724:	b40f      	push	{r0, r1, r2, r3}
   84726:	b507      	push	{r0, r1, r2, lr}
   84728:	4906      	ldr	r1, [pc, #24]	; (84744 <iprintf+0x20>)
   8472a:	ab04      	add	r3, sp, #16
   8472c:	6808      	ldr	r0, [r1, #0]
   8472e:	f853 2b04 	ldr.w	r2, [r3], #4
   84732:	6881      	ldr	r1, [r0, #8]
   84734:	9301      	str	r3, [sp, #4]
   84736:	f000 f905 	bl	84944 <_vfiprintf_r>
   8473a:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
   8473e:	b004      	add	sp, #16
   84740:	4770      	bx	lr
   84742:	bf00      	nop
   84744:	20070010 	.word	0x20070010

00084748 <_iprintf_r>:
   84748:	b40e      	push	{r1, r2, r3}
   8474a:	b503      	push	{r0, r1, lr}
   8474c:	ab03      	add	r3, sp, #12
   8474e:	f853 2b04 	ldr.w	r2, [r3], #4
   84752:	6881      	ldr	r1, [r0, #8]
   84754:	9301      	str	r3, [sp, #4]
   84756:	f000 f8f5 	bl	84944 <_vfiprintf_r>
   8475a:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
   8475e:	b003      	add	sp, #12
   84760:	4770      	bx	lr
   84762:	bf00      	nop

00084764 <memcpy>:
   84764:	b510      	push	{r4, lr}
   84766:	2300      	movs	r3, #0
   84768:	4293      	cmp	r3, r2
   8476a:	d003      	beq.n	84774 <memcpy+0x10>
   8476c:	5ccc      	ldrb	r4, [r1, r3]
   8476e:	54c4      	strb	r4, [r0, r3]
   84770:	3301      	adds	r3, #1
   84772:	e7f9      	b.n	84768 <memcpy+0x4>
   84774:	bd10      	pop	{r4, pc}

00084776 <memset>:
   84776:	1882      	adds	r2, r0, r2
   84778:	4603      	mov	r3, r0
   8477a:	4293      	cmp	r3, r2
   8477c:	d002      	beq.n	84784 <memset+0xe>
   8477e:	f803 1b01 	strb.w	r1, [r3], #1
   84782:	e7fa      	b.n	8477a <memset+0x4>
   84784:	4770      	bx	lr

00084786 <setbuf>:
   84786:	2900      	cmp	r1, #0
   84788:	bf0c      	ite	eq
   8478a:	2202      	moveq	r2, #2
   8478c:	2200      	movne	r2, #0
   8478e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   84792:	f000 b80f 	b.w	847b4 <setvbuf>
	...

00084798 <setjmp>:
   84798:	46ec      	mov	ip, sp
   8479a:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   8479e:	f04f 0000 	mov.w	r0, #0
   847a2:	4770      	bx	lr

000847a4 <longjmp>:
   847a4:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   847a8:	46e5      	mov	sp, ip
   847aa:	0008      	movs	r0, r1
   847ac:	bf08      	it	eq
   847ae:	2001      	moveq	r0, #1
   847b0:	4770      	bx	lr
   847b2:	bf00      	nop

000847b4 <setvbuf>:
   847b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   847b8:	461d      	mov	r5, r3
   847ba:	4b37      	ldr	r3, [pc, #220]	; (84898 <setvbuf+0xe4>)
   847bc:	4604      	mov	r4, r0
   847be:	6818      	ldr	r0, [r3, #0]
   847c0:	460e      	mov	r6, r1
   847c2:	4617      	mov	r7, r2
   847c4:	4698      	mov	r8, r3
   847c6:	b118      	cbz	r0, 847d0 <setvbuf+0x1c>
   847c8:	6b82      	ldr	r2, [r0, #56]	; 0x38
   847ca:	b90a      	cbnz	r2, 847d0 <setvbuf+0x1c>
   847cc:	f000 fec8 	bl	85560 <__sinit>
   847d0:	2f02      	cmp	r7, #2
   847d2:	d85d      	bhi.n	84890 <setvbuf+0xdc>
   847d4:	2d00      	cmp	r5, #0
   847d6:	db5b      	blt.n	84890 <setvbuf+0xdc>
   847d8:	4621      	mov	r1, r4
   847da:	f8d8 0000 	ldr.w	r0, [r8]
   847de:	f000 fdcd 	bl	8537c <_fflush_r>
   847e2:	89a1      	ldrh	r1, [r4, #12]
   847e4:	2000      	movs	r0, #0
   847e6:	f001 0380 	and.w	r3, r1, #128	; 0x80
   847ea:	b21a      	sxth	r2, r3
   847ec:	6060      	str	r0, [r4, #4]
   847ee:	61a0      	str	r0, [r4, #24]
   847f0:	b122      	cbz	r2, 847fc <setvbuf+0x48>
   847f2:	4829      	ldr	r0, [pc, #164]	; (84898 <setvbuf+0xe4>)
   847f4:	6921      	ldr	r1, [r4, #16]
   847f6:	6800      	ldr	r0, [r0, #0]
   847f8:	f000 fff0 	bl	857dc <_free_r>
   847fc:	89a1      	ldrh	r1, [r4, #12]
   847fe:	2f02      	cmp	r7, #2
   84800:	f021 0383 	bic.w	r3, r1, #131	; 0x83
   84804:	81a3      	strh	r3, [r4, #12]
   84806:	d012      	beq.n	8482e <setvbuf+0x7a>
   84808:	bb36      	cbnz	r6, 84858 <setvbuf+0xa4>
   8480a:	2d00      	cmp	r5, #0
   8480c:	bf08      	it	eq
   8480e:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   84812:	4628      	mov	r0, r5
   84814:	f001 fae6 	bl	85de4 <malloc>
   84818:	4606      	mov	r6, r0
   8481a:	b9c8      	cbnz	r0, 84850 <setvbuf+0x9c>
   8481c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   84820:	f001 fae0 	bl	85de4 <malloc>
   84824:	4606      	mov	r6, r0
   84826:	b988      	cbnz	r0, 8484c <setvbuf+0x98>
   84828:	f04f 30ff 	mov.w	r0, #4294967295
   8482c:	e000      	b.n	84830 <setvbuf+0x7c>
   8482e:	2000      	movs	r0, #0
   84830:	89a1      	ldrh	r1, [r4, #12]
   84832:	2200      	movs	r2, #0
   84834:	f041 0302 	orr.w	r3, r1, #2
   84838:	81a3      	strh	r3, [r4, #12]
   8483a:	f104 0143 	add.w	r1, r4, #67	; 0x43
   8483e:	2301      	movs	r3, #1
   84840:	60a2      	str	r2, [r4, #8]
   84842:	6021      	str	r1, [r4, #0]
   84844:	6121      	str	r1, [r4, #16]
   84846:	6163      	str	r3, [r4, #20]
   84848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8484c:	f44f 6580 	mov.w	r5, #1024	; 0x400
   84850:	89a2      	ldrh	r2, [r4, #12]
   84852:	f042 0080 	orr.w	r0, r2, #128	; 0x80
   84856:	81a0      	strh	r0, [r4, #12]
   84858:	2f01      	cmp	r7, #1
   8485a:	d105      	bne.n	84868 <setvbuf+0xb4>
   8485c:	89a1      	ldrh	r1, [r4, #12]
   8485e:	426a      	negs	r2, r5
   84860:	f041 0301 	orr.w	r3, r1, #1
   84864:	81a3      	strh	r3, [r4, #12]
   84866:	61a2      	str	r2, [r4, #24]
   84868:	480b      	ldr	r0, [pc, #44]	; (84898 <setvbuf+0xe4>)
   8486a:	89a2      	ldrh	r2, [r4, #12]
   8486c:	6801      	ldr	r1, [r0, #0]
   8486e:	4b0b      	ldr	r3, [pc, #44]	; (8489c <setvbuf+0xe8>)
   84870:	f002 0008 	and.w	r0, r2, #8
   84874:	b200      	sxth	r0, r0
   84876:	63cb      	str	r3, [r1, #60]	; 0x3c
   84878:	6026      	str	r6, [r4, #0]
   8487a:	6126      	str	r6, [r4, #16]
   8487c:	6165      	str	r5, [r4, #20]
   8487e:	b148      	cbz	r0, 84894 <setvbuf+0xe0>
   84880:	f012 0f03 	tst.w	r2, #3
   84884:	bf18      	it	ne
   84886:	2500      	movne	r5, #0
   84888:	60a5      	str	r5, [r4, #8]
   8488a:	2000      	movs	r0, #0
   8488c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84890:	f04f 30ff 	mov.w	r0, #4294967295
   84894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84898:	20070010 	.word	0x20070010
   8489c:	000854d5 	.word	0x000854d5

000848a0 <strlen>:
   848a0:	4603      	mov	r3, r0
   848a2:	f813 2b01 	ldrb.w	r2, [r3], #1
   848a6:	2a00      	cmp	r2, #0
   848a8:	d1fb      	bne.n	848a2 <strlen+0x2>
   848aa:	1a18      	subs	r0, r3, r0
   848ac:	3801      	subs	r0, #1
   848ae:	4770      	bx	lr

000848b0 <strncpy>:
   848b0:	b530      	push	{r4, r5, lr}
   848b2:	3901      	subs	r1, #1
   848b4:	4603      	mov	r3, r0
   848b6:	461c      	mov	r4, r3
   848b8:	b13a      	cbz	r2, 848ca <strncpy+0x1a>
   848ba:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   848be:	3a01      	subs	r2, #1
   848c0:	f803 5b01 	strb.w	r5, [r3], #1
   848c4:	461c      	mov	r4, r3
   848c6:	2d00      	cmp	r5, #0
   848c8:	d1f5      	bne.n	848b6 <strncpy+0x6>
   848ca:	1899      	adds	r1, r3, r2
   848cc:	428c      	cmp	r4, r1
   848ce:	d003      	beq.n	848d8 <strncpy+0x28>
   848d0:	2200      	movs	r2, #0
   848d2:	f804 2b01 	strb.w	r2, [r4], #1
   848d6:	e7f9      	b.n	848cc <strncpy+0x1c>
   848d8:	bd30      	pop	{r4, r5, pc}
	...

000848dc <__sprint_r>:
   848dc:	6893      	ldr	r3, [r2, #8]
   848de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   848e2:	4681      	mov	r9, r0
   848e4:	460f      	mov	r7, r1
   848e6:	4614      	mov	r4, r2
   848e8:	b91b      	cbnz	r3, 848f2 <__sprint_r+0x16>
   848ea:	6053      	str	r3, [r2, #4]
   848ec:	4618      	mov	r0, r3
   848ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   848f2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   848f4:	049b      	lsls	r3, r3, #18
   848f6:	d51e      	bpl.n	84936 <__sprint_r+0x5a>
   848f8:	6815      	ldr	r5, [r2, #0]
   848fa:	68a0      	ldr	r0, [r4, #8]
   848fc:	3508      	adds	r5, #8
   848fe:	b1c8      	cbz	r0, 84934 <__sprint_r+0x58>
   84900:	f855 1c04 	ldr.w	r1, [r5, #-4]
   84904:	f855 ac08 	ldr.w	sl, [r5, #-8]
   84908:	ea4f 0891 	mov.w	r8, r1, lsr #2
   8490c:	2600      	movs	r6, #0
   8490e:	4546      	cmp	r6, r8
   84910:	da09      	bge.n	84926 <__sprint_r+0x4a>
   84912:	4648      	mov	r0, r9
   84914:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
   84918:	463a      	mov	r2, r7
   8491a:	f000 fe9d 	bl	85658 <_fputwc_r>
   8491e:	1c43      	adds	r3, r0, #1
   84920:	d00b      	beq.n	8493a <__sprint_r+0x5e>
   84922:	3601      	adds	r6, #1
   84924:	e7f3      	b.n	8490e <__sprint_r+0x32>
   84926:	68a2      	ldr	r2, [r4, #8]
   84928:	ea4f 0888 	mov.w	r8, r8, lsl #2
   8492c:	ebc8 0302 	rsb	r3, r8, r2
   84930:	60a3      	str	r3, [r4, #8]
   84932:	e7e2      	b.n	848fa <__sprint_r+0x1e>
   84934:	e001      	b.n	8493a <__sprint_r+0x5e>
   84936:	f001 f807 	bl	85948 <__sfvwrite_r>
   8493a:	2100      	movs	r1, #0
   8493c:	60a1      	str	r1, [r4, #8]
   8493e:	6061      	str	r1, [r4, #4]
   84940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00084944 <_vfiprintf_r>:
   84944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84948:	4689      	mov	r9, r1
   8494a:	b0a9      	sub	sp, #164	; 0xa4
   8494c:	4614      	mov	r4, r2
   8494e:	461d      	mov	r5, r3
   84950:	461e      	mov	r6, r3
   84952:	4682      	mov	sl, r0
   84954:	b118      	cbz	r0, 8495e <_vfiprintf_r+0x1a>
   84956:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84958:	b90b      	cbnz	r3, 8495e <_vfiprintf_r+0x1a>
   8495a:	f000 fe01 	bl	85560 <__sinit>
   8495e:	f8b9 000c 	ldrh.w	r0, [r9, #12]
   84962:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
   84966:	b211      	sxth	r1, r2
   84968:	b949      	cbnz	r1, 8497e <_vfiprintf_r+0x3a>
   8496a:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
   8496e:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
   84972:	f8a9 300c 	strh.w	r3, [r9, #12]
   84976:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   8497a:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
   8497e:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   84982:	f001 0308 	and.w	r3, r1, #8
   84986:	b218      	sxth	r0, r3
   84988:	b148      	cbz	r0, 8499e <_vfiprintf_r+0x5a>
   8498a:	f8d9 2010 	ldr.w	r2, [r9, #16]
   8498e:	b132      	cbz	r2, 8499e <_vfiprintf_r+0x5a>
   84990:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   84994:	f001 031a 	and.w	r3, r1, #26
   84998:	2b0a      	cmp	r3, #10
   8499a:	d116      	bne.n	849ca <_vfiprintf_r+0x86>
   8499c:	e009      	b.n	849b2 <_vfiprintf_r+0x6e>
   8499e:	4650      	mov	r0, sl
   849a0:	4649      	mov	r1, r9
   849a2:	f000 fc7f 	bl	852a4 <__swsetup_r>
   849a6:	2800      	cmp	r0, #0
   849a8:	d0f2      	beq.n	84990 <_vfiprintf_r+0x4c>
   849aa:	f04f 32ff 	mov.w	r2, #4294967295
   849ae:	9203      	str	r2, [sp, #12]
   849b0:	e3d3      	b.n	8515a <_vfiprintf_r+0x816>
   849b2:	f9b9 000e 	ldrsh.w	r0, [r9, #14]
   849b6:	2800      	cmp	r0, #0
   849b8:	db07      	blt.n	849ca <_vfiprintf_r+0x86>
   849ba:	4650      	mov	r0, sl
   849bc:	4649      	mov	r1, r9
   849be:	4622      	mov	r2, r4
   849c0:	462b      	mov	r3, r5
   849c2:	f000 fbce 	bl	85162 <__sbprintf>
   849c6:	9003      	str	r0, [sp, #12]
   849c8:	e3c7      	b.n	8515a <_vfiprintf_r+0x816>
   849ca:	2200      	movs	r2, #0
   849cc:	ad18      	add	r5, sp, #96	; 0x60
   849ce:	950b      	str	r5, [sp, #44]	; 0x2c
   849d0:	920d      	str	r2, [sp, #52]	; 0x34
   849d2:	920c      	str	r2, [sp, #48]	; 0x30
   849d4:	9401      	str	r4, [sp, #4]
   849d6:	9205      	str	r2, [sp, #20]
   849d8:	9203      	str	r2, [sp, #12]
   849da:	46a8      	mov	r8, r5
   849dc:	9901      	ldr	r1, [sp, #4]
   849de:	460c      	mov	r4, r1
   849e0:	f811 3b01 	ldrb.w	r3, [r1], #1
   849e4:	b10b      	cbz	r3, 849ea <_vfiprintf_r+0xa6>
   849e6:	2b25      	cmp	r3, #37	; 0x25
   849e8:	d1f9      	bne.n	849de <_vfiprintf_r+0x9a>
   849ea:	9a01      	ldr	r2, [sp, #4]
   849ec:	1aa5      	subs	r5, r4, r2
   849ee:	d019      	beq.n	84a24 <_vfiprintf_r+0xe0>
   849f0:	990c      	ldr	r1, [sp, #48]	; 0x30
   849f2:	980d      	ldr	r0, [sp, #52]	; 0x34
   849f4:	1c4b      	adds	r3, r1, #1
   849f6:	e888 0024 	stmia.w	r8, {r2, r5}
   849fa:	2b07      	cmp	r3, #7
   849fc:	eb00 0205 	add.w	r2, r0, r5
   84a00:	920d      	str	r2, [sp, #52]	; 0x34
   84a02:	f108 0808 	add.w	r8, r8, #8
   84a06:	930c      	str	r3, [sp, #48]	; 0x30
   84a08:	dd09      	ble.n	84a1e <_vfiprintf_r+0xda>
   84a0a:	4650      	mov	r0, sl
   84a0c:	4649      	mov	r1, r9
   84a0e:	aa0b      	add	r2, sp, #44	; 0x2c
   84a10:	f7ff ff64 	bl	848dc <__sprint_r>
   84a14:	2800      	cmp	r0, #0
   84a16:	f040 8398 	bne.w	8514a <_vfiprintf_r+0x806>
   84a1a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84a1e:	9803      	ldr	r0, [sp, #12]
   84a20:	1942      	adds	r2, r0, r5
   84a22:	9203      	str	r2, [sp, #12]
   84a24:	7821      	ldrb	r1, [r4, #0]
   84a26:	2900      	cmp	r1, #0
   84a28:	f000 8388 	beq.w	8513c <_vfiprintf_r+0x7f8>
   84a2c:	2200      	movs	r2, #0
   84a2e:	3401      	adds	r4, #1
   84a30:	9401      	str	r4, [sp, #4]
   84a32:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84a36:	f04f 3cff 	mov.w	ip, #4294967295
   84a3a:	9204      	str	r2, [sp, #16]
   84a3c:	4617      	mov	r7, r2
   84a3e:	9801      	ldr	r0, [sp, #4]
   84a40:	f810 3b01 	ldrb.w	r3, [r0], #1
   84a44:	9001      	str	r0, [sp, #4]
   84a46:	2b63      	cmp	r3, #99	; 0x63
   84a48:	f000 80b3 	beq.w	84bb2 <_vfiprintf_r+0x26e>
   84a4c:	dc33      	bgt.n	84ab6 <_vfiprintf_r+0x172>
   84a4e:	2b39      	cmp	r3, #57	; 0x39
   84a50:	dc1a      	bgt.n	84a88 <_vfiprintf_r+0x144>
   84a52:	2b31      	cmp	r3, #49	; 0x31
   84a54:	f280 8091 	bge.w	84b7a <_vfiprintf_r+0x236>
   84a58:	2b2b      	cmp	r3, #43	; 0x2b
   84a5a:	d101      	bne.n	84a60 <_vfiprintf_r+0x11c>
   84a5c:	461a      	mov	r2, r3
   84a5e:	e7ee      	b.n	84a3e <_vfiprintf_r+0xfa>
   84a60:	dc0a      	bgt.n	84a78 <_vfiprintf_r+0x134>
   84a62:	2b23      	cmp	r3, #35	; 0x23
   84a64:	d055      	beq.n	84b12 <_vfiprintf_r+0x1ce>
   84a66:	2b2a      	cmp	r3, #42	; 0x2a
   84a68:	d056      	beq.n	84b18 <_vfiprintf_r+0x1d4>
   84a6a:	2b20      	cmp	r3, #32
   84a6c:	f040 81f5 	bne.w	84e5a <_vfiprintf_r+0x516>
   84a70:	2a00      	cmp	r2, #0
   84a72:	bf08      	it	eq
   84a74:	2220      	moveq	r2, #32
   84a76:	e7e2      	b.n	84a3e <_vfiprintf_r+0xfa>
   84a78:	2b2e      	cmp	r3, #46	; 0x2e
   84a7a:	d058      	beq.n	84b2e <_vfiprintf_r+0x1ea>
   84a7c:	2b30      	cmp	r3, #48	; 0x30
   84a7e:	d079      	beq.n	84b74 <_vfiprintf_r+0x230>
   84a80:	2b2d      	cmp	r3, #45	; 0x2d
   84a82:	f040 81ea 	bne.w	84e5a <_vfiprintf_r+0x516>
   84a86:	e04f      	b.n	84b28 <_vfiprintf_r+0x1e4>
   84a88:	2b4f      	cmp	r3, #79	; 0x4f
   84a8a:	f000 80de 	beq.w	84c4a <_vfiprintf_r+0x306>
   84a8e:	dc07      	bgt.n	84aa0 <_vfiprintf_r+0x15c>
   84a90:	2b44      	cmp	r3, #68	; 0x44
   84a92:	f040 81e2 	bne.w	84e5a <_vfiprintf_r+0x516>
   84a96:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84a9a:	f047 0710 	orr.w	r7, r7, #16
   84a9e:	e090      	b.n	84bc2 <_vfiprintf_r+0x27e>
   84aa0:	2b55      	cmp	r3, #85	; 0x55
   84aa2:	f000 811f 	beq.w	84ce4 <_vfiprintf_r+0x3a0>
   84aa6:	2b58      	cmp	r3, #88	; 0x58
   84aa8:	f040 81d7 	bne.w	84e5a <_vfiprintf_r+0x516>
   84aac:	4dae      	ldr	r5, [pc, #696]	; (84d68 <_vfiprintf_r+0x424>)
   84aae:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84ab2:	9505      	str	r5, [sp, #20]
   84ab4:	e130      	b.n	84d18 <_vfiprintf_r+0x3d4>
   84ab6:	2b6f      	cmp	r3, #111	; 0x6f
   84ab8:	f000 80c9 	beq.w	84c4e <_vfiprintf_r+0x30a>
   84abc:	dc10      	bgt.n	84ae0 <_vfiprintf_r+0x19c>
   84abe:	2b69      	cmp	r3, #105	; 0x69
   84ac0:	d024      	beq.n	84b0c <_vfiprintf_r+0x1c8>
   84ac2:	dc07      	bgt.n	84ad4 <_vfiprintf_r+0x190>
   84ac4:	2b64      	cmp	r3, #100	; 0x64
   84ac6:	d021      	beq.n	84b0c <_vfiprintf_r+0x1c8>
   84ac8:	2b68      	cmp	r3, #104	; 0x68
   84aca:	f040 81c6 	bne.w	84e5a <_vfiprintf_r+0x516>
   84ace:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   84ad2:	e7b4      	b.n	84a3e <_vfiprintf_r+0xfa>
   84ad4:	2b6c      	cmp	r3, #108	; 0x6c
   84ad6:	d05f      	beq.n	84b98 <_vfiprintf_r+0x254>
   84ad8:	2b6e      	cmp	r3, #110	; 0x6e
   84ada:	f040 81be 	bne.w	84e5a <_vfiprintf_r+0x516>
   84ade:	e096      	b.n	84c0e <_vfiprintf_r+0x2ca>
   84ae0:	2b73      	cmp	r3, #115	; 0x73
   84ae2:	f000 80df 	beq.w	84ca4 <_vfiprintf_r+0x360>
   84ae6:	dc06      	bgt.n	84af6 <_vfiprintf_r+0x1b2>
   84ae8:	2b70      	cmp	r3, #112	; 0x70
   84aea:	f000 80cd 	beq.w	84c88 <_vfiprintf_r+0x344>
   84aee:	2b71      	cmp	r3, #113	; 0x71
   84af0:	f040 81b3 	bne.w	84e5a <_vfiprintf_r+0x516>
   84af4:	e05a      	b.n	84bac <_vfiprintf_r+0x268>
   84af6:	2b75      	cmp	r3, #117	; 0x75
   84af8:	f000 80f6 	beq.w	84ce8 <_vfiprintf_r+0x3a4>
   84afc:	2b78      	cmp	r3, #120	; 0x78
   84afe:	f040 81ac 	bne.w	84e5a <_vfiprintf_r+0x516>
   84b02:	4d9a      	ldr	r5, [pc, #616]	; (84d6c <_vfiprintf_r+0x428>)
   84b04:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84b08:	9505      	str	r5, [sp, #20]
   84b0a:	e105      	b.n	84d18 <_vfiprintf_r+0x3d4>
   84b0c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84b10:	e057      	b.n	84bc2 <_vfiprintf_r+0x27e>
   84b12:	f047 0701 	orr.w	r7, r7, #1
   84b16:	e792      	b.n	84a3e <_vfiprintf_r+0xfa>
   84b18:	1d33      	adds	r3, r6, #4
   84b1a:	6836      	ldr	r6, [r6, #0]
   84b1c:	2e00      	cmp	r6, #0
   84b1e:	9604      	str	r6, [sp, #16]
   84b20:	da15      	bge.n	84b4e <_vfiprintf_r+0x20a>
   84b22:	4270      	negs	r0, r6
   84b24:	9004      	str	r0, [sp, #16]
   84b26:	461e      	mov	r6, r3
   84b28:	f047 0704 	orr.w	r7, r7, #4
   84b2c:	e787      	b.n	84a3e <_vfiprintf_r+0xfa>
   84b2e:	9901      	ldr	r1, [sp, #4]
   84b30:	f811 3b01 	ldrb.w	r3, [r1], #1
   84b34:	2b2a      	cmp	r3, #42	; 0x2a
   84b36:	9101      	str	r1, [sp, #4]
   84b38:	d10b      	bne.n	84b52 <_vfiprintf_r+0x20e>
   84b3a:	f8d6 c000 	ldr.w	ip, [r6]
   84b3e:	1d33      	adds	r3, r6, #4
   84b40:	f1bc 0f00 	cmp.w	ip, #0
   84b44:	da03      	bge.n	84b4e <_vfiprintf_r+0x20a>
   84b46:	461e      	mov	r6, r3
   84b48:	f04f 3cff 	mov.w	ip, #4294967295
   84b4c:	e777      	b.n	84a3e <_vfiprintf_r+0xfa>
   84b4e:	461e      	mov	r6, r3
   84b50:	e775      	b.n	84a3e <_vfiprintf_r+0xfa>
   84b52:	f04f 0c00 	mov.w	ip, #0
   84b56:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84b5a:	2809      	cmp	r0, #9
   84b5c:	d807      	bhi.n	84b6e <_vfiprintf_r+0x22a>
   84b5e:	9901      	ldr	r1, [sp, #4]
   84b60:	230a      	movs	r3, #10
   84b62:	fb03 0c0c 	mla	ip, r3, ip, r0
   84b66:	f811 3b01 	ldrb.w	r3, [r1], #1
   84b6a:	9101      	str	r1, [sp, #4]
   84b6c:	e7f3      	b.n	84b56 <_vfiprintf_r+0x212>
   84b6e:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   84b72:	e768      	b.n	84a46 <_vfiprintf_r+0x102>
   84b74:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   84b78:	e761      	b.n	84a3e <_vfiprintf_r+0xfa>
   84b7a:	9801      	ldr	r0, [sp, #4]
   84b7c:	2100      	movs	r1, #0
   84b7e:	3b30      	subs	r3, #48	; 0x30
   84b80:	240a      	movs	r4, #10
   84b82:	fb04 3101 	mla	r1, r4, r1, r3
   84b86:	f810 3b01 	ldrb.w	r3, [r0], #1
   84b8a:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   84b8e:	2c09      	cmp	r4, #9
   84b90:	9001      	str	r0, [sp, #4]
   84b92:	d9f4      	bls.n	84b7e <_vfiprintf_r+0x23a>
   84b94:	9104      	str	r1, [sp, #16]
   84b96:	e756      	b.n	84a46 <_vfiprintf_r+0x102>
   84b98:	9901      	ldr	r1, [sp, #4]
   84b9a:	780b      	ldrb	r3, [r1, #0]
   84b9c:	2b6c      	cmp	r3, #108	; 0x6c
   84b9e:	d102      	bne.n	84ba6 <_vfiprintf_r+0x262>
   84ba0:	1c48      	adds	r0, r1, #1
   84ba2:	9001      	str	r0, [sp, #4]
   84ba4:	e002      	b.n	84bac <_vfiprintf_r+0x268>
   84ba6:	f047 0710 	orr.w	r7, r7, #16
   84baa:	e748      	b.n	84a3e <_vfiprintf_r+0xfa>
   84bac:	f047 0720 	orr.w	r7, r7, #32
   84bb0:	e745      	b.n	84a3e <_vfiprintf_r+0xfa>
   84bb2:	6832      	ldr	r2, [r6, #0]
   84bb4:	2500      	movs	r5, #0
   84bb6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   84bba:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   84bbe:	3604      	adds	r6, #4
   84bc0:	e155      	b.n	84e6e <_vfiprintf_r+0x52a>
   84bc2:	06ba      	lsls	r2, r7, #26
   84bc4:	d507      	bpl.n	84bd6 <_vfiprintf_r+0x292>
   84bc6:	3607      	adds	r6, #7
   84bc8:	f026 0507 	bic.w	r5, r6, #7
   84bcc:	f105 0608 	add.w	r6, r5, #8
   84bd0:	e9d5 4500 	ldrd	r4, r5, [r5]
   84bd4:	e00f      	b.n	84bf6 <_vfiprintf_r+0x2b2>
   84bd6:	f017 0f10 	tst.w	r7, #16
   84bda:	f106 0104 	add.w	r1, r6, #4
   84bde:	d001      	beq.n	84be4 <_vfiprintf_r+0x2a0>
   84be0:	6832      	ldr	r2, [r6, #0]
   84be2:	e005      	b.n	84bf0 <_vfiprintf_r+0x2ac>
   84be4:	f017 0f40 	tst.w	r7, #64	; 0x40
   84be8:	6832      	ldr	r2, [r6, #0]
   84bea:	d001      	beq.n	84bf0 <_vfiprintf_r+0x2ac>
   84bec:	b214      	sxth	r4, r2
   84bee:	e000      	b.n	84bf2 <_vfiprintf_r+0x2ae>
   84bf0:	4614      	mov	r4, r2
   84bf2:	17e5      	asrs	r5, r4, #31
   84bf4:	460e      	mov	r6, r1
   84bf6:	2c00      	cmp	r4, #0
   84bf8:	f175 0200 	sbcs.w	r2, r5, #0
   84bfc:	f280 80b8 	bge.w	84d70 <_vfiprintf_r+0x42c>
   84c00:	232d      	movs	r3, #45	; 0x2d
   84c02:	4264      	negs	r4, r4
   84c04:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   84c08:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   84c0c:	e0b0      	b.n	84d70 <_vfiprintf_r+0x42c>
   84c0e:	f017 0f20 	tst.w	r7, #32
   84c12:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84c16:	f106 0204 	add.w	r2, r6, #4
   84c1a:	d005      	beq.n	84c28 <_vfiprintf_r+0x2e4>
   84c1c:	9c03      	ldr	r4, [sp, #12]
   84c1e:	6835      	ldr	r5, [r6, #0]
   84c20:	17e0      	asrs	r0, r4, #31
   84c22:	602c      	str	r4, [r5, #0]
   84c24:	6068      	str	r0, [r5, #4]
   84c26:	e004      	b.n	84c32 <_vfiprintf_r+0x2ee>
   84c28:	06fb      	lsls	r3, r7, #27
   84c2a:	d504      	bpl.n	84c36 <_vfiprintf_r+0x2f2>
   84c2c:	6833      	ldr	r3, [r6, #0]
   84c2e:	9903      	ldr	r1, [sp, #12]
   84c30:	6019      	str	r1, [r3, #0]
   84c32:	4616      	mov	r6, r2
   84c34:	e6d2      	b.n	849dc <_vfiprintf_r+0x98>
   84c36:	6830      	ldr	r0, [r6, #0]
   84c38:	9c03      	ldr	r4, [sp, #12]
   84c3a:	f017 0f40 	tst.w	r7, #64	; 0x40
   84c3e:	f106 0604 	add.w	r6, r6, #4
   84c42:	bf14      	ite	ne
   84c44:	8004      	strhne	r4, [r0, #0]
   84c46:	6004      	streq	r4, [r0, #0]
   84c48:	e6c8      	b.n	849dc <_vfiprintf_r+0x98>
   84c4a:	f047 0710 	orr.w	r7, r7, #16
   84c4e:	f017 0020 	ands.w	r0, r7, #32
   84c52:	d008      	beq.n	84c66 <_vfiprintf_r+0x322>
   84c54:	1df3      	adds	r3, r6, #7
   84c56:	f023 0507 	bic.w	r5, r3, #7
   84c5a:	f105 0608 	add.w	r6, r5, #8
   84c5e:	e9d5 4500 	ldrd	r4, r5, [r5]
   84c62:	2000      	movs	r0, #0
   84c64:	e07c      	b.n	84d60 <_vfiprintf_r+0x41c>
   84c66:	f017 0110 	ands.w	r1, r7, #16
   84c6a:	f106 0204 	add.w	r2, r6, #4
   84c6e:	d106      	bne.n	84c7e <_vfiprintf_r+0x33a>
   84c70:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   84c74:	d003      	beq.n	84c7e <_vfiprintf_r+0x33a>
   84c76:	8834      	ldrh	r4, [r6, #0]
   84c78:	2500      	movs	r5, #0
   84c7a:	4616      	mov	r6, r2
   84c7c:	e7f1      	b.n	84c62 <_vfiprintf_r+0x31e>
   84c7e:	6836      	ldr	r6, [r6, #0]
   84c80:	2500      	movs	r5, #0
   84c82:	4634      	mov	r4, r6
   84c84:	4616      	mov	r6, r2
   84c86:	e06b      	b.n	84d60 <_vfiprintf_r+0x41c>
   84c88:	4b38      	ldr	r3, [pc, #224]	; (84d6c <_vfiprintf_r+0x428>)
   84c8a:	2130      	movs	r1, #48	; 0x30
   84c8c:	2278      	movs	r2, #120	; 0x78
   84c8e:	6834      	ldr	r4, [r6, #0]
   84c90:	2500      	movs	r5, #0
   84c92:	f047 0702 	orr.w	r7, r7, #2
   84c96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   84c9a:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   84c9e:	3604      	adds	r6, #4
   84ca0:	9305      	str	r3, [sp, #20]
   84ca2:	e05c      	b.n	84d5e <_vfiprintf_r+0x41a>
   84ca4:	4631      	mov	r1, r6
   84ca6:	2500      	movs	r5, #0
   84ca8:	f8d1 b000 	ldr.w	fp, [r1]
   84cac:	3604      	adds	r6, #4
   84cae:	45ac      	cmp	ip, r5
   84cb0:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   84cb4:	4658      	mov	r0, fp
   84cb6:	db11      	blt.n	84cdc <_vfiprintf_r+0x398>
   84cb8:	4662      	mov	r2, ip
   84cba:	4629      	mov	r1, r5
   84cbc:	f8cd c000 	str.w	ip, [sp]
   84cc0:	f001 faa2 	bl	86208 <memchr>
   84cc4:	f8dd c000 	ldr.w	ip, [sp]
   84cc8:	2800      	cmp	r0, #0
   84cca:	f000 80d4 	beq.w	84e76 <_vfiprintf_r+0x532>
   84cce:	ebcb 0400 	rsb	r4, fp, r0
   84cd2:	4564      	cmp	r4, ip
   84cd4:	f340 80d1 	ble.w	84e7a <_vfiprintf_r+0x536>
   84cd8:	4664      	mov	r4, ip
   84cda:	e0ce      	b.n	84e7a <_vfiprintf_r+0x536>
   84cdc:	f7ff fde0 	bl	848a0 <strlen>
   84ce0:	4604      	mov	r4, r0
   84ce2:	e0ca      	b.n	84e7a <_vfiprintf_r+0x536>
   84ce4:	f047 0710 	orr.w	r7, r7, #16
   84ce8:	06bd      	lsls	r5, r7, #26
   84cea:	d506      	bpl.n	84cfa <_vfiprintf_r+0x3b6>
   84cec:	1df0      	adds	r0, r6, #7
   84cee:	f020 0407 	bic.w	r4, r0, #7
   84cf2:	f104 0608 	add.w	r6, r4, #8
   84cf6:	cc30      	ldmia	r4, {r4, r5}
   84cf8:	e00c      	b.n	84d14 <_vfiprintf_r+0x3d0>
   84cfa:	f017 0f10 	tst.w	r7, #16
   84cfe:	f106 0304 	add.w	r3, r6, #4
   84d02:	d103      	bne.n	84d0c <_vfiprintf_r+0x3c8>
   84d04:	067c      	lsls	r4, r7, #25
   84d06:	d501      	bpl.n	84d0c <_vfiprintf_r+0x3c8>
   84d08:	8834      	ldrh	r4, [r6, #0]
   84d0a:	e001      	b.n	84d10 <_vfiprintf_r+0x3cc>
   84d0c:	6835      	ldr	r5, [r6, #0]
   84d0e:	462c      	mov	r4, r5
   84d10:	2500      	movs	r5, #0
   84d12:	461e      	mov	r6, r3
   84d14:	2001      	movs	r0, #1
   84d16:	e023      	b.n	84d60 <_vfiprintf_r+0x41c>
   84d18:	06b8      	lsls	r0, r7, #26
   84d1a:	d507      	bpl.n	84d2c <_vfiprintf_r+0x3e8>
   84d1c:	1df4      	adds	r4, r6, #7
   84d1e:	f024 0107 	bic.w	r1, r4, #7
   84d22:	f101 0608 	add.w	r6, r1, #8
   84d26:	e9d1 4500 	ldrd	r4, r5, [r1]
   84d2a:	e00c      	b.n	84d46 <_vfiprintf_r+0x402>
   84d2c:	f017 0f10 	tst.w	r7, #16
   84d30:	f106 0004 	add.w	r0, r6, #4
   84d34:	d103      	bne.n	84d3e <_vfiprintf_r+0x3fa>
   84d36:	0679      	lsls	r1, r7, #25
   84d38:	d501      	bpl.n	84d3e <_vfiprintf_r+0x3fa>
   84d3a:	8834      	ldrh	r4, [r6, #0]
   84d3c:	e001      	b.n	84d42 <_vfiprintf_r+0x3fe>
   84d3e:	6836      	ldr	r6, [r6, #0]
   84d40:	4634      	mov	r4, r6
   84d42:	2500      	movs	r5, #0
   84d44:	4606      	mov	r6, r0
   84d46:	07fa      	lsls	r2, r7, #31
   84d48:	d509      	bpl.n	84d5e <_vfiprintf_r+0x41a>
   84d4a:	ea54 0205 	orrs.w	r2, r4, r5
   84d4e:	d006      	beq.n	84d5e <_vfiprintf_r+0x41a>
   84d50:	2230      	movs	r2, #48	; 0x30
   84d52:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   84d56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   84d5a:	f047 0702 	orr.w	r7, r7, #2
   84d5e:	2002      	movs	r0, #2
   84d60:	2100      	movs	r1, #0
   84d62:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   84d66:	e004      	b.n	84d72 <_vfiprintf_r+0x42e>
   84d68:	0008702e 	.word	0x0008702e
   84d6c:	0008703f 	.word	0x0008703f
   84d70:	2001      	movs	r0, #1
   84d72:	f1bc 0f00 	cmp.w	ip, #0
   84d76:	bfa8      	it	ge
   84d78:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   84d7c:	ea54 0105 	orrs.w	r1, r4, r5
   84d80:	d102      	bne.n	84d88 <_vfiprintf_r+0x444>
   84d82:	f1bc 0f00 	cmp.w	ip, #0
   84d86:	d058      	beq.n	84e3a <_vfiprintf_r+0x4f6>
   84d88:	2801      	cmp	r0, #1
   84d8a:	d01d      	beq.n	84dc8 <_vfiprintf_r+0x484>
   84d8c:	2802      	cmp	r0, #2
   84d8e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   84d92:	d041      	beq.n	84e18 <_vfiprintf_r+0x4d4>
   84d94:	f004 0207 	and.w	r2, r4, #7
   84d98:	08e4      	lsrs	r4, r4, #3
   84d9a:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   84d9e:	08e9      	lsrs	r1, r5, #3
   84da0:	4604      	mov	r4, r0
   84da2:	460d      	mov	r5, r1
   84da4:	3230      	adds	r2, #48	; 0x30
   84da6:	ea54 0105 	orrs.w	r1, r4, r5
   84daa:	469b      	mov	fp, r3
   84dac:	701a      	strb	r2, [r3, #0]
   84dae:	f103 33ff 	add.w	r3, r3, #4294967295
   84db2:	d1ef      	bne.n	84d94 <_vfiprintf_r+0x450>
   84db4:	07f8      	lsls	r0, r7, #31
   84db6:	465d      	mov	r5, fp
   84db8:	d54a      	bpl.n	84e50 <_vfiprintf_r+0x50c>
   84dba:	2a30      	cmp	r2, #48	; 0x30
   84dbc:	d048      	beq.n	84e50 <_vfiprintf_r+0x50c>
   84dbe:	2230      	movs	r2, #48	; 0x30
   84dc0:	469b      	mov	fp, r3
   84dc2:	f805 2c01 	strb.w	r2, [r5, #-1]
   84dc6:	e043      	b.n	84e50 <_vfiprintf_r+0x50c>
   84dc8:	2d00      	cmp	r5, #0
   84dca:	bf08      	it	eq
   84dcc:	2c0a      	cmpeq	r4, #10
   84dce:	d203      	bcs.n	84dd8 <_vfiprintf_r+0x494>
   84dd0:	3430      	adds	r4, #48	; 0x30
   84dd2:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   84dd6:	e036      	b.n	84e46 <_vfiprintf_r+0x502>
   84dd8:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   84ddc:	9302      	str	r3, [sp, #8]
   84dde:	4620      	mov	r0, r4
   84de0:	4629      	mov	r1, r5
   84de2:	220a      	movs	r2, #10
   84de4:	2300      	movs	r3, #0
   84de6:	f8cd c000 	str.w	ip, [sp]
   84dea:	f001 fd0f 	bl	8680c <__aeabi_uldivmod>
   84dee:	9802      	ldr	r0, [sp, #8]
   84df0:	3230      	adds	r2, #48	; 0x30
   84df2:	f800 2901 	strb.w	r2, [r0], #-1
   84df6:	4629      	mov	r1, r5
   84df8:	220a      	movs	r2, #10
   84dfa:	2300      	movs	r3, #0
   84dfc:	f8dd b008 	ldr.w	fp, [sp, #8]
   84e00:	9002      	str	r0, [sp, #8]
   84e02:	4620      	mov	r0, r4
   84e04:	f001 fd02 	bl	8680c <__aeabi_uldivmod>
   84e08:	4604      	mov	r4, r0
   84e0a:	460d      	mov	r5, r1
   84e0c:	ea54 0105 	orrs.w	r1, r4, r5
   84e10:	f8dd c000 	ldr.w	ip, [sp]
   84e14:	d1e3      	bne.n	84dde <_vfiprintf_r+0x49a>
   84e16:	e01b      	b.n	84e50 <_vfiprintf_r+0x50c>
   84e18:	9905      	ldr	r1, [sp, #20]
   84e1a:	f004 000f 	and.w	r0, r4, #15
   84e1e:	0924      	lsrs	r4, r4, #4
   84e20:	5c0a      	ldrb	r2, [r1, r0]
   84e22:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   84e26:	0929      	lsrs	r1, r5, #4
   84e28:	4604      	mov	r4, r0
   84e2a:	460d      	mov	r5, r1
   84e2c:	469b      	mov	fp, r3
   84e2e:	f803 2901 	strb.w	r2, [r3], #-1
   84e32:	ea54 0205 	orrs.w	r2, r4, r5
   84e36:	d1ef      	bne.n	84e18 <_vfiprintf_r+0x4d4>
   84e38:	e00a      	b.n	84e50 <_vfiprintf_r+0x50c>
   84e3a:	b938      	cbnz	r0, 84e4c <_vfiprintf_r+0x508>
   84e3c:	07f9      	lsls	r1, r7, #31
   84e3e:	d505      	bpl.n	84e4c <_vfiprintf_r+0x508>
   84e40:	2030      	movs	r0, #48	; 0x30
   84e42:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   84e46:	f10d 0b5f 	add.w	fp, sp, #95	; 0x5f
   84e4a:	e001      	b.n	84e50 <_vfiprintf_r+0x50c>
   84e4c:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
   84e50:	ad18      	add	r5, sp, #96	; 0x60
   84e52:	ebcb 0405 	rsb	r4, fp, r5
   84e56:	4665      	mov	r5, ip
   84e58:	e00f      	b.n	84e7a <_vfiprintf_r+0x536>
   84e5a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   84e5e:	2b00      	cmp	r3, #0
   84e60:	f000 816c 	beq.w	8513c <_vfiprintf_r+0x7f8>
   84e64:	2500      	movs	r5, #0
   84e66:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   84e6a:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   84e6e:	2401      	movs	r4, #1
   84e70:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
   84e74:	e001      	b.n	84e7a <_vfiprintf_r+0x536>
   84e76:	4664      	mov	r4, ip
   84e78:	4605      	mov	r5, r0
   84e7a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   84e7e:	42ac      	cmp	r4, r5
   84e80:	bfac      	ite	ge
   84e82:	4621      	movge	r1, r4
   84e84:	4629      	movlt	r1, r5
   84e86:	9102      	str	r1, [sp, #8]
   84e88:	b113      	cbz	r3, 84e90 <_vfiprintf_r+0x54c>
   84e8a:	9802      	ldr	r0, [sp, #8]
   84e8c:	1c42      	adds	r2, r0, #1
   84e8e:	9202      	str	r2, [sp, #8]
   84e90:	f017 0102 	ands.w	r1, r7, #2
   84e94:	9106      	str	r1, [sp, #24]
   84e96:	d002      	beq.n	84e9e <_vfiprintf_r+0x55a>
   84e98:	9b02      	ldr	r3, [sp, #8]
   84e9a:	1c98      	adds	r0, r3, #2
   84e9c:	9002      	str	r0, [sp, #8]
   84e9e:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   84ea2:	9207      	str	r2, [sp, #28]
   84ea4:	d13a      	bne.n	84f1c <_vfiprintf_r+0x5d8>
   84ea6:	9904      	ldr	r1, [sp, #16]
   84ea8:	9b02      	ldr	r3, [sp, #8]
   84eaa:	1acb      	subs	r3, r1, r3
   84eac:	2b00      	cmp	r3, #0
   84eae:	dd35      	ble.n	84f1c <_vfiprintf_r+0x5d8>
   84eb0:	48a0      	ldr	r0, [pc, #640]	; (85134 <_vfiprintf_r+0x7f0>)
   84eb2:	2b10      	cmp	r3, #16
   84eb4:	f8c8 0000 	str.w	r0, [r8]
   84eb8:	dd1a      	ble.n	84ef0 <_vfiprintf_r+0x5ac>
   84eba:	990c      	ldr	r1, [sp, #48]	; 0x30
   84ebc:	2010      	movs	r0, #16
   84ebe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84ec0:	f8c8 0004 	str.w	r0, [r8, #4]
   84ec4:	1c48      	adds	r0, r1, #1
   84ec6:	3210      	adds	r2, #16
   84ec8:	2807      	cmp	r0, #7
   84eca:	920d      	str	r2, [sp, #52]	; 0x34
   84ecc:	f108 0808 	add.w	r8, r8, #8
   84ed0:	900c      	str	r0, [sp, #48]	; 0x30
   84ed2:	dd0b      	ble.n	84eec <_vfiprintf_r+0x5a8>
   84ed4:	4650      	mov	r0, sl
   84ed6:	4649      	mov	r1, r9
   84ed8:	aa0b      	add	r2, sp, #44	; 0x2c
   84eda:	9300      	str	r3, [sp, #0]
   84edc:	f7ff fcfe 	bl	848dc <__sprint_r>
   84ee0:	9b00      	ldr	r3, [sp, #0]
   84ee2:	2800      	cmp	r0, #0
   84ee4:	f040 8131 	bne.w	8514a <_vfiprintf_r+0x806>
   84ee8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84eec:	3b10      	subs	r3, #16
   84eee:	e7df      	b.n	84eb0 <_vfiprintf_r+0x56c>
   84ef0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84ef2:	f8c8 3004 	str.w	r3, [r8, #4]
   84ef6:	18d1      	adds	r1, r2, r3
   84ef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84efa:	910d      	str	r1, [sp, #52]	; 0x34
   84efc:	1c58      	adds	r0, r3, #1
   84efe:	2807      	cmp	r0, #7
   84f00:	f108 0808 	add.w	r8, r8, #8
   84f04:	900c      	str	r0, [sp, #48]	; 0x30
   84f06:	dd09      	ble.n	84f1c <_vfiprintf_r+0x5d8>
   84f08:	4650      	mov	r0, sl
   84f0a:	4649      	mov	r1, r9
   84f0c:	aa0b      	add	r2, sp, #44	; 0x2c
   84f0e:	f7ff fce5 	bl	848dc <__sprint_r>
   84f12:	2800      	cmp	r0, #0
   84f14:	f040 8119 	bne.w	8514a <_vfiprintf_r+0x806>
   84f18:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84f1c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   84f20:	b1d2      	cbz	r2, 84f58 <_vfiprintf_r+0x614>
   84f22:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   84f26:	f8c8 1000 	str.w	r1, [r8]
   84f2a:	990c      	ldr	r1, [sp, #48]	; 0x30
   84f2c:	2301      	movs	r3, #1
   84f2e:	980d      	ldr	r0, [sp, #52]	; 0x34
   84f30:	f8c8 3004 	str.w	r3, [r8, #4]
   84f34:	1c4b      	adds	r3, r1, #1
   84f36:	1c42      	adds	r2, r0, #1
   84f38:	2b07      	cmp	r3, #7
   84f3a:	920d      	str	r2, [sp, #52]	; 0x34
   84f3c:	f108 0808 	add.w	r8, r8, #8
   84f40:	930c      	str	r3, [sp, #48]	; 0x30
   84f42:	dd09      	ble.n	84f58 <_vfiprintf_r+0x614>
   84f44:	4650      	mov	r0, sl
   84f46:	4649      	mov	r1, r9
   84f48:	aa0b      	add	r2, sp, #44	; 0x2c
   84f4a:	f7ff fcc7 	bl	848dc <__sprint_r>
   84f4e:	2800      	cmp	r0, #0
   84f50:	f040 80fb 	bne.w	8514a <_vfiprintf_r+0x806>
   84f54:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84f58:	9806      	ldr	r0, [sp, #24]
   84f5a:	b1c8      	cbz	r0, 84f90 <_vfiprintf_r+0x64c>
   84f5c:	aa0a      	add	r2, sp, #40	; 0x28
   84f5e:	f8c8 2000 	str.w	r2, [r8]
   84f62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84f64:	2102      	movs	r1, #2
   84f66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84f68:	f8c8 1004 	str.w	r1, [r8, #4]
   84f6c:	1c51      	adds	r1, r2, #1
   84f6e:	1c98      	adds	r0, r3, #2
   84f70:	2907      	cmp	r1, #7
   84f72:	900d      	str	r0, [sp, #52]	; 0x34
   84f74:	f108 0808 	add.w	r8, r8, #8
   84f78:	910c      	str	r1, [sp, #48]	; 0x30
   84f7a:	dd09      	ble.n	84f90 <_vfiprintf_r+0x64c>
   84f7c:	4650      	mov	r0, sl
   84f7e:	4649      	mov	r1, r9
   84f80:	aa0b      	add	r2, sp, #44	; 0x2c
   84f82:	f7ff fcab 	bl	848dc <__sprint_r>
   84f86:	2800      	cmp	r0, #0
   84f88:	f040 80df 	bne.w	8514a <_vfiprintf_r+0x806>
   84f8c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84f90:	9b07      	ldr	r3, [sp, #28]
   84f92:	2b80      	cmp	r3, #128	; 0x80
   84f94:	d13a      	bne.n	8500c <_vfiprintf_r+0x6c8>
   84f96:	9804      	ldr	r0, [sp, #16]
   84f98:	9a02      	ldr	r2, [sp, #8]
   84f9a:	1a83      	subs	r3, r0, r2
   84f9c:	2b00      	cmp	r3, #0
   84f9e:	dd35      	ble.n	8500c <_vfiprintf_r+0x6c8>
   84fa0:	4965      	ldr	r1, [pc, #404]	; (85138 <_vfiprintf_r+0x7f4>)
   84fa2:	2b10      	cmp	r3, #16
   84fa4:	f8c8 1000 	str.w	r1, [r8]
   84fa8:	dd1a      	ble.n	84fe0 <_vfiprintf_r+0x69c>
   84faa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84fac:	2110      	movs	r1, #16
   84fae:	980d      	ldr	r0, [sp, #52]	; 0x34
   84fb0:	f8c8 1004 	str.w	r1, [r8, #4]
   84fb4:	1c51      	adds	r1, r2, #1
   84fb6:	3010      	adds	r0, #16
   84fb8:	2907      	cmp	r1, #7
   84fba:	900d      	str	r0, [sp, #52]	; 0x34
   84fbc:	f108 0808 	add.w	r8, r8, #8
   84fc0:	910c      	str	r1, [sp, #48]	; 0x30
   84fc2:	dd0b      	ble.n	84fdc <_vfiprintf_r+0x698>
   84fc4:	4650      	mov	r0, sl
   84fc6:	4649      	mov	r1, r9
   84fc8:	aa0b      	add	r2, sp, #44	; 0x2c
   84fca:	9300      	str	r3, [sp, #0]
   84fcc:	f7ff fc86 	bl	848dc <__sprint_r>
   84fd0:	9b00      	ldr	r3, [sp, #0]
   84fd2:	2800      	cmp	r0, #0
   84fd4:	f040 80b9 	bne.w	8514a <_vfiprintf_r+0x806>
   84fd8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   84fdc:	3b10      	subs	r3, #16
   84fde:	e7df      	b.n	84fa0 <_vfiprintf_r+0x65c>
   84fe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84fe2:	980d      	ldr	r0, [sp, #52]	; 0x34
   84fe4:	1c51      	adds	r1, r2, #1
   84fe6:	f8c8 3004 	str.w	r3, [r8, #4]
   84fea:	2907      	cmp	r1, #7
   84fec:	4403      	add	r3, r0
   84fee:	930d      	str	r3, [sp, #52]	; 0x34
   84ff0:	f108 0808 	add.w	r8, r8, #8
   84ff4:	910c      	str	r1, [sp, #48]	; 0x30
   84ff6:	dd09      	ble.n	8500c <_vfiprintf_r+0x6c8>
   84ff8:	4650      	mov	r0, sl
   84ffa:	4649      	mov	r1, r9
   84ffc:	aa0b      	add	r2, sp, #44	; 0x2c
   84ffe:	f7ff fc6d 	bl	848dc <__sprint_r>
   85002:	2800      	cmp	r0, #0
   85004:	f040 80a1 	bne.w	8514a <_vfiprintf_r+0x806>
   85008:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8500c:	1b2d      	subs	r5, r5, r4
   8500e:	2d00      	cmp	r5, #0
   85010:	dd32      	ble.n	85078 <_vfiprintf_r+0x734>
   85012:	4849      	ldr	r0, [pc, #292]	; (85138 <_vfiprintf_r+0x7f4>)
   85014:	2d10      	cmp	r5, #16
   85016:	f8c8 0000 	str.w	r0, [r8]
   8501a:	dd18      	ble.n	8504e <_vfiprintf_r+0x70a>
   8501c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8501e:	980d      	ldr	r0, [sp, #52]	; 0x34
   85020:	1c53      	adds	r3, r2, #1
   85022:	2110      	movs	r1, #16
   85024:	3010      	adds	r0, #16
   85026:	2b07      	cmp	r3, #7
   85028:	f8c8 1004 	str.w	r1, [r8, #4]
   8502c:	900d      	str	r0, [sp, #52]	; 0x34
   8502e:	f108 0808 	add.w	r8, r8, #8
   85032:	930c      	str	r3, [sp, #48]	; 0x30
   85034:	dd09      	ble.n	8504a <_vfiprintf_r+0x706>
   85036:	4650      	mov	r0, sl
   85038:	4649      	mov	r1, r9
   8503a:	aa0b      	add	r2, sp, #44	; 0x2c
   8503c:	f7ff fc4e 	bl	848dc <__sprint_r>
   85040:	2800      	cmp	r0, #0
   85042:	f040 8082 	bne.w	8514a <_vfiprintf_r+0x806>
   85046:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8504a:	3d10      	subs	r5, #16
   8504c:	e7e1      	b.n	85012 <_vfiprintf_r+0x6ce>
   8504e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85050:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85052:	1c51      	adds	r1, r2, #1
   85054:	f8c8 5004 	str.w	r5, [r8, #4]
   85058:	2907      	cmp	r1, #7
   8505a:	441d      	add	r5, r3
   8505c:	950d      	str	r5, [sp, #52]	; 0x34
   8505e:	f108 0808 	add.w	r8, r8, #8
   85062:	910c      	str	r1, [sp, #48]	; 0x30
   85064:	dd08      	ble.n	85078 <_vfiprintf_r+0x734>
   85066:	4650      	mov	r0, sl
   85068:	4649      	mov	r1, r9
   8506a:	aa0b      	add	r2, sp, #44	; 0x2c
   8506c:	f7ff fc36 	bl	848dc <__sprint_r>
   85070:	2800      	cmp	r0, #0
   85072:	d16a      	bne.n	8514a <_vfiprintf_r+0x806>
   85074:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   85078:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8507a:	980d      	ldr	r0, [sp, #52]	; 0x34
   8507c:	1c51      	adds	r1, r2, #1
   8507e:	f8c8 4004 	str.w	r4, [r8, #4]
   85082:	2907      	cmp	r1, #7
   85084:	4404      	add	r4, r0
   85086:	f8c8 b000 	str.w	fp, [r8]
   8508a:	940d      	str	r4, [sp, #52]	; 0x34
   8508c:	f108 0308 	add.w	r3, r8, #8
   85090:	910c      	str	r1, [sp, #48]	; 0x30
   85092:	dd07      	ble.n	850a4 <_vfiprintf_r+0x760>
   85094:	4650      	mov	r0, sl
   85096:	4649      	mov	r1, r9
   85098:	aa0b      	add	r2, sp, #44	; 0x2c
   8509a:	f7ff fc1f 	bl	848dc <__sprint_r>
   8509e:	2800      	cmp	r0, #0
   850a0:	d153      	bne.n	8514a <_vfiprintf_r+0x806>
   850a2:	ab18      	add	r3, sp, #96	; 0x60
   850a4:	077a      	lsls	r2, r7, #29
   850a6:	d40b      	bmi.n	850c0 <_vfiprintf_r+0x77c>
   850a8:	9b03      	ldr	r3, [sp, #12]
   850aa:	9a02      	ldr	r2, [sp, #8]
   850ac:	9904      	ldr	r1, [sp, #16]
   850ae:	980d      	ldr	r0, [sp, #52]	; 0x34
   850b0:	428a      	cmp	r2, r1
   850b2:	bfac      	ite	ge
   850b4:	189b      	addge	r3, r3, r2
   850b6:	185b      	addlt	r3, r3, r1
   850b8:	9303      	str	r3, [sp, #12]
   850ba:	2800      	cmp	r0, #0
   850bc:	d035      	beq.n	8512a <_vfiprintf_r+0x7e6>
   850be:	e02e      	b.n	8511e <_vfiprintf_r+0x7da>
   850c0:	9c04      	ldr	r4, [sp, #16]
   850c2:	9802      	ldr	r0, [sp, #8]
   850c4:	1a24      	subs	r4, r4, r0
   850c6:	2c00      	cmp	r4, #0
   850c8:	ddee      	ble.n	850a8 <_vfiprintf_r+0x764>
   850ca:	4a1a      	ldr	r2, [pc, #104]	; (85134 <_vfiprintf_r+0x7f0>)
   850cc:	2c10      	cmp	r4, #16
   850ce:	601a      	str	r2, [r3, #0]
   850d0:	dd14      	ble.n	850fc <_vfiprintf_r+0x7b8>
   850d2:	980c      	ldr	r0, [sp, #48]	; 0x30
   850d4:	2210      	movs	r2, #16
   850d6:	990d      	ldr	r1, [sp, #52]	; 0x34
   850d8:	605a      	str	r2, [r3, #4]
   850da:	1c42      	adds	r2, r0, #1
   850dc:	3110      	adds	r1, #16
   850de:	3308      	adds	r3, #8
   850e0:	2a07      	cmp	r2, #7
   850e2:	910d      	str	r1, [sp, #52]	; 0x34
   850e4:	920c      	str	r2, [sp, #48]	; 0x30
   850e6:	dd07      	ble.n	850f8 <_vfiprintf_r+0x7b4>
   850e8:	4650      	mov	r0, sl
   850ea:	4649      	mov	r1, r9
   850ec:	aa0b      	add	r2, sp, #44	; 0x2c
   850ee:	f7ff fbf5 	bl	848dc <__sprint_r>
   850f2:	2800      	cmp	r0, #0
   850f4:	d129      	bne.n	8514a <_vfiprintf_r+0x806>
   850f6:	ab18      	add	r3, sp, #96	; 0x60
   850f8:	3c10      	subs	r4, #16
   850fa:	e7e6      	b.n	850ca <_vfiprintf_r+0x786>
   850fc:	990c      	ldr	r1, [sp, #48]	; 0x30
   850fe:	605c      	str	r4, [r3, #4]
   85100:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85102:	1c48      	adds	r0, r1, #1
   85104:	191c      	adds	r4, r3, r4
   85106:	2807      	cmp	r0, #7
   85108:	940d      	str	r4, [sp, #52]	; 0x34
   8510a:	900c      	str	r0, [sp, #48]	; 0x30
   8510c:	ddcc      	ble.n	850a8 <_vfiprintf_r+0x764>
   8510e:	4650      	mov	r0, sl
   85110:	4649      	mov	r1, r9
   85112:	aa0b      	add	r2, sp, #44	; 0x2c
   85114:	f7ff fbe2 	bl	848dc <__sprint_r>
   85118:	2800      	cmp	r0, #0
   8511a:	d0c5      	beq.n	850a8 <_vfiprintf_r+0x764>
   8511c:	e015      	b.n	8514a <_vfiprintf_r+0x806>
   8511e:	4650      	mov	r0, sl
   85120:	4649      	mov	r1, r9
   85122:	aa0b      	add	r2, sp, #44	; 0x2c
   85124:	f7ff fbda 	bl	848dc <__sprint_r>
   85128:	b978      	cbnz	r0, 8514a <_vfiprintf_r+0x806>
   8512a:	2500      	movs	r5, #0
   8512c:	950c      	str	r5, [sp, #48]	; 0x30
   8512e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   85132:	e453      	b.n	849dc <_vfiprintf_r+0x98>
   85134:	0008700e 	.word	0x0008700e
   85138:	0008701e 	.word	0x0008701e
   8513c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8513e:	b122      	cbz	r2, 8514a <_vfiprintf_r+0x806>
   85140:	4650      	mov	r0, sl
   85142:	4649      	mov	r1, r9
   85144:	aa0b      	add	r2, sp, #44	; 0x2c
   85146:	f7ff fbc9 	bl	848dc <__sprint_r>
   8514a:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   8514e:	f001 0040 	and.w	r0, r1, #64	; 0x40
   85152:	b203      	sxth	r3, r0
   85154:	2b00      	cmp	r3, #0
   85156:	f47f ac28 	bne.w	849aa <_vfiprintf_r+0x66>
   8515a:	9803      	ldr	r0, [sp, #12]
   8515c:	b029      	add	sp, #164	; 0xa4
   8515e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085162 <__sbprintf>:
   85162:	b570      	push	{r4, r5, r6, lr}
   85164:	460c      	mov	r4, r1
   85166:	8989      	ldrh	r1, [r1, #12]
   85168:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8516c:	f021 0502 	bic.w	r5, r1, #2
   85170:	6e61      	ldr	r1, [r4, #100]	; 0x64
   85172:	f8ad 500c 	strh.w	r5, [sp, #12]
   85176:	9119      	str	r1, [sp, #100]	; 0x64
   85178:	89e5      	ldrh	r5, [r4, #14]
   8517a:	69e1      	ldr	r1, [r4, #28]
   8517c:	f8ad 500e 	strh.w	r5, [sp, #14]
   85180:	9107      	str	r1, [sp, #28]
   85182:	6a65      	ldr	r5, [r4, #36]	; 0x24
   85184:	a91a      	add	r1, sp, #104	; 0x68
   85186:	9100      	str	r1, [sp, #0]
   85188:	9104      	str	r1, [sp, #16]
   8518a:	2100      	movs	r1, #0
   8518c:	9509      	str	r5, [sp, #36]	; 0x24
   8518e:	9106      	str	r1, [sp, #24]
   85190:	f44f 6580 	mov.w	r5, #1024	; 0x400
   85194:	4669      	mov	r1, sp
   85196:	9502      	str	r5, [sp, #8]
   85198:	9505      	str	r5, [sp, #20]
   8519a:	4606      	mov	r6, r0
   8519c:	f7ff fbd2 	bl	84944 <_vfiprintf_r>
   851a0:	1e05      	subs	r5, r0, #0
   851a2:	db07      	blt.n	851b4 <__sbprintf+0x52>
   851a4:	4630      	mov	r0, r6
   851a6:	4669      	mov	r1, sp
   851a8:	f000 f8e8 	bl	8537c <_fflush_r>
   851ac:	2800      	cmp	r0, #0
   851ae:	bf18      	it	ne
   851b0:	f04f 35ff 	movne.w	r5, #4294967295
   851b4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   851b8:	f003 0040 	and.w	r0, r3, #64	; 0x40
   851bc:	b202      	sxth	r2, r0
   851be:	b11a      	cbz	r2, 851c8 <__sbprintf+0x66>
   851c0:	89a1      	ldrh	r1, [r4, #12]
   851c2:	f041 0340 	orr.w	r3, r1, #64	; 0x40
   851c6:	81a3      	strh	r3, [r4, #12]
   851c8:	4628      	mov	r0, r5
   851ca:	b01a      	add	sp, #104	; 0x68
   851cc:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
   851d0:	bd70      	pop	{r4, r5, r6, pc}

000851d2 <vfiprintf>:
   851d2:	b530      	push	{r4, r5, lr}
   851d4:	4613      	mov	r3, r2
   851d6:	4a05      	ldr	r2, [pc, #20]	; (851ec <vfiprintf+0x1a>)
   851d8:	4605      	mov	r5, r0
   851da:	460c      	mov	r4, r1
   851dc:	6810      	ldr	r0, [r2, #0]
   851de:	4629      	mov	r1, r5
   851e0:	4622      	mov	r2, r4
   851e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   851e6:	f7ff bbad 	b.w	84944 <_vfiprintf_r>
   851ea:	bf00      	nop
   851ec:	20070010 	.word	0x20070010

000851f0 <__swbuf_r>:
   851f0:	b570      	push	{r4, r5, r6, lr}
   851f2:	460d      	mov	r5, r1
   851f4:	4614      	mov	r4, r2
   851f6:	4606      	mov	r6, r0
   851f8:	b118      	cbz	r0, 85202 <__swbuf_r+0x12>
   851fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
   851fc:	b90b      	cbnz	r3, 85202 <__swbuf_r+0x12>
   851fe:	f000 f9af 	bl	85560 <__sinit>
   85202:	89a1      	ldrh	r1, [r4, #12]
   85204:	69a0      	ldr	r0, [r4, #24]
   85206:	f001 0208 	and.w	r2, r1, #8
   8520a:	b213      	sxth	r3, r2
   8520c:	60a0      	str	r0, [r4, #8]
   8520e:	b10b      	cbz	r3, 85214 <__swbuf_r+0x24>
   85210:	6920      	ldr	r0, [r4, #16]
   85212:	b958      	cbnz	r0, 8522c <__swbuf_r+0x3c>
   85214:	4630      	mov	r0, r6
   85216:	4621      	mov	r1, r4
   85218:	f000 f844 	bl	852a4 <__swsetup_r>
   8521c:	b130      	cbz	r0, 8522c <__swbuf_r+0x3c>
   8521e:	89a5      	ldrh	r5, [r4, #12]
   85220:	2009      	movs	r0, #9
   85222:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   85226:	81a1      	strh	r1, [r4, #12]
   85228:	6030      	str	r0, [r6, #0]
   8522a:	e017      	b.n	8525c <__swbuf_r+0x6c>
   8522c:	89a1      	ldrh	r1, [r4, #12]
   8522e:	b2ed      	uxtb	r5, r5
   85230:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
   85234:	b213      	sxth	r3, r2
   85236:	b933      	cbnz	r3, 85246 <__swbuf_r+0x56>
   85238:	f441 5000 	orr.w	r0, r1, #8192	; 0x2000
   8523c:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8523e:	81a0      	strh	r0, [r4, #12]
   85240:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
   85244:	6662      	str	r2, [r4, #100]	; 0x64
   85246:	6820      	ldr	r0, [r4, #0]
   85248:	6923      	ldr	r3, [r4, #16]
   8524a:	6961      	ldr	r1, [r4, #20]
   8524c:	1ac0      	subs	r0, r0, r3
   8524e:	4288      	cmp	r0, r1
   85250:	db07      	blt.n	85262 <__swbuf_r+0x72>
   85252:	4630      	mov	r0, r6
   85254:	4621      	mov	r1, r4
   85256:	f000 f891 	bl	8537c <_fflush_r>
   8525a:	b110      	cbz	r0, 85262 <__swbuf_r+0x72>
   8525c:	f04f 35ff 	mov.w	r5, #4294967295
   85260:	e015      	b.n	8528e <__swbuf_r+0x9e>
   85262:	68a2      	ldr	r2, [r4, #8]
   85264:	6821      	ldr	r1, [r4, #0]
   85266:	1e53      	subs	r3, r2, #1
   85268:	60a3      	str	r3, [r4, #8]
   8526a:	f801 5b01 	strb.w	r5, [r1], #1
   8526e:	6962      	ldr	r2, [r4, #20]
   85270:	3001      	adds	r0, #1
   85272:	4290      	cmp	r0, r2
   85274:	6021      	str	r1, [r4, #0]
   85276:	d004      	beq.n	85282 <__swbuf_r+0x92>
   85278:	89a3      	ldrh	r3, [r4, #12]
   8527a:	07db      	lsls	r3, r3, #31
   8527c:	d507      	bpl.n	8528e <__swbuf_r+0x9e>
   8527e:	2d0a      	cmp	r5, #10
   85280:	d105      	bne.n	8528e <__swbuf_r+0x9e>
   85282:	4630      	mov	r0, r6
   85284:	4621      	mov	r1, r4
   85286:	f000 f879 	bl	8537c <_fflush_r>
   8528a:	2800      	cmp	r0, #0
   8528c:	d1e6      	bne.n	8525c <__swbuf_r+0x6c>
   8528e:	4628      	mov	r0, r5
   85290:	bd70      	pop	{r4, r5, r6, pc}

00085292 <__swbuf>:
   85292:	460a      	mov	r2, r1
   85294:	4902      	ldr	r1, [pc, #8]	; (852a0 <__swbuf+0xe>)
   85296:	4603      	mov	r3, r0
   85298:	6808      	ldr	r0, [r1, #0]
   8529a:	4619      	mov	r1, r3
   8529c:	f7ff bfa8 	b.w	851f0 <__swbuf_r>
   852a0:	20070010 	.word	0x20070010

000852a4 <__swsetup_r>:
   852a4:	b538      	push	{r3, r4, r5, lr}
   852a6:	4b2c      	ldr	r3, [pc, #176]	; (85358 <__swsetup_r+0xb4>)
   852a8:	4605      	mov	r5, r0
   852aa:	6818      	ldr	r0, [r3, #0]
   852ac:	460c      	mov	r4, r1
   852ae:	b118      	cbz	r0, 852b8 <__swsetup_r+0x14>
   852b0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   852b2:	b90a      	cbnz	r2, 852b8 <__swsetup_r+0x14>
   852b4:	f000 f954 	bl	85560 <__sinit>
   852b8:	89a0      	ldrh	r0, [r4, #12]
   852ba:	f000 0108 	and.w	r1, r0, #8
   852be:	b20b      	sxth	r3, r1
   852c0:	bb0b      	cbnz	r3, 85306 <__swsetup_r+0x62>
   852c2:	f000 0210 	and.w	r2, r0, #16
   852c6:	b211      	sxth	r1, r2
   852c8:	b911      	cbnz	r1, 852d0 <__swsetup_r+0x2c>
   852ca:	f04f 30ff 	mov.w	r0, #4294967295
   852ce:	bd38      	pop	{r3, r4, r5, pc}
   852d0:	f000 0004 	and.w	r0, r0, #4
   852d4:	b203      	sxth	r3, r0
   852d6:	b193      	cbz	r3, 852fe <__swsetup_r+0x5a>
   852d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   852da:	b141      	cbz	r1, 852ee <__swsetup_r+0x4a>
   852dc:	f104 0240 	add.w	r2, r4, #64	; 0x40
   852e0:	4291      	cmp	r1, r2
   852e2:	d002      	beq.n	852ea <__swsetup_r+0x46>
   852e4:	4628      	mov	r0, r5
   852e6:	f000 fa79 	bl	857dc <_free_r>
   852ea:	2100      	movs	r1, #0
   852ec:	6321      	str	r1, [r4, #48]	; 0x30
   852ee:	89a0      	ldrh	r0, [r4, #12]
   852f0:	6921      	ldr	r1, [r4, #16]
   852f2:	f020 0324 	bic.w	r3, r0, #36	; 0x24
   852f6:	2200      	movs	r2, #0
   852f8:	81a3      	strh	r3, [r4, #12]
   852fa:	6062      	str	r2, [r4, #4]
   852fc:	6021      	str	r1, [r4, #0]
   852fe:	89a0      	ldrh	r0, [r4, #12]
   85300:	f040 0308 	orr.w	r3, r0, #8
   85304:	81a3      	strh	r3, [r4, #12]
   85306:	6922      	ldr	r2, [r4, #16]
   85308:	b94a      	cbnz	r2, 8531e <__swsetup_r+0x7a>
   8530a:	89a1      	ldrh	r1, [r4, #12]
   8530c:	f401 7020 	and.w	r0, r1, #640	; 0x280
   85310:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   85314:	d003      	beq.n	8531e <__swsetup_r+0x7a>
   85316:	4628      	mov	r0, r5
   85318:	4621      	mov	r1, r4
   8531a:	f000 fcf7 	bl	85d0c <__smakebuf_r>
   8531e:	89a3      	ldrh	r3, [r4, #12]
   85320:	f013 0201 	ands.w	r2, r3, #1
   85324:	d005      	beq.n	85332 <__swsetup_r+0x8e>
   85326:	6961      	ldr	r1, [r4, #20]
   85328:	2200      	movs	r2, #0
   8532a:	4248      	negs	r0, r1
   8532c:	60a2      	str	r2, [r4, #8]
   8532e:	61a0      	str	r0, [r4, #24]
   85330:	e007      	b.n	85342 <__swsetup_r+0x9e>
   85332:	f003 0102 	and.w	r1, r3, #2
   85336:	b208      	sxth	r0, r1
   85338:	b908      	cbnz	r0, 8533e <__swsetup_r+0x9a>
   8533a:	6963      	ldr	r3, [r4, #20]
   8533c:	e000      	b.n	85340 <__swsetup_r+0x9c>
   8533e:	4613      	mov	r3, r2
   85340:	60a3      	str	r3, [r4, #8]
   85342:	6923      	ldr	r3, [r4, #16]
   85344:	b933      	cbnz	r3, 85354 <__swsetup_r+0xb0>
   85346:	89a2      	ldrh	r2, [r4, #12]
   85348:	f002 0180 	and.w	r1, r2, #128	; 0x80
   8534c:	b208      	sxth	r0, r1
   8534e:	2800      	cmp	r0, #0
   85350:	d1bb      	bne.n	852ca <__swsetup_r+0x26>
   85352:	bd38      	pop	{r3, r4, r5, pc}
   85354:	2000      	movs	r0, #0
   85356:	bd38      	pop	{r3, r4, r5, pc}
   85358:	20070010 	.word	0x20070010

0008535c <register_fini>:
   8535c:	4b02      	ldr	r3, [pc, #8]	; (85368 <register_fini+0xc>)
   8535e:	b113      	cbz	r3, 85366 <register_fini+0xa>
   85360:	4802      	ldr	r0, [pc, #8]	; (8536c <register_fini+0x10>)
   85362:	f000 b805 	b.w	85370 <atexit>
   85366:	4770      	bx	lr
   85368:	00000000 	.word	0x00000000
   8536c:	000846ad 	.word	0x000846ad

00085370 <atexit>:
   85370:	4601      	mov	r1, r0
   85372:	2000      	movs	r0, #0
   85374:	4602      	mov	r2, r0
   85376:	4603      	mov	r3, r0
   85378:	f7ff b94a 	b.w	84610 <__register_exitproc>

0008537c <_fflush_r>:
   8537c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85380:	460c      	mov	r4, r1
   85382:	4605      	mov	r5, r0
   85384:	b118      	cbz	r0, 8538e <_fflush_r+0x12>
   85386:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85388:	b90b      	cbnz	r3, 8538e <_fflush_r+0x12>
   8538a:	f000 f8e9 	bl	85560 <__sinit>
   8538e:	89a2      	ldrh	r2, [r4, #12]
   85390:	b332      	cbz	r2, 853e0 <_fflush_r+0x64>
   85392:	f002 0008 	and.w	r0, r2, #8
   85396:	b201      	sxth	r1, r0
   85398:	2900      	cmp	r1, #0
   8539a:	d162      	bne.n	85462 <_fflush_r+0xe6>
   8539c:	6861      	ldr	r1, [r4, #4]
   8539e:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
   853a2:	2900      	cmp	r1, #0
   853a4:	81a0      	strh	r0, [r4, #12]
   853a6:	dc02      	bgt.n	853ae <_fflush_r+0x32>
   853a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   853aa:	2b00      	cmp	r3, #0
   853ac:	dd18      	ble.n	853e0 <_fflush_r+0x64>
   853ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   853b0:	b1b6      	cbz	r6, 853e0 <_fflush_r+0x64>
   853b2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   853b6:	2000      	movs	r0, #0
   853b8:	b212      	sxth	r2, r2
   853ba:	682f      	ldr	r7, [r5, #0]
   853bc:	6028      	str	r0, [r5, #0]
   853be:	b10a      	cbz	r2, 853c4 <_fflush_r+0x48>
   853c0:	6d22      	ldr	r2, [r4, #80]	; 0x50
   853c2:	e010      	b.n	853e6 <_fflush_r+0x6a>
   853c4:	2301      	movs	r3, #1
   853c6:	4628      	mov	r0, r5
   853c8:	69e1      	ldr	r1, [r4, #28]
   853ca:	47b0      	blx	r6
   853cc:	4602      	mov	r2, r0
   853ce:	3001      	adds	r0, #1
   853d0:	d109      	bne.n	853e6 <_fflush_r+0x6a>
   853d2:	6829      	ldr	r1, [r5, #0]
   853d4:	b139      	cbz	r1, 853e6 <_fflush_r+0x6a>
   853d6:	291d      	cmp	r1, #29
   853d8:	d001      	beq.n	853de <_fflush_r+0x62>
   853da:	2916      	cmp	r1, #22
   853dc:	d14e      	bne.n	8547c <_fflush_r+0x100>
   853de:	602f      	str	r7, [r5, #0]
   853e0:	2000      	movs	r0, #0
   853e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   853e6:	89a6      	ldrh	r6, [r4, #12]
   853e8:	f006 0104 	and.w	r1, r6, #4
   853ec:	b20b      	sxth	r3, r1
   853ee:	b12b      	cbz	r3, 853fc <_fflush_r+0x80>
   853f0:	6860      	ldr	r0, [r4, #4]
   853f2:	6b26      	ldr	r6, [r4, #48]	; 0x30
   853f4:	1a12      	subs	r2, r2, r0
   853f6:	b10e      	cbz	r6, 853fc <_fflush_r+0x80>
   853f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   853fa:	1a52      	subs	r2, r2, r1
   853fc:	69e1      	ldr	r1, [r4, #28]
   853fe:	2300      	movs	r3, #0
   85400:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   85402:	4628      	mov	r0, r5
   85404:	47b0      	blx	r6
   85406:	1c41      	adds	r1, r0, #1
   85408:	d105      	bne.n	85416 <_fflush_r+0x9a>
   8540a:	682a      	ldr	r2, [r5, #0]
   8540c:	b11a      	cbz	r2, 85416 <_fflush_r+0x9a>
   8540e:	2a1d      	cmp	r2, #29
   85410:	d001      	beq.n	85416 <_fflush_r+0x9a>
   85412:	2a16      	cmp	r2, #22
   85414:	d11f      	bne.n	85456 <_fflush_r+0xda>
   85416:	89a3      	ldrh	r3, [r4, #12]
   85418:	2100      	movs	r1, #0
   8541a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
   8541e:	81a2      	strh	r2, [r4, #12]
   85420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   85424:	6922      	ldr	r2, [r4, #16]
   85426:	6061      	str	r1, [r4, #4]
   85428:	b219      	sxth	r1, r3
   8542a:	6022      	str	r2, [r4, #0]
   8542c:	b121      	cbz	r1, 85438 <_fflush_r+0xbc>
   8542e:	1c42      	adds	r2, r0, #1
   85430:	d101      	bne.n	85436 <_fflush_r+0xba>
   85432:	682a      	ldr	r2, [r5, #0]
   85434:	b902      	cbnz	r2, 85438 <_fflush_r+0xbc>
   85436:	6520      	str	r0, [r4, #80]	; 0x50
   85438:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8543a:	602f      	str	r7, [r5, #0]
   8543c:	2900      	cmp	r1, #0
   8543e:	d0cf      	beq.n	853e0 <_fflush_r+0x64>
   85440:	f104 0040 	add.w	r0, r4, #64	; 0x40
   85444:	4281      	cmp	r1, r0
   85446:	d002      	beq.n	8544e <_fflush_r+0xd2>
   85448:	4628      	mov	r0, r5
   8544a:	f000 f9c7 	bl	857dc <_free_r>
   8544e:	2000      	movs	r0, #0
   85450:	6320      	str	r0, [r4, #48]	; 0x30
   85452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85456:	89a3      	ldrh	r3, [r4, #12]
   85458:	f043 0140 	orr.w	r1, r3, #64	; 0x40
   8545c:	81a1      	strh	r1, [r4, #12]
   8545e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85462:	6926      	ldr	r6, [r4, #16]
   85464:	2e00      	cmp	r6, #0
   85466:	d0bb      	beq.n	853e0 <_fflush_r+0x64>
   85468:	0792      	lsls	r2, r2, #30
   8546a:	6823      	ldr	r3, [r4, #0]
   8546c:	bf0c      	ite	eq
   8546e:	6962      	ldreq	r2, [r4, #20]
   85470:	2200      	movne	r2, #0
   85472:	ebc6 0803 	rsb	r8, r6, r3
   85476:	6026      	str	r6, [r4, #0]
   85478:	60a2      	str	r2, [r4, #8]
   8547a:	e012      	b.n	854a2 <_fflush_r+0x126>
   8547c:	89a3      	ldrh	r3, [r4, #12]
   8547e:	f043 0040 	orr.w	r0, r3, #64	; 0x40
   85482:	81a0      	strh	r0, [r4, #12]
   85484:	f04f 30ff 	mov.w	r0, #4294967295
   85488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8548c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8548e:	4628      	mov	r0, r5
   85490:	69e1      	ldr	r1, [r4, #28]
   85492:	4632      	mov	r2, r6
   85494:	4643      	mov	r3, r8
   85496:	47b8      	blx	r7
   85498:	2800      	cmp	r0, #0
   8549a:	ddef      	ble.n	8547c <_fflush_r+0x100>
   8549c:	1836      	adds	r6, r6, r0
   8549e:	ebc0 0808 	rsb	r8, r0, r8
   854a2:	f1b8 0f00 	cmp.w	r8, #0
   854a6:	dcf1      	bgt.n	8548c <_fflush_r+0x110>
   854a8:	e79a      	b.n	853e0 <_fflush_r+0x64>

000854aa <fflush>:
   854aa:	4601      	mov	r1, r0
   854ac:	b920      	cbnz	r0, 854b8 <fflush+0xe>
   854ae:	4804      	ldr	r0, [pc, #16]	; (854c0 <fflush+0x16>)
   854b0:	4904      	ldr	r1, [pc, #16]	; (854c4 <fflush+0x1a>)
   854b2:	6800      	ldr	r0, [r0, #0]
   854b4:	f000 bbc4 	b.w	85c40 <_fwalk_reent>
   854b8:	4b03      	ldr	r3, [pc, #12]	; (854c8 <fflush+0x1e>)
   854ba:	6818      	ldr	r0, [r3, #0]
   854bc:	f7ff bf5e 	b.w	8537c <_fflush_r>
   854c0:	00087008 	.word	0x00087008
   854c4:	0008537d 	.word	0x0008537d
   854c8:	20070010 	.word	0x20070010

000854cc <__fp_lock>:
   854cc:	2000      	movs	r0, #0
   854ce:	4770      	bx	lr

000854d0 <__fp_unlock>:
   854d0:	2000      	movs	r0, #0
   854d2:	4770      	bx	lr

000854d4 <_cleanup_r>:
   854d4:	4901      	ldr	r1, [pc, #4]	; (854dc <_cleanup_r+0x8>)
   854d6:	f000 bb92 	b.w	85bfe <_fwalk>
   854da:	bf00      	nop
   854dc:	00086771 	.word	0x00086771

000854e0 <std.isra.0>:
   854e0:	2300      	movs	r3, #0
   854e2:	b510      	push	{r4, lr}
   854e4:	4604      	mov	r4, r0
   854e6:	6003      	str	r3, [r0, #0]
   854e8:	6043      	str	r3, [r0, #4]
   854ea:	6083      	str	r3, [r0, #8]
   854ec:	8181      	strh	r1, [r0, #12]
   854ee:	6643      	str	r3, [r0, #100]	; 0x64
   854f0:	81c2      	strh	r2, [r0, #14]
   854f2:	6103      	str	r3, [r0, #16]
   854f4:	6143      	str	r3, [r0, #20]
   854f6:	6183      	str	r3, [r0, #24]
   854f8:	4619      	mov	r1, r3
   854fa:	2208      	movs	r2, #8
   854fc:	f100 005c 	add.w	r0, r0, #92	; 0x5c
   85500:	f7ff f939 	bl	84776 <memset>
   85504:	4804      	ldr	r0, [pc, #16]	; (85518 <std.isra.0+0x38>)
   85506:	4905      	ldr	r1, [pc, #20]	; (8551c <std.isra.0+0x3c>)
   85508:	4a05      	ldr	r2, [pc, #20]	; (85520 <std.isra.0+0x40>)
   8550a:	4b06      	ldr	r3, [pc, #24]	; (85524 <std.isra.0+0x44>)
   8550c:	61e4      	str	r4, [r4, #28]
   8550e:	6220      	str	r0, [r4, #32]
   85510:	6261      	str	r1, [r4, #36]	; 0x24
   85512:	62a2      	str	r2, [r4, #40]	; 0x28
   85514:	62e3      	str	r3, [r4, #44]	; 0x2c
   85516:	bd10      	pop	{r4, pc}
   85518:	00086559 	.word	0x00086559
   8551c:	0008657f 	.word	0x0008657f
   85520:	000865bb 	.word	0x000865bb
   85524:	000865df 	.word	0x000865df

00085528 <__sfmoreglue>:
   85528:	b570      	push	{r4, r5, r6, lr}
   8552a:	2568      	movs	r5, #104	; 0x68
   8552c:	434d      	muls	r5, r1
   8552e:	460e      	mov	r6, r1
   85530:	f105 010c 	add.w	r1, r5, #12
   85534:	f000 fc66 	bl	85e04 <_malloc_r>
   85538:	4604      	mov	r4, r0
   8553a:	b140      	cbz	r0, 8554e <__sfmoreglue+0x26>
   8553c:	f100 000c 	add.w	r0, r0, #12
   85540:	2100      	movs	r1, #0
   85542:	e884 0042 	stmia.w	r4, {r1, r6}
   85546:	60a0      	str	r0, [r4, #8]
   85548:	462a      	mov	r2, r5
   8554a:	f7ff f914 	bl	84776 <memset>
   8554e:	4620      	mov	r0, r4
   85550:	bd70      	pop	{r4, r5, r6, pc}

00085552 <_cleanup>:
   85552:	4b02      	ldr	r3, [pc, #8]	; (8555c <_cleanup+0xa>)
   85554:	6818      	ldr	r0, [r3, #0]
   85556:	f7ff bfbd 	b.w	854d4 <_cleanup_r>
   8555a:	bf00      	nop
   8555c:	00087008 	.word	0x00087008

00085560 <__sinit>:
   85560:	b538      	push	{r3, r4, r5, lr}
   85562:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85564:	4604      	mov	r4, r0
   85566:	b9eb      	cbnz	r3, 855a4 <__sinit+0x44>
   85568:	4a0f      	ldr	r2, [pc, #60]	; (855a8 <__sinit+0x48>)
   8556a:	2501      	movs	r5, #1
   8556c:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
   85570:	63c2      	str	r2, [r0, #60]	; 0x3c
   85572:	6385      	str	r5, [r0, #56]	; 0x38
   85574:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
   85578:	2003      	movs	r0, #3
   8557a:	461a      	mov	r2, r3
   8557c:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   85580:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
   85584:	6860      	ldr	r0, [r4, #4]
   85586:	2104      	movs	r1, #4
   85588:	f7ff ffaa 	bl	854e0 <std.isra.0>
   8558c:	68a0      	ldr	r0, [r4, #8]
   8558e:	2109      	movs	r1, #9
   85590:	462a      	mov	r2, r5
   85592:	f7ff ffa5 	bl	854e0 <std.isra.0>
   85596:	68e0      	ldr	r0, [r4, #12]
   85598:	2112      	movs	r1, #18
   8559a:	2202      	movs	r2, #2
   8559c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   855a0:	f7ff bf9e 	b.w	854e0 <std.isra.0>
   855a4:	bd38      	pop	{r3, r4, r5, pc}
   855a6:	bf00      	nop
   855a8:	000854d5 	.word	0x000854d5

000855ac <__sfp>:
   855ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   855ae:	4b1d      	ldr	r3, [pc, #116]	; (85624 <__sfp+0x78>)
   855b0:	4607      	mov	r7, r0
   855b2:	681e      	ldr	r6, [r3, #0]
   855b4:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   855b6:	b910      	cbnz	r0, 855be <__sfp+0x12>
   855b8:	4630      	mov	r0, r6
   855ba:	f7ff ffd1 	bl	85560 <__sinit>
   855be:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
   855c2:	68b4      	ldr	r4, [r6, #8]
   855c4:	6871      	ldr	r1, [r6, #4]
   855c6:	3901      	subs	r1, #1
   855c8:	d404      	bmi.n	855d4 <__sfp+0x28>
   855ca:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   855ce:	b185      	cbz	r5, 855f2 <__sfp+0x46>
   855d0:	3468      	adds	r4, #104	; 0x68
   855d2:	e7f8      	b.n	855c6 <__sfp+0x1a>
   855d4:	6832      	ldr	r2, [r6, #0]
   855d6:	b10a      	cbz	r2, 855dc <__sfp+0x30>
   855d8:	6836      	ldr	r6, [r6, #0]
   855da:	e7f2      	b.n	855c2 <__sfp+0x16>
   855dc:	4638      	mov	r0, r7
   855de:	2104      	movs	r1, #4
   855e0:	f7ff ffa2 	bl	85528 <__sfmoreglue>
   855e4:	6030      	str	r0, [r6, #0]
   855e6:	2800      	cmp	r0, #0
   855e8:	d1f6      	bne.n	855d8 <__sfp+0x2c>
   855ea:	240c      	movs	r4, #12
   855ec:	603c      	str	r4, [r7, #0]
   855ee:	4604      	mov	r4, r0
   855f0:	e015      	b.n	8561e <__sfp+0x72>
   855f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   855f6:	2001      	movs	r0, #1
   855f8:	81a0      	strh	r0, [r4, #12]
   855fa:	81e3      	strh	r3, [r4, #14]
   855fc:	6665      	str	r5, [r4, #100]	; 0x64
   855fe:	6025      	str	r5, [r4, #0]
   85600:	60a5      	str	r5, [r4, #8]
   85602:	6065      	str	r5, [r4, #4]
   85604:	6125      	str	r5, [r4, #16]
   85606:	6165      	str	r5, [r4, #20]
   85608:	61a5      	str	r5, [r4, #24]
   8560a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   8560e:	4629      	mov	r1, r5
   85610:	2208      	movs	r2, #8
   85612:	f7ff f8b0 	bl	84776 <memset>
   85616:	6325      	str	r5, [r4, #48]	; 0x30
   85618:	6365      	str	r5, [r4, #52]	; 0x34
   8561a:	6465      	str	r5, [r4, #68]	; 0x44
   8561c:	64a5      	str	r5, [r4, #72]	; 0x48
   8561e:	4620      	mov	r0, r4
   85620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85622:	bf00      	nop
   85624:	00087008 	.word	0x00087008

00085628 <__sfp_lock_acquire>:
   85628:	4770      	bx	lr

0008562a <__sfp_lock_release>:
   8562a:	4770      	bx	lr

0008562c <__sinit_lock_acquire>:
   8562c:	4770      	bx	lr

0008562e <__sinit_lock_release>:
   8562e:	4770      	bx	lr

00085630 <__fp_lock_all>:
   85630:	4b02      	ldr	r3, [pc, #8]	; (8563c <__fp_lock_all+0xc>)
   85632:	4903      	ldr	r1, [pc, #12]	; (85640 <__fp_lock_all+0x10>)
   85634:	6818      	ldr	r0, [r3, #0]
   85636:	f000 bae2 	b.w	85bfe <_fwalk>
   8563a:	bf00      	nop
   8563c:	20070010 	.word	0x20070010
   85640:	000854cd 	.word	0x000854cd

00085644 <__fp_unlock_all>:
   85644:	4b02      	ldr	r3, [pc, #8]	; (85650 <__fp_unlock_all+0xc>)
   85646:	4903      	ldr	r1, [pc, #12]	; (85654 <__fp_unlock_all+0x10>)
   85648:	6818      	ldr	r0, [r3, #0]
   8564a:	f000 bad8 	b.w	85bfe <_fwalk>
   8564e:	bf00      	nop
   85650:	20070010 	.word	0x20070010
   85654:	000854d1 	.word	0x000854d1

00085658 <_fputwc_r>:
   85658:	8993      	ldrh	r3, [r2, #12]
   8565a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   8565e:	4614      	mov	r4, r2
   85660:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
   85664:	4680      	mov	r8, r0
   85666:	b210      	sxth	r0, r2
   85668:	460e      	mov	r6, r1
   8566a:	b930      	cbnz	r0, 8567a <_fputwc_r+0x22>
   8566c:	6e67      	ldr	r7, [r4, #100]	; 0x64
   8566e:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
   85672:	f447 5300 	orr.w	r3, r7, #8192	; 0x2000
   85676:	81a1      	strh	r1, [r4, #12]
   85678:	6663      	str	r3, [r4, #100]	; 0x64
   8567a:	f000 fb29 	bl	85cd0 <__locale_mb_cur_max>
   8567e:	2801      	cmp	r0, #1
   85680:	d106      	bne.n	85690 <_fputwc_r+0x38>
   85682:	b12e      	cbz	r6, 85690 <_fputwc_r+0x38>
   85684:	2eff      	cmp	r6, #255	; 0xff
   85686:	d803      	bhi.n	85690 <_fputwc_r+0x38>
   85688:	f88d 6004 	strb.w	r6, [sp, #4]
   8568c:	4607      	mov	r7, r0
   8568e:	e00f      	b.n	856b0 <_fputwc_r+0x58>
   85690:	4632      	mov	r2, r6
   85692:	4640      	mov	r0, r8
   85694:	a901      	add	r1, sp, #4
   85696:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8569a:	f000 ffaf 	bl	865fc <_wcrtomb_r>
   8569e:	1c42      	adds	r2, r0, #1
   856a0:	4607      	mov	r7, r0
   856a2:	d105      	bne.n	856b0 <_fputwc_r+0x58>
   856a4:	89a2      	ldrh	r2, [r4, #12]
   856a6:	f042 0040 	orr.w	r0, r2, #64	; 0x40
   856aa:	81a0      	strh	r0, [r4, #12]
   856ac:	4638      	mov	r0, r7
   856ae:	e031      	b.n	85714 <_fputwc_r+0xbc>
   856b0:	2500      	movs	r5, #0
   856b2:	42bd      	cmp	r5, r7
   856b4:	d02a      	beq.n	8570c <_fputwc_r+0xb4>
   856b6:	68a1      	ldr	r1, [r4, #8]
   856b8:	ab01      	add	r3, sp, #4
   856ba:	1e4a      	subs	r2, r1, #1
   856bc:	2a00      	cmp	r2, #0
   856be:	60a2      	str	r2, [r4, #8]
   856c0:	da1a      	bge.n	856f8 <_fputwc_r+0xa0>
   856c2:	69a0      	ldr	r0, [r4, #24]
   856c4:	4282      	cmp	r2, r0
   856c6:	db0c      	blt.n	856e2 <_fputwc_r+0x8a>
   856c8:	6821      	ldr	r1, [r4, #0]
   856ca:	5d5a      	ldrb	r2, [r3, r5]
   856cc:	700a      	strb	r2, [r1, #0]
   856ce:	6823      	ldr	r3, [r4, #0]
   856d0:	7819      	ldrb	r1, [r3, #0]
   856d2:	290a      	cmp	r1, #10
   856d4:	d003      	beq.n	856de <_fputwc_r+0x86>
   856d6:	3301      	adds	r3, #1
   856d8:	2200      	movs	r2, #0
   856da:	6023      	str	r3, [r4, #0]
   856dc:	e013      	b.n	85706 <_fputwc_r+0xae>
   856de:	4640      	mov	r0, r8
   856e0:	e001      	b.n	856e6 <_fputwc_r+0x8e>
   856e2:	5d59      	ldrb	r1, [r3, r5]
   856e4:	4640      	mov	r0, r8
   856e6:	4622      	mov	r2, r4
   856e8:	f7ff fd82 	bl	851f0 <__swbuf_r>
   856ec:	f1b0 31ff 	subs.w	r1, r0, #4294967295
   856f0:	4248      	negs	r0, r1
   856f2:	eb50 0201 	adcs.w	r2, r0, r1
   856f6:	e006      	b.n	85706 <_fputwc_r+0xae>
   856f8:	6820      	ldr	r0, [r4, #0]
   856fa:	5d59      	ldrb	r1, [r3, r5]
   856fc:	7001      	strb	r1, [r0, #0]
   856fe:	6822      	ldr	r2, [r4, #0]
   85700:	1c53      	adds	r3, r2, #1
   85702:	6023      	str	r3, [r4, #0]
   85704:	e000      	b.n	85708 <_fputwc_r+0xb0>
   85706:	b91a      	cbnz	r2, 85710 <_fputwc_r+0xb8>
   85708:	3501      	adds	r5, #1
   8570a:	e7d2      	b.n	856b2 <_fputwc_r+0x5a>
   8570c:	4630      	mov	r0, r6
   8570e:	e001      	b.n	85714 <_fputwc_r+0xbc>
   85710:	f04f 30ff 	mov.w	r0, #4294967295
   85714:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

00085718 <fputwc>:
   85718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8571a:	4c08      	ldr	r4, [pc, #32]	; (8573c <fputwc+0x24>)
   8571c:	4607      	mov	r7, r0
   8571e:	6820      	ldr	r0, [r4, #0]
   85720:	460e      	mov	r6, r1
   85722:	b118      	cbz	r0, 8572c <fputwc+0x14>
   85724:	6b85      	ldr	r5, [r0, #56]	; 0x38
   85726:	b90d      	cbnz	r5, 8572c <fputwc+0x14>
   85728:	f7ff ff1a 	bl	85560 <__sinit>
   8572c:	6820      	ldr	r0, [r4, #0]
   8572e:	4639      	mov	r1, r7
   85730:	4632      	mov	r2, r6
   85732:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   85736:	f7ff bf8f 	b.w	85658 <_fputwc_r>
   8573a:	bf00      	nop
   8573c:	20070010 	.word	0x20070010

00085740 <_malloc_trim_r>:
   85740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85742:	4d23      	ldr	r5, [pc, #140]	; (857d0 <_malloc_trim_r+0x90>)
   85744:	460e      	mov	r6, r1
   85746:	4604      	mov	r4, r0
   85748:	f000 fd86 	bl	86258 <__malloc_lock>
   8574c:	68ab      	ldr	r3, [r5, #8]
   8574e:	685f      	ldr	r7, [r3, #4]
   85750:	f027 0703 	bic.w	r7, r7, #3
   85754:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
   85758:	1b81      	subs	r1, r0, r6
   8575a:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   8575e:	f022 060f 	bic.w	r6, r2, #15
   85762:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   85766:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   8576a:	da04      	bge.n	85776 <_malloc_trim_r+0x36>
   8576c:	4620      	mov	r0, r4
   8576e:	f000 fd74 	bl	8625a <__malloc_unlock>
   85772:	2000      	movs	r0, #0
   85774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85776:	2100      	movs	r1, #0
   85778:	4620      	mov	r0, r4
   8577a:	f000 fedd 	bl	86538 <_sbrk_r>
   8577e:	68ab      	ldr	r3, [r5, #8]
   85780:	19d9      	adds	r1, r3, r7
   85782:	4288      	cmp	r0, r1
   85784:	d1f2      	bne.n	8576c <_malloc_trim_r+0x2c>
   85786:	4271      	negs	r1, r6
   85788:	4620      	mov	r0, r4
   8578a:	f000 fed5 	bl	86538 <_sbrk_r>
   8578e:	3001      	adds	r0, #1
   85790:	d110      	bne.n	857b4 <_malloc_trim_r+0x74>
   85792:	2100      	movs	r1, #0
   85794:	4620      	mov	r0, r4
   85796:	f000 fecf 	bl	86538 <_sbrk_r>
   8579a:	68ab      	ldr	r3, [r5, #8]
   8579c:	1ac2      	subs	r2, r0, r3
   8579e:	2a0f      	cmp	r2, #15
   857a0:	dde4      	ble.n	8576c <_malloc_trim_r+0x2c>
   857a2:	490c      	ldr	r1, [pc, #48]	; (857d4 <_malloc_trim_r+0x94>)
   857a4:	f042 0201 	orr.w	r2, r2, #1
   857a8:	6809      	ldr	r1, [r1, #0]
   857aa:	605a      	str	r2, [r3, #4]
   857ac:	1a40      	subs	r0, r0, r1
   857ae:	490a      	ldr	r1, [pc, #40]	; (857d8 <_malloc_trim_r+0x98>)
   857b0:	6008      	str	r0, [r1, #0]
   857b2:	e7db      	b.n	8576c <_malloc_trim_r+0x2c>
   857b4:	4b08      	ldr	r3, [pc, #32]	; (857d8 <_malloc_trim_r+0x98>)
   857b6:	68a8      	ldr	r0, [r5, #8]
   857b8:	681a      	ldr	r2, [r3, #0]
   857ba:	1bbf      	subs	r7, r7, r6
   857bc:	f047 0701 	orr.w	r7, r7, #1
   857c0:	6047      	str	r7, [r0, #4]
   857c2:	1b96      	subs	r6, r2, r6
   857c4:	4620      	mov	r0, r4
   857c6:	601e      	str	r6, [r3, #0]
   857c8:	f000 fd47 	bl	8625a <__malloc_unlock>
   857cc:	2001      	movs	r0, #1
   857ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   857d0:	200704bc 	.word	0x200704bc
   857d4:	200708c4 	.word	0x200708c4
   857d8:	20078bf0 	.word	0x20078bf0

000857dc <_free_r>:
   857dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   857de:	4606      	mov	r6, r0
   857e0:	460d      	mov	r5, r1
   857e2:	2900      	cmp	r1, #0
   857e4:	f000 80a6 	beq.w	85934 <_free_r+0x158>
   857e8:	f000 fd36 	bl	86258 <__malloc_lock>
   857ec:	f855 cc04 	ldr.w	ip, [r5, #-4]
   857f0:	4f51      	ldr	r7, [pc, #324]	; (85938 <_free_r+0x15c>)
   857f2:	f1a5 0308 	sub.w	r3, r5, #8
   857f6:	f02c 0201 	bic.w	r2, ip, #1
   857fa:	189c      	adds	r4, r3, r2
   857fc:	68b9      	ldr	r1, [r7, #8]
   857fe:	6860      	ldr	r0, [r4, #4]
   85800:	428c      	cmp	r4, r1
   85802:	f020 0003 	bic.w	r0, r0, #3
   85806:	f00c 0101 	and.w	r1, ip, #1
   8580a:	d11c      	bne.n	85846 <_free_r+0x6a>
   8580c:	1882      	adds	r2, r0, r2
   8580e:	b939      	cbnz	r1, 85820 <_free_r+0x44>
   85810:	f855 1c08 	ldr.w	r1, [r5, #-8]
   85814:	1a5b      	subs	r3, r3, r1
   85816:	6898      	ldr	r0, [r3, #8]
   85818:	1852      	adds	r2, r2, r1
   8581a:	68d9      	ldr	r1, [r3, #12]
   8581c:	60c1      	str	r1, [r0, #12]
   8581e:	6088      	str	r0, [r1, #8]
   85820:	4845      	ldr	r0, [pc, #276]	; (85938 <_free_r+0x15c>)
   85822:	f042 0101 	orr.w	r1, r2, #1
   85826:	6059      	str	r1, [r3, #4]
   85828:	6083      	str	r3, [r0, #8]
   8582a:	4b44      	ldr	r3, [pc, #272]	; (8593c <_free_r+0x160>)
   8582c:	6819      	ldr	r1, [r3, #0]
   8582e:	428a      	cmp	r2, r1
   85830:	d304      	bcc.n	8583c <_free_r+0x60>
   85832:	4a43      	ldr	r2, [pc, #268]	; (85940 <_free_r+0x164>)
   85834:	4630      	mov	r0, r6
   85836:	6811      	ldr	r1, [r2, #0]
   85838:	f7ff ff82 	bl	85740 <_malloc_trim_r>
   8583c:	4630      	mov	r0, r6
   8583e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   85842:	f000 bd0a 	b.w	8625a <__malloc_unlock>
   85846:	6060      	str	r0, [r4, #4]
   85848:	b959      	cbnz	r1, 85862 <_free_r+0x86>
   8584a:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8584e:	3708      	adds	r7, #8
   85850:	1b5b      	subs	r3, r3, r5
   85852:	1952      	adds	r2, r2, r5
   85854:	689d      	ldr	r5, [r3, #8]
   85856:	42bd      	cmp	r5, r7
   85858:	d005      	beq.n	85866 <_free_r+0x8a>
   8585a:	68df      	ldr	r7, [r3, #12]
   8585c:	60ef      	str	r7, [r5, #12]
   8585e:	60bd      	str	r5, [r7, #8]
   85860:	e002      	b.n	85868 <_free_r+0x8c>
   85862:	2100      	movs	r1, #0
   85864:	e000      	b.n	85868 <_free_r+0x8c>
   85866:	2101      	movs	r1, #1
   85868:	1825      	adds	r5, r4, r0
   8586a:	686d      	ldr	r5, [r5, #4]
   8586c:	f015 0f01 	tst.w	r5, #1
   85870:	d10f      	bne.n	85892 <_free_r+0xb6>
   85872:	1812      	adds	r2, r2, r0
   85874:	b949      	cbnz	r1, 8588a <_free_r+0xae>
   85876:	68a0      	ldr	r0, [r4, #8]
   85878:	4d32      	ldr	r5, [pc, #200]	; (85944 <_free_r+0x168>)
   8587a:	42a8      	cmp	r0, r5
   8587c:	d105      	bne.n	8588a <_free_r+0xae>
   8587e:	60eb      	str	r3, [r5, #12]
   85880:	60ab      	str	r3, [r5, #8]
   85882:	60d8      	str	r0, [r3, #12]
   85884:	6098      	str	r0, [r3, #8]
   85886:	2101      	movs	r1, #1
   85888:	e003      	b.n	85892 <_free_r+0xb6>
   8588a:	68e0      	ldr	r0, [r4, #12]
   8588c:	68a4      	ldr	r4, [r4, #8]
   8588e:	60e0      	str	r0, [r4, #12]
   85890:	6084      	str	r4, [r0, #8]
   85892:	f042 0001 	orr.w	r0, r2, #1
   85896:	6058      	str	r0, [r3, #4]
   85898:	509a      	str	r2, [r3, r2]
   8589a:	2900      	cmp	r1, #0
   8589c:	d1ce      	bne.n	8583c <_free_r+0x60>
   8589e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   858a2:	d20c      	bcs.n	858be <_free_r+0xe2>
   858a4:	08d2      	lsrs	r2, r2, #3
   858a6:	1090      	asrs	r0, r2, #2
   858a8:	2401      	movs	r4, #1
   858aa:	fa04 f400 	lsl.w	r4, r4, r0
   858ae:	4922      	ldr	r1, [pc, #136]	; (85938 <_free_r+0x15c>)
   858b0:	6848      	ldr	r0, [r1, #4]
   858b2:	4320      	orrs	r0, r4
   858b4:	6048      	str	r0, [r1, #4]
   858b6:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   858ba:	6881      	ldr	r1, [r0, #8]
   858bc:	e035      	b.n	8592a <_free_r+0x14e>
   858be:	0a54      	lsrs	r4, r2, #9
   858c0:	2c04      	cmp	r4, #4
   858c2:	d802      	bhi.n	858ca <_free_r+0xee>
   858c4:	0994      	lsrs	r4, r2, #6
   858c6:	3438      	adds	r4, #56	; 0x38
   858c8:	e016      	b.n	858f8 <_free_r+0x11c>
   858ca:	2c14      	cmp	r4, #20
   858cc:	d801      	bhi.n	858d2 <_free_r+0xf6>
   858ce:	345b      	adds	r4, #91	; 0x5b
   858d0:	e012      	b.n	858f8 <_free_r+0x11c>
   858d2:	2c54      	cmp	r4, #84	; 0x54
   858d4:	d802      	bhi.n	858dc <_free_r+0x100>
   858d6:	0b14      	lsrs	r4, r2, #12
   858d8:	346e      	adds	r4, #110	; 0x6e
   858da:	e00d      	b.n	858f8 <_free_r+0x11c>
   858dc:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
   858e0:	d802      	bhi.n	858e8 <_free_r+0x10c>
   858e2:	0bd4      	lsrs	r4, r2, #15
   858e4:	3477      	adds	r4, #119	; 0x77
   858e6:	e007      	b.n	858f8 <_free_r+0x11c>
   858e8:	f240 5554 	movw	r5, #1364	; 0x554
   858ec:	42ac      	cmp	r4, r5
   858ee:	d802      	bhi.n	858f6 <_free_r+0x11a>
   858f0:	0c94      	lsrs	r4, r2, #18
   858f2:	347c      	adds	r4, #124	; 0x7c
   858f4:	e000      	b.n	858f8 <_free_r+0x11c>
   858f6:	247e      	movs	r4, #126	; 0x7e
   858f8:	4d0f      	ldr	r5, [pc, #60]	; (85938 <_free_r+0x15c>)
   858fa:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   858fe:	6881      	ldr	r1, [r0, #8]
   85900:	4281      	cmp	r1, r0
   85902:	d10c      	bne.n	8591e <_free_r+0x142>
   85904:	2201      	movs	r2, #1
   85906:	10a4      	asrs	r4, r4, #2
   85908:	fa02 f404 	lsl.w	r4, r2, r4
   8590c:	6868      	ldr	r0, [r5, #4]
   8590e:	ea44 0200 	orr.w	r2, r4, r0
   85912:	606a      	str	r2, [r5, #4]
   85914:	4608      	mov	r0, r1
   85916:	e008      	b.n	8592a <_free_r+0x14e>
   85918:	6889      	ldr	r1, [r1, #8]
   8591a:	4281      	cmp	r1, r0
   8591c:	d004      	beq.n	85928 <_free_r+0x14c>
   8591e:	684c      	ldr	r4, [r1, #4]
   85920:	f024 0403 	bic.w	r4, r4, #3
   85924:	42a2      	cmp	r2, r4
   85926:	d3f7      	bcc.n	85918 <_free_r+0x13c>
   85928:	68c8      	ldr	r0, [r1, #12]
   8592a:	60d8      	str	r0, [r3, #12]
   8592c:	6099      	str	r1, [r3, #8]
   8592e:	6083      	str	r3, [r0, #8]
   85930:	60cb      	str	r3, [r1, #12]
   85932:	e783      	b.n	8583c <_free_r+0x60>
   85934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85936:	bf00      	nop
   85938:	200704bc 	.word	0x200704bc
   8593c:	200708c8 	.word	0x200708c8
   85940:	20078bec 	.word	0x20078bec
   85944:	200704c4 	.word	0x200704c4

00085948 <__sfvwrite_r>:
   85948:	6893      	ldr	r3, [r2, #8]
   8594a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8594e:	4606      	mov	r6, r0
   85950:	460c      	mov	r4, r1
   85952:	4691      	mov	r9, r2
   85954:	b90b      	cbnz	r3, 8595a <__sfvwrite_r+0x12>
   85956:	2000      	movs	r0, #0
   85958:	e14f      	b.n	85bfa <__sfvwrite_r+0x2b2>
   8595a:	8988      	ldrh	r0, [r1, #12]
   8595c:	f000 0108 	and.w	r1, r0, #8
   85960:	b20a      	sxth	r2, r1
   85962:	b10a      	cbz	r2, 85968 <__sfvwrite_r+0x20>
   85964:	6923      	ldr	r3, [r4, #16]
   85966:	b95b      	cbnz	r3, 85980 <__sfvwrite_r+0x38>
   85968:	4630      	mov	r0, r6
   8596a:	4621      	mov	r1, r4
   8596c:	f7ff fc9a 	bl	852a4 <__swsetup_r>
   85970:	b130      	cbz	r0, 85980 <__sfvwrite_r+0x38>
   85972:	89a1      	ldrh	r1, [r4, #12]
   85974:	2209      	movs	r2, #9
   85976:	f041 0040 	orr.w	r0, r1, #64	; 0x40
   8597a:	81a0      	strh	r0, [r4, #12]
   8597c:	6032      	str	r2, [r6, #0]
   8597e:	e13a      	b.n	85bf6 <__sfvwrite_r+0x2ae>
   85980:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
   85984:	f8d9 8000 	ldr.w	r8, [r9]
   85988:	f00a 0c02 	and.w	ip, sl, #2
   8598c:	fa0f f58c 	sxth.w	r5, ip
   85990:	b315      	cbz	r5, 859d8 <__sfvwrite_r+0x90>
   85992:	f04f 0a00 	mov.w	sl, #0
   85996:	4657      	mov	r7, sl
   85998:	b937      	cbnz	r7, 859a8 <__sfvwrite_r+0x60>
   8599a:	f8d8 a000 	ldr.w	sl, [r8]
   8599e:	f8d8 7004 	ldr.w	r7, [r8, #4]
   859a2:	f108 0808 	add.w	r8, r8, #8
   859a6:	e7f7      	b.n	85998 <__sfvwrite_r+0x50>
   859a8:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   859ac:	bf34      	ite	cc
   859ae:	463b      	movcc	r3, r7
   859b0:	f44f 6380 	movcs.w	r3, #1024	; 0x400
   859b4:	4630      	mov	r0, r6
   859b6:	69e1      	ldr	r1, [r4, #28]
   859b8:	4652      	mov	r2, sl
   859ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
   859bc:	47a8      	blx	r5
   859be:	2800      	cmp	r0, #0
   859c0:	f340 8115 	ble.w	85bee <__sfvwrite_r+0x2a6>
   859c4:	f8d9 1008 	ldr.w	r1, [r9, #8]
   859c8:	4482      	add	sl, r0
   859ca:	1a3f      	subs	r7, r7, r0
   859cc:	1a08      	subs	r0, r1, r0
   859ce:	f8c9 0008 	str.w	r0, [r9, #8]
   859d2:	2800      	cmp	r0, #0
   859d4:	d1e0      	bne.n	85998 <__sfvwrite_r+0x50>
   859d6:	e7be      	b.n	85956 <__sfvwrite_r+0xe>
   859d8:	f01a 0a01 	ands.w	sl, sl, #1
   859dc:	d004      	beq.n	859e8 <__sfvwrite_r+0xa0>
   859de:	46ab      	mov	fp, r5
   859e0:	9501      	str	r5, [sp, #4]
   859e2:	462f      	mov	r7, r5
   859e4:	46aa      	mov	sl, r5
   859e6:	e0c7      	b.n	85b78 <__sfvwrite_r+0x230>
   859e8:	4655      	mov	r5, sl
   859ea:	b935      	cbnz	r5, 859fa <__sfvwrite_r+0xb2>
   859ec:	f8d8 a000 	ldr.w	sl, [r8]
   859f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
   859f4:	f108 0808 	add.w	r8, r8, #8
   859f8:	e7f7      	b.n	859ea <__sfvwrite_r+0xa2>
   859fa:	89a2      	ldrh	r2, [r4, #12]
   859fc:	f8d4 b008 	ldr.w	fp, [r4, #8]
   85a00:	f402 7000 	and.w	r0, r2, #512	; 0x200
   85a04:	b203      	sxth	r3, r0
   85a06:	2b00      	cmp	r3, #0
   85a08:	d052      	beq.n	85ab0 <__sfvwrite_r+0x168>
   85a0a:	455d      	cmp	r5, fp
   85a0c:	d340      	bcc.n	85a90 <__sfvwrite_r+0x148>
   85a0e:	f412 6f90 	tst.w	r2, #1152	; 0x480
   85a12:	d03b      	beq.n	85a8c <__sfvwrite_r+0x144>
   85a14:	6963      	ldr	r3, [r4, #20]
   85a16:	f04f 0b03 	mov.w	fp, #3
   85a1a:	fb0b f303 	mul.w	r3, fp, r3
   85a1e:	6921      	ldr	r1, [r4, #16]
   85a20:	6827      	ldr	r7, [r4, #0]
   85a22:	2002      	movs	r0, #2
   85a24:	1a7f      	subs	r7, r7, r1
   85a26:	fb93 fcf0 	sdiv	ip, r3, r0
   85a2a:	1c7b      	adds	r3, r7, #1
   85a2c:	1958      	adds	r0, r3, r5
   85a2e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   85a32:	4584      	cmp	ip, r0
   85a34:	bf28      	it	cs
   85a36:	4660      	movcs	r0, ip
   85a38:	b213      	sxth	r3, r2
   85a3a:	9001      	str	r0, [sp, #4]
   85a3c:	4630      	mov	r0, r6
   85a3e:	b17b      	cbz	r3, 85a60 <__sfvwrite_r+0x118>
   85a40:	9901      	ldr	r1, [sp, #4]
   85a42:	f000 f9df 	bl	85e04 <_malloc_r>
   85a46:	4683      	mov	fp, r0
   85a48:	b198      	cbz	r0, 85a72 <__sfvwrite_r+0x12a>
   85a4a:	6921      	ldr	r1, [r4, #16]
   85a4c:	463a      	mov	r2, r7
   85a4e:	f7fe fe89 	bl	84764 <memcpy>
   85a52:	89a1      	ldrh	r1, [r4, #12]
   85a54:	f421 6090 	bic.w	r0, r1, #1152	; 0x480
   85a58:	f040 0280 	orr.w	r2, r0, #128	; 0x80
   85a5c:	81a2      	strh	r2, [r4, #12]
   85a5e:	e00b      	b.n	85a78 <__sfvwrite_r+0x130>
   85a60:	9a01      	ldr	r2, [sp, #4]
   85a62:	f000 fbfb 	bl	8625c <_realloc_r>
   85a66:	4683      	mov	fp, r0
   85a68:	b930      	cbnz	r0, 85a78 <__sfvwrite_r+0x130>
   85a6a:	4630      	mov	r0, r6
   85a6c:	6921      	ldr	r1, [r4, #16]
   85a6e:	f7ff feb5 	bl	857dc <_free_r>
   85a72:	230c      	movs	r3, #12
   85a74:	6033      	str	r3, [r6, #0]
   85a76:	e0ba      	b.n	85bee <__sfvwrite_r+0x2a6>
   85a78:	9901      	ldr	r1, [sp, #4]
   85a7a:	eb0b 0307 	add.w	r3, fp, r7
   85a7e:	1bcf      	subs	r7, r1, r7
   85a80:	f8c4 b010 	str.w	fp, [r4, #16]
   85a84:	6023      	str	r3, [r4, #0]
   85a86:	6161      	str	r1, [r4, #20]
   85a88:	46ab      	mov	fp, r5
   85a8a:	60a7      	str	r7, [r4, #8]
   85a8c:	455d      	cmp	r5, fp
   85a8e:	d200      	bcs.n	85a92 <__sfvwrite_r+0x14a>
   85a90:	46ab      	mov	fp, r5
   85a92:	465a      	mov	r2, fp
   85a94:	4651      	mov	r1, sl
   85a96:	6820      	ldr	r0, [r4, #0]
   85a98:	f000 fbc4 	bl	86224 <memmove>
   85a9c:	68a0      	ldr	r0, [r4, #8]
   85a9e:	6823      	ldr	r3, [r4, #0]
   85aa0:	ebcb 0200 	rsb	r2, fp, r0
   85aa4:	eb03 010b 	add.w	r1, r3, fp
   85aa8:	60a2      	str	r2, [r4, #8]
   85aaa:	6021      	str	r1, [r4, #0]
   85aac:	46ab      	mov	fp, r5
   85aae:	e02a      	b.n	85b06 <__sfvwrite_r+0x1be>
   85ab0:	6820      	ldr	r0, [r4, #0]
   85ab2:	6921      	ldr	r1, [r4, #16]
   85ab4:	4288      	cmp	r0, r1
   85ab6:	d90f      	bls.n	85ad8 <__sfvwrite_r+0x190>
   85ab8:	455d      	cmp	r5, fp
   85aba:	d90d      	bls.n	85ad8 <__sfvwrite_r+0x190>
   85abc:	4651      	mov	r1, sl
   85abe:	465a      	mov	r2, fp
   85ac0:	f000 fbb0 	bl	86224 <memmove>
   85ac4:	6822      	ldr	r2, [r4, #0]
   85ac6:	4621      	mov	r1, r4
   85ac8:	eb02 000b 	add.w	r0, r2, fp
   85acc:	6020      	str	r0, [r4, #0]
   85ace:	4630      	mov	r0, r6
   85ad0:	f7ff fc54 	bl	8537c <_fflush_r>
   85ad4:	b1b8      	cbz	r0, 85b06 <__sfvwrite_r+0x1be>
   85ad6:	e08a      	b.n	85bee <__sfvwrite_r+0x2a6>
   85ad8:	6963      	ldr	r3, [r4, #20]
   85ada:	429d      	cmp	r5, r3
   85adc:	d308      	bcc.n	85af0 <__sfvwrite_r+0x1a8>
   85ade:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85ae0:	4630      	mov	r0, r6
   85ae2:	69e1      	ldr	r1, [r4, #28]
   85ae4:	4652      	mov	r2, sl
   85ae6:	47b8      	blx	r7
   85ae8:	f1b0 0b00 	subs.w	fp, r0, #0
   85aec:	dc0b      	bgt.n	85b06 <__sfvwrite_r+0x1be>
   85aee:	e07e      	b.n	85bee <__sfvwrite_r+0x2a6>
   85af0:	4651      	mov	r1, sl
   85af2:	462a      	mov	r2, r5
   85af4:	f000 fb96 	bl	86224 <memmove>
   85af8:	68a2      	ldr	r2, [r4, #8]
   85afa:	6823      	ldr	r3, [r4, #0]
   85afc:	1b50      	subs	r0, r2, r5
   85afe:	1959      	adds	r1, r3, r5
   85b00:	46ab      	mov	fp, r5
   85b02:	60a0      	str	r0, [r4, #8]
   85b04:	6021      	str	r1, [r4, #0]
   85b06:	f8d9 0008 	ldr.w	r0, [r9, #8]
   85b0a:	44da      	add	sl, fp
   85b0c:	ebcb 0200 	rsb	r2, fp, r0
   85b10:	ebcb 0505 	rsb	r5, fp, r5
   85b14:	f8c9 2008 	str.w	r2, [r9, #8]
   85b18:	2a00      	cmp	r2, #0
   85b1a:	f47f af66 	bne.w	859ea <__sfvwrite_r+0xa2>
   85b1e:	e71a      	b.n	85956 <__sfvwrite_r+0xe>
   85b20:	9801      	ldr	r0, [sp, #4]
   85b22:	2800      	cmp	r0, #0
   85b24:	d032      	beq.n	85b8c <__sfvwrite_r+0x244>
   85b26:	6820      	ldr	r0, [r4, #0]
   85b28:	6921      	ldr	r1, [r4, #16]
   85b2a:	45d3      	cmp	fp, sl
   85b2c:	bf34      	ite	cc
   85b2e:	465b      	movcc	r3, fp
   85b30:	4653      	movcs	r3, sl
   85b32:	4288      	cmp	r0, r1
   85b34:	68a5      	ldr	r5, [r4, #8]
   85b36:	f8d4 e014 	ldr.w	lr, [r4, #20]
   85b3a:	d937      	bls.n	85bac <__sfvwrite_r+0x264>
   85b3c:	4475      	add	r5, lr
   85b3e:	42ab      	cmp	r3, r5
   85b40:	dd34      	ble.n	85bac <__sfvwrite_r+0x264>
   85b42:	4639      	mov	r1, r7
   85b44:	462a      	mov	r2, r5
   85b46:	f000 fb6d 	bl	86224 <memmove>
   85b4a:	6820      	ldr	r0, [r4, #0]
   85b4c:	4621      	mov	r1, r4
   85b4e:	1943      	adds	r3, r0, r5
   85b50:	6023      	str	r3, [r4, #0]
   85b52:	4630      	mov	r0, r6
   85b54:	f7ff fc12 	bl	8537c <_fflush_r>
   85b58:	2800      	cmp	r0, #0
   85b5a:	d148      	bne.n	85bee <__sfvwrite_r+0x2a6>
   85b5c:	ebbb 0b05 	subs.w	fp, fp, r5
   85b60:	d03d      	beq.n	85bde <__sfvwrite_r+0x296>
   85b62:	f8d9 2008 	ldr.w	r2, [r9, #8]
   85b66:	197f      	adds	r7, r7, r5
   85b68:	ebc5 0a0a 	rsb	sl, r5, sl
   85b6c:	1b55      	subs	r5, r2, r5
   85b6e:	f8c9 5008 	str.w	r5, [r9, #8]
   85b72:	2d00      	cmp	r5, #0
   85b74:	f43f aeef 	beq.w	85956 <__sfvwrite_r+0xe>
   85b78:	f1ba 0f00 	cmp.w	sl, #0
   85b7c:	d1d0      	bne.n	85b20 <__sfvwrite_r+0x1d8>
   85b7e:	2100      	movs	r1, #0
   85b80:	e898 0480 	ldmia.w	r8, {r7, sl}
   85b84:	9101      	str	r1, [sp, #4]
   85b86:	f108 0808 	add.w	r8, r8, #8
   85b8a:	e7f5      	b.n	85b78 <__sfvwrite_r+0x230>
   85b8c:	4638      	mov	r0, r7
   85b8e:	210a      	movs	r1, #10
   85b90:	4652      	mov	r2, sl
   85b92:	f000 fb39 	bl	86208 <memchr>
   85b96:	b120      	cbz	r0, 85ba2 <__sfvwrite_r+0x25a>
   85b98:	f100 0101 	add.w	r1, r0, #1
   85b9c:	ebc7 0b01 	rsb	fp, r7, r1
   85ba0:	e001      	b.n	85ba6 <__sfvwrite_r+0x25e>
   85ba2:	f10a 0b01 	add.w	fp, sl, #1
   85ba6:	2201      	movs	r2, #1
   85ba8:	9201      	str	r2, [sp, #4]
   85baa:	e7bc      	b.n	85b26 <__sfvwrite_r+0x1de>
   85bac:	4573      	cmp	r3, lr
   85bae:	db08      	blt.n	85bc2 <__sfvwrite_r+0x27a>
   85bb0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   85bb2:	4630      	mov	r0, r6
   85bb4:	69e1      	ldr	r1, [r4, #28]
   85bb6:	463a      	mov	r2, r7
   85bb8:	4673      	mov	r3, lr
   85bba:	47a8      	blx	r5
   85bbc:	1e05      	subs	r5, r0, #0
   85bbe:	dccd      	bgt.n	85b5c <__sfvwrite_r+0x214>
   85bc0:	e015      	b.n	85bee <__sfvwrite_r+0x2a6>
   85bc2:	461a      	mov	r2, r3
   85bc4:	4639      	mov	r1, r7
   85bc6:	9300      	str	r3, [sp, #0]
   85bc8:	f000 fb2c 	bl	86224 <memmove>
   85bcc:	9b00      	ldr	r3, [sp, #0]
   85bce:	6825      	ldr	r5, [r4, #0]
   85bd0:	68a0      	ldr	r0, [r4, #8]
   85bd2:	18e9      	adds	r1, r5, r3
   85bd4:	1ac2      	subs	r2, r0, r3
   85bd6:	60a2      	str	r2, [r4, #8]
   85bd8:	6021      	str	r1, [r4, #0]
   85bda:	461d      	mov	r5, r3
   85bdc:	e7be      	b.n	85b5c <__sfvwrite_r+0x214>
   85bde:	4630      	mov	r0, r6
   85be0:	4621      	mov	r1, r4
   85be2:	f7ff fbcb 	bl	8537c <_fflush_r>
   85be6:	b910      	cbnz	r0, 85bee <__sfvwrite_r+0x2a6>
   85be8:	f8cd b004 	str.w	fp, [sp, #4]
   85bec:	e7b9      	b.n	85b62 <__sfvwrite_r+0x21a>
   85bee:	89a2      	ldrh	r2, [r4, #12]
   85bf0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   85bf4:	81a3      	strh	r3, [r4, #12]
   85bf6:	f04f 30ff 	mov.w	r0, #4294967295
   85bfa:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085bfe <_fwalk>:
   85bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85c02:	4604      	mov	r4, r0
   85c04:	4688      	mov	r8, r1
   85c06:	f7ff fd0f 	bl	85628 <__sfp_lock_acquire>
   85c0a:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
   85c0e:	2600      	movs	r6, #0
   85c10:	b18c      	cbz	r4, 85c36 <_fwalk+0x38>
   85c12:	68a5      	ldr	r5, [r4, #8]
   85c14:	6867      	ldr	r7, [r4, #4]
   85c16:	3f01      	subs	r7, #1
   85c18:	d40b      	bmi.n	85c32 <_fwalk+0x34>
   85c1a:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   85c1e:	b133      	cbz	r3, 85c2e <_fwalk+0x30>
   85c20:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   85c24:	1c43      	adds	r3, r0, #1
   85c26:	d002      	beq.n	85c2e <_fwalk+0x30>
   85c28:	4628      	mov	r0, r5
   85c2a:	47c0      	blx	r8
   85c2c:	4306      	orrs	r6, r0
   85c2e:	3568      	adds	r5, #104	; 0x68
   85c30:	e7f1      	b.n	85c16 <_fwalk+0x18>
   85c32:	6824      	ldr	r4, [r4, #0]
   85c34:	e7ec      	b.n	85c10 <_fwalk+0x12>
   85c36:	f7ff fcf8 	bl	8562a <__sfp_lock_release>
   85c3a:	4630      	mov	r0, r6
   85c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00085c40 <_fwalk_reent>:
   85c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85c44:	4680      	mov	r8, r0
   85c46:	4689      	mov	r9, r1
   85c48:	f7ff fcee 	bl	85628 <__sfp_lock_acquire>
   85c4c:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
   85c50:	2600      	movs	r6, #0
   85c52:	b194      	cbz	r4, 85c7a <_fwalk_reent+0x3a>
   85c54:	68a5      	ldr	r5, [r4, #8]
   85c56:	6867      	ldr	r7, [r4, #4]
   85c58:	3f01      	subs	r7, #1
   85c5a:	d40c      	bmi.n	85c76 <_fwalk_reent+0x36>
   85c5c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   85c60:	b13b      	cbz	r3, 85c72 <_fwalk_reent+0x32>
   85c62:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   85c66:	1c43      	adds	r3, r0, #1
   85c68:	d003      	beq.n	85c72 <_fwalk_reent+0x32>
   85c6a:	4640      	mov	r0, r8
   85c6c:	4629      	mov	r1, r5
   85c6e:	47c8      	blx	r9
   85c70:	4306      	orrs	r6, r0
   85c72:	3568      	adds	r5, #104	; 0x68
   85c74:	e7f0      	b.n	85c58 <_fwalk_reent+0x18>
   85c76:	6824      	ldr	r4, [r4, #0]
   85c78:	e7eb      	b.n	85c52 <_fwalk_reent+0x12>
   85c7a:	f7ff fcd6 	bl	8562a <__sfp_lock_release>
   85c7e:	4630      	mov	r0, r6
   85c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00085c84 <_setlocale_r>:
   85c84:	b510      	push	{r4, lr}
   85c86:	4614      	mov	r4, r2
   85c88:	b90a      	cbnz	r2, 85c8e <_setlocale_r+0xa>
   85c8a:	480c      	ldr	r0, [pc, #48]	; (85cbc <_setlocale_r+0x38>)
   85c8c:	bd10      	pop	{r4, pc}
   85c8e:	4610      	mov	r0, r2
   85c90:	490b      	ldr	r1, [pc, #44]	; (85cc0 <_setlocale_r+0x3c>)
   85c92:	f000 fca8 	bl	865e6 <strcmp>
   85c96:	2800      	cmp	r0, #0
   85c98:	d0f7      	beq.n	85c8a <_setlocale_r+0x6>
   85c9a:	4620      	mov	r0, r4
   85c9c:	4907      	ldr	r1, [pc, #28]	; (85cbc <_setlocale_r+0x38>)
   85c9e:	f000 fca2 	bl	865e6 <strcmp>
   85ca2:	2800      	cmp	r0, #0
   85ca4:	d0f1      	beq.n	85c8a <_setlocale_r+0x6>
   85ca6:	4620      	mov	r0, r4
   85ca8:	4906      	ldr	r1, [pc, #24]	; (85cc4 <_setlocale_r+0x40>)
   85caa:	f000 fc9c 	bl	865e6 <strcmp>
   85cae:	4b03      	ldr	r3, [pc, #12]	; (85cbc <_setlocale_r+0x38>)
   85cb0:	2800      	cmp	r0, #0
   85cb2:	bf0c      	ite	eq
   85cb4:	4618      	moveq	r0, r3
   85cb6:	2000      	movne	r0, #0
   85cb8:	bd10      	pop	{r4, pc}
   85cba:	bf00      	nop
   85cbc:	0008700c 	.word	0x0008700c
   85cc0:	00087050 	.word	0x00087050
   85cc4:	00087057 	.word	0x00087057

00085cc8 <__locale_charset>:
   85cc8:	4800      	ldr	r0, [pc, #0]	; (85ccc <__locale_charset+0x4>)
   85cca:	4770      	bx	lr
   85ccc:	20070440 	.word	0x20070440

00085cd0 <__locale_mb_cur_max>:
   85cd0:	4b01      	ldr	r3, [pc, #4]	; (85cd8 <__locale_mb_cur_max+0x8>)
   85cd2:	6a18      	ldr	r0, [r3, #32]
   85cd4:	4770      	bx	lr
   85cd6:	bf00      	nop
   85cd8:	20070440 	.word	0x20070440

00085cdc <__locale_msgcharset>:
   85cdc:	4800      	ldr	r0, [pc, #0]	; (85ce0 <__locale_msgcharset+0x4>)
   85cde:	4770      	bx	lr
   85ce0:	20070464 	.word	0x20070464

00085ce4 <__locale_cjk_lang>:
   85ce4:	2000      	movs	r0, #0
   85ce6:	4770      	bx	lr

00085ce8 <_localeconv_r>:
   85ce8:	4800      	ldr	r0, [pc, #0]	; (85cec <_localeconv_r+0x4>)
   85cea:	4770      	bx	lr
   85cec:	20070484 	.word	0x20070484

00085cf0 <setlocale>:
   85cf0:	460a      	mov	r2, r1
   85cf2:	4903      	ldr	r1, [pc, #12]	; (85d00 <setlocale+0x10>)
   85cf4:	4603      	mov	r3, r0
   85cf6:	6808      	ldr	r0, [r1, #0]
   85cf8:	4619      	mov	r1, r3
   85cfa:	f7ff bfc3 	b.w	85c84 <_setlocale_r>
   85cfe:	bf00      	nop
   85d00:	20070010 	.word	0x20070010

00085d04 <localeconv>:
   85d04:	4800      	ldr	r0, [pc, #0]	; (85d08 <localeconv+0x4>)
   85d06:	4770      	bx	lr
   85d08:	20070484 	.word	0x20070484

00085d0c <__smakebuf_r>:
   85d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   85d0e:	898b      	ldrh	r3, [r1, #12]
   85d10:	460c      	mov	r4, r1
   85d12:	f003 0102 	and.w	r1, r3, #2
   85d16:	b20a      	sxth	r2, r1
   85d18:	b091      	sub	sp, #68	; 0x44
   85d1a:	4606      	mov	r6, r0
   85d1c:	2a00      	cmp	r2, #0
   85d1e:	d13f      	bne.n	85da0 <__smakebuf_r+0x94>
   85d20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85d24:	2900      	cmp	r1, #0
   85d26:	da0d      	bge.n	85d44 <__smakebuf_r+0x38>
   85d28:	89a7      	ldrh	r7, [r4, #12]
   85d2a:	f007 0280 	and.w	r2, r7, #128	; 0x80
   85d2e:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
   85d32:	b210      	sxth	r0, r2
   85d34:	2800      	cmp	r0, #0
   85d36:	bf0c      	ite	eq
   85d38:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   85d3c:	2540      	movne	r5, #64	; 0x40
   85d3e:	81a3      	strh	r3, [r4, #12]
   85d40:	2700      	movs	r7, #0
   85d42:	e020      	b.n	85d86 <__smakebuf_r+0x7a>
   85d44:	aa01      	add	r2, sp, #4
   85d46:	f000 fd1b 	bl	86780 <_fstat_r>
   85d4a:	2800      	cmp	r0, #0
   85d4c:	dbec      	blt.n	85d28 <__smakebuf_r+0x1c>
   85d4e:	9802      	ldr	r0, [sp, #8]
   85d50:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
   85d54:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
   85d58:	425f      	negs	r7, r3
   85d5a:	415f      	adcs	r7, r3
   85d5c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   85d60:	d10b      	bne.n	85d7a <__smakebuf_r+0x6e>
   85d62:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   85d64:	4a1d      	ldr	r2, [pc, #116]	; (85ddc <__smakebuf_r+0xd0>)
   85d66:	4291      	cmp	r1, r2
   85d68:	d107      	bne.n	85d7a <__smakebuf_r+0x6e>
   85d6a:	89a3      	ldrh	r3, [r4, #12]
   85d6c:	f44f 6580 	mov.w	r5, #1024	; 0x400
   85d70:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
   85d74:	81a1      	strh	r1, [r4, #12]
   85d76:	64e5      	str	r5, [r4, #76]	; 0x4c
   85d78:	e005      	b.n	85d86 <__smakebuf_r+0x7a>
   85d7a:	89a0      	ldrh	r0, [r4, #12]
   85d7c:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
   85d80:	81a5      	strh	r5, [r4, #12]
   85d82:	f44f 6580 	mov.w	r5, #1024	; 0x400
   85d86:	4630      	mov	r0, r6
   85d88:	4629      	mov	r1, r5
   85d8a:	f000 f83b 	bl	85e04 <_malloc_r>
   85d8e:	b970      	cbnz	r0, 85dae <__smakebuf_r+0xa2>
   85d90:	89a3      	ldrh	r3, [r4, #12]
   85d92:	f403 7200 	and.w	r2, r3, #512	; 0x200
   85d96:	b210      	sxth	r0, r2
   85d98:	b9e8      	cbnz	r0, 85dd6 <__smakebuf_r+0xca>
   85d9a:	f043 0102 	orr.w	r1, r3, #2
   85d9e:	81a1      	strh	r1, [r4, #12]
   85da0:	f104 0343 	add.w	r3, r4, #67	; 0x43
   85da4:	2201      	movs	r2, #1
   85da6:	6023      	str	r3, [r4, #0]
   85da8:	6123      	str	r3, [r4, #16]
   85daa:	6162      	str	r2, [r4, #20]
   85dac:	e013      	b.n	85dd6 <__smakebuf_r+0xca>
   85dae:	89a2      	ldrh	r2, [r4, #12]
   85db0:	490b      	ldr	r1, [pc, #44]	; (85de0 <__smakebuf_r+0xd4>)
   85db2:	f042 0380 	orr.w	r3, r2, #128	; 0x80
   85db6:	63f1      	str	r1, [r6, #60]	; 0x3c
   85db8:	81a3      	strh	r3, [r4, #12]
   85dba:	6020      	str	r0, [r4, #0]
   85dbc:	6120      	str	r0, [r4, #16]
   85dbe:	6165      	str	r5, [r4, #20]
   85dc0:	b14f      	cbz	r7, 85dd6 <__smakebuf_r+0xca>
   85dc2:	4630      	mov	r0, r6
   85dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85dc8:	f000 fcec 	bl	867a4 <_isatty_r>
   85dcc:	b118      	cbz	r0, 85dd6 <__smakebuf_r+0xca>
   85dce:	89a0      	ldrh	r0, [r4, #12]
   85dd0:	f040 0101 	orr.w	r1, r0, #1
   85dd4:	81a1      	strh	r1, [r4, #12]
   85dd6:	b011      	add	sp, #68	; 0x44
   85dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85dda:	bf00      	nop
   85ddc:	000865bb 	.word	0x000865bb
   85de0:	000854d5 	.word	0x000854d5

00085de4 <malloc>:
   85de4:	4b02      	ldr	r3, [pc, #8]	; (85df0 <malloc+0xc>)
   85de6:	4601      	mov	r1, r0
   85de8:	6818      	ldr	r0, [r3, #0]
   85dea:	f000 b80b 	b.w	85e04 <_malloc_r>
   85dee:	bf00      	nop
   85df0:	20070010 	.word	0x20070010

00085df4 <free>:
   85df4:	4b02      	ldr	r3, [pc, #8]	; (85e00 <free+0xc>)
   85df6:	4601      	mov	r1, r0
   85df8:	6818      	ldr	r0, [r3, #0]
   85dfa:	f7ff bcef 	b.w	857dc <_free_r>
   85dfe:	bf00      	nop
   85e00:	20070010 	.word	0x20070010

00085e04 <_malloc_r>:
   85e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85e08:	f101 040b 	add.w	r4, r1, #11
   85e0c:	2c16      	cmp	r4, #22
   85e0e:	4606      	mov	r6, r0
   85e10:	d903      	bls.n	85e1a <_malloc_r+0x16>
   85e12:	f034 0407 	bics.w	r4, r4, #7
   85e16:	d501      	bpl.n	85e1c <_malloc_r+0x18>
   85e18:	e002      	b.n	85e20 <_malloc_r+0x1c>
   85e1a:	2410      	movs	r4, #16
   85e1c:	428c      	cmp	r4, r1
   85e1e:	d202      	bcs.n	85e26 <_malloc_r+0x22>
   85e20:	250c      	movs	r5, #12
   85e22:	6035      	str	r5, [r6, #0]
   85e24:	e1d9      	b.n	861da <_malloc_r+0x3d6>
   85e26:	4630      	mov	r0, r6
   85e28:	f000 fa16 	bl	86258 <__malloc_lock>
   85e2c:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   85e30:	d214      	bcs.n	85e5c <_malloc_r+0x58>
   85e32:	4da0      	ldr	r5, [pc, #640]	; (860b4 <_malloc_r+0x2b0>)
   85e34:	08e1      	lsrs	r1, r4, #3
   85e36:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   85e3a:	68c5      	ldr	r5, [r0, #12]
   85e3c:	4285      	cmp	r5, r0
   85e3e:	d105      	bne.n	85e4c <_malloc_r+0x48>
   85e40:	f105 0308 	add.w	r3, r5, #8
   85e44:	696d      	ldr	r5, [r5, #20]
   85e46:	1c8a      	adds	r2, r1, #2
   85e48:	429d      	cmp	r5, r3
   85e4a:	d044      	beq.n	85ed6 <_malloc_r+0xd2>
   85e4c:	68e8      	ldr	r0, [r5, #12]
   85e4e:	68a9      	ldr	r1, [r5, #8]
   85e50:	686a      	ldr	r2, [r5, #4]
   85e52:	60c8      	str	r0, [r1, #12]
   85e54:	f022 0303 	bic.w	r3, r2, #3
   85e58:	6081      	str	r1, [r0, #8]
   85e5a:	e059      	b.n	85f10 <_malloc_r+0x10c>
   85e5c:	0a62      	lsrs	r2, r4, #9
   85e5e:	d101      	bne.n	85e64 <_malloc_r+0x60>
   85e60:	08e2      	lsrs	r2, r4, #3
   85e62:	e01b      	b.n	85e9c <_malloc_r+0x98>
   85e64:	2a04      	cmp	r2, #4
   85e66:	d802      	bhi.n	85e6e <_malloc_r+0x6a>
   85e68:	09a2      	lsrs	r2, r4, #6
   85e6a:	3238      	adds	r2, #56	; 0x38
   85e6c:	e016      	b.n	85e9c <_malloc_r+0x98>
   85e6e:	2a14      	cmp	r2, #20
   85e70:	d801      	bhi.n	85e76 <_malloc_r+0x72>
   85e72:	325b      	adds	r2, #91	; 0x5b
   85e74:	e012      	b.n	85e9c <_malloc_r+0x98>
   85e76:	2a54      	cmp	r2, #84	; 0x54
   85e78:	d802      	bhi.n	85e80 <_malloc_r+0x7c>
   85e7a:	0b22      	lsrs	r2, r4, #12
   85e7c:	326e      	adds	r2, #110	; 0x6e
   85e7e:	e00d      	b.n	85e9c <_malloc_r+0x98>
   85e80:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85e84:	d802      	bhi.n	85e8c <_malloc_r+0x88>
   85e86:	0be2      	lsrs	r2, r4, #15
   85e88:	3277      	adds	r2, #119	; 0x77
   85e8a:	e007      	b.n	85e9c <_malloc_r+0x98>
   85e8c:	f240 5354 	movw	r3, #1364	; 0x554
   85e90:	429a      	cmp	r2, r3
   85e92:	d802      	bhi.n	85e9a <_malloc_r+0x96>
   85e94:	0ca2      	lsrs	r2, r4, #18
   85e96:	327c      	adds	r2, #124	; 0x7c
   85e98:	e000      	b.n	85e9c <_malloc_r+0x98>
   85e9a:	227e      	movs	r2, #126	; 0x7e
   85e9c:	4885      	ldr	r0, [pc, #532]	; (860b4 <_malloc_r+0x2b0>)
   85e9e:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
   85ea2:	68dd      	ldr	r5, [r3, #12]
   85ea4:	429d      	cmp	r5, r3
   85ea6:	d015      	beq.n	85ed4 <_malloc_r+0xd0>
   85ea8:	6869      	ldr	r1, [r5, #4]
   85eaa:	f021 0103 	bic.w	r1, r1, #3
   85eae:	1b08      	subs	r0, r1, r4
   85eb0:	280f      	cmp	r0, #15
   85eb2:	dd01      	ble.n	85eb8 <_malloc_r+0xb4>
   85eb4:	3a01      	subs	r2, #1
   85eb6:	e00d      	b.n	85ed4 <_malloc_r+0xd0>
   85eb8:	2800      	cmp	r0, #0
   85eba:	db09      	blt.n	85ed0 <_malloc_r+0xcc>
   85ebc:	68eb      	ldr	r3, [r5, #12]
   85ebe:	68aa      	ldr	r2, [r5, #8]
   85ec0:	60d3      	str	r3, [r2, #12]
   85ec2:	609a      	str	r2, [r3, #8]
   85ec4:	186b      	adds	r3, r5, r1
   85ec6:	685a      	ldr	r2, [r3, #4]
   85ec8:	f042 0001 	orr.w	r0, r2, #1
   85ecc:	6058      	str	r0, [r3, #4]
   85ece:	e190      	b.n	861f2 <_malloc_r+0x3ee>
   85ed0:	68ed      	ldr	r5, [r5, #12]
   85ed2:	e7e7      	b.n	85ea4 <_malloc_r+0xa0>
   85ed4:	3201      	adds	r2, #1
   85ed6:	4977      	ldr	r1, [pc, #476]	; (860b4 <_malloc_r+0x2b0>)
   85ed8:	690d      	ldr	r5, [r1, #16]
   85eda:	f101 0708 	add.w	r7, r1, #8
   85ede:	42bd      	cmp	r5, r7
   85ee0:	d068      	beq.n	85fb4 <_malloc_r+0x1b0>
   85ee2:	6868      	ldr	r0, [r5, #4]
   85ee4:	f020 0303 	bic.w	r3, r0, #3
   85ee8:	1b18      	subs	r0, r3, r4
   85eea:	280f      	cmp	r0, #15
   85eec:	dd0c      	ble.n	85f08 <_malloc_r+0x104>
   85eee:	192b      	adds	r3, r5, r4
   85ef0:	614b      	str	r3, [r1, #20]
   85ef2:	610b      	str	r3, [r1, #16]
   85ef4:	f044 0401 	orr.w	r4, r4, #1
   85ef8:	f040 0101 	orr.w	r1, r0, #1
   85efc:	606c      	str	r4, [r5, #4]
   85efe:	60df      	str	r7, [r3, #12]
   85f00:	609f      	str	r7, [r3, #8]
   85f02:	6059      	str	r1, [r3, #4]
   85f04:	5018      	str	r0, [r3, r0]
   85f06:	e174      	b.n	861f2 <_malloc_r+0x3ee>
   85f08:	2800      	cmp	r0, #0
   85f0a:	614f      	str	r7, [r1, #20]
   85f0c:	610f      	str	r7, [r1, #16]
   85f0e:	db01      	blt.n	85f14 <_malloc_r+0x110>
   85f10:	18eb      	adds	r3, r5, r3
   85f12:	e7d8      	b.n	85ec6 <_malloc_r+0xc2>
   85f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85f18:	d20f      	bcs.n	85f3a <_malloc_r+0x136>
   85f1a:	08db      	lsrs	r3, r3, #3
   85f1c:	1098      	asrs	r0, r3, #2
   85f1e:	2701      	movs	r7, #1
   85f20:	fa07 f700 	lsl.w	r7, r7, r0
   85f24:	6848      	ldr	r0, [r1, #4]
   85f26:	4307      	orrs	r7, r0
   85f28:	604f      	str	r7, [r1, #4]
   85f2a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   85f2e:	688b      	ldr	r3, [r1, #8]
   85f30:	60e9      	str	r1, [r5, #12]
   85f32:	60ab      	str	r3, [r5, #8]
   85f34:	60dd      	str	r5, [r3, #12]
   85f36:	608d      	str	r5, [r1, #8]
   85f38:	e03c      	b.n	85fb4 <_malloc_r+0x1b0>
   85f3a:	0a58      	lsrs	r0, r3, #9
   85f3c:	2804      	cmp	r0, #4
   85f3e:	d802      	bhi.n	85f46 <_malloc_r+0x142>
   85f40:	0998      	lsrs	r0, r3, #6
   85f42:	3038      	adds	r0, #56	; 0x38
   85f44:	e016      	b.n	85f74 <_malloc_r+0x170>
   85f46:	2814      	cmp	r0, #20
   85f48:	d801      	bhi.n	85f4e <_malloc_r+0x14a>
   85f4a:	305b      	adds	r0, #91	; 0x5b
   85f4c:	e012      	b.n	85f74 <_malloc_r+0x170>
   85f4e:	2854      	cmp	r0, #84	; 0x54
   85f50:	d802      	bhi.n	85f58 <_malloc_r+0x154>
   85f52:	0b18      	lsrs	r0, r3, #12
   85f54:	306e      	adds	r0, #110	; 0x6e
   85f56:	e00d      	b.n	85f74 <_malloc_r+0x170>
   85f58:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   85f5c:	d802      	bhi.n	85f64 <_malloc_r+0x160>
   85f5e:	0bd8      	lsrs	r0, r3, #15
   85f60:	3077      	adds	r0, #119	; 0x77
   85f62:	e007      	b.n	85f74 <_malloc_r+0x170>
   85f64:	f240 5754 	movw	r7, #1364	; 0x554
   85f68:	42b8      	cmp	r0, r7
   85f6a:	d802      	bhi.n	85f72 <_malloc_r+0x16e>
   85f6c:	0c98      	lsrs	r0, r3, #18
   85f6e:	307c      	adds	r0, #124	; 0x7c
   85f70:	e000      	b.n	85f74 <_malloc_r+0x170>
   85f72:	207e      	movs	r0, #126	; 0x7e
   85f74:	f8df e13c 	ldr.w	lr, [pc, #316]	; 860b4 <_malloc_r+0x2b0>
   85f78:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
   85f7c:	68b9      	ldr	r1, [r7, #8]
   85f7e:	42b9      	cmp	r1, r7
   85f80:	d10e      	bne.n	85fa0 <_malloc_r+0x19c>
   85f82:	1087      	asrs	r7, r0, #2
   85f84:	2301      	movs	r3, #1
   85f86:	fa03 f007 	lsl.w	r0, r3, r7
   85f8a:	f8de 7004 	ldr.w	r7, [lr, #4]
   85f8e:	ea40 0307 	orr.w	r3, r0, r7
   85f92:	f8ce 3004 	str.w	r3, [lr, #4]
   85f96:	4608      	mov	r0, r1
   85f98:	e008      	b.n	85fac <_malloc_r+0x1a8>
   85f9a:	6889      	ldr	r1, [r1, #8]
   85f9c:	42b9      	cmp	r1, r7
   85f9e:	d004      	beq.n	85faa <_malloc_r+0x1a6>
   85fa0:	6848      	ldr	r0, [r1, #4]
   85fa2:	f020 0003 	bic.w	r0, r0, #3
   85fa6:	4283      	cmp	r3, r0
   85fa8:	d3f7      	bcc.n	85f9a <_malloc_r+0x196>
   85faa:	68c8      	ldr	r0, [r1, #12]
   85fac:	60e8      	str	r0, [r5, #12]
   85fae:	60a9      	str	r1, [r5, #8]
   85fb0:	60cd      	str	r5, [r1, #12]
   85fb2:	6085      	str	r5, [r0, #8]
   85fb4:	1095      	asrs	r5, r2, #2
   85fb6:	2001      	movs	r0, #1
   85fb8:	fa00 f305 	lsl.w	r3, r0, r5
   85fbc:	4f3d      	ldr	r7, [pc, #244]	; (860b4 <_malloc_r+0x2b0>)
   85fbe:	6879      	ldr	r1, [r7, #4]
   85fc0:	428b      	cmp	r3, r1
   85fc2:	d85d      	bhi.n	86080 <_malloc_r+0x27c>
   85fc4:	420b      	tst	r3, r1
   85fc6:	d105      	bne.n	85fd4 <_malloc_r+0x1d0>
   85fc8:	f022 0203 	bic.w	r2, r2, #3
   85fcc:	005b      	lsls	r3, r3, #1
   85fce:	3204      	adds	r2, #4
   85fd0:	420b      	tst	r3, r1
   85fd2:	d0fb      	beq.n	85fcc <_malloc_r+0x1c8>
   85fd4:	4d37      	ldr	r5, [pc, #220]	; (860b4 <_malloc_r+0x2b0>)
   85fd6:	4610      	mov	r0, r2
   85fd8:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
   85fdc:	4677      	mov	r7, lr
   85fde:	68fd      	ldr	r5, [r7, #12]
   85fe0:	42bd      	cmp	r5, r7
   85fe2:	d02d      	beq.n	86040 <_malloc_r+0x23c>
   85fe4:	6869      	ldr	r1, [r5, #4]
   85fe6:	f021 0c03 	bic.w	ip, r1, #3
   85fea:	ebc4 010c 	rsb	r1, r4, ip
   85fee:	290f      	cmp	r1, #15
   85ff0:	dd13      	ble.n	8601a <_malloc_r+0x216>
   85ff2:	192b      	adds	r3, r5, r4
   85ff4:	f044 0401 	orr.w	r4, r4, #1
   85ff8:	68ea      	ldr	r2, [r5, #12]
   85ffa:	606c      	str	r4, [r5, #4]
   85ffc:	f855 0f08 	ldr.w	r0, [r5, #8]!
   86000:	5059      	str	r1, [r3, r1]
   86002:	60c2      	str	r2, [r0, #12]
   86004:	6090      	str	r0, [r2, #8]
   86006:	4a2b      	ldr	r2, [pc, #172]	; (860b4 <_malloc_r+0x2b0>)
   86008:	f041 0001 	orr.w	r0, r1, #1
   8600c:	6153      	str	r3, [r2, #20]
   8600e:	6113      	str	r3, [r2, #16]
   86010:	3208      	adds	r2, #8
   86012:	60da      	str	r2, [r3, #12]
   86014:	609a      	str	r2, [r3, #8]
   86016:	6058      	str	r0, [r3, #4]
   86018:	e00c      	b.n	86034 <_malloc_r+0x230>
   8601a:	2900      	cmp	r1, #0
   8601c:	db0e      	blt.n	8603c <_malloc_r+0x238>
   8601e:	eb05 000c 	add.w	r0, r5, ip
   86022:	6842      	ldr	r2, [r0, #4]
   86024:	68e9      	ldr	r1, [r5, #12]
   86026:	f042 0301 	orr.w	r3, r2, #1
   8602a:	6043      	str	r3, [r0, #4]
   8602c:	f855 0f08 	ldr.w	r0, [r5, #8]!
   86030:	60c1      	str	r1, [r0, #12]
   86032:	6088      	str	r0, [r1, #8]
   86034:	4630      	mov	r0, r6
   86036:	f000 f910 	bl	8625a <__malloc_unlock>
   8603a:	e0de      	b.n	861fa <_malloc_r+0x3f6>
   8603c:	68ed      	ldr	r5, [r5, #12]
   8603e:	e7cf      	b.n	85fe0 <_malloc_r+0x1dc>
   86040:	3001      	adds	r0, #1
   86042:	0781      	lsls	r1, r0, #30
   86044:	f105 0708 	add.w	r7, r5, #8
   86048:	d1c9      	bne.n	85fde <_malloc_r+0x1da>
   8604a:	4671      	mov	r1, lr
   8604c:	0795      	lsls	r5, r2, #30
   8604e:	d105      	bne.n	8605c <_malloc_r+0x258>
   86050:	4a18      	ldr	r2, [pc, #96]	; (860b4 <_malloc_r+0x2b0>)
   86052:	6855      	ldr	r5, [r2, #4]
   86054:	ea25 0503 	bic.w	r5, r5, r3
   86058:	6055      	str	r5, [r2, #4]
   8605a:	e005      	b.n	86068 <_malloc_r+0x264>
   8605c:	f1a1 0708 	sub.w	r7, r1, #8
   86060:	6809      	ldr	r1, [r1, #0]
   86062:	3a01      	subs	r2, #1
   86064:	42b9      	cmp	r1, r7
   86066:	d0f1      	beq.n	8604c <_malloc_r+0x248>
   86068:	4f12      	ldr	r7, [pc, #72]	; (860b4 <_malloc_r+0x2b0>)
   8606a:	005b      	lsls	r3, r3, #1
   8606c:	687f      	ldr	r7, [r7, #4]
   8606e:	42bb      	cmp	r3, r7
   86070:	d806      	bhi.n	86080 <_malloc_r+0x27c>
   86072:	b12b      	cbz	r3, 86080 <_malloc_r+0x27c>
   86074:	4602      	mov	r2, r0
   86076:	423b      	tst	r3, r7
   86078:	d1ac      	bne.n	85fd4 <_malloc_r+0x1d0>
   8607a:	3204      	adds	r2, #4
   8607c:	005b      	lsls	r3, r3, #1
   8607e:	e7fa      	b.n	86076 <_malloc_r+0x272>
   86080:	4b0c      	ldr	r3, [pc, #48]	; (860b4 <_malloc_r+0x2b0>)
   86082:	689f      	ldr	r7, [r3, #8]
   86084:	4619      	mov	r1, r3
   86086:	6878      	ldr	r0, [r7, #4]
   86088:	f020 0903 	bic.w	r9, r0, #3
   8608c:	45a1      	cmp	r9, r4
   8608e:	d304      	bcc.n	8609a <_malloc_r+0x296>
   86090:	ebc4 0009 	rsb	r0, r4, r9
   86094:	280f      	cmp	r0, #15
   86096:	f300 80a2 	bgt.w	861de <_malloc_r+0x3da>
   8609a:	4a07      	ldr	r2, [pc, #28]	; (860b8 <_malloc_r+0x2b4>)
   8609c:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
   860a0:	6815      	ldr	r5, [r2, #0]
   860a2:	3301      	adds	r3, #1
   860a4:	eb07 0a09 	add.w	sl, r7, r9
   860a8:	eb04 0805 	add.w	r8, r4, r5
   860ac:	d106      	bne.n	860bc <_malloc_r+0x2b8>
   860ae:	f108 0810 	add.w	r8, r8, #16
   860b2:	e00b      	b.n	860cc <_malloc_r+0x2c8>
   860b4:	200704bc 	.word	0x200704bc
   860b8:	20078bec 	.word	0x20078bec
   860bc:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   860c0:	f100 010f 	add.w	r1, r0, #15
   860c4:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   860c8:	f022 080f 	bic.w	r8, r2, #15
   860cc:	4630      	mov	r0, r6
   860ce:	4641      	mov	r1, r8
   860d0:	f000 fa32 	bl	86538 <_sbrk_r>
   860d4:	1c42      	adds	r2, r0, #1
   860d6:	4605      	mov	r5, r0
   860d8:	d071      	beq.n	861be <_malloc_r+0x3ba>
   860da:	4550      	cmp	r0, sl
   860dc:	d202      	bcs.n	860e4 <_malloc_r+0x2e0>
   860de:	4b48      	ldr	r3, [pc, #288]	; (86200 <_malloc_r+0x3fc>)
   860e0:	429f      	cmp	r7, r3
   860e2:	d16c      	bne.n	861be <_malloc_r+0x3ba>
   860e4:	4847      	ldr	r0, [pc, #284]	; (86204 <_malloc_r+0x400>)
   860e6:	4555      	cmp	r5, sl
   860e8:	6841      	ldr	r1, [r0, #4]
   860ea:	4a45      	ldr	r2, [pc, #276]	; (86200 <_malloc_r+0x3fc>)
   860ec:	eb08 0301 	add.w	r3, r8, r1
   860f0:	6043      	str	r3, [r0, #4]
   860f2:	d107      	bne.n	86104 <_malloc_r+0x300>
   860f4:	0529      	lsls	r1, r5, #20
   860f6:	d105      	bne.n	86104 <_malloc_r+0x300>
   860f8:	6895      	ldr	r5, [r2, #8]
   860fa:	44c8      	add	r8, r9
   860fc:	f048 0001 	orr.w	r0, r8, #1
   86100:	6068      	str	r0, [r5, #4]
   86102:	e051      	b.n	861a8 <_malloc_r+0x3a4>
   86104:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   86108:	1c42      	adds	r2, r0, #1
   8610a:	d103      	bne.n	86114 <_malloc_r+0x310>
   8610c:	4a3c      	ldr	r2, [pc, #240]	; (86200 <_malloc_r+0x3fc>)
   8610e:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
   86112:	e005      	b.n	86120 <_malloc_r+0x31c>
   86114:	ebca 0a05 	rsb	sl, sl, r5
   86118:	eb03 010a 	add.w	r1, r3, sl
   8611c:	4b39      	ldr	r3, [pc, #228]	; (86204 <_malloc_r+0x400>)
   8611e:	6059      	str	r1, [r3, #4]
   86120:	f015 0007 	ands.w	r0, r5, #7
   86124:	bf1c      	itt	ne
   86126:	f1c0 0008 	rsbne	r0, r0, #8
   8612a:	182d      	addne	r5, r5, r0
   8612c:	eb05 0c08 	add.w	ip, r5, r8
   86130:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   86134:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
   86138:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
   8613c:	4641      	mov	r1, r8
   8613e:	4630      	mov	r0, r6
   86140:	f000 f9fa 	bl	86538 <_sbrk_r>
   86144:	4a2f      	ldr	r2, [pc, #188]	; (86204 <_malloc_r+0x400>)
   86146:	1c43      	adds	r3, r0, #1
   86148:	6853      	ldr	r3, [r2, #4]
   8614a:	bf08      	it	eq
   8614c:	f04f 0800 	moveq.w	r8, #0
   86150:	eb08 0103 	add.w	r1, r8, r3
   86154:	bf08      	it	eq
   86156:	4628      	moveq	r0, r5
   86158:	6051      	str	r1, [r2, #4]
   8615a:	1b40      	subs	r0, r0, r5
   8615c:	4a28      	ldr	r2, [pc, #160]	; (86200 <_malloc_r+0x3fc>)
   8615e:	eb00 0308 	add.w	r3, r0, r8
   86162:	f043 0101 	orr.w	r1, r3, #1
   86166:	4297      	cmp	r7, r2
   86168:	6095      	str	r5, [r2, #8]
   8616a:	6069      	str	r1, [r5, #4]
   8616c:	d01c      	beq.n	861a8 <_malloc_r+0x3a4>
   8616e:	f1b9 0f0f 	cmp.w	r9, #15
   86172:	d802      	bhi.n	8617a <_malloc_r+0x376>
   86174:	2201      	movs	r2, #1
   86176:	606a      	str	r2, [r5, #4]
   86178:	e021      	b.n	861be <_malloc_r+0x3ba>
   8617a:	687d      	ldr	r5, [r7, #4]
   8617c:	f1a9 090c 	sub.w	r9, r9, #12
   86180:	f029 0907 	bic.w	r9, r9, #7
   86184:	f005 0201 	and.w	r2, r5, #1
   86188:	2105      	movs	r1, #5
   8618a:	eb07 0309 	add.w	r3, r7, r9
   8618e:	ea49 0002 	orr.w	r0, r9, r2
   86192:	f1b9 0f0f 	cmp.w	r9, #15
   86196:	6078      	str	r0, [r7, #4]
   86198:	6059      	str	r1, [r3, #4]
   8619a:	6099      	str	r1, [r3, #8]
   8619c:	d904      	bls.n	861a8 <_malloc_r+0x3a4>
   8619e:	4630      	mov	r0, r6
   861a0:	f107 0108 	add.w	r1, r7, #8
   861a4:	f7ff fb1a 	bl	857dc <_free_r>
   861a8:	4a16      	ldr	r2, [pc, #88]	; (86204 <_malloc_r+0x400>)
   861aa:	6853      	ldr	r3, [r2, #4]
   861ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   861ae:	6b15      	ldr	r5, [r2, #48]	; 0x30
   861b0:	428b      	cmp	r3, r1
   861b2:	bf88      	it	hi
   861b4:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   861b6:	42ab      	cmp	r3, r5
   861b8:	bf84      	itt	hi
   861ba:	4d12      	ldrhi	r5, [pc, #72]	; (86204 <_malloc_r+0x400>)
   861bc:	632b      	strhi	r3, [r5, #48]	; 0x30
   861be:	4810      	ldr	r0, [pc, #64]	; (86200 <_malloc_r+0x3fc>)
   861c0:	6882      	ldr	r2, [r0, #8]
   861c2:	6853      	ldr	r3, [r2, #4]
   861c4:	f023 0103 	bic.w	r1, r3, #3
   861c8:	42a1      	cmp	r1, r4
   861ca:	ebc4 0001 	rsb	r0, r4, r1
   861ce:	d301      	bcc.n	861d4 <_malloc_r+0x3d0>
   861d0:	280f      	cmp	r0, #15
   861d2:	dc04      	bgt.n	861de <_malloc_r+0x3da>
   861d4:	4630      	mov	r0, r6
   861d6:	f000 f840 	bl	8625a <__malloc_unlock>
   861da:	2500      	movs	r5, #0
   861dc:	e00d      	b.n	861fa <_malloc_r+0x3f6>
   861de:	4a08      	ldr	r2, [pc, #32]	; (86200 <_malloc_r+0x3fc>)
   861e0:	f044 0301 	orr.w	r3, r4, #1
   861e4:	6895      	ldr	r5, [r2, #8]
   861e6:	f040 0101 	orr.w	r1, r0, #1
   861ea:	192c      	adds	r4, r5, r4
   861ec:	606b      	str	r3, [r5, #4]
   861ee:	6094      	str	r4, [r2, #8]
   861f0:	6061      	str	r1, [r4, #4]
   861f2:	4630      	mov	r0, r6
   861f4:	f000 f831 	bl	8625a <__malloc_unlock>
   861f8:	3508      	adds	r5, #8
   861fa:	4628      	mov	r0, r5
   861fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86200:	200704bc 	.word	0x200704bc
   86204:	20078bec 	.word	0x20078bec

00086208 <memchr>:
   86208:	b510      	push	{r4, lr}
   8620a:	b2c9      	uxtb	r1, r1
   8620c:	4603      	mov	r3, r0
   8620e:	1882      	adds	r2, r0, r2
   86210:	4293      	cmp	r3, r2
   86212:	4618      	mov	r0, r3
   86214:	d004      	beq.n	86220 <memchr+0x18>
   86216:	7804      	ldrb	r4, [r0, #0]
   86218:	3301      	adds	r3, #1
   8621a:	428c      	cmp	r4, r1
   8621c:	d1f8      	bne.n	86210 <memchr+0x8>
   8621e:	e000      	b.n	86222 <memchr+0x1a>
   86220:	2000      	movs	r0, #0
   86222:	bd10      	pop	{r4, pc}

00086224 <memmove>:
   86224:	4281      	cmp	r1, r0
   86226:	b570      	push	{r4, r5, r6, lr}
   86228:	d20e      	bcs.n	86248 <memmove+0x24>
   8622a:	188c      	adds	r4, r1, r2
   8622c:	42a0      	cmp	r0, r4
   8622e:	d20b      	bcs.n	86248 <memmove+0x24>
   86230:	1885      	adds	r5, r0, r2
   86232:	4613      	mov	r3, r2
   86234:	f113 33ff 	adds.w	r3, r3, #4294967295
   86238:	d305      	bcc.n	86246 <memmove+0x22>
   8623a:	4251      	negs	r1, r2
   8623c:	1866      	adds	r6, r4, r1
   8623e:	5cf6      	ldrb	r6, [r6, r3]
   86240:	1869      	adds	r1, r5, r1
   86242:	54ce      	strb	r6, [r1, r3]
   86244:	e7f6      	b.n	86234 <memmove+0x10>
   86246:	bd70      	pop	{r4, r5, r6, pc}
   86248:	2300      	movs	r3, #0
   8624a:	4293      	cmp	r3, r2
   8624c:	d003      	beq.n	86256 <memmove+0x32>
   8624e:	5ccc      	ldrb	r4, [r1, r3]
   86250:	54c4      	strb	r4, [r0, r3]
   86252:	3301      	adds	r3, #1
   86254:	e7f9      	b.n	8624a <memmove+0x26>
   86256:	bd70      	pop	{r4, r5, r6, pc}

00086258 <__malloc_lock>:
   86258:	4770      	bx	lr

0008625a <__malloc_unlock>:
   8625a:	4770      	bx	lr

0008625c <_realloc_r>:
   8625c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86260:	4681      	mov	r9, r0
   86262:	4616      	mov	r6, r2
   86264:	460c      	mov	r4, r1
   86266:	b921      	cbnz	r1, 86272 <_realloc_r+0x16>
   86268:	4611      	mov	r1, r2
   8626a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8626e:	f7ff bdc9 	b.w	85e04 <_malloc_r>
   86272:	f7ff fff1 	bl	86258 <__malloc_lock>
   86276:	f106 070b 	add.w	r7, r6, #11
   8627a:	f854 5c04 	ldr.w	r5, [r4, #-4]
   8627e:	2f16      	cmp	r7, #22
   86280:	f1a4 0b08 	sub.w	fp, r4, #8
   86284:	f025 0803 	bic.w	r8, r5, #3
   86288:	d903      	bls.n	86292 <_realloc_r+0x36>
   8628a:	f037 0707 	bics.w	r7, r7, #7
   8628e:	d501      	bpl.n	86294 <_realloc_r+0x38>
   86290:	e002      	b.n	86298 <_realloc_r+0x3c>
   86292:	2710      	movs	r7, #16
   86294:	42b7      	cmp	r7, r6
   86296:	d204      	bcs.n	862a2 <_realloc_r+0x46>
   86298:	200c      	movs	r0, #12
   8629a:	f8c9 0000 	str.w	r0, [r9]
   8629e:	2600      	movs	r6, #0
   862a0:	e145      	b.n	8652e <_realloc_r+0x2d2>
   862a2:	45b8      	cmp	r8, r7
   862a4:	f280 811a 	bge.w	864dc <_realloc_r+0x280>
   862a8:	4aa2      	ldr	r2, [pc, #648]	; (86534 <_realloc_r+0x2d8>)
   862aa:	eb0b 0308 	add.w	r3, fp, r8
   862ae:	6891      	ldr	r1, [r2, #8]
   862b0:	428b      	cmp	r3, r1
   862b2:	d006      	beq.n	862c2 <_realloc_r+0x66>
   862b4:	6858      	ldr	r0, [r3, #4]
   862b6:	f020 0201 	bic.w	r2, r0, #1
   862ba:	1898      	adds	r0, r3, r2
   862bc:	6842      	ldr	r2, [r0, #4]
   862be:	07d0      	lsls	r0, r2, #31
   862c0:	d426      	bmi.n	86310 <_realloc_r+0xb4>
   862c2:	685a      	ldr	r2, [r3, #4]
   862c4:	428b      	cmp	r3, r1
   862c6:	f022 0003 	bic.w	r0, r2, #3
   862ca:	eb00 0a08 	add.w	sl, r0, r8
   862ce:	d118      	bne.n	86302 <_realloc_r+0xa6>
   862d0:	f107 0210 	add.w	r2, r7, #16
   862d4:	4592      	cmp	sl, r2
   862d6:	db1d      	blt.n	86314 <_realloc_r+0xb8>
   862d8:	ebc7 0a0a 	rsb	sl, r7, sl
   862dc:	eb0b 0507 	add.w	r5, fp, r7
   862e0:	f04a 0101 	orr.w	r1, sl, #1
   862e4:	6069      	str	r1, [r5, #4]
   862e6:	f854 2c04 	ldr.w	r2, [r4, #-4]
   862ea:	4e92      	ldr	r6, [pc, #584]	; (86534 <_realloc_r+0x2d8>)
   862ec:	f002 0301 	and.w	r3, r2, #1
   862f0:	431f      	orrs	r7, r3
   862f2:	60b5      	str	r5, [r6, #8]
   862f4:	f844 7c04 	str.w	r7, [r4, #-4]
   862f8:	4648      	mov	r0, r9
   862fa:	f7ff ffae 	bl	8625a <__malloc_unlock>
   862fe:	4626      	mov	r6, r4
   86300:	e115      	b.n	8652e <_realloc_r+0x2d2>
   86302:	45ba      	cmp	sl, r7
   86304:	db06      	blt.n	86314 <_realloc_r+0xb8>
   86306:	68dd      	ldr	r5, [r3, #12]
   86308:	689e      	ldr	r6, [r3, #8]
   8630a:	60f5      	str	r5, [r6, #12]
   8630c:	60ae      	str	r6, [r5, #8]
   8630e:	e0e6      	b.n	864de <_realloc_r+0x282>
   86310:	2000      	movs	r0, #0
   86312:	4603      	mov	r3, r0
   86314:	07ea      	lsls	r2, r5, #31
   86316:	f100 8091 	bmi.w	8643c <_realloc_r+0x1e0>
   8631a:	f854 5c08 	ldr.w	r5, [r4, #-8]
   8631e:	ebc5 050b 	rsb	r5, r5, fp
   86322:	686a      	ldr	r2, [r5, #4]
   86324:	f022 0203 	bic.w	r2, r2, #3
   86328:	2b00      	cmp	r3, #0
   8632a:	d051      	beq.n	863d0 <_realloc_r+0x174>
   8632c:	eb02 0a08 	add.w	sl, r2, r8
   86330:	428b      	cmp	r3, r1
   86332:	4482      	add	sl, r0
   86334:	d145      	bne.n	863c2 <_realloc_r+0x166>
   86336:	f107 0310 	add.w	r3, r7, #16
   8633a:	459a      	cmp	sl, r3
   8633c:	db48      	blt.n	863d0 <_realloc_r+0x174>
   8633e:	462e      	mov	r6, r5
   86340:	68e9      	ldr	r1, [r5, #12]
   86342:	f856 3f08 	ldr.w	r3, [r6, #8]!
   86346:	f1a8 0204 	sub.w	r2, r8, #4
   8634a:	2a24      	cmp	r2, #36	; 0x24
   8634c:	60d9      	str	r1, [r3, #12]
   8634e:	608b      	str	r3, [r1, #8]
   86350:	d825      	bhi.n	8639e <_realloc_r+0x142>
   86352:	2a13      	cmp	r2, #19
   86354:	d91b      	bls.n	8638e <_realloc_r+0x132>
   86356:	6821      	ldr	r1, [r4, #0]
   86358:	2a1b      	cmp	r2, #27
   8635a:	60a9      	str	r1, [r5, #8]
   8635c:	6863      	ldr	r3, [r4, #4]
   8635e:	60eb      	str	r3, [r5, #12]
   86360:	d803      	bhi.n	8636a <_realloc_r+0x10e>
   86362:	f105 0010 	add.w	r0, r5, #16
   86366:	3408      	adds	r4, #8
   86368:	e012      	b.n	86390 <_realloc_r+0x134>
   8636a:	68a0      	ldr	r0, [r4, #8]
   8636c:	2a24      	cmp	r2, #36	; 0x24
   8636e:	6128      	str	r0, [r5, #16]
   86370:	68e1      	ldr	r1, [r4, #12]
   86372:	6169      	str	r1, [r5, #20]
   86374:	d003      	beq.n	8637e <_realloc_r+0x122>
   86376:	f105 0018 	add.w	r0, r5, #24
   8637a:	3410      	adds	r4, #16
   8637c:	e008      	b.n	86390 <_realloc_r+0x134>
   8637e:	6922      	ldr	r2, [r4, #16]
   86380:	f105 0020 	add.w	r0, r5, #32
   86384:	61aa      	str	r2, [r5, #24]
   86386:	6963      	ldr	r3, [r4, #20]
   86388:	3418      	adds	r4, #24
   8638a:	61eb      	str	r3, [r5, #28]
   8638c:	e000      	b.n	86390 <_realloc_r+0x134>
   8638e:	4630      	mov	r0, r6
   86390:	6821      	ldr	r1, [r4, #0]
   86392:	6001      	str	r1, [r0, #0]
   86394:	6862      	ldr	r2, [r4, #4]
   86396:	6042      	str	r2, [r0, #4]
   86398:	68a3      	ldr	r3, [r4, #8]
   8639a:	6083      	str	r3, [r0, #8]
   8639c:	e003      	b.n	863a6 <_realloc_r+0x14a>
   8639e:	4630      	mov	r0, r6
   863a0:	4621      	mov	r1, r4
   863a2:	f7ff ff3f 	bl	86224 <memmove>
   863a6:	ebc7 0a0a 	rsb	sl, r7, sl
   863aa:	19e8      	adds	r0, r5, r7
   863ac:	f04a 0201 	orr.w	r2, sl, #1
   863b0:	6042      	str	r2, [r0, #4]
   863b2:	686b      	ldr	r3, [r5, #4]
   863b4:	495f      	ldr	r1, [pc, #380]	; (86534 <_realloc_r+0x2d8>)
   863b6:	6088      	str	r0, [r1, #8]
   863b8:	f003 0001 	and.w	r0, r3, #1
   863bc:	4307      	orrs	r7, r0
   863be:	606f      	str	r7, [r5, #4]
   863c0:	e088      	b.n	864d4 <_realloc_r+0x278>
   863c2:	45ba      	cmp	sl, r7
   863c4:	db04      	blt.n	863d0 <_realloc_r+0x174>
   863c6:	68d9      	ldr	r1, [r3, #12]
   863c8:	6898      	ldr	r0, [r3, #8]
   863ca:	60c1      	str	r1, [r0, #12]
   863cc:	6088      	str	r0, [r1, #8]
   863ce:	e003      	b.n	863d8 <_realloc_r+0x17c>
   863d0:	eb02 0a08 	add.w	sl, r2, r8
   863d4:	45ba      	cmp	sl, r7
   863d6:	db31      	blt.n	8643c <_realloc_r+0x1e0>
   863d8:	4628      	mov	r0, r5
   863da:	68eb      	ldr	r3, [r5, #12]
   863dc:	f850 1f08 	ldr.w	r1, [r0, #8]!
   863e0:	f1a8 0204 	sub.w	r2, r8, #4
   863e4:	2a24      	cmp	r2, #36	; 0x24
   863e6:	60cb      	str	r3, [r1, #12]
   863e8:	6099      	str	r1, [r3, #8]
   863ea:	d823      	bhi.n	86434 <_realloc_r+0x1d8>
   863ec:	2a13      	cmp	r2, #19
   863ee:	d91a      	bls.n	86426 <_realloc_r+0x1ca>
   863f0:	6820      	ldr	r0, [r4, #0]
   863f2:	2a1b      	cmp	r2, #27
   863f4:	60a8      	str	r0, [r5, #8]
   863f6:	6866      	ldr	r6, [r4, #4]
   863f8:	60ee      	str	r6, [r5, #12]
   863fa:	d803      	bhi.n	86404 <_realloc_r+0x1a8>
   863fc:	f105 0010 	add.w	r0, r5, #16
   86400:	3408      	adds	r4, #8
   86402:	e010      	b.n	86426 <_realloc_r+0x1ca>
   86404:	68a3      	ldr	r3, [r4, #8]
   86406:	2a24      	cmp	r2, #36	; 0x24
   86408:	612b      	str	r3, [r5, #16]
   8640a:	68e1      	ldr	r1, [r4, #12]
   8640c:	6169      	str	r1, [r5, #20]
   8640e:	d003      	beq.n	86418 <_realloc_r+0x1bc>
   86410:	f105 0018 	add.w	r0, r5, #24
   86414:	3410      	adds	r4, #16
   86416:	e006      	b.n	86426 <_realloc_r+0x1ca>
   86418:	6922      	ldr	r2, [r4, #16]
   8641a:	61aa      	str	r2, [r5, #24]
   8641c:	6960      	ldr	r0, [r4, #20]
   8641e:	3418      	adds	r4, #24
   86420:	61e8      	str	r0, [r5, #28]
   86422:	f105 0020 	add.w	r0, r5, #32
   86426:	6826      	ldr	r6, [r4, #0]
   86428:	6006      	str	r6, [r0, #0]
   8642a:	6863      	ldr	r3, [r4, #4]
   8642c:	6043      	str	r3, [r0, #4]
   8642e:	68a1      	ldr	r1, [r4, #8]
   86430:	6081      	str	r1, [r0, #8]
   86432:	e055      	b.n	864e0 <_realloc_r+0x284>
   86434:	4621      	mov	r1, r4
   86436:	f7ff fef5 	bl	86224 <memmove>
   8643a:	e051      	b.n	864e0 <_realloc_r+0x284>
   8643c:	4631      	mov	r1, r6
   8643e:	4648      	mov	r0, r9
   86440:	f7ff fce0 	bl	85e04 <_malloc_r>
   86444:	4606      	mov	r6, r0
   86446:	2800      	cmp	r0, #0
   86448:	d044      	beq.n	864d4 <_realloc_r+0x278>
   8644a:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8644e:	f1a0 0208 	sub.w	r2, r0, #8
   86452:	f021 0301 	bic.w	r3, r1, #1
   86456:	eb0b 0103 	add.w	r1, fp, r3
   8645a:	428a      	cmp	r2, r1
   8645c:	d106      	bne.n	8646c <_realloc_r+0x210>
   8645e:	f850 6c04 	ldr.w	r6, [r0, #-4]
   86462:	f026 0503 	bic.w	r5, r6, #3
   86466:	eb05 0a08 	add.w	sl, r5, r8
   8646a:	e038      	b.n	864de <_realloc_r+0x282>
   8646c:	f1a8 0204 	sub.w	r2, r8, #4
   86470:	2a24      	cmp	r2, #36	; 0x24
   86472:	d828      	bhi.n	864c6 <_realloc_r+0x26a>
   86474:	2a13      	cmp	r2, #19
   86476:	d91e      	bls.n	864b6 <_realloc_r+0x25a>
   86478:	6823      	ldr	r3, [r4, #0]
   8647a:	2a1b      	cmp	r2, #27
   8647c:	6003      	str	r3, [r0, #0]
   8647e:	6861      	ldr	r1, [r4, #4]
   86480:	6041      	str	r1, [r0, #4]
   86482:	d804      	bhi.n	8648e <_realloc_r+0x232>
   86484:	f100 0008 	add.w	r0, r0, #8
   86488:	f104 0208 	add.w	r2, r4, #8
   8648c:	e014      	b.n	864b8 <_realloc_r+0x25c>
   8648e:	68a0      	ldr	r0, [r4, #8]
   86490:	2a24      	cmp	r2, #36	; 0x24
   86492:	60b0      	str	r0, [r6, #8]
   86494:	68e3      	ldr	r3, [r4, #12]
   86496:	60f3      	str	r3, [r6, #12]
   86498:	d004      	beq.n	864a4 <_realloc_r+0x248>
   8649a:	f106 0010 	add.w	r0, r6, #16
   8649e:	f104 0210 	add.w	r2, r4, #16
   864a2:	e009      	b.n	864b8 <_realloc_r+0x25c>
   864a4:	6922      	ldr	r2, [r4, #16]
   864a6:	f106 0018 	add.w	r0, r6, #24
   864aa:	6132      	str	r2, [r6, #16]
   864ac:	6961      	ldr	r1, [r4, #20]
   864ae:	f104 0218 	add.w	r2, r4, #24
   864b2:	6171      	str	r1, [r6, #20]
   864b4:	e000      	b.n	864b8 <_realloc_r+0x25c>
   864b6:	4622      	mov	r2, r4
   864b8:	6813      	ldr	r3, [r2, #0]
   864ba:	6003      	str	r3, [r0, #0]
   864bc:	6851      	ldr	r1, [r2, #4]
   864be:	6041      	str	r1, [r0, #4]
   864c0:	6892      	ldr	r2, [r2, #8]
   864c2:	6082      	str	r2, [r0, #8]
   864c4:	e002      	b.n	864cc <_realloc_r+0x270>
   864c6:	4621      	mov	r1, r4
   864c8:	f7ff feac 	bl	86224 <memmove>
   864cc:	4648      	mov	r0, r9
   864ce:	4621      	mov	r1, r4
   864d0:	f7ff f984 	bl	857dc <_free_r>
   864d4:	4648      	mov	r0, r9
   864d6:	f7ff fec0 	bl	8625a <__malloc_unlock>
   864da:	e028      	b.n	8652e <_realloc_r+0x2d2>
   864dc:	46c2      	mov	sl, r8
   864de:	465d      	mov	r5, fp
   864e0:	ebc7 000a 	rsb	r0, r7, sl
   864e4:	280f      	cmp	r0, #15
   864e6:	686a      	ldr	r2, [r5, #4]
   864e8:	d911      	bls.n	8650e <_realloc_r+0x2b2>
   864ea:	f002 0601 	and.w	r6, r2, #1
   864ee:	19e9      	adds	r1, r5, r7
   864f0:	f040 0301 	orr.w	r3, r0, #1
   864f4:	4337      	orrs	r7, r6
   864f6:	606f      	str	r7, [r5, #4]
   864f8:	1808      	adds	r0, r1, r0
   864fa:	604b      	str	r3, [r1, #4]
   864fc:	6842      	ldr	r2, [r0, #4]
   864fe:	3108      	adds	r1, #8
   86500:	f042 0601 	orr.w	r6, r2, #1
   86504:	6046      	str	r6, [r0, #4]
   86506:	4648      	mov	r0, r9
   86508:	f7ff f968 	bl	857dc <_free_r>
   8650c:	e00a      	b.n	86524 <_realloc_r+0x2c8>
   8650e:	f002 0601 	and.w	r6, r2, #1
   86512:	ea4a 0306 	orr.w	r3, sl, r6
   86516:	606b      	str	r3, [r5, #4]
   86518:	eb05 010a 	add.w	r1, r5, sl
   8651c:	6848      	ldr	r0, [r1, #4]
   8651e:	f040 0201 	orr.w	r2, r0, #1
   86522:	604a      	str	r2, [r1, #4]
   86524:	4648      	mov	r0, r9
   86526:	f7ff fe98 	bl	8625a <__malloc_unlock>
   8652a:	f105 0608 	add.w	r6, r5, #8
   8652e:	4630      	mov	r0, r6
   86530:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86534:	200704bc 	.word	0x200704bc

00086538 <_sbrk_r>:
   86538:	b538      	push	{r3, r4, r5, lr}
   8653a:	4c06      	ldr	r4, [pc, #24]	; (86554 <_sbrk_r+0x1c>)
   8653c:	2300      	movs	r3, #0
   8653e:	4605      	mov	r5, r0
   86540:	4608      	mov	r0, r1
   86542:	6023      	str	r3, [r4, #0]
   86544:	f7fe f82c 	bl	845a0 <_sbrk>
   86548:	1c43      	adds	r3, r0, #1
   8654a:	d102      	bne.n	86552 <_sbrk_r+0x1a>
   8654c:	6821      	ldr	r1, [r4, #0]
   8654e:	b101      	cbz	r1, 86552 <_sbrk_r+0x1a>
   86550:	6029      	str	r1, [r5, #0]
   86552:	bd38      	pop	{r3, r4, r5, pc}
   86554:	20078ca8 	.word	0x20078ca8

00086558 <__sread>:
   86558:	b510      	push	{r4, lr}
   8655a:	460c      	mov	r4, r1
   8655c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86560:	f000 f942 	bl	867e8 <_read_r>
   86564:	2800      	cmp	r0, #0
   86566:	db03      	blt.n	86570 <__sread+0x18>
   86568:	6d22      	ldr	r2, [r4, #80]	; 0x50
   8656a:	1813      	adds	r3, r2, r0
   8656c:	6523      	str	r3, [r4, #80]	; 0x50
   8656e:	bd10      	pop	{r4, pc}
   86570:	89a3      	ldrh	r3, [r4, #12]
   86572:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
   86576:	81a1      	strh	r1, [r4, #12]
   86578:	bd10      	pop	{r4, pc}

0008657a <__seofread>:
   8657a:	2000      	movs	r0, #0
   8657c:	4770      	bx	lr

0008657e <__swrite>:
   8657e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86582:	461d      	mov	r5, r3
   86584:	898b      	ldrh	r3, [r1, #12]
   86586:	460c      	mov	r4, r1
   86588:	f403 7180 	and.w	r1, r3, #256	; 0x100
   8658c:	4616      	mov	r6, r2
   8658e:	b20a      	sxth	r2, r1
   86590:	4607      	mov	r7, r0
   86592:	b12a      	cbz	r2, 865a0 <__swrite+0x22>
   86594:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86598:	2200      	movs	r2, #0
   8659a:	2302      	movs	r3, #2
   8659c:	f000 f912 	bl	867c4 <_lseek_r>
   865a0:	89a0      	ldrh	r0, [r4, #12]
   865a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   865a6:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
   865aa:	81a3      	strh	r3, [r4, #12]
   865ac:	4638      	mov	r0, r7
   865ae:	4632      	mov	r2, r6
   865b0:	462b      	mov	r3, r5
   865b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   865b6:	f000 b877 	b.w	866a8 <_write_r>

000865ba <__sseek>:
   865ba:	b510      	push	{r4, lr}
   865bc:	460c      	mov	r4, r1
   865be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   865c2:	f000 f8ff 	bl	867c4 <_lseek_r>
   865c6:	1c43      	adds	r3, r0, #1
   865c8:	89a3      	ldrh	r3, [r4, #12]
   865ca:	d103      	bne.n	865d4 <__sseek+0x1a>
   865cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
   865d0:	81a2      	strh	r2, [r4, #12]
   865d2:	bd10      	pop	{r4, pc}
   865d4:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
   865d8:	81a1      	strh	r1, [r4, #12]
   865da:	6520      	str	r0, [r4, #80]	; 0x50
   865dc:	bd10      	pop	{r4, pc}

000865de <__sclose>:
   865de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   865e2:	f000 b873 	b.w	866cc <_close_r>

000865e6 <strcmp>:
   865e6:	f810 2b01 	ldrb.w	r2, [r0], #1
   865ea:	f811 3b01 	ldrb.w	r3, [r1], #1
   865ee:	2a01      	cmp	r2, #1
   865f0:	bf28      	it	cs
   865f2:	429a      	cmpcs	r2, r3
   865f4:	d0f7      	beq.n	865e6 <strcmp>
   865f6:	eba2 0003 	sub.w	r0, r2, r3
   865fa:	4770      	bx	lr

000865fc <_wcrtomb_r>:
   865fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86600:	461d      	mov	r5, r3
   86602:	4b10      	ldr	r3, [pc, #64]	; (86644 <_wcrtomb_r+0x48>)
   86604:	b086      	sub	sp, #24
   86606:	4604      	mov	r4, r0
   86608:	4690      	mov	r8, r2
   8660a:	460e      	mov	r6, r1
   8660c:	681f      	ldr	r7, [r3, #0]
   8660e:	b939      	cbnz	r1, 86620 <_wcrtomb_r+0x24>
   86610:	f7ff fb5a 	bl	85cc8 <__locale_charset>
   86614:	9500      	str	r5, [sp, #0]
   86616:	4603      	mov	r3, r0
   86618:	a903      	add	r1, sp, #12
   8661a:	4620      	mov	r0, r4
   8661c:	4632      	mov	r2, r6
   8661e:	e006      	b.n	8662e <_wcrtomb_r+0x32>
   86620:	f7ff fb52 	bl	85cc8 <__locale_charset>
   86624:	9500      	str	r5, [sp, #0]
   86626:	4603      	mov	r3, r0
   86628:	4631      	mov	r1, r6
   8662a:	4620      	mov	r0, r4
   8662c:	4642      	mov	r2, r8
   8662e:	47b8      	blx	r7
   86630:	1c43      	adds	r3, r0, #1
   86632:	d103      	bne.n	8663c <_wcrtomb_r+0x40>
   86634:	2100      	movs	r1, #0
   86636:	228a      	movs	r2, #138	; 0x8a
   86638:	6029      	str	r1, [r5, #0]
   8663a:	6022      	str	r2, [r4, #0]
   8663c:	b006      	add	sp, #24
   8663e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86642:	bf00      	nop
   86644:	200708cc 	.word	0x200708cc

00086648 <wcrtomb>:
   86648:	b530      	push	{r4, r5, lr}
   8664a:	4613      	mov	r3, r2
   8664c:	4a04      	ldr	r2, [pc, #16]	; (86660 <wcrtomb+0x18>)
   8664e:	4605      	mov	r5, r0
   86650:	460c      	mov	r4, r1
   86652:	6810      	ldr	r0, [r2, #0]
   86654:	4629      	mov	r1, r5
   86656:	4622      	mov	r2, r4
   86658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8665c:	f7ff bfce 	b.w	865fc <_wcrtomb_r>
   86660:	20070010 	.word	0x20070010

00086664 <__ascii_wctomb>:
   86664:	b149      	cbz	r1, 8667a <__ascii_wctomb+0x16>
   86666:	2aff      	cmp	r2, #255	; 0xff
   86668:	d904      	bls.n	86674 <__ascii_wctomb+0x10>
   8666a:	238a      	movs	r3, #138	; 0x8a
   8666c:	6003      	str	r3, [r0, #0]
   8666e:	f04f 30ff 	mov.w	r0, #4294967295
   86672:	4770      	bx	lr
   86674:	700a      	strb	r2, [r1, #0]
   86676:	2001      	movs	r0, #1
   86678:	4770      	bx	lr
   8667a:	4608      	mov	r0, r1
   8667c:	4770      	bx	lr

0008667e <_wctomb_r>:
   8667e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   86682:	4698      	mov	r8, r3
   86684:	4b07      	ldr	r3, [pc, #28]	; (866a4 <_wctomb_r+0x26>)
   86686:	4605      	mov	r5, r0
   86688:	460f      	mov	r7, r1
   8668a:	4616      	mov	r6, r2
   8668c:	681c      	ldr	r4, [r3, #0]
   8668e:	f7ff fb1b 	bl	85cc8 <__locale_charset>
   86692:	f8cd 8000 	str.w	r8, [sp]
   86696:	4603      	mov	r3, r0
   86698:	4639      	mov	r1, r7
   8669a:	4628      	mov	r0, r5
   8669c:	4632      	mov	r2, r6
   8669e:	47a0      	blx	r4
   866a0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   866a4:	200708cc 	.word	0x200708cc

000866a8 <_write_r>:
   866a8:	b538      	push	{r3, r4, r5, lr}
   866aa:	4c07      	ldr	r4, [pc, #28]	; (866c8 <_write_r+0x20>)
   866ac:	4605      	mov	r5, r0
   866ae:	2000      	movs	r0, #0
   866b0:	6020      	str	r0, [r4, #0]
   866b2:	4608      	mov	r0, r1
   866b4:	4611      	mov	r1, r2
   866b6:	461a      	mov	r2, r3
   866b8:	f7f9 fdb8 	bl	8022c <_write>
   866bc:	1c43      	adds	r3, r0, #1
   866be:	d102      	bne.n	866c6 <_write_r+0x1e>
   866c0:	6823      	ldr	r3, [r4, #0]
   866c2:	b103      	cbz	r3, 866c6 <_write_r+0x1e>
   866c4:	602b      	str	r3, [r5, #0]
   866c6:	bd38      	pop	{r3, r4, r5, pc}
   866c8:	20078ca8 	.word	0x20078ca8

000866cc <_close_r>:
   866cc:	b538      	push	{r3, r4, r5, lr}
   866ce:	4c06      	ldr	r4, [pc, #24]	; (866e8 <_close_r+0x1c>)
   866d0:	2300      	movs	r3, #0
   866d2:	4605      	mov	r5, r0
   866d4:	4608      	mov	r0, r1
   866d6:	6023      	str	r3, [r4, #0]
   866d8:	f7fd ff88 	bl	845ec <_close>
   866dc:	1c43      	adds	r3, r0, #1
   866de:	d102      	bne.n	866e6 <_close_r+0x1a>
   866e0:	6821      	ldr	r1, [r4, #0]
   866e2:	b101      	cbz	r1, 866e6 <_close_r+0x1a>
   866e4:	6029      	str	r1, [r5, #0]
   866e6:	bd38      	pop	{r3, r4, r5, pc}
   866e8:	20078ca8 	.word	0x20078ca8

000866ec <_fclose_r>:
   866ec:	b570      	push	{r4, r5, r6, lr}
   866ee:	4605      	mov	r5, r0
   866f0:	460c      	mov	r4, r1
   866f2:	2900      	cmp	r1, #0
   866f4:	d039      	beq.n	8676a <_fclose_r+0x7e>
   866f6:	f7fe ff97 	bl	85628 <__sfp_lock_acquire>
   866fa:	b125      	cbz	r5, 86706 <_fclose_r+0x1a>
   866fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   866fe:	b913      	cbnz	r3, 86706 <_fclose_r+0x1a>
   86700:	4628      	mov	r0, r5
   86702:	f7fe ff2d 	bl	85560 <__sinit>
   86706:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   8670a:	b35e      	cbz	r6, 86764 <_fclose_r+0x78>
   8670c:	4628      	mov	r0, r5
   8670e:	4621      	mov	r1, r4
   86710:	f7fe fe34 	bl	8537c <_fflush_r>
   86714:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   86716:	4606      	mov	r6, r0
   86718:	b13a      	cbz	r2, 8672a <_fclose_r+0x3e>
   8671a:	4628      	mov	r0, r5
   8671c:	69e1      	ldr	r1, [r4, #28]
   8671e:	4790      	blx	r2
   86720:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   86724:	bf28      	it	cs
   86726:	f04f 36ff 	movcs.w	r6, #4294967295
   8672a:	89a0      	ldrh	r0, [r4, #12]
   8672c:	f000 0180 	and.w	r1, r0, #128	; 0x80
   86730:	b20b      	sxth	r3, r1
   86732:	b11b      	cbz	r3, 8673c <_fclose_r+0x50>
   86734:	4628      	mov	r0, r5
   86736:	6921      	ldr	r1, [r4, #16]
   86738:	f7ff f850 	bl	857dc <_free_r>
   8673c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8673e:	b141      	cbz	r1, 86752 <_fclose_r+0x66>
   86740:	f104 0240 	add.w	r2, r4, #64	; 0x40
   86744:	4291      	cmp	r1, r2
   86746:	d002      	beq.n	8674e <_fclose_r+0x62>
   86748:	4628      	mov	r0, r5
   8674a:	f7ff f847 	bl	857dc <_free_r>
   8674e:	2000      	movs	r0, #0
   86750:	6320      	str	r0, [r4, #48]	; 0x30
   86752:	6c61      	ldr	r1, [r4, #68]	; 0x44
   86754:	b121      	cbz	r1, 86760 <_fclose_r+0x74>
   86756:	4628      	mov	r0, r5
   86758:	f7ff f840 	bl	857dc <_free_r>
   8675c:	2100      	movs	r1, #0
   8675e:	6461      	str	r1, [r4, #68]	; 0x44
   86760:	2300      	movs	r3, #0
   86762:	81a3      	strh	r3, [r4, #12]
   86764:	f7fe ff61 	bl	8562a <__sfp_lock_release>
   86768:	e000      	b.n	8676c <_fclose_r+0x80>
   8676a:	460e      	mov	r6, r1
   8676c:	4630      	mov	r0, r6
   8676e:	bd70      	pop	{r4, r5, r6, pc}

00086770 <fclose>:
   86770:	4b02      	ldr	r3, [pc, #8]	; (8677c <fclose+0xc>)
   86772:	4601      	mov	r1, r0
   86774:	6818      	ldr	r0, [r3, #0]
   86776:	f7ff bfb9 	b.w	866ec <_fclose_r>
   8677a:	bf00      	nop
   8677c:	20070010 	.word	0x20070010

00086780 <_fstat_r>:
   86780:	b538      	push	{r3, r4, r5, lr}
   86782:	4c07      	ldr	r4, [pc, #28]	; (867a0 <_fstat_r+0x20>)
   86784:	2300      	movs	r3, #0
   86786:	4605      	mov	r5, r0
   86788:	4608      	mov	r0, r1
   8678a:	4611      	mov	r1, r2
   8678c:	6023      	str	r3, [r4, #0]
   8678e:	f7fd ff31 	bl	845f4 <_fstat>
   86792:	1c43      	adds	r3, r0, #1
   86794:	d102      	bne.n	8679c <_fstat_r+0x1c>
   86796:	6821      	ldr	r1, [r4, #0]
   86798:	b101      	cbz	r1, 8679c <_fstat_r+0x1c>
   8679a:	6029      	str	r1, [r5, #0]
   8679c:	bd38      	pop	{r3, r4, r5, pc}
   8679e:	bf00      	nop
   867a0:	20078ca8 	.word	0x20078ca8

000867a4 <_isatty_r>:
   867a4:	b538      	push	{r3, r4, r5, lr}
   867a6:	4c06      	ldr	r4, [pc, #24]	; (867c0 <_isatty_r+0x1c>)
   867a8:	2300      	movs	r3, #0
   867aa:	4605      	mov	r5, r0
   867ac:	4608      	mov	r0, r1
   867ae:	6023      	str	r3, [r4, #0]
   867b0:	f7fd ff26 	bl	84600 <_isatty>
   867b4:	1c43      	adds	r3, r0, #1
   867b6:	d102      	bne.n	867be <_isatty_r+0x1a>
   867b8:	6821      	ldr	r1, [r4, #0]
   867ba:	b101      	cbz	r1, 867be <_isatty_r+0x1a>
   867bc:	6029      	str	r1, [r5, #0]
   867be:	bd38      	pop	{r3, r4, r5, pc}
   867c0:	20078ca8 	.word	0x20078ca8

000867c4 <_lseek_r>:
   867c4:	b538      	push	{r3, r4, r5, lr}
   867c6:	4c07      	ldr	r4, [pc, #28]	; (867e4 <_lseek_r+0x20>)
   867c8:	4605      	mov	r5, r0
   867ca:	2000      	movs	r0, #0
   867cc:	6020      	str	r0, [r4, #0]
   867ce:	4608      	mov	r0, r1
   867d0:	4611      	mov	r1, r2
   867d2:	461a      	mov	r2, r3
   867d4:	f7fd ff18 	bl	84608 <_lseek>
   867d8:	1c43      	adds	r3, r0, #1
   867da:	d102      	bne.n	867e2 <_lseek_r+0x1e>
   867dc:	6823      	ldr	r3, [r4, #0]
   867de:	b103      	cbz	r3, 867e2 <_lseek_r+0x1e>
   867e0:	602b      	str	r3, [r5, #0]
   867e2:	bd38      	pop	{r3, r4, r5, pc}
   867e4:	20078ca8 	.word	0x20078ca8

000867e8 <_read_r>:
   867e8:	b538      	push	{r3, r4, r5, lr}
   867ea:	4c07      	ldr	r4, [pc, #28]	; (86808 <_read_r+0x20>)
   867ec:	4605      	mov	r5, r0
   867ee:	2000      	movs	r0, #0
   867f0:	6020      	str	r0, [r4, #0]
   867f2:	4608      	mov	r0, r1
   867f4:	4611      	mov	r1, r2
   867f6:	461a      	mov	r2, r3
   867f8:	f7f9 fcd4 	bl	801a4 <_read>
   867fc:	1c43      	adds	r3, r0, #1
   867fe:	d102      	bne.n	86806 <_read_r+0x1e>
   86800:	6823      	ldr	r3, [r4, #0]
   86802:	b103      	cbz	r3, 86806 <_read_r+0x1e>
   86804:	602b      	str	r3, [r5, #0]
   86806:	bd38      	pop	{r3, r4, r5, pc}
   86808:	20078ca8 	.word	0x20078ca8

0008680c <__aeabi_uldivmod>:
   8680c:	b94b      	cbnz	r3, 86822 <__aeabi_uldivmod+0x16>
   8680e:	b942      	cbnz	r2, 86822 <__aeabi_uldivmod+0x16>
   86810:	2900      	cmp	r1, #0
   86812:	bf08      	it	eq
   86814:	2800      	cmpeq	r0, #0
   86816:	d002      	beq.n	8681e <__aeabi_uldivmod+0x12>
   86818:	f04f 31ff 	mov.w	r1, #4294967295
   8681c:	4608      	mov	r0, r1
   8681e:	f000 b83b 	b.w	86898 <__aeabi_idiv0>
   86822:	b082      	sub	sp, #8
   86824:	46ec      	mov	ip, sp
   86826:	e92d 5000 	stmdb	sp!, {ip, lr}
   8682a:	f000 f81d 	bl	86868 <__gnu_uldivmod_helper>
   8682e:	f8dd e004 	ldr.w	lr, [sp, #4]
   86832:	b002      	add	sp, #8
   86834:	bc0c      	pop	{r2, r3}
   86836:	4770      	bx	lr

00086838 <__gnu_ldivmod_helper>:
   86838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8683c:	4616      	mov	r6, r2
   8683e:	4698      	mov	r8, r3
   86840:	4604      	mov	r4, r0
   86842:	460d      	mov	r5, r1
   86844:	f000 f82a 	bl	8689c <__divdi3>
   86848:	fb06 fc01 	mul.w	ip, r6, r1
   8684c:	fba6 2300 	umull	r2, r3, r6, r0
   86850:	fb00 c708 	mla	r7, r0, r8, ip
   86854:	18fb      	adds	r3, r7, r3
   86856:	1aa2      	subs	r2, r4, r2
   86858:	eb65 0303 	sbc.w	r3, r5, r3
   8685c:	9c06      	ldr	r4, [sp, #24]
   8685e:	e9c4 2300 	strd	r2, r3, [r4]
   86862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86866:	bf00      	nop

00086868 <__gnu_uldivmod_helper>:
   86868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8686c:	4690      	mov	r8, r2
   8686e:	4606      	mov	r6, r0
   86870:	460f      	mov	r7, r1
   86872:	461d      	mov	r5, r3
   86874:	f000 f970 	bl	86b58 <__udivdi3>
   86878:	fb00 f305 	mul.w	r3, r0, r5
   8687c:	fba0 4508 	umull	r4, r5, r0, r8
   86880:	fb08 3801 	mla	r8, r8, r1, r3
   86884:	9b06      	ldr	r3, [sp, #24]
   86886:	4445      	add	r5, r8
   86888:	1b34      	subs	r4, r6, r4
   8688a:	eb67 0505 	sbc.w	r5, r7, r5
   8688e:	e9c3 4500 	strd	r4, r5, [r3]
   86892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86896:	bf00      	nop

00086898 <__aeabi_idiv0>:
   86898:	4770      	bx	lr
   8689a:	bf00      	nop

0008689c <__divdi3>:
   8689c:	2900      	cmp	r1, #0
   8689e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   868a2:	461d      	mov	r5, r3
   868a4:	f2c0 809d 	blt.w	869e2 <__divdi3+0x146>
   868a8:	2400      	movs	r4, #0
   868aa:	2d00      	cmp	r5, #0
   868ac:	f2c0 8094 	blt.w	869d8 <__divdi3+0x13c>
   868b0:	4680      	mov	r8, r0
   868b2:	460f      	mov	r7, r1
   868b4:	4694      	mov	ip, r2
   868b6:	461e      	mov	r6, r3
   868b8:	bbe3      	cbnz	r3, 86934 <__divdi3+0x98>
   868ba:	428a      	cmp	r2, r1
   868bc:	d955      	bls.n	8696a <__divdi3+0xce>
   868be:	fab2 f782 	clz	r7, r2
   868c2:	b147      	cbz	r7, 868d6 <__divdi3+0x3a>
   868c4:	f1c7 0520 	rsb	r5, r7, #32
   868c8:	fa20 f605 	lsr.w	r6, r0, r5
   868cc:	fa01 f107 	lsl.w	r1, r1, r7
   868d0:	40ba      	lsls	r2, r7
   868d2:	40b8      	lsls	r0, r7
   868d4:	4331      	orrs	r1, r6
   868d6:	0c17      	lsrs	r7, r2, #16
   868d8:	fbb1 f6f7 	udiv	r6, r1, r7
   868dc:	fa1f fc82 	uxth.w	ip, r2
   868e0:	fb07 1116 	mls	r1, r7, r6, r1
   868e4:	fb0c f506 	mul.w	r5, ip, r6
   868e8:	0c03      	lsrs	r3, r0, #16
   868ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   868ee:	429d      	cmp	r5, r3
   868f0:	d908      	bls.n	86904 <__divdi3+0x68>
   868f2:	1e71      	subs	r1, r6, #1
   868f4:	189b      	adds	r3, r3, r2
   868f6:	f080 8113 	bcs.w	86b20 <__divdi3+0x284>
   868fa:	429d      	cmp	r5, r3
   868fc:	f240 8110 	bls.w	86b20 <__divdi3+0x284>
   86900:	3e02      	subs	r6, #2
   86902:	189b      	adds	r3, r3, r2
   86904:	1b59      	subs	r1, r3, r5
   86906:	fbb1 f5f7 	udiv	r5, r1, r7
   8690a:	fb07 1315 	mls	r3, r7, r5, r1
   8690e:	fb0c fc05 	mul.w	ip, ip, r5
   86912:	b280      	uxth	r0, r0
   86914:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
   86918:	458c      	cmp	ip, r1
   8691a:	d907      	bls.n	8692c <__divdi3+0x90>
   8691c:	1e6b      	subs	r3, r5, #1
   8691e:	188a      	adds	r2, r1, r2
   86920:	f080 8100 	bcs.w	86b24 <__divdi3+0x288>
   86924:	4594      	cmp	ip, r2
   86926:	f240 80fd 	bls.w	86b24 <__divdi3+0x288>
   8692a:	3d02      	subs	r5, #2
   8692c:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
   86930:	2500      	movs	r5, #0
   86932:	e003      	b.n	8693c <__divdi3+0xa0>
   86934:	428b      	cmp	r3, r1
   86936:	d90c      	bls.n	86952 <__divdi3+0xb6>
   86938:	2500      	movs	r5, #0
   8693a:	4629      	mov	r1, r5
   8693c:	460a      	mov	r2, r1
   8693e:	462b      	mov	r3, r5
   86940:	b114      	cbz	r4, 86948 <__divdi3+0xac>
   86942:	4252      	negs	r2, r2
   86944:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   86948:	4610      	mov	r0, r2
   8694a:	4619      	mov	r1, r3
   8694c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   86950:	4770      	bx	lr
   86952:	fab3 f583 	clz	r5, r3
   86956:	2d00      	cmp	r5, #0
   86958:	f040 8087 	bne.w	86a6a <__divdi3+0x1ce>
   8695c:	428b      	cmp	r3, r1
   8695e:	d301      	bcc.n	86964 <__divdi3+0xc8>
   86960:	4282      	cmp	r2, r0
   86962:	d8ea      	bhi.n	8693a <__divdi3+0x9e>
   86964:	2500      	movs	r5, #0
   86966:	2101      	movs	r1, #1
   86968:	e7e8      	b.n	8693c <__divdi3+0xa0>
   8696a:	b912      	cbnz	r2, 86972 <__divdi3+0xd6>
   8696c:	2601      	movs	r6, #1
   8696e:	fbb6 f2f2 	udiv	r2, r6, r2
   86972:	fab2 f682 	clz	r6, r2
   86976:	2e00      	cmp	r6, #0
   86978:	d139      	bne.n	869ee <__divdi3+0x152>
   8697a:	1a8e      	subs	r6, r1, r2
   8697c:	0c13      	lsrs	r3, r2, #16
   8697e:	fa1f fc82 	uxth.w	ip, r2
   86982:	2501      	movs	r5, #1
   86984:	fbb6 f7f3 	udiv	r7, r6, r3
   86988:	fb03 6117 	mls	r1, r3, r7, r6
   8698c:	fb0c f807 	mul.w	r8, ip, r7
   86990:	ea4f 4910 	mov.w	r9, r0, lsr #16
   86994:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
   86998:	45b0      	cmp	r8, r6
   8699a:	d906      	bls.n	869aa <__divdi3+0x10e>
   8699c:	1e79      	subs	r1, r7, #1
   8699e:	18b6      	adds	r6, r6, r2
   869a0:	d202      	bcs.n	869a8 <__divdi3+0x10c>
   869a2:	45b0      	cmp	r8, r6
   869a4:	f200 80d3 	bhi.w	86b4e <__divdi3+0x2b2>
   869a8:	460f      	mov	r7, r1
   869aa:	ebc8 0606 	rsb	r6, r8, r6
   869ae:	fbb6 f1f3 	udiv	r1, r6, r3
   869b2:	fb03 6311 	mls	r3, r3, r1, r6
   869b6:	fb0c fc01 	mul.w	ip, ip, r1
   869ba:	b280      	uxth	r0, r0
   869bc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   869c0:	459c      	cmp	ip, r3
   869c2:	d906      	bls.n	869d2 <__divdi3+0x136>
   869c4:	1e4e      	subs	r6, r1, #1
   869c6:	189a      	adds	r2, r3, r2
   869c8:	d202      	bcs.n	869d0 <__divdi3+0x134>
   869ca:	4594      	cmp	ip, r2
   869cc:	f200 80c2 	bhi.w	86b54 <__divdi3+0x2b8>
   869d0:	4631      	mov	r1, r6
   869d2:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   869d6:	e7b1      	b.n	8693c <__divdi3+0xa0>
   869d8:	43e4      	mvns	r4, r4
   869da:	4252      	negs	r2, r2
   869dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   869e0:	e766      	b.n	868b0 <__divdi3+0x14>
   869e2:	4240      	negs	r0, r0
   869e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   869e8:	f04f 34ff 	mov.w	r4, #4294967295
   869ec:	e75d      	b.n	868aa <__divdi3+0xe>
   869ee:	40b2      	lsls	r2, r6
   869f0:	f1c6 0920 	rsb	r9, r6, #32
   869f4:	fa21 f709 	lsr.w	r7, r1, r9
   869f8:	fa20 f909 	lsr.w	r9, r0, r9
   869fc:	fa01 f106 	lsl.w	r1, r1, r6
   86a00:	0c13      	lsrs	r3, r2, #16
   86a02:	fbb7 f8f3 	udiv	r8, r7, r3
   86a06:	fa1f fc82 	uxth.w	ip, r2
   86a0a:	fb03 7718 	mls	r7, r3, r8, r7
   86a0e:	fb0c f508 	mul.w	r5, ip, r8
   86a12:	ea49 0901 	orr.w	r9, r9, r1
   86a16:	ea4f 4119 	mov.w	r1, r9, lsr #16
   86a1a:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
   86a1e:	40b0      	lsls	r0, r6
   86a20:	42bd      	cmp	r5, r7
   86a22:	d90a      	bls.n	86a3a <__divdi3+0x19e>
   86a24:	18bf      	adds	r7, r7, r2
   86a26:	f108 36ff 	add.w	r6, r8, #4294967295
   86a2a:	f080 808e 	bcs.w	86b4a <__divdi3+0x2ae>
   86a2e:	42bd      	cmp	r5, r7
   86a30:	f240 808b 	bls.w	86b4a <__divdi3+0x2ae>
   86a34:	f1a8 0802 	sub.w	r8, r8, #2
   86a38:	18bf      	adds	r7, r7, r2
   86a3a:	1b79      	subs	r1, r7, r5
   86a3c:	fbb1 f5f3 	udiv	r5, r1, r3
   86a40:	fb03 1715 	mls	r7, r3, r5, r1
   86a44:	fb0c f605 	mul.w	r6, ip, r5
   86a48:	fa1f f989 	uxth.w	r9, r9
   86a4c:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
   86a50:	428e      	cmp	r6, r1
   86a52:	d906      	bls.n	86a62 <__divdi3+0x1c6>
   86a54:	1e6f      	subs	r7, r5, #1
   86a56:	1889      	adds	r1, r1, r2
   86a58:	d271      	bcs.n	86b3e <__divdi3+0x2a2>
   86a5a:	428e      	cmp	r6, r1
   86a5c:	d96f      	bls.n	86b3e <__divdi3+0x2a2>
   86a5e:	3d02      	subs	r5, #2
   86a60:	1889      	adds	r1, r1, r2
   86a62:	1b8e      	subs	r6, r1, r6
   86a64:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
   86a68:	e78c      	b.n	86984 <__divdi3+0xe8>
   86a6a:	f1c5 0120 	rsb	r1, r5, #32
   86a6e:	fa22 f301 	lsr.w	r3, r2, r1
   86a72:	fa06 f605 	lsl.w	r6, r6, r5
   86a76:	fa27 f201 	lsr.w	r2, r7, r1
   86a7a:	fa07 f705 	lsl.w	r7, r7, r5
   86a7e:	fa20 f101 	lsr.w	r1, r0, r1
   86a82:	431e      	orrs	r6, r3
   86a84:	ea4f 4916 	mov.w	r9, r6, lsr #16
   86a88:	fbb2 f8f9 	udiv	r8, r2, r9
   86a8c:	fa1f fa86 	uxth.w	sl, r6
   86a90:	fb09 2218 	mls	r2, r9, r8, r2
   86a94:	fb0a fb08 	mul.w	fp, sl, r8
   86a98:	430f      	orrs	r7, r1
   86a9a:	0c3b      	lsrs	r3, r7, #16
   86a9c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   86aa0:	4593      	cmp	fp, r2
   86aa2:	fa0c fc05 	lsl.w	ip, ip, r5
   86aa6:	d908      	bls.n	86aba <__divdi3+0x21e>
   86aa8:	1992      	adds	r2, r2, r6
   86aaa:	f108 31ff 	add.w	r1, r8, #4294967295
   86aae:	d24a      	bcs.n	86b46 <__divdi3+0x2aa>
   86ab0:	4593      	cmp	fp, r2
   86ab2:	d948      	bls.n	86b46 <__divdi3+0x2aa>
   86ab4:	f1a8 0802 	sub.w	r8, r8, #2
   86ab8:	1992      	adds	r2, r2, r6
   86aba:	ebcb 0302 	rsb	r3, fp, r2
   86abe:	fbb3 f1f9 	udiv	r1, r3, r9
   86ac2:	fb09 3211 	mls	r2, r9, r1, r3
   86ac6:	fb0a fa01 	mul.w	sl, sl, r1
   86aca:	b2bf      	uxth	r7, r7
   86acc:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
   86ad0:	459a      	cmp	sl, r3
   86ad2:	d906      	bls.n	86ae2 <__divdi3+0x246>
   86ad4:	1e4a      	subs	r2, r1, #1
   86ad6:	199b      	adds	r3, r3, r6
   86ad8:	d233      	bcs.n	86b42 <__divdi3+0x2a6>
   86ada:	459a      	cmp	sl, r3
   86adc:	d931      	bls.n	86b42 <__divdi3+0x2a6>
   86ade:	3902      	subs	r1, #2
   86ae0:	199b      	adds	r3, r3, r6
   86ae2:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
   86ae6:	0c0f      	lsrs	r7, r1, #16
   86ae8:	fa1f f88c 	uxth.w	r8, ip
   86aec:	fb08 f607 	mul.w	r6, r8, r7
   86af0:	b28a      	uxth	r2, r1
   86af2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   86af6:	fb08 f802 	mul.w	r8, r8, r2
   86afa:	fb0c 6202 	mla	r2, ip, r2, r6
   86afe:	fb0c fc07 	mul.w	ip, ip, r7
   86b02:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   86b06:	4296      	cmp	r6, r2
   86b08:	bf88      	it	hi
   86b0a:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
   86b0e:	ebca 0303 	rsb	r3, sl, r3
   86b12:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
   86b16:	4563      	cmp	r3, ip
   86b18:	d30e      	bcc.n	86b38 <__divdi3+0x29c>
   86b1a:	d005      	beq.n	86b28 <__divdi3+0x28c>
   86b1c:	2500      	movs	r5, #0
   86b1e:	e70d      	b.n	8693c <__divdi3+0xa0>
   86b20:	460e      	mov	r6, r1
   86b22:	e6ef      	b.n	86904 <__divdi3+0x68>
   86b24:	461d      	mov	r5, r3
   86b26:	e701      	b.n	8692c <__divdi3+0x90>
   86b28:	fa00 f005 	lsl.w	r0, r0, r5
   86b2c:	fa1f f888 	uxth.w	r8, r8
   86b30:	eb08 4502 	add.w	r5, r8, r2, lsl #16
   86b34:	42a8      	cmp	r0, r5
   86b36:	d2f1      	bcs.n	86b1c <__divdi3+0x280>
   86b38:	3901      	subs	r1, #1
   86b3a:	2500      	movs	r5, #0
   86b3c:	e6fe      	b.n	8693c <__divdi3+0xa0>
   86b3e:	463d      	mov	r5, r7
   86b40:	e78f      	b.n	86a62 <__divdi3+0x1c6>
   86b42:	4611      	mov	r1, r2
   86b44:	e7cd      	b.n	86ae2 <__divdi3+0x246>
   86b46:	4688      	mov	r8, r1
   86b48:	e7b7      	b.n	86aba <__divdi3+0x21e>
   86b4a:	46b0      	mov	r8, r6
   86b4c:	e775      	b.n	86a3a <__divdi3+0x19e>
   86b4e:	3f02      	subs	r7, #2
   86b50:	18b6      	adds	r6, r6, r2
   86b52:	e72a      	b.n	869aa <__divdi3+0x10e>
   86b54:	3902      	subs	r1, #2
   86b56:	e73c      	b.n	869d2 <__divdi3+0x136>

00086b58 <__udivdi3>:
   86b58:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   86b5c:	4614      	mov	r4, r2
   86b5e:	4605      	mov	r5, r0
   86b60:	460e      	mov	r6, r1
   86b62:	2b00      	cmp	r3, #0
   86b64:	d13d      	bne.n	86be2 <__udivdi3+0x8a>
   86b66:	428a      	cmp	r2, r1
   86b68:	d949      	bls.n	86bfe <__udivdi3+0xa6>
   86b6a:	fab2 f782 	clz	r7, r2
   86b6e:	b147      	cbz	r7, 86b82 <__udivdi3+0x2a>
   86b70:	f1c7 0120 	rsb	r1, r7, #32
   86b74:	fa20 f201 	lsr.w	r2, r0, r1
   86b78:	fa06 f607 	lsl.w	r6, r6, r7
   86b7c:	40bc      	lsls	r4, r7
   86b7e:	40bd      	lsls	r5, r7
   86b80:	4316      	orrs	r6, r2
   86b82:	0c22      	lsrs	r2, r4, #16
   86b84:	fbb6 f0f2 	udiv	r0, r6, r2
   86b88:	b2a1      	uxth	r1, r4
   86b8a:	fb02 6610 	mls	r6, r2, r0, r6
   86b8e:	fb01 f300 	mul.w	r3, r1, r0
   86b92:	0c2f      	lsrs	r7, r5, #16
   86b94:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   86b98:	42b3      	cmp	r3, r6
   86b9a:	d908      	bls.n	86bae <__udivdi3+0x56>
   86b9c:	1e47      	subs	r7, r0, #1
   86b9e:	1936      	adds	r6, r6, r4
   86ba0:	f080 80fa 	bcs.w	86d98 <__udivdi3+0x240>
   86ba4:	42b3      	cmp	r3, r6
   86ba6:	f240 80f7 	bls.w	86d98 <__udivdi3+0x240>
   86baa:	3802      	subs	r0, #2
   86bac:	1936      	adds	r6, r6, r4
   86bae:	1af6      	subs	r6, r6, r3
   86bb0:	fbb6 f3f2 	udiv	r3, r6, r2
   86bb4:	fb02 6213 	mls	r2, r2, r3, r6
   86bb8:	fb01 f103 	mul.w	r1, r1, r3
   86bbc:	b2ad      	uxth	r5, r5
   86bbe:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
   86bc2:	4291      	cmp	r1, r2
   86bc4:	d907      	bls.n	86bd6 <__udivdi3+0x7e>
   86bc6:	1e5e      	subs	r6, r3, #1
   86bc8:	1912      	adds	r2, r2, r4
   86bca:	f080 80e7 	bcs.w	86d9c <__udivdi3+0x244>
   86bce:	4291      	cmp	r1, r2
   86bd0:	f240 80e4 	bls.w	86d9c <__udivdi3+0x244>
   86bd4:	3b02      	subs	r3, #2
   86bd6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   86bda:	2100      	movs	r1, #0
   86bdc:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   86be0:	4770      	bx	lr
   86be2:	428b      	cmp	r3, r1
   86be4:	d843      	bhi.n	86c6e <__udivdi3+0x116>
   86be6:	fab3 f483 	clz	r4, r3
   86bea:	2c00      	cmp	r4, #0
   86bec:	d142      	bne.n	86c74 <__udivdi3+0x11c>
   86bee:	428b      	cmp	r3, r1
   86bf0:	d302      	bcc.n	86bf8 <__udivdi3+0xa0>
   86bf2:	4282      	cmp	r2, r0
   86bf4:	f200 80e1 	bhi.w	86dba <__udivdi3+0x262>
   86bf8:	2100      	movs	r1, #0
   86bfa:	2001      	movs	r0, #1
   86bfc:	e7ee      	b.n	86bdc <__udivdi3+0x84>
   86bfe:	b912      	cbnz	r2, 86c06 <__udivdi3+0xae>
   86c00:	2701      	movs	r7, #1
   86c02:	fbb7 f4f2 	udiv	r4, r7, r2
   86c06:	fab4 f284 	clz	r2, r4
   86c0a:	2a00      	cmp	r2, #0
   86c0c:	f040 8089 	bne.w	86d22 <__udivdi3+0x1ca>
   86c10:	1b0a      	subs	r2, r1, r4
   86c12:	0c23      	lsrs	r3, r4, #16
   86c14:	b2a7      	uxth	r7, r4
   86c16:	2101      	movs	r1, #1
   86c18:	fbb2 f6f3 	udiv	r6, r2, r3
   86c1c:	fb03 2216 	mls	r2, r3, r6, r2
   86c20:	fb07 f006 	mul.w	r0, r7, r6
   86c24:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   86c28:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   86c2c:	4290      	cmp	r0, r2
   86c2e:	d907      	bls.n	86c40 <__udivdi3+0xe8>
   86c30:	1912      	adds	r2, r2, r4
   86c32:	f106 3cff 	add.w	ip, r6, #4294967295
   86c36:	d202      	bcs.n	86c3e <__udivdi3+0xe6>
   86c38:	4290      	cmp	r0, r2
   86c3a:	f200 80d0 	bhi.w	86dde <__udivdi3+0x286>
   86c3e:	4666      	mov	r6, ip
   86c40:	1a12      	subs	r2, r2, r0
   86c42:	fbb2 f0f3 	udiv	r0, r2, r3
   86c46:	fb03 2310 	mls	r3, r3, r0, r2
   86c4a:	fb07 f700 	mul.w	r7, r7, r0
   86c4e:	b2ad      	uxth	r5, r5
   86c50:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   86c54:	429f      	cmp	r7, r3
   86c56:	d907      	bls.n	86c68 <__udivdi3+0x110>
   86c58:	1e42      	subs	r2, r0, #1
   86c5a:	191b      	adds	r3, r3, r4
   86c5c:	f080 80a0 	bcs.w	86da0 <__udivdi3+0x248>
   86c60:	429f      	cmp	r7, r3
   86c62:	f240 809d 	bls.w	86da0 <__udivdi3+0x248>
   86c66:	3802      	subs	r0, #2
   86c68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   86c6c:	e7b6      	b.n	86bdc <__udivdi3+0x84>
   86c6e:	2100      	movs	r1, #0
   86c70:	4608      	mov	r0, r1
   86c72:	e7b3      	b.n	86bdc <__udivdi3+0x84>
   86c74:	f1c4 0620 	rsb	r6, r4, #32
   86c78:	fa22 f706 	lsr.w	r7, r2, r6
   86c7c:	fa03 f304 	lsl.w	r3, r3, r4
   86c80:	fa21 f506 	lsr.w	r5, r1, r6
   86c84:	fa01 f104 	lsl.w	r1, r1, r4
   86c88:	fa20 f606 	lsr.w	r6, r0, r6
   86c8c:	433b      	orrs	r3, r7
   86c8e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   86c92:	fbb5 f7fc 	udiv	r7, r5, ip
   86c96:	fa1f f883 	uxth.w	r8, r3
   86c9a:	fb0c 5517 	mls	r5, ip, r7, r5
   86c9e:	fb08 f907 	mul.w	r9, r8, r7
   86ca2:	ea46 0a01 	orr.w	sl, r6, r1
   86ca6:	ea4f 411a 	mov.w	r1, sl, lsr #16
   86caa:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   86cae:	45a9      	cmp	r9, r5
   86cb0:	fa02 f204 	lsl.w	r2, r2, r4
   86cb4:	d904      	bls.n	86cc0 <__udivdi3+0x168>
   86cb6:	1e7e      	subs	r6, r7, #1
   86cb8:	18ed      	adds	r5, r5, r3
   86cba:	f0c0 8081 	bcc.w	86dc0 <__udivdi3+0x268>
   86cbe:	4637      	mov	r7, r6
   86cc0:	ebc9 0105 	rsb	r1, r9, r5
   86cc4:	fbb1 f6fc 	udiv	r6, r1, ip
   86cc8:	fb0c 1516 	mls	r5, ip, r6, r1
   86ccc:	fb08 f806 	mul.w	r8, r8, r6
   86cd0:	fa1f fa8a 	uxth.w	sl, sl
   86cd4:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
   86cd8:	4588      	cmp	r8, r1
   86cda:	d903      	bls.n	86ce4 <__udivdi3+0x18c>
   86cdc:	1e75      	subs	r5, r6, #1
   86cde:	18c9      	adds	r1, r1, r3
   86ce0:	d374      	bcc.n	86dcc <__udivdi3+0x274>
   86ce2:	462e      	mov	r6, r5
   86ce4:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   86ce8:	0c37      	lsrs	r7, r6, #16
   86cea:	fa1f fc82 	uxth.w	ip, r2
   86cee:	fb0c f507 	mul.w	r5, ip, r7
   86cf2:	0c12      	lsrs	r2, r2, #16
   86cf4:	b2b3      	uxth	r3, r6
   86cf6:	fb0c fc03 	mul.w	ip, ip, r3
   86cfa:	fb02 5303 	mla	r3, r2, r3, r5
   86cfe:	fb02 f207 	mul.w	r2, r2, r7
   86d02:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   86d06:	429d      	cmp	r5, r3
   86d08:	bf88      	it	hi
   86d0a:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
   86d0e:	ebc8 0101 	rsb	r1, r8, r1
   86d12:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   86d16:	4291      	cmp	r1, r2
   86d18:	d34c      	bcc.n	86db4 <__udivdi3+0x25c>
   86d1a:	d043      	beq.n	86da4 <__udivdi3+0x24c>
   86d1c:	4630      	mov	r0, r6
   86d1e:	2100      	movs	r1, #0
   86d20:	e75c      	b.n	86bdc <__udivdi3+0x84>
   86d22:	4094      	lsls	r4, r2
   86d24:	f1c2 0520 	rsb	r5, r2, #32
   86d28:	fa21 f605 	lsr.w	r6, r1, r5
   86d2c:	fa20 f505 	lsr.w	r5, r0, r5
   86d30:	fa01 f102 	lsl.w	r1, r1, r2
   86d34:	0c23      	lsrs	r3, r4, #16
   86d36:	fbb6 fcf3 	udiv	ip, r6, r3
   86d3a:	b2a7      	uxth	r7, r4
   86d3c:	fb03 661c 	mls	r6, r3, ip, r6
   86d40:	fb07 f80c 	mul.w	r8, r7, ip
   86d44:	4329      	orrs	r1, r5
   86d46:	0c0d      	lsrs	r5, r1, #16
   86d48:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   86d4c:	45b0      	cmp	r8, r6
   86d4e:	fa00 f502 	lsl.w	r5, r0, r2
   86d52:	d908      	bls.n	86d66 <__udivdi3+0x20e>
   86d54:	1936      	adds	r6, r6, r4
   86d56:	f10c 30ff 	add.w	r0, ip, #4294967295
   86d5a:	d23e      	bcs.n	86dda <__udivdi3+0x282>
   86d5c:	45b0      	cmp	r8, r6
   86d5e:	d93c      	bls.n	86dda <__udivdi3+0x282>
   86d60:	f1ac 0c02 	sub.w	ip, ip, #2
   86d64:	1936      	adds	r6, r6, r4
   86d66:	ebc8 0206 	rsb	r2, r8, r6
   86d6a:	fbb2 f0f3 	udiv	r0, r2, r3
   86d6e:	fb03 2610 	mls	r6, r3, r0, r2
   86d72:	fb07 f800 	mul.w	r8, r7, r0
   86d76:	b289      	uxth	r1, r1
   86d78:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   86d7c:	4590      	cmp	r8, r2
   86d7e:	d906      	bls.n	86d8e <__udivdi3+0x236>
   86d80:	1e46      	subs	r6, r0, #1
   86d82:	1912      	adds	r2, r2, r4
   86d84:	d227      	bcs.n	86dd6 <__udivdi3+0x27e>
   86d86:	4590      	cmp	r8, r2
   86d88:	d925      	bls.n	86dd6 <__udivdi3+0x27e>
   86d8a:	3802      	subs	r0, #2
   86d8c:	1912      	adds	r2, r2, r4
   86d8e:	ebc8 0202 	rsb	r2, r8, r2
   86d92:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
   86d96:	e73f      	b.n	86c18 <__udivdi3+0xc0>
   86d98:	4638      	mov	r0, r7
   86d9a:	e708      	b.n	86bae <__udivdi3+0x56>
   86d9c:	4633      	mov	r3, r6
   86d9e:	e71a      	b.n	86bd6 <__udivdi3+0x7e>
   86da0:	4610      	mov	r0, r2
   86da2:	e761      	b.n	86c68 <__udivdi3+0x110>
   86da4:	fa00 f004 	lsl.w	r0, r0, r4
   86da8:	fa1f fc8c 	uxth.w	ip, ip
   86dac:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
   86db0:	4298      	cmp	r0, r3
   86db2:	d2b3      	bcs.n	86d1c <__udivdi3+0x1c4>
   86db4:	1e70      	subs	r0, r6, #1
   86db6:	2100      	movs	r1, #0
   86db8:	e710      	b.n	86bdc <__udivdi3+0x84>
   86dba:	4621      	mov	r1, r4
   86dbc:	4620      	mov	r0, r4
   86dbe:	e70d      	b.n	86bdc <__udivdi3+0x84>
   86dc0:	45a9      	cmp	r9, r5
   86dc2:	f67f af7c 	bls.w	86cbe <__udivdi3+0x166>
   86dc6:	3f02      	subs	r7, #2
   86dc8:	18ed      	adds	r5, r5, r3
   86dca:	e779      	b.n	86cc0 <__udivdi3+0x168>
   86dcc:	4588      	cmp	r8, r1
   86dce:	d988      	bls.n	86ce2 <__udivdi3+0x18a>
   86dd0:	3e02      	subs	r6, #2
   86dd2:	18c9      	adds	r1, r1, r3
   86dd4:	e786      	b.n	86ce4 <__udivdi3+0x18c>
   86dd6:	4630      	mov	r0, r6
   86dd8:	e7d9      	b.n	86d8e <__udivdi3+0x236>
   86dda:	4684      	mov	ip, r0
   86ddc:	e7c3      	b.n	86d66 <__udivdi3+0x20e>
   86dde:	3e02      	subs	r6, #2
   86de0:	1912      	adds	r2, r2, r4
   86de2:	e72d      	b.n	86c40 <__udivdi3+0xe8>
   86de4:	6d6d6f43 	.word	0x6d6d6f43
   86de8:	63696e75 	.word	0x63696e75
   86dec:	6f697461 	.word	0x6f697461
   86df0:	0000006e 	.word	0x0000006e
   86df4:	6c756f43 	.word	0x6c756f43
   86df8:	6f6e2064 	.word	0x6f6e2064
   86dfc:	72632074 	.word	0x72632074
   86e00:	65746165 	.word	0x65746165
   86e04:	73617420 	.word	0x73617420
   86e08:	6f43206b 	.word	0x6f43206b
   86e0c:	6e756d6d 	.word	0x6e756d6d
   86e10:	74616369 	.word	0x74616369
   86e14:	006e6f69 	.word	0x006e6f69
   86e18:	74736574 	.word	0x74736574
   86e1c:	7365742f 	.word	0x7365742f
   86e20:	75645f74 	.word	0x75645f74
   86e24:	635f7974 	.word	0x635f7974
   86e28:	656c6379 	.word	0x656c6379
   86e2c:	0000682e 	.word	0x0000682e
   86e30:	74736574 	.word	0x74736574
   86e34:	7475645f 	.word	0x7475645f
   86e38:	79635f79 	.word	0x79635f79
   86e3c:	5f656c63 	.word	0x5f656c63
   86e40:	00003633 	.word	0x00003633
   86e44:	74736574 	.word	0x74736574
   86e48:	7475645f 	.word	0x7475645f
   86e4c:	79635f79 	.word	0x79635f79
   86e50:	5f656c63 	.word	0x5f656c63
   86e54:	00003833 	.word	0x00003833
   86e58:	74736574 	.word	0x74736574
   86e5c:	7475645f 	.word	0x7475645f
   86e60:	79635f79 	.word	0x79635f79
   86e64:	5f656c63 	.word	0x5f656c63
   86e68:	00003034 	.word	0x00003034
   86e6c:	74736574 	.word	0x74736574
   86e70:	7475645f 	.word	0x7475645f
   86e74:	79635f79 	.word	0x79635f79
   86e78:	5f656c63 	.word	0x5f656c63
   86e7c:	00000039 	.word	0x00000039
   86e80:	74736574 	.word	0x74736574
   86e84:	7475645f 	.word	0x7475645f
   86e88:	79635f79 	.word	0x79635f79
   86e8c:	5f656c63 	.word	0x5f656c63
   86e90:	31434144 	.word	0x31434144
   86e94:	00000000 	.word	0x00000000
   86e98:	74736574 	.word	0x74736574
   86e9c:	6470755f 	.word	0x6470755f
   86ea0:	5f657461 	.word	0x5f657461
   86ea4:	79747564 	.word	0x79747564
   86ea8:	6379635f 	.word	0x6379635f
   86eac:	445f656c 	.word	0x445f656c
   86eb0:	00314341 	.word	0x00314341
   86eb4:	79747544 	.word	0x79747544
   86eb8:	63796320 	.word	0x63796320
   86ebc:	4420656c 	.word	0x4420656c
   86ec0:	3a314341 	.word	0x3a314341
   86ec4:	0a642520 	.word	0x0a642520
   86ec8:	0000000d 	.word	0x0000000d
   86ecc:	79747544 	.word	0x79747544
   86ed0:	63796320 	.word	0x63796320
   86ed4:	3320656c 	.word	0x3320656c
   86ed8:	25203a36 	.word	0x25203a36
   86edc:	000d0a64 	.word	0x000d0a64
   86ee0:	79747544 	.word	0x79747544
   86ee4:	63796320 	.word	0x63796320
   86ee8:	3320656c 	.word	0x3320656c
   86eec:	25203a38 	.word	0x25203a38
   86ef0:	000d0a64 	.word	0x000d0a64
   86ef4:	79747544 	.word	0x79747544
   86ef8:	63796320 	.word	0x63796320
   86efc:	3420656c 	.word	0x3420656c
   86f00:	25203a30 	.word	0x25203a30
   86f04:	000d0a64 	.word	0x000d0a64
   86f08:	79747544 	.word	0x79747544
   86f0c:	63796320 	.word	0x63796320
   86f10:	3920656c 	.word	0x3920656c
   86f14:	6425203a 	.word	0x6425203a
   86f18:	00000d0a 	.word	0x00000d0a
   86f1c:	6e6f7277 	.word	0x6e6f7277
   86f20:	75642067 	.word	0x75642067
   86f24:	63207974 	.word	0x63207974
   86f28:	656c6379 	.word	0x656c6379
   86f2c:	43414420 	.word	0x43414420
   86f30:	00000031 	.word	0x00000031

00086f34 <UnitySizeMask>:
   86f34:	000000ff 0000ffff 0000ffff ffffffff     ................
   86f44:	ffffffff ffffffff ffffffff              ............

00086f50 <UnityStrOk>:
   86f50:	00004b4f                                OK..

00086f54 <UnityStrSpacer>:
   86f54:	0000202e                                . ..

00086f58 <UnityStrWas>:
   86f58:	73615720 00000020                        Was ...

00086f60 <UnityStrFail>:
   86f60:	4c494146 00000000                       FAIL....

00086f68 <UnityStrExpected>:
   86f68:	70784520 65746365 00002064               Expected ..

00086f74 <UnityStrBreaker>:
   86f74:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   86f84:	2d2d2d2d 002d2d2d                       -------.

00086f8c <UnityStrResultsFailures>:
   86f8c:	69614620 6572756c 00002073               Failures ..

00086f98 <UnityStrResultsIgnored>:
   86f98:	6e674920 6465726f 00000020               Ignored ...

00086fa4 <UnityStrResultsTests>:
   86fa4:	73655420 00207374                        Tests .

00086fac <UnityStrPass>:
   86fac:	53534150 00000000 09097325 25096325     PASS....%s..%c.%
   86fbc:	75250975 0d752509 0000000a 454c4449     u.%u.%u.....IDLE
   86fcc:	00000000 00000a0d 20726d54 00637653     ........Tmr Svc.
   86fdc:	00000001 00000002 00000004 00000008     ................
   86fec:	00000010 00000020 00000040 00000080     .... ...@.......
   86ffc:	00000100 00000200 00000400              ............

00087008 <_global_impure_ptr>:
   87008:	20070018 20200043                                ... C.

0008700e <blanks.6678>:
   8700e:	20202020 20202020 20202020 20202020                     

0008701e <zeroes.6679>:
   8701e:	30303030 30303030 30303030 30303030     0000000000000000
   8702e:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   8703e:	32313000 36353433 61393837 65646362     .0123456789abcde
   8704e:	4f500066 00584953 b5f8002e                       f.POSIX...

00087058 <_init>:
   87058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8705a:	bf00      	nop
   8705c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8705e:	bc08      	pop	{r3}
   87060:	469e      	mov	lr, r3
   87062:	4770      	bx	lr

00087064 <__init_array_start>:
   87064:	0008535d 	.word	0x0008535d

00087068 <__frame_dummy_init_array_entry>:
   87068:	0008016d                                m...

0008706c <_fini>:
   8706c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8706e:	bf00      	nop
   87070:	bcf8      	pop	{r3, r4, r5, r6, r7}
   87072:	bc08      	pop	{r3}
   87074:	469e      	mov	lr, r3
   87076:	4770      	bx	lr

00087078 <__fini_array_start>:
   87078:	00080145 	.word	0x00080145
