
HoverCraft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000056c0  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000856c0  000856c0  0000d6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008d0  20070000  000856c8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00008280  200708d0  00085f98  000108d0  2**3
                  ALLOC
  4 .stack        00002000  20078b50  0008e218  000108d0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000108d0  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  000108f9  2**0
                  CONTENTS, READONLY
  7 .debug_info   000260e0  00000000  00000000  0001096a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000076bd  00000000  00000000  00036a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ce3f  00000000  00000000  0003e107  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001238  00000000  00000000  0004af48  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f50  00000000  00000000  0004c180  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00005eef  00000000  00000000  0004d0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001504b  00000000  00000000  00052fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006792f  00000000  00000000  0006800a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000026b0  00000000  00000000  000cf93c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007ab50 	.word	0x2007ab50
   80004:	000829f5 	.word	0x000829f5
   80008:	000829f1 	.word	0x000829f1
   8000c:	000829f1 	.word	0x000829f1
   80010:	000829f1 	.word	0x000829f1
   80014:	000829f1 	.word	0x000829f1
   80018:	000829f1 	.word	0x000829f1
	...
   8002c:	000807e1 	.word	0x000807e1
   80030:	000829f1 	.word	0x000829f1
   80034:	00000000 	.word	0x00000000
   80038:	00080871 	.word	0x00080871
   8003c:	000808ad 	.word	0x000808ad
   80040:	000829f1 	.word	0x000829f1
   80044:	000829f1 	.word	0x000829f1
   80048:	000829f1 	.word	0x000829f1
   8004c:	000829f1 	.word	0x000829f1
   80050:	000829f1 	.word	0x000829f1
   80054:	000829f1 	.word	0x000829f1
   80058:	000829f1 	.word	0x000829f1
   8005c:	000829f1 	.word	0x000829f1
   80060:	000829f1 	.word	0x000829f1
   80064:	000829f1 	.word	0x000829f1
   80068:	00000000 	.word	0x00000000
   8006c:	000827bd 	.word	0x000827bd
   80070:	000827d9 	.word	0x000827d9
   80074:	000827f5 	.word	0x000827f5
   80078:	00082811 	.word	0x00082811
	...
   80084:	000829f1 	.word	0x000829f1
   80088:	000829f1 	.word	0x000829f1
   8008c:	000829f1 	.word	0x000829f1
   80090:	000829f1 	.word	0x000829f1
   80094:	000829f1 	.word	0x000829f1
   80098:	000829f1 	.word	0x000829f1
   8009c:	000829f1 	.word	0x000829f1
   800a0:	000829f1 	.word	0x000829f1
   800a4:	00000000 	.word	0x00000000
   800a8:	000829f1 	.word	0x000829f1
   800ac:	000829f1 	.word	0x000829f1
   800b0:	000829f1 	.word	0x000829f1
   800b4:	000829f1 	.word	0x000829f1
   800b8:	000829f1 	.word	0x000829f1
   800bc:	000829f1 	.word	0x000829f1
   800c0:	000829f1 	.word	0x000829f1
   800c4:	000829f1 	.word	0x000829f1
   800c8:	000829f1 	.word	0x000829f1
   800cc:	000829f1 	.word	0x000829f1
   800d0:	000829f1 	.word	0x000829f1
   800d4:	000829f1 	.word	0x000829f1
   800d8:	000829f1 	.word	0x000829f1
   800dc:	000829f1 	.word	0x000829f1
   800e0:	000829f1 	.word	0x000829f1
   800e4:	000829f1 	.word	0x000829f1
   800e8:	000829f1 	.word	0x000829f1
   800ec:	000829f1 	.word	0x000829f1
   800f0:	000829f1 	.word	0x000829f1

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	000856c8 	.word	0x000856c8
   80110:	000856cb 	.word	0x000856cb
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	000856c8 	.word	0x000856c8
   8013c:	000856c8 	.word	0x000856c8
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	200708d0 	.word	0x200708d0
   80164:	00000000 	.word	0x00000000
   80168:	000856c8 	.word	0x000856c8

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	000856c8 	.word	0x000856c8
   80198:	200708d4 	.word	0x200708d4
   8019c:	000856c8 	.word	0x000856c8
   801a0:	00000000 	.word	0x00000000

000801a4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   801a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   801a8:	460c      	mov	r4, r1
   801aa:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   801ac:	bb48      	cbnz	r0, 80202 <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
   801ae:	2a00      	cmp	r2, #0
   801b0:	dd2b      	ble.n	8020a <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
   801b2:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   801b4:	f648 3648 	movw	r6, #35656	; 0x8b48
   801b8:	f2c2 0607 	movt	r6, #8199	; 0x2007
   801bc:	f648 3540 	movw	r5, #35648	; 0x8b40
   801c0:	f2c2 0507 	movt	r5, #8199	; 0x2007
   801c4:	ea6f 0901 	mvn.w	r9, r1
   801c8:	eb07 0009 	add.w	r0, r7, r9
   801cc:	f000 0901 	and.w	r9, r0, #1
   801d0:	6830      	ldr	r0, [r6, #0]
   801d2:	682b      	ldr	r3, [r5, #0]
   801d4:	4798      	blx	r3
		ptr++;
   801d6:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801da:	42bc      	cmp	r4, r7
   801dc:	d119      	bne.n	80212 <_read+0x6e>
   801de:	e00d      	b.n	801fc <_read+0x58>
		ptr_get(stdio_base, ptr);
   801e0:	6830      	ldr	r0, [r6, #0]
   801e2:	682b      	ldr	r3, [r5, #0]
   801e4:	4621      	mov	r1, r4
   801e6:	4798      	blx	r3
		ptr++;
   801e8:	f104 0401 	add.w	r4, r4, #1
   801ec:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   801ee:	6830      	ldr	r0, [r6, #0]
   801f0:	682a      	ldr	r2, [r5, #0]
   801f2:	4790      	blx	r2
		ptr++;
   801f4:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801f8:	42bc      	cmp	r4, r7
   801fa:	d1f1      	bne.n	801e0 <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   801fc:	4640      	mov	r0, r8
   801fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80202:	f04f 30ff 	mov.w	r0, #4294967295
   80206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
   8020a:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   8020e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80212:	f1b9 0f00 	cmp.w	r9, #0
   80216:	d0e3      	beq.n	801e0 <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   80218:	6830      	ldr	r0, [r6, #0]
   8021a:	682a      	ldr	r2, [r5, #0]
   8021c:	4621      	mov	r1, r4
   8021e:	4790      	blx	r2
		ptr++;
   80220:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80224:	42bc      	cmp	r4, r7
   80226:	d1db      	bne.n	801e0 <_read+0x3c>
   80228:	e7e8      	b.n	801fc <_read+0x58>
   8022a:	bf00      	nop

0008022c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   8022c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80230:	460d      	mov	r5, r1
   80232:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80234:	f100 30ff 	add.w	r0, r0, #4294967295
   80238:	2802      	cmp	r0, #2
   8023a:	d824      	bhi.n	80286 <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
   8023c:	b332      	cbz	r2, 8028c <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8023e:	f648 3648 	movw	r6, #35656	; 0x8b48
   80242:	f2c2 0607 	movt	r6, #8199	; 0x2007
   80246:	f648 3744 	movw	r7, #35652	; 0x8b44
   8024a:	f2c2 0707 	movt	r7, #8199	; 0x2007
   8024e:	f04f 0400 	mov.w	r4, #0
   80252:	f102 39ff 	add.w	r9, r2, #4294967295
   80256:	f009 0901 	and.w	r9, r9, #1
   8025a:	6830      	ldr	r0, [r6, #0]
   8025c:	683b      	ldr	r3, [r7, #0]
   8025e:	5d09      	ldrb	r1, [r1, r4]
   80260:	4798      	blx	r3
   80262:	42a0      	cmp	r0, r4
   80264:	da1a      	bge.n	8029c <_write+0x70>
   80266:	e014      	b.n	80292 <_write+0x66>
   80268:	6830      	ldr	r0, [r6, #0]
   8026a:	683b      	ldr	r3, [r7, #0]
   8026c:	5d29      	ldrb	r1, [r5, r4]
   8026e:	4798      	blx	r3
   80270:	2800      	cmp	r0, #0
   80272:	db0e      	blt.n	80292 <_write+0x66>
			return -1;
		}
		++nChars;
   80274:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80278:	6830      	ldr	r0, [r6, #0]
   8027a:	683a      	ldr	r2, [r7, #0]
   8027c:	5d29      	ldrb	r1, [r5, r4]
   8027e:	4790      	blx	r2
   80280:	2800      	cmp	r0, #0
   80282:	da1d      	bge.n	802c0 <_write+0x94>
   80284:	e005      	b.n	80292 <_write+0x66>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80286:	f04f 34ff 	mov.w	r4, #4294967295
   8028a:	e004      	b.n	80296 <_write+0x6a>
	}

	for (; len != 0; --len) {
   8028c:	f04f 0400 	mov.w	r4, #0
   80290:	e001      	b.n	80296 <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80292:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80296:	4620      	mov	r0, r4
   80298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   8029c:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   802a0:	45a0      	cmp	r8, r4
   802a2:	d0f8      	beq.n	80296 <_write+0x6a>
   802a4:	f1b9 0f00 	cmp.w	r9, #0
   802a8:	d0de      	beq.n	80268 <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   802aa:	6830      	ldr	r0, [r6, #0]
   802ac:	683a      	ldr	r2, [r7, #0]
   802ae:	5d29      	ldrb	r1, [r5, r4]
   802b0:	4790      	blx	r2
   802b2:	2800      	cmp	r0, #0
   802b4:	dbed      	blt.n	80292 <_write+0x66>
			return -1;
		}
		++nChars;
   802b6:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   802ba:	45a0      	cmp	r8, r4
   802bc:	d1d4      	bne.n	80268 <_write+0x3c>
   802be:	e7ea      	b.n	80296 <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   802c0:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   802c4:	45a0      	cmp	r8, r4
   802c6:	d1cf      	bne.n	80268 <_write+0x3c>
   802c8:	e7e5      	b.n	80296 <_write+0x6a>
   802ca:	bf00      	nop

000802cc <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   802cc:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   802ce:	f04f 03ac 	mov.w	r3, #172	; 0xac
   802d2:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   802d4:	680a      	ldr	r2, [r1, #0]
   802d6:	684c      	ldr	r4, [r1, #4]
   802d8:	fbb2 f3f4 	udiv	r3, r2, r4
   802dc:	ea4f 1313 	mov.w	r3, r3, lsr #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   802e0:	f103 34ff 	add.w	r4, r3, #4294967295
   802e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   802e8:	4294      	cmp	r4, r2
   802ea:	d80c      	bhi.n	80306 <uart_init+0x3a>
		return 1;

	p_uart->UART_BRGR = cd;
   802ec:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   802ee:	6889      	ldr	r1, [r1, #8]
   802f0:	6041      	str	r1, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   802f2:	f240 2302 	movw	r3, #514	; 0x202
   802f6:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   802fa:	f04f 0250 	mov.w	r2, #80	; 0x50
   802fe:	6002      	str	r2, [r0, #0]

	return 0;
   80300:	f04f 0000 	mov.w	r0, #0
   80304:	e001      	b.n	8030a <uart_init+0x3e>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80306:	f04f 0001 	mov.w	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8030a:	bc10      	pop	{r4}
   8030c:	4770      	bx	lr
   8030e:	bf00      	nop

00080310 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80310:	6943      	ldr	r3, [r0, #20]
   80312:	f013 0f02 	tst.w	r3, #2
   80316:	d003      	beq.n	80320 <uart_write+0x10>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80318:	61c1      	str	r1, [r0, #28]
	return 0;
   8031a:	f04f 0000 	mov.w	r0, #0
   8031e:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80320:	f04f 0001 	mov.w	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80324:	4770      	bx	lr
   80326:	bf00      	nop

00080328 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80328:	6943      	ldr	r3, [r0, #20]
   8032a:	f013 0f01 	tst.w	r3, #1
   8032e:	d004      	beq.n	8033a <uart_read+0x12>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80330:	6980      	ldr	r0, [r0, #24]
   80332:	7008      	strb	r0, [r1, #0]
	return 0;
   80334:	f04f 0000 	mov.w	r0, #0
   80338:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8033a:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   8033e:	4770      	bx	lr

00080340 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80340:	6943      	ldr	r3, [r0, #20]
   80342:	f013 0f02 	tst.w	r3, #2
   80346:	d007      	beq.n	80358 <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80348:	ea4f 51c1 	mov.w	r1, r1, lsl #23
   8034c:	ea4f 52d1 	mov.w	r2, r1, lsr #23
   80350:	61c2      	str	r2, [r0, #28]
	return 0;
   80352:	f04f 0000 	mov.w	r0, #0
   80356:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80358:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8035c:	4770      	bx	lr
   8035e:	bf00      	nop

00080360 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80360:	6943      	ldr	r3, [r0, #20]
   80362:	f013 0f01 	tst.w	r3, #1
   80366:	d008      	beq.n	8037a <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80368:	6980      	ldr	r0, [r0, #24]
   8036a:	ea4f 52c0 	mov.w	r2, r0, lsl #23
   8036e:	ea4f 53d2 	mov.w	r3, r2, lsr #23
   80372:	600b      	str	r3, [r1, #0]

	return 0;
   80374:	f04f 0000 	mov.w	r0, #0
   80378:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8037a:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8037e:	4770      	bx	lr

00080380 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80380:	b5f0      	push	{r4, r5, r6, r7, lr}
   80382:	b083      	sub	sp, #12
   80384:	4604      	mov	r4, r0
   80386:	460d      	mov	r5, r1
	uint32_t val;

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80388:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8038c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80390:	4298      	cmp	r0, r3
   80392:	d10d      	bne.n	803b0 <usart_serial_getchar+0x30>
		while (uart_read((Uart*)p_usart, data));
   80394:	f44f 6600 	mov.w	r6, #2048	; 0x800
   80398:	f2c4 060e 	movt	r6, #16398	; 0x400e
   8039c:	f240 3729 	movw	r7, #809	; 0x329
   803a0:	f2c0 0708 	movt	r7, #8
   803a4:	4630      	mov	r0, r6
   803a6:	4629      	mov	r1, r5
   803a8:	47b8      	blx	r7
   803aa:	2800      	cmp	r0, #0
   803ac:	d1fa      	bne.n	803a4 <usart_serial_getchar+0x24>
   803ae:	e02b      	b.n	80408 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   803b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   803b4:	f2c4 0009 	movt	r0, #16393	; 0x4009
   803b8:	4284      	cmp	r4, r0
   803ba:	d10f      	bne.n	803dc <usart_serial_getchar+0x5c>
		while (usart_read(p_usart, &val));
   803bc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   803c0:	f2c4 0609 	movt	r6, #16393	; 0x4009
   803c4:	f240 3761 	movw	r7, #865	; 0x361
   803c8:	f2c0 0708 	movt	r7, #8
   803cc:	4630      	mov	r0, r6
   803ce:	a901      	add	r1, sp, #4
   803d0:	47b8      	blx	r7
   803d2:	2800      	cmp	r0, #0
   803d4:	d1fa      	bne.n	803cc <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
   803d6:	9b01      	ldr	r3, [sp, #4]
   803d8:	702b      	strb	r3, [r5, #0]
   803da:	e02b      	b.n	80434 <usart_serial_getchar+0xb4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   803dc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   803e0:	f2c4 0109 	movt	r1, #16393	; 0x4009
   803e4:	428c      	cmp	r4, r1
   803e6:	d10f      	bne.n	80408 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   803e8:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   803ec:	f2c4 0409 	movt	r4, #16393	; 0x4009
   803f0:	f240 3661 	movw	r6, #865	; 0x361
   803f4:	f2c0 0608 	movt	r6, #8
   803f8:	4620      	mov	r0, r4
   803fa:	a901      	add	r1, sp, #4
   803fc:	47b0      	blx	r6
   803fe:	2800      	cmp	r0, #0
   80400:	d1fa      	bne.n	803f8 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   80402:	9a01      	ldr	r2, [sp, #4]
   80404:	702a      	strb	r2, [r5, #0]
   80406:	e02a      	b.n	8045e <usart_serial_getchar+0xde>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80408:	f04f 0000 	mov.w	r0, #0
   8040c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   80410:	4284      	cmp	r4, r0
   80412:	d10f      	bne.n	80434 <usart_serial_getchar+0xb4>
		while (usart_read(p_usart, &val));
   80414:	f04f 0400 	mov.w	r4, #0
   80418:	f2c4 040a 	movt	r4, #16394	; 0x400a
   8041c:	f240 3661 	movw	r6, #865	; 0x361
   80420:	f2c0 0608 	movt	r6, #8
   80424:	4620      	mov	r0, r4
   80426:	a901      	add	r1, sp, #4
   80428:	47b0      	blx	r6
   8042a:	2800      	cmp	r0, #0
   8042c:	d1fa      	bne.n	80424 <usart_serial_getchar+0xa4>
		*data = (uint8_t)(val & 0xFF);
   8042e:	9b01      	ldr	r3, [sp, #4]
   80430:	702b      	strb	r3, [r5, #0]
   80432:	e014      	b.n	8045e <usart_serial_getchar+0xde>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80434:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80438:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8043c:	428c      	cmp	r4, r1
   8043e:	d10e      	bne.n	8045e <usart_serial_getchar+0xde>
		while (usart_read(p_usart, &val));
   80440:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   80444:	f2c4 040a 	movt	r4, #16394	; 0x400a
   80448:	f240 3661 	movw	r6, #865	; 0x361
   8044c:	f2c0 0608 	movt	r6, #8
   80450:	4620      	mov	r0, r4
   80452:	a901      	add	r1, sp, #4
   80454:	47b0      	blx	r6
   80456:	2800      	cmp	r0, #0
   80458:	d1fa      	bne.n	80450 <usart_serial_getchar+0xd0>
		*data = (uint8_t)(val & 0xFF);
   8045a:	9a01      	ldr	r2, [sp, #4]
   8045c:	702a      	strb	r2, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8045e:	b003      	add	sp, #12
   80460:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80462:	bf00      	nop

00080464 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80464:	b570      	push	{r4, r5, r6, lr}
   80466:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80468:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8046c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80470:	4298      	cmp	r0, r3
   80472:	d10f      	bne.n	80494 <usart_serial_putchar+0x30>
		while (uart_write((Uart*)p_usart, c)!=0);
   80474:	f44f 6500 	mov.w	r5, #2048	; 0x800
   80478:	f2c4 050e 	movt	r5, #16398	; 0x400e
   8047c:	f240 3611 	movw	r6, #785	; 0x311
   80480:	f2c0 0608 	movt	r6, #8
   80484:	4628      	mov	r0, r5
   80486:	4621      	mov	r1, r4
   80488:	47b0      	blx	r6
   8048a:	2800      	cmp	r0, #0
   8048c:	d1fa      	bne.n	80484 <usart_serial_putchar+0x20>
		return 1;
   8048e:	f04f 0001 	mov.w	r0, #1
   80492:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80494:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   80498:	f2c4 0109 	movt	r1, #16393	; 0x4009
   8049c:	4288      	cmp	r0, r1
   8049e:	d10f      	bne.n	804c0 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   804a0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   804a4:	f2c4 0509 	movt	r5, #16393	; 0x4009
   804a8:	f240 3641 	movw	r6, #833	; 0x341
   804ac:	f2c0 0608 	movt	r6, #8
   804b0:	4628      	mov	r0, r5
   804b2:	4621      	mov	r1, r4
   804b4:	47b0      	blx	r6
   804b6:	2800      	cmp	r0, #0
   804b8:	d1fa      	bne.n	804b0 <usart_serial_putchar+0x4c>
		return 1;
   804ba:	f04f 0001 	mov.w	r0, #1
   804be:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   804c0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   804c4:	f2c4 0209 	movt	r2, #16393	; 0x4009
   804c8:	4290      	cmp	r0, r2
   804ca:	d10f      	bne.n	804ec <usart_serial_putchar+0x88>
		while (usart_write(p_usart, c)!=0);
   804cc:	f44f 4540 	mov.w	r5, #49152	; 0xc000
   804d0:	f2c4 0509 	movt	r5, #16393	; 0x4009
   804d4:	f240 3641 	movw	r6, #833	; 0x341
   804d8:	f2c0 0608 	movt	r6, #8
   804dc:	4628      	mov	r0, r5
   804de:	4621      	mov	r1, r4
   804e0:	47b0      	blx	r6
   804e2:	2800      	cmp	r0, #0
   804e4:	d1fa      	bne.n	804dc <usart_serial_putchar+0x78>
		return 1;
   804e6:	f04f 0001 	mov.w	r0, #1
   804ea:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   804ec:	f04f 0300 	mov.w	r3, #0
   804f0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   804f4:	4298      	cmp	r0, r3
   804f6:	d10f      	bne.n	80518 <usart_serial_putchar+0xb4>
		while (usart_write(p_usart, c)!=0);
   804f8:	f04f 0500 	mov.w	r5, #0
   804fc:	f2c4 050a 	movt	r5, #16394	; 0x400a
   80500:	f240 3641 	movw	r6, #833	; 0x341
   80504:	f2c0 0608 	movt	r6, #8
   80508:	4628      	mov	r0, r5
   8050a:	4621      	mov	r1, r4
   8050c:	47b0      	blx	r6
   8050e:	2800      	cmp	r0, #0
   80510:	d1fa      	bne.n	80508 <usart_serial_putchar+0xa4>
		return 1;
   80512:	f04f 0001 	mov.w	r0, #1
   80516:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80518:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   8051c:	f2c4 010a 	movt	r1, #16394	; 0x400a
   80520:	4288      	cmp	r0, r1
   80522:	d10f      	bne.n	80544 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
   80524:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   80528:	f2c4 050a 	movt	r5, #16394	; 0x400a
   8052c:	f240 3641 	movw	r6, #833	; 0x341
   80530:	f2c0 0608 	movt	r6, #8
   80534:	4628      	mov	r0, r5
   80536:	4621      	mov	r1, r4
   80538:	47b0      	blx	r6
   8053a:	2800      	cmp	r0, #0
   8053c:	d1fa      	bne.n	80534 <usart_serial_putchar+0xd0>
		return 1;
   8053e:	f04f 0001 	mov.w	r0, #1
   80542:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80544:	f04f 0000 	mov.w	r0, #0
}
   80548:	bd70      	pop	{r4, r5, r6, pc}
   8054a:	bf00      	nop

0008054c <init_tasks>:
	configure_console();
	printf("GAH");
	init_tasks();
}

void init_tasks(void){
   8054c:	b510      	push	{r4, lr}
   8054e:	b084      	sub	sp, #16
	if(xTaskCreate(start_communication,(const signed char * const) "Communication", 2048, NULL, 1, NULL) !=pdPASS){
   80550:	f04f 0301 	mov.w	r3, #1
   80554:	9300      	str	r3, [sp, #0]
   80556:	f04f 0300 	mov.w	r3, #0
   8055a:	9301      	str	r3, [sp, #4]
   8055c:	9302      	str	r3, [sp, #8]
   8055e:	9303      	str	r3, [sp, #12]
   80560:	f240 60b5 	movw	r0, #1717	; 0x6b5
   80564:	f2c0 0008 	movt	r0, #8
   80568:	f245 51e0 	movw	r1, #21984	; 0x55e0
   8056c:	f2c0 0108 	movt	r1, #8
   80570:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80574:	f241 2401 	movw	r4, #4609	; 0x1201
   80578:	f2c0 0408 	movt	r4, #8
   8057c:	47a0      	blx	r4
   8057e:	2801      	cmp	r0, #1
   80580:	d008      	beq.n	80594 <init_tasks+0x48>
		printf("Could not create task Communication");
   80582:	f245 50f0 	movw	r0, #22000	; 0x55f0
   80586:	f2c0 0008 	movt	r0, #8
   8058a:	f642 713d 	movw	r1, #12093	; 0x2f3d
   8058e:	f2c0 0108 	movt	r1, #8
   80592:	4788      	blx	r1
	}
	vTaskStartScheduler();
   80594:	f241 40bd 	movw	r0, #5309	; 0x14bd
   80598:	f2c0 0008 	movt	r0, #8
   8059c:	4780      	blx	r0
   8059e:	b004      	add	sp, #16
   805a0:	bd10      	pop	{r4, pc}
   805a2:	bf00      	nop

000805a4 <main>:
	setbuf(stdout, NULL);
	
	#endif
}

int main(void){
   805a4:	b530      	push	{r4, r5, lr}
   805a6:	b085      	sub	sp, #20
	
	sysclk_init();
   805a8:	f242 2391 	movw	r3, #8849	; 0x2291
   805ac:	f2c0 0308 	movt	r3, #8
   805b0:	4798      	blx	r3
	board_init();
   805b2:	f242 301d 	movw	r0, #8989	; 0x231d
   805b6:	f2c0 0008 	movt	r0, #8
   805ba:	4780      	blx	r0
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   805bc:	f04f 000b 	mov.w	r0, #11
   805c0:	f642 146d 	movw	r4, #10605	; 0x296d
   805c4:	f2c0 0408 	movt	r4, #8
   805c8:	47a0      	blx	r4
   805ca:	f04f 000c 	mov.w	r0, #12
   805ce:	47a0      	blx	r4
   805d0:	f04f 000d 	mov.w	r0, #13
   805d4:	47a0      	blx	r4
   805d6:	f04f 000e 	mov.w	r0, #14
   805da:	47a0      	blx	r4
   805dc:	f04f 0008 	mov.w	r0, #8
   805e0:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   805e2:	f44f 6500 	mov.w	r5, #2048	; 0x800
   805e6:	f2c4 050e 	movt	r5, #16398	; 0x400e
   805ea:	f648 3148 	movw	r1, #35656	; 0x8b48
   805ee:	f2c2 0107 	movt	r1, #8199	; 0x2007
   805f2:	600d      	str	r5, [r1, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   805f4:	f648 3344 	movw	r3, #35652	; 0x8b44
   805f8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   805fc:	f240 4265 	movw	r2, #1125	; 0x465
   80600:	f2c0 0208 	movt	r2, #8
   80604:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80606:	f648 3040 	movw	r0, #35648	; 0x8b40
   8060a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8060e:	f240 3181 	movw	r1, #897	; 0x381
   80612:	f2c0 0108 	movt	r1, #8
   80616:	6001      	str	r1, [r0, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80618:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
   8061c:	f2c0 5301 	movt	r3, #1281	; 0x501
   80620:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   80622:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   80626:	9201      	str	r2, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   80628:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8062c:	9002      	str	r0, [sp, #8]
   8062e:	f04f 0008 	mov.w	r0, #8
   80632:	47a0      	blx	r4
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80634:	4628      	mov	r0, r5
   80636:	4669      	mov	r1, sp
   80638:	f240 24cd 	movw	r4, #717	; 0x2cd
   8063c:	f2c0 0408 	movt	r4, #8
   80640:	47a0      	blx	r4
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80642:	f240 0510 	movw	r5, #16
   80646:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8064a:	6829      	ldr	r1, [r5, #0]
   8064c:	6888      	ldr	r0, [r1, #8]
   8064e:	f04f 0100 	mov.w	r1, #0
   80652:	f642 749f 	movw	r4, #12191	; 0x2f9f
   80656:	f2c0 0408 	movt	r4, #8
   8065a:	47a0      	blx	r4
	setbuf(stdin, NULL);
   8065c:	682b      	ldr	r3, [r5, #0]
   8065e:	6858      	ldr	r0, [r3, #4]
   80660:	f04f 0100 	mov.w	r1, #0
   80664:	47a0      	blx	r4
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   80666:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   8066a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8066e:	f44f 7280 	mov.w	r2, #256	; 0x100
   80672:	6642      	str	r2, [r0, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80674:	6542      	str	r2, [r0, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80676:	6242      	str	r2, [r0, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80678:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   8067c:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8067e:	f421 7380 	bic.w	r3, r1, #256	; 0x100
   80682:	6703      	str	r3, [r0, #112]	; 0x70
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	/* Specifiera att stdout inte ska buffras */
	ioport_set_pin_mode(PIO_PA8_IDX,IOPORT_MODE_PULLUP);
	#if defined(__GNUC__)
	setbuf(stdout, NULL);
   80684:	6828      	ldr	r0, [r5, #0]
   80686:	6880      	ldr	r0, [r0, #8]
   80688:	f04f 0100 	mov.w	r1, #0
   8068c:	47a0      	blx	r4
	
	sysclk_init();
	board_init();
	ioport_init();
	configure_console();
	printf("GAH");
   8068e:	f245 6014 	movw	r0, #22036	; 0x5614
   80692:	f2c0 0008 	movt	r0, #8
   80696:	f642 723d 	movw	r2, #12093	; 0x2f3d
   8069a:	f2c0 0208 	movt	r2, #8
   8069e:	4790      	blx	r2
	init_tasks();
   806a0:	f240 514d 	movw	r1, #1357	; 0x54d
   806a4:	f2c0 0108 	movt	r1, #8
   806a8:	4788      	blx	r1
}
   806aa:	f04f 0000 	mov.w	r0, #0
   806ae:	b005      	add	sp, #20
   806b0:	bd30      	pop	{r4, r5, pc}
   806b2:	bf00      	nop

000806b4 <start_communication>:
 *  Author: ad2302
 */ 
#include <asf.h>
#include "serial_communication.h"

void start_communication(void *p){
   806b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   806b8:	b083      	sub	sp, #12
	
 	portTickType xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
   806ba:	f241 5359 	movw	r3, #5465	; 0x1559
   806be:	f2c0 0308 	movt	r3, #8
   806c2:	4798      	blx	r3
   806c4:	ad02      	add	r5, sp, #8
   806c6:	f825 0d02 	strh.w	r0, [r5, #-2]!
 	int i = 0;
   806ca:	f04f 0400 	mov.w	r4, #0
 	while(1){
 		i++;
		printf("Send %d\n\r",i);
   806ce:	f245 6918 	movw	r9, #22040	; 0x5618
   806d2:	f2c0 0908 	movt	r9, #8
   806d6:	f642 783d 	movw	r8, #12093	; 0x2f3d
   806da:	f2c0 0808 	movt	r8, #8
 		vTaskDelayUntil(&xLastWakeTime,COMMUNICATION_SAMPLE_TIME);
   806de:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
   806e2:	f641 1609 	movw	r6, #6409	; 0x1909
   806e6:	f2c0 0608 	movt	r6, #8
	
 	portTickType xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 	int i = 0;
 	while(1){
 		i++;
   806ea:	f104 0401 	add.w	r4, r4, #1
		printf("Send %d\n\r",i);
   806ee:	4648      	mov	r0, r9
   806f0:	4621      	mov	r1, r4
   806f2:	47c0      	blx	r8
 		vTaskDelayUntil(&xLastWakeTime,COMMUNICATION_SAMPLE_TIME);
   806f4:	4628      	mov	r0, r5
   806f6:	4639      	mov	r1, r7
   806f8:	47b0      	blx	r6
   806fa:	e7f6      	b.n	806ea <start_communication+0x36>

000806fc <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   806fc:	f100 0308 	add.w	r3, r0, #8
   80700:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80702:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80706:	8102      	strh	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   80708:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   8070a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   8070c:	f04f 0100 	mov.w	r1, #0
   80710:	6001      	str	r1, [r0, #0]
   80712:	4770      	bx	lr

00080714 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   80714:	f04f 0300 	mov.w	r3, #0
   80718:	6103      	str	r3, [r0, #16]
   8071a:	4770      	bx	lr

0008071c <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   8071c:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   8071e:	685a      	ldr	r2, [r3, #4]
   80720:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80722:	6842      	ldr	r2, [r0, #4]
   80724:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80726:	685a      	ldr	r2, [r3, #4]
   80728:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8072a:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   8072c:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8072e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80730:	6801      	ldr	r1, [r0, #0]
   80732:	f101 0101 	add.w	r1, r1, #1
   80736:	6001      	str	r1, [r0, #0]
   80738:	4770      	bx	lr
   8073a:	bf00      	nop

0008073c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   8073c:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   8073e:	880c      	ldrh	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80740:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80744:	429c      	cmp	r4, r3
   80746:	d101      	bne.n	8074c <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   80748:	6903      	ldr	r3, [r0, #16]
   8074a:	e00c      	b.n	80766 <vListInsert+0x2a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   8074c:	f100 0308 	add.w	r3, r0, #8
   80750:	68c2      	ldr	r2, [r0, #12]
   80752:	8812      	ldrh	r2, [r2, #0]
   80754:	b292      	uxth	r2, r2
   80756:	4294      	cmp	r4, r2
   80758:	d305      	bcc.n	80766 <vListInsert+0x2a>
   8075a:	685b      	ldr	r3, [r3, #4]
   8075c:	685a      	ldr	r2, [r3, #4]
   8075e:	8812      	ldrh	r2, [r2, #0]
   80760:	b292      	uxth	r2, r2
   80762:	4294      	cmp	r4, r2
   80764:	d2f9      	bcs.n	8075a <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80766:	685a      	ldr	r2, [r3, #4]
   80768:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8076a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   8076c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   8076e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80770:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80772:	6801      	ldr	r1, [r0, #0]
   80774:	f101 0101 	add.w	r1, r1, #1
   80778:	6001      	str	r1, [r0, #0]
}
   8077a:	bc10      	pop	{r4}
   8077c:	4770      	bx	lr
   8077e:	bf00      	nop

00080780 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80780:	6843      	ldr	r3, [r0, #4]
   80782:	6882      	ldr	r2, [r0, #8]
   80784:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80786:	6881      	ldr	r1, [r0, #8]
   80788:	6843      	ldr	r3, [r0, #4]
   8078a:	604b      	str	r3, [r1, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   8078c:	6901      	ldr	r1, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8078e:	684a      	ldr	r2, [r1, #4]
   80790:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80792:	bf04      	itt	eq
   80794:	6882      	ldreq	r2, [r0, #8]
   80796:	604a      	streq	r2, [r1, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80798:	f04f 0300 	mov.w	r3, #0
   8079c:	6103      	str	r3, [r0, #16]
	( pxList->uxNumberOfItems )--;
   8079e:	6808      	ldr	r0, [r1, #0]
   807a0:	f100 32ff 	add.w	r2, r0, #4294967295
   807a4:	600a      	str	r2, [r1, #0]

	return pxList->uxNumberOfItems;
   807a6:	6808      	ldr	r0, [r1, #0]
}
   807a8:	4770      	bx	lr
   807aa:	bf00      	nop

000807ac <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   807ac:	4803      	ldr	r0, [pc, #12]	; (807bc <prvPortStartFirstTask+0x10>)
   807ae:	6800      	ldr	r0, [r0, #0]
   807b0:	6800      	ldr	r0, [r0, #0]
   807b2:	f380 8808 	msr	MSP, r0
   807b6:	b662      	cpsie	i
   807b8:	df00      	svc	0
   807ba:	bf00      	nop
   807bc:	e000ed08 	.word	0xe000ed08

000807c0 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   807c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   807c4:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   807c8:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   807cc:	f04f 0100 	mov.w	r1, #0
   807d0:	f840 1c0c 	str.w	r1, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   807d4:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   807d8:	f1a0 0040 	sub.w	r0, r0, #64	; 0x40
   807dc:	4770      	bx	lr
   807de:	bf00      	nop

000807e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   807e0:	4b06      	ldr	r3, [pc, #24]	; (807fc <pxCurrentTCBConst2>)
   807e2:	6819      	ldr	r1, [r3, #0]
   807e4:	6808      	ldr	r0, [r1, #0]
   807e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   807ea:	f380 8809 	msr	PSP, r0
   807ee:	f04f 0000 	mov.w	r0, #0
   807f2:	f380 8811 	msr	BASEPRI, r0
   807f6:	f04e 0e0d 	orr.w	lr, lr, #13
   807fa:	4770      	bx	lr

000807fc <pxCurrentTCBConst2>:
   807fc:	20078a18 	.word	0x20078a18

00080800 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80800:	f64e 5304 	movw	r3, #60676	; 0xed04
   80804:	f2ce 0300 	movt	r3, #57344	; 0xe000
   80808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8080c:	601a      	str	r2, [r3, #0]
   8080e:	4770      	bx	lr

00080810 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80810:	f3ef 8011 	mrs	r0, BASEPRI
   80814:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80818:	f381 8811 	msr	BASEPRI, r1
   8081c:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   8081e:	f04f 0000 	mov.w	r0, #0
   80822:	bf00      	nop

00080824 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   80824:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   80826:	f640 0311 	movw	r3, #2065	; 0x811
   8082a:	f2c0 0308 	movt	r3, #8
   8082e:	4798      	blx	r3
	uxCriticalNesting++;
   80830:	f240 0000 	movw	r0, #0
   80834:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80838:	6802      	ldr	r2, [r0, #0]
   8083a:	f102 0201 	add.w	r2, r2, #1
   8083e:	6002      	str	r2, [r0, #0]
   80840:	bd08      	pop	{r3, pc}
   80842:	bf00      	nop

00080844 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80844:	f380 8811 	msr	BASEPRI, r0
   80848:	4770      	bx	lr
   8084a:	bf00      	nop

0008084c <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   8084c:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   8084e:	f240 0200 	movw	r2, #0
   80852:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80856:	6813      	ldr	r3, [r2, #0]
   80858:	f103 30ff 	add.w	r0, r3, #4294967295
   8085c:	6010      	str	r0, [r2, #0]
	if( uxCriticalNesting == 0 )
   8085e:	b930      	cbnz	r0, 8086e <vPortExitCritical+0x22>
	{
		portENABLE_INTERRUPTS();
   80860:	f04f 0000 	mov.w	r0, #0
   80864:	f640 0145 	movw	r1, #2117	; 0x845
   80868:	f2c0 0108 	movt	r1, #8
   8086c:	4788      	blx	r1
   8086e:	bd08      	pop	{r3, pc}

00080870 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80870:	f3ef 8009 	mrs	r0, PSP
   80874:	4b0c      	ldr	r3, [pc, #48]	; (808a8 <pxCurrentTCBConst>)
   80876:	681a      	ldr	r2, [r3, #0]
   80878:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8087c:	6010      	str	r0, [r2, #0]
   8087e:	e92d 4008 	stmdb	sp!, {r3, lr}
   80882:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80886:	f380 8811 	msr	BASEPRI, r0
   8088a:	f001 f89b 	bl	819c4 <vTaskSwitchContext>
   8088e:	f04f 0000 	mov.w	r0, #0
   80892:	f380 8811 	msr	BASEPRI, r0
   80896:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8089a:	6819      	ldr	r1, [r3, #0]
   8089c:	6808      	ldr	r0, [r1, #0]
   8089e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   808a2:	f380 8809 	msr	PSP, r0
   808a6:	4770      	bx	lr

000808a8 <pxCurrentTCBConst>:
   808a8:	20078a18 	.word	0x20078a18

000808ac <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   808ac:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   808ae:	f64e 5304 	movw	r3, #60676	; 0xed04
   808b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
   808b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   808ba:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   808bc:	f640 0011 	movw	r0, #2065	; 0x811
   808c0:	f2c0 0008 	movt	r0, #8
   808c4:	4780      	blx	r0
	{
		vTaskIncrementTick();
   808c6:	f241 5181 	movw	r1, #5505	; 0x1581
   808ca:	f2c0 0108 	movt	r1, #8
   808ce:	4788      	blx	r1
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   808d0:	f04f 0000 	mov.w	r0, #0
   808d4:	f640 0345 	movw	r3, #2117	; 0x845
   808d8:	f2c0 0308 	movt	r3, #8
   808dc:	4798      	blx	r3
   808de:	bd08      	pop	{r3, pc}

000808e0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   808e0:	f24e 0314 	movw	r3, #57364	; 0xe014
   808e4:	f2ce 0300 	movt	r3, #57344	; 0xe000
   808e8:	f644 021f 	movw	r2, #18463	; 0x481f
   808ec:	f2c0 0201 	movt	r2, #1
   808f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   808f2:	f24e 0010 	movw	r0, #57360	; 0xe010
   808f6:	f2ce 0000 	movt	r0, #57344	; 0xe000
   808fa:	f04f 0107 	mov.w	r1, #7
   808fe:	6001      	str	r1, [r0, #0]
   80900:	4770      	bx	lr
   80902:	bf00      	nop

00080904 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   80904:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   80906:	f64e 5320 	movw	r3, #60704	; 0xed20
   8090a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8090e:	681a      	ldr	r2, [r3, #0]
   80910:	f442 0070 	orr.w	r0, r2, #15728640	; 0xf00000
   80914:	6018      	str	r0, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80916:	6819      	ldr	r1, [r3, #0]
   80918:	f041 4470 	orr.w	r4, r1, #4026531840	; 0xf0000000
   8091c:	601c      	str	r4, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   8091e:	f640 03e1 	movw	r3, #2273	; 0x8e1
   80922:	f2c0 0308 	movt	r3, #8
   80926:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   80928:	f04f 0400 	mov.w	r4, #0
   8092c:	f240 0200 	movw	r2, #0
   80930:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80934:	6014      	str	r4, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   80936:	f240 70ad 	movw	r0, #1965	; 0x7ad
   8093a:	f2c0 0008 	movt	r0, #8
   8093e:	4780      	blx	r0

	/* Should not get here! */
	return 0;
}
   80940:	4620      	mov	r0, r4
   80942:	bd10      	pop	{r4, pc}

00080944 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   80944:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   80946:	f648 02f4 	movw	r2, #35060	; 0x88f4
   8094a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8094e:	e000      	b.n	80952 <prvInsertBlockIntoFreeList+0xe>
   80950:	461a      	mov	r2, r3
   80952:	6813      	ldr	r3, [r2, #0]
   80954:	4283      	cmp	r3, r0
   80956:	d3fb      	bcc.n	80950 <prvInsertBlockIntoFreeList+0xc>
   80958:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   8095a:	6854      	ldr	r4, [r2, #4]
   8095c:	1915      	adds	r5, r2, r4
   8095e:	4285      	cmp	r5, r0
   80960:	d103      	bne.n	8096a <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   80962:	6868      	ldr	r0, [r5, #4]
   80964:	1904      	adds	r4, r0, r4
   80966:	6054      	str	r4, [r2, #4]
   80968:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   8096a:	6842      	ldr	r2, [r0, #4]
   8096c:	1884      	adds	r4, r0, r2
   8096e:	42a3      	cmp	r3, r4
   80970:	d10f      	bne.n	80992 <prvInsertBlockIntoFreeList+0x4e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   80972:	f648 04f0 	movw	r4, #35056	; 0x88f0
   80976:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8097a:	6824      	ldr	r4, [r4, #0]
   8097c:	429c      	cmp	r4, r3
   8097e:	d006      	beq.n	8098e <prvInsertBlockIntoFreeList+0x4a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   80980:	685b      	ldr	r3, [r3, #4]
   80982:	189a      	adds	r2, r3, r2
   80984:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   80986:	680b      	ldr	r3, [r1, #0]
   80988:	681a      	ldr	r2, [r3, #0]
   8098a:	6002      	str	r2, [r0, #0]
   8098c:	e002      	b.n	80994 <prvInsertBlockIntoFreeList+0x50>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   8098e:	6003      	str	r3, [r0, #0]
   80990:	e000      	b.n	80994 <prvInsertBlockIntoFreeList+0x50>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   80992:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   80994:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   80996:	bf18      	it	ne
   80998:	6008      	strne	r0, [r1, #0]
	}
}
   8099a:	bc30      	pop	{r4, r5}
   8099c:	4770      	bx	lr
   8099e:	bf00      	nop

000809a0 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   809a0:	b538      	push	{r3, r4, r5, lr}
   809a2:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   809a4:	f241 5345 	movw	r3, #5445	; 0x1545
   809a8:	f2c0 0308 	movt	r3, #8
   809ac:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   809ae:	f648 00f0 	movw	r0, #35056	; 0x88f0
   809b2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   809b6:	6801      	ldr	r1, [r0, #0]
   809b8:	bb11      	cbnz	r1, 80a00 <pvPortMalloc+0x60>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   809ba:	f648 02f4 	movw	r2, #35060	; 0x88f4
   809be:	f2c2 0207 	movt	r2, #8199	; 0x2007
   809c2:	f640 03f0 	movw	r3, #2288	; 0x8f0
   809c6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   809ca:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   809cc:	f04f 0100 	mov.w	r1, #0
   809d0:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   809d2:	f503 42ff 	add.w	r2, r3, #32640	; 0x7f80
   809d6:	f102 0070 	add.w	r0, r2, #112	; 0x70
   809da:	f648 05f0 	movw	r5, #35056	; 0x88f0
   809de:	f2c2 0507 	movt	r5, #8199	; 0x2007
   809e2:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   809e4:	6751      	str	r1, [r2, #116]	; 0x74
	pxEnd->pxNextFreeBlock = NULL;
   809e6:	6711      	str	r1, [r2, #112]	; 0x70

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   809e8:	f647 71f0 	movw	r1, #32752	; 0x7ff0
   809ec:	6059      	str	r1, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   809ee:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   809f0:	f240 0304 	movw	r3, #4
   809f4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   809f8:	681a      	ldr	r2, [r3, #0]
   809fa:	f1a2 0210 	sub.w	r2, r2, #16
   809fe:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   80a00:	2c00      	cmp	r4, #0
   80a02:	d03c      	beq.n	80a7e <pvPortMalloc+0xde>
		{
			xWantedSize += heapSTRUCT_SIZE;
   80a04:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80a08:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80a0c:	bf1c      	itt	ne
   80a0e:	f022 0207 	bicne.w	r2, r2, #7
   80a12:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   80a14:	f102 30ff 	add.w	r0, r2, #4294967295
   80a18:	f647 75fe 	movw	r5, #32766	; 0x7ffe
   80a1c:	42a8      	cmp	r0, r5
   80a1e:	d831      	bhi.n	80a84 <pvPortMalloc+0xe4>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   80a20:	f648 01f4 	movw	r1, #35060	; 0x88f4
   80a24:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80a28:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80a2a:	e001      	b.n	80a30 <pvPortMalloc+0x90>
   80a2c:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   80a2e:	4604      	mov	r4, r0
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80a30:	6863      	ldr	r3, [r4, #4]
   80a32:	429a      	cmp	r2, r3
   80a34:	d902      	bls.n	80a3c <pvPortMalloc+0x9c>
   80a36:	6820      	ldr	r0, [r4, #0]
   80a38:	2800      	cmp	r0, #0
   80a3a:	d1f7      	bne.n	80a2c <pvPortMalloc+0x8c>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   80a3c:	f648 05f0 	movw	r5, #35056	; 0x88f0
   80a40:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80a44:	682b      	ldr	r3, [r5, #0]
   80a46:	429c      	cmp	r4, r3
   80a48:	d01f      	beq.n	80a8a <pvPortMalloc+0xea>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   80a4a:	680d      	ldr	r5, [r1, #0]
   80a4c:	f105 0510 	add.w	r5, r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   80a50:	6820      	ldr	r0, [r4, #0]
   80a52:	6008      	str	r0, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   80a54:	6861      	ldr	r1, [r4, #4]
   80a56:	1a8b      	subs	r3, r1, r2
   80a58:	2b20      	cmp	r3, #32
   80a5a:	d907      	bls.n	80a6c <pvPortMalloc+0xcc>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   80a5c:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   80a5e:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   80a60:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   80a62:	f640 1245 	movw	r2, #2373	; 0x945
   80a66:	f2c0 0208 	movt	r2, #8
   80a6a:	4790      	blx	r2
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   80a6c:	f240 0004 	movw	r0, #4
   80a70:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80a74:	6803      	ldr	r3, [r0, #0]
   80a76:	6861      	ldr	r1, [r4, #4]
   80a78:	1a5a      	subs	r2, r3, r1
   80a7a:	6002      	str	r2, [r0, #0]
   80a7c:	e007      	b.n	80a8e <pvPortMalloc+0xee>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   80a7e:	f04f 0500 	mov.w	r5, #0
   80a82:	e004      	b.n	80a8e <pvPortMalloc+0xee>
   80a84:	f04f 0500 	mov.w	r5, #0
   80a88:	e001      	b.n	80a8e <pvPortMalloc+0xee>
   80a8a:	f04f 0500 	mov.w	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   80a8e:	f241 701d 	movw	r0, #5917	; 0x171d
   80a92:	f2c0 0008 	movt	r0, #8
   80a96:	4780      	blx	r0
		}
	}
	#endif

	return pvReturn;
}
   80a98:	4628      	mov	r0, r5
   80a9a:	bd38      	pop	{r3, r4, r5, pc}

00080a9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   80a9c:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   80a9e:	4604      	mov	r4, r0
   80aa0:	b1c8      	cbz	r0, 80ad6 <vPortFree+0x3a>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   80aa2:	f241 5345 	movw	r3, #5445	; 0x1545
   80aa6:	f2c0 0308 	movt	r3, #8
   80aaa:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   80aac:	f240 0004 	movw	r0, #4
   80ab0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80ab4:	6801      	ldr	r1, [r0, #0]
   80ab6:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   80aba:	188b      	adds	r3, r1, r2
   80abc:	6003      	str	r3, [r0, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   80abe:	f1a4 0010 	sub.w	r0, r4, #16
   80ac2:	f640 1145 	movw	r1, #2373	; 0x945
   80ac6:	f2c0 0108 	movt	r1, #8
   80aca:	4788      	blx	r1
		}
		xTaskResumeAll();
   80acc:	f241 701d 	movw	r0, #5917	; 0x171d
   80ad0:	f2c0 0008 	movt	r0, #8
   80ad4:	4780      	blx	r0
   80ad6:	bd10      	pop	{r4, pc}

00080ad8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   80ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80ada:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   80adc:	f640 0325 	movw	r3, #2085	; 0x825
   80ae0:	f2c0 0308 	movt	r3, #8
   80ae4:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80ae6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   80ae8:	2800      	cmp	r0, #0
   80aea:	dd1a      	ble.n	80b22 <prvUnlockQueue+0x4a>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80aec:	6a61      	ldr	r1, [r4, #36]	; 0x24
   80aee:	b919      	cbnz	r1, 80af8 <prvUnlockQueue+0x20>
   80af0:	e017      	b.n	80b22 <prvUnlockQueue+0x4a>
   80af2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   80af4:	b951      	cbnz	r1, 80b0c <prvUnlockQueue+0x34>
   80af6:	e014      	b.n	80b22 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80af8:	f104 0624 	add.w	r6, r4, #36	; 0x24
   80afc:	f641 3555 	movw	r5, #6997	; 0x1b55
   80b00:	f2c0 0508 	movt	r5, #8
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80b04:	f641 47e1 	movw	r7, #7393	; 0x1ce1
   80b08:	f2c0 0708 	movt	r7, #8
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80b0c:	4630      	mov	r0, r6
   80b0e:	47a8      	blx	r5
   80b10:	b100      	cbz	r0, 80b14 <prvUnlockQueue+0x3c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80b12:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   80b14:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   80b16:	f102 33ff 	add.w	r3, r2, #4294967295
   80b1a:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80b1c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   80b1e:	2800      	cmp	r0, #0
   80b20:	dce7      	bgt.n	80af2 <prvUnlockQueue+0x1a>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   80b22:	f04f 32ff 	mov.w	r2, #4294967295
   80b26:	64a2      	str	r2, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   80b28:	f640 034d 	movw	r3, #2125	; 0x84d
   80b2c:	f2c0 0308 	movt	r3, #8
   80b30:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   80b32:	f640 0025 	movw	r0, #2085	; 0x825
   80b36:	f2c0 0008 	movt	r0, #8
   80b3a:	4780      	blx	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80b3c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   80b3e:	2900      	cmp	r1, #0
   80b40:	dd1a      	ble.n	80b78 <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80b42:	6922      	ldr	r2, [r4, #16]
   80b44:	b91a      	cbnz	r2, 80b4e <prvUnlockQueue+0x76>
   80b46:	e017      	b.n	80b78 <prvUnlockQueue+0xa0>
   80b48:	6922      	ldr	r2, [r4, #16]
   80b4a:	b952      	cbnz	r2, 80b62 <prvUnlockQueue+0x8a>
   80b4c:	e014      	b.n	80b78 <prvUnlockQueue+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80b4e:	f104 0610 	add.w	r6, r4, #16
   80b52:	f641 3555 	movw	r5, #6997	; 0x1b55
   80b56:	f2c0 0508 	movt	r5, #8
				{
					vTaskMissedYield();
   80b5a:	f641 47e1 	movw	r7, #7393	; 0x1ce1
   80b5e:	f2c0 0708 	movt	r7, #8
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80b62:	4630      	mov	r0, r6
   80b64:	47a8      	blx	r5
   80b66:	b100      	cbz	r0, 80b6a <prvUnlockQueue+0x92>
				{
					vTaskMissedYield();
   80b68:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   80b6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80b6c:	f103 30ff 	add.w	r0, r3, #4294967295
   80b70:	6460      	str	r0, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80b72:	6c61      	ldr	r1, [r4, #68]	; 0x44
   80b74:	2900      	cmp	r1, #0
   80b76:	dce7      	bgt.n	80b48 <prvUnlockQueue+0x70>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   80b78:	f04f 33ff 	mov.w	r3, #4294967295
   80b7c:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80b7e:	f640 004d 	movw	r0, #2125	; 0x84d
   80b82:	f2c0 0008 	movt	r0, #8
   80b86:	4780      	blx	r0
   80b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80b8a:	bf00      	nop

00080b8c <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80b8c:	b538      	push	{r3, r4, r5, lr}
   80b8e:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80b90:	6805      	ldr	r5, [r0, #0]
   80b92:	b175      	cbz	r5, 80bb2 <prvCopyDataFromQueue+0x26>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   80b94:	6c02      	ldr	r2, [r0, #64]	; 0x40
   80b96:	68c4      	ldr	r4, [r0, #12]
   80b98:	18a4      	adds	r4, r4, r2
   80b9a:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   80b9c:	6840      	ldr	r0, [r0, #4]
   80b9e:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   80ba0:	bf28      	it	cs
   80ba2:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   80ba4:	4608      	mov	r0, r1
   80ba6:	68d9      	ldr	r1, [r3, #12]
   80ba8:	f642 737d 	movw	r3, #12157	; 0x2f7d
   80bac:	f2c0 0308 	movt	r3, #8
   80bb0:	4798      	blx	r3
   80bb2:	bd38      	pop	{r3, r4, r5, pc}

00080bb4 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80bb4:	b510      	push	{r4, lr}
   80bb6:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80bb8:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80bba:	b963      	cbnz	r3, 80bd6 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80bbc:	6801      	ldr	r1, [r0, #0]
   80bbe:	2900      	cmp	r1, #0
   80bc0:	d12e      	bne.n	80c20 <prvCopyDataToQueue+0x6c>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80bc2:	6840      	ldr	r0, [r0, #4]
   80bc4:	f641 53cd 	movw	r3, #7629	; 0x1dcd
   80bc8:	f2c0 0308 	movt	r3, #8
   80bcc:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80bce:	f04f 0000 	mov.w	r0, #0
   80bd2:	6060      	str	r0, [r4, #4]
   80bd4:	e024      	b.n	80c20 <prvCopyDataToQueue+0x6c>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   80bd6:	b982      	cbnz	r2, 80bfa <prvCopyDataToQueue+0x46>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80bd8:	6880      	ldr	r0, [r0, #8]
   80bda:	461a      	mov	r2, r3
   80bdc:	f642 737d 	movw	r3, #12157	; 0x2f7d
   80be0:	f2c0 0308 	movt	r3, #8
   80be4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80be6:	68a2      	ldr	r2, [r4, #8]
   80be8:	6c21      	ldr	r1, [r4, #64]	; 0x40
   80bea:	1850      	adds	r0, r2, r1
   80bec:	60a0      	str	r0, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80bee:	6863      	ldr	r3, [r4, #4]
   80bf0:	4298      	cmp	r0, r3
   80bf2:	d315      	bcc.n	80c20 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80bf4:	6822      	ldr	r2, [r4, #0]
   80bf6:	60a2      	str	r2, [r4, #8]
   80bf8:	e012      	b.n	80c20 <prvCopyDataToQueue+0x6c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80bfa:	68c0      	ldr	r0, [r0, #12]
   80bfc:	461a      	mov	r2, r3
   80bfe:	f642 737d 	movw	r3, #12157	; 0x2f7d
   80c02:	f2c0 0308 	movt	r3, #8
   80c06:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80c08:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80c0a:	f1c2 0000 	rsb	r0, r2, #0
   80c0e:	68e1      	ldr	r1, [r4, #12]
   80c10:	180b      	adds	r3, r1, r0
   80c12:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   80c14:	6822      	ldr	r2, [r4, #0]
   80c16:	4293      	cmp	r3, r2
   80c18:	d202      	bcs.n	80c20 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80c1a:	6861      	ldr	r1, [r4, #4]
   80c1c:	1808      	adds	r0, r1, r0
   80c1e:	60e0      	str	r0, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80c20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80c22:	f102 0201 	add.w	r2, r2, #1
   80c26:	63a2      	str	r2, [r4, #56]	; 0x38
   80c28:	bd10      	pop	{r4, pc}
   80c2a:	bf00      	nop

00080c2c <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   80c2c:	b538      	push	{r3, r4, r5, lr}
   80c2e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   80c30:	4604      	mov	r4, r0
   80c32:	b930      	cbnz	r0, 80c42 <xQueueGenericReset+0x16>
   80c34:	f640 0411 	movw	r4, #2065	; 0x811
   80c38:	f2c0 0408 	movt	r4, #8
   80c3c:	47a0      	blx	r4
   80c3e:	bf00      	nop
   80c40:	e7fd      	b.n	80c3e <xQueueGenericReset+0x12>

	taskENTER_CRITICAL();
   80c42:	f640 0325 	movw	r3, #2085	; 0x825
   80c46:	f2c0 0308 	movt	r3, #8
   80c4a:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80c4c:	6823      	ldr	r3, [r4, #0]
   80c4e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   80c50:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80c52:	fb00 3102 	mla	r1, r0, r2, r3
   80c56:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   80c58:	f04f 0100 	mov.w	r1, #0
   80c5c:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   80c5e:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80c60:	f100 30ff 	add.w	r0, r0, #4294967295
   80c64:	fb02 3300 	mla	r3, r2, r0, r3
   80c68:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   80c6a:	f04f 32ff 	mov.w	r2, #4294967295
   80c6e:	6462      	str	r2, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   80c70:	64a2      	str	r2, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   80c72:	b985      	cbnz	r5, 80c96 <xQueueGenericReset+0x6a>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80c74:	6921      	ldr	r1, [r4, #16]
   80c76:	b1c1      	cbz	r1, 80caa <xQueueGenericReset+0x7e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80c78:	f104 0010 	add.w	r0, r4, #16
   80c7c:	f641 3355 	movw	r3, #6997	; 0x1b55
   80c80:	f2c0 0308 	movt	r3, #8
   80c84:	4798      	blx	r3
   80c86:	2801      	cmp	r0, #1
   80c88:	d10f      	bne.n	80caa <xQueueGenericReset+0x7e>
				{
					portYIELD_WITHIN_API();
   80c8a:	f640 0001 	movw	r0, #2049	; 0x801
   80c8e:	f2c0 0008 	movt	r0, #8
   80c92:	4780      	blx	r0
   80c94:	e009      	b.n	80caa <xQueueGenericReset+0x7e>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80c96:	f104 0010 	add.w	r0, r4, #16
   80c9a:	f240 65fd 	movw	r5, #1789	; 0x6fd
   80c9e:	f2c0 0508 	movt	r5, #8
   80ca2:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   80ca4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80ca8:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   80caa:	f640 024d 	movw	r2, #2125	; 0x84d
   80cae:	f2c0 0208 	movt	r2, #8
   80cb2:	4790      	blx	r2

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   80cb4:	f04f 0001 	mov.w	r0, #1
   80cb8:	bd38      	pop	{r3, r4, r5, pc}
   80cba:	bf00      	nop

00080cbc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   80cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80cbe:	460d      	mov	r5, r1
   80cc0:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   80cc2:	4606      	mov	r6, r0
   80cc4:	b1e0      	cbz	r0, 80d00 <xQueueGenericCreate+0x44>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   80cc6:	f04f 0050 	mov.w	r0, #80	; 0x50
   80cca:	f640 13a1 	movw	r3, #2465	; 0x9a1
   80cce:	f2c0 0308 	movt	r3, #8
   80cd2:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80cd4:	4604      	mov	r4, r0
   80cd6:	b198      	cbz	r0, 80d00 <xQueueGenericCreate+0x44>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   80cd8:	fb06 f005 	mul.w	r0, r6, r5

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   80cdc:	f100 0001 	add.w	r0, r0, #1
   80ce0:	f640 11a1 	movw	r1, #2465	; 0x9a1
   80ce4:	f2c0 0108 	movt	r1, #8
   80ce8:	4788      	blx	r1
   80cea:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   80cec:	b970      	cbnz	r0, 80d0c <xQueueGenericCreate+0x50>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   80cee:	4620      	mov	r0, r4
   80cf0:	f640 229d 	movw	r2, #2717	; 0xa9d
   80cf4:	f2c0 0208 	movt	r2, #8
   80cf8:	4790      	blx	r2
   80cfa:	e001      	b.n	80d00 <xQueueGenericCreate+0x44>
			}
		}
	}

	configASSERT( xReturn );
   80cfc:	bf00      	nop
   80cfe:	e7fd      	b.n	80cfc <xQueueGenericCreate+0x40>
   80d00:	f640 0011 	movw	r0, #2065	; 0x811
   80d04:	f2c0 0008 	movt	r0, #8
   80d08:	4780      	blx	r0
   80d0a:	e7f7      	b.n	80cfc <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   80d0c:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   80d0e:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   80d10:	4620      	mov	r0, r4
   80d12:	f04f 0101 	mov.w	r1, #1
   80d16:	f640 432d 	movw	r3, #3117	; 0xc2d
   80d1a:	f2c0 0308 	movt	r3, #8
   80d1e:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   80d20:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   80d24:	4620      	mov	r0, r4
   80d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00080d28 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   80d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80d2c:	b085      	sub	sp, #20
   80d2e:	468a      	mov	sl, r1
   80d30:	469b      	mov	fp, r3
   80d32:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   80d36:	4604      	mov	r4, r0
   80d38:	b930      	cbnz	r0, 80d48 <xQueueGenericSend+0x20>
   80d3a:	f640 0411 	movw	r4, #2065	; 0x811
   80d3e:	f2c0 0408 	movt	r4, #8
   80d42:	47a0      	blx	r4
   80d44:	bf00      	nop
   80d46:	e7fd      	b.n	80d44 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80d48:	b941      	cbnz	r1, 80d5c <xQueueGenericSend+0x34>
   80d4a:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80d4c:	b14b      	cbz	r3, 80d62 <xQueueGenericSend+0x3a>
   80d4e:	f640 0011 	movw	r0, #2065	; 0x811
   80d52:	f2c0 0008 	movt	r0, #8
   80d56:	4780      	blx	r0
   80d58:	bf00      	nop
   80d5a:	e7fd      	b.n	80d58 <xQueueGenericSend+0x30>
   80d5c:	f04f 0700 	mov.w	r7, #0
   80d60:	e001      	b.n	80d66 <xQueueGenericSend+0x3e>
   80d62:	f04f 0700 	mov.w	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80d66:	f640 0625 	movw	r6, #2085	; 0x825
   80d6a:	f2c0 0608 	movt	r6, #8
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80d6e:	f641 31fd 	movw	r1, #7165	; 0x1bfd
   80d72:	f2c0 0108 	movt	r1, #8
   80d76:	9100      	str	r1, [sp, #0]
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80d78:	f640 054d 	movw	r5, #2125	; 0x84d
   80d7c:	f2c0 0508 	movt	r5, #8
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80d80:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80d82:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80d84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80d86:	429a      	cmp	r2, r3
   80d88:	d21f      	bcs.n	80dca <xQueueGenericSend+0xa2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80d8a:	4620      	mov	r0, r4
   80d8c:	4651      	mov	r1, sl
   80d8e:	465a      	mov	r2, fp
   80d90:	f640 33b5 	movw	r3, #2997	; 0xbb5
   80d94:	f2c0 0308 	movt	r3, #8
   80d98:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80d9a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   80d9c:	b169      	cbz	r1, 80dba <xQueueGenericSend+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80d9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80da2:	f641 3255 	movw	r2, #6997	; 0x1b55
   80da6:	f2c0 0208 	movt	r2, #8
   80daa:	4790      	blx	r2
   80dac:	2801      	cmp	r0, #1
   80dae:	d104      	bne.n	80dba <xQueueGenericSend+0x92>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   80db0:	f640 0001 	movw	r0, #2049	; 0x801
   80db4:	f2c0 0008 	movt	r0, #8
   80db8:	4780      	blx	r0
					}
				}

				taskEXIT_CRITICAL();
   80dba:	f640 034d 	movw	r3, #2125	; 0x84d
   80dbe:	f2c0 0308 	movt	r3, #8
   80dc2:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   80dc4:	f04f 0001 	mov.w	r0, #1
   80dc8:	e06a      	b.n	80ea0 <xQueueGenericSend+0x178>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80dca:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   80dce:	b938      	cbnz	r0, 80de0 <xQueueGenericSend+0xb8>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80dd0:	f640 034d 	movw	r3, #2125	; 0x84d
   80dd4:	f2c0 0308 	movt	r3, #8
   80dd8:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   80dda:	f04f 0000 	mov.w	r0, #0
   80dde:	e05f      	b.n	80ea0 <xQueueGenericSend+0x178>
				}
				else if( xEntryTimeSet == pdFALSE )
   80de0:	b927      	cbnz	r7, 80dec <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80de2:	a802      	add	r0, sp, #8
   80de4:	9f00      	ldr	r7, [sp, #0]
   80de6:	47b8      	blx	r7
					xEntryTimeSet = pdTRUE;
   80de8:	f04f 0701 	mov.w	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80dec:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80dee:	f241 5145 	movw	r1, #5445	; 0x1545
   80df2:	f2c0 0108 	movt	r1, #8
   80df6:	4788      	blx	r1
		prvLockQueue( pxQueue );
   80df8:	47b0      	blx	r6
   80dfa:	6c62      	ldr	r2, [r4, #68]	; 0x44
   80dfc:	f1b2 3fff 	cmp.w	r2, #4294967295
   80e00:	bf04      	itt	eq
   80e02:	2200      	moveq	r2, #0
   80e04:	6462      	streq	r2, [r4, #68]	; 0x44
   80e06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80e08:	f1b3 3fff 	cmp.w	r3, #4294967295
   80e0c:	bf04      	itt	eq
   80e0e:	2300      	moveq	r3, #0
   80e10:	64a3      	streq	r3, [r4, #72]	; 0x48
   80e12:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80e14:	a802      	add	r0, sp, #8
   80e16:	f10d 0106 	add.w	r1, sp, #6
   80e1a:	f641 422d 	movw	r2, #7213	; 0x1c2d
   80e1e:	f2c0 0208 	movt	r2, #8
   80e22:	4790      	blx	r2
   80e24:	bb78      	cbnz	r0, 80e86 <xQueueGenericSend+0x15e>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80e26:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   80e28:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   80e2c:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   80e30:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   80e32:	45c1      	cmp	r9, r8
   80e34:	d11b      	bne.n	80e6e <xQueueGenericSend+0x146>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   80e36:	f104 0010 	add.w	r0, r4, #16
   80e3a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   80e3e:	f641 2385 	movw	r3, #6789	; 0x1a85
   80e42:	f2c0 0308 	movt	r3, #8
   80e46:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   80e48:	4620      	mov	r0, r4
   80e4a:	f640 21d9 	movw	r1, #2777	; 0xad9
   80e4e:	f2c0 0108 	movt	r1, #8
   80e52:	4788      	blx	r1
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   80e54:	f241 701d 	movw	r0, #5917	; 0x171d
   80e58:	f2c0 0008 	movt	r0, #8
   80e5c:	4780      	blx	r0
   80e5e:	2800      	cmp	r0, #0
   80e60:	d18e      	bne.n	80d80 <xQueueGenericSend+0x58>
				{
					portYIELD_WITHIN_API();
   80e62:	f640 0201 	movw	r2, #2049	; 0x801
   80e66:	f2c0 0208 	movt	r2, #8
   80e6a:	4790      	blx	r2
   80e6c:	e788      	b.n	80d80 <xQueueGenericSend+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   80e6e:	4620      	mov	r0, r4
   80e70:	f640 23d9 	movw	r3, #2777	; 0xad9
   80e74:	f2c0 0308 	movt	r3, #8
   80e78:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80e7a:	f241 721d 	movw	r2, #5917	; 0x171d
   80e7e:	f2c0 0208 	movt	r2, #8
   80e82:	4790      	blx	r2
   80e84:	e77c      	b.n	80d80 <xQueueGenericSend+0x58>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   80e86:	4620      	mov	r0, r4
   80e88:	f640 21d9 	movw	r1, #2777	; 0xad9
   80e8c:	f2c0 0108 	movt	r1, #8
   80e90:	4788      	blx	r1
			( void ) xTaskResumeAll();
   80e92:	f241 701d 	movw	r0, #5917	; 0x171d
   80e96:	f2c0 0008 	movt	r0, #8
   80e9a:	4780      	blx	r0

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   80e9c:	f04f 0000 	mov.w	r0, #0
		}
	}
}
   80ea0:	b005      	add	sp, #20
   80ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80ea6:	bf00      	nop

00080ea8 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   80ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80eac:	460e      	mov	r6, r1
   80eae:	4615      	mov	r5, r2
   80eb0:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   80eb2:	4604      	mov	r4, r0
   80eb4:	b930      	cbnz	r0, 80ec4 <xQueueGenericSendFromISR+0x1c>
   80eb6:	f640 0511 	movw	r5, #2065	; 0x811
   80eba:	f2c0 0508 	movt	r5, #8
   80ebe:	47a8      	blx	r5
   80ec0:	bf00      	nop
   80ec2:	e7fd      	b.n	80ec0 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80ec4:	b941      	cbnz	r1, 80ed8 <xQueueGenericSendFromISR+0x30>
   80ec6:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80ec8:	b133      	cbz	r3, 80ed8 <xQueueGenericSendFromISR+0x30>
   80eca:	f640 0011 	movw	r0, #2065	; 0x811
   80ece:	f2c0 0008 	movt	r0, #8
   80ed2:	4780      	blx	r0
   80ed4:	bf00      	nop
   80ed6:	e7fd      	b.n	80ed4 <xQueueGenericSendFromISR+0x2c>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80ed8:	f640 0111 	movw	r1, #2065	; 0x811
   80edc:	f2c0 0108 	movt	r1, #8
   80ee0:	4788      	blx	r1
   80ee2:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80ee4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80ee6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80ee8:	429a      	cmp	r2, r3
   80eea:	d221      	bcs.n	80f30 <xQueueGenericSendFromISR+0x88>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80eec:	4620      	mov	r0, r4
   80eee:	4631      	mov	r1, r6
   80ef0:	4642      	mov	r2, r8
   80ef2:	f640 33b5 	movw	r3, #2997	; 0xbb5
   80ef6:	f2c0 0308 	movt	r3, #8
   80efa:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   80efc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   80efe:	f1b0 3fff 	cmp.w	r0, #4294967295
   80f02:	d10e      	bne.n	80f22 <xQueueGenericSendFromISR+0x7a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80f04:	6a62      	ldr	r2, [r4, #36]	; 0x24
   80f06:	b1b2      	cbz	r2, 80f36 <xQueueGenericSendFromISR+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80f08:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80f0c:	f641 3455 	movw	r4, #6997	; 0x1b55
   80f10:	f2c0 0408 	movt	r4, #8
   80f14:	47a0      	blx	r4
   80f16:	b188      	cbz	r0, 80f3c <xQueueGenericSendFromISR+0x94>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   80f18:	b19d      	cbz	r5, 80f42 <xQueueGenericSendFromISR+0x9a>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   80f1a:	f04f 0401 	mov.w	r4, #1
   80f1e:	602c      	str	r4, [r5, #0]
   80f20:	e011      	b.n	80f46 <xQueueGenericSendFromISR+0x9e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   80f22:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   80f24:	f101 0101 	add.w	r1, r1, #1
   80f28:	64a1      	str	r1, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   80f2a:	f04f 0401 	mov.w	r4, #1
   80f2e:	e00a      	b.n	80f46 <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   80f30:	f04f 0400 	mov.w	r4, #0
   80f34:	e007      	b.n	80f46 <xQueueGenericSendFromISR+0x9e>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   80f36:	f04f 0401 	mov.w	r4, #1
   80f3a:	e004      	b.n	80f46 <xQueueGenericSendFromISR+0x9e>
   80f3c:	f04f 0401 	mov.w	r4, #1
   80f40:	e001      	b.n	80f46 <xQueueGenericSendFromISR+0x9e>
   80f42:	f04f 0401 	mov.w	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80f46:	4638      	mov	r0, r7
   80f48:	f640 0345 	movw	r3, #2117	; 0x845
   80f4c:	f2c0 0308 	movt	r3, #8
   80f50:	4798      	blx	r3

	return xReturn;
}
   80f52:	4620      	mov	r0, r4
   80f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00080f58 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   80f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80f5c:	b085      	sub	sp, #20
   80f5e:	4689      	mov	r9, r1
   80f60:	469a      	mov	sl, r3
   80f62:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   80f66:	4604      	mov	r4, r0
   80f68:	b930      	cbnz	r0, 80f78 <xQueueGenericReceive+0x20>
   80f6a:	f640 0411 	movw	r4, #2065	; 0x811
   80f6e:	f2c0 0408 	movt	r4, #8
   80f72:	47a0      	blx	r4
   80f74:	bf00      	nop
   80f76:	e7fd      	b.n	80f74 <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80f78:	b941      	cbnz	r1, 80f8c <xQueueGenericReceive+0x34>
   80f7a:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80f7c:	b14b      	cbz	r3, 80f92 <xQueueGenericReceive+0x3a>
   80f7e:	f640 0011 	movw	r0, #2065	; 0x811
   80f82:	f2c0 0008 	movt	r0, #8
   80f86:	4780      	blx	r0
   80f88:	bf00      	nop
   80f8a:	e7fd      	b.n	80f88 <xQueueGenericReceive+0x30>
   80f8c:	f04f 0700 	mov.w	r7, #0
   80f90:	e001      	b.n	80f96 <xQueueGenericReceive+0x3e>
   80f92:	f04f 0700 	mov.w	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80f96:	f640 0625 	movw	r6, #2085	; 0x825
   80f9a:	f2c0 0608 	movt	r6, #8
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80f9e:	f641 3bfd 	movw	fp, #7165	; 0x1bfd
   80fa2:	f2c0 0b08 	movt	fp, #8
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80fa6:	f640 054d 	movw	r5, #2125	; 0x84d
   80faa:	f2c0 0508 	movt	r5, #8
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80fae:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   80fb0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   80fb2:	2900      	cmp	r1, #0
   80fb4:	d03f      	beq.n	81036 <xQueueGenericReceive+0xde>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   80fb6:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   80fb8:	4620      	mov	r0, r4
   80fba:	4649      	mov	r1, r9
   80fbc:	f640 338d 	movw	r3, #2957	; 0xb8d
   80fc0:	f2c0 0308 	movt	r3, #8
   80fc4:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   80fc6:	f1ba 0f00 	cmp.w	sl, #0
   80fca:	d11c      	bne.n	81006 <xQueueGenericReceive+0xae>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   80fcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80fce:	f103 30ff 	add.w	r0, r3, #4294967295
   80fd2:	63a0      	str	r0, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80fd4:	6821      	ldr	r1, [r4, #0]
   80fd6:	b929      	cbnz	r1, 80fe4 <xQueueGenericReceive+0x8c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   80fd8:	f641 42f1 	movw	r2, #7409	; 0x1cf1
   80fdc:	f2c0 0208 	movt	r2, #8
   80fe0:	4790      	blx	r2
   80fe2:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80fe4:	6923      	ldr	r3, [r4, #16]
   80fe6:	b1f3      	cbz	r3, 81026 <xQueueGenericReceive+0xce>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80fe8:	f104 0010 	add.w	r0, r4, #16
   80fec:	f641 3155 	movw	r1, #6997	; 0x1b55
   80ff0:	f2c0 0108 	movt	r1, #8
   80ff4:	4788      	blx	r1
   80ff6:	2801      	cmp	r0, #1
   80ff8:	d115      	bne.n	81026 <xQueueGenericReceive+0xce>
						{
							portYIELD_WITHIN_API();
   80ffa:	f640 0001 	movw	r0, #2049	; 0x801
   80ffe:	f2c0 0008 	movt	r0, #8
   81002:	4780      	blx	r0
   81004:	e00f      	b.n	81026 <xQueueGenericReceive+0xce>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   81006:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81008:	6a60      	ldr	r0, [r4, #36]	; 0x24
   8100a:	b160      	cbz	r0, 81026 <xQueueGenericReceive+0xce>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8100c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81010:	f641 3155 	movw	r1, #6997	; 0x1b55
   81014:	f2c0 0108 	movt	r1, #8
   81018:	4788      	blx	r1
   8101a:	b120      	cbz	r0, 81026 <xQueueGenericReceive+0xce>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   8101c:	f640 0201 	movw	r2, #2049	; 0x801
   81020:	f2c0 0208 	movt	r2, #8
   81024:	4790      	blx	r2
						}
					}
				}

				taskEXIT_CRITICAL();
   81026:	f640 024d 	movw	r2, #2125	; 0x84d
   8102a:	f2c0 0208 	movt	r2, #8
   8102e:	4790      	blx	r2
				return pdPASS;
   81030:	f04f 0001 	mov.w	r0, #1
   81034:	e074      	b.n	81120 <xQueueGenericReceive+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81036:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   8103a:	b93a      	cbnz	r2, 8104c <xQueueGenericReceive+0xf4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   8103c:	f640 024d 	movw	r2, #2125	; 0x84d
   81040:	f2c0 0208 	movt	r2, #8
   81044:	4790      	blx	r2
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   81046:	f04f 0000 	mov.w	r0, #0
   8104a:	e069      	b.n	81120 <xQueueGenericReceive+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
   8104c:	b91f      	cbnz	r7, 81056 <xQueueGenericReceive+0xfe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8104e:	a802      	add	r0, sp, #8
   81050:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   81052:	f04f 0701 	mov.w	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81056:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81058:	f241 5345 	movw	r3, #5445	; 0x1545
   8105c:	f2c0 0308 	movt	r3, #8
   81060:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81062:	47b0      	blx	r6
   81064:	6c60      	ldr	r0, [r4, #68]	; 0x44
   81066:	f1b0 3fff 	cmp.w	r0, #4294967295
   8106a:	bf04      	itt	eq
   8106c:	2000      	moveq	r0, #0
   8106e:	6460      	streq	r0, [r4, #68]	; 0x44
   81070:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   81072:	f1b1 3fff 	cmp.w	r1, #4294967295
   81076:	bf04      	itt	eq
   81078:	2100      	moveq	r1, #0
   8107a:	64a1      	streq	r1, [r4, #72]	; 0x48
   8107c:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   8107e:	a802      	add	r0, sp, #8
   81080:	f10d 0106 	add.w	r1, sp, #6
   81084:	f641 422d 	movw	r2, #7213	; 0x1c2d
   81088:	f2c0 0208 	movt	r2, #8
   8108c:	4790      	blx	r2
   8108e:	2800      	cmp	r0, #0
   81090:	d139      	bne.n	81106 <xQueueGenericReceive+0x1ae>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81092:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   81094:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   81098:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   8109a:	f1b8 0f00 	cmp.w	r8, #0
   8109e:	d126      	bne.n	810ee <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   810a0:	6823      	ldr	r3, [r4, #0]
   810a2:	b93b      	cbnz	r3, 810b4 <xQueueGenericReceive+0x15c>
					{
						portENTER_CRITICAL();
   810a4:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   810a6:	6860      	ldr	r0, [r4, #4]
   810a8:	f641 5125 	movw	r1, #7461	; 0x1d25
   810ac:	f2c0 0108 	movt	r1, #8
   810b0:	4788      	blx	r1
						}
						portEXIT_CRITICAL();
   810b2:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   810b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   810b8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   810bc:	f641 2285 	movw	r2, #6789	; 0x1a85
   810c0:	f2c0 0208 	movt	r2, #8
   810c4:	4790      	blx	r2
				prvUnlockQueue( pxQueue );
   810c6:	4620      	mov	r0, r4
   810c8:	f640 23d9 	movw	r3, #2777	; 0xad9
   810cc:	f2c0 0308 	movt	r3, #8
   810d0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   810d2:	f241 701d 	movw	r0, #5917	; 0x171d
   810d6:	f2c0 0008 	movt	r0, #8
   810da:	4780      	blx	r0
   810dc:	2800      	cmp	r0, #0
   810de:	f47f af66 	bne.w	80fae <xQueueGenericReceive+0x56>
				{
					portYIELD_WITHIN_API();
   810e2:	f640 0101 	movw	r1, #2049	; 0x801
   810e6:	f2c0 0108 	movt	r1, #8
   810ea:	4788      	blx	r1
   810ec:	e75f      	b.n	80fae <xQueueGenericReceive+0x56>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   810ee:	4620      	mov	r0, r4
   810f0:	f640 21d9 	movw	r1, #2777	; 0xad9
   810f4:	f2c0 0108 	movt	r1, #8
   810f8:	4788      	blx	r1
				( void ) xTaskResumeAll();
   810fa:	f241 721d 	movw	r2, #5917	; 0x171d
   810fe:	f2c0 0208 	movt	r2, #8
   81102:	4790      	blx	r2
   81104:	e753      	b.n	80fae <xQueueGenericReceive+0x56>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   81106:	4620      	mov	r0, r4
   81108:	f640 23d9 	movw	r3, #2777	; 0xad9
   8110c:	f2c0 0308 	movt	r3, #8
   81110:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81112:	f241 701d 	movw	r0, #5917	; 0x171d
   81116:	f2c0 0008 	movt	r0, #8
   8111a:	4780      	blx	r0
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   8111c:	f04f 0000 	mov.w	r0, #0
		}
	}
}
   81120:	b005      	add	sp, #20
   81122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81126:	bf00      	nop

00081128 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   81128:	b538      	push	{r3, r4, r5, lr}
   8112a:	4604      	mov	r4, r0
   8112c:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   8112e:	f640 0325 	movw	r3, #2085	; 0x825
   81132:	f2c0 0308 	movt	r3, #8
   81136:	4798      	blx	r3
   81138:	6c60      	ldr	r0, [r4, #68]	; 0x44
   8113a:	f1b0 3fff 	cmp.w	r0, #4294967295
   8113e:	bf04      	itt	eq
   81140:	2000      	moveq	r0, #0
   81142:	6460      	streq	r0, [r4, #68]	; 0x44
   81144:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   81146:	f1b1 3fff 	cmp.w	r1, #4294967295
   8114a:	bf04      	itt	eq
   8114c:	2100      	moveq	r1, #0
   8114e:	64a1      	streq	r1, [r4, #72]	; 0x48
   81150:	f640 024d 	movw	r2, #2125	; 0x84d
   81154:	f2c0 0208 	movt	r2, #8
   81158:	4790      	blx	r2
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   8115a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8115c:	b93b      	cbnz	r3, 8116e <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   8115e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81162:	4629      	mov	r1, r5
   81164:	f641 22fd 	movw	r2, #6909	; 0x1afd
   81168:	f2c0 0208 	movt	r2, #8
   8116c:	4790      	blx	r2
		}
		prvUnlockQueue( pxQueue );
   8116e:	4620      	mov	r0, r4
   81170:	f640 21d9 	movw	r1, #2777	; 0xad9
   81174:	f2c0 0108 	movt	r1, #8
   81178:	4788      	blx	r1
   8117a:	bd38      	pop	{r3, r4, r5, pc}

0008117c <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   8117c:	b510      	push	{r4, lr}
   8117e:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   81180:	f648 2318 	movw	r3, #35352	; 0x8a18
   81184:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81188:	6818      	ldr	r0, [r3, #0]
   8118a:	8084      	strh	r4, [r0, #4]

	if( xTimeToWake < xTickCount )
   8118c:	f648 2134 	movw	r1, #35380	; 0x8a34
   81190:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81194:	880a      	ldrh	r2, [r1, #0]
   81196:	b293      	uxth	r3, r2
   81198:	429c      	cmp	r4, r3
   8119a:	d211      	bcs.n	811c0 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   8119c:	f648 2338 	movw	r3, #35384	; 0x8a38
   811a0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   811a4:	6818      	ldr	r0, [r3, #0]
   811a6:	f648 2118 	movw	r1, #35352	; 0x8a18
   811aa:	f2c2 0107 	movt	r1, #8199	; 0x2007
   811ae:	6809      	ldr	r1, [r1, #0]
   811b0:	f101 0104 	add.w	r1, r1, #4
   811b4:	f240 723d 	movw	r2, #1853	; 0x73d
   811b8:	f2c0 0208 	movt	r2, #8
   811bc:	4790      	blx	r2
   811be:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   811c0:	f648 1014 	movw	r0, #35092	; 0x8914
   811c4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   811c8:	6800      	ldr	r0, [r0, #0]
   811ca:	f648 2118 	movw	r1, #35352	; 0x8a18
   811ce:	f2c2 0107 	movt	r1, #8199	; 0x2007
   811d2:	6809      	ldr	r1, [r1, #0]
   811d4:	f101 0104 	add.w	r1, r1, #4
   811d8:	f240 723d 	movw	r2, #1853	; 0x73d
   811dc:	f2c0 0208 	movt	r2, #8
   811e0:	4790      	blx	r2

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   811e2:	f240 0308 	movw	r3, #8
   811e6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   811ea:	8818      	ldrh	r0, [r3, #0]
   811ec:	b281      	uxth	r1, r0
   811ee:	428c      	cmp	r4, r1
   811f0:	d204      	bcs.n	811fc <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
   811f2:	f240 0208 	movw	r2, #8
   811f6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   811fa:	8014      	strh	r4, [r2, #0]
   811fc:	bd10      	pop	{r4, pc}
   811fe:	bf00      	nop

00081200 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   81200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81204:	460f      	mov	r7, r1
   81206:	4690      	mov	r8, r2
   81208:	469a      	mov	sl, r3
   8120a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8120c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   8120e:	4681      	mov	r9, r0
   81210:	b930      	cbnz	r0, 81220 <xTaskGenericCreate+0x20>
   81212:	f640 0711 	movw	r7, #2065	; 0x811
   81216:	f2c0 0708 	movt	r7, #8
   8121a:	47b8      	blx	r7
   8121c:	bf00      	nop
   8121e:	e7fd      	b.n	8121c <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   81220:	2d09      	cmp	r5, #9
   81222:	d906      	bls.n	81232 <xTaskGenericCreate+0x32>
   81224:	f640 0511 	movw	r5, #2065	; 0x811
   81228:	f2c0 0508 	movt	r5, #8
   8122c:	47a8      	blx	r5
   8122e:	bf00      	nop
   81230:	e7fd      	b.n	8122e <xTaskGenericCreate+0x2e>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   81232:	f04f 0050 	mov.w	r0, #80	; 0x50
   81236:	f640 13a1 	movw	r3, #2465	; 0x9a1
   8123a:	f2c0 0308 	movt	r3, #8
   8123e:	4798      	blx	r3

	if( pxNewTCB != NULL )
   81240:	4604      	mov	r4, r0
   81242:	2800      	cmp	r0, #0
   81244:	f000 8136 	beq.w	814b4 <xTaskGenericCreate+0x2b4>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81248:	2e00      	cmp	r6, #0
   8124a:	f040 8131 	bne.w	814b0 <xTaskGenericCreate+0x2b0>
   8124e:	ea4f 0088 	mov.w	r0, r8, lsl #2
   81252:	f640 11a1 	movw	r1, #2465	; 0x9a1
   81256:	f2c0 0108 	movt	r1, #8
   8125a:	4788      	blx	r1
   8125c:	4606      	mov	r6, r0
   8125e:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   81260:	b930      	cbnz	r0, 81270 <xTaskGenericCreate+0x70>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   81262:	4620      	mov	r0, r4
   81264:	f640 229d 	movw	r2, #2717	; 0xa9d
   81268:	f2c0 0208 	movt	r2, #8
   8126c:	4790      	blx	r2
   8126e:	e121      	b.n	814b4 <xTaskGenericCreate+0x2b4>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   81270:	4630      	mov	r0, r6
   81272:	f04f 01a5 	mov.w	r1, #165	; 0xa5
   81276:	ea4f 0288 	mov.w	r2, r8, lsl #2
   8127a:	f642 768f 	movw	r6, #12175	; 0x2f8f
   8127e:	f2c0 0608 	movt	r6, #8
   81282:	47b0      	blx	r6
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   81284:	f108 38ff 	add.w	r8, r8, #4294967295
   81288:	6b20      	ldr	r0, [r4, #48]	; 0x30
   8128a:	eb00 0288 	add.w	r2, r0, r8, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   8128e:	f022 0b07 	bic.w	fp, r2, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   81292:	f104 0034 	add.w	r0, r4, #52	; 0x34
   81296:	4639      	mov	r1, r7
   81298:	f04f 0210 	mov.w	r2, #16
   8129c:	f243 07ad 	movw	r7, #12461	; 0x30ad
   812a0:	f2c0 0708 	movt	r7, #8
   812a4:	47b8      	blx	r7
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   812a6:	f04f 0300 	mov.w	r3, #0
   812aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   812ae:	2d09      	cmp	r5, #9
   812b0:	bf34      	ite	cc
   812b2:	462e      	movcc	r6, r5
   812b4:	2609      	movcs	r6, #9
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   812b6:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   812b8:	64e6      	str	r6, [r4, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   812ba:	f104 0704 	add.w	r7, r4, #4
   812be:	4638      	mov	r0, r7
   812c0:	f240 7815 	movw	r8, #1813	; 0x715
   812c4:	f2c0 0808 	movt	r8, #8
   812c8:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   812ca:	f104 0018 	add.w	r0, r4, #24
   812ce:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   812d0:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   812d2:	f1c6 060a 	rsb	r6, r6, #10
   812d6:	8326      	strh	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   812d8:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   812da:	4658      	mov	r0, fp
   812dc:	4649      	mov	r1, r9
   812de:	4652      	mov	r2, sl
   812e0:	f240 73c1 	movw	r3, #1985	; 0x7c1
   812e4:	f2c0 0308 	movt	r3, #8
   812e8:	4798      	blx	r3
   812ea:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   812ec:	f010 0f07 	tst.w	r0, #7
   812f0:	d006      	beq.n	81300 <xTaskGenericCreate+0x100>
   812f2:	f640 0411 	movw	r4, #2065	; 0x811
   812f6:	f2c0 0408 	movt	r4, #8
   812fa:	47a0      	blx	r4
   812fc:	bf00      	nop
   812fe:	e7fd      	b.n	812fc <xTaskGenericCreate+0xfc>

		if( ( void * ) pxCreatedTask != NULL )
   81300:	990b      	ldr	r1, [sp, #44]	; 0x2c
   81302:	b101      	cbz	r1, 81306 <xTaskGenericCreate+0x106>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   81304:	600c      	str	r4, [r1, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   81306:	f640 0025 	movw	r0, #2085	; 0x825
   8130a:	f2c0 0008 	movt	r0, #8
   8130e:	4780      	blx	r0
		{
			uxCurrentNumberOfTasks++;
   81310:	f648 2358 	movw	r3, #35416	; 0x8a58
   81314:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81318:	681a      	ldr	r2, [r3, #0]
   8131a:	f102 0201 	add.w	r2, r2, #1
   8131e:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   81320:	f648 2118 	movw	r1, #35352	; 0x8a18
   81324:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81328:	6808      	ldr	r0, [r1, #0]
   8132a:	2800      	cmp	r0, #0
   8132c:	d158      	bne.n	813e0 <xTaskGenericCreate+0x1e0>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   8132e:	f648 2118 	movw	r1, #35352	; 0x8a18
   81332:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81336:	600c      	str	r4, [r1, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   81338:	f648 2058 	movw	r0, #35416	; 0x8a58
   8133c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81340:	6803      	ldr	r3, [r0, #0]
   81342:	2b01      	cmp	r3, #1
   81344:	d15f      	bne.n	81406 <xTaskGenericCreate+0x206>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   81346:	f648 194c 	movw	r9, #35148	; 0x894c
   8134a:	f2c2 0907 	movt	r9, #8199	; 0x2007
   8134e:	4648      	mov	r0, r9
   81350:	f240 66fd 	movw	r6, #1789	; 0x6fd
   81354:	f2c0 0608 	movt	r6, #8
   81358:	47b0      	blx	r6
   8135a:	f109 0014 	add.w	r0, r9, #20
   8135e:	47b0      	blx	r6
   81360:	f109 0028 	add.w	r0, r9, #40	; 0x28
   81364:	47b0      	blx	r6
   81366:	f109 003c 	add.w	r0, r9, #60	; 0x3c
   8136a:	47b0      	blx	r6
   8136c:	f109 0050 	add.w	r0, r9, #80	; 0x50
   81370:	47b0      	blx	r6
   81372:	f109 0064 	add.w	r0, r9, #100	; 0x64
   81376:	47b0      	blx	r6
   81378:	f109 0078 	add.w	r0, r9, #120	; 0x78
   8137c:	47b0      	blx	r6
   8137e:	f109 008c 	add.w	r0, r9, #140	; 0x8c
   81382:	47b0      	blx	r6
   81384:	f109 00a0 	add.w	r0, r9, #160	; 0xa0
   81388:	47b0      	blx	r6
   8138a:	f109 00b4 	add.w	r0, r9, #180	; 0xb4
   8138e:	47b0      	blx	r6
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   81390:	f648 2940 	movw	r9, #35392	; 0x8a40
   81394:	f2c2 0907 	movt	r9, #8199	; 0x2007
   81398:	4648      	mov	r0, r9
   8139a:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   8139c:	f648 1834 	movw	r8, #35124	; 0x8934
   813a0:	f2c2 0807 	movt	r8, #8199	; 0x2007
   813a4:	4640      	mov	r0, r8
   813a6:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   813a8:	f648 201c 	movw	r0, #35356	; 0x8a1c
   813ac:	f2c2 0007 	movt	r0, #8199	; 0x2007
   813b0:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   813b2:	f648 1020 	movw	r0, #35104	; 0x8920
   813b6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   813ba:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   813bc:	f648 1000 	movw	r0, #35072	; 0x8900
   813c0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   813c4:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   813c6:	f648 1214 	movw	r2, #35092	; 0x8914
   813ca:	f2c2 0207 	movt	r2, #8199	; 0x2007
   813ce:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   813d2:	f648 2138 	movw	r1, #35384	; 0x8a38
   813d6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   813da:	f8c1 8000 	str.w	r8, [r1]
   813de:	e012      	b.n	81406 <xTaskGenericCreate+0x206>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   813e0:	f648 1318 	movw	r3, #35096	; 0x8918
   813e4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   813e8:	681a      	ldr	r2, [r3, #0]
   813ea:	b962      	cbnz	r2, 81406 <xTaskGenericCreate+0x206>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   813ec:	f648 2118 	movw	r1, #35352	; 0x8a18
   813f0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   813f4:	6808      	ldr	r0, [r1, #0]
   813f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   813f8:	429d      	cmp	r5, r3
   813fa:	d304      	bcc.n	81406 <xTaskGenericCreate+0x206>
					{
						pxCurrentTCB = pxNewTCB;
   813fc:	f648 2218 	movw	r2, #35352	; 0x8a18
   81400:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81404:	6014      	str	r4, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   81406:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81408:	f648 235c 	movw	r3, #35420	; 0x8a5c
   8140c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81410:	681a      	ldr	r2, [r3, #0]
   81412:	4290      	cmp	r0, r2
   81414:	d904      	bls.n	81420 <xTaskGenericCreate+0x220>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   81416:	f648 215c 	movw	r1, #35420	; 0x8a5c
   8141a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8141e:	6008      	str	r0, [r1, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   81420:	f648 233c 	movw	r3, #35388	; 0x8a3c
   81424:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81428:	681a      	ldr	r2, [r3, #0]
   8142a:	6462      	str	r2, [r4, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
   8142c:	f102 0201 	add.w	r2, r2, #1
   81430:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   81432:	f648 1148 	movw	r1, #35144	; 0x8948
   81436:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8143a:	680b      	ldr	r3, [r1, #0]
   8143c:	4298      	cmp	r0, r3
   8143e:	d904      	bls.n	8144a <xTaskGenericCreate+0x24a>
   81440:	f648 1248 	movw	r2, #35144	; 0x8948
   81444:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81448:	6010      	str	r0, [r2, #0]
   8144a:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   8144e:	f648 104c 	movw	r0, #35148	; 0x894c
   81452:	4603      	mov	r3, r0
   81454:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81458:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   8145c:	4639      	mov	r1, r7
   8145e:	f240 721d 	movw	r2, #1821	; 0x71d
   81462:	f2c0 0208 	movt	r2, #8
   81466:	4790      	blx	r2

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   81468:	f640 014d 	movw	r1, #2125	; 0x84d
   8146c:	f2c0 0108 	movt	r1, #8
   81470:	4788      	blx	r1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   81472:	f648 1018 	movw	r0, #35096	; 0x8918
   81476:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8147a:	6803      	ldr	r3, [r0, #0]
   8147c:	b183      	cbz	r3, 814a0 <xTaskGenericCreate+0x2a0>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   8147e:	f648 2218 	movw	r2, #35352	; 0x8a18
   81482:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81486:	6811      	ldr	r1, [r2, #0]
   81488:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
   8148a:	4285      	cmp	r5, r0
   8148c:	d90c      	bls.n	814a8 <xTaskGenericCreate+0x2a8>
			{
				portYIELD_WITHIN_API();
   8148e:	f640 0301 	movw	r3, #2049	; 0x801
   81492:	f2c0 0308 	movt	r3, #8
   81496:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   81498:	f04f 0001 	mov.w	r0, #1
   8149c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   814a0:	f04f 0001 	mov.w	r0, #1
   814a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   814a8:	f04f 0001 	mov.w	r0, #1
   814ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   814b0:	6306      	str	r6, [r0, #48]	; 0x30
   814b2:	e6dd      	b.n	81270 <xTaskGenericCreate+0x70>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   814b4:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   814b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000814bc <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   814bc:	b510      	push	{r4, lr}
   814be:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   814c0:	f04f 0300 	mov.w	r3, #0
   814c4:	9300      	str	r3, [sp, #0]
   814c6:	9301      	str	r3, [sp, #4]
   814c8:	9302      	str	r3, [sp, #8]
   814ca:	9303      	str	r3, [sp, #12]
   814cc:	f641 0069 	movw	r0, #6249	; 0x1869
   814d0:	f2c0 0008 	movt	r0, #8
   814d4:	f245 6138 	movw	r1, #22072	; 0x5638
   814d8:	f2c0 0108 	movt	r1, #8
   814dc:	f44f 7280 	mov.w	r2, #256	; 0x100
   814e0:	f241 2401 	movw	r4, #4609	; 0x1201
   814e4:	f2c0 0408 	movt	r4, #8
   814e8:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   814ea:	2801      	cmp	r0, #1
   814ec:	d11f      	bne.n	8152e <vTaskStartScheduler+0x72>
		{
			xReturn = xTimerCreateTimerTask();
   814ee:	f641 730d 	movw	r3, #7949	; 0x1f0d
   814f2:	f2c0 0308 	movt	r3, #8
   814f6:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   814f8:	2801      	cmp	r0, #1
   814fa:	d118      	bne.n	8152e <vTaskStartScheduler+0x72>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   814fc:	f640 0111 	movw	r1, #2065	; 0x811
   81500:	f2c0 0108 	movt	r1, #8
   81504:	4788      	blx	r1

		xSchedulerRunning = pdTRUE;
   81506:	f648 1318 	movw	r3, #35096	; 0x8918
   8150a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8150e:	f04f 0201 	mov.w	r2, #1
   81512:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   81514:	f648 2034 	movw	r0, #35380	; 0x8a34
   81518:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8151c:	f04f 0100 	mov.w	r1, #0
   81520:	8001      	strh	r1, [r0, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   81522:	f640 1305 	movw	r3, #2309	; 0x905
   81526:	f2c0 0308 	movt	r3, #8
   8152a:	4798      	blx	r3
   8152c:	e007      	b.n	8153e <vTaskStartScheduler+0x82>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   8152e:	b930      	cbnz	r0, 8153e <vTaskStartScheduler+0x82>
   81530:	f640 0011 	movw	r0, #2065	; 0x811
   81534:	f2c0 0008 	movt	r0, #8
   81538:	4780      	blx	r0
   8153a:	bf00      	nop
   8153c:	e7fd      	b.n	8153a <vTaskStartScheduler+0x7e>
}
   8153e:	b004      	add	sp, #16
   81540:	bd10      	pop	{r4, pc}
   81542:	bf00      	nop

00081544 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   81544:	f648 2314 	movw	r3, #35348	; 0x8a14
   81548:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8154c:	681a      	ldr	r2, [r3, #0]
   8154e:	f102 0201 	add.w	r2, r2, #1
   81552:	601a      	str	r2, [r3, #0]
   81554:	4770      	bx	lr
   81556:	bf00      	nop

00081558 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   81558:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   8155a:	f640 0325 	movw	r3, #2085	; 0x825
   8155e:	f2c0 0308 	movt	r3, #8
   81562:	4798      	blx	r3
	{
		xTicks = xTickCount;
   81564:	f648 2034 	movw	r0, #35380	; 0x8a34
   81568:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8156c:	8804      	ldrh	r4, [r0, #0]
   8156e:	b2a4      	uxth	r4, r4
	}
	taskEXIT_CRITICAL();
   81570:	f640 014d 	movw	r1, #2125	; 0x84d
   81574:	f2c0 0108 	movt	r1, #8
   81578:	4788      	blx	r1

	return xTicks;
}
   8157a:	4620      	mov	r0, r4
   8157c:	bd10      	pop	{r4, pc}
   8157e:	bf00      	nop

00081580 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81580:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81584:	f648 2314 	movw	r3, #35348	; 0x8a14
   81588:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8158c:	6818      	ldr	r0, [r3, #0]
   8158e:	2800      	cmp	r0, #0
   81590:	f040 80b9 	bne.w	81706 <vTaskIncrementTick+0x186>
	{
		++xTickCount;
   81594:	f648 2334 	movw	r3, #35380	; 0x8a34
   81598:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8159c:	8818      	ldrh	r0, [r3, #0]
   8159e:	f100 0001 	add.w	r0, r0, #1
   815a2:	b281      	uxth	r1, r0
   815a4:	8019      	strh	r1, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   815a6:	881a      	ldrh	r2, [r3, #0]
   815a8:	b293      	uxth	r3, r2
   815aa:	2b00      	cmp	r3, #0
   815ac:	d139      	bne.n	81622 <vTaskIncrementTick+0xa2>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   815ae:	f648 1014 	movw	r0, #35092	; 0x8914
   815b2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   815b6:	6801      	ldr	r1, [r0, #0]
   815b8:	680a      	ldr	r2, [r1, #0]
   815ba:	b132      	cbz	r2, 815ca <vTaskIncrementTick+0x4a>
   815bc:	f640 0511 	movw	r5, #2065	; 0x811
   815c0:	f2c0 0508 	movt	r5, #8
   815c4:	47a8      	blx	r5
   815c6:	bf00      	nop
   815c8:	e7fd      	b.n	815c6 <vTaskIncrementTick+0x46>

			pxTemp = pxDelayedTaskList;
   815ca:	f648 1314 	movw	r3, #35092	; 0x8914
   815ce:	f2c2 0307 	movt	r3, #8199	; 0x2007
   815d2:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   815d4:	f648 2238 	movw	r2, #35384	; 0x8a38
   815d8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   815dc:	6810      	ldr	r0, [r2, #0]
   815de:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   815e0:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   815e2:	f648 2230 	movw	r2, #35376	; 0x8a30
   815e6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   815ea:	6811      	ldr	r1, [r2, #0]
   815ec:	f101 0101 	add.w	r1, r1, #1
   815f0:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   815f2:	681b      	ldr	r3, [r3, #0]
   815f4:	6818      	ldr	r0, [r3, #0]
   815f6:	b938      	cbnz	r0, 81608 <vTaskIncrementTick+0x88>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   815f8:	f240 0308 	movw	r3, #8
   815fc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81600:	f64f 70ff 	movw	r0, #65535	; 0xffff
   81604:	8018      	strh	r0, [r3, #0]
   81606:	e00c      	b.n	81622 <vTaskIncrementTick+0xa2>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81608:	f648 1214 	movw	r2, #35092	; 0x8914
   8160c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81610:	6811      	ldr	r1, [r2, #0]
   81612:	68cb      	ldr	r3, [r1, #12]
   81614:	68d8      	ldr	r0, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81616:	8882      	ldrh	r2, [r0, #4]
   81618:	f240 0108 	movw	r1, #8
   8161c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81620:	800a      	strh	r2, [r1, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   81622:	f648 2234 	movw	r2, #35380	; 0x8a34
   81626:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8162a:	8811      	ldrh	r1, [r2, #0]
   8162c:	b288      	uxth	r0, r1
   8162e:	f240 0308 	movw	r3, #8
   81632:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81636:	881a      	ldrh	r2, [r3, #0]
   81638:	b291      	uxth	r1, r2
   8163a:	4288      	cmp	r0, r1
   8163c:	d36b      	bcc.n	81716 <vTaskIncrementTick+0x196>
   8163e:	f648 1014 	movw	r0, #35092	; 0x8914
   81642:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81646:	6803      	ldr	r3, [r0, #0]
   81648:	681a      	ldr	r2, [r3, #0]
   8164a:	b182      	cbz	r2, 8166e <vTaskIncrementTick+0xee>
   8164c:	f648 1414 	movw	r4, #35092	; 0x8914
   81650:	f2c2 0407 	movt	r4, #8199	; 0x2007
   81654:	6821      	ldr	r1, [r4, #0]
   81656:	68c8      	ldr	r0, [r1, #12]
   81658:	68c4      	ldr	r4, [r0, #12]
   8165a:	88a3      	ldrh	r3, [r4, #4]
   8165c:	f648 2234 	movw	r2, #35380	; 0x8a34
   81660:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81664:	8811      	ldrh	r1, [r2, #0]
   81666:	b288      	uxth	r0, r1
   81668:	4283      	cmp	r3, r0
   8166a:	d91b      	bls.n	816a4 <vTaskIncrementTick+0x124>
   8166c:	e013      	b.n	81696 <vTaskIncrementTick+0x116>
   8166e:	f240 0308 	movw	r3, #8
   81672:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81676:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8167a:	8019      	strh	r1, [r3, #0]
   8167c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81680:	6834      	ldr	r4, [r6, #0]
   81682:	68e2      	ldr	r2, [r4, #12]
   81684:	68d4      	ldr	r4, [r2, #12]
   81686:	88a3      	ldrh	r3, [r4, #4]
   81688:	4648      	mov	r0, r9
   8168a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8168e:	8801      	ldrh	r1, [r0, #0]
   81690:	b28a      	uxth	r2, r1
   81692:	4293      	cmp	r3, r2
   81694:	d91c      	bls.n	816d0 <vTaskIncrementTick+0x150>
   81696:	f240 0008 	movw	r0, #8
   8169a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8169e:	8003      	strh	r3, [r0, #0]
   816a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   816a4:	f240 7781 	movw	r7, #1921	; 0x781
   816a8:	f2c0 0708 	movt	r7, #8
   816ac:	f648 1848 	movw	r8, #35144	; 0x8948
   816b0:	f2c2 0807 	movt	r8, #8199	; 0x2007
   816b4:	f648 1b4c 	movw	fp, #35148	; 0x894c
   816b8:	f2c2 0b07 	movt	fp, #8199	; 0x2007
   816bc:	f240 7a1d 	movw	sl, #1821	; 0x71d
   816c0:	f2c0 0a08 	movt	sl, #8
   816c4:	f648 1614 	movw	r6, #35092	; 0x8914
   816c8:	f2c2 0607 	movt	r6, #8199	; 0x2007
   816cc:	f648 2934 	movw	r9, #35380	; 0x8a34
   816d0:	f104 0504 	add.w	r5, r4, #4
   816d4:	4628      	mov	r0, r5
   816d6:	47b8      	blx	r7
   816d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   816da:	b113      	cbz	r3, 816e2 <vTaskIncrementTick+0x162>
   816dc:	f104 0018 	add.w	r0, r4, #24
   816e0:	47b8      	blx	r7
   816e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   816e4:	f8d8 2000 	ldr.w	r2, [r8]
   816e8:	4291      	cmp	r1, r2
   816ea:	bf88      	it	hi
   816ec:	f8c8 1000 	strhi.w	r1, [r8]
   816f0:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   816f4:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   816f8:	4629      	mov	r1, r5
   816fa:	47d0      	blx	sl
   816fc:	6833      	ldr	r3, [r6, #0]
   816fe:	6819      	ldr	r1, [r3, #0]
   81700:	2900      	cmp	r1, #0
   81702:	d1bd      	bne.n	81680 <vTaskIncrementTick+0x100>
   81704:	e7b3      	b.n	8166e <vTaskIncrementTick+0xee>
	}
	else
	{
		++uxMissedTicks;
   81706:	f648 01fc 	movw	r1, #35068	; 0x88fc
   8170a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8170e:	680a      	ldr	r2, [r1, #0]
   81710:	f102 0201 	add.w	r2, r2, #1
   81714:	600a      	str	r2, [r1, #0]
   81716:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8171a:	bf00      	nop

0008171c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   8171c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   81720:	f648 2314 	movw	r3, #35348	; 0x8a14
   81724:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81728:	6818      	ldr	r0, [r3, #0]
   8172a:	b930      	cbnz	r0, 8173a <xTaskResumeAll+0x1e>
   8172c:	f640 0511 	movw	r5, #2065	; 0x811
   81730:	f2c0 0508 	movt	r5, #8
   81734:	47a8      	blx	r5
   81736:	bf00      	nop
   81738:	e7fd      	b.n	81736 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   8173a:	f640 0125 	movw	r1, #2085	; 0x825
   8173e:	f2c0 0108 	movt	r1, #8
   81742:	4788      	blx	r1
	{
		--uxSchedulerSuspended;
   81744:	f648 2414 	movw	r4, #35348	; 0x8a14
   81748:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8174c:	6822      	ldr	r2, [r4, #0]
   8174e:	f102 33ff 	add.w	r3, r2, #4294967295
   81752:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81754:	6820      	ldr	r0, [r4, #0]
   81756:	2800      	cmp	r0, #0
   81758:	d178      	bne.n	8184c <xTaskResumeAll+0x130>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   8175a:	f648 2158 	movw	r1, #35416	; 0x8a58
   8175e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81762:	680c      	ldr	r4, [r1, #0]
   81764:	bb4c      	cbnz	r4, 817ba <xTaskResumeAll+0x9e>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81766:	f04f 0400 	mov.w	r4, #0
   8176a:	e074      	b.n	81856 <xTaskResumeAll+0x13a>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   8176c:	f8d8 200c 	ldr.w	r2, [r8, #12]
   81770:	68d4      	ldr	r4, [r2, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   81772:	f104 0018 	add.w	r0, r4, #24
   81776:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81778:	f104 0904 	add.w	r9, r4, #4
   8177c:	4648      	mov	r0, r9
   8177e:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   81780:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81782:	6830      	ldr	r0, [r6, #0]
   81784:	4283      	cmp	r3, r0
   81786:	bf88      	it	hi
   81788:	6033      	strhi	r3, [r6, #0]
   8178a:	4651      	mov	r1, sl
   8178c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81790:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   81794:	eb01 0082 	add.w	r0, r1, r2, lsl #2
   81798:	4649      	mov	r1, r9
   8179a:	f240 731d 	movw	r3, #1821	; 0x71d
   8179e:	f2c0 0308 	movt	r3, #8
   817a2:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   817a4:	f648 2018 	movw	r0, #35352	; 0x8a18
   817a8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   817ac:	6801      	ldr	r1, [r0, #0]
   817ae:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
   817b0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   817b2:	4294      	cmp	r4, r2
   817b4:	bf28      	it	cs
   817b6:	2501      	movcs	r5, #1
   817b8:	e00f      	b.n	817da <xTaskResumeAll+0xbe>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   817ba:	f04f 0500 	mov.w	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   817be:	f648 281c 	movw	r8, #35356	; 0x8a1c
   817c2:	f2c2 0807 	movt	r8, #8199	; 0x2007
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   817c6:	f240 7781 	movw	r7, #1921	; 0x781
   817ca:	f2c0 0708 	movt	r7, #8
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   817ce:	f648 1648 	movw	r6, #35144	; 0x8948
   817d2:	f2c2 0607 	movt	r6, #8199	; 0x2007
   817d6:	f648 1a4c 	movw	sl, #35148	; 0x894c
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   817da:	f8d8 2000 	ldr.w	r2, [r8]
   817de:	2a00      	cmp	r2, #0
   817e0:	d1c4      	bne.n	8176c <xTaskResumeAll+0x50>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   817e2:	f648 03fc 	movw	r3, #35068	; 0x88fc
   817e6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   817ea:	6818      	ldr	r0, [r3, #0]
   817ec:	b1b0      	cbz	r0, 8181c <xTaskResumeAll+0x100>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   817ee:	f648 02fc 	movw	r2, #35068	; 0x88fc
   817f2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   817f6:	6813      	ldr	r3, [r2, #0]
   817f8:	b1cb      	cbz	r3, 8182e <xTaskResumeAll+0x112>
					{
						vTaskIncrementTick();
   817fa:	f241 5581 	movw	r5, #5505	; 0x1581
   817fe:	f2c0 0508 	movt	r5, #8
						--uxMissedTicks;
   81802:	f648 04fc 	movw	r4, #35068	; 0x88fc
   81806:	f2c2 0407 	movt	r4, #8199	; 0x2007
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   8180a:	47a8      	blx	r5
						--uxMissedTicks;
   8180c:	6820      	ldr	r0, [r4, #0]
   8180e:	f100 31ff 	add.w	r1, r0, #4294967295
   81812:	6021      	str	r1, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81814:	6822      	ldr	r2, [r4, #0]
   81816:	2a00      	cmp	r2, #0
   81818:	d1f7      	bne.n	8180a <xTaskResumeAll+0xee>
   8181a:	e008      	b.n	8182e <xTaskResumeAll+0x112>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   8181c:	2d01      	cmp	r5, #1
   8181e:	d006      	beq.n	8182e <xTaskResumeAll+0x112>
   81820:	f648 2154 	movw	r1, #35412	; 0x8a54
   81824:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81828:	680c      	ldr	r4, [r1, #0]
   8182a:	2c01      	cmp	r4, #1
   8182c:	d111      	bne.n	81852 <xTaskResumeAll+0x136>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   8182e:	f648 2354 	movw	r3, #35412	; 0x8a54
   81832:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81836:	f04f 0400 	mov.w	r4, #0
   8183a:	601c      	str	r4, [r3, #0]
					portYIELD_WITHIN_API();
   8183c:	f640 0001 	movw	r0, #2049	; 0x801
   81840:	f2c0 0008 	movt	r0, #8
   81844:	4780      	blx	r0
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   81846:	f04f 0401 	mov.w	r4, #1
   8184a:	e004      	b.n	81856 <xTaskResumeAll+0x13a>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   8184c:	f04f 0400 	mov.w	r4, #0
   81850:	e001      	b.n	81856 <xTaskResumeAll+0x13a>
   81852:	f04f 0400 	mov.w	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   81856:	f640 014d 	movw	r1, #2125	; 0x84d
   8185a:	f2c0 0108 	movt	r1, #8
   8185e:	4788      	blx	r1

	return xAlreadyYielded;
}
   81860:	4620      	mov	r0, r4
   81862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81866:	bf00      	nop

00081868 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   81868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   8186c:	f648 151c 	movw	r5, #35100	; 0x891c
   81870:	f2c2 0507 	movt	r5, #8199	; 0x2007
		{
			vTaskSuspendAll();
   81874:	f241 5845 	movw	r8, #5445	; 0x1545
   81878:	f2c0 0808 	movt	r8, #8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   8187c:	f648 1620 	movw	r6, #35104	; 0x8920
   81880:	f2c2 0607 	movt	r6, #8199	; 0x2007
			xTaskResumeAll();
   81884:	f241 771d 	movw	r7, #5917	; 0x171d
   81888:	e02d      	b.n	818e6 <prvIdleTask+0x7e>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   8188a:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   8188c:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   8188e:	463b      	mov	r3, r7
   81890:	f2c0 0308 	movt	r3, #8
   81894:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   81896:	b334      	cbz	r4, 818e6 <prvIdleTask+0x7e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   81898:	f640 0025 	movw	r0, #2085	; 0x825
   8189c:	f2c0 0008 	movt	r0, #8
   818a0:	4780      	blx	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   818a2:	68f1      	ldr	r1, [r6, #12]
   818a4:	68cc      	ldr	r4, [r1, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   818a6:	f104 0004 	add.w	r0, r4, #4
   818aa:	f240 7281 	movw	r2, #1921	; 0x781
   818ae:	f2c0 0208 	movt	r2, #8
   818b2:	4790      	blx	r2
					--uxCurrentNumberOfTasks;
   818b4:	f648 2358 	movw	r3, #35416	; 0x8a58
   818b8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   818bc:	6818      	ldr	r0, [r3, #0]
   818be:	f100 31ff 	add.w	r1, r0, #4294967295
   818c2:	6019      	str	r1, [r3, #0]
					--uxTasksDeleted;
   818c4:	682a      	ldr	r2, [r5, #0]
   818c6:	f102 33ff 	add.w	r3, r2, #4294967295
   818ca:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   818cc:	f640 004d 	movw	r0, #2125	; 0x84d
   818d0:	f2c0 0008 	movt	r0, #8
   818d4:	4780      	blx	r0
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   818d6:	6b20      	ldr	r0, [r4, #48]	; 0x30
   818d8:	f640 299d 	movw	r9, #2717	; 0xa9d
   818dc:	f2c0 0908 	movt	r9, #8
   818e0:	47c8      	blx	r9
		vPortFree( pxTCB );
   818e2:	4620      	mov	r0, r4
   818e4:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   818e6:	682b      	ldr	r3, [r5, #0]
   818e8:	2b00      	cmp	r3, #0
   818ea:	d1ce      	bne.n	8188a <prvIdleTask+0x22>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   818ec:	f648 104c 	movw	r0, #35148	; 0x894c
   818f0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   818f4:	6801      	ldr	r1, [r0, #0]
   818f6:	2901      	cmp	r1, #1
   818f8:	d9f5      	bls.n	818e6 <prvIdleTask+0x7e>
			{
				taskYIELD();
   818fa:	f640 0201 	movw	r2, #2049	; 0x801
   818fe:	f2c0 0208 	movt	r2, #8
   81902:	4790      	blx	r2
   81904:	e7ef      	b.n	818e6 <prvIdleTask+0x7e>
   81906:	bf00      	nop

00081908 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   81908:	b538      	push	{r3, r4, r5, lr}
   8190a:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   8190c:	4605      	mov	r5, r0
   8190e:	b930      	cbnz	r0, 8191e <vTaskDelayUntil+0x16>
   81910:	f640 0411 	movw	r4, #2065	; 0x811
   81914:	f2c0 0408 	movt	r4, #8
   81918:	47a0      	blx	r4
   8191a:	bf00      	nop
   8191c:	e7fd      	b.n	8191a <vTaskDelayUntil+0x12>
		configASSERT( ( xTimeIncrement > 0U ) );
   8191e:	b931      	cbnz	r1, 8192e <vTaskDelayUntil+0x26>
   81920:	f640 0511 	movw	r5, #2065	; 0x811
   81924:	f2c0 0508 	movt	r5, #8
   81928:	47a8      	blx	r5
   8192a:	bf00      	nop
   8192c:	e7fd      	b.n	8192a <vTaskDelayUntil+0x22>

		vTaskSuspendAll();
   8192e:	f241 5345 	movw	r3, #5445	; 0x1545
   81932:	f2c0 0308 	movt	r3, #8
   81936:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   81938:	8828      	ldrh	r0, [r5, #0]
   8193a:	1901      	adds	r1, r0, r4
   8193c:	b28c      	uxth	r4, r1

			if( xTickCount < *pxPreviousWakeTime )
   8193e:	f648 2234 	movw	r2, #35380	; 0x8a34
   81942:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81946:	8813      	ldrh	r3, [r2, #0]
   81948:	b299      	uxth	r1, r3
   8194a:	4288      	cmp	r0, r1
   8194c:	d90b      	bls.n	81966 <vTaskDelayUntil+0x5e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   8194e:	42a0      	cmp	r0, r4
   81950:	d934      	bls.n	819bc <vTaskDelayUntil+0xb4>
   81952:	f648 2134 	movw	r1, #35380	; 0x8a34
   81956:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8195a:	8808      	ldrh	r0, [r1, #0]
   8195c:	b282      	uxth	r2, r0
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   8195e:	802c      	strh	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   81960:	4294      	cmp	r4, r2
   81962:	d91d      	bls.n	819a0 <vTaskDelayUntil+0x98>
   81964:	e00a      	b.n	8197c <vTaskDelayUntil+0x74>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   81966:	42a0      	cmp	r0, r4
   81968:	d826      	bhi.n	819b8 <vTaskDelayUntil+0xb0>
   8196a:	f648 2034 	movw	r0, #35380	; 0x8a34
   8196e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81972:	8802      	ldrh	r2, [r0, #0]
   81974:	b293      	uxth	r3, r2
   81976:	429c      	cmp	r4, r3
   81978:	d81e      	bhi.n	819b8 <vTaskDelayUntil+0xb0>
   8197a:	e01f      	b.n	819bc <vTaskDelayUntil+0xb4>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   8197c:	f648 2318 	movw	r3, #35352	; 0x8a18
   81980:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81984:	6818      	ldr	r0, [r3, #0]
   81986:	f100 0004 	add.w	r0, r0, #4
   8198a:	f240 7181 	movw	r1, #1921	; 0x781
   8198e:	f2c0 0108 	movt	r1, #8
   81992:	4788      	blx	r1
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   81994:	4620      	mov	r0, r4
   81996:	f241 127d 	movw	r2, #4477	; 0x117d
   8199a:	f2c0 0208 	movt	r2, #8
   8199e:	4790      	blx	r2
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   819a0:	f241 701d 	movw	r0, #5917	; 0x171d
   819a4:	f2c0 0008 	movt	r0, #8
   819a8:	4780      	blx	r0

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   819aa:	b948      	cbnz	r0, 819c0 <vTaskDelayUntil+0xb8>
		{
			portYIELD_WITHIN_API();
   819ac:	f640 0301 	movw	r3, #2049	; 0x801
   819b0:	f2c0 0308 	movt	r3, #8
   819b4:	4798      	blx	r3
   819b6:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   819b8:	802c      	strh	r4, [r5, #0]
   819ba:	e7df      	b.n	8197c <vTaskDelayUntil+0x74>
   819bc:	802c      	strh	r4, [r5, #0]
   819be:	e7ef      	b.n	819a0 <vTaskDelayUntil+0x98>
   819c0:	bd38      	pop	{r3, r4, r5, pc}
   819c2:	bf00      	nop

000819c4 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   819c4:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   819c6:	f648 2314 	movw	r3, #35348	; 0x8a14
   819ca:	f2c2 0307 	movt	r3, #8199	; 0x2007
   819ce:	6818      	ldr	r0, [r3, #0]
   819d0:	b9a8      	cbnz	r0, 819fe <vTaskSwitchContext+0x3a>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   819d2:	f648 1148 	movw	r1, #35144	; 0x8948
   819d6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   819da:	680a      	ldr	r2, [r1, #0]
   819dc:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   819e0:	ea4f 0083 	mov.w	r0, r3, lsl #2
   819e4:	f648 114c 	movw	r1, #35148	; 0x894c
   819e8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   819ec:	580a      	ldr	r2, [r1, r0]
   819ee:	bb52      	cbnz	r2, 81a46 <vTaskSwitchContext+0x82>
   819f0:	f648 1348 	movw	r3, #35144	; 0x8948
   819f4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   819f8:	6818      	ldr	r0, [r3, #0]
   819fa:	b988      	cbnz	r0, 81a20 <vTaskSwitchContext+0x5c>
   819fc:	e009      	b.n	81a12 <vTaskSwitchContext+0x4e>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   819fe:	f648 2154 	movw	r1, #35412	; 0x8a54
   81a02:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81a06:	f04f 0001 	mov.w	r0, #1
   81a0a:	6008      	str	r0, [r1, #0]
   81a0c:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81a0e:	681a      	ldr	r2, [r3, #0]
   81a10:	b972      	cbnz	r2, 81a30 <vTaskSwitchContext+0x6c>
   81a12:	f640 0311 	movw	r3, #2065	; 0x811
   81a16:	f2c0 0308 	movt	r3, #8
   81a1a:	4798      	blx	r3
   81a1c:	bf00      	nop
   81a1e:	e7fd      	b.n	81a1c <vTaskSwitchContext+0x58>
   81a20:	f648 1348 	movw	r3, #35144	; 0x8948
   81a24:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81a28:	f648 114c 	movw	r1, #35148	; 0x894c
   81a2c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81a30:	681a      	ldr	r2, [r3, #0]
   81a32:	f102 30ff 	add.w	r0, r2, #4294967295
   81a36:	6018      	str	r0, [r3, #0]
   81a38:	681a      	ldr	r2, [r3, #0]
   81a3a:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   81a3e:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
   81a42:	2a00      	cmp	r2, #0
   81a44:	d0e3      	beq.n	81a0e <vTaskSwitchContext+0x4a>
   81a46:	f648 1348 	movw	r3, #35144	; 0x8948
   81a4a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81a4e:	6819      	ldr	r1, [r3, #0]
   81a50:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   81a54:	f648 124c 	movw	r2, #35148	; 0x894c
   81a58:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81a5c:	eb02 0380 	add.w	r3, r2, r0, lsl #2
   81a60:	6859      	ldr	r1, [r3, #4]
   81a62:	6848      	ldr	r0, [r1, #4]
   81a64:	6058      	str	r0, [r3, #4]
   81a66:	f103 0208 	add.w	r2, r3, #8
   81a6a:	4290      	cmp	r0, r2
   81a6c:	bf04      	itt	eq
   81a6e:	6840      	ldreq	r0, [r0, #4]
   81a70:	6058      	streq	r0, [r3, #4]
   81a72:	685b      	ldr	r3, [r3, #4]
   81a74:	68d9      	ldr	r1, [r3, #12]
   81a76:	f648 2018 	movw	r0, #35352	; 0x8a18
   81a7a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81a7e:	6001      	str	r1, [r0, #0]
   81a80:	bd08      	pop	{r3, pc}
   81a82:	bf00      	nop

00081a84 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   81a84:	b538      	push	{r3, r4, r5, lr}
   81a86:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   81a88:	b930      	cbnz	r0, 81a98 <vTaskPlaceOnEventList+0x14>
   81a8a:	f640 0411 	movw	r4, #2065	; 0x811
   81a8e:	f2c0 0408 	movt	r4, #8
   81a92:	47a0      	blx	r4
   81a94:	bf00      	nop
   81a96:	e7fd      	b.n	81a94 <vTaskPlaceOnEventList+0x10>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81a98:	f648 2518 	movw	r5, #35352	; 0x8a18
   81a9c:	f2c2 0507 	movt	r5, #8199	; 0x2007
   81aa0:	6829      	ldr	r1, [r5, #0]
   81aa2:	f101 0118 	add.w	r1, r1, #24
   81aa6:	f240 723d 	movw	r2, #1853	; 0x73d
   81aaa:	f2c0 0208 	movt	r2, #8
   81aae:	4790      	blx	r2

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81ab0:	6828      	ldr	r0, [r5, #0]
   81ab2:	f100 0004 	add.w	r0, r0, #4
   81ab6:	f240 7181 	movw	r1, #1921	; 0x781
   81aba:	f2c0 0108 	movt	r1, #8
   81abe:	4788      	blx	r1
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   81ac0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   81ac4:	4284      	cmp	r4, r0
   81ac6:	d10c      	bne.n	81ae2 <vTaskPlaceOnEventList+0x5e>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81ac8:	6829      	ldr	r1, [r5, #0]
   81aca:	f648 1000 	movw	r0, #35072	; 0x8900
   81ace:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81ad2:	f101 0104 	add.w	r1, r1, #4
   81ad6:	f240 721d 	movw	r2, #1821	; 0x71d
   81ada:	f2c0 0208 	movt	r2, #8
   81ade:	4790      	blx	r2
   81ae0:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   81ae2:	f648 2334 	movw	r3, #35380	; 0x8a34
   81ae6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81aea:	881a      	ldrh	r2, [r3, #0]
   81aec:	18a1      	adds	r1, r4, r2
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81aee:	b288      	uxth	r0, r1
   81af0:	f241 137d 	movw	r3, #4477	; 0x117d
   81af4:	f2c0 0308 	movt	r3, #8
   81af8:	4798      	blx	r3
   81afa:	bd38      	pop	{r3, r4, r5, pc}

00081afc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   81afc:	b538      	push	{r3, r4, r5, lr}
   81afe:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   81b00:	b930      	cbnz	r0, 81b10 <vTaskPlaceOnEventListRestricted+0x14>
   81b02:	f640 0411 	movw	r4, #2065	; 0x811
   81b06:	f2c0 0408 	movt	r4, #8
   81b0a:	47a0      	blx	r4
   81b0c:	bf00      	nop
   81b0e:	e7fd      	b.n	81b0c <vTaskPlaceOnEventListRestricted+0x10>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81b10:	f648 2418 	movw	r4, #35352	; 0x8a18
   81b14:	f2c2 0407 	movt	r4, #8199	; 0x2007
   81b18:	6821      	ldr	r1, [r4, #0]
   81b1a:	f101 0118 	add.w	r1, r1, #24
   81b1e:	f240 721d 	movw	r2, #1821	; 0x71d
   81b22:	f2c0 0208 	movt	r2, #8
   81b26:	4790      	blx	r2

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81b28:	6820      	ldr	r0, [r4, #0]
   81b2a:	f100 0004 	add.w	r0, r0, #4
   81b2e:	f240 7181 	movw	r1, #1921	; 0x781
   81b32:	f2c0 0108 	movt	r1, #8
   81b36:	4788      	blx	r1
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   81b38:	f648 2034 	movw	r0, #35380	; 0x8a34
   81b3c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81b40:	8803      	ldrh	r3, [r0, #0]
   81b42:	18ea      	adds	r2, r5, r3
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   81b44:	b290      	uxth	r0, r2
   81b46:	f241 117d 	movw	r1, #4477	; 0x117d
   81b4a:	f2c0 0108 	movt	r1, #8
   81b4e:	4788      	blx	r1
   81b50:	bd38      	pop	{r3, r4, r5, pc}
   81b52:	bf00      	nop

00081b54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   81b54:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81b56:	68c3      	ldr	r3, [r0, #12]
   81b58:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   81b5a:	b934      	cbnz	r4, 81b6a <xTaskRemoveFromEventList+0x16>
   81b5c:	f640 0411 	movw	r4, #2065	; 0x811
   81b60:	f2c0 0408 	movt	r4, #8
   81b64:	47a0      	blx	r4
   81b66:	bf00      	nop
   81b68:	e7fd      	b.n	81b66 <xTaskRemoveFromEventList+0x12>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81b6a:	f104 0518 	add.w	r5, r4, #24
   81b6e:	4628      	mov	r0, r5
   81b70:	f240 7181 	movw	r1, #1921	; 0x781
   81b74:	f2c0 0108 	movt	r1, #8
   81b78:	4788      	blx	r1

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81b7a:	f648 2014 	movw	r0, #35348	; 0x8a14
   81b7e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81b82:	6802      	ldr	r2, [r0, #0]
   81b84:	bb22      	cbnz	r2, 81bd0 <xTaskRemoveFromEventList+0x7c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81b86:	f104 0504 	add.w	r5, r4, #4
   81b8a:	4628      	mov	r0, r5
   81b8c:	f240 7181 	movw	r1, #1921	; 0x781
   81b90:	f2c0 0108 	movt	r1, #8
   81b94:	4788      	blx	r1
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   81b96:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81b98:	f648 1248 	movw	r2, #35144	; 0x8948
   81b9c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81ba0:	6813      	ldr	r3, [r2, #0]
   81ba2:	4298      	cmp	r0, r3
   81ba4:	d904      	bls.n	81bb0 <xTaskRemoveFromEventList+0x5c>
   81ba6:	f648 1148 	movw	r1, #35144	; 0x8948
   81baa:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81bae:	6008      	str	r0, [r1, #0]
   81bb0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   81bb4:	f648 104c 	movw	r0, #35148	; 0x894c
   81bb8:	4602      	mov	r2, r0
   81bba:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81bbe:	eb02 0083 	add.w	r0, r2, r3, lsl #2
   81bc2:	4629      	mov	r1, r5
   81bc4:	f240 731d 	movw	r3, #1821	; 0x71d
   81bc8:	f2c0 0308 	movt	r3, #8
   81bcc:	4798      	blx	r3
   81bce:	e009      	b.n	81be4 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81bd0:	f648 201c 	movw	r0, #35356	; 0x8a1c
   81bd4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81bd8:	4629      	mov	r1, r5
   81bda:	f240 731d 	movw	r3, #1821	; 0x71d
   81bde:	f2c0 0308 	movt	r3, #8
   81be2:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81be4:	f648 2118 	movw	r1, #35352	; 0x8a18
   81be8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81bec:	680a      	ldr	r2, [r1, #0]
   81bee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81bf0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   81bf2:	4298      	cmp	r0, r3
   81bf4:	bf34      	ite	cc
   81bf6:	2000      	movcc	r0, #0
   81bf8:	2001      	movcs	r0, #1
   81bfa:	bd38      	pop	{r3, r4, r5, pc}

00081bfc <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   81bfc:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   81bfe:	4603      	mov	r3, r0
   81c00:	b930      	cbnz	r0, 81c10 <vTaskSetTimeOutState+0x14>
   81c02:	f640 0311 	movw	r3, #2065	; 0x811
   81c06:	f2c0 0308 	movt	r3, #8
   81c0a:	4798      	blx	r3
   81c0c:	bf00      	nop
   81c0e:	e7fd      	b.n	81c0c <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81c10:	f648 2230 	movw	r2, #35376	; 0x8a30
   81c14:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81c18:	6810      	ldr	r0, [r2, #0]
   81c1a:	6018      	str	r0, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   81c1c:	f648 2134 	movw	r1, #35380	; 0x8a34
   81c20:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81c24:	880a      	ldrh	r2, [r1, #0]
   81c26:	809a      	strh	r2, [r3, #4]
   81c28:	bd08      	pop	{r3, pc}
   81c2a:	bf00      	nop

00081c2c <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   81c2c:	b538      	push	{r3, r4, r5, lr}
   81c2e:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   81c30:	4604      	mov	r4, r0
   81c32:	b930      	cbnz	r0, 81c42 <xTaskCheckForTimeOut+0x16>
   81c34:	f640 0311 	movw	r3, #2065	; 0x811
   81c38:	f2c0 0308 	movt	r3, #8
   81c3c:	4798      	blx	r3
   81c3e:	bf00      	nop
   81c40:	e7fd      	b.n	81c3e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   81c42:	b931      	cbnz	r1, 81c52 <xTaskCheckForTimeOut+0x26>
   81c44:	f640 0511 	movw	r5, #2065	; 0x811
   81c48:	f2c0 0508 	movt	r5, #8
   81c4c:	47a8      	blx	r5
   81c4e:	bf00      	nop
   81c50:	e7fd      	b.n	81c4e <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
   81c52:	f640 0325 	movw	r3, #2085	; 0x825
   81c56:	f2c0 0308 	movt	r3, #8
   81c5a:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   81c5c:	8828      	ldrh	r0, [r5, #0]
   81c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81c62:	4290      	cmp	r0, r2
   81c64:	d02c      	beq.n	81cc0 <xTaskCheckForTimeOut+0x94>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   81c66:	f648 2130 	movw	r1, #35376	; 0x8a30
   81c6a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81c6e:	680b      	ldr	r3, [r1, #0]
   81c70:	6822      	ldr	r2, [r4, #0]
   81c72:	429a      	cmp	r2, r3
   81c74:	d008      	beq.n	81c88 <xTaskCheckForTimeOut+0x5c>
   81c76:	f648 2134 	movw	r1, #35380	; 0x8a34
   81c7a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81c7e:	880b      	ldrh	r3, [r1, #0]
   81c80:	b29a      	uxth	r2, r3
   81c82:	88a1      	ldrh	r1, [r4, #4]
   81c84:	4291      	cmp	r1, r2
   81c86:	d91e      	bls.n	81cc6 <xTaskCheckForTimeOut+0x9a>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   81c88:	f648 2334 	movw	r3, #35380	; 0x8a34
   81c8c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81c90:	8819      	ldrh	r1, [r3, #0]
   81c92:	88a2      	ldrh	r2, [r4, #4]
   81c94:	1a8b      	subs	r3, r1, r2
   81c96:	b299      	uxth	r1, r3
   81c98:	4288      	cmp	r0, r1
   81c9a:	d917      	bls.n	81ccc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   81c9c:	f648 2334 	movw	r3, #35380	; 0x8a34
   81ca0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81ca4:	8819      	ldrh	r1, [r3, #0]
   81ca6:	b28b      	uxth	r3, r1
   81ca8:	1ad2      	subs	r2, r2, r3
   81caa:	1880      	adds	r0, r0, r2
   81cac:	8028      	strh	r0, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   81cae:	4620      	mov	r0, r4
   81cb0:	f641 34fd 	movw	r4, #7165	; 0x1bfd
   81cb4:	f2c0 0408 	movt	r4, #8
   81cb8:	47a0      	blx	r4
			xReturn = pdFALSE;
   81cba:	f04f 0400 	mov.w	r4, #0
   81cbe:	e007      	b.n	81cd0 <xTaskCheckForTimeOut+0xa4>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   81cc0:	f04f 0400 	mov.w	r4, #0
   81cc4:	e004      	b.n	81cd0 <xTaskCheckForTimeOut+0xa4>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   81cc6:	f04f 0401 	mov.w	r4, #1
   81cca:	e001      	b.n	81cd0 <xTaskCheckForTimeOut+0xa4>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   81ccc:	f04f 0401 	mov.w	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   81cd0:	f640 014d 	movw	r1, #2125	; 0x84d
   81cd4:	f2c0 0108 	movt	r1, #8
   81cd8:	4788      	blx	r1

	return xReturn;
}
   81cda:	4620      	mov	r0, r4
   81cdc:	bd38      	pop	{r3, r4, r5, pc}
   81cde:	bf00      	nop

00081ce0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   81ce0:	f648 2354 	movw	r3, #35412	; 0x8a54
   81ce4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81ce8:	f04f 0201 	mov.w	r2, #1
   81cec:	601a      	str	r2, [r3, #0]
   81cee:	4770      	bx	lr

00081cf0 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81cf0:	f648 2318 	movw	r3, #35352	; 0x8a18
   81cf4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81cf8:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81cfa:	4770      	bx	lr

00081cfc <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81cfc:	f648 1318 	movw	r3, #35096	; 0x8918
   81d00:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81d04:	6818      	ldr	r0, [r3, #0]
   81d06:	b148      	cbz	r0, 81d1c <xTaskGetSchedulerState+0x20>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81d08:	f648 2114 	movw	r1, #35348	; 0x8a14
   81d0c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81d10:	680a      	ldr	r2, [r1, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   81d12:	2a00      	cmp	r2, #0
   81d14:	bf14      	ite	ne
   81d16:	2002      	movne	r0, #2
   81d18:	2001      	moveq	r0, #1
   81d1a:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   81d1c:	f04f 0000 	mov.w	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   81d20:	4770      	bx	lr
   81d22:	bf00      	nop

00081d24 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   81d24:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81d26:	4604      	mov	r4, r0
   81d28:	2800      	cmp	r0, #0
   81d2a:	d04e      	beq.n	81dca <vTaskPriorityInherit+0xa6>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   81d2c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   81d2e:	f648 2218 	movw	r2, #35352	; 0x8a18
   81d32:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81d36:	6810      	ldr	r0, [r2, #0]
   81d38:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   81d3a:	428b      	cmp	r3, r1
   81d3c:	d245      	bcs.n	81dca <vTaskPriorityInherit+0xa6>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81d3e:	f648 2218 	movw	r2, #35352	; 0x8a18
   81d42:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81d46:	6810      	ldr	r0, [r2, #0]
   81d48:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   81d4a:	f1c1 020a 	rsb	r2, r1, #10
   81d4e:	8322      	strh	r2, [r4, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   81d50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81d54:	f648 104c 	movw	r0, #35148	; 0x894c
   81d58:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81d5c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   81d60:	6962      	ldr	r2, [r4, #20]
   81d62:	428a      	cmp	r2, r1
   81d64:	d12a      	bne.n	81dbc <vTaskPriorityInherit+0x98>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81d66:	f104 0504 	add.w	r5, r4, #4
   81d6a:	4628      	mov	r0, r5
   81d6c:	f240 7281 	movw	r2, #1921	; 0x781
   81d70:	f2c0 0208 	movt	r2, #8
   81d74:	4790      	blx	r2
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81d76:	f648 2318 	movw	r3, #35352	; 0x8a18
   81d7a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81d7e:	6818      	ldr	r0, [r3, #0]
   81d80:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   81d82:	62e1      	str	r1, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   81d84:	f648 1248 	movw	r2, #35144	; 0x8948
   81d88:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81d8c:	6813      	ldr	r3, [r2, #0]
   81d8e:	4299      	cmp	r1, r3
   81d90:	d904      	bls.n	81d9c <vTaskPriorityInherit+0x78>
   81d92:	f648 1048 	movw	r0, #35144	; 0x8948
   81d96:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81d9a:	6001      	str	r1, [r0, #0]
   81d9c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   81da0:	f648 124c 	movw	r2, #35148	; 0x894c
   81da4:	4613      	mov	r3, r2
   81da6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81daa:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   81dae:	4629      	mov	r1, r5
   81db0:	f240 721d 	movw	r2, #1821	; 0x71d
   81db4:	f2c0 0208 	movt	r2, #8
   81db8:	4790      	blx	r2
   81dba:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81dbc:	f648 2318 	movw	r3, #35352	; 0x8a18
   81dc0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81dc4:	6818      	ldr	r0, [r3, #0]
   81dc6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   81dc8:	62e1      	str	r1, [r4, #44]	; 0x2c
   81dca:	bd38      	pop	{r3, r4, r5, pc}

00081dcc <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   81dcc:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   81dce:	4604      	mov	r4, r0
   81dd0:	b350      	cbz	r0, 81e28 <vTaskPriorityDisinherit+0x5c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81dd2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   81dd4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   81dd6:	429a      	cmp	r2, r3
   81dd8:	d026      	beq.n	81e28 <vTaskPriorityDisinherit+0x5c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81dda:	f100 0504 	add.w	r5, r0, #4
   81dde:	4628      	mov	r0, r5
   81de0:	f240 7181 	movw	r1, #1921	; 0x781
   81de4:	f2c0 0108 	movt	r1, #8
   81de8:	4788      	blx	r1
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   81dea:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   81dec:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   81dee:	f1c0 020a 	rsb	r2, r0, #10
   81df2:	8322      	strh	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   81df4:	f648 1348 	movw	r3, #35144	; 0x8948
   81df8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81dfc:	6819      	ldr	r1, [r3, #0]
   81dfe:	4288      	cmp	r0, r1
   81e00:	d904      	bls.n	81e0c <vTaskPriorityDisinherit+0x40>
   81e02:	f648 1248 	movw	r2, #35144	; 0x8948
   81e06:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81e0a:	6010      	str	r0, [r2, #0]
   81e0c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   81e10:	f648 104c 	movw	r0, #35148	; 0x894c
   81e14:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81e18:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81e1c:	4629      	mov	r1, r5
   81e1e:	f240 721d 	movw	r2, #1821	; 0x71d
   81e22:	f2c0 0208 	movt	r2, #8
   81e26:	4790      	blx	r2
   81e28:	bd38      	pop	{r3, r4, r5, pc}
   81e2a:	bf00      	nop

00081e2c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81e2c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   81e2e:	f640 0325 	movw	r3, #2085	; 0x825
   81e32:	f2c0 0308 	movt	r3, #8
   81e36:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81e38:	f648 2090 	movw	r0, #35472	; 0x8a90
   81e3c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81e40:	6801      	ldr	r1, [r0, #0]
   81e42:	bb49      	cbnz	r1, 81e98 <prvCheckForValidListAndQueue+0x6c>
		{
			vListInitialise( &xActiveTimerList1 );
   81e44:	f648 2564 	movw	r5, #35428	; 0x8a64
   81e48:	f2c2 0507 	movt	r5, #8199	; 0x2007
   81e4c:	4628      	mov	r0, r5
   81e4e:	f240 66fd 	movw	r6, #1789	; 0x6fd
   81e52:	f2c0 0608 	movt	r6, #8
   81e56:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81e58:	f648 2478 	movw	r4, #35448	; 0x8a78
   81e5c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   81e60:	4620      	mov	r0, r4
   81e62:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   81e64:	f648 2260 	movw	r2, #35424	; 0x8a60
   81e68:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81e6c:	6015      	str	r5, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81e6e:	f648 2394 	movw	r3, #35476	; 0x8a94
   81e72:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81e76:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   81e78:	f04f 0005 	mov.w	r0, #5
   81e7c:	f04f 010c 	mov.w	r1, #12
   81e80:	f04f 0200 	mov.w	r2, #0
   81e84:	f640 43bd 	movw	r3, #3261	; 0xcbd
   81e88:	f2c0 0308 	movt	r3, #8
   81e8c:	4798      	blx	r3
   81e8e:	f648 2190 	movw	r1, #35472	; 0x8a90
   81e92:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81e96:	6008      	str	r0, [r1, #0]
		}
	}
	taskEXIT_CRITICAL();
   81e98:	f640 004d 	movw	r0, #2125	; 0x84d
   81e9c:	f2c0 0008 	movt	r0, #8
   81ea0:	4780      	blx	r0
   81ea2:	bd70      	pop	{r4, r5, r6, pc}

00081ea4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81ea4:	b510      	push	{r4, lr}
   81ea6:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81ea8:	8081      	strh	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81eaa:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   81eac:	4291      	cmp	r1, r2
   81eae:	d813      	bhi.n	81ed8 <prvInsertTimerInActiveList+0x34>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   81eb0:	1ad0      	subs	r0, r2, r3
   81eb2:	8b21      	ldrh	r1, [r4, #24]
   81eb4:	b283      	uxth	r3, r0
   81eb6:	4299      	cmp	r1, r3
   81eb8:	d921      	bls.n	81efe <prvInsertTimerInActiveList+0x5a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81eba:	f648 2294 	movw	r2, #35476	; 0x8a94
   81ebe:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81ec2:	6810      	ldr	r0, [r2, #0]
   81ec4:	f104 0104 	add.w	r1, r4, #4
   81ec8:	f240 733d 	movw	r3, #1853	; 0x73d
   81ecc:	f2c0 0308 	movt	r3, #8
   81ed0:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81ed2:	f04f 0000 	mov.w	r0, #0
   81ed6:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81ed8:	429a      	cmp	r2, r3
   81eda:	d201      	bcs.n	81ee0 <prvInsertTimerInActiveList+0x3c>
   81edc:	4299      	cmp	r1, r3
   81ede:	d211      	bcs.n	81f04 <prvInsertTimerInActiveList+0x60>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81ee0:	f648 2360 	movw	r3, #35424	; 0x8a60
   81ee4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81ee8:	6818      	ldr	r0, [r3, #0]
   81eea:	f104 0104 	add.w	r1, r4, #4
   81eee:	f240 723d 	movw	r2, #1853	; 0x73d
   81ef2:	f2c0 0208 	movt	r2, #8
   81ef6:	4790      	blx	r2
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81ef8:	f04f 0000 	mov.w	r0, #0
   81efc:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81efe:	f04f 0001 	mov.w	r0, #1
   81f02:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   81f04:	f04f 0001 	mov.w	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   81f08:	bd10      	pop	{r4, pc}
   81f0a:	bf00      	nop

00081f0c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   81f0c:	b510      	push	{r4, lr}
   81f0e:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   81f10:	f641 632d 	movw	r3, #7725	; 0x1e2d
   81f14:	f2c0 0308 	movt	r3, #8
   81f18:	4798      	blx	r3

	if( xTimerQueue != NULL )
   81f1a:	f648 2090 	movw	r0, #35472	; 0x8a90
   81f1e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81f22:	6801      	ldr	r1, [r0, #0]
   81f24:	b1b9      	cbz	r1, 81f56 <xTimerCreateTimerTask+0x4a>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   81f26:	f04f 0209 	mov.w	r2, #9
   81f2a:	9200      	str	r2, [sp, #0]
   81f2c:	f04f 0300 	mov.w	r3, #0
   81f30:	9301      	str	r3, [sp, #4]
   81f32:	9302      	str	r3, [sp, #8]
   81f34:	9303      	str	r3, [sp, #12]
   81f36:	f242 00b5 	movw	r0, #8373	; 0x20b5
   81f3a:	f2c0 0008 	movt	r0, #8
   81f3e:	f245 6144 	movw	r1, #22084	; 0x5644
   81f42:	f2c0 0108 	movt	r1, #8
   81f46:	f44f 7200 	mov.w	r2, #512	; 0x200
   81f4a:	f241 2401 	movw	r4, #4609	; 0x1201
   81f4e:	f2c0 0408 	movt	r4, #8
   81f52:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   81f54:	b930      	cbnz	r0, 81f64 <xTimerCreateTimerTask+0x58>
   81f56:	f640 0411 	movw	r4, #2065	; 0x811
   81f5a:	f2c0 0408 	movt	r4, #8
   81f5e:	47a0      	blx	r4
   81f60:	bf00      	nop
   81f62:	e7fd      	b.n	81f60 <xTimerCreateTimerTask+0x54>
	return xReturn;
}
   81f64:	b004      	add	sp, #16
   81f66:	bd10      	pop	{r4, pc}

00081f68 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   81f68:	b510      	push	{r4, lr}
   81f6a:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   81f6c:	f648 2490 	movw	r4, #35472	; 0x8a90
   81f70:	f2c2 0407 	movt	r4, #8199	; 0x2007
   81f74:	6824      	ldr	r4, [r4, #0]
   81f76:	b33c      	cbz	r4, 81fc8 <xTimerGenericCommand+0x60>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   81f78:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81f7a:	f8ad 2008 	strh.w	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81f7e:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   81f80:	b9bb      	cbnz	r3, 81fb2 <xTimerGenericCommand+0x4a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81f82:	f641 43fd 	movw	r3, #7421	; 0x1cfd
   81f86:	f2c0 0308 	movt	r3, #8
   81f8a:	4798      	blx	r3
   81f8c:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   81f8e:	f648 2390 	movw	r3, #35472	; 0x8a90
   81f92:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81f96:	6818      	ldr	r0, [r3, #0]
   81f98:	a901      	add	r1, sp, #4
   81f9a:	bf07      	ittee	eq
   81f9c:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
   81fa0:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81fa2:	2200      	movne	r2, #0
   81fa4:	4613      	movne	r3, r2
   81fa6:	f640 5429 	movw	r4, #3369	; 0xd29
   81faa:	f2c0 0408 	movt	r4, #8
   81fae:	47a0      	blx	r4
   81fb0:	e00c      	b.n	81fcc <xTimerGenericCommand+0x64>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81fb2:	4620      	mov	r0, r4
   81fb4:	a901      	add	r1, sp, #4
   81fb6:	461a      	mov	r2, r3
   81fb8:	f04f 0300 	mov.w	r3, #0
   81fbc:	f640 64a9 	movw	r4, #3753	; 0xea9
   81fc0:	f2c0 0408 	movt	r4, #8
   81fc4:	47a0      	blx	r4
   81fc6:	e001      	b.n	81fcc <xTimerGenericCommand+0x64>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   81fc8:	f04f 0000 	mov.w	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   81fcc:	b004      	add	sp, #16
   81fce:	bd10      	pop	{r4, pc}

00081fd0 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   81fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81fd4:	b085      	sub	sp, #20
   81fd6:	4682      	mov	sl, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   81fd8:	f241 5359 	movw	r3, #5465	; 0x1559
   81fdc:	f2c0 0308 	movt	r3, #8
   81fe0:	4798      	blx	r3
   81fe2:	4681      	mov	r9, r0

	if( xTimeNow < xLastTime )
   81fe4:	f648 208c 	movw	r0, #35468	; 0x8a8c
   81fe8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81fec:	8801      	ldrh	r1, [r0, #0]
   81fee:	4549      	cmp	r1, r9
   81ff0:	d951      	bls.n	82096 <prvSampleTimeNow+0xc6>
   81ff2:	e02d      	b.n	82050 <prvSampleTimeNow+0x80>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81ff4:	68dc      	ldr	r4, [r3, #12]
   81ff6:	8826      	ldrh	r6, [r4, #0]
   81ff8:	b2b6      	uxth	r6, r6

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81ffa:	68dd      	ldr	r5, [r3, #12]
   81ffc:	68ec      	ldr	r4, [r5, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81ffe:	f104 0504 	add.w	r5, r4, #4
   82002:	4628      	mov	r0, r5
   82004:	47c0      	blx	r8

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82006:	6a61      	ldr	r1, [r4, #36]	; 0x24
   82008:	4620      	mov	r0, r4
   8200a:	4788      	blx	r1

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8200c:	69e0      	ldr	r0, [r4, #28]
   8200e:	2801      	cmp	r0, #1
   82010:	d12d      	bne.n	8206e <prvSampleTimeNow+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   82012:	8b23      	ldrh	r3, [r4, #24]
   82014:	18f2      	adds	r2, r6, r3
   82016:	b291      	uxth	r1, r2
			if( xReloadTime > xNextExpireTime )
   82018:	42b1      	cmp	r1, r6
   8201a:	d909      	bls.n	82030 <prvSampleTimeNow+0x60>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   8201c:	80a1      	strh	r1, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   8201e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82020:	6838      	ldr	r0, [r7, #0]
   82022:	4629      	mov	r1, r5
   82024:	f240 733d 	movw	r3, #1853	; 0x73d
   82028:	f2c0 0308 	movt	r3, #8
   8202c:	4798      	blx	r3
   8202e:	e01e      	b.n	8206e <prvSampleTimeNow+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82030:	f8cd b000 	str.w	fp, [sp]
   82034:	4620      	mov	r0, r4
   82036:	4659      	mov	r1, fp
   82038:	4632      	mov	r2, r6
   8203a:	465b      	mov	r3, fp
   8203c:	9c03      	ldr	r4, [sp, #12]
   8203e:	47a0      	blx	r4
				configASSERT( xResult );
   82040:	b9a8      	cbnz	r0, 8206e <prvSampleTimeNow+0x9e>
   82042:	f640 0711 	movw	r7, #2065	; 0x811
   82046:	f2c0 0708 	movt	r7, #8
   8204a:	47b8      	blx	r7
   8204c:	bf00      	nop
   8204e:	e7fd      	b.n	8204c <prvSampleTimeNow+0x7c>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82050:	f648 2760 	movw	r7, #35424	; 0x8a60
   82054:	f2c2 0707 	movt	r7, #8199	; 0x2007
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82058:	f240 7881 	movw	r8, #1921	; 0x781
   8205c:	f2c0 0808 	movt	r8, #8
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82060:	f04f 0b00 	mov.w	fp, #0
   82064:	f641 7369 	movw	r3, #8041	; 0x1f69
   82068:	f2c0 0308 	movt	r3, #8
   8206c:	9303      	str	r3, [sp, #12]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   8206e:	683b      	ldr	r3, [r7, #0]
   82070:	6818      	ldr	r0, [r3, #0]
   82072:	2800      	cmp	r0, #0
   82074:	d1be      	bne.n	81ff4 <prvSampleTimeNow+0x24>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   82076:	f648 2294 	movw	r2, #35476	; 0x8a94
   8207a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8207e:	6811      	ldr	r1, [r2, #0]
   82080:	f648 2060 	movw	r0, #35424	; 0x8a60
   82084:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82088:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   8208a:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   8208c:	f04f 0301 	mov.w	r3, #1
   82090:	f8ca 3000 	str.w	r3, [sl]
   82094:	e003      	b.n	8209e <prvSampleTimeNow+0xce>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   82096:	f04f 0200 	mov.w	r2, #0
   8209a:	f8ca 2000 	str.w	r2, [sl]
	}

	xLastTime = xTimeNow;
   8209e:	f648 228c 	movw	r2, #35468	; 0x8a8c
   820a2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   820a6:	f8a2 9000 	strh.w	r9, [r2]

	return xTimeNow;
}
   820aa:	4648      	mov	r0, r9
   820ac:	b005      	add	sp, #20
   820ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   820b2:	bf00      	nop

000820b4 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   820b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   820b8:	b089      	sub	sp, #36	; 0x24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   820ba:	f648 2b60 	movw	fp, #35424	; 0x8a60
   820be:	f2c2 0b07 	movt	fp, #8199	; 0x2007
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   820c2:	f241 5345 	movw	r3, #5445	; 0x1545
   820c6:	f2c0 0308 	movt	r3, #8
   820ca:	9303      	str	r3, [sp, #12]
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   820cc:	f641 7ad1 	movw	sl, #8145	; 0x1fd1
   820d0:	f2c0 0a08 	movt	sl, #8
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   820d4:	f8db 0000 	ldr.w	r0, [fp]
   820d8:	6802      	ldr	r2, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
   820da:	2a00      	cmp	r2, #0
   820dc:	f000 80cd 	beq.w	8227a <prvTimerTask+0x1c6>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   820e0:	68c7      	ldr	r7, [r0, #12]
   820e2:	883b      	ldrh	r3, [r7, #0]
   820e4:	b29d      	uxth	r5, r3
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   820e6:	9803      	ldr	r0, [sp, #12]
   820e8:	4780      	blx	r0
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   820ea:	a804      	add	r0, sp, #16
   820ec:	47d0      	blx	sl
   820ee:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   820f0:	9a04      	ldr	r2, [sp, #16]
   820f2:	2a00      	cmp	r2, #0
   820f4:	d152      	bne.n	8219c <prvTimerTask+0xe8>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   820f6:	4285      	cmp	r5, r0
   820f8:	d838      	bhi.n	8216c <prvTimerTask+0xb8>
			{
				xTaskResumeAll();
   820fa:	f241 701d 	movw	r0, #5917	; 0x171d
   820fe:	f2c0 0008 	movt	r0, #8
   82102:	4780      	blx	r0
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   82104:	f8db 2000 	ldr.w	r2, [fp]
   82108:	68d1      	ldr	r1, [r2, #12]
   8210a:	68cc      	ldr	r4, [r1, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   8210c:	f104 0004 	add.w	r0, r4, #4
   82110:	f240 7781 	movw	r7, #1921	; 0x781
   82114:	f2c0 0708 	movt	r7, #8
   82118:	47b8      	blx	r7
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8211a:	69e3      	ldr	r3, [r4, #28]
   8211c:	2b01      	cmp	r3, #1
   8211e:	d11f      	bne.n	82160 <prvTimerTask+0xac>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   82120:	8b20      	ldrh	r0, [r4, #24]
   82122:	182a      	adds	r2, r5, r0
   82124:	4620      	mov	r0, r4
   82126:	b291      	uxth	r1, r2
   82128:	4632      	mov	r2, r6
   8212a:	462b      	mov	r3, r5
   8212c:	f641 66a5 	movw	r6, #7845	; 0x1ea5
   82130:	f2c0 0608 	movt	r6, #8
   82134:	47b0      	blx	r6
   82136:	2801      	cmp	r0, #1
   82138:	d112      	bne.n	82160 <prvTimerTask+0xac>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   8213a:	f04f 0300 	mov.w	r3, #0
   8213e:	9300      	str	r3, [sp, #0]
   82140:	4620      	mov	r0, r4
   82142:	4619      	mov	r1, r3
   82144:	462a      	mov	r2, r5
   82146:	f641 7569 	movw	r5, #8041	; 0x1f69
   8214a:	f2c0 0508 	movt	r5, #8
   8214e:	47a8      	blx	r5
			configASSERT( xResult );
   82150:	b930      	cbnz	r0, 82160 <prvTimerTask+0xac>
   82152:	f640 0711 	movw	r7, #2065	; 0x811
   82156:	f2c0 0708 	movt	r7, #8
   8215a:	47b8      	blx	r7
   8215c:	bf00      	nop
   8215e:	e7fd      	b.n	8215c <prvTimerTask+0xa8>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82160:	6a61      	ldr	r1, [r4, #36]	; 0x24
   82162:	4620      	mov	r0, r4
   82164:	4788      	blx	r1
   82166:	e01e      	b.n	821a6 <prvTimerTask+0xf2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   82168:	f04f 0500 	mov.w	r5, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   8216c:	1bae      	subs	r6, r5, r6
   8216e:	f648 2490 	movw	r4, #35472	; 0x8a90
   82172:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82176:	6820      	ldr	r0, [r4, #0]
   82178:	b2b1      	uxth	r1, r6
   8217a:	f241 1529 	movw	r5, #4393	; 0x1129
   8217e:	f2c0 0508 	movt	r5, #8
   82182:	47a8      	blx	r5

				if( xTaskResumeAll() == pdFALSE )
   82184:	f241 771d 	movw	r7, #5917	; 0x171d
   82188:	f2c0 0708 	movt	r7, #8
   8218c:	47b8      	blx	r7
   8218e:	b950      	cbnz	r0, 821a6 <prvTimerTask+0xf2>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   82190:	f640 0301 	movw	r3, #2049	; 0x801
   82194:	f2c0 0308 	movt	r3, #8
   82198:	4798      	blx	r3
   8219a:	e004      	b.n	821a6 <prvTimerTask+0xf2>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   8219c:	f241 711d 	movw	r1, #5917	; 0x171d
   821a0:	f2c0 0108 	movt	r1, #8
   821a4:	4788      	blx	r1
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   821a6:	a804      	add	r0, sp, #16
   821a8:	47d0      	blx	sl
   821aa:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   821ac:	f648 2690 	movw	r6, #35472	; 0x8a90
   821b0:	f2c2 0607 	movt	r6, #8199	; 0x2007
   821b4:	f640 7559 	movw	r5, #3929	; 0xf59
   821b8:	f2c0 0508 	movt	r5, #8
		if( pxTimer != NULL )
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   821bc:	f240 7881 	movw	r8, #1921	; 0x781
   821c0:	f2c0 0808 	movt	r8, #8
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   821c4:	f641 69a5 	movw	r9, #7845	; 0x1ea5
   821c8:	f2c0 0908 	movt	r9, #8
   821cc:	e04c      	b.n	82268 <prvTimerTask+0x1b4>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   821ce:	9c07      	ldr	r4, [sp, #28]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   821d0:	b124      	cbz	r4, 821dc <prvTimerTask+0x128>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   821d2:	6963      	ldr	r3, [r4, #20]
   821d4:	b113      	cbz	r3, 821dc <prvTimerTask+0x128>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   821d6:	f104 0004 	add.w	r0, r4, #4
   821da:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   821dc:	9805      	ldr	r0, [sp, #20]
   821de:	2802      	cmp	r0, #2
   821e0:	d02a      	beq.n	82238 <prvTimerTask+0x184>
   821e2:	2803      	cmp	r0, #3
   821e4:	d03a      	beq.n	8225c <prvTimerTask+0x1a8>
   821e6:	2800      	cmp	r0, #0
   821e8:	d13e      	bne.n	82268 <prvTimerTask+0x1b4>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   821ea:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   821ee:	8b22      	ldrh	r2, [r4, #24]
   821f0:	1899      	adds	r1, r3, r2
   821f2:	4620      	mov	r0, r4
   821f4:	b289      	uxth	r1, r1
   821f6:	463a      	mov	r2, r7
   821f8:	47c8      	blx	r9
   821fa:	2801      	cmp	r0, #1
   821fc:	d134      	bne.n	82268 <prvTimerTask+0x1b4>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   821fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82200:	4620      	mov	r0, r4
   82202:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82204:	69e0      	ldr	r0, [r4, #28]
   82206:	2801      	cmp	r0, #1
   82208:	d12e      	bne.n	82268 <prvTimerTask+0x1b4>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   8220a:	8b22      	ldrh	r2, [r4, #24]
   8220c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   82210:	1852      	adds	r2, r2, r1
   82212:	f04f 0300 	mov.w	r3, #0
   82216:	9300      	str	r3, [sp, #0]
   82218:	4620      	mov	r0, r4
   8221a:	4619      	mov	r1, r3
   8221c:	b292      	uxth	r2, r2
   8221e:	f641 7469 	movw	r4, #8041	; 0x1f69
   82222:	f2c0 0408 	movt	r4, #8
   82226:	47a0      	blx	r4
						configASSERT( xResult );
   82228:	b9f0      	cbnz	r0, 82268 <prvTimerTask+0x1b4>
   8222a:	f640 0511 	movw	r5, #2065	; 0x811
   8222e:	f2c0 0508 	movt	r5, #8
   82232:	47a8      	blx	r5
   82234:	bf00      	nop
   82236:	e7fd      	b.n	82234 <prvTimerTask+0x180>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   82238:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   8223c:	8320      	strh	r0, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   8223e:	b930      	cbnz	r0, 8224e <prvTimerTask+0x19a>
   82240:	f640 0611 	movw	r6, #2065	; 0x811
   82244:	f2c0 0608 	movt	r6, #8
   82248:	47b0      	blx	r6
   8224a:	bf00      	nop
   8224c:	e7fd      	b.n	8224a <prvTimerTask+0x196>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   8224e:	1839      	adds	r1, r7, r0
   82250:	4620      	mov	r0, r4
   82252:	b289      	uxth	r1, r1
   82254:	463a      	mov	r2, r7
   82256:	463b      	mov	r3, r7
   82258:	47c8      	blx	r9
   8225a:	e005      	b.n	82268 <prvTimerTask+0x1b4>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   8225c:	4620      	mov	r0, r4
   8225e:	f640 239d 	movw	r3, #2717	; 0xa9d
   82262:	f2c0 0308 	movt	r3, #8
   82266:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   82268:	6830      	ldr	r0, [r6, #0]
   8226a:	a905      	add	r1, sp, #20
   8226c:	f04f 0200 	mov.w	r2, #0
   82270:	4613      	mov	r3, r2
   82272:	47a8      	blx	r5
   82274:	2800      	cmp	r0, #0
   82276:	d1aa      	bne.n	821ce <prvTimerTask+0x11a>
   82278:	e72c      	b.n	820d4 <prvTimerTask+0x20>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   8227a:	9903      	ldr	r1, [sp, #12]
   8227c:	4788      	blx	r1
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8227e:	a804      	add	r0, sp, #16
   82280:	47d0      	blx	sl
   82282:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   82284:	9c04      	ldr	r4, [sp, #16]
   82286:	2c00      	cmp	r4, #0
   82288:	f43f af6e 	beq.w	82168 <prvTimerTask+0xb4>
   8228c:	e786      	b.n	8219c <prvTimerTask+0xe8>
   8228e:	bf00      	nop

00082290 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82290:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82292:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   82296:	f2c0 5001 	movt	r0, #1281	; 0x501
   8229a:	f642 43f5 	movw	r3, #11509	; 0x2cf5
   8229e:	f2c0 0308 	movt	r3, #8
   822a2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   822a4:	f04f 0000 	mov.w	r0, #0
   822a8:	f04f 013e 	mov.w	r1, #62	; 0x3e
   822ac:	f642 02cd 	movw	r2, #10445	; 0x28cd
   822b0:	f2c0 0208 	movt	r2, #8
   822b4:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   822b6:	f642 143d 	movw	r4, #10557	; 0x293d
   822ba:	f2c0 0408 	movt	r4, #8
   822be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   822c0:	2800      	cmp	r0, #0
   822c2:	d0fc      	beq.n	822be <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   822c4:	f642 104d 	movw	r0, #10573	; 0x294d
   822c8:	f2c0 0008 	movt	r0, #8
   822cc:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   822ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   822d2:	f2c4 010e 	movt	r1, #16398	; 0x400e
   822d6:	f643 7301 	movw	r3, #16129	; 0x3f01
   822da:	f2c2 030d 	movt	r3, #8205	; 0x200d
   822de:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   822e0:	f642 145d 	movw	r4, #10589	; 0x295d
   822e4:	f2c0 0408 	movt	r4, #8
   822e8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   822ea:	2800      	cmp	r0, #0
   822ec:	d0fc      	beq.n	822e8 <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   822ee:	f04f 0010 	mov.w	r0, #16
   822f2:	f642 022d 	movw	r2, #10285	; 0x282d
   822f6:	f2c0 0208 	movt	r2, #8
   822fa:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   822fc:	f642 302d 	movw	r0, #11053	; 0x2b2d
   82300:	f2c0 0008 	movt	r0, #8
   82304:	4780      	blx	r0

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82306:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   8230a:	f2c0 5001 	movt	r0, #1281	; 0x501
   8230e:	f642 41f5 	movw	r1, #11509	; 0x2cf5
   82312:	f2c0 0108 	movt	r1, #8
   82316:	4788      	blx	r1
   82318:	bd10      	pop	{r4, pc}
   8231a:	bf00      	nop

0008231c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   8231c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8231e:	f641 2350 	movw	r3, #6736	; 0x1a50
   82322:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82326:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8232a:	605a      	str	r2, [r3, #4]
   8232c:	f04f 000b 	mov.w	r0, #11
   82330:	f642 146d 	movw	r4, #10605	; 0x296d
   82334:	f2c0 0408 	movt	r4, #8
   82338:	47a0      	blx	r4
   8233a:	f04f 000c 	mov.w	r0, #12
   8233e:	47a0      	blx	r4
   82340:	f04f 000d 	mov.w	r0, #13
   82344:	47a0      	blx	r4
   82346:	f04f 000e 	mov.w	r0, #14
   8234a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8234c:	f04f 003b 	mov.w	r0, #59	; 0x3b
   82350:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82354:	f242 5481 	movw	r4, #9601	; 0x2581
   82358:	f2c0 0408 	movt	r4, #8
   8235c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8235e:	f04f 0055 	mov.w	r0, #85	; 0x55
   82362:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82366:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   82368:	f04f 0056 	mov.w	r0, #86	; 0x56
   8236c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82370:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   82372:	f04f 0068 	mov.w	r0, #104	; 0x68
   82376:	f04f 0179 	mov.w	r1, #121	; 0x79
   8237a:	f6c2 0100 	movt	r1, #10240	; 0x2800
   8237e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82380:	f04f 005c 	mov.w	r0, #92	; 0x5c
   82384:	f04f 0101 	mov.w	r1, #1
   82388:	f6c2 0100 	movt	r1, #10240	; 0x2800
   8238c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8238e:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   82392:	f2c4 000e 	movt	r0, #16398	; 0x400e
   82396:	f44f 7140 	mov.w	r1, #768	; 0x300
   8239a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8239e:	f242 43a5 	movw	r3, #9381	; 0x24a5
   823a2:	f2c0 0308 	movt	r3, #8
   823a6:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   823a8:	f04f 002b 	mov.w	r0, #43	; 0x2b
   823ac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   823b0:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   823b2:	f04f 002a 	mov.w	r0, #42	; 0x2a
   823b6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   823ba:	47a0      	blx	r4
   823bc:	bd10      	pop	{r4, pc}
   823be:	bf00      	nop

000823c0 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   823c0:	b10a      	cbz	r2, 823c6 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   823c2:	6641      	str	r1, [r0, #100]	; 0x64
   823c4:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   823c6:	6601      	str	r1, [r0, #96]	; 0x60
   823c8:	4770      	bx	lr
   823ca:	bf00      	nop

000823cc <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   823cc:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   823ce:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   823d2:	d016      	beq.n	82402 <pio_set_peripheral+0x36>
   823d4:	d804      	bhi.n	823e0 <pio_set_peripheral+0x14>
   823d6:	b1c9      	cbz	r1, 8240c <pio_set_peripheral+0x40>
   823d8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   823dc:	d115      	bne.n	8240a <pio_set_peripheral+0x3e>
   823de:	e009      	b.n	823f4 <pio_set_peripheral+0x28>
   823e0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   823e4:	d012      	beq.n	8240c <pio_set_peripheral+0x40>
   823e6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   823ea:	d00f      	beq.n	8240c <pio_set_peripheral+0x40>
   823ec:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   823f0:	d10b      	bne.n	8240a <pio_set_peripheral+0x3e>
   823f2:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   823f4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   823f6:	6f01      	ldr	r1, [r0, #112]	; 0x70
   823f8:	400b      	ands	r3, r1
   823fa:	ea23 0302 	bic.w	r3, r3, r2
   823fe:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82400:	e003      	b.n	8240a <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   82402:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82404:	ea42 0103 	orr.w	r1, r2, r3
   82408:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8240a:	6042      	str	r2, [r0, #4]
   8240c:	4770      	bx	lr
   8240e:	bf00      	nop

00082410 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82410:	6441      	str	r1, [r0, #68]	; 0x44
   82412:	4770      	bx	lr

00082414 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82416:	4604      	mov	r4, r0
   82418:	460d      	mov	r5, r1
   8241a:	4616      	mov	r6, r2
   8241c:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   8241e:	f242 4311 	movw	r3, #9233	; 0x2411
   82422:	f2c0 0308 	movt	r3, #8
   82426:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   82428:	4620      	mov	r0, r4
   8242a:	4629      	mov	r1, r5
   8242c:	9a06      	ldr	r2, [sp, #24]
   8242e:	f242 33c1 	movw	r3, #9153	; 0x23c1
   82432:	f2c0 0308 	movt	r3, #8
   82436:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82438:	b10f      	cbz	r7, 8243e <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   8243a:	6525      	str	r5, [r4, #80]	; 0x50
   8243c:	e000      	b.n	82440 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8243e:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82440:	b10e      	cbz	r6, 82446 <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   82442:	6325      	str	r5, [r4, #48]	; 0x30
   82444:	e000      	b.n	82448 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82446:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   82448:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   8244a:	6025      	str	r5, [r4, #0]
   8244c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8244e:	bf00      	nop

00082450 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   82450:	b570      	push	{r4, r5, r6, lr}
   82452:	4604      	mov	r4, r0
   82454:	460d      	mov	r5, r1
   82456:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   82458:	f242 4311 	movw	r3, #9233	; 0x2411
   8245c:	f2c0 0308 	movt	r3, #8
   82460:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   82462:	4620      	mov	r0, r4
   82464:	4629      	mov	r1, r5
   82466:	f006 0201 	and.w	r2, r6, #1
   8246a:	f242 33c1 	movw	r3, #9153	; 0x23c1
   8246e:	f2c0 0308 	movt	r3, #8
   82472:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82474:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   82478:	bf14      	ite	ne
   8247a:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8247c:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8247e:	f016 0f02 	tst.w	r6, #2
   82482:	d002      	beq.n	8248a <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   82484:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   82488:	e004      	b.n	82494 <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8248a:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_DIFSR = ul_mask;
   8248e:	bf18      	it	ne
   82490:	f8c4 5084 	strne.w	r5, [r4, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82494:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   82496:	6025      	str	r5, [r4, #0]
   82498:	bd70      	pop	{r4, r5, r6, pc}
   8249a:	bf00      	nop

0008249c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8249c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8249e:	4770      	bx	lr

000824a0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   824a0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   824a2:	4770      	bx	lr

000824a4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   824a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   824a6:	b083      	sub	sp, #12
   824a8:	4607      	mov	r7, r0
   824aa:	460e      	mov	r6, r1
   824ac:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   824ae:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   824b2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   824b6:	d036      	beq.n	82526 <pio_configure_pin_group+0x82>
   824b8:	d806      	bhi.n	824c8 <pio_configure_pin_group+0x24>
   824ba:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   824be:	d00a      	beq.n	824d6 <pio_configure_pin_group+0x32>
   824c0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   824c4:	d14d      	bne.n	82562 <pio_configure_pin_group+0xbe>
   824c6:	e01a      	b.n	824fe <pio_configure_pin_group+0x5a>
   824c8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   824cc:	d033      	beq.n	82536 <pio_configure_pin_group+0x92>
   824ce:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   824d2:	d146      	bne.n	82562 <pio_configure_pin_group+0xbe>
   824d4:	e02f      	b.n	82536 <pio_configure_pin_group+0x92>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   824d6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   824da:	4632      	mov	r2, r6
   824dc:	f242 33cd 	movw	r3, #9165	; 0x23cd
   824e0:	f2c0 0308 	movt	r3, #8
   824e4:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   824e6:	4638      	mov	r0, r7
   824e8:	4631      	mov	r1, r6
   824ea:	f005 0201 	and.w	r2, r5, #1
   824ee:	f242 33c1 	movw	r3, #9153	; 0x23c1
   824f2:	f2c0 0308 	movt	r3, #8
   824f6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   824f8:	f04f 0001 	mov.w	r0, #1
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   824fc:	e033      	b.n	82566 <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   824fe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82502:	4632      	mov	r2, r6
   82504:	f242 33cd 	movw	r3, #9165	; 0x23cd
   82508:	f2c0 0308 	movt	r3, #8
   8250c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8250e:	4638      	mov	r0, r7
   82510:	4631      	mov	r1, r6
   82512:	f005 0201 	and.w	r2, r5, #1
   82516:	f242 33c1 	movw	r3, #9153	; 0x23c1
   8251a:	f2c0 0308 	movt	r3, #8
   8251e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82520:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   82524:	e01f      	b.n	82566 <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82526:	f242 4351 	movw	r3, #9297	; 0x2451
   8252a:	f2c0 0308 	movt	r3, #8
   8252e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82530:	f04f 0001 	mov.w	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   82534:	e017      	b.n	82566 <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82536:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8253a:	f005 0001 	and.w	r0, r5, #1
   8253e:	9000      	str	r0, [sp, #0]
   82540:	4638      	mov	r0, r7
   82542:	4631      	mov	r1, r6
   82544:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82548:	bf14      	ite	ne
   8254a:	2200      	movne	r2, #0
   8254c:	2201      	moveq	r2, #1
   8254e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82552:	f242 4415 	movw	r4, #9237	; 0x2415
   82556:	f2c0 0408 	movt	r4, #8
   8255a:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8255c:	f04f 0001 	mov.w	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82560:	e001      	b.n	82566 <pio_configure_pin_group+0xc2>

	default:
		return 0;
   82562:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   82566:	b003      	add	sp, #12
   82568:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8256a:	bf00      	nop

0008256c <pio_get_pin_group>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8256c:	ea4f 1050 	mov.w	r0, r0, lsr #5
   82570:	f500 1100 	add.w	r1, r0, #2097152	; 0x200000
   82574:	f201 7207 	addw	r2, r1, #1799	; 0x707
#endif
	return p_pio;
}
   82578:	ea4f 2042 	mov.w	r0, r2, lsl #9
   8257c:	4770      	bx	lr
   8257e:	bf00      	nop

00082580 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82580:	b5f0      	push	{r4, r5, r6, r7, lr}
   82582:	b083      	sub	sp, #12
   82584:	4607      	mov	r7, r0
   82586:	460d      	mov	r5, r1
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82588:	f242 536d 	movw	r3, #9581	; 0x256d
   8258c:	f2c0 0308 	movt	r3, #8
   82590:	4798      	blx	r3
   82592:	4606      	mov	r6, r0

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82594:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   82598:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8259c:	d041      	beq.n	82622 <pio_configure_pin+0xa2>
   8259e:	d806      	bhi.n	825ae <pio_configure_pin+0x2e>
   825a0:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   825a4:	d00a      	beq.n	825bc <pio_configure_pin+0x3c>
   825a6:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   825aa:	d162      	bne.n	82672 <pio_configure_pin+0xf2>
   825ac:	e020      	b.n	825f0 <pio_configure_pin+0x70>
   825ae:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   825b2:	d044      	beq.n	8263e <pio_configure_pin+0xbe>
   825b4:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   825b8:	d15b      	bne.n	82672 <pio_configure_pin+0xf2>
   825ba:	e040      	b.n	8263e <pio_configure_pin+0xbe>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   825bc:	f007 001f 	and.w	r0, r7, #31
   825c0:	f04f 0401 	mov.w	r4, #1
   825c4:	fa04 f700 	lsl.w	r7, r4, r0
   825c8:	4630      	mov	r0, r6
   825ca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   825ce:	463a      	mov	r2, r7
   825d0:	f242 33cd 	movw	r3, #9165	; 0x23cd
   825d4:	f2c0 0308 	movt	r3, #8
   825d8:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   825da:	4630      	mov	r0, r6
   825dc:	4639      	mov	r1, r7
   825de:	ea05 0204 	and.w	r2, r5, r4
   825e2:	f242 33c1 	movw	r3, #9153	; 0x23c1
   825e6:	f2c0 0308 	movt	r3, #8
   825ea:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   825ec:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   825ee:	e042      	b.n	82676 <pio_configure_pin+0xf6>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   825f0:	f007 071f 	and.w	r7, r7, #31
   825f4:	f04f 0401 	mov.w	r4, #1
   825f8:	fa04 f707 	lsl.w	r7, r4, r7
   825fc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82600:	463a      	mov	r2, r7
   82602:	f242 33cd 	movw	r3, #9165	; 0x23cd
   82606:	f2c0 0308 	movt	r3, #8
   8260a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   8260c:	4630      	mov	r0, r6
   8260e:	4639      	mov	r1, r7
   82610:	ea05 0204 	and.w	r2, r5, r4
   82614:	f242 33c1 	movw	r3, #9153	; 0x23c1
   82618:	f2c0 0308 	movt	r3, #8
   8261c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8261e:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   82620:	e029      	b.n	82676 <pio_configure_pin+0xf6>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82622:	f007 021f 	and.w	r2, r7, #31
   82626:	f04f 0401 	mov.w	r4, #1
   8262a:	fa04 f102 	lsl.w	r1, r4, r2
   8262e:	462a      	mov	r2, r5
   82630:	f242 4351 	movw	r3, #9297	; 0x2451
   82634:	f2c0 0308 	movt	r3, #8
   82638:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8263a:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8263c:	e01b      	b.n	82676 <pio_configure_pin+0xf6>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8263e:	f007 011f 	and.w	r1, r7, #31
   82642:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82646:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8264a:	ea05 0004 	and.w	r0, r5, r4
   8264e:	9000      	str	r0, [sp, #0]
   82650:	4630      	mov	r0, r6
   82652:	fa04 f101 	lsl.w	r1, r4, r1
   82656:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8265a:	bf14      	ite	ne
   8265c:	2200      	movne	r2, #0
   8265e:	2201      	moveq	r2, #1
   82660:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82664:	f242 4515 	movw	r5, #9237	; 0x2415
   82668:	f2c0 0508 	movt	r5, #8
   8266c:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   8266e:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82670:	e001      	b.n	82676 <pio_configure_pin+0xf6>

	default:
		return 0;
   82672:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   82676:	b003      	add	sp, #12
   82678:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8267a:	bf00      	nop

0008267c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8267c:	b570      	push	{r4, r5, r6, lr}
   8267e:	4606      	mov	r6, r0
   82680:	460c      	mov	r4, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82682:	f242 439d 	movw	r3, #9373	; 0x249d
   82686:	f2c0 0308 	movt	r3, #8
   8268a:	4798      	blx	r3
   8268c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8268e:	4630      	mov	r0, r6
   82690:	f242 41a1 	movw	r1, #9377	; 0x24a1
   82694:	f2c0 0108 	movt	r1, #8
   82698:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   8269a:	4005      	ands	r5, r0
   8269c:	f000 808c 	beq.w	827b8 <pio_handler_process+0x13c>
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   826a0:	f648 2098 	movw	r0, #35480	; 0x8a98
   826a4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   826a8:	6800      	ldr	r0, [r0, #0]
   826aa:	42a0      	cmp	r0, r4
   826ac:	d10c      	bne.n	826c8 <pio_handler_process+0x4c>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   826ae:	f648 2298 	movw	r2, #35480	; 0x8a98
   826b2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   826b6:	6851      	ldr	r1, [r2, #4]
   826b8:	420d      	tst	r5, r1
   826ba:	d005      	beq.n	826c8 <pio_handler_process+0x4c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   826bc:	4616      	mov	r6, r2
   826be:	68d3      	ldr	r3, [r2, #12]
   826c0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   826c2:	6871      	ldr	r1, [r6, #4]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   826c4:	438d      	bics	r5, r1
   826c6:	d077      	beq.n	827b8 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   826c8:	f648 2098 	movw	r0, #35480	; 0x8a98
   826cc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   826d0:	6900      	ldr	r0, [r0, #16]
   826d2:	42a0      	cmp	r0, r4
   826d4:	d10c      	bne.n	826f0 <pio_handler_process+0x74>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   826d6:	f648 2298 	movw	r2, #35480	; 0x8a98
   826da:	f2c2 0207 	movt	r2, #8199	; 0x2007
   826de:	6951      	ldr	r1, [r2, #20]
   826e0:	420d      	tst	r5, r1
   826e2:	d005      	beq.n	826f0 <pio_handler_process+0x74>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   826e4:	4616      	mov	r6, r2
   826e6:	69d3      	ldr	r3, [r2, #28]
   826e8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   826ea:	6971      	ldr	r1, [r6, #20]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   826ec:	438d      	bics	r5, r1
   826ee:	d063      	beq.n	827b8 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   826f0:	f648 2098 	movw	r0, #35480	; 0x8a98
   826f4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   826f8:	6a00      	ldr	r0, [r0, #32]
   826fa:	42a0      	cmp	r0, r4
   826fc:	d10c      	bne.n	82718 <pio_handler_process+0x9c>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   826fe:	f648 2298 	movw	r2, #35480	; 0x8a98
   82702:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82706:	6a51      	ldr	r1, [r2, #36]	; 0x24
   82708:	420d      	tst	r5, r1
   8270a:	d005      	beq.n	82718 <pio_handler_process+0x9c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8270c:	4616      	mov	r6, r2
   8270e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   82710:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82712:	6a71      	ldr	r1, [r6, #36]	; 0x24

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82714:	438d      	bics	r5, r1
   82716:	d04f      	beq.n	827b8 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82718:	f648 2098 	movw	r0, #35480	; 0x8a98
   8271c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82720:	6b00      	ldr	r0, [r0, #48]	; 0x30
   82722:	42a0      	cmp	r0, r4
   82724:	d10c      	bne.n	82740 <pio_handler_process+0xc4>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82726:	f648 2298 	movw	r2, #35480	; 0x8a98
   8272a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8272e:	6b51      	ldr	r1, [r2, #52]	; 0x34
   82730:	420d      	tst	r5, r1
   82732:	d005      	beq.n	82740 <pio_handler_process+0xc4>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82734:	4616      	mov	r6, r2
   82736:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   82738:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8273a:	6b71      	ldr	r1, [r6, #52]	; 0x34

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8273c:	438d      	bics	r5, r1
   8273e:	d03b      	beq.n	827b8 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82740:	f648 2098 	movw	r0, #35480	; 0x8a98
   82744:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82748:	6c00      	ldr	r0, [r0, #64]	; 0x40
   8274a:	42a0      	cmp	r0, r4
   8274c:	d10c      	bne.n	82768 <pio_handler_process+0xec>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8274e:	f648 2298 	movw	r2, #35480	; 0x8a98
   82752:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82756:	6c51      	ldr	r1, [r2, #68]	; 0x44
   82758:	420d      	tst	r5, r1
   8275a:	d005      	beq.n	82768 <pio_handler_process+0xec>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8275c:	4616      	mov	r6, r2
   8275e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   82760:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82762:	6c71      	ldr	r1, [r6, #68]	; 0x44

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82764:	438d      	bics	r5, r1
   82766:	d027      	beq.n	827b8 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82768:	f648 2098 	movw	r0, #35480	; 0x8a98
   8276c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82770:	6d00      	ldr	r0, [r0, #80]	; 0x50
   82772:	42a0      	cmp	r0, r4
   82774:	d10c      	bne.n	82790 <pio_handler_process+0x114>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82776:	f648 2298 	movw	r2, #35480	; 0x8a98
   8277a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8277e:	6d51      	ldr	r1, [r2, #84]	; 0x54
   82780:	420d      	tst	r5, r1
   82782:	d005      	beq.n	82790 <pio_handler_process+0x114>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82784:	4616      	mov	r6, r2
   82786:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   82788:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8278a:	6d71      	ldr	r1, [r6, #84]	; 0x54

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8278c:	438d      	bics	r5, r1
   8278e:	d013      	beq.n	827b8 <pio_handler_process+0x13c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82790:	f648 2098 	movw	r0, #35480	; 0x8a98
   82794:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82798:	6e00      	ldr	r0, [r0, #96]	; 0x60
   8279a:	42a0      	cmp	r0, r4
   8279c:	d10c      	bne.n	827b8 <pio_handler_process+0x13c>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8279e:	f648 2298 	movw	r2, #35480	; 0x8a98
   827a2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   827a6:	6e51      	ldr	r1, [r2, #100]	; 0x64
   827a8:	4229      	tst	r1, r5
   827aa:	d005      	beq.n	827b8 <pio_handler_process+0x13c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   827ac:	f648 2398 	movw	r3, #35480	; 0x8a98
   827b0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   827b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   827b6:	4790      	blx	r2
   827b8:	bd70      	pop	{r4, r5, r6, pc}
   827ba:	bf00      	nop

000827bc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   827bc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   827be:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   827c2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   827c6:	f04f 010b 	mov.w	r1, #11
   827ca:	f242 637d 	movw	r3, #9853	; 0x267d
   827ce:	f2c0 0308 	movt	r3, #8
   827d2:	4798      	blx	r3
   827d4:	bd08      	pop	{r3, pc}
   827d6:	bf00      	nop

000827d8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   827d8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   827da:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   827de:	f2c4 000e 	movt	r0, #16398	; 0x400e
   827e2:	f04f 010c 	mov.w	r1, #12
   827e6:	f242 637d 	movw	r3, #9853	; 0x267d
   827ea:	f2c0 0308 	movt	r3, #8
   827ee:	4798      	blx	r3
   827f0:	bd08      	pop	{r3, pc}
   827f2:	bf00      	nop

000827f4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   827f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   827f6:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   827fa:	f2c4 000e 	movt	r0, #16398	; 0x400e
   827fe:	f04f 010d 	mov.w	r1, #13
   82802:	f242 637d 	movw	r3, #9853	; 0x267d
   82806:	f2c0 0308 	movt	r3, #8
   8280a:	4798      	blx	r3
   8280c:	bd08      	pop	{r3, pc}
   8280e:	bf00      	nop

00082810 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82810:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   82812:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   82816:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8281a:	f04f 010e 	mov.w	r1, #14
   8281e:	f242 637d 	movw	r3, #9853	; 0x267d
   82822:	f2c0 0308 	movt	r3, #8
   82826:	4798      	blx	r3
   82828:	bd08      	pop	{r3, pc}
   8282a:	bf00      	nop

0008282c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8282c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   82830:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82836:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   8283a:	4308      	orrs	r0, r1
   8283c:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8283e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   82840:	f010 0f08 	tst.w	r0, #8
   82844:	d007      	beq.n	82856 <pmc_switch_mck_to_pllack+0x2a>
   82846:	e010      	b.n	8286a <pmc_switch_mck_to_pllack+0x3e>
   82848:	f100 33ff 	add.w	r3, r0, #4294967295
   8284c:	6e90      	ldr	r0, [r2, #104]	; 0x68
   8284e:	f010 0f08 	tst.w	r0, #8
   82852:	d038      	beq.n	828c6 <pmc_switch_mck_to_pllack+0x9a>
   82854:	e009      	b.n	8286a <pmc_switch_mck_to_pllack+0x3e>
   82856:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8285a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8285e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   82862:	6e91      	ldr	r1, [r2, #104]	; 0x68
   82864:	f011 0f08 	tst.w	r1, #8
   82868:	d0ee      	beq.n	82848 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8286a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   8286e:	f2c4 010e 	movt	r1, #16398	; 0x400e
   82872:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   82874:	f022 0303 	bic.w	r3, r2, #3
   82878:	f043 0002 	orr.w	r0, r3, #2
   8287c:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8287e:	6e89      	ldr	r1, [r1, #104]	; 0x68
   82880:	f011 0f08 	tst.w	r1, #8
   82884:	d009      	beq.n	8289a <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   82886:	f04f 0000 	mov.w	r0, #0
   8288a:	4770      	bx	lr
   8288c:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82890:	6e91      	ldr	r1, [r2, #104]	; 0x68
   82892:	f011 0f08 	tst.w	r1, #8
   82896:	d013      	beq.n	828c0 <pmc_switch_mck_to_pllack+0x94>
   82898:	e009      	b.n	828ae <pmc_switch_mck_to_pllack+0x82>
   8289a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8289e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   828a2:	f2c4 020e 	movt	r2, #16398	; 0x400e
   828a6:	6e90      	ldr	r0, [r2, #104]	; 0x68
   828a8:	f010 0f08 	tst.w	r0, #8
   828ac:	d0ee      	beq.n	8288c <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   828ae:	f04f 0000 	mov.w	r0, #0
   828b2:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   828b4:	f04f 0001 	mov.w	r0, #1
   828b8:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   828ba:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   828be:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   828c0:	3b01      	subs	r3, #1
   828c2:	d1f0      	bne.n	828a6 <pmc_switch_mck_to_pllack+0x7a>
   828c4:	e7f9      	b.n	828ba <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   828c6:	1e58      	subs	r0, r3, #1
   828c8:	d1cb      	bne.n	82862 <pmc_switch_mck_to_pllack+0x36>
   828ca:	e7f3      	b.n	828b4 <pmc_switch_mck_to_pllack+0x88>

000828cc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   828cc:	b188      	cbz	r0, 828f2 <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   828ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   828d2:	f2c4 010e 	movt	r1, #16398	; 0x400e
   828d6:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   828d8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   828dc:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   828e0:	4002      	ands	r2, r0
   828e2:	f04f 0302 	mov.w	r3, #2
   828e6:	f2c0 1337 	movt	r3, #311	; 0x137
   828ea:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   828ee:	6208      	str	r0, [r1, #32]
   828f0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   828f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   828f6:	f2c4 030e 	movt	r3, #16398	; 0x400e
   828fa:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   828fc:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   82900:	f020 0203 	bic.w	r2, r0, #3
   82904:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   82908:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8290c:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82910:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82914:	6218      	str	r0, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82916:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8291a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8291e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82920:	f013 0f01 	tst.w	r3, #1
   82924:	d0fb      	beq.n	8291e <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82926:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   8292a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8292e:	6a08      	ldr	r0, [r1, #32]
   82930:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   82934:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   82938:	620b      	str	r3, [r1, #32]
   8293a:	4770      	bx	lr

0008293c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8293c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   82940:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82944:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82946:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8294a:	4770      	bx	lr

0008294c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8294c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   82950:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82954:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82958:	629a      	str	r2, [r3, #40]	; 0x28
   8295a:	4770      	bx	lr

0008295c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8295c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   82960:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82964:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82966:	f000 0002 	and.w	r0, r0, #2
   8296a:	4770      	bx	lr

0008296c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   8296c:	282c      	cmp	r0, #44	; 0x2c
   8296e:	d835      	bhi.n	829dc <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   82970:	281f      	cmp	r0, #31
   82972:	d817      	bhi.n	829a4 <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82974:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   82978:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8297c:	698a      	ldr	r2, [r1, #24]
   8297e:	f04f 0301 	mov.w	r3, #1
   82982:	fa03 f300 	lsl.w	r3, r3, r0
   82986:	401a      	ands	r2, r3
   82988:	4293      	cmp	r3, r2
   8298a:	d02a      	beq.n	829e2 <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   8298c:	f04f 0101 	mov.w	r1, #1
   82990:	fa01 f000 	lsl.w	r0, r1, r0
   82994:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   82998:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8299c:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8299e:	f04f 0000 	mov.w	r0, #0
   829a2:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   829a4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   829a8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   829ac:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
   829b0:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   829b4:	f04f 0101 	mov.w	r1, #1
   829b8:	fa01 f100 	lsl.w	r1, r1, r0
   829bc:	400a      	ands	r2, r1
   829be:	4291      	cmp	r1, r2
   829c0:	d012      	beq.n	829e8 <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   829c2:	f04f 0301 	mov.w	r3, #1
   829c6:	fa03 f000 	lsl.w	r0, r3, r0
   829ca:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   829ce:	f2c4 020e 	movt	r2, #16398	; 0x400e
   829d2:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   829d6:	f04f 0000 	mov.w	r0, #0
   829da:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   829dc:	f04f 0001 	mov.w	r0, #1
   829e0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   829e2:	f04f 0000 	mov.w	r0, #0
   829e6:	4770      	bx	lr
   829e8:	f04f 0000 	mov.w	r0, #0
}
   829ec:	4770      	bx	lr
   829ee:	bf00      	nop

000829f0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   829f0:	e7fe      	b.n	829f0 <Dummy_Handler>
   829f2:	bf00      	nop

000829f4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   829f4:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   829f6:	f240 0300 	movw	r3, #0
   829fa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   829fe:	f245 62c8 	movw	r2, #22216	; 0x56c8
   82a02:	f2c0 0208 	movt	r2, #8
   82a06:	429a      	cmp	r2, r3
   82a08:	d003      	beq.n	82a12 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   82a0a:	4840      	ldr	r0, [pc, #256]	; (82b0c <Reset_Handler+0x118>)
   82a0c:	4940      	ldr	r1, [pc, #256]	; (82b10 <Reset_Handler+0x11c>)
   82a0e:	4281      	cmp	r1, r0
   82a10:	d304      	bcc.n	82a1c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82a12:	4b40      	ldr	r3, [pc, #256]	; (82b14 <Reset_Handler+0x120>)
   82a14:	4a40      	ldr	r2, [pc, #256]	; (82b18 <Reset_Handler+0x124>)
   82a16:	429a      	cmp	r2, r3
   82a18:	d325      	bcc.n	82a66 <Reset_Handler+0x72>
   82a1a:	e042      	b.n	82aa2 <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   82a1c:	4d3f      	ldr	r5, [pc, #252]	; (82b1c <Reset_Handler+0x128>)
   82a1e:	4c40      	ldr	r4, [pc, #256]	; (82b20 <Reset_Handler+0x12c>)
   82a20:	1b63      	subs	r3, r4, r5
   82a22:	f023 0503 	bic.w	r5, r3, #3
   82a26:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   82a2a:	f240 0200 	movw	r2, #0
   82a2e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82a32:	f245 61c8 	movw	r1, #22216	; 0x56c8
   82a36:	f2c0 0108 	movt	r1, #8
   82a3a:	f105 0004 	add.w	r0, r5, #4
   82a3e:	f3c5 0480 	ubfx	r4, r5, #2, #1
   82a42:	585d      	ldr	r5, [r3, r1]
   82a44:	509d      	str	r5, [r3, r2]
   82a46:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82a4a:	4283      	cmp	r3, r0
   82a4c:	d155      	bne.n	82afa <Reset_Handler+0x106>
   82a4e:	e7e0      	b.n	82a12 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   82a50:	585d      	ldr	r5, [r3, r1]
   82a52:	509d      	str	r5, [r3, r2]
   82a54:	f103 0304 	add.w	r3, r3, #4
   82a58:	585c      	ldr	r4, [r3, r1]
   82a5a:	509c      	str	r4, [r3, r2]
   82a5c:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82a60:	4283      	cmp	r3, r0
   82a62:	d1f5      	bne.n	82a50 <Reset_Handler+0x5c>
   82a64:	e7d5      	b.n	82a12 <Reset_Handler+0x1e>
   82a66:	4d2f      	ldr	r5, [pc, #188]	; (82b24 <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   82a68:	492f      	ldr	r1, [pc, #188]	; (82b28 <Reset_Handler+0x134>)
   82a6a:	1b48      	subs	r0, r1, r5
   82a6c:	f020 0403 	bic.w	r4, r0, #3
   82a70:	f640 03d0 	movw	r3, #2256	; 0x8d0
   82a74:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82a78:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   82a7a:	f04f 0100 	mov.w	r1, #0
   82a7e:	1b50      	subs	r0, r2, r5
   82a80:	f1a0 0004 	sub.w	r0, r0, #4
   82a84:	f3c0 0480 	ubfx	r4, r0, #2, #1
   82a88:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82a8c:	4295      	cmp	r5, r2
   82a8e:	d12d      	bne.n	82aec <Reset_Handler+0xf8>
   82a90:	e007      	b.n	82aa2 <Reset_Handler+0xae>
   82a92:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   82a96:	6069      	str	r1, [r5, #4]
   82a98:	f105 0508 	add.w	r5, r5, #8
   82a9c:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82a9e:	4295      	cmp	r5, r2
   82aa0:	d1f7      	bne.n	82a92 <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82aa2:	f240 0500 	movw	r5, #0
   82aa6:	f2c0 0508 	movt	r5, #8
   82aaa:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   82aae:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   82ab2:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   82ab6:	f2ce 0000 	movt	r0, #57344	; 0xe000
   82aba:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82abc:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   82ac0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   82ac4:	d207      	bcs.n	82ad6 <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82ac6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   82aca:	f2ce 0300 	movt	r3, #57344	; 0xe000
   82ace:	689d      	ldr	r5, [r3, #8]
   82ad0:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   82ad4:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82ad6:	f642 61f1 	movw	r1, #12017	; 0x2ef1
   82ada:	f2c0 0108 	movt	r1, #8
   82ade:	4788      	blx	r1

	/* Branch to main function */
	main();
   82ae0:	f240 50a5 	movw	r0, #1445	; 0x5a5
   82ae4:	f2c0 0008 	movt	r0, #8
   82ae8:	4780      	blx	r0
   82aea:	e7fe      	b.n	82aea <Reset_Handler+0xf6>
   82aec:	2c00      	cmp	r4, #0
   82aee:	d0d0      	beq.n	82a92 <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   82af0:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82af4:	4295      	cmp	r5, r2
   82af6:	d1cc      	bne.n	82a92 <Reset_Handler+0x9e>
   82af8:	e7d3      	b.n	82aa2 <Reset_Handler+0xae>
   82afa:	2c00      	cmp	r4, #0
   82afc:	d0a8      	beq.n	82a50 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   82afe:	585c      	ldr	r4, [r3, r1]
   82b00:	509c      	str	r4, [r3, r2]
   82b02:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82b06:	4283      	cmp	r3, r0
   82b08:	d1a2      	bne.n	82a50 <Reset_Handler+0x5c>
   82b0a:	e782      	b.n	82a12 <Reset_Handler+0x1e>
   82b0c:	200708d0 	.word	0x200708d0
   82b10:	20070000 	.word	0x20070000
   82b14:	20078b50 	.word	0x20078b50
   82b18:	200708d0 	.word	0x200708d0
   82b1c:	20070004 	.word	0x20070004
   82b20:	200708d3 	.word	0x200708d3
   82b24:	200708cc 	.word	0x200708cc
   82b28:	20078b4b 	.word	0x20078b4b

00082b2c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82b2c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   82b30:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82b34:	6b18      	ldr	r0, [r3, #48]	; 0x30
   82b36:	f000 0103 	and.w	r1, r0, #3
   82b3a:	2903      	cmp	r1, #3
   82b3c:	f200 80b1 	bhi.w	82ca2 <SystemCoreClockUpdate+0x176>
   82b40:	e8df f001 	tbb	[pc, r1]
   82b44:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82b48:	f641 2010 	movw	r0, #6672	; 0x1a10
   82b4c:	f2c4 000e 	movt	r0, #16398	; 0x400e
   82b50:	6941      	ldr	r1, [r0, #20]
   82b52:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82b56:	f240 030c 	movw	r3, #12
   82b5a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82b5e:	bf14      	ite	ne
   82b60:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82b64:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   82b68:	601a      	str	r2, [r3, #0]
   82b6a:	e09a      	b.n	82ca2 <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82b6c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   82b70:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82b74:	6a18      	ldr	r0, [r3, #32]
   82b76:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   82b7a:	d009      	beq.n	82b90 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82b7c:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   82b80:	f2c0 03b7 	movt	r3, #183	; 0xb7
   82b84:	f240 020c 	movw	r2, #12
   82b88:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82b8c:	6013      	str	r3, [r2, #0]
   82b8e:	e088      	b.n	82ca2 <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82b90:	f44f 6110 	mov.w	r1, #2304	; 0x900
   82b94:	f2c0 013d 	movt	r1, #61	; 0x3d
   82b98:	f240 020c 	movw	r2, #12
   82b9c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82ba0:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82ba2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   82ba6:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82baa:	6a18      	ldr	r0, [r3, #32]
   82bac:	f000 0170 	and.w	r1, r0, #112	; 0x70
   82bb0:	2910      	cmp	r1, #16
   82bb2:	d002      	beq.n	82bba <SystemCoreClockUpdate+0x8e>
   82bb4:	2920      	cmp	r1, #32
   82bb6:	d174      	bne.n	82ca2 <SystemCoreClockUpdate+0x176>
   82bb8:	e009      	b.n	82bce <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82bba:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   82bbe:	f2c0 007a 	movt	r0, #122	; 0x7a
   82bc2:	f240 010c 	movw	r1, #12
   82bc6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82bca:	6008      	str	r0, [r1, #0]
				break;
   82bcc:	e069      	b.n	82ca2 <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82bce:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   82bd2:	f2c0 03b7 	movt	r3, #183	; 0xb7
   82bd6:	f240 020c 	movw	r2, #12
   82bda:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82bde:	6013      	str	r3, [r2, #0]
				break;
   82be0:	e05f      	b.n	82ca2 <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82be2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   82be6:	f2c4 020e 	movt	r2, #16398	; 0x400e
   82bea:	6a13      	ldr	r3, [r2, #32]
   82bec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82bf0:	d009      	beq.n	82c06 <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82bf2:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   82bf6:	f2c0 01b7 	movt	r1, #183	; 0xb7
   82bfa:	f240 020c 	movw	r2, #12
   82bfe:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82c02:	6011      	str	r1, [r2, #0]
   82c04:	e027      	b.n	82c56 <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82c06:	f44f 6010 	mov.w	r0, #2304	; 0x900
   82c0a:	f2c0 003d 	movt	r0, #61	; 0x3d
   82c0e:	f240 010c 	movw	r1, #12
   82c12:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82c16:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82c18:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   82c1c:	f2c4 020e 	movt	r2, #16398	; 0x400e
   82c20:	6a13      	ldr	r3, [r2, #32]
   82c22:	f003 0070 	and.w	r0, r3, #112	; 0x70
   82c26:	2810      	cmp	r0, #16
   82c28:	d002      	beq.n	82c30 <SystemCoreClockUpdate+0x104>
   82c2a:	2820      	cmp	r0, #32
   82c2c:	d113      	bne.n	82c56 <SystemCoreClockUpdate+0x12a>
   82c2e:	e009      	b.n	82c44 <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82c30:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   82c34:	f2c0 037a 	movt	r3, #122	; 0x7a
   82c38:	f240 000c 	movw	r0, #12
   82c3c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82c40:	6003      	str	r3, [r0, #0]
				break;
   82c42:	e008      	b.n	82c56 <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82c44:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   82c48:	f2c0 01b7 	movt	r1, #183	; 0xb7
   82c4c:	f240 020c 	movw	r2, #12
   82c50:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82c54:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82c56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   82c5a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82c5e:	6b18      	ldr	r0, [r3, #48]	; 0x30
   82c60:	f000 0103 	and.w	r1, r0, #3
   82c64:	2902      	cmp	r1, #2
   82c66:	d113      	bne.n	82c90 <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82c68:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   82c6c:	f2c4 010e 	movt	r1, #16398	; 0x400e
   82c70:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82c72:	6a89      	ldr	r1, [r1, #40]	; 0x28
   82c74:	f240 030c 	movw	r3, #12
   82c78:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82c7c:	f3c0 400a 	ubfx	r0, r0, #16, #11
   82c80:	681a      	ldr	r2, [r3, #0]
   82c82:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82c86:	b2c9      	uxtb	r1, r1
   82c88:	fbb0 f2f1 	udiv	r2, r0, r1
   82c8c:	601a      	str	r2, [r3, #0]
   82c8e:	e008      	b.n	82ca2 <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82c90:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   82c94:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   82c98:	f240 020c 	movw	r2, #12
   82c9c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82ca0:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82ca2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   82ca6:	f2c4 020e 	movt	r2, #16398	; 0x400e
   82caa:	6b10      	ldr	r0, [r2, #48]	; 0x30
   82cac:	f000 0170 	and.w	r1, r0, #112	; 0x70
   82cb0:	2970      	cmp	r1, #112	; 0x70
   82cb2:	d10e      	bne.n	82cd2 <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   82cb4:	f240 030c 	movw	r3, #12
   82cb8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82cbc:	6818      	ldr	r0, [r3, #0]
   82cbe:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   82cc2:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   82cc6:	fba2 0100 	umull	r0, r1, r2, r0
   82cca:	ea4f 0051 	mov.w	r0, r1, lsr #1
   82cce:	6018      	str	r0, [r3, #0]
   82cd0:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82cd2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   82cd6:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82cda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82cdc:	f240 000c 	movw	r0, #12
   82ce0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82ce4:	f3c2 1102 	ubfx	r1, r2, #4, #3
   82ce8:	6803      	ldr	r3, [r0, #0]
   82cea:	fa23 f301 	lsr.w	r3, r3, r1
   82cee:	6003      	str	r3, [r0, #0]
   82cf0:	4770      	bx	lr
   82cf2:	bf00      	nop

00082cf4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   82cf4:	f64e 23bf 	movw	r3, #60095	; 0xeabf
   82cf8:	f2c0 1321 	movt	r3, #289	; 0x121
   82cfc:	4298      	cmp	r0, r3
   82cfe:	d80c      	bhi.n	82d1a <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   82d00:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   82d04:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82d08:	f04f 0000 	mov.w	r0, #0
   82d0c:	6018      	str	r0, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   82d0e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   82d12:	f2c4 010e 	movt	r1, #16398	; 0x400e
   82d16:	6008      	str	r0, [r1, #0]
   82d18:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   82d1a:	f24f 017f 	movw	r1, #61567	; 0xf07f
   82d1e:	f2c0 21fa 	movt	r1, #762	; 0x2fa
   82d22:	4288      	cmp	r0, r1
   82d24:	d80c      	bhi.n	82d40 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   82d26:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   82d2a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   82d2e:	f44f 7180 	mov.w	r1, #256	; 0x100
   82d32:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   82d34:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   82d38:	f2c4 020e 	movt	r2, #16398	; 0x400e
   82d3c:	6011      	str	r1, [r2, #0]
   82d3e:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   82d40:	f648 73ff 	movw	r3, #36863	; 0x8fff
   82d44:	f2c0 33d0 	movt	r3, #976	; 0x3d0
   82d48:	4298      	cmp	r0, r3
   82d4a:	d80c      	bhi.n	82d66 <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   82d4c:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   82d50:	f2c4 010e 	movt	r1, #16398	; 0x400e
   82d54:	f44f 7200 	mov.w	r2, #512	; 0x200
   82d58:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   82d5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   82d5e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82d62:	601a      	str	r2, [r3, #0]
   82d64:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   82d66:	f24b 31ff 	movw	r1, #46079	; 0xb3ff
   82d6a:	f2c0 41c4 	movt	r1, #1220	; 0x4c4
   82d6e:	4288      	cmp	r0, r1
   82d70:	d80c      	bhi.n	82d8c <system_init_flash+0x98>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   82d72:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   82d76:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82d7a:	f44f 7240 	mov.w	r2, #768	; 0x300
   82d7e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   82d80:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   82d84:	f2c4 000e 	movt	r0, #16398	; 0x400e
   82d88:	6002      	str	r2, [r0, #0]
   82d8a:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   82d8c:	f644 237f 	movw	r3, #19071	; 0x4a7f
   82d90:	f2c0 535d 	movt	r3, #1373	; 0x55d
   82d94:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   82d96:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   82d9a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   82d9e:	bf94      	ite	ls
   82da0:	f44f 6280 	movls.w	r2, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   82da4:	f44f 62a0 	movhi.w	r2, #1280	; 0x500
   82da8:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   82daa:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   82dae:	f2c4 010e 	movt	r1, #16398	; 0x400e
   82db2:	600a      	str	r2, [r1, #0]
   82db4:	4770      	bx	lr
   82db6:	bf00      	nop

00082db8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82db8:	f648 3308 	movw	r3, #35592	; 0x8b08
   82dbc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82dc0:	6819      	ldr	r1, [r3, #0]
   82dc2:	b941      	cbnz	r1, 82dd6 <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
   82dc4:	f648 3308 	movw	r3, #35592	; 0x8b08
   82dc8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82dcc:	f64a 3250 	movw	r2, #43856	; 0xab50
   82dd0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82dd4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   82dd6:	f648 3108 	movw	r1, #35592	; 0x8b08
   82dda:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82dde:	680b      	ldr	r3, [r1, #0]

	if (((int)prev_heap + incr) > ramend) {
   82de0:	1818      	adds	r0, r3, r0
   82de2:	f647 72fc 	movw	r2, #32764	; 0x7ffc
   82de6:	f2c2 0208 	movt	r2, #8200	; 0x2008
   82dea:	4282      	cmp	r2, r0
   82dec:	db06      	blt.n	82dfc <_sbrk+0x44>
		return (caddr_t) -1;	
	}

	heap += incr;
   82dee:	4601      	mov	r1, r0
   82df0:	f648 3008 	movw	r0, #35592	; 0x8b08
   82df4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82df8:	6001      	str	r1, [r0, #0]

	return (caddr_t) prev_heap;
   82dfa:	e001      	b.n	82e00 <_sbrk+0x48>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   82dfc:	f04f 33ff 	mov.w	r3, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   82e00:	4618      	mov	r0, r3
   82e02:	4770      	bx	lr

00082e04 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82e04:	f04f 30ff 	mov.w	r0, #4294967295
   82e08:	4770      	bx	lr
   82e0a:	bf00      	nop

00082e0c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82e0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82e10:	604b      	str	r3, [r1, #4]

	return 0;
}
   82e12:	f04f 0000 	mov.w	r0, #0
   82e16:	4770      	bx	lr

00082e18 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82e18:	f04f 0001 	mov.w	r0, #1
   82e1c:	4770      	bx	lr
   82e1e:	bf00      	nop

00082e20 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82e20:	f04f 0000 	mov.w	r0, #0
   82e24:	4770      	bx	lr
   82e26:	bf00      	nop

00082e28 <__register_exitproc>:
   82e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82e2c:	4698      	mov	r8, r3
   82e2e:	4b23      	ldr	r3, [pc, #140]	; (82ebc <__register_exitproc+0x94>)
   82e30:	4606      	mov	r6, r0
   82e32:	681c      	ldr	r4, [r3, #0]
   82e34:	460f      	mov	r7, r1
   82e36:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   82e3a:	4691      	mov	r9, r2
   82e3c:	b918      	cbnz	r0, 82e46 <__register_exitproc+0x1e>
   82e3e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   82e42:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   82e46:	6841      	ldr	r1, [r0, #4]
   82e48:	291f      	cmp	r1, #31
   82e4a:	dd16      	ble.n	82e7a <__register_exitproc+0x52>
   82e4c:	481c      	ldr	r0, [pc, #112]	; (82ec0 <__register_exitproc+0x98>)
   82e4e:	b918      	cbnz	r0, 82e58 <__register_exitproc+0x30>
   82e50:	f04f 30ff 	mov.w	r0, #4294967295
   82e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82e58:	f44f 70c8 	mov.w	r0, #400	; 0x190
   82e5c:	f001 fbc0 	bl	845e0 <malloc>
   82e60:	2800      	cmp	r0, #0
   82e62:	d0f5      	beq.n	82e50 <__register_exitproc+0x28>
   82e64:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   82e68:	2500      	movs	r5, #0
   82e6a:	6045      	str	r5, [r0, #4]
   82e6c:	6002      	str	r2, [r0, #0]
   82e6e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   82e72:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   82e76:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   82e7a:	b1b6      	cbz	r6, 82eaa <__register_exitproc+0x82>
   82e7c:	6844      	ldr	r4, [r0, #4]
   82e7e:	2201      	movs	r2, #1
   82e80:	fa02 f204 	lsl.w	r2, r2, r4
   82e84:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   82e88:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   82e8c:	4311      	orrs	r1, r2
   82e8e:	2e02      	cmp	r6, #2
   82e90:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   82e94:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   82e98:	461c      	mov	r4, r3
   82e9a:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   82e9e:	d104      	bne.n	82eaa <__register_exitproc+0x82>
   82ea0:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   82ea4:	431a      	orrs	r2, r3
   82ea6:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   82eaa:	6841      	ldr	r1, [r0, #4]
   82eac:	1c8b      	adds	r3, r1, #2
   82eae:	1c4a      	adds	r2, r1, #1
   82eb0:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   82eb4:	6042      	str	r2, [r0, #4]
   82eb6:	2000      	movs	r0, #0
   82eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82ebc:	0008564c 	.word	0x0008564c
   82ec0:	000845e1 	.word	0x000845e1

00082ec4 <__libc_fini_array>:
   82ec4:	b570      	push	{r4, r5, r6, lr}
   82ec6:	4b08      	ldr	r3, [pc, #32]	; (82ee8 <__libc_fini_array+0x24>)
   82ec8:	4c08      	ldr	r4, [pc, #32]	; (82eec <__libc_fini_array+0x28>)
   82eca:	2500      	movs	r5, #0
   82ecc:	1ae0      	subs	r0, r4, r3
   82ece:	1084      	asrs	r4, r0, #2
   82ed0:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   82ed4:	3d04      	subs	r5, #4
   82ed6:	b11c      	cbz	r4, 82ee0 <__libc_fini_array+0x1c>
   82ed8:	5972      	ldr	r2, [r6, r5]
   82eda:	4790      	blx	r2
   82edc:	3c01      	subs	r4, #1
   82ede:	e7f9      	b.n	82ed4 <__libc_fini_array+0x10>
   82ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   82ee4:	f002 bbe4 	b.w	856b0 <_fini>
   82ee8:	000856bc 	.word	0x000856bc
   82eec:	000856c0 	.word	0x000856c0

00082ef0 <__libc_init_array>:
   82ef0:	b538      	push	{r3, r4, r5, lr}
   82ef2:	4d0e      	ldr	r5, [pc, #56]	; (82f2c <__libc_init_array+0x3c>)
   82ef4:	4b0e      	ldr	r3, [pc, #56]	; (82f30 <__libc_init_array+0x40>)
   82ef6:	2400      	movs	r4, #0
   82ef8:	1ae8      	subs	r0, r5, r3
   82efa:	1085      	asrs	r5, r0, #2
   82efc:	42ac      	cmp	r4, r5
   82efe:	d005      	beq.n	82f0c <__libc_init_array+0x1c>
   82f00:	490b      	ldr	r1, [pc, #44]	; (82f30 <__libc_init_array+0x40>)
   82f02:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   82f06:	4790      	blx	r2
   82f08:	3401      	adds	r4, #1
   82f0a:	e7f7      	b.n	82efc <__libc_init_array+0xc>
   82f0c:	f002 fbc6 	bl	8569c <_init>
   82f10:	4908      	ldr	r1, [pc, #32]	; (82f34 <__libc_init_array+0x44>)
   82f12:	4a09      	ldr	r2, [pc, #36]	; (82f38 <__libc_init_array+0x48>)
   82f14:	1a54      	subs	r4, r2, r1
   82f16:	10a5      	asrs	r5, r4, #2
   82f18:	2400      	movs	r4, #0
   82f1a:	42ac      	cmp	r4, r5
   82f1c:	d005      	beq.n	82f2a <__libc_init_array+0x3a>
   82f1e:	4b05      	ldr	r3, [pc, #20]	; (82f34 <__libc_init_array+0x44>)
   82f20:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   82f24:	4780      	blx	r0
   82f26:	3401      	adds	r4, #1
   82f28:	e7f7      	b.n	82f1a <__libc_init_array+0x2a>
   82f2a:	bd38      	pop	{r3, r4, r5, pc}
   82f2c:	000856a8 	.word	0x000856a8
   82f30:	000856a8 	.word	0x000856a8
   82f34:	000856a8 	.word	0x000856a8
   82f38:	000856b0 	.word	0x000856b0

00082f3c <iprintf>:
   82f3c:	b40f      	push	{r0, r1, r2, r3}
   82f3e:	b507      	push	{r0, r1, r2, lr}
   82f40:	4906      	ldr	r1, [pc, #24]	; (82f5c <iprintf+0x20>)
   82f42:	ab04      	add	r3, sp, #16
   82f44:	6808      	ldr	r0, [r1, #0]
   82f46:	f853 2b04 	ldr.w	r2, [r3], #4
   82f4a:	6881      	ldr	r1, [r0, #8]
   82f4c:	9301      	str	r3, [sp, #4]
   82f4e:	f000 f8f7 	bl	83140 <_vfiprintf_r>
   82f52:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
   82f56:	b004      	add	sp, #16
   82f58:	4770      	bx	lr
   82f5a:	bf00      	nop
   82f5c:	20070010 	.word	0x20070010

00082f60 <_iprintf_r>:
   82f60:	b40e      	push	{r1, r2, r3}
   82f62:	b503      	push	{r0, r1, lr}
   82f64:	ab03      	add	r3, sp, #12
   82f66:	f853 2b04 	ldr.w	r2, [r3], #4
   82f6a:	6881      	ldr	r1, [r0, #8]
   82f6c:	9301      	str	r3, [sp, #4]
   82f6e:	f000 f8e7 	bl	83140 <_vfiprintf_r>
   82f72:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
   82f76:	b003      	add	sp, #12
   82f78:	4770      	bx	lr
   82f7a:	bf00      	nop

00082f7c <memcpy>:
   82f7c:	b510      	push	{r4, lr}
   82f7e:	2300      	movs	r3, #0
   82f80:	4293      	cmp	r3, r2
   82f82:	d003      	beq.n	82f8c <memcpy+0x10>
   82f84:	5ccc      	ldrb	r4, [r1, r3]
   82f86:	54c4      	strb	r4, [r0, r3]
   82f88:	3301      	adds	r3, #1
   82f8a:	e7f9      	b.n	82f80 <memcpy+0x4>
   82f8c:	bd10      	pop	{r4, pc}

00082f8e <memset>:
   82f8e:	1882      	adds	r2, r0, r2
   82f90:	4603      	mov	r3, r0
   82f92:	4293      	cmp	r3, r2
   82f94:	d002      	beq.n	82f9c <memset+0xe>
   82f96:	f803 1b01 	strb.w	r1, [r3], #1
   82f9a:	e7fa      	b.n	82f92 <memset+0x4>
   82f9c:	4770      	bx	lr

00082f9e <setbuf>:
   82f9e:	2900      	cmp	r1, #0
   82fa0:	bf0c      	ite	eq
   82fa2:	2202      	moveq	r2, #2
   82fa4:	2200      	movne	r2, #0
   82fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82faa:	f000 b801 	b.w	82fb0 <setvbuf>
	...

00082fb0 <setvbuf>:
   82fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82fb4:	461d      	mov	r5, r3
   82fb6:	4b37      	ldr	r3, [pc, #220]	; (83094 <setvbuf+0xe4>)
   82fb8:	4604      	mov	r4, r0
   82fba:	6818      	ldr	r0, [r3, #0]
   82fbc:	460e      	mov	r6, r1
   82fbe:	4617      	mov	r7, r2
   82fc0:	4698      	mov	r8, r3
   82fc2:	b118      	cbz	r0, 82fcc <setvbuf+0x1c>
   82fc4:	6b82      	ldr	r2, [r0, #56]	; 0x38
   82fc6:	b90a      	cbnz	r2, 82fcc <setvbuf+0x1c>
   82fc8:	f000 fec8 	bl	83d5c <__sinit>
   82fcc:	2f02      	cmp	r7, #2
   82fce:	d85d      	bhi.n	8308c <setvbuf+0xdc>
   82fd0:	2d00      	cmp	r5, #0
   82fd2:	db5b      	blt.n	8308c <setvbuf+0xdc>
   82fd4:	4621      	mov	r1, r4
   82fd6:	f8d8 0000 	ldr.w	r0, [r8]
   82fda:	f000 fdcd 	bl	83b78 <_fflush_r>
   82fde:	89a1      	ldrh	r1, [r4, #12]
   82fe0:	2000      	movs	r0, #0
   82fe2:	f001 0380 	and.w	r3, r1, #128	; 0x80
   82fe6:	b21a      	sxth	r2, r3
   82fe8:	6060      	str	r0, [r4, #4]
   82fea:	61a0      	str	r0, [r4, #24]
   82fec:	b122      	cbz	r2, 82ff8 <setvbuf+0x48>
   82fee:	4829      	ldr	r0, [pc, #164]	; (83094 <setvbuf+0xe4>)
   82ff0:	6921      	ldr	r1, [r4, #16]
   82ff2:	6800      	ldr	r0, [r0, #0]
   82ff4:	f000 fff0 	bl	83fd8 <_free_r>
   82ff8:	89a1      	ldrh	r1, [r4, #12]
   82ffa:	2f02      	cmp	r7, #2
   82ffc:	f021 0383 	bic.w	r3, r1, #131	; 0x83
   83000:	81a3      	strh	r3, [r4, #12]
   83002:	d012      	beq.n	8302a <setvbuf+0x7a>
   83004:	bb36      	cbnz	r6, 83054 <setvbuf+0xa4>
   83006:	2d00      	cmp	r5, #0
   83008:	bf08      	it	eq
   8300a:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   8300e:	4628      	mov	r0, r5
   83010:	f001 fae6 	bl	845e0 <malloc>
   83014:	4606      	mov	r6, r0
   83016:	b9c8      	cbnz	r0, 8304c <setvbuf+0x9c>
   83018:	f44f 6080 	mov.w	r0, #1024	; 0x400
   8301c:	f001 fae0 	bl	845e0 <malloc>
   83020:	4606      	mov	r6, r0
   83022:	b988      	cbnz	r0, 83048 <setvbuf+0x98>
   83024:	f04f 30ff 	mov.w	r0, #4294967295
   83028:	e000      	b.n	8302c <setvbuf+0x7c>
   8302a:	2000      	movs	r0, #0
   8302c:	89a1      	ldrh	r1, [r4, #12]
   8302e:	2200      	movs	r2, #0
   83030:	f041 0302 	orr.w	r3, r1, #2
   83034:	81a3      	strh	r3, [r4, #12]
   83036:	f104 0143 	add.w	r1, r4, #67	; 0x43
   8303a:	2301      	movs	r3, #1
   8303c:	60a2      	str	r2, [r4, #8]
   8303e:	6021      	str	r1, [r4, #0]
   83040:	6121      	str	r1, [r4, #16]
   83042:	6163      	str	r3, [r4, #20]
   83044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83048:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8304c:	89a2      	ldrh	r2, [r4, #12]
   8304e:	f042 0080 	orr.w	r0, r2, #128	; 0x80
   83052:	81a0      	strh	r0, [r4, #12]
   83054:	2f01      	cmp	r7, #1
   83056:	d105      	bne.n	83064 <setvbuf+0xb4>
   83058:	89a1      	ldrh	r1, [r4, #12]
   8305a:	426a      	negs	r2, r5
   8305c:	f041 0301 	orr.w	r3, r1, #1
   83060:	81a3      	strh	r3, [r4, #12]
   83062:	61a2      	str	r2, [r4, #24]
   83064:	480b      	ldr	r0, [pc, #44]	; (83094 <setvbuf+0xe4>)
   83066:	89a2      	ldrh	r2, [r4, #12]
   83068:	6801      	ldr	r1, [r0, #0]
   8306a:	4b0b      	ldr	r3, [pc, #44]	; (83098 <setvbuf+0xe8>)
   8306c:	f002 0008 	and.w	r0, r2, #8
   83070:	b200      	sxth	r0, r0
   83072:	63cb      	str	r3, [r1, #60]	; 0x3c
   83074:	6026      	str	r6, [r4, #0]
   83076:	6126      	str	r6, [r4, #16]
   83078:	6165      	str	r5, [r4, #20]
   8307a:	b148      	cbz	r0, 83090 <setvbuf+0xe0>
   8307c:	f012 0f03 	tst.w	r2, #3
   83080:	bf18      	it	ne
   83082:	2500      	movne	r5, #0
   83084:	60a5      	str	r5, [r4, #8]
   83086:	2000      	movs	r0, #0
   83088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8308c:	f04f 30ff 	mov.w	r0, #4294967295
   83090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83094:	20070010 	.word	0x20070010
   83098:	00083cd1 	.word	0x00083cd1

0008309c <strlen>:
   8309c:	4603      	mov	r3, r0
   8309e:	f813 2b01 	ldrb.w	r2, [r3], #1
   830a2:	2a00      	cmp	r2, #0
   830a4:	d1fb      	bne.n	8309e <strlen+0x2>
   830a6:	1a18      	subs	r0, r3, r0
   830a8:	3801      	subs	r0, #1
   830aa:	4770      	bx	lr

000830ac <strncpy>:
   830ac:	b530      	push	{r4, r5, lr}
   830ae:	3901      	subs	r1, #1
   830b0:	4603      	mov	r3, r0
   830b2:	461c      	mov	r4, r3
   830b4:	b13a      	cbz	r2, 830c6 <strncpy+0x1a>
   830b6:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   830ba:	3a01      	subs	r2, #1
   830bc:	f803 5b01 	strb.w	r5, [r3], #1
   830c0:	461c      	mov	r4, r3
   830c2:	2d00      	cmp	r5, #0
   830c4:	d1f5      	bne.n	830b2 <strncpy+0x6>
   830c6:	1899      	adds	r1, r3, r2
   830c8:	428c      	cmp	r4, r1
   830ca:	d003      	beq.n	830d4 <strncpy+0x28>
   830cc:	2200      	movs	r2, #0
   830ce:	f804 2b01 	strb.w	r2, [r4], #1
   830d2:	e7f9      	b.n	830c8 <strncpy+0x1c>
   830d4:	bd30      	pop	{r4, r5, pc}
	...

000830d8 <__sprint_r>:
   830d8:	6893      	ldr	r3, [r2, #8]
   830da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   830de:	4681      	mov	r9, r0
   830e0:	460f      	mov	r7, r1
   830e2:	4614      	mov	r4, r2
   830e4:	b91b      	cbnz	r3, 830ee <__sprint_r+0x16>
   830e6:	6053      	str	r3, [r2, #4]
   830e8:	4618      	mov	r0, r3
   830ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   830ee:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   830f0:	049b      	lsls	r3, r3, #18
   830f2:	d51e      	bpl.n	83132 <__sprint_r+0x5a>
   830f4:	6815      	ldr	r5, [r2, #0]
   830f6:	68a0      	ldr	r0, [r4, #8]
   830f8:	3508      	adds	r5, #8
   830fa:	b1c8      	cbz	r0, 83130 <__sprint_r+0x58>
   830fc:	f855 1c04 	ldr.w	r1, [r5, #-4]
   83100:	f855 ac08 	ldr.w	sl, [r5, #-8]
   83104:	ea4f 0891 	mov.w	r8, r1, lsr #2
   83108:	2600      	movs	r6, #0
   8310a:	4546      	cmp	r6, r8
   8310c:	da09      	bge.n	83122 <__sprint_r+0x4a>
   8310e:	4648      	mov	r0, r9
   83110:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
   83114:	463a      	mov	r2, r7
   83116:	f000 fe9d 	bl	83e54 <_fputwc_r>
   8311a:	1c43      	adds	r3, r0, #1
   8311c:	d00b      	beq.n	83136 <__sprint_r+0x5e>
   8311e:	3601      	adds	r6, #1
   83120:	e7f3      	b.n	8310a <__sprint_r+0x32>
   83122:	68a2      	ldr	r2, [r4, #8]
   83124:	ea4f 0888 	mov.w	r8, r8, lsl #2
   83128:	ebc8 0302 	rsb	r3, r8, r2
   8312c:	60a3      	str	r3, [r4, #8]
   8312e:	e7e2      	b.n	830f6 <__sprint_r+0x1e>
   83130:	e001      	b.n	83136 <__sprint_r+0x5e>
   83132:	f001 f807 	bl	84144 <__sfvwrite_r>
   83136:	2100      	movs	r1, #0
   83138:	60a1      	str	r1, [r4, #8]
   8313a:	6061      	str	r1, [r4, #4]
   8313c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00083140 <_vfiprintf_r>:
   83140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83144:	4689      	mov	r9, r1
   83146:	b0a9      	sub	sp, #164	; 0xa4
   83148:	4614      	mov	r4, r2
   8314a:	461d      	mov	r5, r3
   8314c:	461e      	mov	r6, r3
   8314e:	4682      	mov	sl, r0
   83150:	b118      	cbz	r0, 8315a <_vfiprintf_r+0x1a>
   83152:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83154:	b90b      	cbnz	r3, 8315a <_vfiprintf_r+0x1a>
   83156:	f000 fe01 	bl	83d5c <__sinit>
   8315a:	f8b9 000c 	ldrh.w	r0, [r9, #12]
   8315e:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
   83162:	b211      	sxth	r1, r2
   83164:	b949      	cbnz	r1, 8317a <_vfiprintf_r+0x3a>
   83166:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
   8316a:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
   8316e:	f8a9 300c 	strh.w	r3, [r9, #12]
   83172:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   83176:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
   8317a:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   8317e:	f001 0308 	and.w	r3, r1, #8
   83182:	b218      	sxth	r0, r3
   83184:	b148      	cbz	r0, 8319a <_vfiprintf_r+0x5a>
   83186:	f8d9 2010 	ldr.w	r2, [r9, #16]
   8318a:	b132      	cbz	r2, 8319a <_vfiprintf_r+0x5a>
   8318c:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   83190:	f001 031a 	and.w	r3, r1, #26
   83194:	2b0a      	cmp	r3, #10
   83196:	d116      	bne.n	831c6 <_vfiprintf_r+0x86>
   83198:	e009      	b.n	831ae <_vfiprintf_r+0x6e>
   8319a:	4650      	mov	r0, sl
   8319c:	4649      	mov	r1, r9
   8319e:	f000 fc7f 	bl	83aa0 <__swsetup_r>
   831a2:	2800      	cmp	r0, #0
   831a4:	d0f2      	beq.n	8318c <_vfiprintf_r+0x4c>
   831a6:	f04f 32ff 	mov.w	r2, #4294967295
   831aa:	9203      	str	r2, [sp, #12]
   831ac:	e3d3      	b.n	83956 <_vfiprintf_r+0x816>
   831ae:	f9b9 000e 	ldrsh.w	r0, [r9, #14]
   831b2:	2800      	cmp	r0, #0
   831b4:	db07      	blt.n	831c6 <_vfiprintf_r+0x86>
   831b6:	4650      	mov	r0, sl
   831b8:	4649      	mov	r1, r9
   831ba:	4622      	mov	r2, r4
   831bc:	462b      	mov	r3, r5
   831be:	f000 fbce 	bl	8395e <__sbprintf>
   831c2:	9003      	str	r0, [sp, #12]
   831c4:	e3c7      	b.n	83956 <_vfiprintf_r+0x816>
   831c6:	2200      	movs	r2, #0
   831c8:	ad18      	add	r5, sp, #96	; 0x60
   831ca:	950b      	str	r5, [sp, #44]	; 0x2c
   831cc:	920d      	str	r2, [sp, #52]	; 0x34
   831ce:	920c      	str	r2, [sp, #48]	; 0x30
   831d0:	9401      	str	r4, [sp, #4]
   831d2:	9205      	str	r2, [sp, #20]
   831d4:	9203      	str	r2, [sp, #12]
   831d6:	46a8      	mov	r8, r5
   831d8:	9901      	ldr	r1, [sp, #4]
   831da:	460c      	mov	r4, r1
   831dc:	f811 3b01 	ldrb.w	r3, [r1], #1
   831e0:	b10b      	cbz	r3, 831e6 <_vfiprintf_r+0xa6>
   831e2:	2b25      	cmp	r3, #37	; 0x25
   831e4:	d1f9      	bne.n	831da <_vfiprintf_r+0x9a>
   831e6:	9a01      	ldr	r2, [sp, #4]
   831e8:	1aa5      	subs	r5, r4, r2
   831ea:	d019      	beq.n	83220 <_vfiprintf_r+0xe0>
   831ec:	990c      	ldr	r1, [sp, #48]	; 0x30
   831ee:	980d      	ldr	r0, [sp, #52]	; 0x34
   831f0:	1c4b      	adds	r3, r1, #1
   831f2:	e888 0024 	stmia.w	r8, {r2, r5}
   831f6:	2b07      	cmp	r3, #7
   831f8:	eb00 0205 	add.w	r2, r0, r5
   831fc:	920d      	str	r2, [sp, #52]	; 0x34
   831fe:	f108 0808 	add.w	r8, r8, #8
   83202:	930c      	str	r3, [sp, #48]	; 0x30
   83204:	dd09      	ble.n	8321a <_vfiprintf_r+0xda>
   83206:	4650      	mov	r0, sl
   83208:	4649      	mov	r1, r9
   8320a:	aa0b      	add	r2, sp, #44	; 0x2c
   8320c:	f7ff ff64 	bl	830d8 <__sprint_r>
   83210:	2800      	cmp	r0, #0
   83212:	f040 8398 	bne.w	83946 <_vfiprintf_r+0x806>
   83216:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8321a:	9803      	ldr	r0, [sp, #12]
   8321c:	1942      	adds	r2, r0, r5
   8321e:	9203      	str	r2, [sp, #12]
   83220:	7821      	ldrb	r1, [r4, #0]
   83222:	2900      	cmp	r1, #0
   83224:	f000 8388 	beq.w	83938 <_vfiprintf_r+0x7f8>
   83228:	2200      	movs	r2, #0
   8322a:	3401      	adds	r4, #1
   8322c:	9401      	str	r4, [sp, #4]
   8322e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   83232:	f04f 3cff 	mov.w	ip, #4294967295
   83236:	9204      	str	r2, [sp, #16]
   83238:	4617      	mov	r7, r2
   8323a:	9801      	ldr	r0, [sp, #4]
   8323c:	f810 3b01 	ldrb.w	r3, [r0], #1
   83240:	9001      	str	r0, [sp, #4]
   83242:	2b63      	cmp	r3, #99	; 0x63
   83244:	f000 80b3 	beq.w	833ae <_vfiprintf_r+0x26e>
   83248:	dc33      	bgt.n	832b2 <_vfiprintf_r+0x172>
   8324a:	2b39      	cmp	r3, #57	; 0x39
   8324c:	dc1a      	bgt.n	83284 <_vfiprintf_r+0x144>
   8324e:	2b31      	cmp	r3, #49	; 0x31
   83250:	f280 8091 	bge.w	83376 <_vfiprintf_r+0x236>
   83254:	2b2b      	cmp	r3, #43	; 0x2b
   83256:	d101      	bne.n	8325c <_vfiprintf_r+0x11c>
   83258:	461a      	mov	r2, r3
   8325a:	e7ee      	b.n	8323a <_vfiprintf_r+0xfa>
   8325c:	dc0a      	bgt.n	83274 <_vfiprintf_r+0x134>
   8325e:	2b23      	cmp	r3, #35	; 0x23
   83260:	d055      	beq.n	8330e <_vfiprintf_r+0x1ce>
   83262:	2b2a      	cmp	r3, #42	; 0x2a
   83264:	d056      	beq.n	83314 <_vfiprintf_r+0x1d4>
   83266:	2b20      	cmp	r3, #32
   83268:	f040 81f5 	bne.w	83656 <_vfiprintf_r+0x516>
   8326c:	2a00      	cmp	r2, #0
   8326e:	bf08      	it	eq
   83270:	2220      	moveq	r2, #32
   83272:	e7e2      	b.n	8323a <_vfiprintf_r+0xfa>
   83274:	2b2e      	cmp	r3, #46	; 0x2e
   83276:	d058      	beq.n	8332a <_vfiprintf_r+0x1ea>
   83278:	2b30      	cmp	r3, #48	; 0x30
   8327a:	d079      	beq.n	83370 <_vfiprintf_r+0x230>
   8327c:	2b2d      	cmp	r3, #45	; 0x2d
   8327e:	f040 81ea 	bne.w	83656 <_vfiprintf_r+0x516>
   83282:	e04f      	b.n	83324 <_vfiprintf_r+0x1e4>
   83284:	2b4f      	cmp	r3, #79	; 0x4f
   83286:	f000 80de 	beq.w	83446 <_vfiprintf_r+0x306>
   8328a:	dc07      	bgt.n	8329c <_vfiprintf_r+0x15c>
   8328c:	2b44      	cmp	r3, #68	; 0x44
   8328e:	f040 81e2 	bne.w	83656 <_vfiprintf_r+0x516>
   83292:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   83296:	f047 0710 	orr.w	r7, r7, #16
   8329a:	e090      	b.n	833be <_vfiprintf_r+0x27e>
   8329c:	2b55      	cmp	r3, #85	; 0x55
   8329e:	f000 811f 	beq.w	834e0 <_vfiprintf_r+0x3a0>
   832a2:	2b58      	cmp	r3, #88	; 0x58
   832a4:	f040 81d7 	bne.w	83656 <_vfiprintf_r+0x516>
   832a8:	4dae      	ldr	r5, [pc, #696]	; (83564 <_vfiprintf_r+0x424>)
   832aa:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   832ae:	9505      	str	r5, [sp, #20]
   832b0:	e130      	b.n	83514 <_vfiprintf_r+0x3d4>
   832b2:	2b6f      	cmp	r3, #111	; 0x6f
   832b4:	f000 80c9 	beq.w	8344a <_vfiprintf_r+0x30a>
   832b8:	dc10      	bgt.n	832dc <_vfiprintf_r+0x19c>
   832ba:	2b69      	cmp	r3, #105	; 0x69
   832bc:	d024      	beq.n	83308 <_vfiprintf_r+0x1c8>
   832be:	dc07      	bgt.n	832d0 <_vfiprintf_r+0x190>
   832c0:	2b64      	cmp	r3, #100	; 0x64
   832c2:	d021      	beq.n	83308 <_vfiprintf_r+0x1c8>
   832c4:	2b68      	cmp	r3, #104	; 0x68
   832c6:	f040 81c6 	bne.w	83656 <_vfiprintf_r+0x516>
   832ca:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   832ce:	e7b4      	b.n	8323a <_vfiprintf_r+0xfa>
   832d0:	2b6c      	cmp	r3, #108	; 0x6c
   832d2:	d05f      	beq.n	83394 <_vfiprintf_r+0x254>
   832d4:	2b6e      	cmp	r3, #110	; 0x6e
   832d6:	f040 81be 	bne.w	83656 <_vfiprintf_r+0x516>
   832da:	e096      	b.n	8340a <_vfiprintf_r+0x2ca>
   832dc:	2b73      	cmp	r3, #115	; 0x73
   832de:	f000 80df 	beq.w	834a0 <_vfiprintf_r+0x360>
   832e2:	dc06      	bgt.n	832f2 <_vfiprintf_r+0x1b2>
   832e4:	2b70      	cmp	r3, #112	; 0x70
   832e6:	f000 80cd 	beq.w	83484 <_vfiprintf_r+0x344>
   832ea:	2b71      	cmp	r3, #113	; 0x71
   832ec:	f040 81b3 	bne.w	83656 <_vfiprintf_r+0x516>
   832f0:	e05a      	b.n	833a8 <_vfiprintf_r+0x268>
   832f2:	2b75      	cmp	r3, #117	; 0x75
   832f4:	f000 80f6 	beq.w	834e4 <_vfiprintf_r+0x3a4>
   832f8:	2b78      	cmp	r3, #120	; 0x78
   832fa:	f040 81ac 	bne.w	83656 <_vfiprintf_r+0x516>
   832fe:	4d9a      	ldr	r5, [pc, #616]	; (83568 <_vfiprintf_r+0x428>)
   83300:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   83304:	9505      	str	r5, [sp, #20]
   83306:	e105      	b.n	83514 <_vfiprintf_r+0x3d4>
   83308:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8330c:	e057      	b.n	833be <_vfiprintf_r+0x27e>
   8330e:	f047 0701 	orr.w	r7, r7, #1
   83312:	e792      	b.n	8323a <_vfiprintf_r+0xfa>
   83314:	1d33      	adds	r3, r6, #4
   83316:	6836      	ldr	r6, [r6, #0]
   83318:	2e00      	cmp	r6, #0
   8331a:	9604      	str	r6, [sp, #16]
   8331c:	da15      	bge.n	8334a <_vfiprintf_r+0x20a>
   8331e:	4270      	negs	r0, r6
   83320:	9004      	str	r0, [sp, #16]
   83322:	461e      	mov	r6, r3
   83324:	f047 0704 	orr.w	r7, r7, #4
   83328:	e787      	b.n	8323a <_vfiprintf_r+0xfa>
   8332a:	9901      	ldr	r1, [sp, #4]
   8332c:	f811 3b01 	ldrb.w	r3, [r1], #1
   83330:	2b2a      	cmp	r3, #42	; 0x2a
   83332:	9101      	str	r1, [sp, #4]
   83334:	d10b      	bne.n	8334e <_vfiprintf_r+0x20e>
   83336:	f8d6 c000 	ldr.w	ip, [r6]
   8333a:	1d33      	adds	r3, r6, #4
   8333c:	f1bc 0f00 	cmp.w	ip, #0
   83340:	da03      	bge.n	8334a <_vfiprintf_r+0x20a>
   83342:	461e      	mov	r6, r3
   83344:	f04f 3cff 	mov.w	ip, #4294967295
   83348:	e777      	b.n	8323a <_vfiprintf_r+0xfa>
   8334a:	461e      	mov	r6, r3
   8334c:	e775      	b.n	8323a <_vfiprintf_r+0xfa>
   8334e:	f04f 0c00 	mov.w	ip, #0
   83352:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   83356:	2809      	cmp	r0, #9
   83358:	d807      	bhi.n	8336a <_vfiprintf_r+0x22a>
   8335a:	9901      	ldr	r1, [sp, #4]
   8335c:	230a      	movs	r3, #10
   8335e:	fb03 0c0c 	mla	ip, r3, ip, r0
   83362:	f811 3b01 	ldrb.w	r3, [r1], #1
   83366:	9101      	str	r1, [sp, #4]
   83368:	e7f3      	b.n	83352 <_vfiprintf_r+0x212>
   8336a:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   8336e:	e768      	b.n	83242 <_vfiprintf_r+0x102>
   83370:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   83374:	e761      	b.n	8323a <_vfiprintf_r+0xfa>
   83376:	9801      	ldr	r0, [sp, #4]
   83378:	2100      	movs	r1, #0
   8337a:	3b30      	subs	r3, #48	; 0x30
   8337c:	240a      	movs	r4, #10
   8337e:	fb04 3101 	mla	r1, r4, r1, r3
   83382:	f810 3b01 	ldrb.w	r3, [r0], #1
   83386:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   8338a:	2c09      	cmp	r4, #9
   8338c:	9001      	str	r0, [sp, #4]
   8338e:	d9f4      	bls.n	8337a <_vfiprintf_r+0x23a>
   83390:	9104      	str	r1, [sp, #16]
   83392:	e756      	b.n	83242 <_vfiprintf_r+0x102>
   83394:	9901      	ldr	r1, [sp, #4]
   83396:	780b      	ldrb	r3, [r1, #0]
   83398:	2b6c      	cmp	r3, #108	; 0x6c
   8339a:	d102      	bne.n	833a2 <_vfiprintf_r+0x262>
   8339c:	1c48      	adds	r0, r1, #1
   8339e:	9001      	str	r0, [sp, #4]
   833a0:	e002      	b.n	833a8 <_vfiprintf_r+0x268>
   833a2:	f047 0710 	orr.w	r7, r7, #16
   833a6:	e748      	b.n	8323a <_vfiprintf_r+0xfa>
   833a8:	f047 0720 	orr.w	r7, r7, #32
   833ac:	e745      	b.n	8323a <_vfiprintf_r+0xfa>
   833ae:	6832      	ldr	r2, [r6, #0]
   833b0:	2500      	movs	r5, #0
   833b2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   833b6:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   833ba:	3604      	adds	r6, #4
   833bc:	e155      	b.n	8366a <_vfiprintf_r+0x52a>
   833be:	06ba      	lsls	r2, r7, #26
   833c0:	d507      	bpl.n	833d2 <_vfiprintf_r+0x292>
   833c2:	3607      	adds	r6, #7
   833c4:	f026 0507 	bic.w	r5, r6, #7
   833c8:	f105 0608 	add.w	r6, r5, #8
   833cc:	e9d5 4500 	ldrd	r4, r5, [r5]
   833d0:	e00f      	b.n	833f2 <_vfiprintf_r+0x2b2>
   833d2:	f017 0f10 	tst.w	r7, #16
   833d6:	f106 0104 	add.w	r1, r6, #4
   833da:	d001      	beq.n	833e0 <_vfiprintf_r+0x2a0>
   833dc:	6832      	ldr	r2, [r6, #0]
   833de:	e005      	b.n	833ec <_vfiprintf_r+0x2ac>
   833e0:	f017 0f40 	tst.w	r7, #64	; 0x40
   833e4:	6832      	ldr	r2, [r6, #0]
   833e6:	d001      	beq.n	833ec <_vfiprintf_r+0x2ac>
   833e8:	b214      	sxth	r4, r2
   833ea:	e000      	b.n	833ee <_vfiprintf_r+0x2ae>
   833ec:	4614      	mov	r4, r2
   833ee:	17e5      	asrs	r5, r4, #31
   833f0:	460e      	mov	r6, r1
   833f2:	2c00      	cmp	r4, #0
   833f4:	f175 0200 	sbcs.w	r2, r5, #0
   833f8:	f280 80b8 	bge.w	8356c <_vfiprintf_r+0x42c>
   833fc:	232d      	movs	r3, #45	; 0x2d
   833fe:	4264      	negs	r4, r4
   83400:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   83404:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   83408:	e0b0      	b.n	8356c <_vfiprintf_r+0x42c>
   8340a:	f017 0f20 	tst.w	r7, #32
   8340e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   83412:	f106 0204 	add.w	r2, r6, #4
   83416:	d005      	beq.n	83424 <_vfiprintf_r+0x2e4>
   83418:	9c03      	ldr	r4, [sp, #12]
   8341a:	6835      	ldr	r5, [r6, #0]
   8341c:	17e0      	asrs	r0, r4, #31
   8341e:	602c      	str	r4, [r5, #0]
   83420:	6068      	str	r0, [r5, #4]
   83422:	e004      	b.n	8342e <_vfiprintf_r+0x2ee>
   83424:	06fb      	lsls	r3, r7, #27
   83426:	d504      	bpl.n	83432 <_vfiprintf_r+0x2f2>
   83428:	6833      	ldr	r3, [r6, #0]
   8342a:	9903      	ldr	r1, [sp, #12]
   8342c:	6019      	str	r1, [r3, #0]
   8342e:	4616      	mov	r6, r2
   83430:	e6d2      	b.n	831d8 <_vfiprintf_r+0x98>
   83432:	6830      	ldr	r0, [r6, #0]
   83434:	9c03      	ldr	r4, [sp, #12]
   83436:	f017 0f40 	tst.w	r7, #64	; 0x40
   8343a:	f106 0604 	add.w	r6, r6, #4
   8343e:	bf14      	ite	ne
   83440:	8004      	strhne	r4, [r0, #0]
   83442:	6004      	streq	r4, [r0, #0]
   83444:	e6c8      	b.n	831d8 <_vfiprintf_r+0x98>
   83446:	f047 0710 	orr.w	r7, r7, #16
   8344a:	f017 0020 	ands.w	r0, r7, #32
   8344e:	d008      	beq.n	83462 <_vfiprintf_r+0x322>
   83450:	1df3      	adds	r3, r6, #7
   83452:	f023 0507 	bic.w	r5, r3, #7
   83456:	f105 0608 	add.w	r6, r5, #8
   8345a:	e9d5 4500 	ldrd	r4, r5, [r5]
   8345e:	2000      	movs	r0, #0
   83460:	e07c      	b.n	8355c <_vfiprintf_r+0x41c>
   83462:	f017 0110 	ands.w	r1, r7, #16
   83466:	f106 0204 	add.w	r2, r6, #4
   8346a:	d106      	bne.n	8347a <_vfiprintf_r+0x33a>
   8346c:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   83470:	d003      	beq.n	8347a <_vfiprintf_r+0x33a>
   83472:	8834      	ldrh	r4, [r6, #0]
   83474:	2500      	movs	r5, #0
   83476:	4616      	mov	r6, r2
   83478:	e7f1      	b.n	8345e <_vfiprintf_r+0x31e>
   8347a:	6836      	ldr	r6, [r6, #0]
   8347c:	2500      	movs	r5, #0
   8347e:	4634      	mov	r4, r6
   83480:	4616      	mov	r6, r2
   83482:	e06b      	b.n	8355c <_vfiprintf_r+0x41c>
   83484:	4b38      	ldr	r3, [pc, #224]	; (83568 <_vfiprintf_r+0x428>)
   83486:	2130      	movs	r1, #48	; 0x30
   83488:	2278      	movs	r2, #120	; 0x78
   8348a:	6834      	ldr	r4, [r6, #0]
   8348c:	2500      	movs	r5, #0
   8348e:	f047 0702 	orr.w	r7, r7, #2
   83492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   83496:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   8349a:	3604      	adds	r6, #4
   8349c:	9305      	str	r3, [sp, #20]
   8349e:	e05c      	b.n	8355a <_vfiprintf_r+0x41a>
   834a0:	4631      	mov	r1, r6
   834a2:	2500      	movs	r5, #0
   834a4:	f8d1 b000 	ldr.w	fp, [r1]
   834a8:	3604      	adds	r6, #4
   834aa:	45ac      	cmp	ip, r5
   834ac:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   834b0:	4658      	mov	r0, fp
   834b2:	db11      	blt.n	834d8 <_vfiprintf_r+0x398>
   834b4:	4662      	mov	r2, ip
   834b6:	4629      	mov	r1, r5
   834b8:	f8cd c000 	str.w	ip, [sp]
   834bc:	f001 faa2 	bl	84a04 <memchr>
   834c0:	f8dd c000 	ldr.w	ip, [sp]
   834c4:	2800      	cmp	r0, #0
   834c6:	f000 80d4 	beq.w	83672 <_vfiprintf_r+0x532>
   834ca:	ebcb 0400 	rsb	r4, fp, r0
   834ce:	4564      	cmp	r4, ip
   834d0:	f340 80d1 	ble.w	83676 <_vfiprintf_r+0x536>
   834d4:	4664      	mov	r4, ip
   834d6:	e0ce      	b.n	83676 <_vfiprintf_r+0x536>
   834d8:	f7ff fde0 	bl	8309c <strlen>
   834dc:	4604      	mov	r4, r0
   834de:	e0ca      	b.n	83676 <_vfiprintf_r+0x536>
   834e0:	f047 0710 	orr.w	r7, r7, #16
   834e4:	06bd      	lsls	r5, r7, #26
   834e6:	d506      	bpl.n	834f6 <_vfiprintf_r+0x3b6>
   834e8:	1df0      	adds	r0, r6, #7
   834ea:	f020 0407 	bic.w	r4, r0, #7
   834ee:	f104 0608 	add.w	r6, r4, #8
   834f2:	cc30      	ldmia	r4, {r4, r5}
   834f4:	e00c      	b.n	83510 <_vfiprintf_r+0x3d0>
   834f6:	f017 0f10 	tst.w	r7, #16
   834fa:	f106 0304 	add.w	r3, r6, #4
   834fe:	d103      	bne.n	83508 <_vfiprintf_r+0x3c8>
   83500:	067c      	lsls	r4, r7, #25
   83502:	d501      	bpl.n	83508 <_vfiprintf_r+0x3c8>
   83504:	8834      	ldrh	r4, [r6, #0]
   83506:	e001      	b.n	8350c <_vfiprintf_r+0x3cc>
   83508:	6835      	ldr	r5, [r6, #0]
   8350a:	462c      	mov	r4, r5
   8350c:	2500      	movs	r5, #0
   8350e:	461e      	mov	r6, r3
   83510:	2001      	movs	r0, #1
   83512:	e023      	b.n	8355c <_vfiprintf_r+0x41c>
   83514:	06b8      	lsls	r0, r7, #26
   83516:	d507      	bpl.n	83528 <_vfiprintf_r+0x3e8>
   83518:	1df4      	adds	r4, r6, #7
   8351a:	f024 0107 	bic.w	r1, r4, #7
   8351e:	f101 0608 	add.w	r6, r1, #8
   83522:	e9d1 4500 	ldrd	r4, r5, [r1]
   83526:	e00c      	b.n	83542 <_vfiprintf_r+0x402>
   83528:	f017 0f10 	tst.w	r7, #16
   8352c:	f106 0004 	add.w	r0, r6, #4
   83530:	d103      	bne.n	8353a <_vfiprintf_r+0x3fa>
   83532:	0679      	lsls	r1, r7, #25
   83534:	d501      	bpl.n	8353a <_vfiprintf_r+0x3fa>
   83536:	8834      	ldrh	r4, [r6, #0]
   83538:	e001      	b.n	8353e <_vfiprintf_r+0x3fe>
   8353a:	6836      	ldr	r6, [r6, #0]
   8353c:	4634      	mov	r4, r6
   8353e:	2500      	movs	r5, #0
   83540:	4606      	mov	r6, r0
   83542:	07fa      	lsls	r2, r7, #31
   83544:	d509      	bpl.n	8355a <_vfiprintf_r+0x41a>
   83546:	ea54 0205 	orrs.w	r2, r4, r5
   8354a:	d006      	beq.n	8355a <_vfiprintf_r+0x41a>
   8354c:	2230      	movs	r2, #48	; 0x30
   8354e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   83552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   83556:	f047 0702 	orr.w	r7, r7, #2
   8355a:	2002      	movs	r0, #2
   8355c:	2100      	movs	r1, #0
   8355e:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   83562:	e004      	b.n	8356e <_vfiprintf_r+0x42e>
   83564:	00085672 	.word	0x00085672
   83568:	00085683 	.word	0x00085683
   8356c:	2001      	movs	r0, #1
   8356e:	f1bc 0f00 	cmp.w	ip, #0
   83572:	bfa8      	it	ge
   83574:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   83578:	ea54 0105 	orrs.w	r1, r4, r5
   8357c:	d102      	bne.n	83584 <_vfiprintf_r+0x444>
   8357e:	f1bc 0f00 	cmp.w	ip, #0
   83582:	d058      	beq.n	83636 <_vfiprintf_r+0x4f6>
   83584:	2801      	cmp	r0, #1
   83586:	d01d      	beq.n	835c4 <_vfiprintf_r+0x484>
   83588:	2802      	cmp	r0, #2
   8358a:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8358e:	d041      	beq.n	83614 <_vfiprintf_r+0x4d4>
   83590:	f004 0207 	and.w	r2, r4, #7
   83594:	08e4      	lsrs	r4, r4, #3
   83596:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   8359a:	08e9      	lsrs	r1, r5, #3
   8359c:	4604      	mov	r4, r0
   8359e:	460d      	mov	r5, r1
   835a0:	3230      	adds	r2, #48	; 0x30
   835a2:	ea54 0105 	orrs.w	r1, r4, r5
   835a6:	469b      	mov	fp, r3
   835a8:	701a      	strb	r2, [r3, #0]
   835aa:	f103 33ff 	add.w	r3, r3, #4294967295
   835ae:	d1ef      	bne.n	83590 <_vfiprintf_r+0x450>
   835b0:	07f8      	lsls	r0, r7, #31
   835b2:	465d      	mov	r5, fp
   835b4:	d54a      	bpl.n	8364c <_vfiprintf_r+0x50c>
   835b6:	2a30      	cmp	r2, #48	; 0x30
   835b8:	d048      	beq.n	8364c <_vfiprintf_r+0x50c>
   835ba:	2230      	movs	r2, #48	; 0x30
   835bc:	469b      	mov	fp, r3
   835be:	f805 2c01 	strb.w	r2, [r5, #-1]
   835c2:	e043      	b.n	8364c <_vfiprintf_r+0x50c>
   835c4:	2d00      	cmp	r5, #0
   835c6:	bf08      	it	eq
   835c8:	2c0a      	cmpeq	r4, #10
   835ca:	d203      	bcs.n	835d4 <_vfiprintf_r+0x494>
   835cc:	3430      	adds	r4, #48	; 0x30
   835ce:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   835d2:	e036      	b.n	83642 <_vfiprintf_r+0x502>
   835d4:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   835d8:	9302      	str	r3, [sp, #8]
   835da:	4620      	mov	r0, r4
   835dc:	4629      	mov	r1, r5
   835de:	220a      	movs	r2, #10
   835e0:	2300      	movs	r3, #0
   835e2:	f8cd c000 	str.w	ip, [sp]
   835e6:	f001 fd0f 	bl	85008 <__aeabi_uldivmod>
   835ea:	9802      	ldr	r0, [sp, #8]
   835ec:	3230      	adds	r2, #48	; 0x30
   835ee:	f800 2901 	strb.w	r2, [r0], #-1
   835f2:	4629      	mov	r1, r5
   835f4:	220a      	movs	r2, #10
   835f6:	2300      	movs	r3, #0
   835f8:	f8dd b008 	ldr.w	fp, [sp, #8]
   835fc:	9002      	str	r0, [sp, #8]
   835fe:	4620      	mov	r0, r4
   83600:	f001 fd02 	bl	85008 <__aeabi_uldivmod>
   83604:	4604      	mov	r4, r0
   83606:	460d      	mov	r5, r1
   83608:	ea54 0105 	orrs.w	r1, r4, r5
   8360c:	f8dd c000 	ldr.w	ip, [sp]
   83610:	d1e3      	bne.n	835da <_vfiprintf_r+0x49a>
   83612:	e01b      	b.n	8364c <_vfiprintf_r+0x50c>
   83614:	9905      	ldr	r1, [sp, #20]
   83616:	f004 000f 	and.w	r0, r4, #15
   8361a:	0924      	lsrs	r4, r4, #4
   8361c:	5c0a      	ldrb	r2, [r1, r0]
   8361e:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   83622:	0929      	lsrs	r1, r5, #4
   83624:	4604      	mov	r4, r0
   83626:	460d      	mov	r5, r1
   83628:	469b      	mov	fp, r3
   8362a:	f803 2901 	strb.w	r2, [r3], #-1
   8362e:	ea54 0205 	orrs.w	r2, r4, r5
   83632:	d1ef      	bne.n	83614 <_vfiprintf_r+0x4d4>
   83634:	e00a      	b.n	8364c <_vfiprintf_r+0x50c>
   83636:	b938      	cbnz	r0, 83648 <_vfiprintf_r+0x508>
   83638:	07f9      	lsls	r1, r7, #31
   8363a:	d505      	bpl.n	83648 <_vfiprintf_r+0x508>
   8363c:	2030      	movs	r0, #48	; 0x30
   8363e:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   83642:	f10d 0b5f 	add.w	fp, sp, #95	; 0x5f
   83646:	e001      	b.n	8364c <_vfiprintf_r+0x50c>
   83648:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
   8364c:	ad18      	add	r5, sp, #96	; 0x60
   8364e:	ebcb 0405 	rsb	r4, fp, r5
   83652:	4665      	mov	r5, ip
   83654:	e00f      	b.n	83676 <_vfiprintf_r+0x536>
   83656:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8365a:	2b00      	cmp	r3, #0
   8365c:	f000 816c 	beq.w	83938 <_vfiprintf_r+0x7f8>
   83660:	2500      	movs	r5, #0
   83662:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   83666:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8366a:	2401      	movs	r4, #1
   8366c:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
   83670:	e001      	b.n	83676 <_vfiprintf_r+0x536>
   83672:	4664      	mov	r4, ip
   83674:	4605      	mov	r5, r0
   83676:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8367a:	42ac      	cmp	r4, r5
   8367c:	bfac      	ite	ge
   8367e:	4621      	movge	r1, r4
   83680:	4629      	movlt	r1, r5
   83682:	9102      	str	r1, [sp, #8]
   83684:	b113      	cbz	r3, 8368c <_vfiprintf_r+0x54c>
   83686:	9802      	ldr	r0, [sp, #8]
   83688:	1c42      	adds	r2, r0, #1
   8368a:	9202      	str	r2, [sp, #8]
   8368c:	f017 0102 	ands.w	r1, r7, #2
   83690:	9106      	str	r1, [sp, #24]
   83692:	d002      	beq.n	8369a <_vfiprintf_r+0x55a>
   83694:	9b02      	ldr	r3, [sp, #8]
   83696:	1c98      	adds	r0, r3, #2
   83698:	9002      	str	r0, [sp, #8]
   8369a:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   8369e:	9207      	str	r2, [sp, #28]
   836a0:	d13a      	bne.n	83718 <_vfiprintf_r+0x5d8>
   836a2:	9904      	ldr	r1, [sp, #16]
   836a4:	9b02      	ldr	r3, [sp, #8]
   836a6:	1acb      	subs	r3, r1, r3
   836a8:	2b00      	cmp	r3, #0
   836aa:	dd35      	ble.n	83718 <_vfiprintf_r+0x5d8>
   836ac:	48a0      	ldr	r0, [pc, #640]	; (83930 <_vfiprintf_r+0x7f0>)
   836ae:	2b10      	cmp	r3, #16
   836b0:	f8c8 0000 	str.w	r0, [r8]
   836b4:	dd1a      	ble.n	836ec <_vfiprintf_r+0x5ac>
   836b6:	990c      	ldr	r1, [sp, #48]	; 0x30
   836b8:	2010      	movs	r0, #16
   836ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   836bc:	f8c8 0004 	str.w	r0, [r8, #4]
   836c0:	1c48      	adds	r0, r1, #1
   836c2:	3210      	adds	r2, #16
   836c4:	2807      	cmp	r0, #7
   836c6:	920d      	str	r2, [sp, #52]	; 0x34
   836c8:	f108 0808 	add.w	r8, r8, #8
   836cc:	900c      	str	r0, [sp, #48]	; 0x30
   836ce:	dd0b      	ble.n	836e8 <_vfiprintf_r+0x5a8>
   836d0:	4650      	mov	r0, sl
   836d2:	4649      	mov	r1, r9
   836d4:	aa0b      	add	r2, sp, #44	; 0x2c
   836d6:	9300      	str	r3, [sp, #0]
   836d8:	f7ff fcfe 	bl	830d8 <__sprint_r>
   836dc:	9b00      	ldr	r3, [sp, #0]
   836de:	2800      	cmp	r0, #0
   836e0:	f040 8131 	bne.w	83946 <_vfiprintf_r+0x806>
   836e4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   836e8:	3b10      	subs	r3, #16
   836ea:	e7df      	b.n	836ac <_vfiprintf_r+0x56c>
   836ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   836ee:	f8c8 3004 	str.w	r3, [r8, #4]
   836f2:	18d1      	adds	r1, r2, r3
   836f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   836f6:	910d      	str	r1, [sp, #52]	; 0x34
   836f8:	1c58      	adds	r0, r3, #1
   836fa:	2807      	cmp	r0, #7
   836fc:	f108 0808 	add.w	r8, r8, #8
   83700:	900c      	str	r0, [sp, #48]	; 0x30
   83702:	dd09      	ble.n	83718 <_vfiprintf_r+0x5d8>
   83704:	4650      	mov	r0, sl
   83706:	4649      	mov	r1, r9
   83708:	aa0b      	add	r2, sp, #44	; 0x2c
   8370a:	f7ff fce5 	bl	830d8 <__sprint_r>
   8370e:	2800      	cmp	r0, #0
   83710:	f040 8119 	bne.w	83946 <_vfiprintf_r+0x806>
   83714:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   83718:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   8371c:	b1d2      	cbz	r2, 83754 <_vfiprintf_r+0x614>
   8371e:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   83722:	f8c8 1000 	str.w	r1, [r8]
   83726:	990c      	ldr	r1, [sp, #48]	; 0x30
   83728:	2301      	movs	r3, #1
   8372a:	980d      	ldr	r0, [sp, #52]	; 0x34
   8372c:	f8c8 3004 	str.w	r3, [r8, #4]
   83730:	1c4b      	adds	r3, r1, #1
   83732:	1c42      	adds	r2, r0, #1
   83734:	2b07      	cmp	r3, #7
   83736:	920d      	str	r2, [sp, #52]	; 0x34
   83738:	f108 0808 	add.w	r8, r8, #8
   8373c:	930c      	str	r3, [sp, #48]	; 0x30
   8373e:	dd09      	ble.n	83754 <_vfiprintf_r+0x614>
   83740:	4650      	mov	r0, sl
   83742:	4649      	mov	r1, r9
   83744:	aa0b      	add	r2, sp, #44	; 0x2c
   83746:	f7ff fcc7 	bl	830d8 <__sprint_r>
   8374a:	2800      	cmp	r0, #0
   8374c:	f040 80fb 	bne.w	83946 <_vfiprintf_r+0x806>
   83750:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   83754:	9806      	ldr	r0, [sp, #24]
   83756:	b1c8      	cbz	r0, 8378c <_vfiprintf_r+0x64c>
   83758:	aa0a      	add	r2, sp, #40	; 0x28
   8375a:	f8c8 2000 	str.w	r2, [r8]
   8375e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   83760:	2102      	movs	r1, #2
   83762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83764:	f8c8 1004 	str.w	r1, [r8, #4]
   83768:	1c51      	adds	r1, r2, #1
   8376a:	1c98      	adds	r0, r3, #2
   8376c:	2907      	cmp	r1, #7
   8376e:	900d      	str	r0, [sp, #52]	; 0x34
   83770:	f108 0808 	add.w	r8, r8, #8
   83774:	910c      	str	r1, [sp, #48]	; 0x30
   83776:	dd09      	ble.n	8378c <_vfiprintf_r+0x64c>
   83778:	4650      	mov	r0, sl
   8377a:	4649      	mov	r1, r9
   8377c:	aa0b      	add	r2, sp, #44	; 0x2c
   8377e:	f7ff fcab 	bl	830d8 <__sprint_r>
   83782:	2800      	cmp	r0, #0
   83784:	f040 80df 	bne.w	83946 <_vfiprintf_r+0x806>
   83788:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8378c:	9b07      	ldr	r3, [sp, #28]
   8378e:	2b80      	cmp	r3, #128	; 0x80
   83790:	d13a      	bne.n	83808 <_vfiprintf_r+0x6c8>
   83792:	9804      	ldr	r0, [sp, #16]
   83794:	9a02      	ldr	r2, [sp, #8]
   83796:	1a83      	subs	r3, r0, r2
   83798:	2b00      	cmp	r3, #0
   8379a:	dd35      	ble.n	83808 <_vfiprintf_r+0x6c8>
   8379c:	4965      	ldr	r1, [pc, #404]	; (83934 <_vfiprintf_r+0x7f4>)
   8379e:	2b10      	cmp	r3, #16
   837a0:	f8c8 1000 	str.w	r1, [r8]
   837a4:	dd1a      	ble.n	837dc <_vfiprintf_r+0x69c>
   837a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   837a8:	2110      	movs	r1, #16
   837aa:	980d      	ldr	r0, [sp, #52]	; 0x34
   837ac:	f8c8 1004 	str.w	r1, [r8, #4]
   837b0:	1c51      	adds	r1, r2, #1
   837b2:	3010      	adds	r0, #16
   837b4:	2907      	cmp	r1, #7
   837b6:	900d      	str	r0, [sp, #52]	; 0x34
   837b8:	f108 0808 	add.w	r8, r8, #8
   837bc:	910c      	str	r1, [sp, #48]	; 0x30
   837be:	dd0b      	ble.n	837d8 <_vfiprintf_r+0x698>
   837c0:	4650      	mov	r0, sl
   837c2:	4649      	mov	r1, r9
   837c4:	aa0b      	add	r2, sp, #44	; 0x2c
   837c6:	9300      	str	r3, [sp, #0]
   837c8:	f7ff fc86 	bl	830d8 <__sprint_r>
   837cc:	9b00      	ldr	r3, [sp, #0]
   837ce:	2800      	cmp	r0, #0
   837d0:	f040 80b9 	bne.w	83946 <_vfiprintf_r+0x806>
   837d4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   837d8:	3b10      	subs	r3, #16
   837da:	e7df      	b.n	8379c <_vfiprintf_r+0x65c>
   837dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   837de:	980d      	ldr	r0, [sp, #52]	; 0x34
   837e0:	1c51      	adds	r1, r2, #1
   837e2:	f8c8 3004 	str.w	r3, [r8, #4]
   837e6:	2907      	cmp	r1, #7
   837e8:	4403      	add	r3, r0
   837ea:	930d      	str	r3, [sp, #52]	; 0x34
   837ec:	f108 0808 	add.w	r8, r8, #8
   837f0:	910c      	str	r1, [sp, #48]	; 0x30
   837f2:	dd09      	ble.n	83808 <_vfiprintf_r+0x6c8>
   837f4:	4650      	mov	r0, sl
   837f6:	4649      	mov	r1, r9
   837f8:	aa0b      	add	r2, sp, #44	; 0x2c
   837fa:	f7ff fc6d 	bl	830d8 <__sprint_r>
   837fe:	2800      	cmp	r0, #0
   83800:	f040 80a1 	bne.w	83946 <_vfiprintf_r+0x806>
   83804:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   83808:	1b2d      	subs	r5, r5, r4
   8380a:	2d00      	cmp	r5, #0
   8380c:	dd32      	ble.n	83874 <_vfiprintf_r+0x734>
   8380e:	4849      	ldr	r0, [pc, #292]	; (83934 <_vfiprintf_r+0x7f4>)
   83810:	2d10      	cmp	r5, #16
   83812:	f8c8 0000 	str.w	r0, [r8]
   83816:	dd18      	ble.n	8384a <_vfiprintf_r+0x70a>
   83818:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8381a:	980d      	ldr	r0, [sp, #52]	; 0x34
   8381c:	1c53      	adds	r3, r2, #1
   8381e:	2110      	movs	r1, #16
   83820:	3010      	adds	r0, #16
   83822:	2b07      	cmp	r3, #7
   83824:	f8c8 1004 	str.w	r1, [r8, #4]
   83828:	900d      	str	r0, [sp, #52]	; 0x34
   8382a:	f108 0808 	add.w	r8, r8, #8
   8382e:	930c      	str	r3, [sp, #48]	; 0x30
   83830:	dd09      	ble.n	83846 <_vfiprintf_r+0x706>
   83832:	4650      	mov	r0, sl
   83834:	4649      	mov	r1, r9
   83836:	aa0b      	add	r2, sp, #44	; 0x2c
   83838:	f7ff fc4e 	bl	830d8 <__sprint_r>
   8383c:	2800      	cmp	r0, #0
   8383e:	f040 8082 	bne.w	83946 <_vfiprintf_r+0x806>
   83842:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   83846:	3d10      	subs	r5, #16
   83848:	e7e1      	b.n	8380e <_vfiprintf_r+0x6ce>
   8384a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8384c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8384e:	1c51      	adds	r1, r2, #1
   83850:	f8c8 5004 	str.w	r5, [r8, #4]
   83854:	2907      	cmp	r1, #7
   83856:	441d      	add	r5, r3
   83858:	950d      	str	r5, [sp, #52]	; 0x34
   8385a:	f108 0808 	add.w	r8, r8, #8
   8385e:	910c      	str	r1, [sp, #48]	; 0x30
   83860:	dd08      	ble.n	83874 <_vfiprintf_r+0x734>
   83862:	4650      	mov	r0, sl
   83864:	4649      	mov	r1, r9
   83866:	aa0b      	add	r2, sp, #44	; 0x2c
   83868:	f7ff fc36 	bl	830d8 <__sprint_r>
   8386c:	2800      	cmp	r0, #0
   8386e:	d16a      	bne.n	83946 <_vfiprintf_r+0x806>
   83870:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   83874:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   83876:	980d      	ldr	r0, [sp, #52]	; 0x34
   83878:	1c51      	adds	r1, r2, #1
   8387a:	f8c8 4004 	str.w	r4, [r8, #4]
   8387e:	2907      	cmp	r1, #7
   83880:	4404      	add	r4, r0
   83882:	f8c8 b000 	str.w	fp, [r8]
   83886:	940d      	str	r4, [sp, #52]	; 0x34
   83888:	f108 0308 	add.w	r3, r8, #8
   8388c:	910c      	str	r1, [sp, #48]	; 0x30
   8388e:	dd07      	ble.n	838a0 <_vfiprintf_r+0x760>
   83890:	4650      	mov	r0, sl
   83892:	4649      	mov	r1, r9
   83894:	aa0b      	add	r2, sp, #44	; 0x2c
   83896:	f7ff fc1f 	bl	830d8 <__sprint_r>
   8389a:	2800      	cmp	r0, #0
   8389c:	d153      	bne.n	83946 <_vfiprintf_r+0x806>
   8389e:	ab18      	add	r3, sp, #96	; 0x60
   838a0:	077a      	lsls	r2, r7, #29
   838a2:	d40b      	bmi.n	838bc <_vfiprintf_r+0x77c>
   838a4:	9b03      	ldr	r3, [sp, #12]
   838a6:	9a02      	ldr	r2, [sp, #8]
   838a8:	9904      	ldr	r1, [sp, #16]
   838aa:	980d      	ldr	r0, [sp, #52]	; 0x34
   838ac:	428a      	cmp	r2, r1
   838ae:	bfac      	ite	ge
   838b0:	189b      	addge	r3, r3, r2
   838b2:	185b      	addlt	r3, r3, r1
   838b4:	9303      	str	r3, [sp, #12]
   838b6:	2800      	cmp	r0, #0
   838b8:	d035      	beq.n	83926 <_vfiprintf_r+0x7e6>
   838ba:	e02e      	b.n	8391a <_vfiprintf_r+0x7da>
   838bc:	9c04      	ldr	r4, [sp, #16]
   838be:	9802      	ldr	r0, [sp, #8]
   838c0:	1a24      	subs	r4, r4, r0
   838c2:	2c00      	cmp	r4, #0
   838c4:	ddee      	ble.n	838a4 <_vfiprintf_r+0x764>
   838c6:	4a1a      	ldr	r2, [pc, #104]	; (83930 <_vfiprintf_r+0x7f0>)
   838c8:	2c10      	cmp	r4, #16
   838ca:	601a      	str	r2, [r3, #0]
   838cc:	dd14      	ble.n	838f8 <_vfiprintf_r+0x7b8>
   838ce:	980c      	ldr	r0, [sp, #48]	; 0x30
   838d0:	2210      	movs	r2, #16
   838d2:	990d      	ldr	r1, [sp, #52]	; 0x34
   838d4:	605a      	str	r2, [r3, #4]
   838d6:	1c42      	adds	r2, r0, #1
   838d8:	3110      	adds	r1, #16
   838da:	3308      	adds	r3, #8
   838dc:	2a07      	cmp	r2, #7
   838de:	910d      	str	r1, [sp, #52]	; 0x34
   838e0:	920c      	str	r2, [sp, #48]	; 0x30
   838e2:	dd07      	ble.n	838f4 <_vfiprintf_r+0x7b4>
   838e4:	4650      	mov	r0, sl
   838e6:	4649      	mov	r1, r9
   838e8:	aa0b      	add	r2, sp, #44	; 0x2c
   838ea:	f7ff fbf5 	bl	830d8 <__sprint_r>
   838ee:	2800      	cmp	r0, #0
   838f0:	d129      	bne.n	83946 <_vfiprintf_r+0x806>
   838f2:	ab18      	add	r3, sp, #96	; 0x60
   838f4:	3c10      	subs	r4, #16
   838f6:	e7e6      	b.n	838c6 <_vfiprintf_r+0x786>
   838f8:	990c      	ldr	r1, [sp, #48]	; 0x30
   838fa:	605c      	str	r4, [r3, #4]
   838fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   838fe:	1c48      	adds	r0, r1, #1
   83900:	191c      	adds	r4, r3, r4
   83902:	2807      	cmp	r0, #7
   83904:	940d      	str	r4, [sp, #52]	; 0x34
   83906:	900c      	str	r0, [sp, #48]	; 0x30
   83908:	ddcc      	ble.n	838a4 <_vfiprintf_r+0x764>
   8390a:	4650      	mov	r0, sl
   8390c:	4649      	mov	r1, r9
   8390e:	aa0b      	add	r2, sp, #44	; 0x2c
   83910:	f7ff fbe2 	bl	830d8 <__sprint_r>
   83914:	2800      	cmp	r0, #0
   83916:	d0c5      	beq.n	838a4 <_vfiprintf_r+0x764>
   83918:	e015      	b.n	83946 <_vfiprintf_r+0x806>
   8391a:	4650      	mov	r0, sl
   8391c:	4649      	mov	r1, r9
   8391e:	aa0b      	add	r2, sp, #44	; 0x2c
   83920:	f7ff fbda 	bl	830d8 <__sprint_r>
   83924:	b978      	cbnz	r0, 83946 <_vfiprintf_r+0x806>
   83926:	2500      	movs	r5, #0
   83928:	950c      	str	r5, [sp, #48]	; 0x30
   8392a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8392e:	e453      	b.n	831d8 <_vfiprintf_r+0x98>
   83930:	00085652 	.word	0x00085652
   83934:	00085662 	.word	0x00085662
   83938:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8393a:	b122      	cbz	r2, 83946 <_vfiprintf_r+0x806>
   8393c:	4650      	mov	r0, sl
   8393e:	4649      	mov	r1, r9
   83940:	aa0b      	add	r2, sp, #44	; 0x2c
   83942:	f7ff fbc9 	bl	830d8 <__sprint_r>
   83946:	f8b9 100c 	ldrh.w	r1, [r9, #12]
   8394a:	f001 0040 	and.w	r0, r1, #64	; 0x40
   8394e:	b203      	sxth	r3, r0
   83950:	2b00      	cmp	r3, #0
   83952:	f47f ac28 	bne.w	831a6 <_vfiprintf_r+0x66>
   83956:	9803      	ldr	r0, [sp, #12]
   83958:	b029      	add	sp, #164	; 0xa4
   8395a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008395e <__sbprintf>:
   8395e:	b570      	push	{r4, r5, r6, lr}
   83960:	460c      	mov	r4, r1
   83962:	8989      	ldrh	r1, [r1, #12]
   83964:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   83968:	f021 0502 	bic.w	r5, r1, #2
   8396c:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8396e:	f8ad 500c 	strh.w	r5, [sp, #12]
   83972:	9119      	str	r1, [sp, #100]	; 0x64
   83974:	89e5      	ldrh	r5, [r4, #14]
   83976:	69e1      	ldr	r1, [r4, #28]
   83978:	f8ad 500e 	strh.w	r5, [sp, #14]
   8397c:	9107      	str	r1, [sp, #28]
   8397e:	6a65      	ldr	r5, [r4, #36]	; 0x24
   83980:	a91a      	add	r1, sp, #104	; 0x68
   83982:	9100      	str	r1, [sp, #0]
   83984:	9104      	str	r1, [sp, #16]
   83986:	2100      	movs	r1, #0
   83988:	9509      	str	r5, [sp, #36]	; 0x24
   8398a:	9106      	str	r1, [sp, #24]
   8398c:	f44f 6580 	mov.w	r5, #1024	; 0x400
   83990:	4669      	mov	r1, sp
   83992:	9502      	str	r5, [sp, #8]
   83994:	9505      	str	r5, [sp, #20]
   83996:	4606      	mov	r6, r0
   83998:	f7ff fbd2 	bl	83140 <_vfiprintf_r>
   8399c:	1e05      	subs	r5, r0, #0
   8399e:	db07      	blt.n	839b0 <__sbprintf+0x52>
   839a0:	4630      	mov	r0, r6
   839a2:	4669      	mov	r1, sp
   839a4:	f000 f8e8 	bl	83b78 <_fflush_r>
   839a8:	2800      	cmp	r0, #0
   839aa:	bf18      	it	ne
   839ac:	f04f 35ff 	movne.w	r5, #4294967295
   839b0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   839b4:	f003 0040 	and.w	r0, r3, #64	; 0x40
   839b8:	b202      	sxth	r2, r0
   839ba:	b11a      	cbz	r2, 839c4 <__sbprintf+0x66>
   839bc:	89a1      	ldrh	r1, [r4, #12]
   839be:	f041 0340 	orr.w	r3, r1, #64	; 0x40
   839c2:	81a3      	strh	r3, [r4, #12]
   839c4:	4628      	mov	r0, r5
   839c6:	b01a      	add	sp, #104	; 0x68
   839c8:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
   839cc:	bd70      	pop	{r4, r5, r6, pc}

000839ce <vfiprintf>:
   839ce:	b530      	push	{r4, r5, lr}
   839d0:	4613      	mov	r3, r2
   839d2:	4a05      	ldr	r2, [pc, #20]	; (839e8 <vfiprintf+0x1a>)
   839d4:	4605      	mov	r5, r0
   839d6:	460c      	mov	r4, r1
   839d8:	6810      	ldr	r0, [r2, #0]
   839da:	4629      	mov	r1, r5
   839dc:	4622      	mov	r2, r4
   839de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   839e2:	f7ff bbad 	b.w	83140 <_vfiprintf_r>
   839e6:	bf00      	nop
   839e8:	20070010 	.word	0x20070010

000839ec <__swbuf_r>:
   839ec:	b570      	push	{r4, r5, r6, lr}
   839ee:	460d      	mov	r5, r1
   839f0:	4614      	mov	r4, r2
   839f2:	4606      	mov	r6, r0
   839f4:	b118      	cbz	r0, 839fe <__swbuf_r+0x12>
   839f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   839f8:	b90b      	cbnz	r3, 839fe <__swbuf_r+0x12>
   839fa:	f000 f9af 	bl	83d5c <__sinit>
   839fe:	89a1      	ldrh	r1, [r4, #12]
   83a00:	69a0      	ldr	r0, [r4, #24]
   83a02:	f001 0208 	and.w	r2, r1, #8
   83a06:	b213      	sxth	r3, r2
   83a08:	60a0      	str	r0, [r4, #8]
   83a0a:	b10b      	cbz	r3, 83a10 <__swbuf_r+0x24>
   83a0c:	6920      	ldr	r0, [r4, #16]
   83a0e:	b958      	cbnz	r0, 83a28 <__swbuf_r+0x3c>
   83a10:	4630      	mov	r0, r6
   83a12:	4621      	mov	r1, r4
   83a14:	f000 f844 	bl	83aa0 <__swsetup_r>
   83a18:	b130      	cbz	r0, 83a28 <__swbuf_r+0x3c>
   83a1a:	89a5      	ldrh	r5, [r4, #12]
   83a1c:	2009      	movs	r0, #9
   83a1e:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   83a22:	81a1      	strh	r1, [r4, #12]
   83a24:	6030      	str	r0, [r6, #0]
   83a26:	e017      	b.n	83a58 <__swbuf_r+0x6c>
   83a28:	89a1      	ldrh	r1, [r4, #12]
   83a2a:	b2ed      	uxtb	r5, r5
   83a2c:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
   83a30:	b213      	sxth	r3, r2
   83a32:	b933      	cbnz	r3, 83a42 <__swbuf_r+0x56>
   83a34:	f441 5000 	orr.w	r0, r1, #8192	; 0x2000
   83a38:	6e61      	ldr	r1, [r4, #100]	; 0x64
   83a3a:	81a0      	strh	r0, [r4, #12]
   83a3c:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
   83a40:	6662      	str	r2, [r4, #100]	; 0x64
   83a42:	6820      	ldr	r0, [r4, #0]
   83a44:	6923      	ldr	r3, [r4, #16]
   83a46:	6961      	ldr	r1, [r4, #20]
   83a48:	1ac0      	subs	r0, r0, r3
   83a4a:	4288      	cmp	r0, r1
   83a4c:	db07      	blt.n	83a5e <__swbuf_r+0x72>
   83a4e:	4630      	mov	r0, r6
   83a50:	4621      	mov	r1, r4
   83a52:	f000 f891 	bl	83b78 <_fflush_r>
   83a56:	b110      	cbz	r0, 83a5e <__swbuf_r+0x72>
   83a58:	f04f 35ff 	mov.w	r5, #4294967295
   83a5c:	e015      	b.n	83a8a <__swbuf_r+0x9e>
   83a5e:	68a2      	ldr	r2, [r4, #8]
   83a60:	6821      	ldr	r1, [r4, #0]
   83a62:	1e53      	subs	r3, r2, #1
   83a64:	60a3      	str	r3, [r4, #8]
   83a66:	f801 5b01 	strb.w	r5, [r1], #1
   83a6a:	6962      	ldr	r2, [r4, #20]
   83a6c:	3001      	adds	r0, #1
   83a6e:	4290      	cmp	r0, r2
   83a70:	6021      	str	r1, [r4, #0]
   83a72:	d004      	beq.n	83a7e <__swbuf_r+0x92>
   83a74:	89a3      	ldrh	r3, [r4, #12]
   83a76:	07db      	lsls	r3, r3, #31
   83a78:	d507      	bpl.n	83a8a <__swbuf_r+0x9e>
   83a7a:	2d0a      	cmp	r5, #10
   83a7c:	d105      	bne.n	83a8a <__swbuf_r+0x9e>
   83a7e:	4630      	mov	r0, r6
   83a80:	4621      	mov	r1, r4
   83a82:	f000 f879 	bl	83b78 <_fflush_r>
   83a86:	2800      	cmp	r0, #0
   83a88:	d1e6      	bne.n	83a58 <__swbuf_r+0x6c>
   83a8a:	4628      	mov	r0, r5
   83a8c:	bd70      	pop	{r4, r5, r6, pc}

00083a8e <__swbuf>:
   83a8e:	460a      	mov	r2, r1
   83a90:	4902      	ldr	r1, [pc, #8]	; (83a9c <__swbuf+0xe>)
   83a92:	4603      	mov	r3, r0
   83a94:	6808      	ldr	r0, [r1, #0]
   83a96:	4619      	mov	r1, r3
   83a98:	f7ff bfa8 	b.w	839ec <__swbuf_r>
   83a9c:	20070010 	.word	0x20070010

00083aa0 <__swsetup_r>:
   83aa0:	b538      	push	{r3, r4, r5, lr}
   83aa2:	4b2c      	ldr	r3, [pc, #176]	; (83b54 <__swsetup_r+0xb4>)
   83aa4:	4605      	mov	r5, r0
   83aa6:	6818      	ldr	r0, [r3, #0]
   83aa8:	460c      	mov	r4, r1
   83aaa:	b118      	cbz	r0, 83ab4 <__swsetup_r+0x14>
   83aac:	6b82      	ldr	r2, [r0, #56]	; 0x38
   83aae:	b90a      	cbnz	r2, 83ab4 <__swsetup_r+0x14>
   83ab0:	f000 f954 	bl	83d5c <__sinit>
   83ab4:	89a0      	ldrh	r0, [r4, #12]
   83ab6:	f000 0108 	and.w	r1, r0, #8
   83aba:	b20b      	sxth	r3, r1
   83abc:	bb0b      	cbnz	r3, 83b02 <__swsetup_r+0x62>
   83abe:	f000 0210 	and.w	r2, r0, #16
   83ac2:	b211      	sxth	r1, r2
   83ac4:	b911      	cbnz	r1, 83acc <__swsetup_r+0x2c>
   83ac6:	f04f 30ff 	mov.w	r0, #4294967295
   83aca:	bd38      	pop	{r3, r4, r5, pc}
   83acc:	f000 0004 	and.w	r0, r0, #4
   83ad0:	b203      	sxth	r3, r0
   83ad2:	b193      	cbz	r3, 83afa <__swsetup_r+0x5a>
   83ad4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83ad6:	b141      	cbz	r1, 83aea <__swsetup_r+0x4a>
   83ad8:	f104 0240 	add.w	r2, r4, #64	; 0x40
   83adc:	4291      	cmp	r1, r2
   83ade:	d002      	beq.n	83ae6 <__swsetup_r+0x46>
   83ae0:	4628      	mov	r0, r5
   83ae2:	f000 fa79 	bl	83fd8 <_free_r>
   83ae6:	2100      	movs	r1, #0
   83ae8:	6321      	str	r1, [r4, #48]	; 0x30
   83aea:	89a0      	ldrh	r0, [r4, #12]
   83aec:	6921      	ldr	r1, [r4, #16]
   83aee:	f020 0324 	bic.w	r3, r0, #36	; 0x24
   83af2:	2200      	movs	r2, #0
   83af4:	81a3      	strh	r3, [r4, #12]
   83af6:	6062      	str	r2, [r4, #4]
   83af8:	6021      	str	r1, [r4, #0]
   83afa:	89a0      	ldrh	r0, [r4, #12]
   83afc:	f040 0308 	orr.w	r3, r0, #8
   83b00:	81a3      	strh	r3, [r4, #12]
   83b02:	6922      	ldr	r2, [r4, #16]
   83b04:	b94a      	cbnz	r2, 83b1a <__swsetup_r+0x7a>
   83b06:	89a1      	ldrh	r1, [r4, #12]
   83b08:	f401 7020 	and.w	r0, r1, #640	; 0x280
   83b0c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   83b10:	d003      	beq.n	83b1a <__swsetup_r+0x7a>
   83b12:	4628      	mov	r0, r5
   83b14:	4621      	mov	r1, r4
   83b16:	f000 fcf7 	bl	84508 <__smakebuf_r>
   83b1a:	89a3      	ldrh	r3, [r4, #12]
   83b1c:	f013 0201 	ands.w	r2, r3, #1
   83b20:	d005      	beq.n	83b2e <__swsetup_r+0x8e>
   83b22:	6961      	ldr	r1, [r4, #20]
   83b24:	2200      	movs	r2, #0
   83b26:	4248      	negs	r0, r1
   83b28:	60a2      	str	r2, [r4, #8]
   83b2a:	61a0      	str	r0, [r4, #24]
   83b2c:	e007      	b.n	83b3e <__swsetup_r+0x9e>
   83b2e:	f003 0102 	and.w	r1, r3, #2
   83b32:	b208      	sxth	r0, r1
   83b34:	b908      	cbnz	r0, 83b3a <__swsetup_r+0x9a>
   83b36:	6963      	ldr	r3, [r4, #20]
   83b38:	e000      	b.n	83b3c <__swsetup_r+0x9c>
   83b3a:	4613      	mov	r3, r2
   83b3c:	60a3      	str	r3, [r4, #8]
   83b3e:	6923      	ldr	r3, [r4, #16]
   83b40:	b933      	cbnz	r3, 83b50 <__swsetup_r+0xb0>
   83b42:	89a2      	ldrh	r2, [r4, #12]
   83b44:	f002 0180 	and.w	r1, r2, #128	; 0x80
   83b48:	b208      	sxth	r0, r1
   83b4a:	2800      	cmp	r0, #0
   83b4c:	d1bb      	bne.n	83ac6 <__swsetup_r+0x26>
   83b4e:	bd38      	pop	{r3, r4, r5, pc}
   83b50:	2000      	movs	r0, #0
   83b52:	bd38      	pop	{r3, r4, r5, pc}
   83b54:	20070010 	.word	0x20070010

00083b58 <register_fini>:
   83b58:	4b02      	ldr	r3, [pc, #8]	; (83b64 <register_fini+0xc>)
   83b5a:	b113      	cbz	r3, 83b62 <register_fini+0xa>
   83b5c:	4802      	ldr	r0, [pc, #8]	; (83b68 <register_fini+0x10>)
   83b5e:	f000 b805 	b.w	83b6c <atexit>
   83b62:	4770      	bx	lr
   83b64:	00000000 	.word	0x00000000
   83b68:	00082ec5 	.word	0x00082ec5

00083b6c <atexit>:
   83b6c:	4601      	mov	r1, r0
   83b6e:	2000      	movs	r0, #0
   83b70:	4602      	mov	r2, r0
   83b72:	4603      	mov	r3, r0
   83b74:	f7ff b958 	b.w	82e28 <__register_exitproc>

00083b78 <_fflush_r>:
   83b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83b7c:	460c      	mov	r4, r1
   83b7e:	4605      	mov	r5, r0
   83b80:	b118      	cbz	r0, 83b8a <_fflush_r+0x12>
   83b82:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83b84:	b90b      	cbnz	r3, 83b8a <_fflush_r+0x12>
   83b86:	f000 f8e9 	bl	83d5c <__sinit>
   83b8a:	89a2      	ldrh	r2, [r4, #12]
   83b8c:	b332      	cbz	r2, 83bdc <_fflush_r+0x64>
   83b8e:	f002 0008 	and.w	r0, r2, #8
   83b92:	b201      	sxth	r1, r0
   83b94:	2900      	cmp	r1, #0
   83b96:	d162      	bne.n	83c5e <_fflush_r+0xe6>
   83b98:	6861      	ldr	r1, [r4, #4]
   83b9a:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
   83b9e:	2900      	cmp	r1, #0
   83ba0:	81a0      	strh	r0, [r4, #12]
   83ba2:	dc02      	bgt.n	83baa <_fflush_r+0x32>
   83ba4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   83ba6:	2b00      	cmp	r3, #0
   83ba8:	dd18      	ble.n	83bdc <_fflush_r+0x64>
   83baa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   83bac:	b1b6      	cbz	r6, 83bdc <_fflush_r+0x64>
   83bae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   83bb2:	2000      	movs	r0, #0
   83bb4:	b212      	sxth	r2, r2
   83bb6:	682f      	ldr	r7, [r5, #0]
   83bb8:	6028      	str	r0, [r5, #0]
   83bba:	b10a      	cbz	r2, 83bc0 <_fflush_r+0x48>
   83bbc:	6d22      	ldr	r2, [r4, #80]	; 0x50
   83bbe:	e010      	b.n	83be2 <_fflush_r+0x6a>
   83bc0:	2301      	movs	r3, #1
   83bc2:	4628      	mov	r0, r5
   83bc4:	69e1      	ldr	r1, [r4, #28]
   83bc6:	47b0      	blx	r6
   83bc8:	4602      	mov	r2, r0
   83bca:	3001      	adds	r0, #1
   83bcc:	d109      	bne.n	83be2 <_fflush_r+0x6a>
   83bce:	6829      	ldr	r1, [r5, #0]
   83bd0:	b139      	cbz	r1, 83be2 <_fflush_r+0x6a>
   83bd2:	291d      	cmp	r1, #29
   83bd4:	d001      	beq.n	83bda <_fflush_r+0x62>
   83bd6:	2916      	cmp	r1, #22
   83bd8:	d14e      	bne.n	83c78 <_fflush_r+0x100>
   83bda:	602f      	str	r7, [r5, #0]
   83bdc:	2000      	movs	r0, #0
   83bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83be2:	89a6      	ldrh	r6, [r4, #12]
   83be4:	f006 0104 	and.w	r1, r6, #4
   83be8:	b20b      	sxth	r3, r1
   83bea:	b12b      	cbz	r3, 83bf8 <_fflush_r+0x80>
   83bec:	6860      	ldr	r0, [r4, #4]
   83bee:	6b26      	ldr	r6, [r4, #48]	; 0x30
   83bf0:	1a12      	subs	r2, r2, r0
   83bf2:	b10e      	cbz	r6, 83bf8 <_fflush_r+0x80>
   83bf4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   83bf6:	1a52      	subs	r2, r2, r1
   83bf8:	69e1      	ldr	r1, [r4, #28]
   83bfa:	2300      	movs	r3, #0
   83bfc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   83bfe:	4628      	mov	r0, r5
   83c00:	47b0      	blx	r6
   83c02:	1c41      	adds	r1, r0, #1
   83c04:	d105      	bne.n	83c12 <_fflush_r+0x9a>
   83c06:	682a      	ldr	r2, [r5, #0]
   83c08:	b11a      	cbz	r2, 83c12 <_fflush_r+0x9a>
   83c0a:	2a1d      	cmp	r2, #29
   83c0c:	d001      	beq.n	83c12 <_fflush_r+0x9a>
   83c0e:	2a16      	cmp	r2, #22
   83c10:	d11f      	bne.n	83c52 <_fflush_r+0xda>
   83c12:	89a3      	ldrh	r3, [r4, #12]
   83c14:	2100      	movs	r1, #0
   83c16:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
   83c1a:	81a2      	strh	r2, [r4, #12]
   83c1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   83c20:	6922      	ldr	r2, [r4, #16]
   83c22:	6061      	str	r1, [r4, #4]
   83c24:	b219      	sxth	r1, r3
   83c26:	6022      	str	r2, [r4, #0]
   83c28:	b121      	cbz	r1, 83c34 <_fflush_r+0xbc>
   83c2a:	1c42      	adds	r2, r0, #1
   83c2c:	d101      	bne.n	83c32 <_fflush_r+0xba>
   83c2e:	682a      	ldr	r2, [r5, #0]
   83c30:	b902      	cbnz	r2, 83c34 <_fflush_r+0xbc>
   83c32:	6520      	str	r0, [r4, #80]	; 0x50
   83c34:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83c36:	602f      	str	r7, [r5, #0]
   83c38:	2900      	cmp	r1, #0
   83c3a:	d0cf      	beq.n	83bdc <_fflush_r+0x64>
   83c3c:	f104 0040 	add.w	r0, r4, #64	; 0x40
   83c40:	4281      	cmp	r1, r0
   83c42:	d002      	beq.n	83c4a <_fflush_r+0xd2>
   83c44:	4628      	mov	r0, r5
   83c46:	f000 f9c7 	bl	83fd8 <_free_r>
   83c4a:	2000      	movs	r0, #0
   83c4c:	6320      	str	r0, [r4, #48]	; 0x30
   83c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83c52:	89a3      	ldrh	r3, [r4, #12]
   83c54:	f043 0140 	orr.w	r1, r3, #64	; 0x40
   83c58:	81a1      	strh	r1, [r4, #12]
   83c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83c5e:	6926      	ldr	r6, [r4, #16]
   83c60:	2e00      	cmp	r6, #0
   83c62:	d0bb      	beq.n	83bdc <_fflush_r+0x64>
   83c64:	0792      	lsls	r2, r2, #30
   83c66:	6823      	ldr	r3, [r4, #0]
   83c68:	bf0c      	ite	eq
   83c6a:	6962      	ldreq	r2, [r4, #20]
   83c6c:	2200      	movne	r2, #0
   83c6e:	ebc6 0803 	rsb	r8, r6, r3
   83c72:	6026      	str	r6, [r4, #0]
   83c74:	60a2      	str	r2, [r4, #8]
   83c76:	e012      	b.n	83c9e <_fflush_r+0x126>
   83c78:	89a3      	ldrh	r3, [r4, #12]
   83c7a:	f043 0040 	orr.w	r0, r3, #64	; 0x40
   83c7e:	81a0      	strh	r0, [r4, #12]
   83c80:	f04f 30ff 	mov.w	r0, #4294967295
   83c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83c88:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83c8a:	4628      	mov	r0, r5
   83c8c:	69e1      	ldr	r1, [r4, #28]
   83c8e:	4632      	mov	r2, r6
   83c90:	4643      	mov	r3, r8
   83c92:	47b8      	blx	r7
   83c94:	2800      	cmp	r0, #0
   83c96:	ddef      	ble.n	83c78 <_fflush_r+0x100>
   83c98:	1836      	adds	r6, r6, r0
   83c9a:	ebc0 0808 	rsb	r8, r0, r8
   83c9e:	f1b8 0f00 	cmp.w	r8, #0
   83ca2:	dcf1      	bgt.n	83c88 <_fflush_r+0x110>
   83ca4:	e79a      	b.n	83bdc <_fflush_r+0x64>

00083ca6 <fflush>:
   83ca6:	4601      	mov	r1, r0
   83ca8:	b920      	cbnz	r0, 83cb4 <fflush+0xe>
   83caa:	4804      	ldr	r0, [pc, #16]	; (83cbc <fflush+0x16>)
   83cac:	4904      	ldr	r1, [pc, #16]	; (83cc0 <fflush+0x1a>)
   83cae:	6800      	ldr	r0, [r0, #0]
   83cb0:	f000 bbc4 	b.w	8443c <_fwalk_reent>
   83cb4:	4b03      	ldr	r3, [pc, #12]	; (83cc4 <fflush+0x1e>)
   83cb6:	6818      	ldr	r0, [r3, #0]
   83cb8:	f7ff bf5e 	b.w	83b78 <_fflush_r>
   83cbc:	0008564c 	.word	0x0008564c
   83cc0:	00083b79 	.word	0x00083b79
   83cc4:	20070010 	.word	0x20070010

00083cc8 <__fp_lock>:
   83cc8:	2000      	movs	r0, #0
   83cca:	4770      	bx	lr

00083ccc <__fp_unlock>:
   83ccc:	2000      	movs	r0, #0
   83cce:	4770      	bx	lr

00083cd0 <_cleanup_r>:
   83cd0:	4901      	ldr	r1, [pc, #4]	; (83cd8 <_cleanup_r+0x8>)
   83cd2:	f000 bb92 	b.w	843fa <_fwalk>
   83cd6:	bf00      	nop
   83cd8:	00084f6d 	.word	0x00084f6d

00083cdc <std.isra.0>:
   83cdc:	2300      	movs	r3, #0
   83cde:	b510      	push	{r4, lr}
   83ce0:	4604      	mov	r4, r0
   83ce2:	6003      	str	r3, [r0, #0]
   83ce4:	6043      	str	r3, [r0, #4]
   83ce6:	6083      	str	r3, [r0, #8]
   83ce8:	8181      	strh	r1, [r0, #12]
   83cea:	6643      	str	r3, [r0, #100]	; 0x64
   83cec:	81c2      	strh	r2, [r0, #14]
   83cee:	6103      	str	r3, [r0, #16]
   83cf0:	6143      	str	r3, [r0, #20]
   83cf2:	6183      	str	r3, [r0, #24]
   83cf4:	4619      	mov	r1, r3
   83cf6:	2208      	movs	r2, #8
   83cf8:	f100 005c 	add.w	r0, r0, #92	; 0x5c
   83cfc:	f7ff f947 	bl	82f8e <memset>
   83d00:	4804      	ldr	r0, [pc, #16]	; (83d14 <std.isra.0+0x38>)
   83d02:	4905      	ldr	r1, [pc, #20]	; (83d18 <std.isra.0+0x3c>)
   83d04:	4a05      	ldr	r2, [pc, #20]	; (83d1c <std.isra.0+0x40>)
   83d06:	4b06      	ldr	r3, [pc, #24]	; (83d20 <std.isra.0+0x44>)
   83d08:	61e4      	str	r4, [r4, #28]
   83d0a:	6220      	str	r0, [r4, #32]
   83d0c:	6261      	str	r1, [r4, #36]	; 0x24
   83d0e:	62a2      	str	r2, [r4, #40]	; 0x28
   83d10:	62e3      	str	r3, [r4, #44]	; 0x2c
   83d12:	bd10      	pop	{r4, pc}
   83d14:	00084d55 	.word	0x00084d55
   83d18:	00084d7b 	.word	0x00084d7b
   83d1c:	00084db7 	.word	0x00084db7
   83d20:	00084ddb 	.word	0x00084ddb

00083d24 <__sfmoreglue>:
   83d24:	b570      	push	{r4, r5, r6, lr}
   83d26:	2568      	movs	r5, #104	; 0x68
   83d28:	434d      	muls	r5, r1
   83d2a:	460e      	mov	r6, r1
   83d2c:	f105 010c 	add.w	r1, r5, #12
   83d30:	f000 fc66 	bl	84600 <_malloc_r>
   83d34:	4604      	mov	r4, r0
   83d36:	b140      	cbz	r0, 83d4a <__sfmoreglue+0x26>
   83d38:	f100 000c 	add.w	r0, r0, #12
   83d3c:	2100      	movs	r1, #0
   83d3e:	e884 0042 	stmia.w	r4, {r1, r6}
   83d42:	60a0      	str	r0, [r4, #8]
   83d44:	462a      	mov	r2, r5
   83d46:	f7ff f922 	bl	82f8e <memset>
   83d4a:	4620      	mov	r0, r4
   83d4c:	bd70      	pop	{r4, r5, r6, pc}

00083d4e <_cleanup>:
   83d4e:	4b02      	ldr	r3, [pc, #8]	; (83d58 <_cleanup+0xa>)
   83d50:	6818      	ldr	r0, [r3, #0]
   83d52:	f7ff bfbd 	b.w	83cd0 <_cleanup_r>
   83d56:	bf00      	nop
   83d58:	0008564c 	.word	0x0008564c

00083d5c <__sinit>:
   83d5c:	b538      	push	{r3, r4, r5, lr}
   83d5e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83d60:	4604      	mov	r4, r0
   83d62:	b9eb      	cbnz	r3, 83da0 <__sinit+0x44>
   83d64:	4a0f      	ldr	r2, [pc, #60]	; (83da4 <__sinit+0x48>)
   83d66:	2501      	movs	r5, #1
   83d68:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
   83d6c:	63c2      	str	r2, [r0, #60]	; 0x3c
   83d6e:	6385      	str	r5, [r0, #56]	; 0x38
   83d70:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
   83d74:	2003      	movs	r0, #3
   83d76:	461a      	mov	r2, r3
   83d78:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   83d7c:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
   83d80:	6860      	ldr	r0, [r4, #4]
   83d82:	2104      	movs	r1, #4
   83d84:	f7ff ffaa 	bl	83cdc <std.isra.0>
   83d88:	68a0      	ldr	r0, [r4, #8]
   83d8a:	2109      	movs	r1, #9
   83d8c:	462a      	mov	r2, r5
   83d8e:	f7ff ffa5 	bl	83cdc <std.isra.0>
   83d92:	68e0      	ldr	r0, [r4, #12]
   83d94:	2112      	movs	r1, #18
   83d96:	2202      	movs	r2, #2
   83d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83d9c:	f7ff bf9e 	b.w	83cdc <std.isra.0>
   83da0:	bd38      	pop	{r3, r4, r5, pc}
   83da2:	bf00      	nop
   83da4:	00083cd1 	.word	0x00083cd1

00083da8 <__sfp>:
   83da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83daa:	4b1d      	ldr	r3, [pc, #116]	; (83e20 <__sfp+0x78>)
   83dac:	4607      	mov	r7, r0
   83dae:	681e      	ldr	r6, [r3, #0]
   83db0:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   83db2:	b910      	cbnz	r0, 83dba <__sfp+0x12>
   83db4:	4630      	mov	r0, r6
   83db6:	f7ff ffd1 	bl	83d5c <__sinit>
   83dba:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
   83dbe:	68b4      	ldr	r4, [r6, #8]
   83dc0:	6871      	ldr	r1, [r6, #4]
   83dc2:	3901      	subs	r1, #1
   83dc4:	d404      	bmi.n	83dd0 <__sfp+0x28>
   83dc6:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   83dca:	b185      	cbz	r5, 83dee <__sfp+0x46>
   83dcc:	3468      	adds	r4, #104	; 0x68
   83dce:	e7f8      	b.n	83dc2 <__sfp+0x1a>
   83dd0:	6832      	ldr	r2, [r6, #0]
   83dd2:	b10a      	cbz	r2, 83dd8 <__sfp+0x30>
   83dd4:	6836      	ldr	r6, [r6, #0]
   83dd6:	e7f2      	b.n	83dbe <__sfp+0x16>
   83dd8:	4638      	mov	r0, r7
   83dda:	2104      	movs	r1, #4
   83ddc:	f7ff ffa2 	bl	83d24 <__sfmoreglue>
   83de0:	6030      	str	r0, [r6, #0]
   83de2:	2800      	cmp	r0, #0
   83de4:	d1f6      	bne.n	83dd4 <__sfp+0x2c>
   83de6:	240c      	movs	r4, #12
   83de8:	603c      	str	r4, [r7, #0]
   83dea:	4604      	mov	r4, r0
   83dec:	e015      	b.n	83e1a <__sfp+0x72>
   83dee:	f64f 73ff 	movw	r3, #65535	; 0xffff
   83df2:	2001      	movs	r0, #1
   83df4:	81a0      	strh	r0, [r4, #12]
   83df6:	81e3      	strh	r3, [r4, #14]
   83df8:	6665      	str	r5, [r4, #100]	; 0x64
   83dfa:	6025      	str	r5, [r4, #0]
   83dfc:	60a5      	str	r5, [r4, #8]
   83dfe:	6065      	str	r5, [r4, #4]
   83e00:	6125      	str	r5, [r4, #16]
   83e02:	6165      	str	r5, [r4, #20]
   83e04:	61a5      	str	r5, [r4, #24]
   83e06:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   83e0a:	4629      	mov	r1, r5
   83e0c:	2208      	movs	r2, #8
   83e0e:	f7ff f8be 	bl	82f8e <memset>
   83e12:	6325      	str	r5, [r4, #48]	; 0x30
   83e14:	6365      	str	r5, [r4, #52]	; 0x34
   83e16:	6465      	str	r5, [r4, #68]	; 0x44
   83e18:	64a5      	str	r5, [r4, #72]	; 0x48
   83e1a:	4620      	mov	r0, r4
   83e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83e1e:	bf00      	nop
   83e20:	0008564c 	.word	0x0008564c

00083e24 <__sfp_lock_acquire>:
   83e24:	4770      	bx	lr

00083e26 <__sfp_lock_release>:
   83e26:	4770      	bx	lr

00083e28 <__sinit_lock_acquire>:
   83e28:	4770      	bx	lr

00083e2a <__sinit_lock_release>:
   83e2a:	4770      	bx	lr

00083e2c <__fp_lock_all>:
   83e2c:	4b02      	ldr	r3, [pc, #8]	; (83e38 <__fp_lock_all+0xc>)
   83e2e:	4903      	ldr	r1, [pc, #12]	; (83e3c <__fp_lock_all+0x10>)
   83e30:	6818      	ldr	r0, [r3, #0]
   83e32:	f000 bae2 	b.w	843fa <_fwalk>
   83e36:	bf00      	nop
   83e38:	20070010 	.word	0x20070010
   83e3c:	00083cc9 	.word	0x00083cc9

00083e40 <__fp_unlock_all>:
   83e40:	4b02      	ldr	r3, [pc, #8]	; (83e4c <__fp_unlock_all+0xc>)
   83e42:	4903      	ldr	r1, [pc, #12]	; (83e50 <__fp_unlock_all+0x10>)
   83e44:	6818      	ldr	r0, [r3, #0]
   83e46:	f000 bad8 	b.w	843fa <_fwalk>
   83e4a:	bf00      	nop
   83e4c:	20070010 	.word	0x20070010
   83e50:	00083ccd 	.word	0x00083ccd

00083e54 <_fputwc_r>:
   83e54:	8993      	ldrh	r3, [r2, #12]
   83e56:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   83e5a:	4614      	mov	r4, r2
   83e5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
   83e60:	4680      	mov	r8, r0
   83e62:	b210      	sxth	r0, r2
   83e64:	460e      	mov	r6, r1
   83e66:	b930      	cbnz	r0, 83e76 <_fputwc_r+0x22>
   83e68:	6e67      	ldr	r7, [r4, #100]	; 0x64
   83e6a:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
   83e6e:	f447 5300 	orr.w	r3, r7, #8192	; 0x2000
   83e72:	81a1      	strh	r1, [r4, #12]
   83e74:	6663      	str	r3, [r4, #100]	; 0x64
   83e76:	f000 fb29 	bl	844cc <__locale_mb_cur_max>
   83e7a:	2801      	cmp	r0, #1
   83e7c:	d106      	bne.n	83e8c <_fputwc_r+0x38>
   83e7e:	b12e      	cbz	r6, 83e8c <_fputwc_r+0x38>
   83e80:	2eff      	cmp	r6, #255	; 0xff
   83e82:	d803      	bhi.n	83e8c <_fputwc_r+0x38>
   83e84:	f88d 6004 	strb.w	r6, [sp, #4]
   83e88:	4607      	mov	r7, r0
   83e8a:	e00f      	b.n	83eac <_fputwc_r+0x58>
   83e8c:	4632      	mov	r2, r6
   83e8e:	4640      	mov	r0, r8
   83e90:	a901      	add	r1, sp, #4
   83e92:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   83e96:	f000 ffaf 	bl	84df8 <_wcrtomb_r>
   83e9a:	1c42      	adds	r2, r0, #1
   83e9c:	4607      	mov	r7, r0
   83e9e:	d105      	bne.n	83eac <_fputwc_r+0x58>
   83ea0:	89a2      	ldrh	r2, [r4, #12]
   83ea2:	f042 0040 	orr.w	r0, r2, #64	; 0x40
   83ea6:	81a0      	strh	r0, [r4, #12]
   83ea8:	4638      	mov	r0, r7
   83eaa:	e031      	b.n	83f10 <_fputwc_r+0xbc>
   83eac:	2500      	movs	r5, #0
   83eae:	42bd      	cmp	r5, r7
   83eb0:	d02a      	beq.n	83f08 <_fputwc_r+0xb4>
   83eb2:	68a1      	ldr	r1, [r4, #8]
   83eb4:	ab01      	add	r3, sp, #4
   83eb6:	1e4a      	subs	r2, r1, #1
   83eb8:	2a00      	cmp	r2, #0
   83eba:	60a2      	str	r2, [r4, #8]
   83ebc:	da1a      	bge.n	83ef4 <_fputwc_r+0xa0>
   83ebe:	69a0      	ldr	r0, [r4, #24]
   83ec0:	4282      	cmp	r2, r0
   83ec2:	db0c      	blt.n	83ede <_fputwc_r+0x8a>
   83ec4:	6821      	ldr	r1, [r4, #0]
   83ec6:	5d5a      	ldrb	r2, [r3, r5]
   83ec8:	700a      	strb	r2, [r1, #0]
   83eca:	6823      	ldr	r3, [r4, #0]
   83ecc:	7819      	ldrb	r1, [r3, #0]
   83ece:	290a      	cmp	r1, #10
   83ed0:	d003      	beq.n	83eda <_fputwc_r+0x86>
   83ed2:	3301      	adds	r3, #1
   83ed4:	2200      	movs	r2, #0
   83ed6:	6023      	str	r3, [r4, #0]
   83ed8:	e013      	b.n	83f02 <_fputwc_r+0xae>
   83eda:	4640      	mov	r0, r8
   83edc:	e001      	b.n	83ee2 <_fputwc_r+0x8e>
   83ede:	5d59      	ldrb	r1, [r3, r5]
   83ee0:	4640      	mov	r0, r8
   83ee2:	4622      	mov	r2, r4
   83ee4:	f7ff fd82 	bl	839ec <__swbuf_r>
   83ee8:	f1b0 31ff 	subs.w	r1, r0, #4294967295
   83eec:	4248      	negs	r0, r1
   83eee:	eb50 0201 	adcs.w	r2, r0, r1
   83ef2:	e006      	b.n	83f02 <_fputwc_r+0xae>
   83ef4:	6820      	ldr	r0, [r4, #0]
   83ef6:	5d59      	ldrb	r1, [r3, r5]
   83ef8:	7001      	strb	r1, [r0, #0]
   83efa:	6822      	ldr	r2, [r4, #0]
   83efc:	1c53      	adds	r3, r2, #1
   83efe:	6023      	str	r3, [r4, #0]
   83f00:	e000      	b.n	83f04 <_fputwc_r+0xb0>
   83f02:	b91a      	cbnz	r2, 83f0c <_fputwc_r+0xb8>
   83f04:	3501      	adds	r5, #1
   83f06:	e7d2      	b.n	83eae <_fputwc_r+0x5a>
   83f08:	4630      	mov	r0, r6
   83f0a:	e001      	b.n	83f10 <_fputwc_r+0xbc>
   83f0c:	f04f 30ff 	mov.w	r0, #4294967295
   83f10:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

00083f14 <fputwc>:
   83f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83f16:	4c08      	ldr	r4, [pc, #32]	; (83f38 <fputwc+0x24>)
   83f18:	4607      	mov	r7, r0
   83f1a:	6820      	ldr	r0, [r4, #0]
   83f1c:	460e      	mov	r6, r1
   83f1e:	b118      	cbz	r0, 83f28 <fputwc+0x14>
   83f20:	6b85      	ldr	r5, [r0, #56]	; 0x38
   83f22:	b90d      	cbnz	r5, 83f28 <fputwc+0x14>
   83f24:	f7ff ff1a 	bl	83d5c <__sinit>
   83f28:	6820      	ldr	r0, [r4, #0]
   83f2a:	4639      	mov	r1, r7
   83f2c:	4632      	mov	r2, r6
   83f2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   83f32:	f7ff bf8f 	b.w	83e54 <_fputwc_r>
   83f36:	bf00      	nop
   83f38:	20070010 	.word	0x20070010

00083f3c <_malloc_trim_r>:
   83f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83f3e:	4d23      	ldr	r5, [pc, #140]	; (83fcc <_malloc_trim_r+0x90>)
   83f40:	460e      	mov	r6, r1
   83f42:	4604      	mov	r4, r0
   83f44:	f000 fd86 	bl	84a54 <__malloc_lock>
   83f48:	68ab      	ldr	r3, [r5, #8]
   83f4a:	685f      	ldr	r7, [r3, #4]
   83f4c:	f027 0703 	bic.w	r7, r7, #3
   83f50:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
   83f54:	1b81      	subs	r1, r0, r6
   83f56:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   83f5a:	f022 060f 	bic.w	r6, r2, #15
   83f5e:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   83f62:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   83f66:	da04      	bge.n	83f72 <_malloc_trim_r+0x36>
   83f68:	4620      	mov	r0, r4
   83f6a:	f000 fd74 	bl	84a56 <__malloc_unlock>
   83f6e:	2000      	movs	r0, #0
   83f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83f72:	2100      	movs	r1, #0
   83f74:	4620      	mov	r0, r4
   83f76:	f000 fedd 	bl	84d34 <_sbrk_r>
   83f7a:	68ab      	ldr	r3, [r5, #8]
   83f7c:	19d9      	adds	r1, r3, r7
   83f7e:	4288      	cmp	r0, r1
   83f80:	d1f2      	bne.n	83f68 <_malloc_trim_r+0x2c>
   83f82:	4271      	negs	r1, r6
   83f84:	4620      	mov	r0, r4
   83f86:	f000 fed5 	bl	84d34 <_sbrk_r>
   83f8a:	3001      	adds	r0, #1
   83f8c:	d110      	bne.n	83fb0 <_malloc_trim_r+0x74>
   83f8e:	2100      	movs	r1, #0
   83f90:	4620      	mov	r0, r4
   83f92:	f000 fecf 	bl	84d34 <_sbrk_r>
   83f96:	68ab      	ldr	r3, [r5, #8]
   83f98:	1ac2      	subs	r2, r0, r3
   83f9a:	2a0f      	cmp	r2, #15
   83f9c:	dde4      	ble.n	83f68 <_malloc_trim_r+0x2c>
   83f9e:	490c      	ldr	r1, [pc, #48]	; (83fd0 <_malloc_trim_r+0x94>)
   83fa0:	f042 0201 	orr.w	r2, r2, #1
   83fa4:	6809      	ldr	r1, [r1, #0]
   83fa6:	605a      	str	r2, [r3, #4]
   83fa8:	1a40      	subs	r0, r0, r1
   83faa:	490a      	ldr	r1, [pc, #40]	; (83fd4 <_malloc_trim_r+0x98>)
   83fac:	6008      	str	r0, [r1, #0]
   83fae:	e7db      	b.n	83f68 <_malloc_trim_r+0x2c>
   83fb0:	4b08      	ldr	r3, [pc, #32]	; (83fd4 <_malloc_trim_r+0x98>)
   83fb2:	68a8      	ldr	r0, [r5, #8]
   83fb4:	681a      	ldr	r2, [r3, #0]
   83fb6:	1bbf      	subs	r7, r7, r6
   83fb8:	f047 0701 	orr.w	r7, r7, #1
   83fbc:	6047      	str	r7, [r0, #4]
   83fbe:	1b96      	subs	r6, r2, r6
   83fc0:	4620      	mov	r0, r4
   83fc2:	601e      	str	r6, [r3, #0]
   83fc4:	f000 fd47 	bl	84a56 <__malloc_unlock>
   83fc8:	2001      	movs	r0, #1
   83fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83fcc:	200704bc 	.word	0x200704bc
   83fd0:	200708c4 	.word	0x200708c4
   83fd4:	20078b10 	.word	0x20078b10

00083fd8 <_free_r>:
   83fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83fda:	4606      	mov	r6, r0
   83fdc:	460d      	mov	r5, r1
   83fde:	2900      	cmp	r1, #0
   83fe0:	f000 80a6 	beq.w	84130 <_free_r+0x158>
   83fe4:	f000 fd36 	bl	84a54 <__malloc_lock>
   83fe8:	f855 cc04 	ldr.w	ip, [r5, #-4]
   83fec:	4f51      	ldr	r7, [pc, #324]	; (84134 <_free_r+0x15c>)
   83fee:	f1a5 0308 	sub.w	r3, r5, #8
   83ff2:	f02c 0201 	bic.w	r2, ip, #1
   83ff6:	189c      	adds	r4, r3, r2
   83ff8:	68b9      	ldr	r1, [r7, #8]
   83ffa:	6860      	ldr	r0, [r4, #4]
   83ffc:	428c      	cmp	r4, r1
   83ffe:	f020 0003 	bic.w	r0, r0, #3
   84002:	f00c 0101 	and.w	r1, ip, #1
   84006:	d11c      	bne.n	84042 <_free_r+0x6a>
   84008:	1882      	adds	r2, r0, r2
   8400a:	b939      	cbnz	r1, 8401c <_free_r+0x44>
   8400c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   84010:	1a5b      	subs	r3, r3, r1
   84012:	6898      	ldr	r0, [r3, #8]
   84014:	1852      	adds	r2, r2, r1
   84016:	68d9      	ldr	r1, [r3, #12]
   84018:	60c1      	str	r1, [r0, #12]
   8401a:	6088      	str	r0, [r1, #8]
   8401c:	4845      	ldr	r0, [pc, #276]	; (84134 <_free_r+0x15c>)
   8401e:	f042 0101 	orr.w	r1, r2, #1
   84022:	6059      	str	r1, [r3, #4]
   84024:	6083      	str	r3, [r0, #8]
   84026:	4b44      	ldr	r3, [pc, #272]	; (84138 <_free_r+0x160>)
   84028:	6819      	ldr	r1, [r3, #0]
   8402a:	428a      	cmp	r2, r1
   8402c:	d304      	bcc.n	84038 <_free_r+0x60>
   8402e:	4a43      	ldr	r2, [pc, #268]	; (8413c <_free_r+0x164>)
   84030:	4630      	mov	r0, r6
   84032:	6811      	ldr	r1, [r2, #0]
   84034:	f7ff ff82 	bl	83f3c <_malloc_trim_r>
   84038:	4630      	mov	r0, r6
   8403a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8403e:	f000 bd0a 	b.w	84a56 <__malloc_unlock>
   84042:	6060      	str	r0, [r4, #4]
   84044:	b959      	cbnz	r1, 8405e <_free_r+0x86>
   84046:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8404a:	3708      	adds	r7, #8
   8404c:	1b5b      	subs	r3, r3, r5
   8404e:	1952      	adds	r2, r2, r5
   84050:	689d      	ldr	r5, [r3, #8]
   84052:	42bd      	cmp	r5, r7
   84054:	d005      	beq.n	84062 <_free_r+0x8a>
   84056:	68df      	ldr	r7, [r3, #12]
   84058:	60ef      	str	r7, [r5, #12]
   8405a:	60bd      	str	r5, [r7, #8]
   8405c:	e002      	b.n	84064 <_free_r+0x8c>
   8405e:	2100      	movs	r1, #0
   84060:	e000      	b.n	84064 <_free_r+0x8c>
   84062:	2101      	movs	r1, #1
   84064:	1825      	adds	r5, r4, r0
   84066:	686d      	ldr	r5, [r5, #4]
   84068:	f015 0f01 	tst.w	r5, #1
   8406c:	d10f      	bne.n	8408e <_free_r+0xb6>
   8406e:	1812      	adds	r2, r2, r0
   84070:	b949      	cbnz	r1, 84086 <_free_r+0xae>
   84072:	68a0      	ldr	r0, [r4, #8]
   84074:	4d32      	ldr	r5, [pc, #200]	; (84140 <_free_r+0x168>)
   84076:	42a8      	cmp	r0, r5
   84078:	d105      	bne.n	84086 <_free_r+0xae>
   8407a:	60eb      	str	r3, [r5, #12]
   8407c:	60ab      	str	r3, [r5, #8]
   8407e:	60d8      	str	r0, [r3, #12]
   84080:	6098      	str	r0, [r3, #8]
   84082:	2101      	movs	r1, #1
   84084:	e003      	b.n	8408e <_free_r+0xb6>
   84086:	68e0      	ldr	r0, [r4, #12]
   84088:	68a4      	ldr	r4, [r4, #8]
   8408a:	60e0      	str	r0, [r4, #12]
   8408c:	6084      	str	r4, [r0, #8]
   8408e:	f042 0001 	orr.w	r0, r2, #1
   84092:	6058      	str	r0, [r3, #4]
   84094:	509a      	str	r2, [r3, r2]
   84096:	2900      	cmp	r1, #0
   84098:	d1ce      	bne.n	84038 <_free_r+0x60>
   8409a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8409e:	d20c      	bcs.n	840ba <_free_r+0xe2>
   840a0:	08d2      	lsrs	r2, r2, #3
   840a2:	1090      	asrs	r0, r2, #2
   840a4:	2401      	movs	r4, #1
   840a6:	fa04 f400 	lsl.w	r4, r4, r0
   840aa:	4922      	ldr	r1, [pc, #136]	; (84134 <_free_r+0x15c>)
   840ac:	6848      	ldr	r0, [r1, #4]
   840ae:	4320      	orrs	r0, r4
   840b0:	6048      	str	r0, [r1, #4]
   840b2:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   840b6:	6881      	ldr	r1, [r0, #8]
   840b8:	e035      	b.n	84126 <_free_r+0x14e>
   840ba:	0a54      	lsrs	r4, r2, #9
   840bc:	2c04      	cmp	r4, #4
   840be:	d802      	bhi.n	840c6 <_free_r+0xee>
   840c0:	0994      	lsrs	r4, r2, #6
   840c2:	3438      	adds	r4, #56	; 0x38
   840c4:	e016      	b.n	840f4 <_free_r+0x11c>
   840c6:	2c14      	cmp	r4, #20
   840c8:	d801      	bhi.n	840ce <_free_r+0xf6>
   840ca:	345b      	adds	r4, #91	; 0x5b
   840cc:	e012      	b.n	840f4 <_free_r+0x11c>
   840ce:	2c54      	cmp	r4, #84	; 0x54
   840d0:	d802      	bhi.n	840d8 <_free_r+0x100>
   840d2:	0b14      	lsrs	r4, r2, #12
   840d4:	346e      	adds	r4, #110	; 0x6e
   840d6:	e00d      	b.n	840f4 <_free_r+0x11c>
   840d8:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
   840dc:	d802      	bhi.n	840e4 <_free_r+0x10c>
   840de:	0bd4      	lsrs	r4, r2, #15
   840e0:	3477      	adds	r4, #119	; 0x77
   840e2:	e007      	b.n	840f4 <_free_r+0x11c>
   840e4:	f240 5554 	movw	r5, #1364	; 0x554
   840e8:	42ac      	cmp	r4, r5
   840ea:	d802      	bhi.n	840f2 <_free_r+0x11a>
   840ec:	0c94      	lsrs	r4, r2, #18
   840ee:	347c      	adds	r4, #124	; 0x7c
   840f0:	e000      	b.n	840f4 <_free_r+0x11c>
   840f2:	247e      	movs	r4, #126	; 0x7e
   840f4:	4d0f      	ldr	r5, [pc, #60]	; (84134 <_free_r+0x15c>)
   840f6:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   840fa:	6881      	ldr	r1, [r0, #8]
   840fc:	4281      	cmp	r1, r0
   840fe:	d10c      	bne.n	8411a <_free_r+0x142>
   84100:	2201      	movs	r2, #1
   84102:	10a4      	asrs	r4, r4, #2
   84104:	fa02 f404 	lsl.w	r4, r2, r4
   84108:	6868      	ldr	r0, [r5, #4]
   8410a:	ea44 0200 	orr.w	r2, r4, r0
   8410e:	606a      	str	r2, [r5, #4]
   84110:	4608      	mov	r0, r1
   84112:	e008      	b.n	84126 <_free_r+0x14e>
   84114:	6889      	ldr	r1, [r1, #8]
   84116:	4281      	cmp	r1, r0
   84118:	d004      	beq.n	84124 <_free_r+0x14c>
   8411a:	684c      	ldr	r4, [r1, #4]
   8411c:	f024 0403 	bic.w	r4, r4, #3
   84120:	42a2      	cmp	r2, r4
   84122:	d3f7      	bcc.n	84114 <_free_r+0x13c>
   84124:	68c8      	ldr	r0, [r1, #12]
   84126:	60d8      	str	r0, [r3, #12]
   84128:	6099      	str	r1, [r3, #8]
   8412a:	6083      	str	r3, [r0, #8]
   8412c:	60cb      	str	r3, [r1, #12]
   8412e:	e783      	b.n	84038 <_free_r+0x60>
   84130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84132:	bf00      	nop
   84134:	200704bc 	.word	0x200704bc
   84138:	200708c8 	.word	0x200708c8
   8413c:	20078b0c 	.word	0x20078b0c
   84140:	200704c4 	.word	0x200704c4

00084144 <__sfvwrite_r>:
   84144:	6893      	ldr	r3, [r2, #8]
   84146:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8414a:	4606      	mov	r6, r0
   8414c:	460c      	mov	r4, r1
   8414e:	4691      	mov	r9, r2
   84150:	b90b      	cbnz	r3, 84156 <__sfvwrite_r+0x12>
   84152:	2000      	movs	r0, #0
   84154:	e14f      	b.n	843f6 <__sfvwrite_r+0x2b2>
   84156:	8988      	ldrh	r0, [r1, #12]
   84158:	f000 0108 	and.w	r1, r0, #8
   8415c:	b20a      	sxth	r2, r1
   8415e:	b10a      	cbz	r2, 84164 <__sfvwrite_r+0x20>
   84160:	6923      	ldr	r3, [r4, #16]
   84162:	b95b      	cbnz	r3, 8417c <__sfvwrite_r+0x38>
   84164:	4630      	mov	r0, r6
   84166:	4621      	mov	r1, r4
   84168:	f7ff fc9a 	bl	83aa0 <__swsetup_r>
   8416c:	b130      	cbz	r0, 8417c <__sfvwrite_r+0x38>
   8416e:	89a1      	ldrh	r1, [r4, #12]
   84170:	2209      	movs	r2, #9
   84172:	f041 0040 	orr.w	r0, r1, #64	; 0x40
   84176:	81a0      	strh	r0, [r4, #12]
   84178:	6032      	str	r2, [r6, #0]
   8417a:	e13a      	b.n	843f2 <__sfvwrite_r+0x2ae>
   8417c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
   84180:	f8d9 8000 	ldr.w	r8, [r9]
   84184:	f00a 0c02 	and.w	ip, sl, #2
   84188:	fa0f f58c 	sxth.w	r5, ip
   8418c:	b315      	cbz	r5, 841d4 <__sfvwrite_r+0x90>
   8418e:	f04f 0a00 	mov.w	sl, #0
   84192:	4657      	mov	r7, sl
   84194:	b937      	cbnz	r7, 841a4 <__sfvwrite_r+0x60>
   84196:	f8d8 a000 	ldr.w	sl, [r8]
   8419a:	f8d8 7004 	ldr.w	r7, [r8, #4]
   8419e:	f108 0808 	add.w	r8, r8, #8
   841a2:	e7f7      	b.n	84194 <__sfvwrite_r+0x50>
   841a4:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   841a8:	bf34      	ite	cc
   841aa:	463b      	movcc	r3, r7
   841ac:	f44f 6380 	movcs.w	r3, #1024	; 0x400
   841b0:	4630      	mov	r0, r6
   841b2:	69e1      	ldr	r1, [r4, #28]
   841b4:	4652      	mov	r2, sl
   841b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
   841b8:	47a8      	blx	r5
   841ba:	2800      	cmp	r0, #0
   841bc:	f340 8115 	ble.w	843ea <__sfvwrite_r+0x2a6>
   841c0:	f8d9 1008 	ldr.w	r1, [r9, #8]
   841c4:	4482      	add	sl, r0
   841c6:	1a3f      	subs	r7, r7, r0
   841c8:	1a08      	subs	r0, r1, r0
   841ca:	f8c9 0008 	str.w	r0, [r9, #8]
   841ce:	2800      	cmp	r0, #0
   841d0:	d1e0      	bne.n	84194 <__sfvwrite_r+0x50>
   841d2:	e7be      	b.n	84152 <__sfvwrite_r+0xe>
   841d4:	f01a 0a01 	ands.w	sl, sl, #1
   841d8:	d004      	beq.n	841e4 <__sfvwrite_r+0xa0>
   841da:	46ab      	mov	fp, r5
   841dc:	9501      	str	r5, [sp, #4]
   841de:	462f      	mov	r7, r5
   841e0:	46aa      	mov	sl, r5
   841e2:	e0c7      	b.n	84374 <__sfvwrite_r+0x230>
   841e4:	4655      	mov	r5, sl
   841e6:	b935      	cbnz	r5, 841f6 <__sfvwrite_r+0xb2>
   841e8:	f8d8 a000 	ldr.w	sl, [r8]
   841ec:	f8d8 5004 	ldr.w	r5, [r8, #4]
   841f0:	f108 0808 	add.w	r8, r8, #8
   841f4:	e7f7      	b.n	841e6 <__sfvwrite_r+0xa2>
   841f6:	89a2      	ldrh	r2, [r4, #12]
   841f8:	f8d4 b008 	ldr.w	fp, [r4, #8]
   841fc:	f402 7000 	and.w	r0, r2, #512	; 0x200
   84200:	b203      	sxth	r3, r0
   84202:	2b00      	cmp	r3, #0
   84204:	d052      	beq.n	842ac <__sfvwrite_r+0x168>
   84206:	455d      	cmp	r5, fp
   84208:	d340      	bcc.n	8428c <__sfvwrite_r+0x148>
   8420a:	f412 6f90 	tst.w	r2, #1152	; 0x480
   8420e:	d03b      	beq.n	84288 <__sfvwrite_r+0x144>
   84210:	6963      	ldr	r3, [r4, #20]
   84212:	f04f 0b03 	mov.w	fp, #3
   84216:	fb0b f303 	mul.w	r3, fp, r3
   8421a:	6921      	ldr	r1, [r4, #16]
   8421c:	6827      	ldr	r7, [r4, #0]
   8421e:	2002      	movs	r0, #2
   84220:	1a7f      	subs	r7, r7, r1
   84222:	fb93 fcf0 	sdiv	ip, r3, r0
   84226:	1c7b      	adds	r3, r7, #1
   84228:	1958      	adds	r0, r3, r5
   8422a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   8422e:	4584      	cmp	ip, r0
   84230:	bf28      	it	cs
   84232:	4660      	movcs	r0, ip
   84234:	b213      	sxth	r3, r2
   84236:	9001      	str	r0, [sp, #4]
   84238:	4630      	mov	r0, r6
   8423a:	b17b      	cbz	r3, 8425c <__sfvwrite_r+0x118>
   8423c:	9901      	ldr	r1, [sp, #4]
   8423e:	f000 f9df 	bl	84600 <_malloc_r>
   84242:	4683      	mov	fp, r0
   84244:	b198      	cbz	r0, 8426e <__sfvwrite_r+0x12a>
   84246:	6921      	ldr	r1, [r4, #16]
   84248:	463a      	mov	r2, r7
   8424a:	f7fe fe97 	bl	82f7c <memcpy>
   8424e:	89a1      	ldrh	r1, [r4, #12]
   84250:	f421 6090 	bic.w	r0, r1, #1152	; 0x480
   84254:	f040 0280 	orr.w	r2, r0, #128	; 0x80
   84258:	81a2      	strh	r2, [r4, #12]
   8425a:	e00b      	b.n	84274 <__sfvwrite_r+0x130>
   8425c:	9a01      	ldr	r2, [sp, #4]
   8425e:	f000 fbfb 	bl	84a58 <_realloc_r>
   84262:	4683      	mov	fp, r0
   84264:	b930      	cbnz	r0, 84274 <__sfvwrite_r+0x130>
   84266:	4630      	mov	r0, r6
   84268:	6921      	ldr	r1, [r4, #16]
   8426a:	f7ff feb5 	bl	83fd8 <_free_r>
   8426e:	230c      	movs	r3, #12
   84270:	6033      	str	r3, [r6, #0]
   84272:	e0ba      	b.n	843ea <__sfvwrite_r+0x2a6>
   84274:	9901      	ldr	r1, [sp, #4]
   84276:	eb0b 0307 	add.w	r3, fp, r7
   8427a:	1bcf      	subs	r7, r1, r7
   8427c:	f8c4 b010 	str.w	fp, [r4, #16]
   84280:	6023      	str	r3, [r4, #0]
   84282:	6161      	str	r1, [r4, #20]
   84284:	46ab      	mov	fp, r5
   84286:	60a7      	str	r7, [r4, #8]
   84288:	455d      	cmp	r5, fp
   8428a:	d200      	bcs.n	8428e <__sfvwrite_r+0x14a>
   8428c:	46ab      	mov	fp, r5
   8428e:	465a      	mov	r2, fp
   84290:	4651      	mov	r1, sl
   84292:	6820      	ldr	r0, [r4, #0]
   84294:	f000 fbc4 	bl	84a20 <memmove>
   84298:	68a0      	ldr	r0, [r4, #8]
   8429a:	6823      	ldr	r3, [r4, #0]
   8429c:	ebcb 0200 	rsb	r2, fp, r0
   842a0:	eb03 010b 	add.w	r1, r3, fp
   842a4:	60a2      	str	r2, [r4, #8]
   842a6:	6021      	str	r1, [r4, #0]
   842a8:	46ab      	mov	fp, r5
   842aa:	e02a      	b.n	84302 <__sfvwrite_r+0x1be>
   842ac:	6820      	ldr	r0, [r4, #0]
   842ae:	6921      	ldr	r1, [r4, #16]
   842b0:	4288      	cmp	r0, r1
   842b2:	d90f      	bls.n	842d4 <__sfvwrite_r+0x190>
   842b4:	455d      	cmp	r5, fp
   842b6:	d90d      	bls.n	842d4 <__sfvwrite_r+0x190>
   842b8:	4651      	mov	r1, sl
   842ba:	465a      	mov	r2, fp
   842bc:	f000 fbb0 	bl	84a20 <memmove>
   842c0:	6822      	ldr	r2, [r4, #0]
   842c2:	4621      	mov	r1, r4
   842c4:	eb02 000b 	add.w	r0, r2, fp
   842c8:	6020      	str	r0, [r4, #0]
   842ca:	4630      	mov	r0, r6
   842cc:	f7ff fc54 	bl	83b78 <_fflush_r>
   842d0:	b1b8      	cbz	r0, 84302 <__sfvwrite_r+0x1be>
   842d2:	e08a      	b.n	843ea <__sfvwrite_r+0x2a6>
   842d4:	6963      	ldr	r3, [r4, #20]
   842d6:	429d      	cmp	r5, r3
   842d8:	d308      	bcc.n	842ec <__sfvwrite_r+0x1a8>
   842da:	6a67      	ldr	r7, [r4, #36]	; 0x24
   842dc:	4630      	mov	r0, r6
   842de:	69e1      	ldr	r1, [r4, #28]
   842e0:	4652      	mov	r2, sl
   842e2:	47b8      	blx	r7
   842e4:	f1b0 0b00 	subs.w	fp, r0, #0
   842e8:	dc0b      	bgt.n	84302 <__sfvwrite_r+0x1be>
   842ea:	e07e      	b.n	843ea <__sfvwrite_r+0x2a6>
   842ec:	4651      	mov	r1, sl
   842ee:	462a      	mov	r2, r5
   842f0:	f000 fb96 	bl	84a20 <memmove>
   842f4:	68a2      	ldr	r2, [r4, #8]
   842f6:	6823      	ldr	r3, [r4, #0]
   842f8:	1b50      	subs	r0, r2, r5
   842fa:	1959      	adds	r1, r3, r5
   842fc:	46ab      	mov	fp, r5
   842fe:	60a0      	str	r0, [r4, #8]
   84300:	6021      	str	r1, [r4, #0]
   84302:	f8d9 0008 	ldr.w	r0, [r9, #8]
   84306:	44da      	add	sl, fp
   84308:	ebcb 0200 	rsb	r2, fp, r0
   8430c:	ebcb 0505 	rsb	r5, fp, r5
   84310:	f8c9 2008 	str.w	r2, [r9, #8]
   84314:	2a00      	cmp	r2, #0
   84316:	f47f af66 	bne.w	841e6 <__sfvwrite_r+0xa2>
   8431a:	e71a      	b.n	84152 <__sfvwrite_r+0xe>
   8431c:	9801      	ldr	r0, [sp, #4]
   8431e:	2800      	cmp	r0, #0
   84320:	d032      	beq.n	84388 <__sfvwrite_r+0x244>
   84322:	6820      	ldr	r0, [r4, #0]
   84324:	6921      	ldr	r1, [r4, #16]
   84326:	45d3      	cmp	fp, sl
   84328:	bf34      	ite	cc
   8432a:	465b      	movcc	r3, fp
   8432c:	4653      	movcs	r3, sl
   8432e:	4288      	cmp	r0, r1
   84330:	68a5      	ldr	r5, [r4, #8]
   84332:	f8d4 e014 	ldr.w	lr, [r4, #20]
   84336:	d937      	bls.n	843a8 <__sfvwrite_r+0x264>
   84338:	4475      	add	r5, lr
   8433a:	42ab      	cmp	r3, r5
   8433c:	dd34      	ble.n	843a8 <__sfvwrite_r+0x264>
   8433e:	4639      	mov	r1, r7
   84340:	462a      	mov	r2, r5
   84342:	f000 fb6d 	bl	84a20 <memmove>
   84346:	6820      	ldr	r0, [r4, #0]
   84348:	4621      	mov	r1, r4
   8434a:	1943      	adds	r3, r0, r5
   8434c:	6023      	str	r3, [r4, #0]
   8434e:	4630      	mov	r0, r6
   84350:	f7ff fc12 	bl	83b78 <_fflush_r>
   84354:	2800      	cmp	r0, #0
   84356:	d148      	bne.n	843ea <__sfvwrite_r+0x2a6>
   84358:	ebbb 0b05 	subs.w	fp, fp, r5
   8435c:	d03d      	beq.n	843da <__sfvwrite_r+0x296>
   8435e:	f8d9 2008 	ldr.w	r2, [r9, #8]
   84362:	197f      	adds	r7, r7, r5
   84364:	ebc5 0a0a 	rsb	sl, r5, sl
   84368:	1b55      	subs	r5, r2, r5
   8436a:	f8c9 5008 	str.w	r5, [r9, #8]
   8436e:	2d00      	cmp	r5, #0
   84370:	f43f aeef 	beq.w	84152 <__sfvwrite_r+0xe>
   84374:	f1ba 0f00 	cmp.w	sl, #0
   84378:	d1d0      	bne.n	8431c <__sfvwrite_r+0x1d8>
   8437a:	2100      	movs	r1, #0
   8437c:	e898 0480 	ldmia.w	r8, {r7, sl}
   84380:	9101      	str	r1, [sp, #4]
   84382:	f108 0808 	add.w	r8, r8, #8
   84386:	e7f5      	b.n	84374 <__sfvwrite_r+0x230>
   84388:	4638      	mov	r0, r7
   8438a:	210a      	movs	r1, #10
   8438c:	4652      	mov	r2, sl
   8438e:	f000 fb39 	bl	84a04 <memchr>
   84392:	b120      	cbz	r0, 8439e <__sfvwrite_r+0x25a>
   84394:	f100 0101 	add.w	r1, r0, #1
   84398:	ebc7 0b01 	rsb	fp, r7, r1
   8439c:	e001      	b.n	843a2 <__sfvwrite_r+0x25e>
   8439e:	f10a 0b01 	add.w	fp, sl, #1
   843a2:	2201      	movs	r2, #1
   843a4:	9201      	str	r2, [sp, #4]
   843a6:	e7bc      	b.n	84322 <__sfvwrite_r+0x1de>
   843a8:	4573      	cmp	r3, lr
   843aa:	db08      	blt.n	843be <__sfvwrite_r+0x27a>
   843ac:	6a65      	ldr	r5, [r4, #36]	; 0x24
   843ae:	4630      	mov	r0, r6
   843b0:	69e1      	ldr	r1, [r4, #28]
   843b2:	463a      	mov	r2, r7
   843b4:	4673      	mov	r3, lr
   843b6:	47a8      	blx	r5
   843b8:	1e05      	subs	r5, r0, #0
   843ba:	dccd      	bgt.n	84358 <__sfvwrite_r+0x214>
   843bc:	e015      	b.n	843ea <__sfvwrite_r+0x2a6>
   843be:	461a      	mov	r2, r3
   843c0:	4639      	mov	r1, r7
   843c2:	9300      	str	r3, [sp, #0]
   843c4:	f000 fb2c 	bl	84a20 <memmove>
   843c8:	9b00      	ldr	r3, [sp, #0]
   843ca:	6825      	ldr	r5, [r4, #0]
   843cc:	68a0      	ldr	r0, [r4, #8]
   843ce:	18e9      	adds	r1, r5, r3
   843d0:	1ac2      	subs	r2, r0, r3
   843d2:	60a2      	str	r2, [r4, #8]
   843d4:	6021      	str	r1, [r4, #0]
   843d6:	461d      	mov	r5, r3
   843d8:	e7be      	b.n	84358 <__sfvwrite_r+0x214>
   843da:	4630      	mov	r0, r6
   843dc:	4621      	mov	r1, r4
   843de:	f7ff fbcb 	bl	83b78 <_fflush_r>
   843e2:	b910      	cbnz	r0, 843ea <__sfvwrite_r+0x2a6>
   843e4:	f8cd b004 	str.w	fp, [sp, #4]
   843e8:	e7b9      	b.n	8435e <__sfvwrite_r+0x21a>
   843ea:	89a2      	ldrh	r2, [r4, #12]
   843ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   843f0:	81a3      	strh	r3, [r4, #12]
   843f2:	f04f 30ff 	mov.w	r0, #4294967295
   843f6:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000843fa <_fwalk>:
   843fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   843fe:	4604      	mov	r4, r0
   84400:	4688      	mov	r8, r1
   84402:	f7ff fd0f 	bl	83e24 <__sfp_lock_acquire>
   84406:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
   8440a:	2600      	movs	r6, #0
   8440c:	b18c      	cbz	r4, 84432 <_fwalk+0x38>
   8440e:	68a5      	ldr	r5, [r4, #8]
   84410:	6867      	ldr	r7, [r4, #4]
   84412:	3f01      	subs	r7, #1
   84414:	d40b      	bmi.n	8442e <_fwalk+0x34>
   84416:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8441a:	b133      	cbz	r3, 8442a <_fwalk+0x30>
   8441c:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   84420:	1c43      	adds	r3, r0, #1
   84422:	d002      	beq.n	8442a <_fwalk+0x30>
   84424:	4628      	mov	r0, r5
   84426:	47c0      	blx	r8
   84428:	4306      	orrs	r6, r0
   8442a:	3568      	adds	r5, #104	; 0x68
   8442c:	e7f1      	b.n	84412 <_fwalk+0x18>
   8442e:	6824      	ldr	r4, [r4, #0]
   84430:	e7ec      	b.n	8440c <_fwalk+0x12>
   84432:	f7ff fcf8 	bl	83e26 <__sfp_lock_release>
   84436:	4630      	mov	r0, r6
   84438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0008443c <_fwalk_reent>:
   8443c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84440:	4680      	mov	r8, r0
   84442:	4689      	mov	r9, r1
   84444:	f7ff fcee 	bl	83e24 <__sfp_lock_acquire>
   84448:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
   8444c:	2600      	movs	r6, #0
   8444e:	b194      	cbz	r4, 84476 <_fwalk_reent+0x3a>
   84450:	68a5      	ldr	r5, [r4, #8]
   84452:	6867      	ldr	r7, [r4, #4]
   84454:	3f01      	subs	r7, #1
   84456:	d40c      	bmi.n	84472 <_fwalk_reent+0x36>
   84458:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8445c:	b13b      	cbz	r3, 8446e <_fwalk_reent+0x32>
   8445e:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
   84462:	1c43      	adds	r3, r0, #1
   84464:	d003      	beq.n	8446e <_fwalk_reent+0x32>
   84466:	4640      	mov	r0, r8
   84468:	4629      	mov	r1, r5
   8446a:	47c8      	blx	r9
   8446c:	4306      	orrs	r6, r0
   8446e:	3568      	adds	r5, #104	; 0x68
   84470:	e7f0      	b.n	84454 <_fwalk_reent+0x18>
   84472:	6824      	ldr	r4, [r4, #0]
   84474:	e7eb      	b.n	8444e <_fwalk_reent+0x12>
   84476:	f7ff fcd6 	bl	83e26 <__sfp_lock_release>
   8447a:	4630      	mov	r0, r6
   8447c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00084480 <_setlocale_r>:
   84480:	b510      	push	{r4, lr}
   84482:	4614      	mov	r4, r2
   84484:	b90a      	cbnz	r2, 8448a <_setlocale_r+0xa>
   84486:	480c      	ldr	r0, [pc, #48]	; (844b8 <_setlocale_r+0x38>)
   84488:	bd10      	pop	{r4, pc}
   8448a:	4610      	mov	r0, r2
   8448c:	490b      	ldr	r1, [pc, #44]	; (844bc <_setlocale_r+0x3c>)
   8448e:	f000 fca8 	bl	84de2 <strcmp>
   84492:	2800      	cmp	r0, #0
   84494:	d0f7      	beq.n	84486 <_setlocale_r+0x6>
   84496:	4620      	mov	r0, r4
   84498:	4907      	ldr	r1, [pc, #28]	; (844b8 <_setlocale_r+0x38>)
   8449a:	f000 fca2 	bl	84de2 <strcmp>
   8449e:	2800      	cmp	r0, #0
   844a0:	d0f1      	beq.n	84486 <_setlocale_r+0x6>
   844a2:	4620      	mov	r0, r4
   844a4:	4906      	ldr	r1, [pc, #24]	; (844c0 <_setlocale_r+0x40>)
   844a6:	f000 fc9c 	bl	84de2 <strcmp>
   844aa:	4b03      	ldr	r3, [pc, #12]	; (844b8 <_setlocale_r+0x38>)
   844ac:	2800      	cmp	r0, #0
   844ae:	bf0c      	ite	eq
   844b0:	4618      	moveq	r0, r3
   844b2:	2000      	movne	r0, #0
   844b4:	bd10      	pop	{r4, pc}
   844b6:	bf00      	nop
   844b8:	00085650 	.word	0x00085650
   844bc:	00085694 	.word	0x00085694
   844c0:	0008569b 	.word	0x0008569b

000844c4 <__locale_charset>:
   844c4:	4800      	ldr	r0, [pc, #0]	; (844c8 <__locale_charset+0x4>)
   844c6:	4770      	bx	lr
   844c8:	20070440 	.word	0x20070440

000844cc <__locale_mb_cur_max>:
   844cc:	4b01      	ldr	r3, [pc, #4]	; (844d4 <__locale_mb_cur_max+0x8>)
   844ce:	6a18      	ldr	r0, [r3, #32]
   844d0:	4770      	bx	lr
   844d2:	bf00      	nop
   844d4:	20070440 	.word	0x20070440

000844d8 <__locale_msgcharset>:
   844d8:	4800      	ldr	r0, [pc, #0]	; (844dc <__locale_msgcharset+0x4>)
   844da:	4770      	bx	lr
   844dc:	20070464 	.word	0x20070464

000844e0 <__locale_cjk_lang>:
   844e0:	2000      	movs	r0, #0
   844e2:	4770      	bx	lr

000844e4 <_localeconv_r>:
   844e4:	4800      	ldr	r0, [pc, #0]	; (844e8 <_localeconv_r+0x4>)
   844e6:	4770      	bx	lr
   844e8:	20070484 	.word	0x20070484

000844ec <setlocale>:
   844ec:	460a      	mov	r2, r1
   844ee:	4903      	ldr	r1, [pc, #12]	; (844fc <setlocale+0x10>)
   844f0:	4603      	mov	r3, r0
   844f2:	6808      	ldr	r0, [r1, #0]
   844f4:	4619      	mov	r1, r3
   844f6:	f7ff bfc3 	b.w	84480 <_setlocale_r>
   844fa:	bf00      	nop
   844fc:	20070010 	.word	0x20070010

00084500 <localeconv>:
   84500:	4800      	ldr	r0, [pc, #0]	; (84504 <localeconv+0x4>)
   84502:	4770      	bx	lr
   84504:	20070484 	.word	0x20070484

00084508 <__smakebuf_r>:
   84508:	b5f0      	push	{r4, r5, r6, r7, lr}
   8450a:	898b      	ldrh	r3, [r1, #12]
   8450c:	460c      	mov	r4, r1
   8450e:	f003 0102 	and.w	r1, r3, #2
   84512:	b20a      	sxth	r2, r1
   84514:	b091      	sub	sp, #68	; 0x44
   84516:	4606      	mov	r6, r0
   84518:	2a00      	cmp	r2, #0
   8451a:	d13f      	bne.n	8459c <__smakebuf_r+0x94>
   8451c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84520:	2900      	cmp	r1, #0
   84522:	da0d      	bge.n	84540 <__smakebuf_r+0x38>
   84524:	89a7      	ldrh	r7, [r4, #12]
   84526:	f007 0280 	and.w	r2, r7, #128	; 0x80
   8452a:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
   8452e:	b210      	sxth	r0, r2
   84530:	2800      	cmp	r0, #0
   84532:	bf0c      	ite	eq
   84534:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   84538:	2540      	movne	r5, #64	; 0x40
   8453a:	81a3      	strh	r3, [r4, #12]
   8453c:	2700      	movs	r7, #0
   8453e:	e020      	b.n	84582 <__smakebuf_r+0x7a>
   84540:	aa01      	add	r2, sp, #4
   84542:	f000 fd1b 	bl	84f7c <_fstat_r>
   84546:	2800      	cmp	r0, #0
   84548:	dbec      	blt.n	84524 <__smakebuf_r+0x1c>
   8454a:	9802      	ldr	r0, [sp, #8]
   8454c:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
   84550:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
   84554:	425f      	negs	r7, r3
   84556:	415f      	adcs	r7, r3
   84558:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   8455c:	d10b      	bne.n	84576 <__smakebuf_r+0x6e>
   8455e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   84560:	4a1d      	ldr	r2, [pc, #116]	; (845d8 <__smakebuf_r+0xd0>)
   84562:	4291      	cmp	r1, r2
   84564:	d107      	bne.n	84576 <__smakebuf_r+0x6e>
   84566:	89a3      	ldrh	r3, [r4, #12]
   84568:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8456c:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
   84570:	81a1      	strh	r1, [r4, #12]
   84572:	64e5      	str	r5, [r4, #76]	; 0x4c
   84574:	e005      	b.n	84582 <__smakebuf_r+0x7a>
   84576:	89a0      	ldrh	r0, [r4, #12]
   84578:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
   8457c:	81a5      	strh	r5, [r4, #12]
   8457e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   84582:	4630      	mov	r0, r6
   84584:	4629      	mov	r1, r5
   84586:	f000 f83b 	bl	84600 <_malloc_r>
   8458a:	b970      	cbnz	r0, 845aa <__smakebuf_r+0xa2>
   8458c:	89a3      	ldrh	r3, [r4, #12]
   8458e:	f403 7200 	and.w	r2, r3, #512	; 0x200
   84592:	b210      	sxth	r0, r2
   84594:	b9e8      	cbnz	r0, 845d2 <__smakebuf_r+0xca>
   84596:	f043 0102 	orr.w	r1, r3, #2
   8459a:	81a1      	strh	r1, [r4, #12]
   8459c:	f104 0343 	add.w	r3, r4, #67	; 0x43
   845a0:	2201      	movs	r2, #1
   845a2:	6023      	str	r3, [r4, #0]
   845a4:	6123      	str	r3, [r4, #16]
   845a6:	6162      	str	r2, [r4, #20]
   845a8:	e013      	b.n	845d2 <__smakebuf_r+0xca>
   845aa:	89a2      	ldrh	r2, [r4, #12]
   845ac:	490b      	ldr	r1, [pc, #44]	; (845dc <__smakebuf_r+0xd4>)
   845ae:	f042 0380 	orr.w	r3, r2, #128	; 0x80
   845b2:	63f1      	str	r1, [r6, #60]	; 0x3c
   845b4:	81a3      	strh	r3, [r4, #12]
   845b6:	6020      	str	r0, [r4, #0]
   845b8:	6120      	str	r0, [r4, #16]
   845ba:	6165      	str	r5, [r4, #20]
   845bc:	b14f      	cbz	r7, 845d2 <__smakebuf_r+0xca>
   845be:	4630      	mov	r0, r6
   845c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   845c4:	f000 fcec 	bl	84fa0 <_isatty_r>
   845c8:	b118      	cbz	r0, 845d2 <__smakebuf_r+0xca>
   845ca:	89a0      	ldrh	r0, [r4, #12]
   845cc:	f040 0101 	orr.w	r1, r0, #1
   845d0:	81a1      	strh	r1, [r4, #12]
   845d2:	b011      	add	sp, #68	; 0x44
   845d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   845d6:	bf00      	nop
   845d8:	00084db7 	.word	0x00084db7
   845dc:	00083cd1 	.word	0x00083cd1

000845e0 <malloc>:
   845e0:	4b02      	ldr	r3, [pc, #8]	; (845ec <malloc+0xc>)
   845e2:	4601      	mov	r1, r0
   845e4:	6818      	ldr	r0, [r3, #0]
   845e6:	f000 b80b 	b.w	84600 <_malloc_r>
   845ea:	bf00      	nop
   845ec:	20070010 	.word	0x20070010

000845f0 <free>:
   845f0:	4b02      	ldr	r3, [pc, #8]	; (845fc <free+0xc>)
   845f2:	4601      	mov	r1, r0
   845f4:	6818      	ldr	r0, [r3, #0]
   845f6:	f7ff bcef 	b.w	83fd8 <_free_r>
   845fa:	bf00      	nop
   845fc:	20070010 	.word	0x20070010

00084600 <_malloc_r>:
   84600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   84604:	f101 040b 	add.w	r4, r1, #11
   84608:	2c16      	cmp	r4, #22
   8460a:	4606      	mov	r6, r0
   8460c:	d903      	bls.n	84616 <_malloc_r+0x16>
   8460e:	f034 0407 	bics.w	r4, r4, #7
   84612:	d501      	bpl.n	84618 <_malloc_r+0x18>
   84614:	e002      	b.n	8461c <_malloc_r+0x1c>
   84616:	2410      	movs	r4, #16
   84618:	428c      	cmp	r4, r1
   8461a:	d202      	bcs.n	84622 <_malloc_r+0x22>
   8461c:	250c      	movs	r5, #12
   8461e:	6035      	str	r5, [r6, #0]
   84620:	e1d9      	b.n	849d6 <_malloc_r+0x3d6>
   84622:	4630      	mov	r0, r6
   84624:	f000 fa16 	bl	84a54 <__malloc_lock>
   84628:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   8462c:	d214      	bcs.n	84658 <_malloc_r+0x58>
   8462e:	4da0      	ldr	r5, [pc, #640]	; (848b0 <_malloc_r+0x2b0>)
   84630:	08e1      	lsrs	r1, r4, #3
   84632:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   84636:	68c5      	ldr	r5, [r0, #12]
   84638:	4285      	cmp	r5, r0
   8463a:	d105      	bne.n	84648 <_malloc_r+0x48>
   8463c:	f105 0308 	add.w	r3, r5, #8
   84640:	696d      	ldr	r5, [r5, #20]
   84642:	1c8a      	adds	r2, r1, #2
   84644:	429d      	cmp	r5, r3
   84646:	d044      	beq.n	846d2 <_malloc_r+0xd2>
   84648:	68e8      	ldr	r0, [r5, #12]
   8464a:	68a9      	ldr	r1, [r5, #8]
   8464c:	686a      	ldr	r2, [r5, #4]
   8464e:	60c8      	str	r0, [r1, #12]
   84650:	f022 0303 	bic.w	r3, r2, #3
   84654:	6081      	str	r1, [r0, #8]
   84656:	e059      	b.n	8470c <_malloc_r+0x10c>
   84658:	0a62      	lsrs	r2, r4, #9
   8465a:	d101      	bne.n	84660 <_malloc_r+0x60>
   8465c:	08e2      	lsrs	r2, r4, #3
   8465e:	e01b      	b.n	84698 <_malloc_r+0x98>
   84660:	2a04      	cmp	r2, #4
   84662:	d802      	bhi.n	8466a <_malloc_r+0x6a>
   84664:	09a2      	lsrs	r2, r4, #6
   84666:	3238      	adds	r2, #56	; 0x38
   84668:	e016      	b.n	84698 <_malloc_r+0x98>
   8466a:	2a14      	cmp	r2, #20
   8466c:	d801      	bhi.n	84672 <_malloc_r+0x72>
   8466e:	325b      	adds	r2, #91	; 0x5b
   84670:	e012      	b.n	84698 <_malloc_r+0x98>
   84672:	2a54      	cmp	r2, #84	; 0x54
   84674:	d802      	bhi.n	8467c <_malloc_r+0x7c>
   84676:	0b22      	lsrs	r2, r4, #12
   84678:	326e      	adds	r2, #110	; 0x6e
   8467a:	e00d      	b.n	84698 <_malloc_r+0x98>
   8467c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84680:	d802      	bhi.n	84688 <_malloc_r+0x88>
   84682:	0be2      	lsrs	r2, r4, #15
   84684:	3277      	adds	r2, #119	; 0x77
   84686:	e007      	b.n	84698 <_malloc_r+0x98>
   84688:	f240 5354 	movw	r3, #1364	; 0x554
   8468c:	429a      	cmp	r2, r3
   8468e:	d802      	bhi.n	84696 <_malloc_r+0x96>
   84690:	0ca2      	lsrs	r2, r4, #18
   84692:	327c      	adds	r2, #124	; 0x7c
   84694:	e000      	b.n	84698 <_malloc_r+0x98>
   84696:	227e      	movs	r2, #126	; 0x7e
   84698:	4885      	ldr	r0, [pc, #532]	; (848b0 <_malloc_r+0x2b0>)
   8469a:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
   8469e:	68dd      	ldr	r5, [r3, #12]
   846a0:	429d      	cmp	r5, r3
   846a2:	d015      	beq.n	846d0 <_malloc_r+0xd0>
   846a4:	6869      	ldr	r1, [r5, #4]
   846a6:	f021 0103 	bic.w	r1, r1, #3
   846aa:	1b08      	subs	r0, r1, r4
   846ac:	280f      	cmp	r0, #15
   846ae:	dd01      	ble.n	846b4 <_malloc_r+0xb4>
   846b0:	3a01      	subs	r2, #1
   846b2:	e00d      	b.n	846d0 <_malloc_r+0xd0>
   846b4:	2800      	cmp	r0, #0
   846b6:	db09      	blt.n	846cc <_malloc_r+0xcc>
   846b8:	68eb      	ldr	r3, [r5, #12]
   846ba:	68aa      	ldr	r2, [r5, #8]
   846bc:	60d3      	str	r3, [r2, #12]
   846be:	609a      	str	r2, [r3, #8]
   846c0:	186b      	adds	r3, r5, r1
   846c2:	685a      	ldr	r2, [r3, #4]
   846c4:	f042 0001 	orr.w	r0, r2, #1
   846c8:	6058      	str	r0, [r3, #4]
   846ca:	e190      	b.n	849ee <_malloc_r+0x3ee>
   846cc:	68ed      	ldr	r5, [r5, #12]
   846ce:	e7e7      	b.n	846a0 <_malloc_r+0xa0>
   846d0:	3201      	adds	r2, #1
   846d2:	4977      	ldr	r1, [pc, #476]	; (848b0 <_malloc_r+0x2b0>)
   846d4:	690d      	ldr	r5, [r1, #16]
   846d6:	f101 0708 	add.w	r7, r1, #8
   846da:	42bd      	cmp	r5, r7
   846dc:	d068      	beq.n	847b0 <_malloc_r+0x1b0>
   846de:	6868      	ldr	r0, [r5, #4]
   846e0:	f020 0303 	bic.w	r3, r0, #3
   846e4:	1b18      	subs	r0, r3, r4
   846e6:	280f      	cmp	r0, #15
   846e8:	dd0c      	ble.n	84704 <_malloc_r+0x104>
   846ea:	192b      	adds	r3, r5, r4
   846ec:	614b      	str	r3, [r1, #20]
   846ee:	610b      	str	r3, [r1, #16]
   846f0:	f044 0401 	orr.w	r4, r4, #1
   846f4:	f040 0101 	orr.w	r1, r0, #1
   846f8:	606c      	str	r4, [r5, #4]
   846fa:	60df      	str	r7, [r3, #12]
   846fc:	609f      	str	r7, [r3, #8]
   846fe:	6059      	str	r1, [r3, #4]
   84700:	5018      	str	r0, [r3, r0]
   84702:	e174      	b.n	849ee <_malloc_r+0x3ee>
   84704:	2800      	cmp	r0, #0
   84706:	614f      	str	r7, [r1, #20]
   84708:	610f      	str	r7, [r1, #16]
   8470a:	db01      	blt.n	84710 <_malloc_r+0x110>
   8470c:	18eb      	adds	r3, r5, r3
   8470e:	e7d8      	b.n	846c2 <_malloc_r+0xc2>
   84710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84714:	d20f      	bcs.n	84736 <_malloc_r+0x136>
   84716:	08db      	lsrs	r3, r3, #3
   84718:	1098      	asrs	r0, r3, #2
   8471a:	2701      	movs	r7, #1
   8471c:	fa07 f700 	lsl.w	r7, r7, r0
   84720:	6848      	ldr	r0, [r1, #4]
   84722:	4307      	orrs	r7, r0
   84724:	604f      	str	r7, [r1, #4]
   84726:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   8472a:	688b      	ldr	r3, [r1, #8]
   8472c:	60e9      	str	r1, [r5, #12]
   8472e:	60ab      	str	r3, [r5, #8]
   84730:	60dd      	str	r5, [r3, #12]
   84732:	608d      	str	r5, [r1, #8]
   84734:	e03c      	b.n	847b0 <_malloc_r+0x1b0>
   84736:	0a58      	lsrs	r0, r3, #9
   84738:	2804      	cmp	r0, #4
   8473a:	d802      	bhi.n	84742 <_malloc_r+0x142>
   8473c:	0998      	lsrs	r0, r3, #6
   8473e:	3038      	adds	r0, #56	; 0x38
   84740:	e016      	b.n	84770 <_malloc_r+0x170>
   84742:	2814      	cmp	r0, #20
   84744:	d801      	bhi.n	8474a <_malloc_r+0x14a>
   84746:	305b      	adds	r0, #91	; 0x5b
   84748:	e012      	b.n	84770 <_malloc_r+0x170>
   8474a:	2854      	cmp	r0, #84	; 0x54
   8474c:	d802      	bhi.n	84754 <_malloc_r+0x154>
   8474e:	0b18      	lsrs	r0, r3, #12
   84750:	306e      	adds	r0, #110	; 0x6e
   84752:	e00d      	b.n	84770 <_malloc_r+0x170>
   84754:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   84758:	d802      	bhi.n	84760 <_malloc_r+0x160>
   8475a:	0bd8      	lsrs	r0, r3, #15
   8475c:	3077      	adds	r0, #119	; 0x77
   8475e:	e007      	b.n	84770 <_malloc_r+0x170>
   84760:	f240 5754 	movw	r7, #1364	; 0x554
   84764:	42b8      	cmp	r0, r7
   84766:	d802      	bhi.n	8476e <_malloc_r+0x16e>
   84768:	0c98      	lsrs	r0, r3, #18
   8476a:	307c      	adds	r0, #124	; 0x7c
   8476c:	e000      	b.n	84770 <_malloc_r+0x170>
   8476e:	207e      	movs	r0, #126	; 0x7e
   84770:	f8df e13c 	ldr.w	lr, [pc, #316]	; 848b0 <_malloc_r+0x2b0>
   84774:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
   84778:	68b9      	ldr	r1, [r7, #8]
   8477a:	42b9      	cmp	r1, r7
   8477c:	d10e      	bne.n	8479c <_malloc_r+0x19c>
   8477e:	1087      	asrs	r7, r0, #2
   84780:	2301      	movs	r3, #1
   84782:	fa03 f007 	lsl.w	r0, r3, r7
   84786:	f8de 7004 	ldr.w	r7, [lr, #4]
   8478a:	ea40 0307 	orr.w	r3, r0, r7
   8478e:	f8ce 3004 	str.w	r3, [lr, #4]
   84792:	4608      	mov	r0, r1
   84794:	e008      	b.n	847a8 <_malloc_r+0x1a8>
   84796:	6889      	ldr	r1, [r1, #8]
   84798:	42b9      	cmp	r1, r7
   8479a:	d004      	beq.n	847a6 <_malloc_r+0x1a6>
   8479c:	6848      	ldr	r0, [r1, #4]
   8479e:	f020 0003 	bic.w	r0, r0, #3
   847a2:	4283      	cmp	r3, r0
   847a4:	d3f7      	bcc.n	84796 <_malloc_r+0x196>
   847a6:	68c8      	ldr	r0, [r1, #12]
   847a8:	60e8      	str	r0, [r5, #12]
   847aa:	60a9      	str	r1, [r5, #8]
   847ac:	60cd      	str	r5, [r1, #12]
   847ae:	6085      	str	r5, [r0, #8]
   847b0:	1095      	asrs	r5, r2, #2
   847b2:	2001      	movs	r0, #1
   847b4:	fa00 f305 	lsl.w	r3, r0, r5
   847b8:	4f3d      	ldr	r7, [pc, #244]	; (848b0 <_malloc_r+0x2b0>)
   847ba:	6879      	ldr	r1, [r7, #4]
   847bc:	428b      	cmp	r3, r1
   847be:	d85d      	bhi.n	8487c <_malloc_r+0x27c>
   847c0:	420b      	tst	r3, r1
   847c2:	d105      	bne.n	847d0 <_malloc_r+0x1d0>
   847c4:	f022 0203 	bic.w	r2, r2, #3
   847c8:	005b      	lsls	r3, r3, #1
   847ca:	3204      	adds	r2, #4
   847cc:	420b      	tst	r3, r1
   847ce:	d0fb      	beq.n	847c8 <_malloc_r+0x1c8>
   847d0:	4d37      	ldr	r5, [pc, #220]	; (848b0 <_malloc_r+0x2b0>)
   847d2:	4610      	mov	r0, r2
   847d4:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
   847d8:	4677      	mov	r7, lr
   847da:	68fd      	ldr	r5, [r7, #12]
   847dc:	42bd      	cmp	r5, r7
   847de:	d02d      	beq.n	8483c <_malloc_r+0x23c>
   847e0:	6869      	ldr	r1, [r5, #4]
   847e2:	f021 0c03 	bic.w	ip, r1, #3
   847e6:	ebc4 010c 	rsb	r1, r4, ip
   847ea:	290f      	cmp	r1, #15
   847ec:	dd13      	ble.n	84816 <_malloc_r+0x216>
   847ee:	192b      	adds	r3, r5, r4
   847f0:	f044 0401 	orr.w	r4, r4, #1
   847f4:	68ea      	ldr	r2, [r5, #12]
   847f6:	606c      	str	r4, [r5, #4]
   847f8:	f855 0f08 	ldr.w	r0, [r5, #8]!
   847fc:	5059      	str	r1, [r3, r1]
   847fe:	60c2      	str	r2, [r0, #12]
   84800:	6090      	str	r0, [r2, #8]
   84802:	4a2b      	ldr	r2, [pc, #172]	; (848b0 <_malloc_r+0x2b0>)
   84804:	f041 0001 	orr.w	r0, r1, #1
   84808:	6153      	str	r3, [r2, #20]
   8480a:	6113      	str	r3, [r2, #16]
   8480c:	3208      	adds	r2, #8
   8480e:	60da      	str	r2, [r3, #12]
   84810:	609a      	str	r2, [r3, #8]
   84812:	6058      	str	r0, [r3, #4]
   84814:	e00c      	b.n	84830 <_malloc_r+0x230>
   84816:	2900      	cmp	r1, #0
   84818:	db0e      	blt.n	84838 <_malloc_r+0x238>
   8481a:	eb05 000c 	add.w	r0, r5, ip
   8481e:	6842      	ldr	r2, [r0, #4]
   84820:	68e9      	ldr	r1, [r5, #12]
   84822:	f042 0301 	orr.w	r3, r2, #1
   84826:	6043      	str	r3, [r0, #4]
   84828:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8482c:	60c1      	str	r1, [r0, #12]
   8482e:	6088      	str	r0, [r1, #8]
   84830:	4630      	mov	r0, r6
   84832:	f000 f910 	bl	84a56 <__malloc_unlock>
   84836:	e0de      	b.n	849f6 <_malloc_r+0x3f6>
   84838:	68ed      	ldr	r5, [r5, #12]
   8483a:	e7cf      	b.n	847dc <_malloc_r+0x1dc>
   8483c:	3001      	adds	r0, #1
   8483e:	0781      	lsls	r1, r0, #30
   84840:	f105 0708 	add.w	r7, r5, #8
   84844:	d1c9      	bne.n	847da <_malloc_r+0x1da>
   84846:	4671      	mov	r1, lr
   84848:	0795      	lsls	r5, r2, #30
   8484a:	d105      	bne.n	84858 <_malloc_r+0x258>
   8484c:	4a18      	ldr	r2, [pc, #96]	; (848b0 <_malloc_r+0x2b0>)
   8484e:	6855      	ldr	r5, [r2, #4]
   84850:	ea25 0503 	bic.w	r5, r5, r3
   84854:	6055      	str	r5, [r2, #4]
   84856:	e005      	b.n	84864 <_malloc_r+0x264>
   84858:	f1a1 0708 	sub.w	r7, r1, #8
   8485c:	6809      	ldr	r1, [r1, #0]
   8485e:	3a01      	subs	r2, #1
   84860:	42b9      	cmp	r1, r7
   84862:	d0f1      	beq.n	84848 <_malloc_r+0x248>
   84864:	4f12      	ldr	r7, [pc, #72]	; (848b0 <_malloc_r+0x2b0>)
   84866:	005b      	lsls	r3, r3, #1
   84868:	687f      	ldr	r7, [r7, #4]
   8486a:	42bb      	cmp	r3, r7
   8486c:	d806      	bhi.n	8487c <_malloc_r+0x27c>
   8486e:	b12b      	cbz	r3, 8487c <_malloc_r+0x27c>
   84870:	4602      	mov	r2, r0
   84872:	423b      	tst	r3, r7
   84874:	d1ac      	bne.n	847d0 <_malloc_r+0x1d0>
   84876:	3204      	adds	r2, #4
   84878:	005b      	lsls	r3, r3, #1
   8487a:	e7fa      	b.n	84872 <_malloc_r+0x272>
   8487c:	4b0c      	ldr	r3, [pc, #48]	; (848b0 <_malloc_r+0x2b0>)
   8487e:	689f      	ldr	r7, [r3, #8]
   84880:	4619      	mov	r1, r3
   84882:	6878      	ldr	r0, [r7, #4]
   84884:	f020 0903 	bic.w	r9, r0, #3
   84888:	45a1      	cmp	r9, r4
   8488a:	d304      	bcc.n	84896 <_malloc_r+0x296>
   8488c:	ebc4 0009 	rsb	r0, r4, r9
   84890:	280f      	cmp	r0, #15
   84892:	f300 80a2 	bgt.w	849da <_malloc_r+0x3da>
   84896:	4a07      	ldr	r2, [pc, #28]	; (848b4 <_malloc_r+0x2b4>)
   84898:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
   8489c:	6815      	ldr	r5, [r2, #0]
   8489e:	3301      	adds	r3, #1
   848a0:	eb07 0a09 	add.w	sl, r7, r9
   848a4:	eb04 0805 	add.w	r8, r4, r5
   848a8:	d106      	bne.n	848b8 <_malloc_r+0x2b8>
   848aa:	f108 0810 	add.w	r8, r8, #16
   848ae:	e00b      	b.n	848c8 <_malloc_r+0x2c8>
   848b0:	200704bc 	.word	0x200704bc
   848b4:	20078b0c 	.word	0x20078b0c
   848b8:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   848bc:	f100 010f 	add.w	r1, r0, #15
   848c0:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   848c4:	f022 080f 	bic.w	r8, r2, #15
   848c8:	4630      	mov	r0, r6
   848ca:	4641      	mov	r1, r8
   848cc:	f000 fa32 	bl	84d34 <_sbrk_r>
   848d0:	1c42      	adds	r2, r0, #1
   848d2:	4605      	mov	r5, r0
   848d4:	d071      	beq.n	849ba <_malloc_r+0x3ba>
   848d6:	4550      	cmp	r0, sl
   848d8:	d202      	bcs.n	848e0 <_malloc_r+0x2e0>
   848da:	4b48      	ldr	r3, [pc, #288]	; (849fc <_malloc_r+0x3fc>)
   848dc:	429f      	cmp	r7, r3
   848de:	d16c      	bne.n	849ba <_malloc_r+0x3ba>
   848e0:	4847      	ldr	r0, [pc, #284]	; (84a00 <_malloc_r+0x400>)
   848e2:	4555      	cmp	r5, sl
   848e4:	6841      	ldr	r1, [r0, #4]
   848e6:	4a45      	ldr	r2, [pc, #276]	; (849fc <_malloc_r+0x3fc>)
   848e8:	eb08 0301 	add.w	r3, r8, r1
   848ec:	6043      	str	r3, [r0, #4]
   848ee:	d107      	bne.n	84900 <_malloc_r+0x300>
   848f0:	0529      	lsls	r1, r5, #20
   848f2:	d105      	bne.n	84900 <_malloc_r+0x300>
   848f4:	6895      	ldr	r5, [r2, #8]
   848f6:	44c8      	add	r8, r9
   848f8:	f048 0001 	orr.w	r0, r8, #1
   848fc:	6068      	str	r0, [r5, #4]
   848fe:	e051      	b.n	849a4 <_malloc_r+0x3a4>
   84900:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   84904:	1c42      	adds	r2, r0, #1
   84906:	d103      	bne.n	84910 <_malloc_r+0x310>
   84908:	4a3c      	ldr	r2, [pc, #240]	; (849fc <_malloc_r+0x3fc>)
   8490a:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
   8490e:	e005      	b.n	8491c <_malloc_r+0x31c>
   84910:	ebca 0a05 	rsb	sl, sl, r5
   84914:	eb03 010a 	add.w	r1, r3, sl
   84918:	4b39      	ldr	r3, [pc, #228]	; (84a00 <_malloc_r+0x400>)
   8491a:	6059      	str	r1, [r3, #4]
   8491c:	f015 0007 	ands.w	r0, r5, #7
   84920:	bf1c      	itt	ne
   84922:	f1c0 0008 	rsbne	r0, r0, #8
   84926:	182d      	addne	r5, r5, r0
   84928:	eb05 0c08 	add.w	ip, r5, r8
   8492c:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   84930:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
   84934:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
   84938:	4641      	mov	r1, r8
   8493a:	4630      	mov	r0, r6
   8493c:	f000 f9fa 	bl	84d34 <_sbrk_r>
   84940:	4a2f      	ldr	r2, [pc, #188]	; (84a00 <_malloc_r+0x400>)
   84942:	1c43      	adds	r3, r0, #1
   84944:	6853      	ldr	r3, [r2, #4]
   84946:	bf08      	it	eq
   84948:	f04f 0800 	moveq.w	r8, #0
   8494c:	eb08 0103 	add.w	r1, r8, r3
   84950:	bf08      	it	eq
   84952:	4628      	moveq	r0, r5
   84954:	6051      	str	r1, [r2, #4]
   84956:	1b40      	subs	r0, r0, r5
   84958:	4a28      	ldr	r2, [pc, #160]	; (849fc <_malloc_r+0x3fc>)
   8495a:	eb00 0308 	add.w	r3, r0, r8
   8495e:	f043 0101 	orr.w	r1, r3, #1
   84962:	4297      	cmp	r7, r2
   84964:	6095      	str	r5, [r2, #8]
   84966:	6069      	str	r1, [r5, #4]
   84968:	d01c      	beq.n	849a4 <_malloc_r+0x3a4>
   8496a:	f1b9 0f0f 	cmp.w	r9, #15
   8496e:	d802      	bhi.n	84976 <_malloc_r+0x376>
   84970:	2201      	movs	r2, #1
   84972:	606a      	str	r2, [r5, #4]
   84974:	e021      	b.n	849ba <_malloc_r+0x3ba>
   84976:	687d      	ldr	r5, [r7, #4]
   84978:	f1a9 090c 	sub.w	r9, r9, #12
   8497c:	f029 0907 	bic.w	r9, r9, #7
   84980:	f005 0201 	and.w	r2, r5, #1
   84984:	2105      	movs	r1, #5
   84986:	eb07 0309 	add.w	r3, r7, r9
   8498a:	ea49 0002 	orr.w	r0, r9, r2
   8498e:	f1b9 0f0f 	cmp.w	r9, #15
   84992:	6078      	str	r0, [r7, #4]
   84994:	6059      	str	r1, [r3, #4]
   84996:	6099      	str	r1, [r3, #8]
   84998:	d904      	bls.n	849a4 <_malloc_r+0x3a4>
   8499a:	4630      	mov	r0, r6
   8499c:	f107 0108 	add.w	r1, r7, #8
   849a0:	f7ff fb1a 	bl	83fd8 <_free_r>
   849a4:	4a16      	ldr	r2, [pc, #88]	; (84a00 <_malloc_r+0x400>)
   849a6:	6853      	ldr	r3, [r2, #4]
   849a8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   849aa:	6b15      	ldr	r5, [r2, #48]	; 0x30
   849ac:	428b      	cmp	r3, r1
   849ae:	bf88      	it	hi
   849b0:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   849b2:	42ab      	cmp	r3, r5
   849b4:	bf84      	itt	hi
   849b6:	4d12      	ldrhi	r5, [pc, #72]	; (84a00 <_malloc_r+0x400>)
   849b8:	632b      	strhi	r3, [r5, #48]	; 0x30
   849ba:	4810      	ldr	r0, [pc, #64]	; (849fc <_malloc_r+0x3fc>)
   849bc:	6882      	ldr	r2, [r0, #8]
   849be:	6853      	ldr	r3, [r2, #4]
   849c0:	f023 0103 	bic.w	r1, r3, #3
   849c4:	42a1      	cmp	r1, r4
   849c6:	ebc4 0001 	rsb	r0, r4, r1
   849ca:	d301      	bcc.n	849d0 <_malloc_r+0x3d0>
   849cc:	280f      	cmp	r0, #15
   849ce:	dc04      	bgt.n	849da <_malloc_r+0x3da>
   849d0:	4630      	mov	r0, r6
   849d2:	f000 f840 	bl	84a56 <__malloc_unlock>
   849d6:	2500      	movs	r5, #0
   849d8:	e00d      	b.n	849f6 <_malloc_r+0x3f6>
   849da:	4a08      	ldr	r2, [pc, #32]	; (849fc <_malloc_r+0x3fc>)
   849dc:	f044 0301 	orr.w	r3, r4, #1
   849e0:	6895      	ldr	r5, [r2, #8]
   849e2:	f040 0101 	orr.w	r1, r0, #1
   849e6:	192c      	adds	r4, r5, r4
   849e8:	606b      	str	r3, [r5, #4]
   849ea:	6094      	str	r4, [r2, #8]
   849ec:	6061      	str	r1, [r4, #4]
   849ee:	4630      	mov	r0, r6
   849f0:	f000 f831 	bl	84a56 <__malloc_unlock>
   849f4:	3508      	adds	r5, #8
   849f6:	4628      	mov	r0, r5
   849f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   849fc:	200704bc 	.word	0x200704bc
   84a00:	20078b0c 	.word	0x20078b0c

00084a04 <memchr>:
   84a04:	b510      	push	{r4, lr}
   84a06:	b2c9      	uxtb	r1, r1
   84a08:	4603      	mov	r3, r0
   84a0a:	1882      	adds	r2, r0, r2
   84a0c:	4293      	cmp	r3, r2
   84a0e:	4618      	mov	r0, r3
   84a10:	d004      	beq.n	84a1c <memchr+0x18>
   84a12:	7804      	ldrb	r4, [r0, #0]
   84a14:	3301      	adds	r3, #1
   84a16:	428c      	cmp	r4, r1
   84a18:	d1f8      	bne.n	84a0c <memchr+0x8>
   84a1a:	e000      	b.n	84a1e <memchr+0x1a>
   84a1c:	2000      	movs	r0, #0
   84a1e:	bd10      	pop	{r4, pc}

00084a20 <memmove>:
   84a20:	4281      	cmp	r1, r0
   84a22:	b570      	push	{r4, r5, r6, lr}
   84a24:	d20e      	bcs.n	84a44 <memmove+0x24>
   84a26:	188c      	adds	r4, r1, r2
   84a28:	42a0      	cmp	r0, r4
   84a2a:	d20b      	bcs.n	84a44 <memmove+0x24>
   84a2c:	1885      	adds	r5, r0, r2
   84a2e:	4613      	mov	r3, r2
   84a30:	f113 33ff 	adds.w	r3, r3, #4294967295
   84a34:	d305      	bcc.n	84a42 <memmove+0x22>
   84a36:	4251      	negs	r1, r2
   84a38:	1866      	adds	r6, r4, r1
   84a3a:	5cf6      	ldrb	r6, [r6, r3]
   84a3c:	1869      	adds	r1, r5, r1
   84a3e:	54ce      	strb	r6, [r1, r3]
   84a40:	e7f6      	b.n	84a30 <memmove+0x10>
   84a42:	bd70      	pop	{r4, r5, r6, pc}
   84a44:	2300      	movs	r3, #0
   84a46:	4293      	cmp	r3, r2
   84a48:	d003      	beq.n	84a52 <memmove+0x32>
   84a4a:	5ccc      	ldrb	r4, [r1, r3]
   84a4c:	54c4      	strb	r4, [r0, r3]
   84a4e:	3301      	adds	r3, #1
   84a50:	e7f9      	b.n	84a46 <memmove+0x26>
   84a52:	bd70      	pop	{r4, r5, r6, pc}

00084a54 <__malloc_lock>:
   84a54:	4770      	bx	lr

00084a56 <__malloc_unlock>:
   84a56:	4770      	bx	lr

00084a58 <_realloc_r>:
   84a58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84a5c:	4681      	mov	r9, r0
   84a5e:	4616      	mov	r6, r2
   84a60:	460c      	mov	r4, r1
   84a62:	b921      	cbnz	r1, 84a6e <_realloc_r+0x16>
   84a64:	4611      	mov	r1, r2
   84a66:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84a6a:	f7ff bdc9 	b.w	84600 <_malloc_r>
   84a6e:	f7ff fff1 	bl	84a54 <__malloc_lock>
   84a72:	f106 070b 	add.w	r7, r6, #11
   84a76:	f854 5c04 	ldr.w	r5, [r4, #-4]
   84a7a:	2f16      	cmp	r7, #22
   84a7c:	f1a4 0b08 	sub.w	fp, r4, #8
   84a80:	f025 0803 	bic.w	r8, r5, #3
   84a84:	d903      	bls.n	84a8e <_realloc_r+0x36>
   84a86:	f037 0707 	bics.w	r7, r7, #7
   84a8a:	d501      	bpl.n	84a90 <_realloc_r+0x38>
   84a8c:	e002      	b.n	84a94 <_realloc_r+0x3c>
   84a8e:	2710      	movs	r7, #16
   84a90:	42b7      	cmp	r7, r6
   84a92:	d204      	bcs.n	84a9e <_realloc_r+0x46>
   84a94:	200c      	movs	r0, #12
   84a96:	f8c9 0000 	str.w	r0, [r9]
   84a9a:	2600      	movs	r6, #0
   84a9c:	e145      	b.n	84d2a <_realloc_r+0x2d2>
   84a9e:	45b8      	cmp	r8, r7
   84aa0:	f280 811a 	bge.w	84cd8 <_realloc_r+0x280>
   84aa4:	4aa2      	ldr	r2, [pc, #648]	; (84d30 <_realloc_r+0x2d8>)
   84aa6:	eb0b 0308 	add.w	r3, fp, r8
   84aaa:	6891      	ldr	r1, [r2, #8]
   84aac:	428b      	cmp	r3, r1
   84aae:	d006      	beq.n	84abe <_realloc_r+0x66>
   84ab0:	6858      	ldr	r0, [r3, #4]
   84ab2:	f020 0201 	bic.w	r2, r0, #1
   84ab6:	1898      	adds	r0, r3, r2
   84ab8:	6842      	ldr	r2, [r0, #4]
   84aba:	07d0      	lsls	r0, r2, #31
   84abc:	d426      	bmi.n	84b0c <_realloc_r+0xb4>
   84abe:	685a      	ldr	r2, [r3, #4]
   84ac0:	428b      	cmp	r3, r1
   84ac2:	f022 0003 	bic.w	r0, r2, #3
   84ac6:	eb00 0a08 	add.w	sl, r0, r8
   84aca:	d118      	bne.n	84afe <_realloc_r+0xa6>
   84acc:	f107 0210 	add.w	r2, r7, #16
   84ad0:	4592      	cmp	sl, r2
   84ad2:	db1d      	blt.n	84b10 <_realloc_r+0xb8>
   84ad4:	ebc7 0a0a 	rsb	sl, r7, sl
   84ad8:	eb0b 0507 	add.w	r5, fp, r7
   84adc:	f04a 0101 	orr.w	r1, sl, #1
   84ae0:	6069      	str	r1, [r5, #4]
   84ae2:	f854 2c04 	ldr.w	r2, [r4, #-4]
   84ae6:	4e92      	ldr	r6, [pc, #584]	; (84d30 <_realloc_r+0x2d8>)
   84ae8:	f002 0301 	and.w	r3, r2, #1
   84aec:	431f      	orrs	r7, r3
   84aee:	60b5      	str	r5, [r6, #8]
   84af0:	f844 7c04 	str.w	r7, [r4, #-4]
   84af4:	4648      	mov	r0, r9
   84af6:	f7ff ffae 	bl	84a56 <__malloc_unlock>
   84afa:	4626      	mov	r6, r4
   84afc:	e115      	b.n	84d2a <_realloc_r+0x2d2>
   84afe:	45ba      	cmp	sl, r7
   84b00:	db06      	blt.n	84b10 <_realloc_r+0xb8>
   84b02:	68dd      	ldr	r5, [r3, #12]
   84b04:	689e      	ldr	r6, [r3, #8]
   84b06:	60f5      	str	r5, [r6, #12]
   84b08:	60ae      	str	r6, [r5, #8]
   84b0a:	e0e6      	b.n	84cda <_realloc_r+0x282>
   84b0c:	2000      	movs	r0, #0
   84b0e:	4603      	mov	r3, r0
   84b10:	07ea      	lsls	r2, r5, #31
   84b12:	f100 8091 	bmi.w	84c38 <_realloc_r+0x1e0>
   84b16:	f854 5c08 	ldr.w	r5, [r4, #-8]
   84b1a:	ebc5 050b 	rsb	r5, r5, fp
   84b1e:	686a      	ldr	r2, [r5, #4]
   84b20:	f022 0203 	bic.w	r2, r2, #3
   84b24:	2b00      	cmp	r3, #0
   84b26:	d051      	beq.n	84bcc <_realloc_r+0x174>
   84b28:	eb02 0a08 	add.w	sl, r2, r8
   84b2c:	428b      	cmp	r3, r1
   84b2e:	4482      	add	sl, r0
   84b30:	d145      	bne.n	84bbe <_realloc_r+0x166>
   84b32:	f107 0310 	add.w	r3, r7, #16
   84b36:	459a      	cmp	sl, r3
   84b38:	db48      	blt.n	84bcc <_realloc_r+0x174>
   84b3a:	462e      	mov	r6, r5
   84b3c:	68e9      	ldr	r1, [r5, #12]
   84b3e:	f856 3f08 	ldr.w	r3, [r6, #8]!
   84b42:	f1a8 0204 	sub.w	r2, r8, #4
   84b46:	2a24      	cmp	r2, #36	; 0x24
   84b48:	60d9      	str	r1, [r3, #12]
   84b4a:	608b      	str	r3, [r1, #8]
   84b4c:	d825      	bhi.n	84b9a <_realloc_r+0x142>
   84b4e:	2a13      	cmp	r2, #19
   84b50:	d91b      	bls.n	84b8a <_realloc_r+0x132>
   84b52:	6821      	ldr	r1, [r4, #0]
   84b54:	2a1b      	cmp	r2, #27
   84b56:	60a9      	str	r1, [r5, #8]
   84b58:	6863      	ldr	r3, [r4, #4]
   84b5a:	60eb      	str	r3, [r5, #12]
   84b5c:	d803      	bhi.n	84b66 <_realloc_r+0x10e>
   84b5e:	f105 0010 	add.w	r0, r5, #16
   84b62:	3408      	adds	r4, #8
   84b64:	e012      	b.n	84b8c <_realloc_r+0x134>
   84b66:	68a0      	ldr	r0, [r4, #8]
   84b68:	2a24      	cmp	r2, #36	; 0x24
   84b6a:	6128      	str	r0, [r5, #16]
   84b6c:	68e1      	ldr	r1, [r4, #12]
   84b6e:	6169      	str	r1, [r5, #20]
   84b70:	d003      	beq.n	84b7a <_realloc_r+0x122>
   84b72:	f105 0018 	add.w	r0, r5, #24
   84b76:	3410      	adds	r4, #16
   84b78:	e008      	b.n	84b8c <_realloc_r+0x134>
   84b7a:	6922      	ldr	r2, [r4, #16]
   84b7c:	f105 0020 	add.w	r0, r5, #32
   84b80:	61aa      	str	r2, [r5, #24]
   84b82:	6963      	ldr	r3, [r4, #20]
   84b84:	3418      	adds	r4, #24
   84b86:	61eb      	str	r3, [r5, #28]
   84b88:	e000      	b.n	84b8c <_realloc_r+0x134>
   84b8a:	4630      	mov	r0, r6
   84b8c:	6821      	ldr	r1, [r4, #0]
   84b8e:	6001      	str	r1, [r0, #0]
   84b90:	6862      	ldr	r2, [r4, #4]
   84b92:	6042      	str	r2, [r0, #4]
   84b94:	68a3      	ldr	r3, [r4, #8]
   84b96:	6083      	str	r3, [r0, #8]
   84b98:	e003      	b.n	84ba2 <_realloc_r+0x14a>
   84b9a:	4630      	mov	r0, r6
   84b9c:	4621      	mov	r1, r4
   84b9e:	f7ff ff3f 	bl	84a20 <memmove>
   84ba2:	ebc7 0a0a 	rsb	sl, r7, sl
   84ba6:	19e8      	adds	r0, r5, r7
   84ba8:	f04a 0201 	orr.w	r2, sl, #1
   84bac:	6042      	str	r2, [r0, #4]
   84bae:	686b      	ldr	r3, [r5, #4]
   84bb0:	495f      	ldr	r1, [pc, #380]	; (84d30 <_realloc_r+0x2d8>)
   84bb2:	6088      	str	r0, [r1, #8]
   84bb4:	f003 0001 	and.w	r0, r3, #1
   84bb8:	4307      	orrs	r7, r0
   84bba:	606f      	str	r7, [r5, #4]
   84bbc:	e088      	b.n	84cd0 <_realloc_r+0x278>
   84bbe:	45ba      	cmp	sl, r7
   84bc0:	db04      	blt.n	84bcc <_realloc_r+0x174>
   84bc2:	68d9      	ldr	r1, [r3, #12]
   84bc4:	6898      	ldr	r0, [r3, #8]
   84bc6:	60c1      	str	r1, [r0, #12]
   84bc8:	6088      	str	r0, [r1, #8]
   84bca:	e003      	b.n	84bd4 <_realloc_r+0x17c>
   84bcc:	eb02 0a08 	add.w	sl, r2, r8
   84bd0:	45ba      	cmp	sl, r7
   84bd2:	db31      	blt.n	84c38 <_realloc_r+0x1e0>
   84bd4:	4628      	mov	r0, r5
   84bd6:	68eb      	ldr	r3, [r5, #12]
   84bd8:	f850 1f08 	ldr.w	r1, [r0, #8]!
   84bdc:	f1a8 0204 	sub.w	r2, r8, #4
   84be0:	2a24      	cmp	r2, #36	; 0x24
   84be2:	60cb      	str	r3, [r1, #12]
   84be4:	6099      	str	r1, [r3, #8]
   84be6:	d823      	bhi.n	84c30 <_realloc_r+0x1d8>
   84be8:	2a13      	cmp	r2, #19
   84bea:	d91a      	bls.n	84c22 <_realloc_r+0x1ca>
   84bec:	6820      	ldr	r0, [r4, #0]
   84bee:	2a1b      	cmp	r2, #27
   84bf0:	60a8      	str	r0, [r5, #8]
   84bf2:	6866      	ldr	r6, [r4, #4]
   84bf4:	60ee      	str	r6, [r5, #12]
   84bf6:	d803      	bhi.n	84c00 <_realloc_r+0x1a8>
   84bf8:	f105 0010 	add.w	r0, r5, #16
   84bfc:	3408      	adds	r4, #8
   84bfe:	e010      	b.n	84c22 <_realloc_r+0x1ca>
   84c00:	68a3      	ldr	r3, [r4, #8]
   84c02:	2a24      	cmp	r2, #36	; 0x24
   84c04:	612b      	str	r3, [r5, #16]
   84c06:	68e1      	ldr	r1, [r4, #12]
   84c08:	6169      	str	r1, [r5, #20]
   84c0a:	d003      	beq.n	84c14 <_realloc_r+0x1bc>
   84c0c:	f105 0018 	add.w	r0, r5, #24
   84c10:	3410      	adds	r4, #16
   84c12:	e006      	b.n	84c22 <_realloc_r+0x1ca>
   84c14:	6922      	ldr	r2, [r4, #16]
   84c16:	61aa      	str	r2, [r5, #24]
   84c18:	6960      	ldr	r0, [r4, #20]
   84c1a:	3418      	adds	r4, #24
   84c1c:	61e8      	str	r0, [r5, #28]
   84c1e:	f105 0020 	add.w	r0, r5, #32
   84c22:	6826      	ldr	r6, [r4, #0]
   84c24:	6006      	str	r6, [r0, #0]
   84c26:	6863      	ldr	r3, [r4, #4]
   84c28:	6043      	str	r3, [r0, #4]
   84c2a:	68a1      	ldr	r1, [r4, #8]
   84c2c:	6081      	str	r1, [r0, #8]
   84c2e:	e055      	b.n	84cdc <_realloc_r+0x284>
   84c30:	4621      	mov	r1, r4
   84c32:	f7ff fef5 	bl	84a20 <memmove>
   84c36:	e051      	b.n	84cdc <_realloc_r+0x284>
   84c38:	4631      	mov	r1, r6
   84c3a:	4648      	mov	r0, r9
   84c3c:	f7ff fce0 	bl	84600 <_malloc_r>
   84c40:	4606      	mov	r6, r0
   84c42:	2800      	cmp	r0, #0
   84c44:	d044      	beq.n	84cd0 <_realloc_r+0x278>
   84c46:	f854 1c04 	ldr.w	r1, [r4, #-4]
   84c4a:	f1a0 0208 	sub.w	r2, r0, #8
   84c4e:	f021 0301 	bic.w	r3, r1, #1
   84c52:	eb0b 0103 	add.w	r1, fp, r3
   84c56:	428a      	cmp	r2, r1
   84c58:	d106      	bne.n	84c68 <_realloc_r+0x210>
   84c5a:	f850 6c04 	ldr.w	r6, [r0, #-4]
   84c5e:	f026 0503 	bic.w	r5, r6, #3
   84c62:	eb05 0a08 	add.w	sl, r5, r8
   84c66:	e038      	b.n	84cda <_realloc_r+0x282>
   84c68:	f1a8 0204 	sub.w	r2, r8, #4
   84c6c:	2a24      	cmp	r2, #36	; 0x24
   84c6e:	d828      	bhi.n	84cc2 <_realloc_r+0x26a>
   84c70:	2a13      	cmp	r2, #19
   84c72:	d91e      	bls.n	84cb2 <_realloc_r+0x25a>
   84c74:	6823      	ldr	r3, [r4, #0]
   84c76:	2a1b      	cmp	r2, #27
   84c78:	6003      	str	r3, [r0, #0]
   84c7a:	6861      	ldr	r1, [r4, #4]
   84c7c:	6041      	str	r1, [r0, #4]
   84c7e:	d804      	bhi.n	84c8a <_realloc_r+0x232>
   84c80:	f100 0008 	add.w	r0, r0, #8
   84c84:	f104 0208 	add.w	r2, r4, #8
   84c88:	e014      	b.n	84cb4 <_realloc_r+0x25c>
   84c8a:	68a0      	ldr	r0, [r4, #8]
   84c8c:	2a24      	cmp	r2, #36	; 0x24
   84c8e:	60b0      	str	r0, [r6, #8]
   84c90:	68e3      	ldr	r3, [r4, #12]
   84c92:	60f3      	str	r3, [r6, #12]
   84c94:	d004      	beq.n	84ca0 <_realloc_r+0x248>
   84c96:	f106 0010 	add.w	r0, r6, #16
   84c9a:	f104 0210 	add.w	r2, r4, #16
   84c9e:	e009      	b.n	84cb4 <_realloc_r+0x25c>
   84ca0:	6922      	ldr	r2, [r4, #16]
   84ca2:	f106 0018 	add.w	r0, r6, #24
   84ca6:	6132      	str	r2, [r6, #16]
   84ca8:	6961      	ldr	r1, [r4, #20]
   84caa:	f104 0218 	add.w	r2, r4, #24
   84cae:	6171      	str	r1, [r6, #20]
   84cb0:	e000      	b.n	84cb4 <_realloc_r+0x25c>
   84cb2:	4622      	mov	r2, r4
   84cb4:	6813      	ldr	r3, [r2, #0]
   84cb6:	6003      	str	r3, [r0, #0]
   84cb8:	6851      	ldr	r1, [r2, #4]
   84cba:	6041      	str	r1, [r0, #4]
   84cbc:	6892      	ldr	r2, [r2, #8]
   84cbe:	6082      	str	r2, [r0, #8]
   84cc0:	e002      	b.n	84cc8 <_realloc_r+0x270>
   84cc2:	4621      	mov	r1, r4
   84cc4:	f7ff feac 	bl	84a20 <memmove>
   84cc8:	4648      	mov	r0, r9
   84cca:	4621      	mov	r1, r4
   84ccc:	f7ff f984 	bl	83fd8 <_free_r>
   84cd0:	4648      	mov	r0, r9
   84cd2:	f7ff fec0 	bl	84a56 <__malloc_unlock>
   84cd6:	e028      	b.n	84d2a <_realloc_r+0x2d2>
   84cd8:	46c2      	mov	sl, r8
   84cda:	465d      	mov	r5, fp
   84cdc:	ebc7 000a 	rsb	r0, r7, sl
   84ce0:	280f      	cmp	r0, #15
   84ce2:	686a      	ldr	r2, [r5, #4]
   84ce4:	d911      	bls.n	84d0a <_realloc_r+0x2b2>
   84ce6:	f002 0601 	and.w	r6, r2, #1
   84cea:	19e9      	adds	r1, r5, r7
   84cec:	f040 0301 	orr.w	r3, r0, #1
   84cf0:	4337      	orrs	r7, r6
   84cf2:	606f      	str	r7, [r5, #4]
   84cf4:	1808      	adds	r0, r1, r0
   84cf6:	604b      	str	r3, [r1, #4]
   84cf8:	6842      	ldr	r2, [r0, #4]
   84cfa:	3108      	adds	r1, #8
   84cfc:	f042 0601 	orr.w	r6, r2, #1
   84d00:	6046      	str	r6, [r0, #4]
   84d02:	4648      	mov	r0, r9
   84d04:	f7ff f968 	bl	83fd8 <_free_r>
   84d08:	e00a      	b.n	84d20 <_realloc_r+0x2c8>
   84d0a:	f002 0601 	and.w	r6, r2, #1
   84d0e:	ea4a 0306 	orr.w	r3, sl, r6
   84d12:	606b      	str	r3, [r5, #4]
   84d14:	eb05 010a 	add.w	r1, r5, sl
   84d18:	6848      	ldr	r0, [r1, #4]
   84d1a:	f040 0201 	orr.w	r2, r0, #1
   84d1e:	604a      	str	r2, [r1, #4]
   84d20:	4648      	mov	r0, r9
   84d22:	f7ff fe98 	bl	84a56 <__malloc_unlock>
   84d26:	f105 0608 	add.w	r6, r5, #8
   84d2a:	4630      	mov	r0, r6
   84d2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84d30:	200704bc 	.word	0x200704bc

00084d34 <_sbrk_r>:
   84d34:	b538      	push	{r3, r4, r5, lr}
   84d36:	4c06      	ldr	r4, [pc, #24]	; (84d50 <_sbrk_r+0x1c>)
   84d38:	2300      	movs	r3, #0
   84d3a:	4605      	mov	r5, r0
   84d3c:	4608      	mov	r0, r1
   84d3e:	6023      	str	r3, [r4, #0]
   84d40:	f7fe f83a 	bl	82db8 <_sbrk>
   84d44:	1c43      	adds	r3, r0, #1
   84d46:	d102      	bne.n	84d4e <_sbrk_r+0x1a>
   84d48:	6821      	ldr	r1, [r4, #0]
   84d4a:	b101      	cbz	r1, 84d4e <_sbrk_r+0x1a>
   84d4c:	6029      	str	r1, [r5, #0]
   84d4e:	bd38      	pop	{r3, r4, r5, pc}
   84d50:	20078b4c 	.word	0x20078b4c

00084d54 <__sread>:
   84d54:	b510      	push	{r4, lr}
   84d56:	460c      	mov	r4, r1
   84d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84d5c:	f000 f942 	bl	84fe4 <_read_r>
   84d60:	2800      	cmp	r0, #0
   84d62:	db03      	blt.n	84d6c <__sread+0x18>
   84d64:	6d22      	ldr	r2, [r4, #80]	; 0x50
   84d66:	1813      	adds	r3, r2, r0
   84d68:	6523      	str	r3, [r4, #80]	; 0x50
   84d6a:	bd10      	pop	{r4, pc}
   84d6c:	89a3      	ldrh	r3, [r4, #12]
   84d6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
   84d72:	81a1      	strh	r1, [r4, #12]
   84d74:	bd10      	pop	{r4, pc}

00084d76 <__seofread>:
   84d76:	2000      	movs	r0, #0
   84d78:	4770      	bx	lr

00084d7a <__swrite>:
   84d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84d7e:	461d      	mov	r5, r3
   84d80:	898b      	ldrh	r3, [r1, #12]
   84d82:	460c      	mov	r4, r1
   84d84:	f403 7180 	and.w	r1, r3, #256	; 0x100
   84d88:	4616      	mov	r6, r2
   84d8a:	b20a      	sxth	r2, r1
   84d8c:	4607      	mov	r7, r0
   84d8e:	b12a      	cbz	r2, 84d9c <__swrite+0x22>
   84d90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84d94:	2200      	movs	r2, #0
   84d96:	2302      	movs	r3, #2
   84d98:	f000 f912 	bl	84fc0 <_lseek_r>
   84d9c:	89a0      	ldrh	r0, [r4, #12]
   84d9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84da2:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
   84da6:	81a3      	strh	r3, [r4, #12]
   84da8:	4638      	mov	r0, r7
   84daa:	4632      	mov	r2, r6
   84dac:	462b      	mov	r3, r5
   84dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84db2:	f000 b877 	b.w	84ea4 <_write_r>

00084db6 <__sseek>:
   84db6:	b510      	push	{r4, lr}
   84db8:	460c      	mov	r4, r1
   84dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84dbe:	f000 f8ff 	bl	84fc0 <_lseek_r>
   84dc2:	1c43      	adds	r3, r0, #1
   84dc4:	89a3      	ldrh	r3, [r4, #12]
   84dc6:	d103      	bne.n	84dd0 <__sseek+0x1a>
   84dc8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
   84dcc:	81a2      	strh	r2, [r4, #12]
   84dce:	bd10      	pop	{r4, pc}
   84dd0:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
   84dd4:	81a1      	strh	r1, [r4, #12]
   84dd6:	6520      	str	r0, [r4, #80]	; 0x50
   84dd8:	bd10      	pop	{r4, pc}

00084dda <__sclose>:
   84dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84dde:	f000 b873 	b.w	84ec8 <_close_r>

00084de2 <strcmp>:
   84de2:	f810 2b01 	ldrb.w	r2, [r0], #1
   84de6:	f811 3b01 	ldrb.w	r3, [r1], #1
   84dea:	2a01      	cmp	r2, #1
   84dec:	bf28      	it	cs
   84dee:	429a      	cmpcs	r2, r3
   84df0:	d0f7      	beq.n	84de2 <strcmp>
   84df2:	eba2 0003 	sub.w	r0, r2, r3
   84df6:	4770      	bx	lr

00084df8 <_wcrtomb_r>:
   84df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84dfc:	461d      	mov	r5, r3
   84dfe:	4b10      	ldr	r3, [pc, #64]	; (84e40 <_wcrtomb_r+0x48>)
   84e00:	b086      	sub	sp, #24
   84e02:	4604      	mov	r4, r0
   84e04:	4690      	mov	r8, r2
   84e06:	460e      	mov	r6, r1
   84e08:	681f      	ldr	r7, [r3, #0]
   84e0a:	b939      	cbnz	r1, 84e1c <_wcrtomb_r+0x24>
   84e0c:	f7ff fb5a 	bl	844c4 <__locale_charset>
   84e10:	9500      	str	r5, [sp, #0]
   84e12:	4603      	mov	r3, r0
   84e14:	a903      	add	r1, sp, #12
   84e16:	4620      	mov	r0, r4
   84e18:	4632      	mov	r2, r6
   84e1a:	e006      	b.n	84e2a <_wcrtomb_r+0x32>
   84e1c:	f7ff fb52 	bl	844c4 <__locale_charset>
   84e20:	9500      	str	r5, [sp, #0]
   84e22:	4603      	mov	r3, r0
   84e24:	4631      	mov	r1, r6
   84e26:	4620      	mov	r0, r4
   84e28:	4642      	mov	r2, r8
   84e2a:	47b8      	blx	r7
   84e2c:	1c43      	adds	r3, r0, #1
   84e2e:	d103      	bne.n	84e38 <_wcrtomb_r+0x40>
   84e30:	2100      	movs	r1, #0
   84e32:	228a      	movs	r2, #138	; 0x8a
   84e34:	6029      	str	r1, [r5, #0]
   84e36:	6022      	str	r2, [r4, #0]
   84e38:	b006      	add	sp, #24
   84e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84e3e:	bf00      	nop
   84e40:	200708cc 	.word	0x200708cc

00084e44 <wcrtomb>:
   84e44:	b530      	push	{r4, r5, lr}
   84e46:	4613      	mov	r3, r2
   84e48:	4a04      	ldr	r2, [pc, #16]	; (84e5c <wcrtomb+0x18>)
   84e4a:	4605      	mov	r5, r0
   84e4c:	460c      	mov	r4, r1
   84e4e:	6810      	ldr	r0, [r2, #0]
   84e50:	4629      	mov	r1, r5
   84e52:	4622      	mov	r2, r4
   84e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   84e58:	f7ff bfce 	b.w	84df8 <_wcrtomb_r>
   84e5c:	20070010 	.word	0x20070010

00084e60 <__ascii_wctomb>:
   84e60:	b149      	cbz	r1, 84e76 <__ascii_wctomb+0x16>
   84e62:	2aff      	cmp	r2, #255	; 0xff
   84e64:	d904      	bls.n	84e70 <__ascii_wctomb+0x10>
   84e66:	238a      	movs	r3, #138	; 0x8a
   84e68:	6003      	str	r3, [r0, #0]
   84e6a:	f04f 30ff 	mov.w	r0, #4294967295
   84e6e:	4770      	bx	lr
   84e70:	700a      	strb	r2, [r1, #0]
   84e72:	2001      	movs	r0, #1
   84e74:	4770      	bx	lr
   84e76:	4608      	mov	r0, r1
   84e78:	4770      	bx	lr

00084e7a <_wctomb_r>:
   84e7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   84e7e:	4698      	mov	r8, r3
   84e80:	4b07      	ldr	r3, [pc, #28]	; (84ea0 <_wctomb_r+0x26>)
   84e82:	4605      	mov	r5, r0
   84e84:	460f      	mov	r7, r1
   84e86:	4616      	mov	r6, r2
   84e88:	681c      	ldr	r4, [r3, #0]
   84e8a:	f7ff fb1b 	bl	844c4 <__locale_charset>
   84e8e:	f8cd 8000 	str.w	r8, [sp]
   84e92:	4603      	mov	r3, r0
   84e94:	4639      	mov	r1, r7
   84e96:	4628      	mov	r0, r5
   84e98:	4632      	mov	r2, r6
   84e9a:	47a0      	blx	r4
   84e9c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   84ea0:	200708cc 	.word	0x200708cc

00084ea4 <_write_r>:
   84ea4:	b538      	push	{r3, r4, r5, lr}
   84ea6:	4c07      	ldr	r4, [pc, #28]	; (84ec4 <_write_r+0x20>)
   84ea8:	4605      	mov	r5, r0
   84eaa:	2000      	movs	r0, #0
   84eac:	6020      	str	r0, [r4, #0]
   84eae:	4608      	mov	r0, r1
   84eb0:	4611      	mov	r1, r2
   84eb2:	461a      	mov	r2, r3
   84eb4:	f7fb f9ba 	bl	8022c <_write>
   84eb8:	1c43      	adds	r3, r0, #1
   84eba:	d102      	bne.n	84ec2 <_write_r+0x1e>
   84ebc:	6823      	ldr	r3, [r4, #0]
   84ebe:	b103      	cbz	r3, 84ec2 <_write_r+0x1e>
   84ec0:	602b      	str	r3, [r5, #0]
   84ec2:	bd38      	pop	{r3, r4, r5, pc}
   84ec4:	20078b4c 	.word	0x20078b4c

00084ec8 <_close_r>:
   84ec8:	b538      	push	{r3, r4, r5, lr}
   84eca:	4c06      	ldr	r4, [pc, #24]	; (84ee4 <_close_r+0x1c>)
   84ecc:	2300      	movs	r3, #0
   84ece:	4605      	mov	r5, r0
   84ed0:	4608      	mov	r0, r1
   84ed2:	6023      	str	r3, [r4, #0]
   84ed4:	f7fd ff96 	bl	82e04 <_close>
   84ed8:	1c43      	adds	r3, r0, #1
   84eda:	d102      	bne.n	84ee2 <_close_r+0x1a>
   84edc:	6821      	ldr	r1, [r4, #0]
   84ede:	b101      	cbz	r1, 84ee2 <_close_r+0x1a>
   84ee0:	6029      	str	r1, [r5, #0]
   84ee2:	bd38      	pop	{r3, r4, r5, pc}
   84ee4:	20078b4c 	.word	0x20078b4c

00084ee8 <_fclose_r>:
   84ee8:	b570      	push	{r4, r5, r6, lr}
   84eea:	4605      	mov	r5, r0
   84eec:	460c      	mov	r4, r1
   84eee:	2900      	cmp	r1, #0
   84ef0:	d039      	beq.n	84f66 <_fclose_r+0x7e>
   84ef2:	f7fe ff97 	bl	83e24 <__sfp_lock_acquire>
   84ef6:	b125      	cbz	r5, 84f02 <_fclose_r+0x1a>
   84ef8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   84efa:	b913      	cbnz	r3, 84f02 <_fclose_r+0x1a>
   84efc:	4628      	mov	r0, r5
   84efe:	f7fe ff2d 	bl	83d5c <__sinit>
   84f02:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   84f06:	b35e      	cbz	r6, 84f60 <_fclose_r+0x78>
   84f08:	4628      	mov	r0, r5
   84f0a:	4621      	mov	r1, r4
   84f0c:	f7fe fe34 	bl	83b78 <_fflush_r>
   84f10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   84f12:	4606      	mov	r6, r0
   84f14:	b13a      	cbz	r2, 84f26 <_fclose_r+0x3e>
   84f16:	4628      	mov	r0, r5
   84f18:	69e1      	ldr	r1, [r4, #28]
   84f1a:	4790      	blx	r2
   84f1c:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   84f20:	bf28      	it	cs
   84f22:	f04f 36ff 	movcs.w	r6, #4294967295
   84f26:	89a0      	ldrh	r0, [r4, #12]
   84f28:	f000 0180 	and.w	r1, r0, #128	; 0x80
   84f2c:	b20b      	sxth	r3, r1
   84f2e:	b11b      	cbz	r3, 84f38 <_fclose_r+0x50>
   84f30:	4628      	mov	r0, r5
   84f32:	6921      	ldr	r1, [r4, #16]
   84f34:	f7ff f850 	bl	83fd8 <_free_r>
   84f38:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84f3a:	b141      	cbz	r1, 84f4e <_fclose_r+0x66>
   84f3c:	f104 0240 	add.w	r2, r4, #64	; 0x40
   84f40:	4291      	cmp	r1, r2
   84f42:	d002      	beq.n	84f4a <_fclose_r+0x62>
   84f44:	4628      	mov	r0, r5
   84f46:	f7ff f847 	bl	83fd8 <_free_r>
   84f4a:	2000      	movs	r0, #0
   84f4c:	6320      	str	r0, [r4, #48]	; 0x30
   84f4e:	6c61      	ldr	r1, [r4, #68]	; 0x44
   84f50:	b121      	cbz	r1, 84f5c <_fclose_r+0x74>
   84f52:	4628      	mov	r0, r5
   84f54:	f7ff f840 	bl	83fd8 <_free_r>
   84f58:	2100      	movs	r1, #0
   84f5a:	6461      	str	r1, [r4, #68]	; 0x44
   84f5c:	2300      	movs	r3, #0
   84f5e:	81a3      	strh	r3, [r4, #12]
   84f60:	f7fe ff61 	bl	83e26 <__sfp_lock_release>
   84f64:	e000      	b.n	84f68 <_fclose_r+0x80>
   84f66:	460e      	mov	r6, r1
   84f68:	4630      	mov	r0, r6
   84f6a:	bd70      	pop	{r4, r5, r6, pc}

00084f6c <fclose>:
   84f6c:	4b02      	ldr	r3, [pc, #8]	; (84f78 <fclose+0xc>)
   84f6e:	4601      	mov	r1, r0
   84f70:	6818      	ldr	r0, [r3, #0]
   84f72:	f7ff bfb9 	b.w	84ee8 <_fclose_r>
   84f76:	bf00      	nop
   84f78:	20070010 	.word	0x20070010

00084f7c <_fstat_r>:
   84f7c:	b538      	push	{r3, r4, r5, lr}
   84f7e:	4c07      	ldr	r4, [pc, #28]	; (84f9c <_fstat_r+0x20>)
   84f80:	2300      	movs	r3, #0
   84f82:	4605      	mov	r5, r0
   84f84:	4608      	mov	r0, r1
   84f86:	4611      	mov	r1, r2
   84f88:	6023      	str	r3, [r4, #0]
   84f8a:	f7fd ff3f 	bl	82e0c <_fstat>
   84f8e:	1c43      	adds	r3, r0, #1
   84f90:	d102      	bne.n	84f98 <_fstat_r+0x1c>
   84f92:	6821      	ldr	r1, [r4, #0]
   84f94:	b101      	cbz	r1, 84f98 <_fstat_r+0x1c>
   84f96:	6029      	str	r1, [r5, #0]
   84f98:	bd38      	pop	{r3, r4, r5, pc}
   84f9a:	bf00      	nop
   84f9c:	20078b4c 	.word	0x20078b4c

00084fa0 <_isatty_r>:
   84fa0:	b538      	push	{r3, r4, r5, lr}
   84fa2:	4c06      	ldr	r4, [pc, #24]	; (84fbc <_isatty_r+0x1c>)
   84fa4:	2300      	movs	r3, #0
   84fa6:	4605      	mov	r5, r0
   84fa8:	4608      	mov	r0, r1
   84faa:	6023      	str	r3, [r4, #0]
   84fac:	f7fd ff34 	bl	82e18 <_isatty>
   84fb0:	1c43      	adds	r3, r0, #1
   84fb2:	d102      	bne.n	84fba <_isatty_r+0x1a>
   84fb4:	6821      	ldr	r1, [r4, #0]
   84fb6:	b101      	cbz	r1, 84fba <_isatty_r+0x1a>
   84fb8:	6029      	str	r1, [r5, #0]
   84fba:	bd38      	pop	{r3, r4, r5, pc}
   84fbc:	20078b4c 	.word	0x20078b4c

00084fc0 <_lseek_r>:
   84fc0:	b538      	push	{r3, r4, r5, lr}
   84fc2:	4c07      	ldr	r4, [pc, #28]	; (84fe0 <_lseek_r+0x20>)
   84fc4:	4605      	mov	r5, r0
   84fc6:	2000      	movs	r0, #0
   84fc8:	6020      	str	r0, [r4, #0]
   84fca:	4608      	mov	r0, r1
   84fcc:	4611      	mov	r1, r2
   84fce:	461a      	mov	r2, r3
   84fd0:	f7fd ff26 	bl	82e20 <_lseek>
   84fd4:	1c43      	adds	r3, r0, #1
   84fd6:	d102      	bne.n	84fde <_lseek_r+0x1e>
   84fd8:	6823      	ldr	r3, [r4, #0]
   84fda:	b103      	cbz	r3, 84fde <_lseek_r+0x1e>
   84fdc:	602b      	str	r3, [r5, #0]
   84fde:	bd38      	pop	{r3, r4, r5, pc}
   84fe0:	20078b4c 	.word	0x20078b4c

00084fe4 <_read_r>:
   84fe4:	b538      	push	{r3, r4, r5, lr}
   84fe6:	4c07      	ldr	r4, [pc, #28]	; (85004 <_read_r+0x20>)
   84fe8:	4605      	mov	r5, r0
   84fea:	2000      	movs	r0, #0
   84fec:	6020      	str	r0, [r4, #0]
   84fee:	4608      	mov	r0, r1
   84ff0:	4611      	mov	r1, r2
   84ff2:	461a      	mov	r2, r3
   84ff4:	f7fb f8d6 	bl	801a4 <_read>
   84ff8:	1c43      	adds	r3, r0, #1
   84ffa:	d102      	bne.n	85002 <_read_r+0x1e>
   84ffc:	6823      	ldr	r3, [r4, #0]
   84ffe:	b103      	cbz	r3, 85002 <_read_r+0x1e>
   85000:	602b      	str	r3, [r5, #0]
   85002:	bd38      	pop	{r3, r4, r5, pc}
   85004:	20078b4c 	.word	0x20078b4c

00085008 <__aeabi_uldivmod>:
   85008:	b94b      	cbnz	r3, 8501e <__aeabi_uldivmod+0x16>
   8500a:	b942      	cbnz	r2, 8501e <__aeabi_uldivmod+0x16>
   8500c:	2900      	cmp	r1, #0
   8500e:	bf08      	it	eq
   85010:	2800      	cmpeq	r0, #0
   85012:	d002      	beq.n	8501a <__aeabi_uldivmod+0x12>
   85014:	f04f 31ff 	mov.w	r1, #4294967295
   85018:	4608      	mov	r0, r1
   8501a:	f000 b83b 	b.w	85094 <__aeabi_idiv0>
   8501e:	b082      	sub	sp, #8
   85020:	46ec      	mov	ip, sp
   85022:	e92d 5000 	stmdb	sp!, {ip, lr}
   85026:	f000 f81d 	bl	85064 <__gnu_uldivmod_helper>
   8502a:	f8dd e004 	ldr.w	lr, [sp, #4]
   8502e:	b002      	add	sp, #8
   85030:	bc0c      	pop	{r2, r3}
   85032:	4770      	bx	lr

00085034 <__gnu_ldivmod_helper>:
   85034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85038:	4616      	mov	r6, r2
   8503a:	4698      	mov	r8, r3
   8503c:	4604      	mov	r4, r0
   8503e:	460d      	mov	r5, r1
   85040:	f000 f82a 	bl	85098 <__divdi3>
   85044:	fb06 fc01 	mul.w	ip, r6, r1
   85048:	fba6 2300 	umull	r2, r3, r6, r0
   8504c:	fb00 c708 	mla	r7, r0, r8, ip
   85050:	18fb      	adds	r3, r7, r3
   85052:	1aa2      	subs	r2, r4, r2
   85054:	eb65 0303 	sbc.w	r3, r5, r3
   85058:	9c06      	ldr	r4, [sp, #24]
   8505a:	e9c4 2300 	strd	r2, r3, [r4]
   8505e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85062:	bf00      	nop

00085064 <__gnu_uldivmod_helper>:
   85064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85068:	4690      	mov	r8, r2
   8506a:	4606      	mov	r6, r0
   8506c:	460f      	mov	r7, r1
   8506e:	461d      	mov	r5, r3
   85070:	f000 f970 	bl	85354 <__udivdi3>
   85074:	fb00 f305 	mul.w	r3, r0, r5
   85078:	fba0 4508 	umull	r4, r5, r0, r8
   8507c:	fb08 3801 	mla	r8, r8, r1, r3
   85080:	9b06      	ldr	r3, [sp, #24]
   85082:	4445      	add	r5, r8
   85084:	1b34      	subs	r4, r6, r4
   85086:	eb67 0505 	sbc.w	r5, r7, r5
   8508a:	e9c3 4500 	strd	r4, r5, [r3]
   8508e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85092:	bf00      	nop

00085094 <__aeabi_idiv0>:
   85094:	4770      	bx	lr
   85096:	bf00      	nop

00085098 <__divdi3>:
   85098:	2900      	cmp	r1, #0
   8509a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8509e:	461d      	mov	r5, r3
   850a0:	f2c0 809d 	blt.w	851de <__divdi3+0x146>
   850a4:	2400      	movs	r4, #0
   850a6:	2d00      	cmp	r5, #0
   850a8:	f2c0 8094 	blt.w	851d4 <__divdi3+0x13c>
   850ac:	4680      	mov	r8, r0
   850ae:	460f      	mov	r7, r1
   850b0:	4694      	mov	ip, r2
   850b2:	461e      	mov	r6, r3
   850b4:	bbe3      	cbnz	r3, 85130 <__divdi3+0x98>
   850b6:	428a      	cmp	r2, r1
   850b8:	d955      	bls.n	85166 <__divdi3+0xce>
   850ba:	fab2 f782 	clz	r7, r2
   850be:	b147      	cbz	r7, 850d2 <__divdi3+0x3a>
   850c0:	f1c7 0520 	rsb	r5, r7, #32
   850c4:	fa20 f605 	lsr.w	r6, r0, r5
   850c8:	fa01 f107 	lsl.w	r1, r1, r7
   850cc:	40ba      	lsls	r2, r7
   850ce:	40b8      	lsls	r0, r7
   850d0:	4331      	orrs	r1, r6
   850d2:	0c17      	lsrs	r7, r2, #16
   850d4:	fbb1 f6f7 	udiv	r6, r1, r7
   850d8:	fa1f fc82 	uxth.w	ip, r2
   850dc:	fb07 1116 	mls	r1, r7, r6, r1
   850e0:	fb0c f506 	mul.w	r5, ip, r6
   850e4:	0c03      	lsrs	r3, r0, #16
   850e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   850ea:	429d      	cmp	r5, r3
   850ec:	d908      	bls.n	85100 <__divdi3+0x68>
   850ee:	1e71      	subs	r1, r6, #1
   850f0:	189b      	adds	r3, r3, r2
   850f2:	f080 8113 	bcs.w	8531c <__divdi3+0x284>
   850f6:	429d      	cmp	r5, r3
   850f8:	f240 8110 	bls.w	8531c <__divdi3+0x284>
   850fc:	3e02      	subs	r6, #2
   850fe:	189b      	adds	r3, r3, r2
   85100:	1b59      	subs	r1, r3, r5
   85102:	fbb1 f5f7 	udiv	r5, r1, r7
   85106:	fb07 1315 	mls	r3, r7, r5, r1
   8510a:	fb0c fc05 	mul.w	ip, ip, r5
   8510e:	b280      	uxth	r0, r0
   85110:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
   85114:	458c      	cmp	ip, r1
   85116:	d907      	bls.n	85128 <__divdi3+0x90>
   85118:	1e6b      	subs	r3, r5, #1
   8511a:	188a      	adds	r2, r1, r2
   8511c:	f080 8100 	bcs.w	85320 <__divdi3+0x288>
   85120:	4594      	cmp	ip, r2
   85122:	f240 80fd 	bls.w	85320 <__divdi3+0x288>
   85126:	3d02      	subs	r5, #2
   85128:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
   8512c:	2500      	movs	r5, #0
   8512e:	e003      	b.n	85138 <__divdi3+0xa0>
   85130:	428b      	cmp	r3, r1
   85132:	d90c      	bls.n	8514e <__divdi3+0xb6>
   85134:	2500      	movs	r5, #0
   85136:	4629      	mov	r1, r5
   85138:	460a      	mov	r2, r1
   8513a:	462b      	mov	r3, r5
   8513c:	b114      	cbz	r4, 85144 <__divdi3+0xac>
   8513e:	4252      	negs	r2, r2
   85140:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   85144:	4610      	mov	r0, r2
   85146:	4619      	mov	r1, r3
   85148:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8514c:	4770      	bx	lr
   8514e:	fab3 f583 	clz	r5, r3
   85152:	2d00      	cmp	r5, #0
   85154:	f040 8087 	bne.w	85266 <__divdi3+0x1ce>
   85158:	428b      	cmp	r3, r1
   8515a:	d301      	bcc.n	85160 <__divdi3+0xc8>
   8515c:	4282      	cmp	r2, r0
   8515e:	d8ea      	bhi.n	85136 <__divdi3+0x9e>
   85160:	2500      	movs	r5, #0
   85162:	2101      	movs	r1, #1
   85164:	e7e8      	b.n	85138 <__divdi3+0xa0>
   85166:	b912      	cbnz	r2, 8516e <__divdi3+0xd6>
   85168:	2601      	movs	r6, #1
   8516a:	fbb6 f2f2 	udiv	r2, r6, r2
   8516e:	fab2 f682 	clz	r6, r2
   85172:	2e00      	cmp	r6, #0
   85174:	d139      	bne.n	851ea <__divdi3+0x152>
   85176:	1a8e      	subs	r6, r1, r2
   85178:	0c13      	lsrs	r3, r2, #16
   8517a:	fa1f fc82 	uxth.w	ip, r2
   8517e:	2501      	movs	r5, #1
   85180:	fbb6 f7f3 	udiv	r7, r6, r3
   85184:	fb03 6117 	mls	r1, r3, r7, r6
   85188:	fb0c f807 	mul.w	r8, ip, r7
   8518c:	ea4f 4910 	mov.w	r9, r0, lsr #16
   85190:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
   85194:	45b0      	cmp	r8, r6
   85196:	d906      	bls.n	851a6 <__divdi3+0x10e>
   85198:	1e79      	subs	r1, r7, #1
   8519a:	18b6      	adds	r6, r6, r2
   8519c:	d202      	bcs.n	851a4 <__divdi3+0x10c>
   8519e:	45b0      	cmp	r8, r6
   851a0:	f200 80d3 	bhi.w	8534a <__divdi3+0x2b2>
   851a4:	460f      	mov	r7, r1
   851a6:	ebc8 0606 	rsb	r6, r8, r6
   851aa:	fbb6 f1f3 	udiv	r1, r6, r3
   851ae:	fb03 6311 	mls	r3, r3, r1, r6
   851b2:	fb0c fc01 	mul.w	ip, ip, r1
   851b6:	b280      	uxth	r0, r0
   851b8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   851bc:	459c      	cmp	ip, r3
   851be:	d906      	bls.n	851ce <__divdi3+0x136>
   851c0:	1e4e      	subs	r6, r1, #1
   851c2:	189a      	adds	r2, r3, r2
   851c4:	d202      	bcs.n	851cc <__divdi3+0x134>
   851c6:	4594      	cmp	ip, r2
   851c8:	f200 80c2 	bhi.w	85350 <__divdi3+0x2b8>
   851cc:	4631      	mov	r1, r6
   851ce:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   851d2:	e7b1      	b.n	85138 <__divdi3+0xa0>
   851d4:	43e4      	mvns	r4, r4
   851d6:	4252      	negs	r2, r2
   851d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   851dc:	e766      	b.n	850ac <__divdi3+0x14>
   851de:	4240      	negs	r0, r0
   851e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   851e4:	f04f 34ff 	mov.w	r4, #4294967295
   851e8:	e75d      	b.n	850a6 <__divdi3+0xe>
   851ea:	40b2      	lsls	r2, r6
   851ec:	f1c6 0920 	rsb	r9, r6, #32
   851f0:	fa21 f709 	lsr.w	r7, r1, r9
   851f4:	fa20 f909 	lsr.w	r9, r0, r9
   851f8:	fa01 f106 	lsl.w	r1, r1, r6
   851fc:	0c13      	lsrs	r3, r2, #16
   851fe:	fbb7 f8f3 	udiv	r8, r7, r3
   85202:	fa1f fc82 	uxth.w	ip, r2
   85206:	fb03 7718 	mls	r7, r3, r8, r7
   8520a:	fb0c f508 	mul.w	r5, ip, r8
   8520e:	ea49 0901 	orr.w	r9, r9, r1
   85212:	ea4f 4119 	mov.w	r1, r9, lsr #16
   85216:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
   8521a:	40b0      	lsls	r0, r6
   8521c:	42bd      	cmp	r5, r7
   8521e:	d90a      	bls.n	85236 <__divdi3+0x19e>
   85220:	18bf      	adds	r7, r7, r2
   85222:	f108 36ff 	add.w	r6, r8, #4294967295
   85226:	f080 808e 	bcs.w	85346 <__divdi3+0x2ae>
   8522a:	42bd      	cmp	r5, r7
   8522c:	f240 808b 	bls.w	85346 <__divdi3+0x2ae>
   85230:	f1a8 0802 	sub.w	r8, r8, #2
   85234:	18bf      	adds	r7, r7, r2
   85236:	1b79      	subs	r1, r7, r5
   85238:	fbb1 f5f3 	udiv	r5, r1, r3
   8523c:	fb03 1715 	mls	r7, r3, r5, r1
   85240:	fb0c f605 	mul.w	r6, ip, r5
   85244:	fa1f f989 	uxth.w	r9, r9
   85248:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
   8524c:	428e      	cmp	r6, r1
   8524e:	d906      	bls.n	8525e <__divdi3+0x1c6>
   85250:	1e6f      	subs	r7, r5, #1
   85252:	1889      	adds	r1, r1, r2
   85254:	d271      	bcs.n	8533a <__divdi3+0x2a2>
   85256:	428e      	cmp	r6, r1
   85258:	d96f      	bls.n	8533a <__divdi3+0x2a2>
   8525a:	3d02      	subs	r5, #2
   8525c:	1889      	adds	r1, r1, r2
   8525e:	1b8e      	subs	r6, r1, r6
   85260:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
   85264:	e78c      	b.n	85180 <__divdi3+0xe8>
   85266:	f1c5 0120 	rsb	r1, r5, #32
   8526a:	fa22 f301 	lsr.w	r3, r2, r1
   8526e:	fa06 f605 	lsl.w	r6, r6, r5
   85272:	fa27 f201 	lsr.w	r2, r7, r1
   85276:	fa07 f705 	lsl.w	r7, r7, r5
   8527a:	fa20 f101 	lsr.w	r1, r0, r1
   8527e:	431e      	orrs	r6, r3
   85280:	ea4f 4916 	mov.w	r9, r6, lsr #16
   85284:	fbb2 f8f9 	udiv	r8, r2, r9
   85288:	fa1f fa86 	uxth.w	sl, r6
   8528c:	fb09 2218 	mls	r2, r9, r8, r2
   85290:	fb0a fb08 	mul.w	fp, sl, r8
   85294:	430f      	orrs	r7, r1
   85296:	0c3b      	lsrs	r3, r7, #16
   85298:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8529c:	4593      	cmp	fp, r2
   8529e:	fa0c fc05 	lsl.w	ip, ip, r5
   852a2:	d908      	bls.n	852b6 <__divdi3+0x21e>
   852a4:	1992      	adds	r2, r2, r6
   852a6:	f108 31ff 	add.w	r1, r8, #4294967295
   852aa:	d24a      	bcs.n	85342 <__divdi3+0x2aa>
   852ac:	4593      	cmp	fp, r2
   852ae:	d948      	bls.n	85342 <__divdi3+0x2aa>
   852b0:	f1a8 0802 	sub.w	r8, r8, #2
   852b4:	1992      	adds	r2, r2, r6
   852b6:	ebcb 0302 	rsb	r3, fp, r2
   852ba:	fbb3 f1f9 	udiv	r1, r3, r9
   852be:	fb09 3211 	mls	r2, r9, r1, r3
   852c2:	fb0a fa01 	mul.w	sl, sl, r1
   852c6:	b2bf      	uxth	r7, r7
   852c8:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
   852cc:	459a      	cmp	sl, r3
   852ce:	d906      	bls.n	852de <__divdi3+0x246>
   852d0:	1e4a      	subs	r2, r1, #1
   852d2:	199b      	adds	r3, r3, r6
   852d4:	d233      	bcs.n	8533e <__divdi3+0x2a6>
   852d6:	459a      	cmp	sl, r3
   852d8:	d931      	bls.n	8533e <__divdi3+0x2a6>
   852da:	3902      	subs	r1, #2
   852dc:	199b      	adds	r3, r3, r6
   852de:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
   852e2:	0c0f      	lsrs	r7, r1, #16
   852e4:	fa1f f88c 	uxth.w	r8, ip
   852e8:	fb08 f607 	mul.w	r6, r8, r7
   852ec:	b28a      	uxth	r2, r1
   852ee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   852f2:	fb08 f802 	mul.w	r8, r8, r2
   852f6:	fb0c 6202 	mla	r2, ip, r2, r6
   852fa:	fb0c fc07 	mul.w	ip, ip, r7
   852fe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   85302:	4296      	cmp	r6, r2
   85304:	bf88      	it	hi
   85306:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
   8530a:	ebca 0303 	rsb	r3, sl, r3
   8530e:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
   85312:	4563      	cmp	r3, ip
   85314:	d30e      	bcc.n	85334 <__divdi3+0x29c>
   85316:	d005      	beq.n	85324 <__divdi3+0x28c>
   85318:	2500      	movs	r5, #0
   8531a:	e70d      	b.n	85138 <__divdi3+0xa0>
   8531c:	460e      	mov	r6, r1
   8531e:	e6ef      	b.n	85100 <__divdi3+0x68>
   85320:	461d      	mov	r5, r3
   85322:	e701      	b.n	85128 <__divdi3+0x90>
   85324:	fa00 f005 	lsl.w	r0, r0, r5
   85328:	fa1f f888 	uxth.w	r8, r8
   8532c:	eb08 4502 	add.w	r5, r8, r2, lsl #16
   85330:	42a8      	cmp	r0, r5
   85332:	d2f1      	bcs.n	85318 <__divdi3+0x280>
   85334:	3901      	subs	r1, #1
   85336:	2500      	movs	r5, #0
   85338:	e6fe      	b.n	85138 <__divdi3+0xa0>
   8533a:	463d      	mov	r5, r7
   8533c:	e78f      	b.n	8525e <__divdi3+0x1c6>
   8533e:	4611      	mov	r1, r2
   85340:	e7cd      	b.n	852de <__divdi3+0x246>
   85342:	4688      	mov	r8, r1
   85344:	e7b7      	b.n	852b6 <__divdi3+0x21e>
   85346:	46b0      	mov	r8, r6
   85348:	e775      	b.n	85236 <__divdi3+0x19e>
   8534a:	3f02      	subs	r7, #2
   8534c:	18b6      	adds	r6, r6, r2
   8534e:	e72a      	b.n	851a6 <__divdi3+0x10e>
   85350:	3902      	subs	r1, #2
   85352:	e73c      	b.n	851ce <__divdi3+0x136>

00085354 <__udivdi3>:
   85354:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   85358:	4614      	mov	r4, r2
   8535a:	4605      	mov	r5, r0
   8535c:	460e      	mov	r6, r1
   8535e:	2b00      	cmp	r3, #0
   85360:	d13d      	bne.n	853de <__udivdi3+0x8a>
   85362:	428a      	cmp	r2, r1
   85364:	d949      	bls.n	853fa <__udivdi3+0xa6>
   85366:	fab2 f782 	clz	r7, r2
   8536a:	b147      	cbz	r7, 8537e <__udivdi3+0x2a>
   8536c:	f1c7 0120 	rsb	r1, r7, #32
   85370:	fa20 f201 	lsr.w	r2, r0, r1
   85374:	fa06 f607 	lsl.w	r6, r6, r7
   85378:	40bc      	lsls	r4, r7
   8537a:	40bd      	lsls	r5, r7
   8537c:	4316      	orrs	r6, r2
   8537e:	0c22      	lsrs	r2, r4, #16
   85380:	fbb6 f0f2 	udiv	r0, r6, r2
   85384:	b2a1      	uxth	r1, r4
   85386:	fb02 6610 	mls	r6, r2, r0, r6
   8538a:	fb01 f300 	mul.w	r3, r1, r0
   8538e:	0c2f      	lsrs	r7, r5, #16
   85390:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   85394:	42b3      	cmp	r3, r6
   85396:	d908      	bls.n	853aa <__udivdi3+0x56>
   85398:	1e47      	subs	r7, r0, #1
   8539a:	1936      	adds	r6, r6, r4
   8539c:	f080 80fa 	bcs.w	85594 <__udivdi3+0x240>
   853a0:	42b3      	cmp	r3, r6
   853a2:	f240 80f7 	bls.w	85594 <__udivdi3+0x240>
   853a6:	3802      	subs	r0, #2
   853a8:	1936      	adds	r6, r6, r4
   853aa:	1af6      	subs	r6, r6, r3
   853ac:	fbb6 f3f2 	udiv	r3, r6, r2
   853b0:	fb02 6213 	mls	r2, r2, r3, r6
   853b4:	fb01 f103 	mul.w	r1, r1, r3
   853b8:	b2ad      	uxth	r5, r5
   853ba:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
   853be:	4291      	cmp	r1, r2
   853c0:	d907      	bls.n	853d2 <__udivdi3+0x7e>
   853c2:	1e5e      	subs	r6, r3, #1
   853c4:	1912      	adds	r2, r2, r4
   853c6:	f080 80e7 	bcs.w	85598 <__udivdi3+0x244>
   853ca:	4291      	cmp	r1, r2
   853cc:	f240 80e4 	bls.w	85598 <__udivdi3+0x244>
   853d0:	3b02      	subs	r3, #2
   853d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   853d6:	2100      	movs	r1, #0
   853d8:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   853dc:	4770      	bx	lr
   853de:	428b      	cmp	r3, r1
   853e0:	d843      	bhi.n	8546a <__udivdi3+0x116>
   853e2:	fab3 f483 	clz	r4, r3
   853e6:	2c00      	cmp	r4, #0
   853e8:	d142      	bne.n	85470 <__udivdi3+0x11c>
   853ea:	428b      	cmp	r3, r1
   853ec:	d302      	bcc.n	853f4 <__udivdi3+0xa0>
   853ee:	4282      	cmp	r2, r0
   853f0:	f200 80e1 	bhi.w	855b6 <__udivdi3+0x262>
   853f4:	2100      	movs	r1, #0
   853f6:	2001      	movs	r0, #1
   853f8:	e7ee      	b.n	853d8 <__udivdi3+0x84>
   853fa:	b912      	cbnz	r2, 85402 <__udivdi3+0xae>
   853fc:	2701      	movs	r7, #1
   853fe:	fbb7 f4f2 	udiv	r4, r7, r2
   85402:	fab4 f284 	clz	r2, r4
   85406:	2a00      	cmp	r2, #0
   85408:	f040 8089 	bne.w	8551e <__udivdi3+0x1ca>
   8540c:	1b0a      	subs	r2, r1, r4
   8540e:	0c23      	lsrs	r3, r4, #16
   85410:	b2a7      	uxth	r7, r4
   85412:	2101      	movs	r1, #1
   85414:	fbb2 f6f3 	udiv	r6, r2, r3
   85418:	fb03 2216 	mls	r2, r3, r6, r2
   8541c:	fb07 f006 	mul.w	r0, r7, r6
   85420:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   85424:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   85428:	4290      	cmp	r0, r2
   8542a:	d907      	bls.n	8543c <__udivdi3+0xe8>
   8542c:	1912      	adds	r2, r2, r4
   8542e:	f106 3cff 	add.w	ip, r6, #4294967295
   85432:	d202      	bcs.n	8543a <__udivdi3+0xe6>
   85434:	4290      	cmp	r0, r2
   85436:	f200 80d0 	bhi.w	855da <__udivdi3+0x286>
   8543a:	4666      	mov	r6, ip
   8543c:	1a12      	subs	r2, r2, r0
   8543e:	fbb2 f0f3 	udiv	r0, r2, r3
   85442:	fb03 2310 	mls	r3, r3, r0, r2
   85446:	fb07 f700 	mul.w	r7, r7, r0
   8544a:	b2ad      	uxth	r5, r5
   8544c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   85450:	429f      	cmp	r7, r3
   85452:	d907      	bls.n	85464 <__udivdi3+0x110>
   85454:	1e42      	subs	r2, r0, #1
   85456:	191b      	adds	r3, r3, r4
   85458:	f080 80a0 	bcs.w	8559c <__udivdi3+0x248>
   8545c:	429f      	cmp	r7, r3
   8545e:	f240 809d 	bls.w	8559c <__udivdi3+0x248>
   85462:	3802      	subs	r0, #2
   85464:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   85468:	e7b6      	b.n	853d8 <__udivdi3+0x84>
   8546a:	2100      	movs	r1, #0
   8546c:	4608      	mov	r0, r1
   8546e:	e7b3      	b.n	853d8 <__udivdi3+0x84>
   85470:	f1c4 0620 	rsb	r6, r4, #32
   85474:	fa22 f706 	lsr.w	r7, r2, r6
   85478:	fa03 f304 	lsl.w	r3, r3, r4
   8547c:	fa21 f506 	lsr.w	r5, r1, r6
   85480:	fa01 f104 	lsl.w	r1, r1, r4
   85484:	fa20 f606 	lsr.w	r6, r0, r6
   85488:	433b      	orrs	r3, r7
   8548a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8548e:	fbb5 f7fc 	udiv	r7, r5, ip
   85492:	fa1f f883 	uxth.w	r8, r3
   85496:	fb0c 5517 	mls	r5, ip, r7, r5
   8549a:	fb08 f907 	mul.w	r9, r8, r7
   8549e:	ea46 0a01 	orr.w	sl, r6, r1
   854a2:	ea4f 411a 	mov.w	r1, sl, lsr #16
   854a6:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   854aa:	45a9      	cmp	r9, r5
   854ac:	fa02 f204 	lsl.w	r2, r2, r4
   854b0:	d904      	bls.n	854bc <__udivdi3+0x168>
   854b2:	1e7e      	subs	r6, r7, #1
   854b4:	18ed      	adds	r5, r5, r3
   854b6:	f0c0 8081 	bcc.w	855bc <__udivdi3+0x268>
   854ba:	4637      	mov	r7, r6
   854bc:	ebc9 0105 	rsb	r1, r9, r5
   854c0:	fbb1 f6fc 	udiv	r6, r1, ip
   854c4:	fb0c 1516 	mls	r5, ip, r6, r1
   854c8:	fb08 f806 	mul.w	r8, r8, r6
   854cc:	fa1f fa8a 	uxth.w	sl, sl
   854d0:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
   854d4:	4588      	cmp	r8, r1
   854d6:	d903      	bls.n	854e0 <__udivdi3+0x18c>
   854d8:	1e75      	subs	r5, r6, #1
   854da:	18c9      	adds	r1, r1, r3
   854dc:	d374      	bcc.n	855c8 <__udivdi3+0x274>
   854de:	462e      	mov	r6, r5
   854e0:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   854e4:	0c37      	lsrs	r7, r6, #16
   854e6:	fa1f fc82 	uxth.w	ip, r2
   854ea:	fb0c f507 	mul.w	r5, ip, r7
   854ee:	0c12      	lsrs	r2, r2, #16
   854f0:	b2b3      	uxth	r3, r6
   854f2:	fb0c fc03 	mul.w	ip, ip, r3
   854f6:	fb02 5303 	mla	r3, r2, r3, r5
   854fa:	fb02 f207 	mul.w	r2, r2, r7
   854fe:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   85502:	429d      	cmp	r5, r3
   85504:	bf88      	it	hi
   85506:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
   8550a:	ebc8 0101 	rsb	r1, r8, r1
   8550e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   85512:	4291      	cmp	r1, r2
   85514:	d34c      	bcc.n	855b0 <__udivdi3+0x25c>
   85516:	d043      	beq.n	855a0 <__udivdi3+0x24c>
   85518:	4630      	mov	r0, r6
   8551a:	2100      	movs	r1, #0
   8551c:	e75c      	b.n	853d8 <__udivdi3+0x84>
   8551e:	4094      	lsls	r4, r2
   85520:	f1c2 0520 	rsb	r5, r2, #32
   85524:	fa21 f605 	lsr.w	r6, r1, r5
   85528:	fa20 f505 	lsr.w	r5, r0, r5
   8552c:	fa01 f102 	lsl.w	r1, r1, r2
   85530:	0c23      	lsrs	r3, r4, #16
   85532:	fbb6 fcf3 	udiv	ip, r6, r3
   85536:	b2a7      	uxth	r7, r4
   85538:	fb03 661c 	mls	r6, r3, ip, r6
   8553c:	fb07 f80c 	mul.w	r8, r7, ip
   85540:	4329      	orrs	r1, r5
   85542:	0c0d      	lsrs	r5, r1, #16
   85544:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   85548:	45b0      	cmp	r8, r6
   8554a:	fa00 f502 	lsl.w	r5, r0, r2
   8554e:	d908      	bls.n	85562 <__udivdi3+0x20e>
   85550:	1936      	adds	r6, r6, r4
   85552:	f10c 30ff 	add.w	r0, ip, #4294967295
   85556:	d23e      	bcs.n	855d6 <__udivdi3+0x282>
   85558:	45b0      	cmp	r8, r6
   8555a:	d93c      	bls.n	855d6 <__udivdi3+0x282>
   8555c:	f1ac 0c02 	sub.w	ip, ip, #2
   85560:	1936      	adds	r6, r6, r4
   85562:	ebc8 0206 	rsb	r2, r8, r6
   85566:	fbb2 f0f3 	udiv	r0, r2, r3
   8556a:	fb03 2610 	mls	r6, r3, r0, r2
   8556e:	fb07 f800 	mul.w	r8, r7, r0
   85572:	b289      	uxth	r1, r1
   85574:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   85578:	4590      	cmp	r8, r2
   8557a:	d906      	bls.n	8558a <__udivdi3+0x236>
   8557c:	1e46      	subs	r6, r0, #1
   8557e:	1912      	adds	r2, r2, r4
   85580:	d227      	bcs.n	855d2 <__udivdi3+0x27e>
   85582:	4590      	cmp	r8, r2
   85584:	d925      	bls.n	855d2 <__udivdi3+0x27e>
   85586:	3802      	subs	r0, #2
   85588:	1912      	adds	r2, r2, r4
   8558a:	ebc8 0202 	rsb	r2, r8, r2
   8558e:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
   85592:	e73f      	b.n	85414 <__udivdi3+0xc0>
   85594:	4638      	mov	r0, r7
   85596:	e708      	b.n	853aa <__udivdi3+0x56>
   85598:	4633      	mov	r3, r6
   8559a:	e71a      	b.n	853d2 <__udivdi3+0x7e>
   8559c:	4610      	mov	r0, r2
   8559e:	e761      	b.n	85464 <__udivdi3+0x110>
   855a0:	fa00 f004 	lsl.w	r0, r0, r4
   855a4:	fa1f fc8c 	uxth.w	ip, ip
   855a8:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
   855ac:	4298      	cmp	r0, r3
   855ae:	d2b3      	bcs.n	85518 <__udivdi3+0x1c4>
   855b0:	1e70      	subs	r0, r6, #1
   855b2:	2100      	movs	r1, #0
   855b4:	e710      	b.n	853d8 <__udivdi3+0x84>
   855b6:	4621      	mov	r1, r4
   855b8:	4620      	mov	r0, r4
   855ba:	e70d      	b.n	853d8 <__udivdi3+0x84>
   855bc:	45a9      	cmp	r9, r5
   855be:	f67f af7c 	bls.w	854ba <__udivdi3+0x166>
   855c2:	3f02      	subs	r7, #2
   855c4:	18ed      	adds	r5, r5, r3
   855c6:	e779      	b.n	854bc <__udivdi3+0x168>
   855c8:	4588      	cmp	r8, r1
   855ca:	d988      	bls.n	854de <__udivdi3+0x18a>
   855cc:	3e02      	subs	r6, #2
   855ce:	18c9      	adds	r1, r1, r3
   855d0:	e786      	b.n	854e0 <__udivdi3+0x18c>
   855d2:	4630      	mov	r0, r6
   855d4:	e7d9      	b.n	8558a <__udivdi3+0x236>
   855d6:	4684      	mov	ip, r0
   855d8:	e7c3      	b.n	85562 <__udivdi3+0x20e>
   855da:	3e02      	subs	r6, #2
   855dc:	1912      	adds	r2, r2, r4
   855de:	e72d      	b.n	8543c <__udivdi3+0xe8>
   855e0:	6d6d6f43 	.word	0x6d6d6f43
   855e4:	63696e75 	.word	0x63696e75
   855e8:	6f697461 	.word	0x6f697461
   855ec:	0000006e 	.word	0x0000006e
   855f0:	6c756f43 	.word	0x6c756f43
   855f4:	6f6e2064 	.word	0x6f6e2064
   855f8:	72632074 	.word	0x72632074
   855fc:	65746165 	.word	0x65746165
   85600:	73617420 	.word	0x73617420
   85604:	6f43206b 	.word	0x6f43206b
   85608:	6e756d6d 	.word	0x6e756d6d
   8560c:	74616369 	.word	0x74616369
   85610:	006e6f69 	.word	0x006e6f69
   85614:	00484147 	.word	0x00484147
   85618:	646e6553 	.word	0x646e6553
   8561c:	0a642520 	.word	0x0a642520
   85620:	0000000d 	.word	0x0000000d
   85624:	09097325 	.word	0x09097325
   85628:	25096325 	.word	0x25096325
   8562c:	75250975 	.word	0x75250975
   85630:	0d752509 	.word	0x0d752509
   85634:	0000000a 	.word	0x0000000a
   85638:	454c4449 	.word	0x454c4449
   8563c:	00000000 	.word	0x00000000
   85640:	00000a0d 	.word	0x00000a0d
   85644:	20726d54 	.word	0x20726d54
   85648:	00637653 	.word	0x00637653

0008564c <_global_impure_ptr>:
   8564c:	20070018 20200043                                ... C.

00085652 <blanks.6678>:
   85652:	20202020 20202020 20202020 20202020                     

00085662 <zeroes.6679>:
   85662:	30303030 30303030 30303030 30303030     0000000000000000
   85672:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   85682:	32313000 36353433 61393837 65646362     .0123456789abcde
   85692:	4f500066 00584953 b5f8002e                       f.POSIX...

0008569c <_init>:
   8569c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8569e:	bf00      	nop
   856a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   856a2:	bc08      	pop	{r3}
   856a4:	469e      	mov	lr, r3
   856a6:	4770      	bx	lr

000856a8 <__init_array_start>:
   856a8:	00083b59 	.word	0x00083b59

000856ac <__frame_dummy_init_array_entry>:
   856ac:	0008016d                                m...

000856b0 <_fini>:
   856b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   856b2:	bf00      	nop
   856b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   856b6:	bc08      	pop	{r3}
   856b8:	469e      	mov	lr, r3
   856ba:	4770      	bx	lr

000856bc <__fini_array_start>:
   856bc:	00080145 	.word	0x00080145
