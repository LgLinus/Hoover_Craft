
HoverCraft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fc8  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000844  20070000  00082fc8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000200  20070844  0008380c  00010844  2**2
                  ALLOC
  3 .stack        00002004  20070a44  00083a0c  00010844  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010844  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001086d  2**0
                  CONTENTS, READONLY
  6 .debug_info   00012b39  00000000  00000000  000108c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c6c  00000000  00000000  00023401  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007ca1  00000000  00000000  0002606d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000dc0  00000000  00000000  0002dd0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c98  00000000  00000000  0002eace  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000941e  00000000  00000000  0002f766  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011e20  00000000  00000000  00038b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00070981  00000000  00000000  0004a9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002540  00000000  00000000  000bb328  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072a48 	.word	0x20072a48
   80004:	00081a6d 	.word	0x00081a6d
   80008:	00081a69 	.word	0x00081a69
   8000c:	00081a69 	.word	0x00081a69
   80010:	00081a69 	.word	0x00081a69
   80014:	00081a69 	.word	0x00081a69
   80018:	00081a69 	.word	0x00081a69
	...
   8002c:	00081181 	.word	0x00081181
   80030:	00081a69 	.word	0x00081a69
   80034:	00000000 	.word	0x00000000
   80038:	000811b9 	.word	0x000811b9
   8003c:	000811f5 	.word	0x000811f5
   80040:	00081a69 	.word	0x00081a69
   80044:	00081a69 	.word	0x00081a69
   80048:	00081a69 	.word	0x00081a69
   8004c:	00081a69 	.word	0x00081a69
   80050:	00081a69 	.word	0x00081a69
   80054:	00081a69 	.word	0x00081a69
   80058:	00081a69 	.word	0x00081a69
   8005c:	00081a69 	.word	0x00081a69
   80060:	00081a69 	.word	0x00081a69
   80064:	00081a69 	.word	0x00081a69
   80068:	00000000 	.word	0x00000000
   8006c:	000818d9 	.word	0x000818d9
   80070:	000818ed 	.word	0x000818ed
   80074:	00081901 	.word	0x00081901
   80078:	00081915 	.word	0x00081915
	...
   80084:	00081a69 	.word	0x00081a69
   80088:	00081a69 	.word	0x00081a69
   8008c:	00081a69 	.word	0x00081a69
   80090:	00081a69 	.word	0x00081a69
   80094:	00081a69 	.word	0x00081a69
   80098:	00081a69 	.word	0x00081a69
   8009c:	00081a69 	.word	0x00081a69
   800a0:	00081a69 	.word	0x00081a69
   800a4:	00000000 	.word	0x00000000
   800a8:	00081a69 	.word	0x00081a69
   800ac:	00081a69 	.word	0x00081a69
   800b0:	00081a69 	.word	0x00081a69
   800b4:	00081a69 	.word	0x00081a69
   800b8:	00081a69 	.word	0x00081a69
   800bc:	00081a69 	.word	0x00081a69
   800c0:	00081a69 	.word	0x00081a69
   800c4:	00081a69 	.word	0x00081a69
   800c8:	00081a69 	.word	0x00081a69
   800cc:	00081a69 	.word	0x00081a69
   800d0:	00081a69 	.word	0x00081a69
   800d4:	00081a69 	.word	0x00081a69
   800d8:	00081a69 	.word	0x00081a69
   800dc:	00081a69 	.word	0x00081a69
   800e0:	00081a69 	.word	0x00081a69
   800e4:	00081a69 	.word	0x00081a69
   800e8:	00081a69 	.word	0x00081a69
   800ec:	00081a69 	.word	0x00081a69
   800f0:	00081a69 	.word	0x00081a69

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070844 	.word	0x20070844
   80110:	00000000 	.word	0x00000000
   80114:	00082fc8 	.word	0x00082fc8

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00082fc8 	.word	0x00082fc8
   8013c:	20070848 	.word	0x20070848
   80140:	00082fc8 	.word	0x00082fc8
   80144:	00000000 	.word	0x00000000

00080148 <main>:
#include "Util/analogDigitalConverter.h"
#include "Util/pwmInit.h"
#include "test_runner.h"

int main (void)
{
   80148:	b508      	push	{r3, lr}
	board_init();
   8014a:	4b05      	ldr	r3, [pc, #20]	; (80160 <main+0x18>)
   8014c:	4798      	blx	r3
	sysclk_init();
   8014e:	4b05      	ldr	r3, [pc, #20]	; (80164 <main+0x1c>)
   80150:	4798      	blx	r3
	initialize_pwm();
   80152:	4b05      	ldr	r3, [pc, #20]	; (80168 <main+0x20>)
   80154:	4798      	blx	r3
	test_function();
   80156:	4b05      	ldr	r3, [pc, #20]	; (8016c <main+0x24>)
   80158:	4798      	blx	r3

	//
	//update_dutyCycle(999);		// 999 is the highest duty cycle
}
   8015a:	2000      	movs	r0, #0
   8015c:	bd08      	pop	{r3, pc}
   8015e:	bf00      	nop
   80160:	000815e9 	.word	0x000815e9
   80164:	00081585 	.word	0x00081585
   80168:	000803c5 	.word	0x000803c5
   8016c:	0008038d 	.word	0x0008038d

00080170 <setUp>:
#include <asf.h>
#include "unity.h"

Adc* adc;

void setUp(){
   80170:	4770      	bx	lr
   80172:	bf00      	nop

00080174 <tearDown>:
}

void tearDown(){
   80174:	4770      	bx	lr
   80176:	bf00      	nop

00080178 <test_pwm_channel_0>:
#include "unity.h"
#include "asf.h"

/* Method testing which channel 0 is enabled */
void test_pwm_channel_0(void)
{
   80178:	b510      	push	{r4, lr}
   8017a:	b082      	sub	sp, #8
	TEST_ASSERT_BIT_HIGH_MESSAGE(0, PWM->PWM_SR,"Wrong channel in enabled");
   8017c:	4b05      	ldr	r3, [pc, #20]	; (80194 <test_pwm_channel_0+0x1c>)
   8017e:	68da      	ldr	r2, [r3, #12]
   80180:	230e      	movs	r3, #14
   80182:	9300      	str	r3, [sp, #0]
   80184:	2001      	movs	r0, #1
   80186:	f04f 31ff 	mov.w	r1, #4294967295
   8018a:	4b03      	ldr	r3, [pc, #12]	; (80198 <test_pwm_channel_0+0x20>)
   8018c:	4c03      	ldr	r4, [pc, #12]	; (8019c <test_pwm_channel_0+0x24>)
   8018e:	47a0      	blx	r4
   80190:	b002      	add	sp, #8
   80192:	bd10      	pop	{r4, pc}
   80194:	40094000 	.word	0x40094000
   80198:	00082ecc 	.word	0x00082ecc
   8019c:	00080e89 	.word	0x00080e89

000801a0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   801a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   801a2:	b083      	sub	sp, #12
   801a4:	4604      	mov	r4, r0
   801a6:	460d      	mov	r5, r1
	uint32_t val;

#ifdef UART
	if (UART == (Uart*)p_usart) {
   801a8:	4b1f      	ldr	r3, [pc, #124]	; (80228 <usart_serial_getchar+0x88>)
   801aa:	4298      	cmp	r0, r3
   801ac:	d107      	bne.n	801be <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
   801ae:	461f      	mov	r7, r3
   801b0:	4e1e      	ldr	r6, [pc, #120]	; (8022c <usart_serial_getchar+0x8c>)
   801b2:	4638      	mov	r0, r7
   801b4:	4629      	mov	r1, r5
   801b6:	47b0      	blx	r6
   801b8:	2800      	cmp	r0, #0
   801ba:	d1fa      	bne.n	801b2 <usart_serial_getchar+0x12>
   801bc:	e019      	b.n	801f2 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   801be:	4b1c      	ldr	r3, [pc, #112]	; (80230 <usart_serial_getchar+0x90>)
   801c0:	4298      	cmp	r0, r3
   801c2:	d109      	bne.n	801d8 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
   801c4:	461f      	mov	r7, r3
   801c6:	4e1b      	ldr	r6, [pc, #108]	; (80234 <usart_serial_getchar+0x94>)
   801c8:	4638      	mov	r0, r7
   801ca:	a901      	add	r1, sp, #4
   801cc:	47b0      	blx	r6
   801ce:	2800      	cmp	r0, #0
   801d0:	d1fa      	bne.n	801c8 <usart_serial_getchar+0x28>
		*data = (uint8_t)(val & 0xFF);
   801d2:	9b01      	ldr	r3, [sp, #4]
   801d4:	702b      	strb	r3, [r5, #0]
   801d6:	e019      	b.n	8020c <usart_serial_getchar+0x6c>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   801d8:	4b17      	ldr	r3, [pc, #92]	; (80238 <usart_serial_getchar+0x98>)
   801da:	4298      	cmp	r0, r3
   801dc:	d109      	bne.n	801f2 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
   801de:	461e      	mov	r6, r3
   801e0:	4c14      	ldr	r4, [pc, #80]	; (80234 <usart_serial_getchar+0x94>)
   801e2:	4630      	mov	r0, r6
   801e4:	a901      	add	r1, sp, #4
   801e6:	47a0      	blx	r4
   801e8:	2800      	cmp	r0, #0
   801ea:	d1fa      	bne.n	801e2 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   801ec:	9b01      	ldr	r3, [sp, #4]
   801ee:	702b      	strb	r3, [r5, #0]
   801f0:	e018      	b.n	80224 <usart_serial_getchar+0x84>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   801f2:	4b12      	ldr	r3, [pc, #72]	; (8023c <usart_serial_getchar+0x9c>)
   801f4:	429c      	cmp	r4, r3
   801f6:	d109      	bne.n	8020c <usart_serial_getchar+0x6c>
		while (usart_read(p_usart, &val));
   801f8:	461e      	mov	r6, r3
   801fa:	4c0e      	ldr	r4, [pc, #56]	; (80234 <usart_serial_getchar+0x94>)
   801fc:	4630      	mov	r0, r6
   801fe:	a901      	add	r1, sp, #4
   80200:	47a0      	blx	r4
   80202:	2800      	cmp	r0, #0
   80204:	d1fa      	bne.n	801fc <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
   80206:	9b01      	ldr	r3, [sp, #4]
   80208:	702b      	strb	r3, [r5, #0]
   8020a:	e00b      	b.n	80224 <usart_serial_getchar+0x84>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8020c:	4b0c      	ldr	r3, [pc, #48]	; (80240 <usart_serial_getchar+0xa0>)
   8020e:	429c      	cmp	r4, r3
   80210:	d108      	bne.n	80224 <usart_serial_getchar+0x84>
		while (usart_read(p_usart, &val));
   80212:	461e      	mov	r6, r3
   80214:	4c07      	ldr	r4, [pc, #28]	; (80234 <usart_serial_getchar+0x94>)
   80216:	4630      	mov	r0, r6
   80218:	a901      	add	r1, sp, #4
   8021a:	47a0      	blx	r4
   8021c:	2800      	cmp	r0, #0
   8021e:	d1fa      	bne.n	80216 <usart_serial_getchar+0x76>
		*data = (uint8_t)(val & 0xFF);
   80220:	9b01      	ldr	r3, [sp, #4]
   80222:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80224:	b003      	add	sp, #12
   80226:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80228:	400e0800 	.word	0x400e0800
   8022c:	00080529 	.word	0x00080529
   80230:	40098000 	.word	0x40098000
   80234:	00080551 	.word	0x00080551
   80238:	4009c000 	.word	0x4009c000
   8023c:	400a0000 	.word	0x400a0000
   80240:	400a4000 	.word	0x400a4000

00080244 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80244:	b570      	push	{r4, r5, r6, lr}
   80246:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80248:	4b21      	ldr	r3, [pc, #132]	; (802d0 <usart_serial_putchar+0x8c>)
   8024a:	4298      	cmp	r0, r3
   8024c:	d107      	bne.n	8025e <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   8024e:	461e      	mov	r6, r3
   80250:	4d20      	ldr	r5, [pc, #128]	; (802d4 <usart_serial_putchar+0x90>)
   80252:	4630      	mov	r0, r6
   80254:	4621      	mov	r1, r4
   80256:	47a8      	blx	r5
   80258:	2800      	cmp	r0, #0
   8025a:	d1fa      	bne.n	80252 <usart_serial_putchar+0xe>
   8025c:	e02b      	b.n	802b6 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8025e:	4b1e      	ldr	r3, [pc, #120]	; (802d8 <usart_serial_putchar+0x94>)
   80260:	4298      	cmp	r0, r3
   80262:	d107      	bne.n	80274 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80264:	461e      	mov	r6, r3
   80266:	4d1d      	ldr	r5, [pc, #116]	; (802dc <usart_serial_putchar+0x98>)
   80268:	4630      	mov	r0, r6
   8026a:	4621      	mov	r1, r4
   8026c:	47a8      	blx	r5
   8026e:	2800      	cmp	r0, #0
   80270:	d1fa      	bne.n	80268 <usart_serial_putchar+0x24>
   80272:	e022      	b.n	802ba <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80274:	4b1a      	ldr	r3, [pc, #104]	; (802e0 <usart_serial_putchar+0x9c>)
   80276:	4298      	cmp	r0, r3
   80278:	d107      	bne.n	8028a <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   8027a:	461e      	mov	r6, r3
   8027c:	4d17      	ldr	r5, [pc, #92]	; (802dc <usart_serial_putchar+0x98>)
   8027e:	4630      	mov	r0, r6
   80280:	4621      	mov	r1, r4
   80282:	47a8      	blx	r5
   80284:	2800      	cmp	r0, #0
   80286:	d1fa      	bne.n	8027e <usart_serial_putchar+0x3a>
   80288:	e019      	b.n	802be <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8028a:	4b16      	ldr	r3, [pc, #88]	; (802e4 <usart_serial_putchar+0xa0>)
   8028c:	4298      	cmp	r0, r3
   8028e:	d107      	bne.n	802a0 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80290:	461e      	mov	r6, r3
   80292:	4d12      	ldr	r5, [pc, #72]	; (802dc <usart_serial_putchar+0x98>)
   80294:	4630      	mov	r0, r6
   80296:	4621      	mov	r1, r4
   80298:	47a8      	blx	r5
   8029a:	2800      	cmp	r0, #0
   8029c:	d1fa      	bne.n	80294 <usart_serial_putchar+0x50>
   8029e:	e010      	b.n	802c2 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   802a0:	4b11      	ldr	r3, [pc, #68]	; (802e8 <usart_serial_putchar+0xa4>)
   802a2:	4298      	cmp	r0, r3
   802a4:	d10f      	bne.n	802c6 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   802a6:	461e      	mov	r6, r3
   802a8:	4d0c      	ldr	r5, [pc, #48]	; (802dc <usart_serial_putchar+0x98>)
   802aa:	4630      	mov	r0, r6
   802ac:	4621      	mov	r1, r4
   802ae:	47a8      	blx	r5
   802b0:	2800      	cmp	r0, #0
   802b2:	d1fa      	bne.n	802aa <usart_serial_putchar+0x66>
   802b4:	e009      	b.n	802ca <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   802b6:	2001      	movs	r0, #1
   802b8:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   802ba:	2001      	movs	r0, #1
   802bc:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   802be:	2001      	movs	r0, #1
   802c0:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   802c2:	2001      	movs	r0, #1
   802c4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   802c6:	2000      	movs	r0, #0
   802c8:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   802ca:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   802cc:	bd70      	pop	{r4, r5, r6, pc}
   802ce:	bf00      	nop
   802d0:	400e0800 	.word	0x400e0800
   802d4:	00080519 	.word	0x00080519
   802d8:	40098000 	.word	0x40098000
   802dc:	0008053d 	.word	0x0008053d
   802e0:	4009c000 	.word	0x4009c000
   802e4:	400a0000 	.word	0x400a0000
   802e8:	400a4000 	.word	0x400a4000

000802ec <configure_console>:
extern void test_adc_12bit(void);
extern void test_channel_3_enabled(void);

/* Configure console UART. */
void configure_console(void)
{
   802ec:	b530      	push	{r4, r5, lr}
   802ee:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   802f0:	2008      	movs	r0, #8
   802f2:	4d1a      	ldr	r5, [pc, #104]	; (8035c <configure_console+0x70>)
   802f4:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   802f6:	4c1a      	ldr	r4, [pc, #104]	; (80360 <configure_console+0x74>)
   802f8:	4b1a      	ldr	r3, [pc, #104]	; (80364 <configure_console+0x78>)
   802fa:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   802fc:	4a1a      	ldr	r2, [pc, #104]	; (80368 <configure_console+0x7c>)
   802fe:	4b1b      	ldr	r3, [pc, #108]	; (8036c <configure_console+0x80>)
   80300:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80302:	4a1b      	ldr	r2, [pc, #108]	; (80370 <configure_console+0x84>)
   80304:	4b1b      	ldr	r3, [pc, #108]	; (80374 <configure_console+0x88>)
   80306:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80308:	4b1b      	ldr	r3, [pc, #108]	; (80378 <configure_console+0x8c>)
   8030a:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   8030c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80310:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   80312:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80316:	9302      	str	r3, [sp, #8]
   80318:	2008      	movs	r0, #8
   8031a:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   8031c:	4620      	mov	r0, r4
   8031e:	4669      	mov	r1, sp
   80320:	4b16      	ldr	r3, [pc, #88]	; (8037c <configure_console+0x90>)
   80322:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80324:	4d16      	ldr	r5, [pc, #88]	; (80380 <configure_console+0x94>)
   80326:	682b      	ldr	r3, [r5, #0]
   80328:	6898      	ldr	r0, [r3, #8]
   8032a:	2100      	movs	r1, #0
   8032c:	4c15      	ldr	r4, [pc, #84]	; (80384 <configure_console+0x98>)
   8032e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80330:	682b      	ldr	r3, [r5, #0]
   80332:	6858      	ldr	r0, [r3, #4]
   80334:	2100      	movs	r1, #0
   80336:	47a0      	blx	r4
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   80338:	4b13      	ldr	r3, [pc, #76]	; (80388 <configure_console+0x9c>)
   8033a:	f44f 7280 	mov.w	r2, #256	; 0x100
   8033e:	665a      	str	r2, [r3, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80340:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80342:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   80348:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8034a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   8034e:	671a      	str	r2, [r3, #112]	; 0x70
	stdio_serial_init(CONF_UART, &uart_serial_options);
	

	ioport_set_pin_mode(PIO_PA8_IDX,IOPORT_MODE_PULLUP); // Specify that sdout will not buffer 
	#if defined(__GNUC__)
	setbuf(stdout, NULL);
   80350:	682b      	ldr	r3, [r5, #0]
   80352:	6898      	ldr	r0, [r3, #8]
   80354:	2100      	movs	r1, #0
   80356:	47a0      	blx	r4
	
	#endif
}
   80358:	b005      	add	sp, #20
   8035a:	bd30      	pop	{r4, r5, pc}
   8035c:	00081a11 	.word	0x00081a11
   80360:	400e0800 	.word	0x400e0800
   80364:	200709c0 	.word	0x200709c0
   80368:	00080245 	.word	0x00080245
   8036c:	200709bc 	.word	0x200709bc
   80370:	000801a1 	.word	0x000801a1
   80374:	200709b8 	.word	0x200709b8
   80378:	0501bd00 	.word	0x0501bd00
   8037c:	000804e1 	.word	0x000804e1
   80380:	20070430 	.word	0x20070430
   80384:	00081df5 	.word	0x00081df5
   80388:	400e0e00 	.word	0x400e0e00

0008038c <test_function>:

int test_function(void)
{
   8038c:	b508      	push	{r3, lr}
	configure_console();
   8038e:	4b06      	ldr	r3, [pc, #24]	; (803a8 <test_function+0x1c>)
   80390:	4798      	blx	r3
	
	UnityBegin("test/test_adc.c"); // Begin unity on the test protocol for test_math, run setUp() in test_math.c
   80392:	4806      	ldr	r0, [pc, #24]	; (803ac <test_function+0x20>)
   80394:	4b06      	ldr	r3, [pc, #24]	; (803b0 <test_function+0x24>)
   80396:	4798      	blx	r3
	//RUN_TEST(test_channel_3_enabled,20);
	RUN_TEST(test_pwm_channel_0,12);
   80398:	4806      	ldr	r0, [pc, #24]	; (803b4 <test_function+0x28>)
   8039a:	4907      	ldr	r1, [pc, #28]	; (803b8 <test_function+0x2c>)
   8039c:	220c      	movs	r2, #12
   8039e:	4b07      	ldr	r3, [pc, #28]	; (803bc <test_function+0x30>)
   803a0:	4798      	blx	r3
	UnityEnd(); // End test protocol, print information
   803a2:	4b07      	ldr	r3, [pc, #28]	; (803c0 <test_function+0x34>)
   803a4:	4798      	blx	r3
   803a6:	e7fe      	b.n	803a6 <test_function+0x1a>
   803a8:	000802ed 	.word	0x000802ed
   803ac:	00082ee8 	.word	0x00082ee8
   803b0:	00080f59 	.word	0x00080f59
   803b4:	00080179 	.word	0x00080179
   803b8:	00082ef8 	.word	0x00082ef8
   803bc:	00080f01 	.word	0x00080f01
   803c0:	00080f75 	.word	0x00080f75

000803c4 <initialize_pwm>:

/*
 * Initialize PWM
 */
void initialize_pwm(void)
{
   803c4:	b530      	push	{r4, r5, lr}
   803c6:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_PWM);
   803c8:	2024      	movs	r0, #36	; 0x24
   803ca:	4b15      	ldr	r3, [pc, #84]	; (80420 <initialize_pwm+0x5c>)
   803cc:	4798      	blx	r3
	pwm_channel_disable(PWM, PWM_CHANNEL);
   803ce:	4d15      	ldr	r5, [pc, #84]	; (80424 <initialize_pwm+0x60>)
   803d0:	4628      	mov	r0, r5
   803d2:	2100      	movs	r1, #0
   803d4:	4b14      	ldr	r3, [pc, #80]	; (80428 <initialize_pwm+0x64>)
   803d6:	4798      	blx	r3
	pwm_clock_t clock_setting = {
   803d8:	4b14      	ldr	r3, [pc, #80]	; (8042c <initialize_pwm+0x68>)
   803da:	9301      	str	r3, [sp, #4]
   803dc:	2400      	movs	r4, #0
   803de:	9402      	str	r4, [sp, #8]
   803e0:	4b13      	ldr	r3, [pc, #76]	; (80430 <initialize_pwm+0x6c>)
   803e2:	9303      	str	r3, [sp, #12]
		.ul_clka = PWM_FREQUENCY * PWM_RESOLUTION,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_main_hz()
	};
	pwm_init(PWM, &clock_setting);
   803e4:	4628      	mov	r0, r5
   803e6:	a901      	add	r1, sp, #4
   803e8:	4b12      	ldr	r3, [pc, #72]	; (80434 <initialize_pwm+0x70>)
   803ea:	4798      	blx	r3
	pwm_channel_instance.alignment = PWM_ALIGN_LEFT;
   803ec:	4912      	ldr	r1, [pc, #72]	; (80438 <initialize_pwm+0x74>)
   803ee:	810c      	strh	r4, [r1, #8]
	pwm_channel_instance.polarity = PWM_POLARITY;
   803f0:	728c      	strb	r4, [r1, #10]
	pwm_channel_instance.ul_prescaler = PWM_CMR_CPRE_CLKA;
   803f2:	220b      	movs	r2, #11
   803f4:	604a      	str	r2, [r1, #4]
	pwm_channel_instance.ul_period = PWM_RESOLUTION;
   803f6:	f240 32e7 	movw	r2, #999	; 0x3e7
   803fa:	610a      	str	r2, [r1, #16]
	pwm_channel_instance.ul_duty = 0;
   803fc:	60cc      	str	r4, [r1, #12]
	pwm_channel_instance.channel = PWM_CHANNEL;
   803fe:	600c      	str	r4, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_instance);
   80400:	4628      	mov	r0, r5
   80402:	4b0e      	ldr	r3, [pc, #56]	; (8043c <initialize_pwm+0x78>)
   80404:	4798      	blx	r3
	/* Setup PWM for pin */
	pio_set_peripheral(PWM_PIO, PWM_PIO_PERIPHERAL, PWM_PIO_PIN);
   80406:	480e      	ldr	r0, [pc, #56]	; (80440 <initialize_pwm+0x7c>)
   80408:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8040c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80410:	4b0c      	ldr	r3, [pc, #48]	; (80444 <initialize_pwm+0x80>)
   80412:	4798      	blx	r3
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL);
   80414:	4628      	mov	r0, r5
   80416:	4621      	mov	r1, r4
   80418:	4b0b      	ldr	r3, [pc, #44]	; (80448 <initialize_pwm+0x84>)
   8041a:	4798      	blx	r3
}
   8041c:	b005      	add	sp, #20
   8041e:	bd30      	pop	{r4, r5, pc}
   80420:	00081a11 	.word	0x00081a11
   80424:	40094000 	.word	0x40094000
   80428:	00081579 	.word	0x00081579
   8042c:	000f3e58 	.word	0x000f3e58
   80430:	0a037a00 	.word	0x0a037a00
   80434:	00081429 	.word	0x00081429
   80438:	20070860 	.word	0x20070860
   8043c:	00081469 	.word	0x00081469
   80440:	400e1000 	.word	0x400e1000
   80444:	00081669 	.word	0x00081669
   80448:	0008156d 	.word	0x0008156d

0008044c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8044c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80450:	460c      	mov	r4, r1
   80452:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80454:	b960      	cbnz	r0, 80470 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80456:	2a00      	cmp	r2, #0
   80458:	dd0e      	ble.n	80478 <_read+0x2c>
   8045a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   8045c:	4e09      	ldr	r6, [pc, #36]	; (80484 <_read+0x38>)
   8045e:	4d0a      	ldr	r5, [pc, #40]	; (80488 <_read+0x3c>)
   80460:	6830      	ldr	r0, [r6, #0]
   80462:	4621      	mov	r1, r4
   80464:	682b      	ldr	r3, [r5, #0]
   80466:	4798      	blx	r3
		ptr++;
   80468:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8046a:	42bc      	cmp	r4, r7
   8046c:	d1f8      	bne.n	80460 <_read+0x14>
   8046e:	e006      	b.n	8047e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80470:	f04f 30ff 	mov.w	r0, #4294967295
   80474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80478:	2000      	movs	r0, #0
   8047a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8047e:	4640      	mov	r0, r8
	}
	return nChars;
}
   80480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80484:	200709c0 	.word	0x200709c0
   80488:	200709b8 	.word	0x200709b8

0008048c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   8048c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80490:	460e      	mov	r6, r1
   80492:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80494:	3801      	subs	r0, #1
   80496:	2802      	cmp	r0, #2
   80498:	d80f      	bhi.n	804ba <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   8049a:	b192      	cbz	r2, 804c2 <_write+0x36>
   8049c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8049e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 804dc <_write+0x50>
   804a2:	4f0d      	ldr	r7, [pc, #52]	; (804d8 <_write+0x4c>)
   804a4:	f8d8 0000 	ldr.w	r0, [r8]
   804a8:	5d31      	ldrb	r1, [r6, r4]
   804aa:	683b      	ldr	r3, [r7, #0]
   804ac:	4798      	blx	r3
   804ae:	2800      	cmp	r0, #0
   804b0:	db0a      	blt.n	804c8 <_write+0x3c>
			return -1;
		}
		++nChars;
   804b2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   804b4:	42a5      	cmp	r5, r4
   804b6:	d1f5      	bne.n	804a4 <_write+0x18>
   804b8:	e00a      	b.n	804d0 <_write+0x44>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   804ba:	f04f 30ff 	mov.w	r0, #4294967295
   804be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   804c2:	2000      	movs	r0, #0
   804c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   804c8:	f04f 30ff 	mov.w	r0, #4294967295
   804cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   804d0:	4620      	mov	r0, r4
	}
	return nChars;
}
   804d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   804d6:	bf00      	nop
   804d8:	200709bc 	.word	0x200709bc
   804dc:	200709c0 	.word	0x200709c0

000804e0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   804e0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   804e2:	23ac      	movs	r3, #172	; 0xac
   804e4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   804e6:	680a      	ldr	r2, [r1, #0]
   804e8:	684b      	ldr	r3, [r1, #4]
   804ea:	fbb2 f3f3 	udiv	r3, r2, r3
   804ee:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   804f0:	1e5c      	subs	r4, r3, #1
   804f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   804f6:	4294      	cmp	r4, r2
   804f8:	d80a      	bhi.n	80510 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   804fa:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   804fc:	688b      	ldr	r3, [r1, #8]
   804fe:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80500:	f240 2302 	movw	r3, #514	; 0x202
   80504:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80508:	2350      	movs	r3, #80	; 0x50
   8050a:	6003      	str	r3, [r0, #0]

	return 0;
   8050c:	2000      	movs	r0, #0
   8050e:	e000      	b.n	80512 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80510:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80512:	f85d 4b04 	ldr.w	r4, [sp], #4
   80516:	4770      	bx	lr

00080518 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80518:	6943      	ldr	r3, [r0, #20]
   8051a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8051e:	bf1a      	itte	ne
   80520:	61c1      	strne	r1, [r0, #28]
	return 0;
   80522:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80524:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80526:	4770      	bx	lr

00080528 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80528:	6943      	ldr	r3, [r0, #20]
   8052a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8052e:	bf1d      	ittte	ne
   80530:	6983      	ldrne	r3, [r0, #24]
   80532:	700b      	strbne	r3, [r1, #0]
	return 0;
   80534:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80536:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80538:	4770      	bx	lr
   8053a:	bf00      	nop

0008053c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8053c:	6943      	ldr	r3, [r0, #20]
   8053e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80542:	bf1d      	ittte	ne
   80544:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80548:	61c1      	strne	r1, [r0, #28]
	return 0;
   8054a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8054c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8054e:	4770      	bx	lr

00080550 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80550:	6943      	ldr	r3, [r0, #20]
   80552:	f013 0f01 	tst.w	r3, #1
   80556:	d005      	beq.n	80564 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80558:	6983      	ldr	r3, [r0, #24]
   8055a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8055e:	600b      	str	r3, [r1, #0]

	return 0;
   80560:	2000      	movs	r0, #0
   80562:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80564:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80566:	4770      	bx	lr

00080568 <UnityPrintNumber>:
}

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumber(const _U_SINT number_to_print)
{
   80568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8056c:	4605      	mov	r5, r0
    _U_SINT divisor = 1;
    _U_SINT next_divisor;
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
   8056e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   80572:	d132      	bne.n	805da <UnityPrintNumber+0x72>
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80574:	4b5f      	ldr	r3, [pc, #380]	; (806f4 <UnityPrintNumber+0x18c>)
   80576:	6818      	ldr	r0, [r3, #0]
   80578:	6882      	ldr	r2, [r0, #8]
   8057a:	6893      	ldr	r3, [r2, #8]
   8057c:	3b01      	subs	r3, #1
   8057e:	6093      	str	r3, [r2, #8]
   80580:	2b00      	cmp	r3, #0
   80582:	da1d      	bge.n	805c0 <UnityPrintNumber+0x58>
   80584:	6882      	ldr	r2, [r0, #8]
   80586:	6891      	ldr	r1, [r2, #8]
   80588:	6993      	ldr	r3, [r2, #24]
   8058a:	4299      	cmp	r1, r3
   8058c:	db12      	blt.n	805b4 <UnityPrintNumber+0x4c>
   8058e:	6813      	ldr	r3, [r2, #0]
   80590:	222d      	movs	r2, #45	; 0x2d
   80592:	701a      	strb	r2, [r3, #0]
   80594:	4b57      	ldr	r3, [pc, #348]	; (806f4 <UnityPrintNumber+0x18c>)
   80596:	6818      	ldr	r0, [r3, #0]
   80598:	6882      	ldr	r2, [r0, #8]
   8059a:	6813      	ldr	r3, [r2, #0]
   8059c:	7819      	ldrb	r1, [r3, #0]
   8059e:	290a      	cmp	r1, #10
   805a0:	d002      	beq.n	805a8 <UnityPrintNumber+0x40>
   805a2:	3301      	adds	r3, #1
   805a4:	6013      	str	r3, [r2, #0]
   805a6:	e04f      	b.n	80648 <UnityPrintNumber+0xe0>
   805a8:	210a      	movs	r1, #10
   805aa:	4b53      	ldr	r3, [pc, #332]	; (806f8 <UnityPrintNumber+0x190>)
   805ac:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   805ae:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   805b2:	e049      	b.n	80648 <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   805b4:	212d      	movs	r1, #45	; 0x2d
   805b6:	4b50      	ldr	r3, [pc, #320]	; (806f8 <UnityPrintNumber+0x190>)
   805b8:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   805ba:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   805be:	e043      	b.n	80648 <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   805c0:	6883      	ldr	r3, [r0, #8]
   805c2:	681b      	ldr	r3, [r3, #0]
   805c4:	222d      	movs	r2, #45	; 0x2d
   805c6:	701a      	strb	r2, [r3, #0]
   805c8:	4b4a      	ldr	r3, [pc, #296]	; (806f4 <UnityPrintNumber+0x18c>)
   805ca:	681b      	ldr	r3, [r3, #0]
   805cc:	689b      	ldr	r3, [r3, #8]
   805ce:	681a      	ldr	r2, [r3, #0]
   805d0:	3201      	adds	r2, #1
   805d2:	601a      	str	r2, [r3, #0]
        number = (1ul << (UNITY_LONG_WIDTH-1));
   805d4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   805d8:	e036      	b.n	80648 <UnityPrintNumber+0xe0>
    }
    else if (number_to_print < 0)
   805da:	2800      	cmp	r0, #0
   805dc:	da34      	bge.n	80648 <UnityPrintNumber+0xe0>
    {
        //Some other negative number
        UNITY_OUTPUT_CHAR('-');
   805de:	4b45      	ldr	r3, [pc, #276]	; (806f4 <UnityPrintNumber+0x18c>)
   805e0:	6818      	ldr	r0, [r3, #0]
   805e2:	6882      	ldr	r2, [r0, #8]
   805e4:	6893      	ldr	r3, [r2, #8]
   805e6:	3b01      	subs	r3, #1
   805e8:	6093      	str	r3, [r2, #8]
   805ea:	2b00      	cmp	r3, #0
   805ec:	da19      	bge.n	80622 <UnityPrintNumber+0xba>
   805ee:	6882      	ldr	r2, [r0, #8]
   805f0:	6891      	ldr	r1, [r2, #8]
   805f2:	6993      	ldr	r3, [r2, #24]
   805f4:	4299      	cmp	r1, r3
   805f6:	db10      	blt.n	8061a <UnityPrintNumber+0xb2>
   805f8:	6813      	ldr	r3, [r2, #0]
   805fa:	222d      	movs	r2, #45	; 0x2d
   805fc:	701a      	strb	r2, [r3, #0]
   805fe:	4b3d      	ldr	r3, [pc, #244]	; (806f4 <UnityPrintNumber+0x18c>)
   80600:	6818      	ldr	r0, [r3, #0]
   80602:	6882      	ldr	r2, [r0, #8]
   80604:	6813      	ldr	r3, [r2, #0]
   80606:	7819      	ldrb	r1, [r3, #0]
   80608:	290a      	cmp	r1, #10
   8060a:	d002      	beq.n	80612 <UnityPrintNumber+0xaa>
   8060c:	3301      	adds	r3, #1
   8060e:	6013      	str	r3, [r2, #0]
   80610:	e011      	b.n	80636 <UnityPrintNumber+0xce>
   80612:	210a      	movs	r1, #10
   80614:	4b38      	ldr	r3, [pc, #224]	; (806f8 <UnityPrintNumber+0x190>)
   80616:	4798      	blx	r3
   80618:	e00d      	b.n	80636 <UnityPrintNumber+0xce>
   8061a:	212d      	movs	r1, #45	; 0x2d
   8061c:	4b36      	ldr	r3, [pc, #216]	; (806f8 <UnityPrintNumber+0x190>)
   8061e:	4798      	blx	r3
   80620:	e009      	b.n	80636 <UnityPrintNumber+0xce>
   80622:	6883      	ldr	r3, [r0, #8]
   80624:	681b      	ldr	r3, [r3, #0]
   80626:	222d      	movs	r2, #45	; 0x2d
   80628:	701a      	strb	r2, [r3, #0]
   8062a:	4b32      	ldr	r3, [pc, #200]	; (806f4 <UnityPrintNumber+0x18c>)
   8062c:	681b      	ldr	r3, [r3, #0]
   8062e:	689b      	ldr	r3, [r3, #8]
   80630:	681a      	ldr	r2, [r3, #0]
   80632:	3201      	adds	r2, #1
   80634:	601a      	str	r2, [r3, #0]
        number = (_U_UINT)(-number_to_print);
   80636:	426d      	negs	r5, r5
   80638:	e006      	b.n	80648 <UnityPrintNumber+0xe0>
    }

    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
   8063a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   8063e:	005b      	lsls	r3, r3, #1
        if (next_divisor > divisor)
   80640:	429c      	cmp	r4, r3
   80642:	da06      	bge.n	80652 <UnityPrintNumber+0xea>
            divisor = next_divisor;
   80644:	461c      	mov	r4, r3
   80646:	e000      	b.n	8064a <UnityPrintNumber+0xe2>

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80648:	2401      	movs	r4, #1
        //Positive number
        number = (_U_UINT)number_to_print;
    }

    // figure out initial divisor
    while (number / divisor > 9)
   8064a:	fbb5 f3f4 	udiv	r3, r5, r4
   8064e:	2b09      	cmp	r3, #9
   80650:	d8f3      	bhi.n	8063a <UnityPrintNumber+0xd2>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   80652:	4e28      	ldr	r6, [pc, #160]	; (806f4 <UnityPrintNumber+0x18c>)
   80654:	4f29      	ldr	r7, [pc, #164]	; (806fc <UnityPrintNumber+0x194>)
   80656:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 806f8 <UnityPrintNumber+0x190>
   8065a:	6830      	ldr	r0, [r6, #0]
   8065c:	6882      	ldr	r2, [r0, #8]
   8065e:	6893      	ldr	r3, [r2, #8]
   80660:	3b01      	subs	r3, #1
   80662:	6093      	str	r3, [r2, #8]
   80664:	2b00      	cmp	r3, #0
   80666:	da29      	bge.n	806bc <UnityPrintNumber+0x154>
   80668:	6882      	ldr	r2, [r0, #8]
   8066a:	6891      	ldr	r1, [r2, #8]
   8066c:	6993      	ldr	r3, [r2, #24]
   8066e:	4299      	cmp	r1, r3
   80670:	db17      	blt.n	806a2 <UnityPrintNumber+0x13a>
   80672:	6811      	ldr	r1, [r2, #0]
   80674:	fbb5 f3f4 	udiv	r3, r5, r4
   80678:	fba7 0203 	umull	r0, r2, r7, r3
   8067c:	08d2      	lsrs	r2, r2, #3
   8067e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80682:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   80686:	3330      	adds	r3, #48	; 0x30
   80688:	700b      	strb	r3, [r1, #0]
   8068a:	6830      	ldr	r0, [r6, #0]
   8068c:	6882      	ldr	r2, [r0, #8]
   8068e:	6813      	ldr	r3, [r2, #0]
   80690:	7819      	ldrb	r1, [r3, #0]
   80692:	290a      	cmp	r1, #10
   80694:	d002      	beq.n	8069c <UnityPrintNumber+0x134>
   80696:	3301      	adds	r3, #1
   80698:	6013      	str	r3, [r2, #0]
   8069a:	e021      	b.n	806e0 <UnityPrintNumber+0x178>
   8069c:	210a      	movs	r1, #10
   8069e:	47c0      	blx	r8
   806a0:	e01e      	b.n	806e0 <UnityPrintNumber+0x178>
   806a2:	fbb5 f3f4 	udiv	r3, r5, r4
   806a6:	fba7 e103 	umull	lr, r1, r7, r3
   806aa:	08c9      	lsrs	r1, r1, #3
   806ac:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   806b0:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   806b4:	3130      	adds	r1, #48	; 0x30
   806b6:	b2c9      	uxtb	r1, r1
   806b8:	47c0      	blx	r8
   806ba:	e011      	b.n	806e0 <UnityPrintNumber+0x178>
   806bc:	6883      	ldr	r3, [r0, #8]
   806be:	6819      	ldr	r1, [r3, #0]
   806c0:	fbb5 f3f4 	udiv	r3, r5, r4
   806c4:	fba7 0203 	umull	r0, r2, r7, r3
   806c8:	08d2      	lsrs	r2, r2, #3
   806ca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   806ce:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   806d2:	3330      	adds	r3, #48	; 0x30
   806d4:	700b      	strb	r3, [r1, #0]
   806d6:	6833      	ldr	r3, [r6, #0]
   806d8:	689b      	ldr	r3, [r3, #8]
   806da:	681a      	ldr	r2, [r3, #0]
   806dc:	3201      	adds	r2, #1
   806de:	601a      	str	r2, [r3, #0]
        divisor /= 10;
   806e0:	4b07      	ldr	r3, [pc, #28]	; (80700 <UnityPrintNumber+0x198>)
   806e2:	fb83 2304 	smull	r2, r3, r3, r4
   806e6:	17e4      	asrs	r4, r4, #31
   806e8:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
    }
    while (divisor > 0);
   806ec:	2c00      	cmp	r4, #0
   806ee:	dcb4      	bgt.n	8065a <UnityPrintNumber+0xf2>
}
   806f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   806f4:	20070430 	.word	0x20070430
   806f8:	00081f21 	.word	0x00081f21
   806fc:	cccccccd 	.word	0xcccccccd
   80700:	66666667 	.word	0x66666667

00080704 <UnityPrintNumberHex>:
    while (divisor > 0);
}

//-----------------------------------------------
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
   80704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80708:	4606      	mov	r6, r0
   8070a:	460c      	mov	r4, r1
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
   8070c:	4b5e      	ldr	r3, [pc, #376]	; (80888 <UnityPrintNumberHex+0x184>)
   8070e:	6818      	ldr	r0, [r3, #0]
   80710:	6882      	ldr	r2, [r0, #8]
   80712:	6893      	ldr	r3, [r2, #8]
   80714:	3b01      	subs	r3, #1
   80716:	6093      	str	r3, [r2, #8]
   80718:	2b00      	cmp	r3, #0
   8071a:	da19      	bge.n	80750 <UnityPrintNumberHex+0x4c>
   8071c:	6882      	ldr	r2, [r0, #8]
   8071e:	6891      	ldr	r1, [r2, #8]
   80720:	6993      	ldr	r3, [r2, #24]
   80722:	4299      	cmp	r1, r3
   80724:	db10      	blt.n	80748 <UnityPrintNumberHex+0x44>
   80726:	6813      	ldr	r3, [r2, #0]
   80728:	2230      	movs	r2, #48	; 0x30
   8072a:	701a      	strb	r2, [r3, #0]
   8072c:	4b56      	ldr	r3, [pc, #344]	; (80888 <UnityPrintNumberHex+0x184>)
   8072e:	6818      	ldr	r0, [r3, #0]
   80730:	6882      	ldr	r2, [r0, #8]
   80732:	6813      	ldr	r3, [r2, #0]
   80734:	7819      	ldrb	r1, [r3, #0]
   80736:	290a      	cmp	r1, #10
   80738:	d002      	beq.n	80740 <UnityPrintNumberHex+0x3c>
   8073a:	3301      	adds	r3, #1
   8073c:	6013      	str	r3, [r2, #0]
   8073e:	e011      	b.n	80764 <UnityPrintNumberHex+0x60>
   80740:	210a      	movs	r1, #10
   80742:	4b52      	ldr	r3, [pc, #328]	; (8088c <UnityPrintNumberHex+0x188>)
   80744:	4798      	blx	r3
   80746:	e00d      	b.n	80764 <UnityPrintNumberHex+0x60>
   80748:	2130      	movs	r1, #48	; 0x30
   8074a:	4b50      	ldr	r3, [pc, #320]	; (8088c <UnityPrintNumberHex+0x188>)
   8074c:	4798      	blx	r3
   8074e:	e009      	b.n	80764 <UnityPrintNumberHex+0x60>
   80750:	6883      	ldr	r3, [r0, #8]
   80752:	681b      	ldr	r3, [r3, #0]
   80754:	2230      	movs	r2, #48	; 0x30
   80756:	701a      	strb	r2, [r3, #0]
   80758:	4b4b      	ldr	r3, [pc, #300]	; (80888 <UnityPrintNumberHex+0x184>)
   8075a:	681b      	ldr	r3, [r3, #0]
   8075c:	689b      	ldr	r3, [r3, #8]
   8075e:	681a      	ldr	r2, [r3, #0]
   80760:	3201      	adds	r2, #1
   80762:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_CHAR('x');
   80764:	4b48      	ldr	r3, [pc, #288]	; (80888 <UnityPrintNumberHex+0x184>)
   80766:	6818      	ldr	r0, [r3, #0]
   80768:	6882      	ldr	r2, [r0, #8]
   8076a:	6893      	ldr	r3, [r2, #8]
   8076c:	3b01      	subs	r3, #1
   8076e:	6093      	str	r3, [r2, #8]
   80770:	2b00      	cmp	r3, #0
   80772:	da1b      	bge.n	807ac <UnityPrintNumberHex+0xa8>
   80774:	6882      	ldr	r2, [r0, #8]
   80776:	6891      	ldr	r1, [r2, #8]
   80778:	6993      	ldr	r3, [r2, #24]
   8077a:	4299      	cmp	r1, r3
   8077c:	db10      	blt.n	807a0 <UnityPrintNumberHex+0x9c>
   8077e:	6813      	ldr	r3, [r2, #0]
   80780:	2278      	movs	r2, #120	; 0x78
   80782:	701a      	strb	r2, [r3, #0]
   80784:	4b40      	ldr	r3, [pc, #256]	; (80888 <UnityPrintNumberHex+0x184>)
   80786:	6818      	ldr	r0, [r3, #0]
   80788:	6882      	ldr	r2, [r0, #8]
   8078a:	6813      	ldr	r3, [r2, #0]
   8078c:	7819      	ldrb	r1, [r3, #0]
   8078e:	290a      	cmp	r1, #10
   80790:	d002      	beq.n	80798 <UnityPrintNumberHex+0x94>
   80792:	3301      	adds	r3, #1
   80794:	6013      	str	r3, [r2, #0]
   80796:	e006      	b.n	807a6 <UnityPrintNumberHex+0xa2>
   80798:	210a      	movs	r1, #10
   8079a:	4b3c      	ldr	r3, [pc, #240]	; (8088c <UnityPrintNumberHex+0x188>)
   8079c:	4798      	blx	r3
   8079e:	e002      	b.n	807a6 <UnityPrintNumberHex+0xa2>
   807a0:	2178      	movs	r1, #120	; 0x78
   807a2:	4b3a      	ldr	r3, [pc, #232]	; (8088c <UnityPrintNumberHex+0x188>)
   807a4:	4798      	blx	r3

    while (nibbles > 0)
   807a6:	b964      	cbnz	r4, 807c2 <UnityPrintNumberHex+0xbe>
   807a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');
   807ac:	6883      	ldr	r3, [r0, #8]
   807ae:	681b      	ldr	r3, [r3, #0]
   807b0:	2278      	movs	r2, #120	; 0x78
   807b2:	701a      	strb	r2, [r3, #0]
   807b4:	4b34      	ldr	r3, [pc, #208]	; (80888 <UnityPrintNumberHex+0x184>)
   807b6:	681b      	ldr	r3, [r3, #0]
   807b8:	689b      	ldr	r3, [r3, #8]
   807ba:	681a      	ldr	r2, [r3, #0]
   807bc:	3201      	adds	r2, #1
   807be:	601a      	str	r2, [r3, #0]
   807c0:	e7f1      	b.n	807a6 <UnityPrintNumberHex+0xa2>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   807c2:	4d31      	ldr	r5, [pc, #196]	; (80888 <UnityPrintNumberHex+0x184>)
   807c4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8088c <UnityPrintNumberHex+0x188>
   807c8:	f04f 080a 	mov.w	r8, #10
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
    {
        nibble = (number >> (--nibbles << 2)) & 0x0000000F;
   807cc:	3c01      	subs	r4, #1
   807ce:	b2e4      	uxtb	r4, r4
   807d0:	00a3      	lsls	r3, r4, #2
   807d2:	fa26 f303 	lsr.w	r3, r6, r3
   807d6:	f003 030f 	and.w	r3, r3, #15
        if (nibble <= 9)
   807da:	2b09      	cmp	r3, #9
   807dc:	d828      	bhi.n	80830 <UnityPrintNumberHex+0x12c>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
   807de:	6828      	ldr	r0, [r5, #0]
   807e0:	6881      	ldr	r1, [r0, #8]
   807e2:	688a      	ldr	r2, [r1, #8]
   807e4:	3a01      	subs	r2, #1
   807e6:	608a      	str	r2, [r1, #8]
   807e8:	2a00      	cmp	r2, #0
   807ea:	da17      	bge.n	8081c <UnityPrintNumberHex+0x118>
   807ec:	6882      	ldr	r2, [r0, #8]
   807ee:	6891      	ldr	r1, [r2, #8]
   807f0:	6997      	ldr	r7, [r2, #24]
   807f2:	42b9      	cmp	r1, r7
   807f4:	db0e      	blt.n	80814 <UnityPrintNumberHex+0x110>
   807f6:	6812      	ldr	r2, [r2, #0]
   807f8:	3330      	adds	r3, #48	; 0x30
   807fa:	7013      	strb	r3, [r2, #0]
   807fc:	6828      	ldr	r0, [r5, #0]
   807fe:	6882      	ldr	r2, [r0, #8]
   80800:	6813      	ldr	r3, [r2, #0]
   80802:	7819      	ldrb	r1, [r3, #0]
   80804:	290a      	cmp	r1, #10
   80806:	d002      	beq.n	8080e <UnityPrintNumberHex+0x10a>
   80808:	3301      	adds	r3, #1
   8080a:	6013      	str	r3, [r2, #0]
   8080c:	e038      	b.n	80880 <UnityPrintNumberHex+0x17c>
   8080e:	4641      	mov	r1, r8
   80810:	47c8      	blx	r9
   80812:	e035      	b.n	80880 <UnityPrintNumberHex+0x17c>
   80814:	f103 0130 	add.w	r1, r3, #48	; 0x30
   80818:	47c8      	blx	r9
   8081a:	e031      	b.n	80880 <UnityPrintNumberHex+0x17c>
   8081c:	6882      	ldr	r2, [r0, #8]
   8081e:	6812      	ldr	r2, [r2, #0]
   80820:	3330      	adds	r3, #48	; 0x30
   80822:	7013      	strb	r3, [r2, #0]
   80824:	682b      	ldr	r3, [r5, #0]
   80826:	689b      	ldr	r3, [r3, #8]
   80828:	681a      	ldr	r2, [r3, #0]
   8082a:	3201      	adds	r2, #1
   8082c:	601a      	str	r2, [r3, #0]
   8082e:	e027      	b.n	80880 <UnityPrintNumberHex+0x17c>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   80830:	6828      	ldr	r0, [r5, #0]
   80832:	6881      	ldr	r1, [r0, #8]
   80834:	688a      	ldr	r2, [r1, #8]
   80836:	3a01      	subs	r2, #1
   80838:	608a      	str	r2, [r1, #8]
   8083a:	2a00      	cmp	r2, #0
   8083c:	da17      	bge.n	8086e <UnityPrintNumberHex+0x16a>
   8083e:	6882      	ldr	r2, [r0, #8]
   80840:	6891      	ldr	r1, [r2, #8]
   80842:	6997      	ldr	r7, [r2, #24]
   80844:	42b9      	cmp	r1, r7
   80846:	db0e      	blt.n	80866 <UnityPrintNumberHex+0x162>
   80848:	6812      	ldr	r2, [r2, #0]
   8084a:	3337      	adds	r3, #55	; 0x37
   8084c:	7013      	strb	r3, [r2, #0]
   8084e:	6828      	ldr	r0, [r5, #0]
   80850:	6882      	ldr	r2, [r0, #8]
   80852:	6813      	ldr	r3, [r2, #0]
   80854:	7819      	ldrb	r1, [r3, #0]
   80856:	290a      	cmp	r1, #10
   80858:	d002      	beq.n	80860 <UnityPrintNumberHex+0x15c>
   8085a:	3301      	adds	r3, #1
   8085c:	6013      	str	r3, [r2, #0]
   8085e:	e00f      	b.n	80880 <UnityPrintNumberHex+0x17c>
   80860:	4641      	mov	r1, r8
   80862:	47c8      	blx	r9
   80864:	e00c      	b.n	80880 <UnityPrintNumberHex+0x17c>
   80866:	f103 0137 	add.w	r1, r3, #55	; 0x37
   8086a:	47c8      	blx	r9
   8086c:	e008      	b.n	80880 <UnityPrintNumberHex+0x17c>
   8086e:	6882      	ldr	r2, [r0, #8]
   80870:	6812      	ldr	r2, [r2, #0]
   80872:	3337      	adds	r3, #55	; 0x37
   80874:	7013      	strb	r3, [r2, #0]
   80876:	682b      	ldr	r3, [r5, #0]
   80878:	689b      	ldr	r3, [r3, #8]
   8087a:	681a      	ldr	r2, [r3, #0]
   8087c:	3201      	adds	r2, #1
   8087e:	601a      	str	r2, [r3, #0]
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
   80880:	2c00      	cmp	r4, #0
   80882:	d1a3      	bne.n	807cc <UnityPrintNumberHex+0xc8>
   80884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80888:	20070430 	.word	0x20070430
   8088c:	00081f21 	.word	0x00081f21

00080890 <UnityPrint>:
//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
{
   80890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const char* pch = string;

    if (pch != NULL)
   80892:	2800      	cmp	r0, #0
   80894:	f000 810a 	beq.w	80aac <UnityPrint+0x21c>
    {
        while (*pch)
   80898:	7803      	ldrb	r3, [r0, #0]
   8089a:	2b00      	cmp	r3, #0
   8089c:	f000 8106 	beq.w	80aac <UnityPrint+0x21c>
   808a0:	1c44      	adds	r4, r0, #1
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   808a2:	4d83      	ldr	r5, [pc, #524]	; (80ab0 <UnityPrint+0x220>)
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   808a4:	4e83      	ldr	r6, [pc, #524]	; (80ab4 <UnityPrint+0x224>)
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   808a6:	4f84      	ldr	r7, [pc, #528]	; (80ab8 <UnityPrint+0x228>)
    if (pch != NULL)
    {
        while (*pch)
        {
            // printable characters plus CR & LF are printed
            if ((*pch <= 126) && (*pch >= 32))
   808a8:	f1a3 0220 	sub.w	r2, r3, #32
   808ac:	b2d2      	uxtb	r2, r2
   808ae:	2a5e      	cmp	r2, #94	; 0x5e
   808b0:	d82a      	bhi.n	80908 <UnityPrint+0x78>
            {
                UNITY_OUTPUT_CHAR(*pch);
   808b2:	6828      	ldr	r0, [r5, #0]
   808b4:	6882      	ldr	r2, [r0, #8]
   808b6:	6893      	ldr	r3, [r2, #8]
   808b8:	3b01      	subs	r3, #1
   808ba:	6093      	str	r3, [r2, #8]
   808bc:	2b00      	cmp	r3, #0
   808be:	da18      	bge.n	808f2 <UnityPrint+0x62>
   808c0:	6882      	ldr	r2, [r0, #8]
   808c2:	6891      	ldr	r1, [r2, #8]
   808c4:	6993      	ldr	r3, [r2, #24]
   808c6:	4299      	cmp	r1, r3
   808c8:	db0f      	blt.n	808ea <UnityPrint+0x5a>
   808ca:	6813      	ldr	r3, [r2, #0]
   808cc:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   808d0:	701a      	strb	r2, [r3, #0]
   808d2:	6828      	ldr	r0, [r5, #0]
   808d4:	6882      	ldr	r2, [r0, #8]
   808d6:	6813      	ldr	r3, [r2, #0]
   808d8:	7819      	ldrb	r1, [r3, #0]
   808da:	290a      	cmp	r1, #10
   808dc:	d002      	beq.n	808e4 <UnityPrint+0x54>
   808de:	3301      	adds	r3, #1
   808e0:	6013      	str	r3, [r2, #0]
   808e2:	e0de      	b.n	80aa2 <UnityPrint+0x212>
   808e4:	210a      	movs	r1, #10
   808e6:	47b8      	blx	r7
   808e8:	e0db      	b.n	80aa2 <UnityPrint+0x212>
   808ea:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   808ee:	47b8      	blx	r7
   808f0:	e0d7      	b.n	80aa2 <UnityPrint+0x212>
   808f2:	6883      	ldr	r3, [r0, #8]
   808f4:	681b      	ldr	r3, [r3, #0]
   808f6:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   808fa:	701a      	strb	r2, [r3, #0]
   808fc:	682b      	ldr	r3, [r5, #0]
   808fe:	689b      	ldr	r3, [r3, #8]
   80900:	681a      	ldr	r2, [r3, #0]
   80902:	3201      	adds	r2, #1
   80904:	601a      	str	r2, [r3, #0]
   80906:	e0cc      	b.n	80aa2 <UnityPrint+0x212>
            }
            //write escaped carriage returns
            else if (*pch == 13)
   80908:	2b0d      	cmp	r3, #13
   8090a:	d14e      	bne.n	809aa <UnityPrint+0x11a>
            {
                UNITY_OUTPUT_CHAR('\\');
   8090c:	6828      	ldr	r0, [r5, #0]
   8090e:	6882      	ldr	r2, [r0, #8]
   80910:	6893      	ldr	r3, [r2, #8]
   80912:	3b01      	subs	r3, #1
   80914:	6093      	str	r3, [r2, #8]
   80916:	2b00      	cmp	r3, #0
   80918:	da16      	bge.n	80948 <UnityPrint+0xb8>
   8091a:	6882      	ldr	r2, [r0, #8]
   8091c:	6891      	ldr	r1, [r2, #8]
   8091e:	6993      	ldr	r3, [r2, #24]
   80920:	4299      	cmp	r1, r3
   80922:	db0e      	blt.n	80942 <UnityPrint+0xb2>
   80924:	6813      	ldr	r3, [r2, #0]
   80926:	225c      	movs	r2, #92	; 0x5c
   80928:	701a      	strb	r2, [r3, #0]
   8092a:	6828      	ldr	r0, [r5, #0]
   8092c:	6882      	ldr	r2, [r0, #8]
   8092e:	6813      	ldr	r3, [r2, #0]
   80930:	7819      	ldrb	r1, [r3, #0]
   80932:	290a      	cmp	r1, #10
   80934:	d002      	beq.n	8093c <UnityPrint+0xac>
   80936:	3301      	adds	r3, #1
   80938:	6013      	str	r3, [r2, #0]
   8093a:	e00e      	b.n	8095a <UnityPrint+0xca>
   8093c:	210a      	movs	r1, #10
   8093e:	47b8      	blx	r7
   80940:	e00b      	b.n	8095a <UnityPrint+0xca>
   80942:	215c      	movs	r1, #92	; 0x5c
   80944:	47b8      	blx	r7
   80946:	e008      	b.n	8095a <UnityPrint+0xca>
   80948:	6883      	ldr	r3, [r0, #8]
   8094a:	681b      	ldr	r3, [r3, #0]
   8094c:	225c      	movs	r2, #92	; 0x5c
   8094e:	701a      	strb	r2, [r3, #0]
   80950:	682b      	ldr	r3, [r5, #0]
   80952:	689b      	ldr	r3, [r3, #8]
   80954:	681a      	ldr	r2, [r3, #0]
   80956:	3201      	adds	r2, #1
   80958:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('r');
   8095a:	6828      	ldr	r0, [r5, #0]
   8095c:	6882      	ldr	r2, [r0, #8]
   8095e:	6893      	ldr	r3, [r2, #8]
   80960:	3b01      	subs	r3, #1
   80962:	6093      	str	r3, [r2, #8]
   80964:	2b00      	cmp	r3, #0
   80966:	da16      	bge.n	80996 <UnityPrint+0x106>
   80968:	6882      	ldr	r2, [r0, #8]
   8096a:	6891      	ldr	r1, [r2, #8]
   8096c:	6993      	ldr	r3, [r2, #24]
   8096e:	4299      	cmp	r1, r3
   80970:	db0e      	blt.n	80990 <UnityPrint+0x100>
   80972:	6813      	ldr	r3, [r2, #0]
   80974:	2272      	movs	r2, #114	; 0x72
   80976:	701a      	strb	r2, [r3, #0]
   80978:	6828      	ldr	r0, [r5, #0]
   8097a:	6882      	ldr	r2, [r0, #8]
   8097c:	6813      	ldr	r3, [r2, #0]
   8097e:	7819      	ldrb	r1, [r3, #0]
   80980:	290a      	cmp	r1, #10
   80982:	d002      	beq.n	8098a <UnityPrint+0xfa>
   80984:	3301      	adds	r3, #1
   80986:	6013      	str	r3, [r2, #0]
   80988:	e08b      	b.n	80aa2 <UnityPrint+0x212>
   8098a:	210a      	movs	r1, #10
   8098c:	47b8      	blx	r7
   8098e:	e088      	b.n	80aa2 <UnityPrint+0x212>
   80990:	2172      	movs	r1, #114	; 0x72
   80992:	47b8      	blx	r7
   80994:	e085      	b.n	80aa2 <UnityPrint+0x212>
   80996:	6883      	ldr	r3, [r0, #8]
   80998:	681b      	ldr	r3, [r3, #0]
   8099a:	2272      	movs	r2, #114	; 0x72
   8099c:	701a      	strb	r2, [r3, #0]
   8099e:	682b      	ldr	r3, [r5, #0]
   809a0:	689b      	ldr	r3, [r3, #8]
   809a2:	681a      	ldr	r2, [r3, #0]
   809a4:	3201      	adds	r2, #1
   809a6:	601a      	str	r2, [r3, #0]
   809a8:	e07b      	b.n	80aa2 <UnityPrint+0x212>
            }
            //write escaped line feeds
            else if (*pch == 10)
   809aa:	2b0a      	cmp	r3, #10
   809ac:	d14e      	bne.n	80a4c <UnityPrint+0x1bc>
            {
                UNITY_OUTPUT_CHAR('\\');
   809ae:	6828      	ldr	r0, [r5, #0]
   809b0:	6882      	ldr	r2, [r0, #8]
   809b2:	6893      	ldr	r3, [r2, #8]
   809b4:	3b01      	subs	r3, #1
   809b6:	6093      	str	r3, [r2, #8]
   809b8:	2b00      	cmp	r3, #0
   809ba:	da16      	bge.n	809ea <UnityPrint+0x15a>
   809bc:	6882      	ldr	r2, [r0, #8]
   809be:	6891      	ldr	r1, [r2, #8]
   809c0:	6993      	ldr	r3, [r2, #24]
   809c2:	4299      	cmp	r1, r3
   809c4:	db0e      	blt.n	809e4 <UnityPrint+0x154>
   809c6:	6813      	ldr	r3, [r2, #0]
   809c8:	225c      	movs	r2, #92	; 0x5c
   809ca:	701a      	strb	r2, [r3, #0]
   809cc:	6828      	ldr	r0, [r5, #0]
   809ce:	6882      	ldr	r2, [r0, #8]
   809d0:	6813      	ldr	r3, [r2, #0]
   809d2:	7819      	ldrb	r1, [r3, #0]
   809d4:	290a      	cmp	r1, #10
   809d6:	d002      	beq.n	809de <UnityPrint+0x14e>
   809d8:	3301      	adds	r3, #1
   809da:	6013      	str	r3, [r2, #0]
   809dc:	e00e      	b.n	809fc <UnityPrint+0x16c>
   809de:	210a      	movs	r1, #10
   809e0:	47b8      	blx	r7
   809e2:	e00b      	b.n	809fc <UnityPrint+0x16c>
   809e4:	215c      	movs	r1, #92	; 0x5c
   809e6:	47b8      	blx	r7
   809e8:	e008      	b.n	809fc <UnityPrint+0x16c>
   809ea:	6883      	ldr	r3, [r0, #8]
   809ec:	681b      	ldr	r3, [r3, #0]
   809ee:	225c      	movs	r2, #92	; 0x5c
   809f0:	701a      	strb	r2, [r3, #0]
   809f2:	682b      	ldr	r3, [r5, #0]
   809f4:	689b      	ldr	r3, [r3, #8]
   809f6:	681a      	ldr	r2, [r3, #0]
   809f8:	3201      	adds	r2, #1
   809fa:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('n');
   809fc:	6828      	ldr	r0, [r5, #0]
   809fe:	6882      	ldr	r2, [r0, #8]
   80a00:	6893      	ldr	r3, [r2, #8]
   80a02:	3b01      	subs	r3, #1
   80a04:	6093      	str	r3, [r2, #8]
   80a06:	2b00      	cmp	r3, #0
   80a08:	da16      	bge.n	80a38 <UnityPrint+0x1a8>
   80a0a:	6882      	ldr	r2, [r0, #8]
   80a0c:	6891      	ldr	r1, [r2, #8]
   80a0e:	6993      	ldr	r3, [r2, #24]
   80a10:	4299      	cmp	r1, r3
   80a12:	db0e      	blt.n	80a32 <UnityPrint+0x1a2>
   80a14:	6813      	ldr	r3, [r2, #0]
   80a16:	226e      	movs	r2, #110	; 0x6e
   80a18:	701a      	strb	r2, [r3, #0]
   80a1a:	6828      	ldr	r0, [r5, #0]
   80a1c:	6882      	ldr	r2, [r0, #8]
   80a1e:	6813      	ldr	r3, [r2, #0]
   80a20:	7819      	ldrb	r1, [r3, #0]
   80a22:	290a      	cmp	r1, #10
   80a24:	d002      	beq.n	80a2c <UnityPrint+0x19c>
   80a26:	3301      	adds	r3, #1
   80a28:	6013      	str	r3, [r2, #0]
   80a2a:	e03a      	b.n	80aa2 <UnityPrint+0x212>
   80a2c:	210a      	movs	r1, #10
   80a2e:	47b8      	blx	r7
   80a30:	e037      	b.n	80aa2 <UnityPrint+0x212>
   80a32:	216e      	movs	r1, #110	; 0x6e
   80a34:	47b8      	blx	r7
   80a36:	e034      	b.n	80aa2 <UnityPrint+0x212>
   80a38:	6883      	ldr	r3, [r0, #8]
   80a3a:	681b      	ldr	r3, [r3, #0]
   80a3c:	226e      	movs	r2, #110	; 0x6e
   80a3e:	701a      	strb	r2, [r3, #0]
   80a40:	682b      	ldr	r3, [r5, #0]
   80a42:	689b      	ldr	r3, [r3, #8]
   80a44:	681a      	ldr	r2, [r3, #0]
   80a46:	3201      	adds	r2, #1
   80a48:	601a      	str	r2, [r3, #0]
   80a4a:	e02a      	b.n	80aa2 <UnityPrint+0x212>
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80a4c:	6828      	ldr	r0, [r5, #0]
   80a4e:	6882      	ldr	r2, [r0, #8]
   80a50:	6893      	ldr	r3, [r2, #8]
   80a52:	3b01      	subs	r3, #1
   80a54:	6093      	str	r3, [r2, #8]
   80a56:	2b00      	cmp	r3, #0
   80a58:	da16      	bge.n	80a88 <UnityPrint+0x1f8>
   80a5a:	6882      	ldr	r2, [r0, #8]
   80a5c:	6891      	ldr	r1, [r2, #8]
   80a5e:	6993      	ldr	r3, [r2, #24]
   80a60:	4299      	cmp	r1, r3
   80a62:	db0e      	blt.n	80a82 <UnityPrint+0x1f2>
   80a64:	6813      	ldr	r3, [r2, #0]
   80a66:	225c      	movs	r2, #92	; 0x5c
   80a68:	701a      	strb	r2, [r3, #0]
   80a6a:	6828      	ldr	r0, [r5, #0]
   80a6c:	6882      	ldr	r2, [r0, #8]
   80a6e:	6813      	ldr	r3, [r2, #0]
   80a70:	7819      	ldrb	r1, [r3, #0]
   80a72:	290a      	cmp	r1, #10
   80a74:	d002      	beq.n	80a7c <UnityPrint+0x1ec>
   80a76:	3301      	adds	r3, #1
   80a78:	6013      	str	r3, [r2, #0]
   80a7a:	e00e      	b.n	80a9a <UnityPrint+0x20a>
   80a7c:	210a      	movs	r1, #10
   80a7e:	47b8      	blx	r7
   80a80:	e00b      	b.n	80a9a <UnityPrint+0x20a>
   80a82:	215c      	movs	r1, #92	; 0x5c
   80a84:	47b8      	blx	r7
   80a86:	e008      	b.n	80a9a <UnityPrint+0x20a>
   80a88:	6883      	ldr	r3, [r0, #8]
   80a8a:	681b      	ldr	r3, [r3, #0]
   80a8c:	225c      	movs	r2, #92	; 0x5c
   80a8e:	701a      	strb	r2, [r3, #0]
   80a90:	682b      	ldr	r3, [r5, #0]
   80a92:	689b      	ldr	r3, [r3, #8]
   80a94:	681a      	ldr	r2, [r3, #0]
   80a96:	3201      	adds	r2, #1
   80a98:	601a      	str	r2, [r3, #0]
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   80a9a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   80a9e:	2102      	movs	r1, #2
   80aa0:	47b0      	blx	r6
{
    const char* pch = string;

    if (pch != NULL)
    {
        while (*pch)
   80aa2:	f814 3b01 	ldrb.w	r3, [r4], #1
   80aa6:	2b00      	cmp	r3, #0
   80aa8:	f47f aefe 	bne.w	808a8 <UnityPrint+0x18>
   80aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80aae:	bf00      	nop
   80ab0:	20070430 	.word	0x20070430
   80ab4:	00080705 	.word	0x00080705
   80ab8:	00081f21 	.word	0x00081f21

00080abc <UnityTestResultsBegin>:
    UnityPrint(UnityStrOk);
}

//-----------------------------------------------
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
   80abc:	b538      	push	{r3, r4, r5, lr}
   80abe:	460d      	mov	r5, r1
    UnityPrint(file);
   80ac0:	4b46      	ldr	r3, [pc, #280]	; (80bdc <UnityTestResultsBegin+0x120>)
   80ac2:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80ac4:	4b46      	ldr	r3, [pc, #280]	; (80be0 <UnityTestResultsBegin+0x124>)
   80ac6:	6818      	ldr	r0, [r3, #0]
   80ac8:	6884      	ldr	r4, [r0, #8]
   80aca:	68a2      	ldr	r2, [r4, #8]
   80acc:	3a01      	subs	r2, #1
   80ace:	60a2      	str	r2, [r4, #8]
   80ad0:	2a00      	cmp	r2, #0
   80ad2:	da19      	bge.n	80b08 <UnityTestResultsBegin+0x4c>
   80ad4:	6882      	ldr	r2, [r0, #8]
   80ad6:	6893      	ldr	r3, [r2, #8]
   80ad8:	6991      	ldr	r1, [r2, #24]
   80ada:	428b      	cmp	r3, r1
   80adc:	db10      	blt.n	80b00 <UnityTestResultsBegin+0x44>
   80ade:	6813      	ldr	r3, [r2, #0]
   80ae0:	223a      	movs	r2, #58	; 0x3a
   80ae2:	701a      	strb	r2, [r3, #0]
   80ae4:	4b3e      	ldr	r3, [pc, #248]	; (80be0 <UnityTestResultsBegin+0x124>)
   80ae6:	6818      	ldr	r0, [r3, #0]
   80ae8:	6882      	ldr	r2, [r0, #8]
   80aea:	6813      	ldr	r3, [r2, #0]
   80aec:	7819      	ldrb	r1, [r3, #0]
   80aee:	290a      	cmp	r1, #10
   80af0:	d002      	beq.n	80af8 <UnityTestResultsBegin+0x3c>
   80af2:	3301      	adds	r3, #1
   80af4:	6013      	str	r3, [r2, #0]
   80af6:	e011      	b.n	80b1c <UnityTestResultsBegin+0x60>
   80af8:	210a      	movs	r1, #10
   80afa:	4b3a      	ldr	r3, [pc, #232]	; (80be4 <UnityTestResultsBegin+0x128>)
   80afc:	4798      	blx	r3
   80afe:	e00d      	b.n	80b1c <UnityTestResultsBegin+0x60>
   80b00:	213a      	movs	r1, #58	; 0x3a
   80b02:	4b38      	ldr	r3, [pc, #224]	; (80be4 <UnityTestResultsBegin+0x128>)
   80b04:	4798      	blx	r3
   80b06:	e009      	b.n	80b1c <UnityTestResultsBegin+0x60>
   80b08:	6883      	ldr	r3, [r0, #8]
   80b0a:	681b      	ldr	r3, [r3, #0]
   80b0c:	223a      	movs	r2, #58	; 0x3a
   80b0e:	701a      	strb	r2, [r3, #0]
   80b10:	4b33      	ldr	r3, [pc, #204]	; (80be0 <UnityTestResultsBegin+0x124>)
   80b12:	681b      	ldr	r3, [r3, #0]
   80b14:	689b      	ldr	r3, [r3, #8]
   80b16:	681a      	ldr	r2, [r3, #0]
   80b18:	3201      	adds	r2, #1
   80b1a:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)line);
   80b1c:	4628      	mov	r0, r5
   80b1e:	4b32      	ldr	r3, [pc, #200]	; (80be8 <UnityTestResultsBegin+0x12c>)
   80b20:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80b22:	4b2f      	ldr	r3, [pc, #188]	; (80be0 <UnityTestResultsBegin+0x124>)
   80b24:	6818      	ldr	r0, [r3, #0]
   80b26:	6882      	ldr	r2, [r0, #8]
   80b28:	6893      	ldr	r3, [r2, #8]
   80b2a:	3b01      	subs	r3, #1
   80b2c:	6093      	str	r3, [r2, #8]
   80b2e:	2b00      	cmp	r3, #0
   80b30:	da19      	bge.n	80b66 <UnityTestResultsBegin+0xaa>
   80b32:	6882      	ldr	r2, [r0, #8]
   80b34:	6891      	ldr	r1, [r2, #8]
   80b36:	6993      	ldr	r3, [r2, #24]
   80b38:	4299      	cmp	r1, r3
   80b3a:	db10      	blt.n	80b5e <UnityTestResultsBegin+0xa2>
   80b3c:	6813      	ldr	r3, [r2, #0]
   80b3e:	223a      	movs	r2, #58	; 0x3a
   80b40:	701a      	strb	r2, [r3, #0]
   80b42:	4b27      	ldr	r3, [pc, #156]	; (80be0 <UnityTestResultsBegin+0x124>)
   80b44:	6818      	ldr	r0, [r3, #0]
   80b46:	6882      	ldr	r2, [r0, #8]
   80b48:	6813      	ldr	r3, [r2, #0]
   80b4a:	7819      	ldrb	r1, [r3, #0]
   80b4c:	290a      	cmp	r1, #10
   80b4e:	d002      	beq.n	80b56 <UnityTestResultsBegin+0x9a>
   80b50:	3301      	adds	r3, #1
   80b52:	6013      	str	r3, [r2, #0]
   80b54:	e011      	b.n	80b7a <UnityTestResultsBegin+0xbe>
   80b56:	210a      	movs	r1, #10
   80b58:	4b22      	ldr	r3, [pc, #136]	; (80be4 <UnityTestResultsBegin+0x128>)
   80b5a:	4798      	blx	r3
   80b5c:	e00d      	b.n	80b7a <UnityTestResultsBegin+0xbe>
   80b5e:	213a      	movs	r1, #58	; 0x3a
   80b60:	4b20      	ldr	r3, [pc, #128]	; (80be4 <UnityTestResultsBegin+0x128>)
   80b62:	4798      	blx	r3
   80b64:	e009      	b.n	80b7a <UnityTestResultsBegin+0xbe>
   80b66:	6883      	ldr	r3, [r0, #8]
   80b68:	681b      	ldr	r3, [r3, #0]
   80b6a:	223a      	movs	r2, #58	; 0x3a
   80b6c:	701a      	strb	r2, [r3, #0]
   80b6e:	4b1c      	ldr	r3, [pc, #112]	; (80be0 <UnityTestResultsBegin+0x124>)
   80b70:	681b      	ldr	r3, [r3, #0]
   80b72:	689b      	ldr	r3, [r3, #8]
   80b74:	681a      	ldr	r2, [r3, #0]
   80b76:	3201      	adds	r2, #1
   80b78:	601a      	str	r2, [r3, #0]
    UnityPrint(Unity.CurrentTestName);
   80b7a:	4b1c      	ldr	r3, [pc, #112]	; (80bec <UnityTestResultsBegin+0x130>)
   80b7c:	6858      	ldr	r0, [r3, #4]
   80b7e:	4b17      	ldr	r3, [pc, #92]	; (80bdc <UnityTestResultsBegin+0x120>)
   80b80:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80b82:	4b17      	ldr	r3, [pc, #92]	; (80be0 <UnityTestResultsBegin+0x124>)
   80b84:	6818      	ldr	r0, [r3, #0]
   80b86:	6882      	ldr	r2, [r0, #8]
   80b88:	6893      	ldr	r3, [r2, #8]
   80b8a:	3b01      	subs	r3, #1
   80b8c:	6093      	str	r3, [r2, #8]
   80b8e:	2b00      	cmp	r3, #0
   80b90:	da19      	bge.n	80bc6 <UnityTestResultsBegin+0x10a>
   80b92:	6882      	ldr	r2, [r0, #8]
   80b94:	6891      	ldr	r1, [r2, #8]
   80b96:	6993      	ldr	r3, [r2, #24]
   80b98:	4299      	cmp	r1, r3
   80b9a:	db10      	blt.n	80bbe <UnityTestResultsBegin+0x102>
   80b9c:	6813      	ldr	r3, [r2, #0]
   80b9e:	223a      	movs	r2, #58	; 0x3a
   80ba0:	701a      	strb	r2, [r3, #0]
   80ba2:	4b0f      	ldr	r3, [pc, #60]	; (80be0 <UnityTestResultsBegin+0x124>)
   80ba4:	6818      	ldr	r0, [r3, #0]
   80ba6:	6882      	ldr	r2, [r0, #8]
   80ba8:	6813      	ldr	r3, [r2, #0]
   80baa:	7819      	ldrb	r1, [r3, #0]
   80bac:	290a      	cmp	r1, #10
   80bae:	d002      	beq.n	80bb6 <UnityTestResultsBegin+0xfa>
   80bb0:	3301      	adds	r3, #1
   80bb2:	6013      	str	r3, [r2, #0]
   80bb4:	bd38      	pop	{r3, r4, r5, pc}
   80bb6:	210a      	movs	r1, #10
   80bb8:	4b0a      	ldr	r3, [pc, #40]	; (80be4 <UnityTestResultsBegin+0x128>)
   80bba:	4798      	blx	r3
   80bbc:	bd38      	pop	{r3, r4, r5, pc}
   80bbe:	213a      	movs	r1, #58	; 0x3a
   80bc0:	4b08      	ldr	r3, [pc, #32]	; (80be4 <UnityTestResultsBegin+0x128>)
   80bc2:	4798      	blx	r3
   80bc4:	bd38      	pop	{r3, r4, r5, pc}
   80bc6:	6883      	ldr	r3, [r0, #8]
   80bc8:	681b      	ldr	r3, [r3, #0]
   80bca:	223a      	movs	r2, #58	; 0x3a
   80bcc:	701a      	strb	r2, [r3, #0]
   80bce:	4b04      	ldr	r3, [pc, #16]	; (80be0 <UnityTestResultsBegin+0x124>)
   80bd0:	681b      	ldr	r3, [r3, #0]
   80bd2:	689b      	ldr	r3, [r3, #8]
   80bd4:	681a      	ldr	r2, [r3, #0]
   80bd6:	3201      	adds	r2, #1
   80bd8:	601a      	str	r2, [r3, #0]
   80bda:	bd38      	pop	{r3, r4, r5, pc}
   80bdc:	00080891 	.word	0x00080891
   80be0:	20070430 	.word	0x20070430
   80be4:	00081f21 	.word	0x00081f21
   80be8:	00080569 	.word	0x00080569
   80bec:	200709c4 	.word	0x200709c4

00080bf0 <UnityTestResultsFailBegin>:
}

//-----------------------------------------------
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
   80bf0:	b508      	push	{r3, lr}
   80bf2:	4601      	mov	r1, r0
    UnityTestResultsBegin(Unity.TestFile, line);
   80bf4:	4b19      	ldr	r3, [pc, #100]	; (80c5c <UnityTestResultsFailBegin+0x6c>)
   80bf6:	6818      	ldr	r0, [r3, #0]
   80bf8:	4b19      	ldr	r3, [pc, #100]	; (80c60 <UnityTestResultsFailBegin+0x70>)
   80bfa:	4798      	blx	r3
    UnityPrint(UnityStrFail);
   80bfc:	4819      	ldr	r0, [pc, #100]	; (80c64 <UnityTestResultsFailBegin+0x74>)
   80bfe:	4b1a      	ldr	r3, [pc, #104]	; (80c68 <UnityTestResultsFailBegin+0x78>)
   80c00:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80c02:	4b1a      	ldr	r3, [pc, #104]	; (80c6c <UnityTestResultsFailBegin+0x7c>)
   80c04:	6818      	ldr	r0, [r3, #0]
   80c06:	6882      	ldr	r2, [r0, #8]
   80c08:	6893      	ldr	r3, [r2, #8]
   80c0a:	3b01      	subs	r3, #1
   80c0c:	6093      	str	r3, [r2, #8]
   80c0e:	2b00      	cmp	r3, #0
   80c10:	da19      	bge.n	80c46 <UnityTestResultsFailBegin+0x56>
   80c12:	6882      	ldr	r2, [r0, #8]
   80c14:	6891      	ldr	r1, [r2, #8]
   80c16:	6993      	ldr	r3, [r2, #24]
   80c18:	4299      	cmp	r1, r3
   80c1a:	db10      	blt.n	80c3e <UnityTestResultsFailBegin+0x4e>
   80c1c:	6813      	ldr	r3, [r2, #0]
   80c1e:	223a      	movs	r2, #58	; 0x3a
   80c20:	701a      	strb	r2, [r3, #0]
   80c22:	4b12      	ldr	r3, [pc, #72]	; (80c6c <UnityTestResultsFailBegin+0x7c>)
   80c24:	6818      	ldr	r0, [r3, #0]
   80c26:	6882      	ldr	r2, [r0, #8]
   80c28:	6813      	ldr	r3, [r2, #0]
   80c2a:	7819      	ldrb	r1, [r3, #0]
   80c2c:	290a      	cmp	r1, #10
   80c2e:	d002      	beq.n	80c36 <UnityTestResultsFailBegin+0x46>
   80c30:	3301      	adds	r3, #1
   80c32:	6013      	str	r3, [r2, #0]
   80c34:	bd08      	pop	{r3, pc}
   80c36:	210a      	movs	r1, #10
   80c38:	4b0d      	ldr	r3, [pc, #52]	; (80c70 <UnityTestResultsFailBegin+0x80>)
   80c3a:	4798      	blx	r3
   80c3c:	bd08      	pop	{r3, pc}
   80c3e:	213a      	movs	r1, #58	; 0x3a
   80c40:	4b0b      	ldr	r3, [pc, #44]	; (80c70 <UnityTestResultsFailBegin+0x80>)
   80c42:	4798      	blx	r3
   80c44:	bd08      	pop	{r3, pc}
   80c46:	6883      	ldr	r3, [r0, #8]
   80c48:	681b      	ldr	r3, [r3, #0]
   80c4a:	223a      	movs	r2, #58	; 0x3a
   80c4c:	701a      	strb	r2, [r3, #0]
   80c4e:	4b07      	ldr	r3, [pc, #28]	; (80c6c <UnityTestResultsFailBegin+0x7c>)
   80c50:	681b      	ldr	r3, [r3, #0]
   80c52:	689b      	ldr	r3, [r3, #8]
   80c54:	681a      	ldr	r2, [r3, #0]
   80c56:	3201      	adds	r2, #1
   80c58:	601a      	str	r2, [r3, #0]
   80c5a:	bd08      	pop	{r3, pc}
   80c5c:	200709c4 	.word	0x200709c4
   80c60:	00080abd 	.word	0x00080abd
   80c64:	00082f1c 	.word	0x00082f1c
   80c68:	00080891 	.word	0x00080891
   80c6c:	20070430 	.word	0x20070430
   80c70:	00081f21 	.word	0x00081f21

00080c74 <UnityAddMsgIfSpecified>:
    UNITY_PRINT_EOL;
}

//-----------------------------------------------
static void UnityAddMsgIfSpecified(const char* msg)
{
   80c74:	b538      	push	{r3, r4, r5, lr}
    if (msg)
   80c76:	4605      	mov	r5, r0
   80c78:	b120      	cbz	r0, 80c84 <UnityAddMsgIfSpecified+0x10>
    {
        UnityPrint(UnityStrSpacer);
   80c7a:	4803      	ldr	r0, [pc, #12]	; (80c88 <UnityAddMsgIfSpecified+0x14>)
   80c7c:	4c03      	ldr	r4, [pc, #12]	; (80c8c <UnityAddMsgIfSpecified+0x18>)
   80c7e:	47a0      	blx	r4
        UnityPrint(msg);
   80c80:	4628      	mov	r0, r5
   80c82:	47a0      	blx	r4
   80c84:	bd38      	pop	{r3, r4, r5, pc}
   80c86:	bf00      	nop
   80c88:	00082f10 	.word	0x00082f10
   80c8c:	00080891 	.word	0x00080891

00080c90 <UnityPrintMask>:
    }
}

//-----------------------------------------------
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
   80c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80c94:	4607      	mov	r7, r0
   80c96:	4688      	mov	r8, r1
   80c98:	2520      	movs	r5, #32
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
   80c9a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
                UNITY_OUTPUT_CHAR('0');
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   80c9e:	4e43      	ldr	r6, [pc, #268]	; (80dac <UnityPrintMask+0x11c>)
   80ca0:	f04f 0958 	mov.w	r9, #88	; 0x58
   80ca4:	f8df a108 	ldr.w	sl, [pc, #264]	; 80db0 <UnityPrintMask+0x120>
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
    {
        if (current_bit & mask)
   80ca8:	423c      	tst	r4, r7
   80caa:	d052      	beq.n	80d52 <UnityPrintMask+0xc2>
        {
            if (current_bit & number)
   80cac:	ea14 0f08 	tst.w	r4, r8
   80cb0:	d027      	beq.n	80d02 <UnityPrintMask+0x72>
            {
                UNITY_OUTPUT_CHAR('1');
   80cb2:	6830      	ldr	r0, [r6, #0]
   80cb4:	6882      	ldr	r2, [r0, #8]
   80cb6:	6893      	ldr	r3, [r2, #8]
   80cb8:	3b01      	subs	r3, #1
   80cba:	6093      	str	r3, [r2, #8]
   80cbc:	2b00      	cmp	r3, #0
   80cbe:	da16      	bge.n	80cee <UnityPrintMask+0x5e>
   80cc0:	6882      	ldr	r2, [r0, #8]
   80cc2:	6891      	ldr	r1, [r2, #8]
   80cc4:	6993      	ldr	r3, [r2, #24]
   80cc6:	4299      	cmp	r1, r3
   80cc8:	db0e      	blt.n	80ce8 <UnityPrintMask+0x58>
   80cca:	6813      	ldr	r3, [r2, #0]
   80ccc:	2231      	movs	r2, #49	; 0x31
   80cce:	701a      	strb	r2, [r3, #0]
   80cd0:	6830      	ldr	r0, [r6, #0]
   80cd2:	6882      	ldr	r2, [r0, #8]
   80cd4:	6813      	ldr	r3, [r2, #0]
   80cd6:	7819      	ldrb	r1, [r3, #0]
   80cd8:	290a      	cmp	r1, #10
   80cda:	d002      	beq.n	80ce2 <UnityPrintMask+0x52>
   80cdc:	3301      	adds	r3, #1
   80cde:	6013      	str	r3, [r2, #0]
   80ce0:	e05e      	b.n	80da0 <UnityPrintMask+0x110>
   80ce2:	210a      	movs	r1, #10
   80ce4:	47d0      	blx	sl
   80ce6:	e05b      	b.n	80da0 <UnityPrintMask+0x110>
   80ce8:	2131      	movs	r1, #49	; 0x31
   80cea:	47d0      	blx	sl
   80cec:	e058      	b.n	80da0 <UnityPrintMask+0x110>
   80cee:	6883      	ldr	r3, [r0, #8]
   80cf0:	681b      	ldr	r3, [r3, #0]
   80cf2:	2231      	movs	r2, #49	; 0x31
   80cf4:	701a      	strb	r2, [r3, #0]
   80cf6:	6833      	ldr	r3, [r6, #0]
   80cf8:	689b      	ldr	r3, [r3, #8]
   80cfa:	681a      	ldr	r2, [r3, #0]
   80cfc:	3201      	adds	r2, #1
   80cfe:	601a      	str	r2, [r3, #0]
   80d00:	e04e      	b.n	80da0 <UnityPrintMask+0x110>
            }
            else
            {
                UNITY_OUTPUT_CHAR('0');
   80d02:	6830      	ldr	r0, [r6, #0]
   80d04:	6882      	ldr	r2, [r0, #8]
   80d06:	6893      	ldr	r3, [r2, #8]
   80d08:	3b01      	subs	r3, #1
   80d0a:	6093      	str	r3, [r2, #8]
   80d0c:	2b00      	cmp	r3, #0
   80d0e:	da16      	bge.n	80d3e <UnityPrintMask+0xae>
   80d10:	6882      	ldr	r2, [r0, #8]
   80d12:	6891      	ldr	r1, [r2, #8]
   80d14:	6993      	ldr	r3, [r2, #24]
   80d16:	4299      	cmp	r1, r3
   80d18:	db0e      	blt.n	80d38 <UnityPrintMask+0xa8>
   80d1a:	6813      	ldr	r3, [r2, #0]
   80d1c:	2230      	movs	r2, #48	; 0x30
   80d1e:	701a      	strb	r2, [r3, #0]
   80d20:	6830      	ldr	r0, [r6, #0]
   80d22:	6882      	ldr	r2, [r0, #8]
   80d24:	6813      	ldr	r3, [r2, #0]
   80d26:	7819      	ldrb	r1, [r3, #0]
   80d28:	290a      	cmp	r1, #10
   80d2a:	d002      	beq.n	80d32 <UnityPrintMask+0xa2>
   80d2c:	3301      	adds	r3, #1
   80d2e:	6013      	str	r3, [r2, #0]
   80d30:	e036      	b.n	80da0 <UnityPrintMask+0x110>
   80d32:	210a      	movs	r1, #10
   80d34:	47d0      	blx	sl
   80d36:	e033      	b.n	80da0 <UnityPrintMask+0x110>
   80d38:	2130      	movs	r1, #48	; 0x30
   80d3a:	47d0      	blx	sl
   80d3c:	e030      	b.n	80da0 <UnityPrintMask+0x110>
   80d3e:	6883      	ldr	r3, [r0, #8]
   80d40:	681b      	ldr	r3, [r3, #0]
   80d42:	2230      	movs	r2, #48	; 0x30
   80d44:	701a      	strb	r2, [r3, #0]
   80d46:	6833      	ldr	r3, [r6, #0]
   80d48:	689b      	ldr	r3, [r3, #8]
   80d4a:	681a      	ldr	r2, [r3, #0]
   80d4c:	3201      	adds	r2, #1
   80d4e:	601a      	str	r2, [r3, #0]
   80d50:	e026      	b.n	80da0 <UnityPrintMask+0x110>
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   80d52:	6830      	ldr	r0, [r6, #0]
   80d54:	6882      	ldr	r2, [r0, #8]
   80d56:	6893      	ldr	r3, [r2, #8]
   80d58:	3b01      	subs	r3, #1
   80d5a:	6093      	str	r3, [r2, #8]
   80d5c:	2b00      	cmp	r3, #0
   80d5e:	da16      	bge.n	80d8e <UnityPrintMask+0xfe>
   80d60:	6882      	ldr	r2, [r0, #8]
   80d62:	6891      	ldr	r1, [r2, #8]
   80d64:	6993      	ldr	r3, [r2, #24]
   80d66:	4299      	cmp	r1, r3
   80d68:	db0e      	blt.n	80d88 <UnityPrintMask+0xf8>
   80d6a:	6813      	ldr	r3, [r2, #0]
   80d6c:	f883 9000 	strb.w	r9, [r3]
   80d70:	6830      	ldr	r0, [r6, #0]
   80d72:	6882      	ldr	r2, [r0, #8]
   80d74:	6813      	ldr	r3, [r2, #0]
   80d76:	7819      	ldrb	r1, [r3, #0]
   80d78:	290a      	cmp	r1, #10
   80d7a:	d002      	beq.n	80d82 <UnityPrintMask+0xf2>
   80d7c:	3301      	adds	r3, #1
   80d7e:	6013      	str	r3, [r2, #0]
   80d80:	e00e      	b.n	80da0 <UnityPrintMask+0x110>
   80d82:	210a      	movs	r1, #10
   80d84:	47d0      	blx	sl
   80d86:	e00b      	b.n	80da0 <UnityPrintMask+0x110>
   80d88:	4649      	mov	r1, r9
   80d8a:	47d0      	blx	sl
   80d8c:	e008      	b.n	80da0 <UnityPrintMask+0x110>
   80d8e:	6883      	ldr	r3, [r0, #8]
   80d90:	681b      	ldr	r3, [r3, #0]
   80d92:	f883 9000 	strb.w	r9, [r3]
   80d96:	6833      	ldr	r3, [r6, #0]
   80d98:	689b      	ldr	r3, [r3, #8]
   80d9a:	681a      	ldr	r2, [r3, #0]
   80d9c:	3201      	adds	r2, #1
   80d9e:	601a      	str	r2, [r3, #0]
        }
        current_bit = current_bit >> 1;
   80da0:	0864      	lsrs	r4, r4, #1
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
   80da2:	3d01      	subs	r5, #1
   80da4:	d180      	bne.n	80ca8 <UnityPrintMask+0x18>
        {
            UNITY_OUTPUT_CHAR('X');
        }
        current_bit = current_bit >> 1;
    }
}
   80da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80daa:	bf00      	nop
   80dac:	20070430 	.word	0x20070430
   80db0:	00081f21 	.word	0x00081f21

00080db4 <UnityPrintFail>:
#endif

//-----------------------------------------------

void UnityPrintFail(void)
{
   80db4:	b508      	push	{r3, lr}
    UnityPrint(UnityStrFail);
   80db6:	4802      	ldr	r0, [pc, #8]	; (80dc0 <UnityPrintFail+0xc>)
   80db8:	4b02      	ldr	r3, [pc, #8]	; (80dc4 <UnityPrintFail+0x10>)
   80dba:	4798      	blx	r3
   80dbc:	bd08      	pop	{r3, pc}
   80dbe:	bf00      	nop
   80dc0:	00082f1c 	.word	0x00082f1c
   80dc4:	00080891 	.word	0x00080891

00080dc8 <UnityPrintOk>:
}

void UnityPrintOk(void)
{
   80dc8:	b508      	push	{r3, lr}
    UnityPrint(UnityStrOk);
   80dca:	4802      	ldr	r0, [pc, #8]	; (80dd4 <UnityPrintOk+0xc>)
   80dcc:	4b02      	ldr	r3, [pc, #8]	; (80dd8 <UnityPrintOk+0x10>)
   80dce:	4798      	blx	r3
   80dd0:	bd08      	pop	{r3, pc}
   80dd2:	bf00      	nop
   80dd4:	00082f0c 	.word	0x00082f0c
   80dd8:	00080891 	.word	0x00080891

00080ddc <UnityConcludeTest>:
    UNITY_OUTPUT_CHAR(':');
}

//-----------------------------------------------
void UnityConcludeTest(void)
{
   80ddc:	b508      	push	{r3, lr}
    if (Unity.CurrentTestIgnored)
   80dde:	4b24      	ldr	r3, [pc, #144]	; (80e70 <UnityConcludeTest+0x94>)
   80de0:	69db      	ldr	r3, [r3, #28]
   80de2:	b123      	cbz	r3, 80dee <UnityConcludeTest+0x12>
    {
        Unity.TestIgnores++;
   80de4:	4b22      	ldr	r3, [pc, #136]	; (80e70 <UnityConcludeTest+0x94>)
   80de6:	695a      	ldr	r2, [r3, #20]
   80de8:	3201      	adds	r2, #1
   80dea:	615a      	str	r2, [r3, #20]
   80dec:	e00f      	b.n	80e0e <UnityConcludeTest+0x32>
    }
    else if (!Unity.CurrentTestFailed)
   80dee:	4b20      	ldr	r3, [pc, #128]	; (80e70 <UnityConcludeTest+0x94>)
   80df0:	699b      	ldr	r3, [r3, #24]
   80df2:	b943      	cbnz	r3, 80e06 <UnityConcludeTest+0x2a>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
   80df4:	4b1e      	ldr	r3, [pc, #120]	; (80e70 <UnityConcludeTest+0x94>)
   80df6:	6818      	ldr	r0, [r3, #0]
   80df8:	6899      	ldr	r1, [r3, #8]
   80dfa:	4b1e      	ldr	r3, [pc, #120]	; (80e74 <UnityConcludeTest+0x98>)
   80dfc:	4798      	blx	r3
        UnityPrint(UnityStrPass);
   80dfe:	481e      	ldr	r0, [pc, #120]	; (80e78 <UnityConcludeTest+0x9c>)
   80e00:	4b1e      	ldr	r3, [pc, #120]	; (80e7c <UnityConcludeTest+0xa0>)
   80e02:	4798      	blx	r3
   80e04:	e003      	b.n	80e0e <UnityConcludeTest+0x32>
    }
    else
    {
        Unity.TestFailures++;
   80e06:	4b1a      	ldr	r3, [pc, #104]	; (80e70 <UnityConcludeTest+0x94>)
   80e08:	691a      	ldr	r2, [r3, #16]
   80e0a:	3201      	adds	r2, #1
   80e0c:	611a      	str	r2, [r3, #16]
    }

    Unity.CurrentTestFailed = 0;
   80e0e:	4b18      	ldr	r3, [pc, #96]	; (80e70 <UnityConcludeTest+0x94>)
   80e10:	2200      	movs	r2, #0
   80e12:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   80e14:	61da      	str	r2, [r3, #28]
    UNITY_PRINT_EOL;
   80e16:	4b1a      	ldr	r3, [pc, #104]	; (80e80 <UnityConcludeTest+0xa4>)
   80e18:	6818      	ldr	r0, [r3, #0]
   80e1a:	6882      	ldr	r2, [r0, #8]
   80e1c:	6893      	ldr	r3, [r2, #8]
   80e1e:	3b01      	subs	r3, #1
   80e20:	6093      	str	r3, [r2, #8]
   80e22:	2b00      	cmp	r3, #0
   80e24:	da19      	bge.n	80e5a <UnityConcludeTest+0x7e>
   80e26:	6882      	ldr	r2, [r0, #8]
   80e28:	6891      	ldr	r1, [r2, #8]
   80e2a:	6993      	ldr	r3, [r2, #24]
   80e2c:	4299      	cmp	r1, r3
   80e2e:	db10      	blt.n	80e52 <UnityConcludeTest+0x76>
   80e30:	6813      	ldr	r3, [r2, #0]
   80e32:	220a      	movs	r2, #10
   80e34:	701a      	strb	r2, [r3, #0]
   80e36:	4b12      	ldr	r3, [pc, #72]	; (80e80 <UnityConcludeTest+0xa4>)
   80e38:	6818      	ldr	r0, [r3, #0]
   80e3a:	6882      	ldr	r2, [r0, #8]
   80e3c:	6813      	ldr	r3, [r2, #0]
   80e3e:	7819      	ldrb	r1, [r3, #0]
   80e40:	290a      	cmp	r1, #10
   80e42:	d002      	beq.n	80e4a <UnityConcludeTest+0x6e>
   80e44:	3301      	adds	r3, #1
   80e46:	6013      	str	r3, [r2, #0]
   80e48:	bd08      	pop	{r3, pc}
   80e4a:	210a      	movs	r1, #10
   80e4c:	4b0d      	ldr	r3, [pc, #52]	; (80e84 <UnityConcludeTest+0xa8>)
   80e4e:	4798      	blx	r3
   80e50:	bd08      	pop	{r3, pc}
   80e52:	210a      	movs	r1, #10
   80e54:	4b0b      	ldr	r3, [pc, #44]	; (80e84 <UnityConcludeTest+0xa8>)
   80e56:	4798      	blx	r3
   80e58:	bd08      	pop	{r3, pc}
   80e5a:	6883      	ldr	r3, [r0, #8]
   80e5c:	681b      	ldr	r3, [r3, #0]
   80e5e:	220a      	movs	r2, #10
   80e60:	701a      	strb	r2, [r3, #0]
   80e62:	4b07      	ldr	r3, [pc, #28]	; (80e80 <UnityConcludeTest+0xa4>)
   80e64:	681b      	ldr	r3, [r3, #0]
   80e66:	689b      	ldr	r3, [r3, #8]
   80e68:	681a      	ldr	r2, [r3, #0]
   80e6a:	3201      	adds	r2, #1
   80e6c:	601a      	str	r2, [r3, #0]
   80e6e:	bd08      	pop	{r3, pc}
   80e70:	200709c4 	.word	0x200709c4
   80e74:	00080abd 	.word	0x00080abd
   80e78:	00082f68 	.word	0x00082f68
   80e7c:	00080891 	.word	0x00080891
   80e80:	20070430 	.word	0x20070430
   80e84:	00081f21 	.word	0x00081f21

00080e88 <UnityAssertBits>:
void UnityAssertBits(const _U_SINT mask,
                     const _U_SINT expected,
                     const _U_SINT actual,
                     const char* msg,
                     const UNITY_LINE_TYPE lineNumber)
{
   80e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80e8c:	4605      	mov	r5, r0
   80e8e:	460f      	mov	r7, r1
   80e90:	4616      	mov	r6, r2
   80e92:	4698      	mov	r8, r3
    UNITY_SKIP_EXECUTION;
   80e94:	4c12      	ldr	r4, [pc, #72]	; (80ee0 <UnityAssertBits+0x58>)
   80e96:	69a4      	ldr	r4, [r4, #24]
   80e98:	b9fc      	cbnz	r4, 80eda <UnityAssertBits+0x52>
   80e9a:	4a11      	ldr	r2, [pc, #68]	; (80ee0 <UnityAssertBits+0x58>)
   80e9c:	69d2      	ldr	r2, [r2, #28]
   80e9e:	b9e2      	cbnz	r2, 80eda <UnityAssertBits+0x52>

    if ((mask & expected) != (mask & actual))
   80ea0:	ea81 0306 	eor.w	r3, r1, r6
   80ea4:	4203      	tst	r3, r0
   80ea6:	d018      	beq.n	80eda <UnityAssertBits+0x52>
    {
        UnityTestResultsFailBegin(lineNumber);
   80ea8:	9808      	ldr	r0, [sp, #32]
   80eaa:	4b0e      	ldr	r3, [pc, #56]	; (80ee4 <UnityAssertBits+0x5c>)
   80eac:	4798      	blx	r3
        UnityPrint(UnityStrExpected);
   80eae:	480e      	ldr	r0, [pc, #56]	; (80ee8 <UnityAssertBits+0x60>)
   80eb0:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80efc <UnityAssertBits+0x74>
   80eb4:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)expected);
   80eb6:	4628      	mov	r0, r5
   80eb8:	4639      	mov	r1, r7
   80eba:	4c0c      	ldr	r4, [pc, #48]	; (80eec <UnityAssertBits+0x64>)
   80ebc:	47a0      	blx	r4
        UnityPrint(UnityStrWas);
   80ebe:	480c      	ldr	r0, [pc, #48]	; (80ef0 <UnityAssertBits+0x68>)
   80ec0:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)actual);
   80ec2:	4628      	mov	r0, r5
   80ec4:	4631      	mov	r1, r6
   80ec6:	47a0      	blx	r4
        UnityAddMsgIfSpecified(msg);
   80ec8:	4640      	mov	r0, r8
   80eca:	4b0a      	ldr	r3, [pc, #40]	; (80ef4 <UnityAssertBits+0x6c>)
   80ecc:	4798      	blx	r3
        UNITY_FAIL_AND_BAIL;
   80ece:	4804      	ldr	r0, [pc, #16]	; (80ee0 <UnityAssertBits+0x58>)
   80ed0:	2101      	movs	r1, #1
   80ed2:	6181      	str	r1, [r0, #24]
   80ed4:	3020      	adds	r0, #32
   80ed6:	4b08      	ldr	r3, [pc, #32]	; (80ef8 <UnityAssertBits+0x70>)
   80ed8:	4798      	blx	r3
   80eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80ede:	bf00      	nop
   80ee0:	200709c4 	.word	0x200709c4
   80ee4:	00080bf1 	.word	0x00080bf1
   80ee8:	00082f24 	.word	0x00082f24
   80eec:	00080c91 	.word	0x00080c91
   80ef0:	00082f14 	.word	0x00082f14
   80ef4:	00080c75 	.word	0x00080c75
   80ef8:	00081e11 	.word	0x00081e11
   80efc:	00080891 	.word	0x00080891

00080f00 <UnityDefaultTestRun>:
    void setUp(void);
    void tearDown(void);
#endif
//-----------------------------------------------
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
   80f00:	b500      	push	{lr}
   80f02:	b083      	sub	sp, #12
   80f04:	9001      	str	r0, [sp, #4]
    Unity.CurrentTestName = FuncName;
   80f06:	480e      	ldr	r0, [pc, #56]	; (80f40 <UnityDefaultTestRun+0x40>)
   80f08:	6041      	str	r1, [r0, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
   80f0a:	6082      	str	r2, [r0, #8]
    Unity.NumberOfTests++;
   80f0c:	68c3      	ldr	r3, [r0, #12]
   80f0e:	3301      	adds	r3, #1
   80f10:	60c3      	str	r3, [r0, #12]
    if (TEST_PROTECT())
   80f12:	3020      	adds	r0, #32
   80f14:	4b0b      	ldr	r3, [pc, #44]	; (80f44 <UnityDefaultTestRun+0x44>)
   80f16:	4798      	blx	r3
   80f18:	b918      	cbnz	r0, 80f22 <UnityDefaultTestRun+0x22>
    {
        setUp();
   80f1a:	4b0b      	ldr	r3, [pc, #44]	; (80f48 <UnityDefaultTestRun+0x48>)
   80f1c:	4798      	blx	r3
        Func();
   80f1e:	9b01      	ldr	r3, [sp, #4]
   80f20:	4798      	blx	r3
    }
    if (TEST_PROTECT() && !(Unity.CurrentTestIgnored))
   80f22:	480a      	ldr	r0, [pc, #40]	; (80f4c <UnityDefaultTestRun+0x4c>)
   80f24:	4b07      	ldr	r3, [pc, #28]	; (80f44 <UnityDefaultTestRun+0x44>)
   80f26:	4798      	blx	r3
   80f28:	b920      	cbnz	r0, 80f34 <UnityDefaultTestRun+0x34>
   80f2a:	4b05      	ldr	r3, [pc, #20]	; (80f40 <UnityDefaultTestRun+0x40>)
   80f2c:	69db      	ldr	r3, [r3, #28]
   80f2e:	b90b      	cbnz	r3, 80f34 <UnityDefaultTestRun+0x34>
    {
        tearDown();
   80f30:	4b07      	ldr	r3, [pc, #28]	; (80f50 <UnityDefaultTestRun+0x50>)
   80f32:	4798      	blx	r3
    }
    UnityConcludeTest();
   80f34:	4b07      	ldr	r3, [pc, #28]	; (80f54 <UnityDefaultTestRun+0x54>)
   80f36:	4798      	blx	r3
}
   80f38:	b003      	add	sp, #12
   80f3a:	f85d fb04 	ldr.w	pc, [sp], #4
   80f3e:	bf00      	nop
   80f40:	200709c4 	.word	0x200709c4
   80f44:	00081e05 	.word	0x00081e05
   80f48:	00080171 	.word	0x00080171
   80f4c:	200709e4 	.word	0x200709e4
   80f50:	00080175 	.word	0x00080175
   80f54:	00080ddd 	.word	0x00080ddd

00080f58 <UnityBegin>:

//-----------------------------------------------
void UnityBegin(const char* filename)
{
    Unity.TestFile = filename;
   80f58:	4b05      	ldr	r3, [pc, #20]	; (80f70 <UnityBegin+0x18>)
   80f5a:	6018      	str	r0, [r3, #0]
    Unity.CurrentTestName = NULL;
   80f5c:	2200      	movs	r2, #0
   80f5e:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
   80f60:	609a      	str	r2, [r3, #8]
    Unity.NumberOfTests = 0;
   80f62:	60da      	str	r2, [r3, #12]
    Unity.TestFailures = 0;
   80f64:	611a      	str	r2, [r3, #16]
    Unity.TestIgnores = 0;
   80f66:	615a      	str	r2, [r3, #20]
    Unity.CurrentTestFailed = 0;
   80f68:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   80f6a:	61da      	str	r2, [r3, #28]
   80f6c:	4770      	bx	lr
   80f6e:	bf00      	nop
   80f70:	200709c4 	.word	0x200709c4

00080f74 <UnityEnd>:
    UNITY_OUTPUT_START();
}

//-----------------------------------------------
int UnityEnd(void)
{
   80f74:	b570      	push	{r4, r5, r6, lr}
    UNITY_PRINT_EOL;
   80f76:	4b66      	ldr	r3, [pc, #408]	; (81110 <UnityEnd+0x19c>)
   80f78:	6818      	ldr	r0, [r3, #0]
   80f7a:	6882      	ldr	r2, [r0, #8]
   80f7c:	6893      	ldr	r3, [r2, #8]
   80f7e:	3b01      	subs	r3, #1
   80f80:	6093      	str	r3, [r2, #8]
   80f82:	2b00      	cmp	r3, #0
   80f84:	da19      	bge.n	80fba <UnityEnd+0x46>
   80f86:	6882      	ldr	r2, [r0, #8]
   80f88:	6891      	ldr	r1, [r2, #8]
   80f8a:	6993      	ldr	r3, [r2, #24]
   80f8c:	4299      	cmp	r1, r3
   80f8e:	db10      	blt.n	80fb2 <UnityEnd+0x3e>
   80f90:	6813      	ldr	r3, [r2, #0]
   80f92:	220a      	movs	r2, #10
   80f94:	701a      	strb	r2, [r3, #0]
   80f96:	4b5e      	ldr	r3, [pc, #376]	; (81110 <UnityEnd+0x19c>)
   80f98:	6818      	ldr	r0, [r3, #0]
   80f9a:	6882      	ldr	r2, [r0, #8]
   80f9c:	6813      	ldr	r3, [r2, #0]
   80f9e:	7819      	ldrb	r1, [r3, #0]
   80fa0:	290a      	cmp	r1, #10
   80fa2:	d002      	beq.n	80faa <UnityEnd+0x36>
   80fa4:	3301      	adds	r3, #1
   80fa6:	6013      	str	r3, [r2, #0]
   80fa8:	e011      	b.n	80fce <UnityEnd+0x5a>
   80faa:	210a      	movs	r1, #10
   80fac:	4b59      	ldr	r3, [pc, #356]	; (81114 <UnityEnd+0x1a0>)
   80fae:	4798      	blx	r3
   80fb0:	e00d      	b.n	80fce <UnityEnd+0x5a>
   80fb2:	210a      	movs	r1, #10
   80fb4:	4b57      	ldr	r3, [pc, #348]	; (81114 <UnityEnd+0x1a0>)
   80fb6:	4798      	blx	r3
   80fb8:	e009      	b.n	80fce <UnityEnd+0x5a>
   80fba:	6883      	ldr	r3, [r0, #8]
   80fbc:	681b      	ldr	r3, [r3, #0]
   80fbe:	220a      	movs	r2, #10
   80fc0:	701a      	strb	r2, [r3, #0]
   80fc2:	4b53      	ldr	r3, [pc, #332]	; (81110 <UnityEnd+0x19c>)
   80fc4:	681b      	ldr	r3, [r3, #0]
   80fc6:	689b      	ldr	r3, [r3, #8]
   80fc8:	681a      	ldr	r2, [r3, #0]
   80fca:	3201      	adds	r2, #1
   80fcc:	601a      	str	r2, [r3, #0]
    UnityPrint(UnityStrBreaker);
   80fce:	4852      	ldr	r0, [pc, #328]	; (81118 <UnityEnd+0x1a4>)
   80fd0:	4b52      	ldr	r3, [pc, #328]	; (8111c <UnityEnd+0x1a8>)
   80fd2:	4798      	blx	r3
    UNITY_PRINT_EOL;
   80fd4:	4b4e      	ldr	r3, [pc, #312]	; (81110 <UnityEnd+0x19c>)
   80fd6:	6818      	ldr	r0, [r3, #0]
   80fd8:	6882      	ldr	r2, [r0, #8]
   80fda:	6893      	ldr	r3, [r2, #8]
   80fdc:	3b01      	subs	r3, #1
   80fde:	6093      	str	r3, [r2, #8]
   80fe0:	2b00      	cmp	r3, #0
   80fe2:	da19      	bge.n	81018 <UnityEnd+0xa4>
   80fe4:	6882      	ldr	r2, [r0, #8]
   80fe6:	6891      	ldr	r1, [r2, #8]
   80fe8:	6993      	ldr	r3, [r2, #24]
   80fea:	4299      	cmp	r1, r3
   80fec:	db10      	blt.n	81010 <UnityEnd+0x9c>
   80fee:	6813      	ldr	r3, [r2, #0]
   80ff0:	220a      	movs	r2, #10
   80ff2:	701a      	strb	r2, [r3, #0]
   80ff4:	4b46      	ldr	r3, [pc, #280]	; (81110 <UnityEnd+0x19c>)
   80ff6:	6818      	ldr	r0, [r3, #0]
   80ff8:	6882      	ldr	r2, [r0, #8]
   80ffa:	6813      	ldr	r3, [r2, #0]
   80ffc:	7819      	ldrb	r1, [r3, #0]
   80ffe:	290a      	cmp	r1, #10
   81000:	d002      	beq.n	81008 <UnityEnd+0x94>
   81002:	3301      	adds	r3, #1
   81004:	6013      	str	r3, [r2, #0]
   81006:	e011      	b.n	8102c <UnityEnd+0xb8>
   81008:	210a      	movs	r1, #10
   8100a:	4b42      	ldr	r3, [pc, #264]	; (81114 <UnityEnd+0x1a0>)
   8100c:	4798      	blx	r3
   8100e:	e00d      	b.n	8102c <UnityEnd+0xb8>
   81010:	210a      	movs	r1, #10
   81012:	4b40      	ldr	r3, [pc, #256]	; (81114 <UnityEnd+0x1a0>)
   81014:	4798      	blx	r3
   81016:	e009      	b.n	8102c <UnityEnd+0xb8>
   81018:	6883      	ldr	r3, [r0, #8]
   8101a:	681b      	ldr	r3, [r3, #0]
   8101c:	220a      	movs	r2, #10
   8101e:	701a      	strb	r2, [r3, #0]
   81020:	4b3b      	ldr	r3, [pc, #236]	; (81110 <UnityEnd+0x19c>)
   81022:	681b      	ldr	r3, [r3, #0]
   81024:	689b      	ldr	r3, [r3, #8]
   81026:	681a      	ldr	r2, [r3, #0]
   81028:	3201      	adds	r2, #1
   8102a:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)(Unity.NumberOfTests));
   8102c:	4e3c      	ldr	r6, [pc, #240]	; (81120 <UnityEnd+0x1ac>)
   8102e:	68f0      	ldr	r0, [r6, #12]
   81030:	4d3c      	ldr	r5, [pc, #240]	; (81124 <UnityEnd+0x1b0>)
   81032:	47a8      	blx	r5
    UnityPrint(UnityStrResultsTests);
   81034:	483c      	ldr	r0, [pc, #240]	; (81128 <UnityEnd+0x1b4>)
   81036:	4c39      	ldr	r4, [pc, #228]	; (8111c <UnityEnd+0x1a8>)
   81038:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestFailures));
   8103a:	6930      	ldr	r0, [r6, #16]
   8103c:	47a8      	blx	r5
    UnityPrint(UnityStrResultsFailures);
   8103e:	483b      	ldr	r0, [pc, #236]	; (8112c <UnityEnd+0x1b8>)
   81040:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestIgnores));
   81042:	6970      	ldr	r0, [r6, #20]
   81044:	47a8      	blx	r5
    UnityPrint(UnityStrResultsIgnored);
   81046:	483a      	ldr	r0, [pc, #232]	; (81130 <UnityEnd+0x1bc>)
   81048:	47a0      	blx	r4
    UNITY_PRINT_EOL;
   8104a:	4b31      	ldr	r3, [pc, #196]	; (81110 <UnityEnd+0x19c>)
   8104c:	6818      	ldr	r0, [r3, #0]
   8104e:	6882      	ldr	r2, [r0, #8]
   81050:	6893      	ldr	r3, [r2, #8]
   81052:	3b01      	subs	r3, #1
   81054:	6093      	str	r3, [r2, #8]
   81056:	2b00      	cmp	r3, #0
   81058:	da19      	bge.n	8108e <UnityEnd+0x11a>
   8105a:	6882      	ldr	r2, [r0, #8]
   8105c:	6891      	ldr	r1, [r2, #8]
   8105e:	6993      	ldr	r3, [r2, #24]
   81060:	4299      	cmp	r1, r3
   81062:	db10      	blt.n	81086 <UnityEnd+0x112>
   81064:	6813      	ldr	r3, [r2, #0]
   81066:	220a      	movs	r2, #10
   81068:	701a      	strb	r2, [r3, #0]
   8106a:	4b29      	ldr	r3, [pc, #164]	; (81110 <UnityEnd+0x19c>)
   8106c:	6818      	ldr	r0, [r3, #0]
   8106e:	6882      	ldr	r2, [r0, #8]
   81070:	6813      	ldr	r3, [r2, #0]
   81072:	7819      	ldrb	r1, [r3, #0]
   81074:	290a      	cmp	r1, #10
   81076:	d002      	beq.n	8107e <UnityEnd+0x10a>
   81078:	3301      	adds	r3, #1
   8107a:	6013      	str	r3, [r2, #0]
   8107c:	e011      	b.n	810a2 <UnityEnd+0x12e>
   8107e:	210a      	movs	r1, #10
   81080:	4b24      	ldr	r3, [pc, #144]	; (81114 <UnityEnd+0x1a0>)
   81082:	4798      	blx	r3
   81084:	e00d      	b.n	810a2 <UnityEnd+0x12e>
   81086:	210a      	movs	r1, #10
   81088:	4b22      	ldr	r3, [pc, #136]	; (81114 <UnityEnd+0x1a0>)
   8108a:	4798      	blx	r3
   8108c:	e009      	b.n	810a2 <UnityEnd+0x12e>
   8108e:	6883      	ldr	r3, [r0, #8]
   81090:	681b      	ldr	r3, [r3, #0]
   81092:	220a      	movs	r2, #10
   81094:	701a      	strb	r2, [r3, #0]
   81096:	4b1e      	ldr	r3, [pc, #120]	; (81110 <UnityEnd+0x19c>)
   81098:	681b      	ldr	r3, [r3, #0]
   8109a:	689b      	ldr	r3, [r3, #8]
   8109c:	681a      	ldr	r2, [r3, #0]
   8109e:	3201      	adds	r2, #1
   810a0:	601a      	str	r2, [r3, #0]
    if (Unity.TestFailures == 0U)
   810a2:	4b1f      	ldr	r3, [pc, #124]	; (81120 <UnityEnd+0x1ac>)
   810a4:	691b      	ldr	r3, [r3, #16]
   810a6:	b913      	cbnz	r3, 810ae <UnityEnd+0x13a>
    {
        UnityPrintOk();
   810a8:	4b22      	ldr	r3, [pc, #136]	; (81134 <UnityEnd+0x1c0>)
   810aa:	4798      	blx	r3
   810ac:	e001      	b.n	810b2 <UnityEnd+0x13e>
    }
    else
    {
        UnityPrintFail();
   810ae:	4b22      	ldr	r3, [pc, #136]	; (81138 <UnityEnd+0x1c4>)
   810b0:	4798      	blx	r3
    }
    UNITY_PRINT_EOL;
   810b2:	4b17      	ldr	r3, [pc, #92]	; (81110 <UnityEnd+0x19c>)
   810b4:	6818      	ldr	r0, [r3, #0]
   810b6:	6882      	ldr	r2, [r0, #8]
   810b8:	6893      	ldr	r3, [r2, #8]
   810ba:	3b01      	subs	r3, #1
   810bc:	6093      	str	r3, [r2, #8]
   810be:	2b00      	cmp	r3, #0
   810c0:	da19      	bge.n	810f6 <UnityEnd+0x182>
   810c2:	6882      	ldr	r2, [r0, #8]
   810c4:	6891      	ldr	r1, [r2, #8]
   810c6:	6993      	ldr	r3, [r2, #24]
   810c8:	4299      	cmp	r1, r3
   810ca:	db10      	blt.n	810ee <UnityEnd+0x17a>
   810cc:	6813      	ldr	r3, [r2, #0]
   810ce:	220a      	movs	r2, #10
   810d0:	701a      	strb	r2, [r3, #0]
   810d2:	4b0f      	ldr	r3, [pc, #60]	; (81110 <UnityEnd+0x19c>)
   810d4:	6818      	ldr	r0, [r3, #0]
   810d6:	6882      	ldr	r2, [r0, #8]
   810d8:	6813      	ldr	r3, [r2, #0]
   810da:	7819      	ldrb	r1, [r3, #0]
   810dc:	290a      	cmp	r1, #10
   810de:	d002      	beq.n	810e6 <UnityEnd+0x172>
   810e0:	3301      	adds	r3, #1
   810e2:	6013      	str	r3, [r2, #0]
   810e4:	e011      	b.n	8110a <UnityEnd+0x196>
   810e6:	210a      	movs	r1, #10
   810e8:	4b0a      	ldr	r3, [pc, #40]	; (81114 <UnityEnd+0x1a0>)
   810ea:	4798      	blx	r3
   810ec:	e00d      	b.n	8110a <UnityEnd+0x196>
   810ee:	210a      	movs	r1, #10
   810f0:	4b08      	ldr	r3, [pc, #32]	; (81114 <UnityEnd+0x1a0>)
   810f2:	4798      	blx	r3
   810f4:	e009      	b.n	8110a <UnityEnd+0x196>
   810f6:	6883      	ldr	r3, [r0, #8]
   810f8:	681b      	ldr	r3, [r3, #0]
   810fa:	220a      	movs	r2, #10
   810fc:	701a      	strb	r2, [r3, #0]
   810fe:	4b04      	ldr	r3, [pc, #16]	; (81110 <UnityEnd+0x19c>)
   81100:	681b      	ldr	r3, [r3, #0]
   81102:	689b      	ldr	r3, [r3, #8]
   81104:	681a      	ldr	r2, [r3, #0]
   81106:	3201      	adds	r2, #1
   81108:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
}
   8110a:	4b05      	ldr	r3, [pc, #20]	; (81120 <UnityEnd+0x1ac>)
   8110c:	6918      	ldr	r0, [r3, #16]
   8110e:	bd70      	pop	{r4, r5, r6, pc}
   81110:	20070430 	.word	0x20070430
   81114:	00081f21 	.word	0x00081f21
   81118:	00082f30 	.word	0x00082f30
   8111c:	00080891 	.word	0x00080891
   81120:	200709c4 	.word	0x200709c4
   81124:	00080569 	.word	0x00080569
   81128:	00082f60 	.word	0x00082f60
   8112c:	00082f48 	.word	0x00082f48
   81130:	00082f54 	.word	0x00082f54
   81134:	00080dc9 	.word	0x00080dc9
   81138:	00080db5 	.word	0x00080db5

0008113c <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   8113c:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   8113e:	685a      	ldr	r2, [r3, #4]
   81140:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   81142:	6842      	ldr	r2, [r0, #4]
   81144:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   81146:	685a      	ldr	r2, [r3, #4]
   81148:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8114a:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   8114c:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8114e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81150:	6803      	ldr	r3, [r0, #0]
   81152:	3301      	adds	r3, #1
   81154:	6003      	str	r3, [r0, #0]
   81156:	4770      	bx	lr

00081158 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   81158:	6843      	ldr	r3, [r0, #4]
   8115a:	6882      	ldr	r2, [r0, #8]
   8115c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   8115e:	6883      	ldr	r3, [r0, #8]
   81160:	6842      	ldr	r2, [r0, #4]
   81162:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   81164:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   81166:	685a      	ldr	r2, [r3, #4]
   81168:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   8116a:	bf04      	itt	eq
   8116c:	6882      	ldreq	r2, [r0, #8]
   8116e:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   81170:	2200      	movs	r2, #0
   81172:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   81174:	681a      	ldr	r2, [r3, #0]
   81176:	3a01      	subs	r2, #1
   81178:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   8117a:	6818      	ldr	r0, [r3, #0]
}
   8117c:	4770      	bx	lr
   8117e:	bf00      	nop

00081180 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   81180:	4b06      	ldr	r3, [pc, #24]	; (8119c <pxCurrentTCBConst2>)
   81182:	6819      	ldr	r1, [r3, #0]
   81184:	6808      	ldr	r0, [r1, #0]
   81186:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8118a:	f380 8809 	msr	PSP, r0
   8118e:	f04f 0000 	mov.w	r0, #0
   81192:	f380 8811 	msr	BASEPRI, r0
   81196:	f04e 0e0d 	orr.w	lr, lr, #13
   8119a:	4770      	bx	lr

0008119c <pxCurrentTCBConst2>:
   8119c:	200708fc 	.word	0x200708fc

000811a0 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   811a0:	f3ef 8011 	mrs	r0, BASEPRI
   811a4:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   811a8:	f381 8811 	msr	BASEPRI, r1
   811ac:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   811ae:	2000      	movs	r0, #0

000811b0 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   811b0:	f380 8811 	msr	BASEPRI, r0
   811b4:	4770      	bx	lr
   811b6:	bf00      	nop

000811b8 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   811b8:	f3ef 8009 	mrs	r0, PSP
   811bc:	4b0c      	ldr	r3, [pc, #48]	; (811f0 <pxCurrentTCBConst>)
   811be:	681a      	ldr	r2, [r3, #0]
   811c0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   811c4:	6010      	str	r0, [r2, #0]
   811c6:	e92d 4008 	stmdb	sp!, {r3, lr}
   811ca:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   811ce:	f380 8811 	msr	BASEPRI, r0
   811d2:	f000 f8b5 	bl	81340 <vTaskSwitchContext>
   811d6:	f04f 0000 	mov.w	r0, #0
   811da:	f380 8811 	msr	BASEPRI, r0
   811de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   811e2:	6819      	ldr	r1, [r3, #0]
   811e4:	6808      	ldr	r0, [r1, #0]
   811e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   811ea:	f380 8809 	msr	PSP, r0
   811ee:	4770      	bx	lr

000811f0 <pxCurrentTCBConst>:
   811f0:	200708fc 	.word	0x200708fc

000811f4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   811f4:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   811f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   811fa:	4b05      	ldr	r3, [pc, #20]	; (81210 <SysTick_Handler+0x1c>)
   811fc:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   811fe:	4b05      	ldr	r3, [pc, #20]	; (81214 <SysTick_Handler+0x20>)
   81200:	4798      	blx	r3
	{
		vTaskIncrementTick();
   81202:	4b05      	ldr	r3, [pc, #20]	; (81218 <SysTick_Handler+0x24>)
   81204:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   81206:	2000      	movs	r0, #0
   81208:	4b04      	ldr	r3, [pc, #16]	; (8121c <SysTick_Handler+0x28>)
   8120a:	4798      	blx	r3
   8120c:	bd08      	pop	{r3, pc}
   8120e:	bf00      	nop
   81210:	e000ed04 	.word	0xe000ed04
   81214:	000811a1 	.word	0x000811a1
   81218:	00081221 	.word	0x00081221
   8121c:	000811b1 	.word	0x000811b1

00081220 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81224:	4b3a      	ldr	r3, [pc, #232]	; (81310 <vTaskIncrementTick+0xf0>)
   81226:	681b      	ldr	r3, [r3, #0]
   81228:	2b00      	cmp	r3, #0
   8122a:	d16b      	bne.n	81304 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   8122c:	4b39      	ldr	r3, [pc, #228]	; (81314 <vTaskIncrementTick+0xf4>)
   8122e:	681a      	ldr	r2, [r3, #0]
   81230:	3201      	adds	r2, #1
   81232:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   81234:	681b      	ldr	r3, [r3, #0]
   81236:	bb03      	cbnz	r3, 8127a <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81238:	4b37      	ldr	r3, [pc, #220]	; (81318 <vTaskIncrementTick+0xf8>)
   8123a:	681b      	ldr	r3, [r3, #0]
   8123c:	681b      	ldr	r3, [r3, #0]
   8123e:	b11b      	cbz	r3, 81248 <vTaskIncrementTick+0x28>
   81240:	4b36      	ldr	r3, [pc, #216]	; (8131c <vTaskIncrementTick+0xfc>)
   81242:	4798      	blx	r3
   81244:	bf00      	nop
   81246:	e7fd      	b.n	81244 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   81248:	4b33      	ldr	r3, [pc, #204]	; (81318 <vTaskIncrementTick+0xf8>)
   8124a:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   8124c:	4a34      	ldr	r2, [pc, #208]	; (81320 <vTaskIncrementTick+0x100>)
   8124e:	6810      	ldr	r0, [r2, #0]
   81250:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   81252:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81254:	4a33      	ldr	r2, [pc, #204]	; (81324 <vTaskIncrementTick+0x104>)
   81256:	6811      	ldr	r1, [r2, #0]
   81258:	3101      	adds	r1, #1
   8125a:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8125c:	681b      	ldr	r3, [r3, #0]
   8125e:	681b      	ldr	r3, [r3, #0]
   81260:	b923      	cbnz	r3, 8126c <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   81262:	f04f 32ff 	mov.w	r2, #4294967295
   81266:	4b30      	ldr	r3, [pc, #192]	; (81328 <vTaskIncrementTick+0x108>)
   81268:	601a      	str	r2, [r3, #0]
   8126a:	e006      	b.n	8127a <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   8126c:	4b2a      	ldr	r3, [pc, #168]	; (81318 <vTaskIncrementTick+0xf8>)
   8126e:	681b      	ldr	r3, [r3, #0]
   81270:	68db      	ldr	r3, [r3, #12]
   81272:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81274:	685a      	ldr	r2, [r3, #4]
   81276:	4b2c      	ldr	r3, [pc, #176]	; (81328 <vTaskIncrementTick+0x108>)
   81278:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   8127a:	4b26      	ldr	r3, [pc, #152]	; (81314 <vTaskIncrementTick+0xf4>)
   8127c:	681a      	ldr	r2, [r3, #0]
   8127e:	4b2a      	ldr	r3, [pc, #168]	; (81328 <vTaskIncrementTick+0x108>)
   81280:	681b      	ldr	r3, [r3, #0]
   81282:	429a      	cmp	r2, r3
   81284:	d342      	bcc.n	8130c <vTaskIncrementTick+0xec>
   81286:	4b24      	ldr	r3, [pc, #144]	; (81318 <vTaskIncrementTick+0xf8>)
   81288:	681b      	ldr	r3, [r3, #0]
   8128a:	681b      	ldr	r3, [r3, #0]
   8128c:	b14b      	cbz	r3, 812a2 <vTaskIncrementTick+0x82>
   8128e:	4b22      	ldr	r3, [pc, #136]	; (81318 <vTaskIncrementTick+0xf8>)
   81290:	681b      	ldr	r3, [r3, #0]
   81292:	68db      	ldr	r3, [r3, #12]
   81294:	68dc      	ldr	r4, [r3, #12]
   81296:	6863      	ldr	r3, [r4, #4]
   81298:	4a1e      	ldr	r2, [pc, #120]	; (81314 <vTaskIncrementTick+0xf4>)
   8129a:	6812      	ldr	r2, [r2, #0]
   8129c:	4293      	cmp	r3, r2
   8129e:	d913      	bls.n	812c8 <vTaskIncrementTick+0xa8>
   812a0:	e00e      	b.n	812c0 <vTaskIncrementTick+0xa0>
   812a2:	f04f 32ff 	mov.w	r2, #4294967295
   812a6:	4b20      	ldr	r3, [pc, #128]	; (81328 <vTaskIncrementTick+0x108>)
   812a8:	601a      	str	r2, [r3, #0]
   812aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   812ae:	4b1a      	ldr	r3, [pc, #104]	; (81318 <vTaskIncrementTick+0xf8>)
   812b0:	681b      	ldr	r3, [r3, #0]
   812b2:	68db      	ldr	r3, [r3, #12]
   812b4:	68dc      	ldr	r4, [r3, #12]
   812b6:	6863      	ldr	r3, [r4, #4]
   812b8:	4a16      	ldr	r2, [pc, #88]	; (81314 <vTaskIncrementTick+0xf4>)
   812ba:	6812      	ldr	r2, [r2, #0]
   812bc:	4293      	cmp	r3, r2
   812be:	d907      	bls.n	812d0 <vTaskIncrementTick+0xb0>
   812c0:	4a19      	ldr	r2, [pc, #100]	; (81328 <vTaskIncrementTick+0x108>)
   812c2:	6013      	str	r3, [r2, #0]
   812c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   812c8:	4e18      	ldr	r6, [pc, #96]	; (8132c <vTaskIncrementTick+0x10c>)
   812ca:	4f19      	ldr	r7, [pc, #100]	; (81330 <vTaskIncrementTick+0x110>)
   812cc:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8133c <vTaskIncrementTick+0x11c>
   812d0:	1d25      	adds	r5, r4, #4
   812d2:	4628      	mov	r0, r5
   812d4:	47b0      	blx	r6
   812d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   812d8:	b113      	cbz	r3, 812e0 <vTaskIncrementTick+0xc0>
   812da:	f104 0018 	add.w	r0, r4, #24
   812de:	47b0      	blx	r6
   812e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   812e2:	683a      	ldr	r2, [r7, #0]
   812e4:	4293      	cmp	r3, r2
   812e6:	bf88      	it	hi
   812e8:	603b      	strhi	r3, [r7, #0]
   812ea:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   812ee:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   812f2:	4629      	mov	r1, r5
   812f4:	4b0f      	ldr	r3, [pc, #60]	; (81334 <vTaskIncrementTick+0x114>)
   812f6:	4798      	blx	r3
   812f8:	4b07      	ldr	r3, [pc, #28]	; (81318 <vTaskIncrementTick+0xf8>)
   812fa:	681b      	ldr	r3, [r3, #0]
   812fc:	681b      	ldr	r3, [r3, #0]
   812fe:	2b00      	cmp	r3, #0
   81300:	d1d5      	bne.n	812ae <vTaskIncrementTick+0x8e>
   81302:	e7ce      	b.n	812a2 <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
   81304:	4b0c      	ldr	r3, [pc, #48]	; (81338 <vTaskIncrementTick+0x118>)
   81306:	681a      	ldr	r2, [r3, #0]
   81308:	3201      	adds	r2, #1
   8130a:	601a      	str	r2, [r3, #0]
   8130c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81310:	200708f8 	.word	0x200708f8
   81314:	20070904 	.word	0x20070904
   81318:	2007088c 	.word	0x2007088c
   8131c:	000811a1 	.word	0x000811a1
   81320:	20070908 	.word	0x20070908
   81324:	20070900 	.word	0x20070900
   81328:	20070000 	.word	0x20070000
   8132c:	00081159 	.word	0x00081159
   81330:	20070890 	.word	0x20070890
   81334:	0008113d 	.word	0x0008113d
   81338:	20070888 	.word	0x20070888
   8133c:	20070894 	.word	0x20070894

00081340 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81340:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81342:	4b1d      	ldr	r3, [pc, #116]	; (813b8 <vTaskSwitchContext+0x78>)
   81344:	681b      	ldr	r3, [r3, #0]
   81346:	b95b      	cbnz	r3, 81360 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81348:	4b1c      	ldr	r3, [pc, #112]	; (813bc <vTaskSwitchContext+0x7c>)
   8134a:	681b      	ldr	r3, [r3, #0]
   8134c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81350:	009b      	lsls	r3, r3, #2
   81352:	4a1b      	ldr	r2, [pc, #108]	; (813c0 <vTaskSwitchContext+0x80>)
   81354:	58d3      	ldr	r3, [r2, r3]
   81356:	b9cb      	cbnz	r3, 8138c <vTaskSwitchContext+0x4c>
   81358:	4b18      	ldr	r3, [pc, #96]	; (813bc <vTaskSwitchContext+0x7c>)
   8135a:	681b      	ldr	r3, [r3, #0]
   8135c:	b953      	cbnz	r3, 81374 <vTaskSwitchContext+0x34>
   8135e:	e005      	b.n	8136c <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   81360:	2201      	movs	r2, #1
   81362:	4b18      	ldr	r3, [pc, #96]	; (813c4 <vTaskSwitchContext+0x84>)
   81364:	601a      	str	r2, [r3, #0]
   81366:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81368:	681a      	ldr	r2, [r3, #0]
   8136a:	b92a      	cbnz	r2, 81378 <vTaskSwitchContext+0x38>
   8136c:	4b16      	ldr	r3, [pc, #88]	; (813c8 <vTaskSwitchContext+0x88>)
   8136e:	4798      	blx	r3
   81370:	bf00      	nop
   81372:	e7fd      	b.n	81370 <vTaskSwitchContext+0x30>
   81374:	4b11      	ldr	r3, [pc, #68]	; (813bc <vTaskSwitchContext+0x7c>)
   81376:	4912      	ldr	r1, [pc, #72]	; (813c0 <vTaskSwitchContext+0x80>)
   81378:	681a      	ldr	r2, [r3, #0]
   8137a:	3a01      	subs	r2, #1
   8137c:	601a      	str	r2, [r3, #0]
   8137e:	681a      	ldr	r2, [r3, #0]
   81380:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81384:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   81388:	2a00      	cmp	r2, #0
   8138a:	d0ed      	beq.n	81368 <vTaskSwitchContext+0x28>
   8138c:	4b0b      	ldr	r3, [pc, #44]	; (813bc <vTaskSwitchContext+0x7c>)
   8138e:	681b      	ldr	r3, [r3, #0]
   81390:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81394:	4a0a      	ldr	r2, [pc, #40]	; (813c0 <vTaskSwitchContext+0x80>)
   81396:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8139a:	685a      	ldr	r2, [r3, #4]
   8139c:	6852      	ldr	r2, [r2, #4]
   8139e:	605a      	str	r2, [r3, #4]
   813a0:	f103 0108 	add.w	r1, r3, #8
   813a4:	428a      	cmp	r2, r1
   813a6:	bf04      	itt	eq
   813a8:	6852      	ldreq	r2, [r2, #4]
   813aa:	605a      	streq	r2, [r3, #4]
   813ac:	685b      	ldr	r3, [r3, #4]
   813ae:	68da      	ldr	r2, [r3, #12]
   813b0:	4b06      	ldr	r3, [pc, #24]	; (813cc <vTaskSwitchContext+0x8c>)
   813b2:	601a      	str	r2, [r3, #0]
   813b4:	bd08      	pop	{r3, pc}
   813b6:	bf00      	nop
   813b8:	200708f8 	.word	0x200708f8
   813bc:	20070890 	.word	0x20070890
   813c0:	20070894 	.word	0x20070894
   813c4:	2007090c 	.word	0x2007090c
   813c8:	000811a1 	.word	0x000811a1
   813cc:	200708fc 	.word	0x200708fc

000813d0 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   813d0:	b4f0      	push	{r4, r5, r6, r7}
   813d2:	b08c      	sub	sp, #48	; 0x30
   813d4:	4607      	mov	r7, r0
   813d6:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   813d8:	ac01      	add	r4, sp, #4
   813da:	4d12      	ldr	r5, [pc, #72]	; (81424 <pwm_clocks_generate+0x54>)
   813dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   813de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   813e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   813e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   813e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   813e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   813ec:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   813ee:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   813f0:	f852 4f04 	ldr.w	r4, [r2, #4]!
   813f4:	fbb6 f4f4 	udiv	r4, r6, r4
   813f8:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   813fc:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   81400:	d903      	bls.n	8140a <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   81402:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   81404:	2b0b      	cmp	r3, #11
   81406:	d1f3      	bne.n	813f0 <pwm_clocks_generate+0x20>
   81408:	e004      	b.n	81414 <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   8140a:	2b0a      	cmp	r3, #10
   8140c:	d805      	bhi.n	8141a <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   8140e:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   81412:	e004      	b.n	8141e <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   81414:	f64f 70ff 	movw	r0, #65535	; 0xffff
   81418:	e001      	b.n	8141e <pwm_clocks_generate+0x4e>
   8141a:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   8141e:	b00c      	add	sp, #48	; 0x30
   81420:	bcf0      	pop	{r4, r5, r6, r7}
   81422:	4770      	bx	lr
   81424:	00082f70 	.word	0x00082f70

00081428 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   81428:	b570      	push	{r4, r5, r6, lr}
   8142a:	4606      	mov	r6, r0
   8142c:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   8142e:	6808      	ldr	r0, [r1, #0]
   81430:	b140      	cbz	r0, 81444 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   81432:	6889      	ldr	r1, [r1, #8]
   81434:	4b0b      	ldr	r3, [pc, #44]	; (81464 <pwm_init+0x3c>)
   81436:	4798      	blx	r3
   81438:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   8143a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8143e:	4298      	cmp	r0, r3
   81440:	d101      	bne.n	81446 <pwm_init+0x1e>
   81442:	e00e      	b.n	81462 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   81444:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   81446:	6860      	ldr	r0, [r4, #4]
   81448:	b140      	cbz	r0, 8145c <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   8144a:	68a1      	ldr	r1, [r4, #8]
   8144c:	4b05      	ldr	r3, [pc, #20]	; (81464 <pwm_init+0x3c>)
   8144e:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   81450:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81454:	4298      	cmp	r0, r3
   81456:	d004      	beq.n	81462 <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   81458:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   8145c:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   8145e:	2000      	movs	r0, #0
   81460:	bd70      	pop	{r4, r5, r6, pc}
}
   81462:	bd70      	pop	{r4, r5, r6, pc}
   81464:	000813d1 	.word	0x000813d1

00081468 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   81468:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   8146a:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   8146c:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8146e:	684a      	ldr	r2, [r1, #4]
   81470:	f002 020f 	and.w	r2, r2, #15
   81474:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   81476:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81478:	432c      	orrs	r4, r5
   8147a:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   8147c:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   81480:	7d8a      	ldrb	r2, [r1, #22]
   81482:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   81486:	7dca      	ldrb	r2, [r1, #23]
   81488:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   8148c:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8148e:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   81492:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   81496:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   8149a:	68cc      	ldr	r4, [r1, #12]
   8149c:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   814a0:	690c      	ldr	r4, [r1, #16]
   814a2:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   814a6:	7d8a      	ldrb	r2, [r1, #22]
   814a8:	b13a      	cbz	r2, 814ba <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   814aa:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   814ac:	8b4a      	ldrh	r2, [r1, #26]
   814ae:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   814b2:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   814b6:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   814ba:	6c85      	ldr	r5, [r0, #72]	; 0x48
   814bc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   814c0:	409a      	lsls	r2, r3
   814c2:	43d2      	mvns	r2, r2
   814c4:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   814c6:	7fce      	ldrb	r6, [r1, #31]
   814c8:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   814ca:	7f8c      	ldrb	r4, [r1, #30]
   814cc:	409c      	lsls	r4, r3
   814ce:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   814d2:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   814d4:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   814d6:	6c44      	ldr	r4, [r0, #68]	; 0x44
   814d8:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   814da:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   814de:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   814e0:	f891 4020 	ldrb.w	r4, [r1, #32]
   814e4:	409c      	lsls	r4, r3
   814e6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   814ea:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   814ec:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   814ee:	2201      	movs	r2, #1
   814f0:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   814f2:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   814f6:	b11c      	cbz	r4, 81500 <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   814f8:	6a04      	ldr	r4, [r0, #32]
   814fa:	4314      	orrs	r4, r2
   814fc:	6204      	str	r4, [r0, #32]
   814fe:	e003      	b.n	81508 <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   81500:	6a04      	ldr	r4, [r0, #32]
   81502:	ea24 0402 	bic.w	r4, r4, r2
   81506:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   81508:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   8150c:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   8150e:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81510:	bf0c      	ite	eq
   81512:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   81514:	4394      	bicne	r4, r2
   81516:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   81518:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   8151c:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   8151e:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81520:	bf0c      	ite	eq
   81522:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   81526:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   8152a:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   8152c:	2b03      	cmp	r3, #3
   8152e:	d80c      	bhi.n	8154a <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   81530:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   81532:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   81534:	22ff      	movs	r2, #255	; 0xff
   81536:	409a      	lsls	r2, r3
   81538:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   8153c:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   81540:	fa01 f303 	lsl.w	r3, r1, r3
   81544:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   81546:	66c3      	str	r3, [r0, #108]	; 0x6c
   81548:	e00c      	b.n	81564 <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   8154a:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   8154c:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   8154e:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   81550:	22ff      	movs	r2, #255	; 0xff
   81552:	409a      	lsls	r2, r3
   81554:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   81558:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   8155c:	fa01 f303 	lsl.w	r3, r1, r3
   81560:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   81562:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   81564:	2000      	movs	r0, #0
   81566:	bc70      	pop	{r4, r5, r6}
   81568:	4770      	bx	lr
   8156a:	bf00      	nop

0008156c <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   8156c:	2301      	movs	r3, #1
   8156e:	fa03 f101 	lsl.w	r1, r3, r1
   81572:	6041      	str	r1, [r0, #4]
   81574:	4770      	bx	lr
   81576:	bf00      	nop

00081578 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   81578:	2301      	movs	r3, #1
   8157a:	fa03 f101 	lsl.w	r1, r3, r1
   8157e:	6081      	str	r1, [r0, #8]
   81580:	4770      	bx	lr
   81582:	bf00      	nop

00081584 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81584:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81586:	480e      	ldr	r0, [pc, #56]	; (815c0 <sysclk_init+0x3c>)
   81588:	4b0e      	ldr	r3, [pc, #56]	; (815c4 <sysclk_init+0x40>)
   8158a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8158c:	2000      	movs	r0, #0
   8158e:	213e      	movs	r1, #62	; 0x3e
   81590:	4b0d      	ldr	r3, [pc, #52]	; (815c8 <sysclk_init+0x44>)
   81592:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81594:	4c0d      	ldr	r4, [pc, #52]	; (815cc <sysclk_init+0x48>)
   81596:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81598:	2800      	cmp	r0, #0
   8159a:	d0fc      	beq.n	81596 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8159c:	4b0c      	ldr	r3, [pc, #48]	; (815d0 <sysclk_init+0x4c>)
   8159e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   815a0:	4a0c      	ldr	r2, [pc, #48]	; (815d4 <sysclk_init+0x50>)
   815a2:	4b0d      	ldr	r3, [pc, #52]	; (815d8 <sysclk_init+0x54>)
   815a4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   815a6:	4c0d      	ldr	r4, [pc, #52]	; (815dc <sysclk_init+0x58>)
   815a8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   815aa:	2800      	cmp	r0, #0
   815ac:	d0fc      	beq.n	815a8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   815ae:	2010      	movs	r0, #16
   815b0:	4b0b      	ldr	r3, [pc, #44]	; (815e0 <sysclk_init+0x5c>)
   815b2:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   815b4:	4b0b      	ldr	r3, [pc, #44]	; (815e4 <sysclk_init+0x60>)
   815b6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   815b8:	4801      	ldr	r0, [pc, #4]	; (815c0 <sysclk_init+0x3c>)
   815ba:	4b02      	ldr	r3, [pc, #8]	; (815c4 <sysclk_init+0x40>)
   815bc:	4798      	blx	r3
   815be:	bd10      	pop	{r4, pc}
   815c0:	0501bd00 	.word	0x0501bd00
   815c4:	00081c39 	.word	0x00081c39
   815c8:	0008198d 	.word	0x0008198d
   815cc:	000819e1 	.word	0x000819e1
   815d0:	000819f1 	.word	0x000819f1
   815d4:	200d3f01 	.word	0x200d3f01
   815d8:	400e0600 	.word	0x400e0600
   815dc:	00081a01 	.word	0x00081a01
   815e0:	00081929 	.word	0x00081929
   815e4:	00081b1d 	.word	0x00081b1d

000815e8 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   815e8:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   815ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   815ee:	4b17      	ldr	r3, [pc, #92]	; (8164c <board_init+0x64>)
   815f0:	605a      	str	r2, [r3, #4]
   815f2:	200b      	movs	r0, #11
   815f4:	4c16      	ldr	r4, [pc, #88]	; (81650 <board_init+0x68>)
   815f6:	47a0      	blx	r4
   815f8:	200c      	movs	r0, #12
   815fa:	47a0      	blx	r4
   815fc:	200d      	movs	r0, #13
   815fe:	47a0      	blx	r4
   81600:	200e      	movs	r0, #14
   81602:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81604:	203b      	movs	r0, #59	; 0x3b
   81606:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8160a:	4c12      	ldr	r4, [pc, #72]	; (81654 <board_init+0x6c>)
   8160c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8160e:	2055      	movs	r0, #85	; 0x55
   81610:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81614:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81616:	2056      	movs	r0, #86	; 0x56
   81618:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8161c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8161e:	2068      	movs	r0, #104	; 0x68
   81620:	490d      	ldr	r1, [pc, #52]	; (81658 <board_init+0x70>)
   81622:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81624:	205c      	movs	r0, #92	; 0x5c
   81626:	490d      	ldr	r1, [pc, #52]	; (8165c <board_init+0x74>)
   81628:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8162a:	480d      	ldr	r0, [pc, #52]	; (81660 <board_init+0x78>)
   8162c:	f44f 7140 	mov.w	r1, #768	; 0x300
   81630:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81634:	4b0b      	ldr	r3, [pc, #44]	; (81664 <board_init+0x7c>)
   81636:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81638:	202b      	movs	r0, #43	; 0x2b
   8163a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8163e:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81640:	202a      	movs	r0, #42	; 0x2a
   81642:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81646:	47a0      	blx	r4
   81648:	bd10      	pop	{r4, pc}
   8164a:	bf00      	nop
   8164c:	400e1a50 	.word	0x400e1a50
   81650:	00081a11 	.word	0x00081a11
   81654:	0008170d 	.word	0x0008170d
   81658:	28000079 	.word	0x28000079
   8165c:	28000001 	.word	0x28000001
   81660:	400e0e00 	.word	0x400e0e00
   81664:	000817e1 	.word	0x000817e1

00081668 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81668:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8166a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8166e:	d016      	beq.n	8169e <pio_set_peripheral+0x36>
   81670:	d804      	bhi.n	8167c <pio_set_peripheral+0x14>
   81672:	b1c1      	cbz	r1, 816a6 <pio_set_peripheral+0x3e>
   81674:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81678:	d00a      	beq.n	81690 <pio_set_peripheral+0x28>
   8167a:	e013      	b.n	816a4 <pio_set_peripheral+0x3c>
   8167c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81680:	d011      	beq.n	816a6 <pio_set_peripheral+0x3e>
   81682:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81686:	d00e      	beq.n	816a6 <pio_set_peripheral+0x3e>
   81688:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8168c:	d10a      	bne.n	816a4 <pio_set_peripheral+0x3c>
   8168e:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81690:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81692:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81694:	400b      	ands	r3, r1
   81696:	ea23 0302 	bic.w	r3, r3, r2
   8169a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8169c:	e002      	b.n	816a4 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8169e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   816a0:	4313      	orrs	r3, r2
   816a2:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   816a4:	6042      	str	r2, [r0, #4]
   816a6:	4770      	bx	lr

000816a8 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   816a8:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   816aa:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   816ae:	bf14      	ite	ne
   816b0:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   816b2:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   816b4:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   816b8:	bf14      	ite	ne
   816ba:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   816bc:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   816be:	f012 0f02 	tst.w	r2, #2
   816c2:	d002      	beq.n	816ca <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   816c4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   816c8:	e004      	b.n	816d4 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   816ca:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   816ce:	bf18      	it	ne
   816d0:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   816d4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   816d6:	6001      	str	r1, [r0, #0]
   816d8:	4770      	bx	lr
   816da:	bf00      	nop

000816dc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   816dc:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   816de:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   816e0:	9c01      	ldr	r4, [sp, #4]
   816e2:	b10c      	cbz	r4, 816e8 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   816e4:	6641      	str	r1, [r0, #100]	; 0x64
   816e6:	e000      	b.n	816ea <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   816e8:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   816ea:	b10b      	cbz	r3, 816f0 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   816ec:	6501      	str	r1, [r0, #80]	; 0x50
   816ee:	e000      	b.n	816f2 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   816f0:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   816f2:	b10a      	cbz	r2, 816f8 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   816f4:	6301      	str	r1, [r0, #48]	; 0x30
   816f6:	e000      	b.n	816fa <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   816f8:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   816fa:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   816fc:	6001      	str	r1, [r0, #0]
}
   816fe:	f85d 4b04 	ldr.w	r4, [sp], #4
   81702:	4770      	bx	lr

00081704 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81704:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81706:	4770      	bx	lr

00081708 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81708:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8170a:	4770      	bx	lr

0008170c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8170c:	b570      	push	{r4, r5, r6, lr}
   8170e:	b082      	sub	sp, #8
   81710:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81712:	0944      	lsrs	r4, r0, #5
   81714:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   81718:	f204 7407 	addw	r4, r4, #1799	; 0x707
   8171c:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8171e:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   81722:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81726:	d030      	beq.n	8178a <pio_configure_pin+0x7e>
   81728:	d806      	bhi.n	81738 <pio_configure_pin+0x2c>
   8172a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8172e:	d00a      	beq.n	81746 <pio_configure_pin+0x3a>
   81730:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81734:	d018      	beq.n	81768 <pio_configure_pin+0x5c>
   81736:	e049      	b.n	817cc <pio_configure_pin+0xc0>
   81738:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   8173c:	d030      	beq.n	817a0 <pio_configure_pin+0x94>
   8173e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   81742:	d02d      	beq.n	817a0 <pio_configure_pin+0x94>
   81744:	e042      	b.n	817cc <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81746:	f000 001f 	and.w	r0, r0, #31
   8174a:	2401      	movs	r4, #1
   8174c:	4084      	lsls	r4, r0
   8174e:	4630      	mov	r0, r6
   81750:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81754:	4622      	mov	r2, r4
   81756:	4b1f      	ldr	r3, [pc, #124]	; (817d4 <pio_configure_pin+0xc8>)
   81758:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8175a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8175e:	bf14      	ite	ne
   81760:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81762:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81764:	2001      	movs	r0, #1
   81766:	e032      	b.n	817ce <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81768:	f000 001f 	and.w	r0, r0, #31
   8176c:	2401      	movs	r4, #1
   8176e:	4084      	lsls	r4, r0
   81770:	4630      	mov	r0, r6
   81772:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81776:	4622      	mov	r2, r4
   81778:	4b16      	ldr	r3, [pc, #88]	; (817d4 <pio_configure_pin+0xc8>)
   8177a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8177c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81780:	bf14      	ite	ne
   81782:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81784:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81786:	2001      	movs	r0, #1
   81788:	e021      	b.n	817ce <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8178a:	f000 011f 	and.w	r1, r0, #31
   8178e:	2401      	movs	r4, #1
   81790:	4630      	mov	r0, r6
   81792:	fa04 f101 	lsl.w	r1, r4, r1
   81796:	462a      	mov	r2, r5
   81798:	4b0f      	ldr	r3, [pc, #60]	; (817d8 <pio_configure_pin+0xcc>)
   8179a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8179c:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8179e:	e016      	b.n	817ce <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   817a0:	f000 011f 	and.w	r1, r0, #31
   817a4:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   817a6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   817aa:	ea05 0304 	and.w	r3, r5, r4
   817ae:	9300      	str	r3, [sp, #0]
   817b0:	4630      	mov	r0, r6
   817b2:	fa04 f101 	lsl.w	r1, r4, r1
   817b6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   817ba:	bf14      	ite	ne
   817bc:	2200      	movne	r2, #0
   817be:	2201      	moveq	r2, #1
   817c0:	f3c5 0380 	ubfx	r3, r5, #2, #1
   817c4:	4d05      	ldr	r5, [pc, #20]	; (817dc <pio_configure_pin+0xd0>)
   817c6:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   817c8:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   817ca:	e000      	b.n	817ce <pio_configure_pin+0xc2>

	default:
		return 0;
   817cc:	2000      	movs	r0, #0
	}

	return 1;
}
   817ce:	b002      	add	sp, #8
   817d0:	bd70      	pop	{r4, r5, r6, pc}
   817d2:	bf00      	nop
   817d4:	00081669 	.word	0x00081669
   817d8:	000816a9 	.word	0x000816a9
   817dc:	000816dd 	.word	0x000816dd

000817e0 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   817e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   817e2:	b083      	sub	sp, #12
   817e4:	4607      	mov	r7, r0
   817e6:	460e      	mov	r6, r1
   817e8:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   817ea:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   817ee:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   817f2:	d026      	beq.n	81842 <pio_configure_pin_group+0x62>
   817f4:	d806      	bhi.n	81804 <pio_configure_pin_group+0x24>
   817f6:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   817fa:	d00a      	beq.n	81812 <pio_configure_pin_group+0x32>
   817fc:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81800:	d013      	beq.n	8182a <pio_configure_pin_group+0x4a>
   81802:	e034      	b.n	8186e <pio_configure_pin_group+0x8e>
   81804:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81808:	d01f      	beq.n	8184a <pio_configure_pin_group+0x6a>
   8180a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8180e:	d01c      	beq.n	8184a <pio_configure_pin_group+0x6a>
   81810:	e02d      	b.n	8186e <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81812:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81816:	4632      	mov	r2, r6
   81818:	4b16      	ldr	r3, [pc, #88]	; (81874 <pio_configure_pin_group+0x94>)
   8181a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8181c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81820:	bf14      	ite	ne
   81822:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81824:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81826:	2001      	movs	r0, #1
   81828:	e022      	b.n	81870 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8182a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8182e:	4632      	mov	r2, r6
   81830:	4b10      	ldr	r3, [pc, #64]	; (81874 <pio_configure_pin_group+0x94>)
   81832:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81834:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81838:	bf14      	ite	ne
   8183a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8183c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8183e:	2001      	movs	r0, #1
   81840:	e016      	b.n	81870 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   81842:	4b0d      	ldr	r3, [pc, #52]	; (81878 <pio_configure_pin_group+0x98>)
   81844:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81846:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   81848:	e012      	b.n	81870 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8184a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8184e:	f005 0301 	and.w	r3, r5, #1
   81852:	9300      	str	r3, [sp, #0]
   81854:	4638      	mov	r0, r7
   81856:	4631      	mov	r1, r6
   81858:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8185c:	bf14      	ite	ne
   8185e:	2200      	movne	r2, #0
   81860:	2201      	moveq	r2, #1
   81862:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81866:	4c05      	ldr	r4, [pc, #20]	; (8187c <pio_configure_pin_group+0x9c>)
   81868:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8186a:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8186c:	e000      	b.n	81870 <pio_configure_pin_group+0x90>

	default:
		return 0;
   8186e:	2000      	movs	r0, #0
	}

	return 1;
}
   81870:	b003      	add	sp, #12
   81872:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81874:	00081669 	.word	0x00081669
   81878:	000816a9 	.word	0x000816a9
   8187c:	000816dd 	.word	0x000816dd

00081880 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81884:	4604      	mov	r4, r0
   81886:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81888:	4b10      	ldr	r3, [pc, #64]	; (818cc <pio_handler_process+0x4c>)
   8188a:	4798      	blx	r3
   8188c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8188e:	4620      	mov	r0, r4
   81890:	4b0f      	ldr	r3, [pc, #60]	; (818d0 <pio_handler_process+0x50>)
   81892:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81894:	4005      	ands	r5, r0
   81896:	d017      	beq.n	818c8 <pio_handler_process+0x48>
   81898:	4f0e      	ldr	r7, [pc, #56]	; (818d4 <pio_handler_process+0x54>)
   8189a:	f107 040c 	add.w	r4, r7, #12
   8189e:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   818a0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   818a4:	42b3      	cmp	r3, r6
   818a6:	d10a      	bne.n	818be <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   818a8:	f854 1c08 	ldr.w	r1, [r4, #-8]
   818ac:	4229      	tst	r1, r5
   818ae:	d006      	beq.n	818be <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   818b0:	6823      	ldr	r3, [r4, #0]
   818b2:	4630      	mov	r0, r6
   818b4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   818b6:	f854 3c08 	ldr.w	r3, [r4, #-8]
   818ba:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   818be:	42bc      	cmp	r4, r7
   818c0:	d002      	beq.n	818c8 <pio_handler_process+0x48>
   818c2:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   818c4:	2d00      	cmp	r5, #0
   818c6:	d1eb      	bne.n	818a0 <pio_handler_process+0x20>
   818c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   818cc:	00081705 	.word	0x00081705
   818d0:	00081709 	.word	0x00081709
   818d4:	20070910 	.word	0x20070910

000818d8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   818d8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   818da:	4802      	ldr	r0, [pc, #8]	; (818e4 <PIOA_Handler+0xc>)
   818dc:	210b      	movs	r1, #11
   818de:	4b02      	ldr	r3, [pc, #8]	; (818e8 <PIOA_Handler+0x10>)
   818e0:	4798      	blx	r3
   818e2:	bd08      	pop	{r3, pc}
   818e4:	400e0e00 	.word	0x400e0e00
   818e8:	00081881 	.word	0x00081881

000818ec <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   818ec:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   818ee:	4802      	ldr	r0, [pc, #8]	; (818f8 <PIOB_Handler+0xc>)
   818f0:	210c      	movs	r1, #12
   818f2:	4b02      	ldr	r3, [pc, #8]	; (818fc <PIOB_Handler+0x10>)
   818f4:	4798      	blx	r3
   818f6:	bd08      	pop	{r3, pc}
   818f8:	400e1000 	.word	0x400e1000
   818fc:	00081881 	.word	0x00081881

00081900 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81900:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81902:	4802      	ldr	r0, [pc, #8]	; (8190c <PIOC_Handler+0xc>)
   81904:	210d      	movs	r1, #13
   81906:	4b02      	ldr	r3, [pc, #8]	; (81910 <PIOC_Handler+0x10>)
   81908:	4798      	blx	r3
   8190a:	bd08      	pop	{r3, pc}
   8190c:	400e1200 	.word	0x400e1200
   81910:	00081881 	.word	0x00081881

00081914 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81914:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81916:	4802      	ldr	r0, [pc, #8]	; (81920 <PIOD_Handler+0xc>)
   81918:	210e      	movs	r1, #14
   8191a:	4b02      	ldr	r3, [pc, #8]	; (81924 <PIOD_Handler+0x10>)
   8191c:	4798      	blx	r3
   8191e:	bd08      	pop	{r3, pc}
   81920:	400e1400 	.word	0x400e1400
   81924:	00081881 	.word	0x00081881

00081928 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81928:	4b17      	ldr	r3, [pc, #92]	; (81988 <pmc_switch_mck_to_pllack+0x60>)
   8192a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8192c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   81930:	4310      	orrs	r0, r2
   81932:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81936:	f013 0f08 	tst.w	r3, #8
   8193a:	d109      	bne.n	81950 <pmc_switch_mck_to_pllack+0x28>
   8193c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81940:	4911      	ldr	r1, [pc, #68]	; (81988 <pmc_switch_mck_to_pllack+0x60>)
   81942:	e001      	b.n	81948 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81944:	3b01      	subs	r3, #1
   81946:	d019      	beq.n	8197c <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81948:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8194a:	f012 0f08 	tst.w	r2, #8
   8194e:	d0f9      	beq.n	81944 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81950:	4b0d      	ldr	r3, [pc, #52]	; (81988 <pmc_switch_mck_to_pllack+0x60>)
   81952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81954:	f022 0203 	bic.w	r2, r2, #3
   81958:	f042 0202 	orr.w	r2, r2, #2
   8195c:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8195e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   81960:	f010 0008 	ands.w	r0, r0, #8
   81964:	d10c      	bne.n	81980 <pmc_switch_mck_to_pllack+0x58>
   81966:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8196a:	4907      	ldr	r1, [pc, #28]	; (81988 <pmc_switch_mck_to_pllack+0x60>)
   8196c:	e001      	b.n	81972 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8196e:	3b01      	subs	r3, #1
   81970:	d008      	beq.n	81984 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81972:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81974:	f012 0f08 	tst.w	r2, #8
   81978:	d0f9      	beq.n	8196e <pmc_switch_mck_to_pllack+0x46>
   8197a:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8197c:	2001      	movs	r0, #1
   8197e:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   81980:	2000      	movs	r0, #0
   81982:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81984:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81986:	4770      	bx	lr
   81988:	400e0600 	.word	0x400e0600

0008198c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   8198c:	b138      	cbz	r0, 8199e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8198e:	4911      	ldr	r1, [pc, #68]	; (819d4 <pmc_switch_mainck_to_xtal+0x48>)
   81990:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81992:	4a11      	ldr	r2, [pc, #68]	; (819d8 <pmc_switch_mainck_to_xtal+0x4c>)
   81994:	401a      	ands	r2, r3
   81996:	4b11      	ldr	r3, [pc, #68]	; (819dc <pmc_switch_mainck_to_xtal+0x50>)
   81998:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8199a:	620b      	str	r3, [r1, #32]
   8199c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8199e:	4a0d      	ldr	r2, [pc, #52]	; (819d4 <pmc_switch_mainck_to_xtal+0x48>)
   819a0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   819a2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   819a6:	f023 0303 	bic.w	r3, r3, #3
   819aa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   819ae:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   819b2:	0209      	lsls	r1, r1, #8
   819b4:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   819b6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   819b8:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   819ba:	6e93      	ldr	r3, [r2, #104]	; 0x68
   819bc:	f013 0f01 	tst.w	r3, #1
   819c0:	d0fb      	beq.n	819ba <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   819c2:	4a04      	ldr	r2, [pc, #16]	; (819d4 <pmc_switch_mainck_to_xtal+0x48>)
   819c4:	6a13      	ldr	r3, [r2, #32]
   819c6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   819ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   819ce:	6213      	str	r3, [r2, #32]
   819d0:	4770      	bx	lr
   819d2:	bf00      	nop
   819d4:	400e0600 	.word	0x400e0600
   819d8:	fec8fffc 	.word	0xfec8fffc
   819dc:	01370002 	.word	0x01370002

000819e0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   819e0:	4b02      	ldr	r3, [pc, #8]	; (819ec <pmc_osc_is_ready_mainck+0xc>)
   819e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   819e4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   819e8:	4770      	bx	lr
   819ea:	bf00      	nop
   819ec:	400e0600 	.word	0x400e0600

000819f0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   819f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   819f4:	4b01      	ldr	r3, [pc, #4]	; (819fc <pmc_disable_pllack+0xc>)
   819f6:	629a      	str	r2, [r3, #40]	; 0x28
   819f8:	4770      	bx	lr
   819fa:	bf00      	nop
   819fc:	400e0600 	.word	0x400e0600

00081a00 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81a00:	4b02      	ldr	r3, [pc, #8]	; (81a0c <pmc_is_locked_pllack+0xc>)
   81a02:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81a04:	f000 0002 	and.w	r0, r0, #2
   81a08:	4770      	bx	lr
   81a0a:	bf00      	nop
   81a0c:	400e0600 	.word	0x400e0600

00081a10 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81a10:	282c      	cmp	r0, #44	; 0x2c
   81a12:	d820      	bhi.n	81a56 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   81a14:	281f      	cmp	r0, #31
   81a16:	d80d      	bhi.n	81a34 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81a18:	4b12      	ldr	r3, [pc, #72]	; (81a64 <pmc_enable_periph_clk+0x54>)
   81a1a:	699a      	ldr	r2, [r3, #24]
   81a1c:	2301      	movs	r3, #1
   81a1e:	4083      	lsls	r3, r0
   81a20:	401a      	ands	r2, r3
   81a22:	4293      	cmp	r3, r2
   81a24:	d019      	beq.n	81a5a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   81a26:	2301      	movs	r3, #1
   81a28:	fa03 f000 	lsl.w	r0, r3, r0
   81a2c:	4b0d      	ldr	r3, [pc, #52]	; (81a64 <pmc_enable_periph_clk+0x54>)
   81a2e:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81a30:	2000      	movs	r0, #0
   81a32:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81a34:	4b0b      	ldr	r3, [pc, #44]	; (81a64 <pmc_enable_periph_clk+0x54>)
   81a36:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
   81a3a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81a3c:	2301      	movs	r3, #1
   81a3e:	4083      	lsls	r3, r0
   81a40:	401a      	ands	r2, r3
   81a42:	4293      	cmp	r3, r2
   81a44:	d00b      	beq.n	81a5e <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   81a46:	2301      	movs	r3, #1
   81a48:	fa03 f000 	lsl.w	r0, r3, r0
   81a4c:	4b05      	ldr	r3, [pc, #20]	; (81a64 <pmc_enable_periph_clk+0x54>)
   81a4e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   81a52:	2000      	movs	r0, #0
   81a54:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   81a56:	2001      	movs	r0, #1
   81a58:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81a5a:	2000      	movs	r0, #0
   81a5c:	4770      	bx	lr
   81a5e:	2000      	movs	r0, #0
}
   81a60:	4770      	bx	lr
   81a62:	bf00      	nop
   81a64:	400e0600 	.word	0x400e0600

00081a68 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81a68:	e7fe      	b.n	81a68 <Dummy_Handler>
   81a6a:	bf00      	nop

00081a6c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81a6c:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81a6e:	4b1e      	ldr	r3, [pc, #120]	; (81ae8 <Reset_Handler+0x7c>)
   81a70:	4a1e      	ldr	r2, [pc, #120]	; (81aec <Reset_Handler+0x80>)
   81a72:	429a      	cmp	r2, r3
   81a74:	d003      	beq.n	81a7e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   81a76:	4b1e      	ldr	r3, [pc, #120]	; (81af0 <Reset_Handler+0x84>)
   81a78:	4a1b      	ldr	r2, [pc, #108]	; (81ae8 <Reset_Handler+0x7c>)
   81a7a:	429a      	cmp	r2, r3
   81a7c:	d304      	bcc.n	81a88 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81a7e:	4b1d      	ldr	r3, [pc, #116]	; (81af4 <Reset_Handler+0x88>)
   81a80:	4a1d      	ldr	r2, [pc, #116]	; (81af8 <Reset_Handler+0x8c>)
   81a82:	429a      	cmp	r2, r3
   81a84:	d30f      	bcc.n	81aa6 <Reset_Handler+0x3a>
   81a86:	e01a      	b.n	81abe <Reset_Handler+0x52>
   81a88:	4b1c      	ldr	r3, [pc, #112]	; (81afc <Reset_Handler+0x90>)
   81a8a:	4c1d      	ldr	r4, [pc, #116]	; (81b00 <Reset_Handler+0x94>)
   81a8c:	1ae4      	subs	r4, r4, r3
   81a8e:	f024 0403 	bic.w	r4, r4, #3
   81a92:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81a94:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   81a96:	4814      	ldr	r0, [pc, #80]	; (81ae8 <Reset_Handler+0x7c>)
   81a98:	4914      	ldr	r1, [pc, #80]	; (81aec <Reset_Handler+0x80>)
   81a9a:	585a      	ldr	r2, [r3, r1]
   81a9c:	501a      	str	r2, [r3, r0]
   81a9e:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81aa0:	42a3      	cmp	r3, r4
   81aa2:	d1fa      	bne.n	81a9a <Reset_Handler+0x2e>
   81aa4:	e7eb      	b.n	81a7e <Reset_Handler+0x12>
   81aa6:	4b17      	ldr	r3, [pc, #92]	; (81b04 <Reset_Handler+0x98>)
   81aa8:	4917      	ldr	r1, [pc, #92]	; (81b08 <Reset_Handler+0x9c>)
   81aaa:	1ac9      	subs	r1, r1, r3
   81aac:	f021 0103 	bic.w	r1, r1, #3
   81ab0:	1d1a      	adds	r2, r3, #4
   81ab2:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   81ab4:	2200      	movs	r2, #0
   81ab6:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81aba:	428b      	cmp	r3, r1
   81abc:	d1fb      	bne.n	81ab6 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81abe:	4a13      	ldr	r2, [pc, #76]	; (81b0c <Reset_Handler+0xa0>)
   81ac0:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   81ac4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81ac8:	4911      	ldr	r1, [pc, #68]	; (81b10 <Reset_Handler+0xa4>)
   81aca:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81acc:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   81ad0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   81ad4:	d203      	bcs.n	81ade <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81ad6:	688a      	ldr	r2, [r1, #8]
   81ad8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81adc:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81ade:	4b0d      	ldr	r3, [pc, #52]	; (81b14 <Reset_Handler+0xa8>)
   81ae0:	4798      	blx	r3

	/* Branch to main function */
	main();
   81ae2:	4b0d      	ldr	r3, [pc, #52]	; (81b18 <Reset_Handler+0xac>)
   81ae4:	4798      	blx	r3
   81ae6:	e7fe      	b.n	81ae6 <Reset_Handler+0x7a>
   81ae8:	20070000 	.word	0x20070000
   81aec:	00082fc8 	.word	0x00082fc8
   81af0:	20070844 	.word	0x20070844
   81af4:	20070a44 	.word	0x20070a44
   81af8:	20070844 	.word	0x20070844
   81afc:	20070004 	.word	0x20070004
   81b00:	20070847 	.word	0x20070847
   81b04:	20070840 	.word	0x20070840
   81b08:	20070a3f 	.word	0x20070a3f
   81b0c:	00080000 	.word	0x00080000
   81b10:	e000ed00 	.word	0xe000ed00
   81b14:	00081d11 	.word	0x00081d11
   81b18:	00080149 	.word	0x00080149

00081b1c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81b1c:	4b3e      	ldr	r3, [pc, #248]	; (81c18 <SystemCoreClockUpdate+0xfc>)
   81b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81b20:	f003 0303 	and.w	r3, r3, #3
   81b24:	2b03      	cmp	r3, #3
   81b26:	d85f      	bhi.n	81be8 <SystemCoreClockUpdate+0xcc>
   81b28:	e8df f003 	tbb	[pc, r3]
   81b2c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81b30:	4b3a      	ldr	r3, [pc, #232]	; (81c1c <SystemCoreClockUpdate+0x100>)
   81b32:	695b      	ldr	r3, [r3, #20]
   81b34:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81b38:	bf14      	ite	ne
   81b3a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81b3e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81b42:	4b37      	ldr	r3, [pc, #220]	; (81c20 <SystemCoreClockUpdate+0x104>)
   81b44:	601a      	str	r2, [r3, #0]
   81b46:	e04f      	b.n	81be8 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81b48:	4b33      	ldr	r3, [pc, #204]	; (81c18 <SystemCoreClockUpdate+0xfc>)
   81b4a:	6a1b      	ldr	r3, [r3, #32]
   81b4c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81b50:	d003      	beq.n	81b5a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81b52:	4a34      	ldr	r2, [pc, #208]	; (81c24 <SystemCoreClockUpdate+0x108>)
   81b54:	4b32      	ldr	r3, [pc, #200]	; (81c20 <SystemCoreClockUpdate+0x104>)
   81b56:	601a      	str	r2, [r3, #0]
   81b58:	e046      	b.n	81be8 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81b5a:	4a33      	ldr	r2, [pc, #204]	; (81c28 <SystemCoreClockUpdate+0x10c>)
   81b5c:	4b30      	ldr	r3, [pc, #192]	; (81c20 <SystemCoreClockUpdate+0x104>)
   81b5e:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81b60:	4b2d      	ldr	r3, [pc, #180]	; (81c18 <SystemCoreClockUpdate+0xfc>)
   81b62:	6a1b      	ldr	r3, [r3, #32]
   81b64:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81b68:	2b10      	cmp	r3, #16
   81b6a:	d002      	beq.n	81b72 <SystemCoreClockUpdate+0x56>
   81b6c:	2b20      	cmp	r3, #32
   81b6e:	d004      	beq.n	81b7a <SystemCoreClockUpdate+0x5e>
   81b70:	e03a      	b.n	81be8 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81b72:	4a2e      	ldr	r2, [pc, #184]	; (81c2c <SystemCoreClockUpdate+0x110>)
   81b74:	4b2a      	ldr	r3, [pc, #168]	; (81c20 <SystemCoreClockUpdate+0x104>)
   81b76:	601a      	str	r2, [r3, #0]
				break;
   81b78:	e036      	b.n	81be8 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81b7a:	4a2a      	ldr	r2, [pc, #168]	; (81c24 <SystemCoreClockUpdate+0x108>)
   81b7c:	4b28      	ldr	r3, [pc, #160]	; (81c20 <SystemCoreClockUpdate+0x104>)
   81b7e:	601a      	str	r2, [r3, #0]
				break;
   81b80:	e032      	b.n	81be8 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81b82:	4b25      	ldr	r3, [pc, #148]	; (81c18 <SystemCoreClockUpdate+0xfc>)
   81b84:	6a1b      	ldr	r3, [r3, #32]
   81b86:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81b8a:	d003      	beq.n	81b94 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81b8c:	4a25      	ldr	r2, [pc, #148]	; (81c24 <SystemCoreClockUpdate+0x108>)
   81b8e:	4b24      	ldr	r3, [pc, #144]	; (81c20 <SystemCoreClockUpdate+0x104>)
   81b90:	601a      	str	r2, [r3, #0]
   81b92:	e012      	b.n	81bba <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81b94:	4a24      	ldr	r2, [pc, #144]	; (81c28 <SystemCoreClockUpdate+0x10c>)
   81b96:	4b22      	ldr	r3, [pc, #136]	; (81c20 <SystemCoreClockUpdate+0x104>)
   81b98:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81b9a:	4b1f      	ldr	r3, [pc, #124]	; (81c18 <SystemCoreClockUpdate+0xfc>)
   81b9c:	6a1b      	ldr	r3, [r3, #32]
   81b9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81ba2:	2b10      	cmp	r3, #16
   81ba4:	d002      	beq.n	81bac <SystemCoreClockUpdate+0x90>
   81ba6:	2b20      	cmp	r3, #32
   81ba8:	d004      	beq.n	81bb4 <SystemCoreClockUpdate+0x98>
   81baa:	e006      	b.n	81bba <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81bac:	4a1f      	ldr	r2, [pc, #124]	; (81c2c <SystemCoreClockUpdate+0x110>)
   81bae:	4b1c      	ldr	r3, [pc, #112]	; (81c20 <SystemCoreClockUpdate+0x104>)
   81bb0:	601a      	str	r2, [r3, #0]
				break;
   81bb2:	e002      	b.n	81bba <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81bb4:	4a1b      	ldr	r2, [pc, #108]	; (81c24 <SystemCoreClockUpdate+0x108>)
   81bb6:	4b1a      	ldr	r3, [pc, #104]	; (81c20 <SystemCoreClockUpdate+0x104>)
   81bb8:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81bba:	4b17      	ldr	r3, [pc, #92]	; (81c18 <SystemCoreClockUpdate+0xfc>)
   81bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81bbe:	f003 0303 	and.w	r3, r3, #3
   81bc2:	2b02      	cmp	r3, #2
   81bc4:	d10d      	bne.n	81be2 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81bc6:	4b14      	ldr	r3, [pc, #80]	; (81c18 <SystemCoreClockUpdate+0xfc>)
   81bc8:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81bca:	6a99      	ldr	r1, [r3, #40]	; 0x28
   81bcc:	4b14      	ldr	r3, [pc, #80]	; (81c20 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81bce:	f3c0 400a 	ubfx	r0, r0, #16, #11
   81bd2:	681a      	ldr	r2, [r3, #0]
   81bd4:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81bd8:	b2c9      	uxtb	r1, r1
   81bda:	fbb2 f2f1 	udiv	r2, r2, r1
   81bde:	601a      	str	r2, [r3, #0]
   81be0:	e002      	b.n	81be8 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81be2:	4a13      	ldr	r2, [pc, #76]	; (81c30 <SystemCoreClockUpdate+0x114>)
   81be4:	4b0e      	ldr	r3, [pc, #56]	; (81c20 <SystemCoreClockUpdate+0x104>)
   81be6:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81be8:	4b0b      	ldr	r3, [pc, #44]	; (81c18 <SystemCoreClockUpdate+0xfc>)
   81bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81bec:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81bf0:	2b70      	cmp	r3, #112	; 0x70
   81bf2:	d107      	bne.n	81c04 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   81bf4:	4b0a      	ldr	r3, [pc, #40]	; (81c20 <SystemCoreClockUpdate+0x104>)
   81bf6:	681a      	ldr	r2, [r3, #0]
   81bf8:	490e      	ldr	r1, [pc, #56]	; (81c34 <SystemCoreClockUpdate+0x118>)
   81bfa:	fba1 0202 	umull	r0, r2, r1, r2
   81bfe:	0852      	lsrs	r2, r2, #1
   81c00:	601a      	str	r2, [r3, #0]
   81c02:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81c04:	4b04      	ldr	r3, [pc, #16]	; (81c18 <SystemCoreClockUpdate+0xfc>)
   81c06:	6b19      	ldr	r1, [r3, #48]	; 0x30
   81c08:	4b05      	ldr	r3, [pc, #20]	; (81c20 <SystemCoreClockUpdate+0x104>)
   81c0a:	f3c1 1102 	ubfx	r1, r1, #4, #3
   81c0e:	681a      	ldr	r2, [r3, #0]
   81c10:	40ca      	lsrs	r2, r1
   81c12:	601a      	str	r2, [r3, #0]
   81c14:	4770      	bx	lr
   81c16:	bf00      	nop
   81c18:	400e0600 	.word	0x400e0600
   81c1c:	400e1a10 	.word	0x400e1a10
   81c20:	20070004 	.word	0x20070004
   81c24:	00b71b00 	.word	0x00b71b00
   81c28:	003d0900 	.word	0x003d0900
   81c2c:	007a1200 	.word	0x007a1200
   81c30:	0e4e1c00 	.word	0x0e4e1c00
   81c34:	aaaaaaab 	.word	0xaaaaaaab

00081c38 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   81c38:	4b1b      	ldr	r3, [pc, #108]	; (81ca8 <system_init_flash+0x70>)
   81c3a:	4298      	cmp	r0, r3
   81c3c:	d806      	bhi.n	81c4c <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   81c3e:	2300      	movs	r3, #0
   81c40:	4a1a      	ldr	r2, [pc, #104]	; (81cac <system_init_flash+0x74>)
   81c42:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   81c44:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81c48:	6013      	str	r3, [r2, #0]
   81c4a:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   81c4c:	4b18      	ldr	r3, [pc, #96]	; (81cb0 <system_init_flash+0x78>)
   81c4e:	4298      	cmp	r0, r3
   81c50:	d807      	bhi.n	81c62 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   81c52:	f44f 7380 	mov.w	r3, #256	; 0x100
   81c56:	4a15      	ldr	r2, [pc, #84]	; (81cac <system_init_flash+0x74>)
   81c58:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   81c5a:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81c5e:	6013      	str	r3, [r2, #0]
   81c60:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   81c62:	4b14      	ldr	r3, [pc, #80]	; (81cb4 <system_init_flash+0x7c>)
   81c64:	4298      	cmp	r0, r3
   81c66:	d807      	bhi.n	81c78 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   81c68:	f44f 7300 	mov.w	r3, #512	; 0x200
   81c6c:	4a0f      	ldr	r2, [pc, #60]	; (81cac <system_init_flash+0x74>)
   81c6e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   81c70:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81c74:	6013      	str	r3, [r2, #0]
   81c76:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   81c78:	4b0f      	ldr	r3, [pc, #60]	; (81cb8 <system_init_flash+0x80>)
   81c7a:	4298      	cmp	r0, r3
   81c7c:	d807      	bhi.n	81c8e <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   81c7e:	f44f 7340 	mov.w	r3, #768	; 0x300
   81c82:	4a0a      	ldr	r2, [pc, #40]	; (81cac <system_init_flash+0x74>)
   81c84:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   81c86:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81c8a:	6013      	str	r3, [r2, #0]
   81c8c:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   81c8e:	4b0b      	ldr	r3, [pc, #44]	; (81cbc <system_init_flash+0x84>)
   81c90:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   81c92:	bf94      	ite	ls
   81c94:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   81c98:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
   81c9c:	4a03      	ldr	r2, [pc, #12]	; (81cac <system_init_flash+0x74>)
   81c9e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   81ca0:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81ca4:	6013      	str	r3, [r2, #0]
   81ca6:	4770      	bx	lr
   81ca8:	0121eabf 	.word	0x0121eabf
   81cac:	400e0a00 	.word	0x400e0a00
   81cb0:	02faf07f 	.word	0x02faf07f
   81cb4:	03d08fff 	.word	0x03d08fff
   81cb8:	04c4b3ff 	.word	0x04c4b3ff
   81cbc:	055d4a7f 	.word	0x055d4a7f

00081cc0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81cc0:	4b09      	ldr	r3, [pc, #36]	; (81ce8 <_sbrk+0x28>)
   81cc2:	681b      	ldr	r3, [r3, #0]
   81cc4:	b913      	cbnz	r3, 81ccc <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   81cc6:	4a09      	ldr	r2, [pc, #36]	; (81cec <_sbrk+0x2c>)
   81cc8:	4b07      	ldr	r3, [pc, #28]	; (81ce8 <_sbrk+0x28>)
   81cca:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   81ccc:	4b06      	ldr	r3, [pc, #24]	; (81ce8 <_sbrk+0x28>)
   81cce:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81cd0:	181a      	adds	r2, r3, r0
   81cd2:	4907      	ldr	r1, [pc, #28]	; (81cf0 <_sbrk+0x30>)
   81cd4:	4291      	cmp	r1, r2
   81cd6:	db04      	blt.n	81ce2 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   81cd8:	4610      	mov	r0, r2
   81cda:	4a03      	ldr	r2, [pc, #12]	; (81ce8 <_sbrk+0x28>)
   81cdc:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81cde:	4618      	mov	r0, r3
   81ce0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   81ce2:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   81ce6:	4770      	bx	lr
   81ce8:	20070980 	.word	0x20070980
   81cec:	20072a48 	.word	0x20072a48
   81cf0:	20087ffc 	.word	0x20087ffc

00081cf4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81cf4:	f04f 30ff 	mov.w	r0, #4294967295
   81cf8:	4770      	bx	lr
   81cfa:	bf00      	nop

00081cfc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   81cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81d00:	604b      	str	r3, [r1, #4]

	return 0;
}
   81d02:	2000      	movs	r0, #0
   81d04:	4770      	bx	lr
   81d06:	bf00      	nop

00081d08 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81d08:	2001      	movs	r0, #1
   81d0a:	4770      	bx	lr

00081d0c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81d0c:	2000      	movs	r0, #0
   81d0e:	4770      	bx	lr

00081d10 <__libc_init_array>:
   81d10:	b570      	push	{r4, r5, r6, lr}
   81d12:	4e0f      	ldr	r6, [pc, #60]	; (81d50 <__libc_init_array+0x40>)
   81d14:	4d0f      	ldr	r5, [pc, #60]	; (81d54 <__libc_init_array+0x44>)
   81d16:	1b76      	subs	r6, r6, r5
   81d18:	10b6      	asrs	r6, r6, #2
   81d1a:	d007      	beq.n	81d2c <__libc_init_array+0x1c>
   81d1c:	3d04      	subs	r5, #4
   81d1e:	2400      	movs	r4, #0
   81d20:	3401      	adds	r4, #1
   81d22:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81d26:	4798      	blx	r3
   81d28:	42a6      	cmp	r6, r4
   81d2a:	d1f9      	bne.n	81d20 <__libc_init_array+0x10>
   81d2c:	4e0a      	ldr	r6, [pc, #40]	; (81d58 <__libc_init_array+0x48>)
   81d2e:	4d0b      	ldr	r5, [pc, #44]	; (81d5c <__libc_init_array+0x4c>)
   81d30:	f001 f938 	bl	82fa4 <_init>
   81d34:	1b76      	subs	r6, r6, r5
   81d36:	10b6      	asrs	r6, r6, #2
   81d38:	d008      	beq.n	81d4c <__libc_init_array+0x3c>
   81d3a:	3d04      	subs	r5, #4
   81d3c:	2400      	movs	r4, #0
   81d3e:	3401      	adds	r4, #1
   81d40:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81d44:	4798      	blx	r3
   81d46:	42a6      	cmp	r6, r4
   81d48:	d1f9      	bne.n	81d3e <__libc_init_array+0x2e>
   81d4a:	bd70      	pop	{r4, r5, r6, pc}
   81d4c:	bd70      	pop	{r4, r5, r6, pc}
   81d4e:	bf00      	nop
   81d50:	00082fb0 	.word	0x00082fb0
   81d54:	00082fb0 	.word	0x00082fb0
   81d58:	00082fb8 	.word	0x00082fb8
   81d5c:	00082fb0 	.word	0x00082fb0

00081d60 <memset>:
   81d60:	b4f0      	push	{r4, r5, r6, r7}
   81d62:	0784      	lsls	r4, r0, #30
   81d64:	d043      	beq.n	81dee <memset+0x8e>
   81d66:	1e54      	subs	r4, r2, #1
   81d68:	2a00      	cmp	r2, #0
   81d6a:	d03e      	beq.n	81dea <memset+0x8a>
   81d6c:	b2cd      	uxtb	r5, r1
   81d6e:	4603      	mov	r3, r0
   81d70:	e003      	b.n	81d7a <memset+0x1a>
   81d72:	1e62      	subs	r2, r4, #1
   81d74:	2c00      	cmp	r4, #0
   81d76:	d038      	beq.n	81dea <memset+0x8a>
   81d78:	4614      	mov	r4, r2
   81d7a:	f803 5b01 	strb.w	r5, [r3], #1
   81d7e:	079a      	lsls	r2, r3, #30
   81d80:	d1f7      	bne.n	81d72 <memset+0x12>
   81d82:	2c03      	cmp	r4, #3
   81d84:	d92a      	bls.n	81ddc <memset+0x7c>
   81d86:	b2cd      	uxtb	r5, r1
   81d88:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81d8c:	2c0f      	cmp	r4, #15
   81d8e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81d92:	d915      	bls.n	81dc0 <memset+0x60>
   81d94:	f1a4 0710 	sub.w	r7, r4, #16
   81d98:	093f      	lsrs	r7, r7, #4
   81d9a:	f103 0610 	add.w	r6, r3, #16
   81d9e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   81da2:	461a      	mov	r2, r3
   81da4:	6015      	str	r5, [r2, #0]
   81da6:	6055      	str	r5, [r2, #4]
   81da8:	6095      	str	r5, [r2, #8]
   81daa:	60d5      	str	r5, [r2, #12]
   81dac:	3210      	adds	r2, #16
   81dae:	42b2      	cmp	r2, r6
   81db0:	d1f8      	bne.n	81da4 <memset+0x44>
   81db2:	f004 040f 	and.w	r4, r4, #15
   81db6:	3701      	adds	r7, #1
   81db8:	2c03      	cmp	r4, #3
   81dba:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   81dbe:	d90d      	bls.n	81ddc <memset+0x7c>
   81dc0:	461e      	mov	r6, r3
   81dc2:	4622      	mov	r2, r4
   81dc4:	3a04      	subs	r2, #4
   81dc6:	2a03      	cmp	r2, #3
   81dc8:	f846 5b04 	str.w	r5, [r6], #4
   81dcc:	d8fa      	bhi.n	81dc4 <memset+0x64>
   81dce:	1f22      	subs	r2, r4, #4
   81dd0:	f022 0203 	bic.w	r2, r2, #3
   81dd4:	3204      	adds	r2, #4
   81dd6:	4413      	add	r3, r2
   81dd8:	f004 0403 	and.w	r4, r4, #3
   81ddc:	b12c      	cbz	r4, 81dea <memset+0x8a>
   81dde:	b2c9      	uxtb	r1, r1
   81de0:	441c      	add	r4, r3
   81de2:	f803 1b01 	strb.w	r1, [r3], #1
   81de6:	42a3      	cmp	r3, r4
   81de8:	d1fb      	bne.n	81de2 <memset+0x82>
   81dea:	bcf0      	pop	{r4, r5, r6, r7}
   81dec:	4770      	bx	lr
   81dee:	4614      	mov	r4, r2
   81df0:	4603      	mov	r3, r0
   81df2:	e7c6      	b.n	81d82 <memset+0x22>

00081df4 <setbuf>:
   81df4:	2900      	cmp	r1, #0
   81df6:	bf0c      	ite	eq
   81df8:	2202      	moveq	r2, #2
   81dfa:	2200      	movne	r2, #0
   81dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81e00:	f000 b80e 	b.w	81e20 <setvbuf>

00081e04 <setjmp>:
   81e04:	46ec      	mov	ip, sp
   81e06:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81e0a:	f04f 0000 	mov.w	r0, #0
   81e0e:	4770      	bx	lr

00081e10 <longjmp>:
   81e10:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81e14:	46e5      	mov	sp, ip
   81e16:	0008      	movs	r0, r1
   81e18:	bf08      	it	eq
   81e1a:	2001      	moveq	r0, #1
   81e1c:	4770      	bx	lr
   81e1e:	bf00      	nop

00081e20 <setvbuf>:
   81e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81e24:	4d3c      	ldr	r5, [pc, #240]	; (81f18 <setvbuf+0xf8>)
   81e26:	4604      	mov	r4, r0
   81e28:	682d      	ldr	r5, [r5, #0]
   81e2a:	4688      	mov	r8, r1
   81e2c:	4616      	mov	r6, r2
   81e2e:	461f      	mov	r7, r3
   81e30:	b115      	cbz	r5, 81e38 <setvbuf+0x18>
   81e32:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81e34:	2b00      	cmp	r3, #0
   81e36:	d04f      	beq.n	81ed8 <setvbuf+0xb8>
   81e38:	2e02      	cmp	r6, #2
   81e3a:	d830      	bhi.n	81e9e <setvbuf+0x7e>
   81e3c:	2f00      	cmp	r7, #0
   81e3e:	db2e      	blt.n	81e9e <setvbuf+0x7e>
   81e40:	4628      	mov	r0, r5
   81e42:	4621      	mov	r1, r4
   81e44:	f000 f9d6 	bl	821f4 <_fflush_r>
   81e48:	89a3      	ldrh	r3, [r4, #12]
   81e4a:	2200      	movs	r2, #0
   81e4c:	6062      	str	r2, [r4, #4]
   81e4e:	61a2      	str	r2, [r4, #24]
   81e50:	061a      	lsls	r2, r3, #24
   81e52:	d428      	bmi.n	81ea6 <setvbuf+0x86>
   81e54:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81e58:	b29b      	uxth	r3, r3
   81e5a:	2e02      	cmp	r6, #2
   81e5c:	81a3      	strh	r3, [r4, #12]
   81e5e:	d02d      	beq.n	81ebc <setvbuf+0x9c>
   81e60:	f1b8 0f00 	cmp.w	r8, #0
   81e64:	d03c      	beq.n	81ee0 <setvbuf+0xc0>
   81e66:	2e01      	cmp	r6, #1
   81e68:	d013      	beq.n	81e92 <setvbuf+0x72>
   81e6a:	b29b      	uxth	r3, r3
   81e6c:	f003 0008 	and.w	r0, r3, #8
   81e70:	4a2a      	ldr	r2, [pc, #168]	; (81f1c <setvbuf+0xfc>)
   81e72:	b280      	uxth	r0, r0
   81e74:	63ea      	str	r2, [r5, #60]	; 0x3c
   81e76:	f8c4 8000 	str.w	r8, [r4]
   81e7a:	f8c4 8010 	str.w	r8, [r4, #16]
   81e7e:	6167      	str	r7, [r4, #20]
   81e80:	b178      	cbz	r0, 81ea2 <setvbuf+0x82>
   81e82:	f013 0f03 	tst.w	r3, #3
   81e86:	bf18      	it	ne
   81e88:	2700      	movne	r7, #0
   81e8a:	60a7      	str	r7, [r4, #8]
   81e8c:	2000      	movs	r0, #0
   81e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e92:	f043 0301 	orr.w	r3, r3, #1
   81e96:	427a      	negs	r2, r7
   81e98:	81a3      	strh	r3, [r4, #12]
   81e9a:	61a2      	str	r2, [r4, #24]
   81e9c:	e7e5      	b.n	81e6a <setvbuf+0x4a>
   81e9e:	f04f 30ff 	mov.w	r0, #4294967295
   81ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81ea6:	4628      	mov	r0, r5
   81ea8:	6921      	ldr	r1, [r4, #16]
   81eaa:	f000 faa3 	bl	823f4 <_free_r>
   81eae:	89a3      	ldrh	r3, [r4, #12]
   81eb0:	2e02      	cmp	r6, #2
   81eb2:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81eb6:	b29b      	uxth	r3, r3
   81eb8:	81a3      	strh	r3, [r4, #12]
   81eba:	d1d1      	bne.n	81e60 <setvbuf+0x40>
   81ebc:	2000      	movs	r0, #0
   81ebe:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81ec2:	f043 0302 	orr.w	r3, r3, #2
   81ec6:	2500      	movs	r5, #0
   81ec8:	2101      	movs	r1, #1
   81eca:	81a3      	strh	r3, [r4, #12]
   81ecc:	60a5      	str	r5, [r4, #8]
   81ece:	6022      	str	r2, [r4, #0]
   81ed0:	6122      	str	r2, [r4, #16]
   81ed2:	6161      	str	r1, [r4, #20]
   81ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81ed8:	4628      	mov	r0, r5
   81eda:	f000 f9a7 	bl	8222c <__sinit>
   81ede:	e7ab      	b.n	81e38 <setvbuf+0x18>
   81ee0:	2f00      	cmp	r7, #0
   81ee2:	bf08      	it	eq
   81ee4:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   81ee8:	4638      	mov	r0, r7
   81eea:	f000 fbe3 	bl	826b4 <malloc>
   81eee:	4680      	mov	r8, r0
   81ef0:	b128      	cbz	r0, 81efe <setvbuf+0xde>
   81ef2:	89a3      	ldrh	r3, [r4, #12]
   81ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81ef8:	b29b      	uxth	r3, r3
   81efa:	81a3      	strh	r3, [r4, #12]
   81efc:	e7b3      	b.n	81e66 <setvbuf+0x46>
   81efe:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81f02:	f000 fbd7 	bl	826b4 <malloc>
   81f06:	4680      	mov	r8, r0
   81f08:	b918      	cbnz	r0, 81f12 <setvbuf+0xf2>
   81f0a:	89a3      	ldrh	r3, [r4, #12]
   81f0c:	f04f 30ff 	mov.w	r0, #4294967295
   81f10:	e7d5      	b.n	81ebe <setvbuf+0x9e>
   81f12:	f44f 6780 	mov.w	r7, #1024	; 0x400
   81f16:	e7ec      	b.n	81ef2 <setvbuf+0xd2>
   81f18:	20070430 	.word	0x20070430
   81f1c:	00082221 	.word	0x00082221

00081f20 <__swbuf_r>:
   81f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81f22:	460d      	mov	r5, r1
   81f24:	4614      	mov	r4, r2
   81f26:	4607      	mov	r7, r0
   81f28:	b110      	cbz	r0, 81f30 <__swbuf_r+0x10>
   81f2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81f2c:	2b00      	cmp	r3, #0
   81f2e:	d048      	beq.n	81fc2 <__swbuf_r+0xa2>
   81f30:	89a2      	ldrh	r2, [r4, #12]
   81f32:	69a0      	ldr	r0, [r4, #24]
   81f34:	b293      	uxth	r3, r2
   81f36:	60a0      	str	r0, [r4, #8]
   81f38:	0718      	lsls	r0, r3, #28
   81f3a:	d538      	bpl.n	81fae <__swbuf_r+0x8e>
   81f3c:	6926      	ldr	r6, [r4, #16]
   81f3e:	2e00      	cmp	r6, #0
   81f40:	d035      	beq.n	81fae <__swbuf_r+0x8e>
   81f42:	0499      	lsls	r1, r3, #18
   81f44:	b2ed      	uxtb	r5, r5
   81f46:	d515      	bpl.n	81f74 <__swbuf_r+0x54>
   81f48:	6823      	ldr	r3, [r4, #0]
   81f4a:	6962      	ldr	r2, [r4, #20]
   81f4c:	1b9e      	subs	r6, r3, r6
   81f4e:	4296      	cmp	r6, r2
   81f50:	da1c      	bge.n	81f8c <__swbuf_r+0x6c>
   81f52:	3601      	adds	r6, #1
   81f54:	68a2      	ldr	r2, [r4, #8]
   81f56:	1c59      	adds	r1, r3, #1
   81f58:	3a01      	subs	r2, #1
   81f5a:	60a2      	str	r2, [r4, #8]
   81f5c:	6021      	str	r1, [r4, #0]
   81f5e:	701d      	strb	r5, [r3, #0]
   81f60:	6963      	ldr	r3, [r4, #20]
   81f62:	42b3      	cmp	r3, r6
   81f64:	d01a      	beq.n	81f9c <__swbuf_r+0x7c>
   81f66:	89a3      	ldrh	r3, [r4, #12]
   81f68:	07db      	lsls	r3, r3, #31
   81f6a:	d501      	bpl.n	81f70 <__swbuf_r+0x50>
   81f6c:	2d0a      	cmp	r5, #10
   81f6e:	d015      	beq.n	81f9c <__swbuf_r+0x7c>
   81f70:	4628      	mov	r0, r5
   81f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81f74:	6e63      	ldr	r3, [r4, #100]	; 0x64
   81f76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   81f7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   81f7e:	6663      	str	r3, [r4, #100]	; 0x64
   81f80:	6823      	ldr	r3, [r4, #0]
   81f82:	81a2      	strh	r2, [r4, #12]
   81f84:	6962      	ldr	r2, [r4, #20]
   81f86:	1b9e      	subs	r6, r3, r6
   81f88:	4296      	cmp	r6, r2
   81f8a:	dbe2      	blt.n	81f52 <__swbuf_r+0x32>
   81f8c:	4638      	mov	r0, r7
   81f8e:	4621      	mov	r1, r4
   81f90:	f000 f930 	bl	821f4 <_fflush_r>
   81f94:	b940      	cbnz	r0, 81fa8 <__swbuf_r+0x88>
   81f96:	6823      	ldr	r3, [r4, #0]
   81f98:	2601      	movs	r6, #1
   81f9a:	e7db      	b.n	81f54 <__swbuf_r+0x34>
   81f9c:	4638      	mov	r0, r7
   81f9e:	4621      	mov	r1, r4
   81fa0:	f000 f928 	bl	821f4 <_fflush_r>
   81fa4:	2800      	cmp	r0, #0
   81fa6:	d0e3      	beq.n	81f70 <__swbuf_r+0x50>
   81fa8:	f04f 30ff 	mov.w	r0, #4294967295
   81fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81fae:	4638      	mov	r0, r7
   81fb0:	4621      	mov	r1, r4
   81fb2:	f000 f809 	bl	81fc8 <__swsetup_r>
   81fb6:	2800      	cmp	r0, #0
   81fb8:	d1f6      	bne.n	81fa8 <__swbuf_r+0x88>
   81fba:	89a2      	ldrh	r2, [r4, #12]
   81fbc:	6926      	ldr	r6, [r4, #16]
   81fbe:	b293      	uxth	r3, r2
   81fc0:	e7bf      	b.n	81f42 <__swbuf_r+0x22>
   81fc2:	f000 f933 	bl	8222c <__sinit>
   81fc6:	e7b3      	b.n	81f30 <__swbuf_r+0x10>

00081fc8 <__swsetup_r>:
   81fc8:	4b2f      	ldr	r3, [pc, #188]	; (82088 <__swsetup_r+0xc0>)
   81fca:	b570      	push	{r4, r5, r6, lr}
   81fcc:	4606      	mov	r6, r0
   81fce:	6818      	ldr	r0, [r3, #0]
   81fd0:	460c      	mov	r4, r1
   81fd2:	b110      	cbz	r0, 81fda <__swsetup_r+0x12>
   81fd4:	6b82      	ldr	r2, [r0, #56]	; 0x38
   81fd6:	2a00      	cmp	r2, #0
   81fd8:	d036      	beq.n	82048 <__swsetup_r+0x80>
   81fda:	89a5      	ldrh	r5, [r4, #12]
   81fdc:	b2ab      	uxth	r3, r5
   81fde:	0719      	lsls	r1, r3, #28
   81fe0:	d50c      	bpl.n	81ffc <__swsetup_r+0x34>
   81fe2:	6922      	ldr	r2, [r4, #16]
   81fe4:	b1aa      	cbz	r2, 82012 <__swsetup_r+0x4a>
   81fe6:	f013 0101 	ands.w	r1, r3, #1
   81fea:	d01e      	beq.n	8202a <__swsetup_r+0x62>
   81fec:	6963      	ldr	r3, [r4, #20]
   81fee:	2100      	movs	r1, #0
   81ff0:	425b      	negs	r3, r3
   81ff2:	61a3      	str	r3, [r4, #24]
   81ff4:	60a1      	str	r1, [r4, #8]
   81ff6:	b1f2      	cbz	r2, 82036 <__swsetup_r+0x6e>
   81ff8:	2000      	movs	r0, #0
   81ffa:	bd70      	pop	{r4, r5, r6, pc}
   81ffc:	06da      	lsls	r2, r3, #27
   81ffe:	d53a      	bpl.n	82076 <__swsetup_r+0xae>
   82000:	075b      	lsls	r3, r3, #29
   82002:	d424      	bmi.n	8204e <__swsetup_r+0x86>
   82004:	6922      	ldr	r2, [r4, #16]
   82006:	f045 0308 	orr.w	r3, r5, #8
   8200a:	81a3      	strh	r3, [r4, #12]
   8200c:	b29b      	uxth	r3, r3
   8200e:	2a00      	cmp	r2, #0
   82010:	d1e9      	bne.n	81fe6 <__swsetup_r+0x1e>
   82012:	f403 7120 	and.w	r1, r3, #640	; 0x280
   82016:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8201a:	d0e4      	beq.n	81fe6 <__swsetup_r+0x1e>
   8201c:	4630      	mov	r0, r6
   8201e:	4621      	mov	r1, r4
   82020:	f000 fad8 	bl	825d4 <__smakebuf_r>
   82024:	89a3      	ldrh	r3, [r4, #12]
   82026:	6922      	ldr	r2, [r4, #16]
   82028:	e7dd      	b.n	81fe6 <__swsetup_r+0x1e>
   8202a:	0798      	lsls	r0, r3, #30
   8202c:	bf58      	it	pl
   8202e:	6961      	ldrpl	r1, [r4, #20]
   82030:	60a1      	str	r1, [r4, #8]
   82032:	2a00      	cmp	r2, #0
   82034:	d1e0      	bne.n	81ff8 <__swsetup_r+0x30>
   82036:	89a3      	ldrh	r3, [r4, #12]
   82038:	061a      	lsls	r2, r3, #24
   8203a:	d5dd      	bpl.n	81ff8 <__swsetup_r+0x30>
   8203c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82040:	81a3      	strh	r3, [r4, #12]
   82042:	f04f 30ff 	mov.w	r0, #4294967295
   82046:	bd70      	pop	{r4, r5, r6, pc}
   82048:	f000 f8f0 	bl	8222c <__sinit>
   8204c:	e7c5      	b.n	81fda <__swsetup_r+0x12>
   8204e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82050:	b149      	cbz	r1, 82066 <__swsetup_r+0x9e>
   82052:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82056:	4299      	cmp	r1, r3
   82058:	d003      	beq.n	82062 <__swsetup_r+0x9a>
   8205a:	4630      	mov	r0, r6
   8205c:	f000 f9ca 	bl	823f4 <_free_r>
   82060:	89a5      	ldrh	r5, [r4, #12]
   82062:	2300      	movs	r3, #0
   82064:	6323      	str	r3, [r4, #48]	; 0x30
   82066:	6922      	ldr	r2, [r4, #16]
   82068:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   8206c:	2100      	movs	r1, #0
   8206e:	b2ad      	uxth	r5, r5
   82070:	6022      	str	r2, [r4, #0]
   82072:	6061      	str	r1, [r4, #4]
   82074:	e7c7      	b.n	82006 <__swsetup_r+0x3e>
   82076:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   8207a:	2309      	movs	r3, #9
   8207c:	6033      	str	r3, [r6, #0]
   8207e:	f04f 30ff 	mov.w	r0, #4294967295
   82082:	81a5      	strh	r5, [r4, #12]
   82084:	bd70      	pop	{r4, r5, r6, pc}
   82086:	bf00      	nop
   82088:	20070430 	.word	0x20070430

0008208c <register_fini>:
   8208c:	4b02      	ldr	r3, [pc, #8]	; (82098 <register_fini+0xc>)
   8208e:	b113      	cbz	r3, 82096 <register_fini+0xa>
   82090:	4802      	ldr	r0, [pc, #8]	; (8209c <register_fini+0x10>)
   82092:	f000 b805 	b.w	820a0 <atexit>
   82096:	4770      	bx	lr
   82098:	00000000 	.word	0x00000000
   8209c:	00082329 	.word	0x00082329

000820a0 <atexit>:
   820a0:	4601      	mov	r1, r0
   820a2:	2000      	movs	r0, #0
   820a4:	4602      	mov	r2, r0
   820a6:	4603      	mov	r3, r0
   820a8:	f000 be14 	b.w	82cd4 <__register_exitproc>

000820ac <__sflush_r>:
   820ac:	898b      	ldrh	r3, [r1, #12]
   820ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   820b2:	b29a      	uxth	r2, r3
   820b4:	460d      	mov	r5, r1
   820b6:	0711      	lsls	r1, r2, #28
   820b8:	4680      	mov	r8, r0
   820ba:	d43c      	bmi.n	82136 <__sflush_r+0x8a>
   820bc:	686a      	ldr	r2, [r5, #4]
   820be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   820c2:	2a00      	cmp	r2, #0
   820c4:	81ab      	strh	r3, [r5, #12]
   820c6:	dd59      	ble.n	8217c <__sflush_r+0xd0>
   820c8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   820ca:	2c00      	cmp	r4, #0
   820cc:	d04b      	beq.n	82166 <__sflush_r+0xba>
   820ce:	b29b      	uxth	r3, r3
   820d0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   820d4:	2100      	movs	r1, #0
   820d6:	b292      	uxth	r2, r2
   820d8:	f8d8 6000 	ldr.w	r6, [r8]
   820dc:	f8c8 1000 	str.w	r1, [r8]
   820e0:	2a00      	cmp	r2, #0
   820e2:	d04f      	beq.n	82184 <__sflush_r+0xd8>
   820e4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   820e6:	075f      	lsls	r7, r3, #29
   820e8:	d505      	bpl.n	820f6 <__sflush_r+0x4a>
   820ea:	6869      	ldr	r1, [r5, #4]
   820ec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   820ee:	1a52      	subs	r2, r2, r1
   820f0:	b10b      	cbz	r3, 820f6 <__sflush_r+0x4a>
   820f2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   820f4:	1ad2      	subs	r2, r2, r3
   820f6:	4640      	mov	r0, r8
   820f8:	69e9      	ldr	r1, [r5, #28]
   820fa:	2300      	movs	r3, #0
   820fc:	47a0      	blx	r4
   820fe:	1c44      	adds	r4, r0, #1
   82100:	d04a      	beq.n	82198 <__sflush_r+0xec>
   82102:	89ab      	ldrh	r3, [r5, #12]
   82104:	692a      	ldr	r2, [r5, #16]
   82106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8210a:	b29b      	uxth	r3, r3
   8210c:	2100      	movs	r1, #0
   8210e:	602a      	str	r2, [r5, #0]
   82110:	04da      	lsls	r2, r3, #19
   82112:	81ab      	strh	r3, [r5, #12]
   82114:	6069      	str	r1, [r5, #4]
   82116:	d44c      	bmi.n	821b2 <__sflush_r+0x106>
   82118:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8211a:	f8c8 6000 	str.w	r6, [r8]
   8211e:	b311      	cbz	r1, 82166 <__sflush_r+0xba>
   82120:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82124:	4299      	cmp	r1, r3
   82126:	d002      	beq.n	8212e <__sflush_r+0x82>
   82128:	4640      	mov	r0, r8
   8212a:	f000 f963 	bl	823f4 <_free_r>
   8212e:	2000      	movs	r0, #0
   82130:	6328      	str	r0, [r5, #48]	; 0x30
   82132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82136:	692e      	ldr	r6, [r5, #16]
   82138:	b1ae      	cbz	r6, 82166 <__sflush_r+0xba>
   8213a:	0791      	lsls	r1, r2, #30
   8213c:	682c      	ldr	r4, [r5, #0]
   8213e:	bf0c      	ite	eq
   82140:	696b      	ldreq	r3, [r5, #20]
   82142:	2300      	movne	r3, #0
   82144:	602e      	str	r6, [r5, #0]
   82146:	1ba4      	subs	r4, r4, r6
   82148:	60ab      	str	r3, [r5, #8]
   8214a:	e00a      	b.n	82162 <__sflush_r+0xb6>
   8214c:	4632      	mov	r2, r6
   8214e:	4623      	mov	r3, r4
   82150:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82152:	4640      	mov	r0, r8
   82154:	69e9      	ldr	r1, [r5, #28]
   82156:	47b8      	blx	r7
   82158:	2800      	cmp	r0, #0
   8215a:	ebc0 0404 	rsb	r4, r0, r4
   8215e:	4406      	add	r6, r0
   82160:	dd04      	ble.n	8216c <__sflush_r+0xc0>
   82162:	2c00      	cmp	r4, #0
   82164:	dcf2      	bgt.n	8214c <__sflush_r+0xa0>
   82166:	2000      	movs	r0, #0
   82168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8216c:	89ab      	ldrh	r3, [r5, #12]
   8216e:	f04f 30ff 	mov.w	r0, #4294967295
   82172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82176:	81ab      	strh	r3, [r5, #12]
   82178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8217c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8217e:	2a00      	cmp	r2, #0
   82180:	dca2      	bgt.n	820c8 <__sflush_r+0x1c>
   82182:	e7f0      	b.n	82166 <__sflush_r+0xba>
   82184:	2301      	movs	r3, #1
   82186:	4640      	mov	r0, r8
   82188:	69e9      	ldr	r1, [r5, #28]
   8218a:	47a0      	blx	r4
   8218c:	1c43      	adds	r3, r0, #1
   8218e:	4602      	mov	r2, r0
   82190:	d01e      	beq.n	821d0 <__sflush_r+0x124>
   82192:	89ab      	ldrh	r3, [r5, #12]
   82194:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82196:	e7a6      	b.n	820e6 <__sflush_r+0x3a>
   82198:	f8d8 3000 	ldr.w	r3, [r8]
   8219c:	b95b      	cbnz	r3, 821b6 <__sflush_r+0x10a>
   8219e:	89aa      	ldrh	r2, [r5, #12]
   821a0:	6929      	ldr	r1, [r5, #16]
   821a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   821a6:	b292      	uxth	r2, r2
   821a8:	606b      	str	r3, [r5, #4]
   821aa:	04d3      	lsls	r3, r2, #19
   821ac:	81aa      	strh	r2, [r5, #12]
   821ae:	6029      	str	r1, [r5, #0]
   821b0:	d5b2      	bpl.n	82118 <__sflush_r+0x6c>
   821b2:	6528      	str	r0, [r5, #80]	; 0x50
   821b4:	e7b0      	b.n	82118 <__sflush_r+0x6c>
   821b6:	2b1d      	cmp	r3, #29
   821b8:	d001      	beq.n	821be <__sflush_r+0x112>
   821ba:	2b16      	cmp	r3, #22
   821bc:	d113      	bne.n	821e6 <__sflush_r+0x13a>
   821be:	89a9      	ldrh	r1, [r5, #12]
   821c0:	692b      	ldr	r3, [r5, #16]
   821c2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   821c6:	2200      	movs	r2, #0
   821c8:	81a9      	strh	r1, [r5, #12]
   821ca:	602b      	str	r3, [r5, #0]
   821cc:	606a      	str	r2, [r5, #4]
   821ce:	e7a3      	b.n	82118 <__sflush_r+0x6c>
   821d0:	f8d8 3000 	ldr.w	r3, [r8]
   821d4:	2b00      	cmp	r3, #0
   821d6:	d0dc      	beq.n	82192 <__sflush_r+0xe6>
   821d8:	2b1d      	cmp	r3, #29
   821da:	d001      	beq.n	821e0 <__sflush_r+0x134>
   821dc:	2b16      	cmp	r3, #22
   821de:	d1c5      	bne.n	8216c <__sflush_r+0xc0>
   821e0:	f8c8 6000 	str.w	r6, [r8]
   821e4:	e7bf      	b.n	82166 <__sflush_r+0xba>
   821e6:	89ab      	ldrh	r3, [r5, #12]
   821e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   821ec:	81ab      	strh	r3, [r5, #12]
   821ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   821f2:	bf00      	nop

000821f4 <_fflush_r>:
   821f4:	b510      	push	{r4, lr}
   821f6:	4604      	mov	r4, r0
   821f8:	b082      	sub	sp, #8
   821fa:	b108      	cbz	r0, 82200 <_fflush_r+0xc>
   821fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   821fe:	b153      	cbz	r3, 82216 <_fflush_r+0x22>
   82200:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   82204:	b908      	cbnz	r0, 8220a <_fflush_r+0x16>
   82206:	b002      	add	sp, #8
   82208:	bd10      	pop	{r4, pc}
   8220a:	4620      	mov	r0, r4
   8220c:	b002      	add	sp, #8
   8220e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82212:	f7ff bf4b 	b.w	820ac <__sflush_r>
   82216:	9101      	str	r1, [sp, #4]
   82218:	f000 f808 	bl	8222c <__sinit>
   8221c:	9901      	ldr	r1, [sp, #4]
   8221e:	e7ef      	b.n	82200 <_fflush_r+0xc>

00082220 <_cleanup_r>:
   82220:	4901      	ldr	r1, [pc, #4]	; (82228 <_cleanup_r+0x8>)
   82222:	f000 b9b3 	b.w	8258c <_fwalk>
   82226:	bf00      	nop
   82228:	00082e21 	.word	0x00082e21

0008222c <__sinit>:
   8222c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82230:	6b84      	ldr	r4, [r0, #56]	; 0x38
   82232:	b083      	sub	sp, #12
   82234:	4607      	mov	r7, r0
   82236:	2c00      	cmp	r4, #0
   82238:	d165      	bne.n	82306 <__sinit+0xda>
   8223a:	687d      	ldr	r5, [r7, #4]
   8223c:	4833      	ldr	r0, [pc, #204]	; (8230c <__sinit+0xe0>)
   8223e:	2304      	movs	r3, #4
   82240:	2103      	movs	r1, #3
   82242:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   82246:	63f8      	str	r0, [r7, #60]	; 0x3c
   82248:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   8224c:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82250:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82254:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82258:	81ab      	strh	r3, [r5, #12]
   8225a:	602c      	str	r4, [r5, #0]
   8225c:	606c      	str	r4, [r5, #4]
   8225e:	60ac      	str	r4, [r5, #8]
   82260:	666c      	str	r4, [r5, #100]	; 0x64
   82262:	81ec      	strh	r4, [r5, #14]
   82264:	612c      	str	r4, [r5, #16]
   82266:	616c      	str	r4, [r5, #20]
   82268:	61ac      	str	r4, [r5, #24]
   8226a:	4621      	mov	r1, r4
   8226c:	2208      	movs	r2, #8
   8226e:	f7ff fd77 	bl	81d60 <memset>
   82272:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82310 <__sinit+0xe4>
   82276:	68be      	ldr	r6, [r7, #8]
   82278:	f8df a098 	ldr.w	sl, [pc, #152]	; 82314 <__sinit+0xe8>
   8227c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82318 <__sinit+0xec>
   82280:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8231c <__sinit+0xf0>
   82284:	2301      	movs	r3, #1
   82286:	2209      	movs	r2, #9
   82288:	61ed      	str	r5, [r5, #28]
   8228a:	f8c5 b020 	str.w	fp, [r5, #32]
   8228e:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82292:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82296:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8229a:	4621      	mov	r1, r4
   8229c:	81f3      	strh	r3, [r6, #14]
   8229e:	81b2      	strh	r2, [r6, #12]
   822a0:	6034      	str	r4, [r6, #0]
   822a2:	6074      	str	r4, [r6, #4]
   822a4:	60b4      	str	r4, [r6, #8]
   822a6:	6674      	str	r4, [r6, #100]	; 0x64
   822a8:	6134      	str	r4, [r6, #16]
   822aa:	6174      	str	r4, [r6, #20]
   822ac:	61b4      	str	r4, [r6, #24]
   822ae:	2208      	movs	r2, #8
   822b0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   822b4:	9301      	str	r3, [sp, #4]
   822b6:	f7ff fd53 	bl	81d60 <memset>
   822ba:	68fd      	ldr	r5, [r7, #12]
   822bc:	2012      	movs	r0, #18
   822be:	2202      	movs	r2, #2
   822c0:	61f6      	str	r6, [r6, #28]
   822c2:	f8c6 b020 	str.w	fp, [r6, #32]
   822c6:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   822ca:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   822ce:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   822d2:	4621      	mov	r1, r4
   822d4:	81a8      	strh	r0, [r5, #12]
   822d6:	81ea      	strh	r2, [r5, #14]
   822d8:	602c      	str	r4, [r5, #0]
   822da:	606c      	str	r4, [r5, #4]
   822dc:	60ac      	str	r4, [r5, #8]
   822de:	666c      	str	r4, [r5, #100]	; 0x64
   822e0:	612c      	str	r4, [r5, #16]
   822e2:	616c      	str	r4, [r5, #20]
   822e4:	61ac      	str	r4, [r5, #24]
   822e6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   822ea:	2208      	movs	r2, #8
   822ec:	f7ff fd38 	bl	81d60 <memset>
   822f0:	9b01      	ldr	r3, [sp, #4]
   822f2:	61ed      	str	r5, [r5, #28]
   822f4:	f8c5 b020 	str.w	fp, [r5, #32]
   822f8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   822fc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82300:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82304:	63bb      	str	r3, [r7, #56]	; 0x38
   82306:	b003      	add	sp, #12
   82308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8230c:	00082221 	.word	0x00082221
   82310:	00082c29 	.word	0x00082c29
   82314:	00082c4d 	.word	0x00082c4d
   82318:	00082c85 	.word	0x00082c85
   8231c:	00082ca5 	.word	0x00082ca5

00082320 <__sfp_lock_acquire>:
   82320:	4770      	bx	lr
   82322:	bf00      	nop

00082324 <__sfp_lock_release>:
   82324:	4770      	bx	lr
   82326:	bf00      	nop

00082328 <__libc_fini_array>:
   82328:	b538      	push	{r3, r4, r5, lr}
   8232a:	4d09      	ldr	r5, [pc, #36]	; (82350 <__libc_fini_array+0x28>)
   8232c:	4c09      	ldr	r4, [pc, #36]	; (82354 <__libc_fini_array+0x2c>)
   8232e:	1b64      	subs	r4, r4, r5
   82330:	10a4      	asrs	r4, r4, #2
   82332:	bf18      	it	ne
   82334:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82338:	d005      	beq.n	82346 <__libc_fini_array+0x1e>
   8233a:	3c01      	subs	r4, #1
   8233c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82340:	4798      	blx	r3
   82342:	2c00      	cmp	r4, #0
   82344:	d1f9      	bne.n	8233a <__libc_fini_array+0x12>
   82346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8234a:	f000 be35 	b.w	82fb8 <_fini>
   8234e:	bf00      	nop
   82350:	00082fc4 	.word	0x00082fc4
   82354:	00082fc8 	.word	0x00082fc8

00082358 <_malloc_trim_r>:
   82358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8235a:	4d23      	ldr	r5, [pc, #140]	; (823e8 <_malloc_trim_r+0x90>)
   8235c:	460f      	mov	r7, r1
   8235e:	4604      	mov	r4, r0
   82360:	f000 fc4c 	bl	82bfc <__malloc_lock>
   82364:	68ab      	ldr	r3, [r5, #8]
   82366:	685e      	ldr	r6, [r3, #4]
   82368:	f026 0603 	bic.w	r6, r6, #3
   8236c:	1bf1      	subs	r1, r6, r7
   8236e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   82372:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82376:	f021 010f 	bic.w	r1, r1, #15
   8237a:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   8237e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   82382:	db07      	blt.n	82394 <_malloc_trim_r+0x3c>
   82384:	4620      	mov	r0, r4
   82386:	2100      	movs	r1, #0
   82388:	f000 fc3c 	bl	82c04 <_sbrk_r>
   8238c:	68ab      	ldr	r3, [r5, #8]
   8238e:	4433      	add	r3, r6
   82390:	4298      	cmp	r0, r3
   82392:	d004      	beq.n	8239e <_malloc_trim_r+0x46>
   82394:	4620      	mov	r0, r4
   82396:	f000 fc33 	bl	82c00 <__malloc_unlock>
   8239a:	2000      	movs	r0, #0
   8239c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8239e:	4620      	mov	r0, r4
   823a0:	4279      	negs	r1, r7
   823a2:	f000 fc2f 	bl	82c04 <_sbrk_r>
   823a6:	3001      	adds	r0, #1
   823a8:	d00d      	beq.n	823c6 <_malloc_trim_r+0x6e>
   823aa:	4b10      	ldr	r3, [pc, #64]	; (823ec <_malloc_trim_r+0x94>)
   823ac:	68aa      	ldr	r2, [r5, #8]
   823ae:	6819      	ldr	r1, [r3, #0]
   823b0:	1bf6      	subs	r6, r6, r7
   823b2:	f046 0601 	orr.w	r6, r6, #1
   823b6:	4620      	mov	r0, r4
   823b8:	1bc9      	subs	r1, r1, r7
   823ba:	6056      	str	r6, [r2, #4]
   823bc:	6019      	str	r1, [r3, #0]
   823be:	f000 fc1f 	bl	82c00 <__malloc_unlock>
   823c2:	2001      	movs	r0, #1
   823c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   823c6:	4620      	mov	r0, r4
   823c8:	2100      	movs	r1, #0
   823ca:	f000 fc1b 	bl	82c04 <_sbrk_r>
   823ce:	68ab      	ldr	r3, [r5, #8]
   823d0:	1ac2      	subs	r2, r0, r3
   823d2:	2a0f      	cmp	r2, #15
   823d4:	ddde      	ble.n	82394 <_malloc_trim_r+0x3c>
   823d6:	4d06      	ldr	r5, [pc, #24]	; (823f0 <_malloc_trim_r+0x98>)
   823d8:	4904      	ldr	r1, [pc, #16]	; (823ec <_malloc_trim_r+0x94>)
   823da:	682d      	ldr	r5, [r5, #0]
   823dc:	f042 0201 	orr.w	r2, r2, #1
   823e0:	1b40      	subs	r0, r0, r5
   823e2:	605a      	str	r2, [r3, #4]
   823e4:	6008      	str	r0, [r1, #0]
   823e6:	e7d5      	b.n	82394 <_malloc_trim_r+0x3c>
   823e8:	20070434 	.word	0x20070434
   823ec:	20070990 	.word	0x20070990
   823f0:	20070840 	.word	0x20070840

000823f4 <_free_r>:
   823f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   823f8:	460d      	mov	r5, r1
   823fa:	4606      	mov	r6, r0
   823fc:	2900      	cmp	r1, #0
   823fe:	d055      	beq.n	824ac <_free_r+0xb8>
   82400:	f000 fbfc 	bl	82bfc <__malloc_lock>
   82404:	f855 1c04 	ldr.w	r1, [r5, #-4]
   82408:	f8df c170 	ldr.w	ip, [pc, #368]	; 8257c <_free_r+0x188>
   8240c:	f1a5 0408 	sub.w	r4, r5, #8
   82410:	f021 0301 	bic.w	r3, r1, #1
   82414:	18e2      	adds	r2, r4, r3
   82416:	f8dc 0008 	ldr.w	r0, [ip, #8]
   8241a:	6857      	ldr	r7, [r2, #4]
   8241c:	4290      	cmp	r0, r2
   8241e:	f027 0703 	bic.w	r7, r7, #3
   82422:	d068      	beq.n	824f6 <_free_r+0x102>
   82424:	f011 0101 	ands.w	r1, r1, #1
   82428:	6057      	str	r7, [r2, #4]
   8242a:	d032      	beq.n	82492 <_free_r+0x9e>
   8242c:	2100      	movs	r1, #0
   8242e:	19d0      	adds	r0, r2, r7
   82430:	6840      	ldr	r0, [r0, #4]
   82432:	07c0      	lsls	r0, r0, #31
   82434:	d406      	bmi.n	82444 <_free_r+0x50>
   82436:	443b      	add	r3, r7
   82438:	6890      	ldr	r0, [r2, #8]
   8243a:	2900      	cmp	r1, #0
   8243c:	d04d      	beq.n	824da <_free_r+0xe6>
   8243e:	68d2      	ldr	r2, [r2, #12]
   82440:	60c2      	str	r2, [r0, #12]
   82442:	6090      	str	r0, [r2, #8]
   82444:	f043 0201 	orr.w	r2, r3, #1
   82448:	6062      	str	r2, [r4, #4]
   8244a:	50e3      	str	r3, [r4, r3]
   8244c:	b9e1      	cbnz	r1, 82488 <_free_r+0x94>
   8244e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82452:	d32d      	bcc.n	824b0 <_free_r+0xbc>
   82454:	0a5a      	lsrs	r2, r3, #9
   82456:	2a04      	cmp	r2, #4
   82458:	d869      	bhi.n	8252e <_free_r+0x13a>
   8245a:	0998      	lsrs	r0, r3, #6
   8245c:	3038      	adds	r0, #56	; 0x38
   8245e:	0041      	lsls	r1, r0, #1
   82460:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   82464:	f8dc 2008 	ldr.w	r2, [ip, #8]
   82468:	4944      	ldr	r1, [pc, #272]	; (8257c <_free_r+0x188>)
   8246a:	4562      	cmp	r2, ip
   8246c:	d065      	beq.n	8253a <_free_r+0x146>
   8246e:	6851      	ldr	r1, [r2, #4]
   82470:	f021 0103 	bic.w	r1, r1, #3
   82474:	428b      	cmp	r3, r1
   82476:	d202      	bcs.n	8247e <_free_r+0x8a>
   82478:	6892      	ldr	r2, [r2, #8]
   8247a:	4594      	cmp	ip, r2
   8247c:	d1f7      	bne.n	8246e <_free_r+0x7a>
   8247e:	68d3      	ldr	r3, [r2, #12]
   82480:	60e3      	str	r3, [r4, #12]
   82482:	60a2      	str	r2, [r4, #8]
   82484:	609c      	str	r4, [r3, #8]
   82486:	60d4      	str	r4, [r2, #12]
   82488:	4630      	mov	r0, r6
   8248a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8248e:	f000 bbb7 	b.w	82c00 <__malloc_unlock>
   82492:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82496:	f10c 0808 	add.w	r8, ip, #8
   8249a:	1b64      	subs	r4, r4, r5
   8249c:	68a0      	ldr	r0, [r4, #8]
   8249e:	442b      	add	r3, r5
   824a0:	4540      	cmp	r0, r8
   824a2:	d042      	beq.n	8252a <_free_r+0x136>
   824a4:	68e5      	ldr	r5, [r4, #12]
   824a6:	60c5      	str	r5, [r0, #12]
   824a8:	60a8      	str	r0, [r5, #8]
   824aa:	e7c0      	b.n	8242e <_free_r+0x3a>
   824ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   824b0:	08db      	lsrs	r3, r3, #3
   824b2:	109a      	asrs	r2, r3, #2
   824b4:	2001      	movs	r0, #1
   824b6:	4090      	lsls	r0, r2
   824b8:	f8dc 1004 	ldr.w	r1, [ip, #4]
   824bc:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   824c0:	689a      	ldr	r2, [r3, #8]
   824c2:	4301      	orrs	r1, r0
   824c4:	60a2      	str	r2, [r4, #8]
   824c6:	60e3      	str	r3, [r4, #12]
   824c8:	f8cc 1004 	str.w	r1, [ip, #4]
   824cc:	4630      	mov	r0, r6
   824ce:	609c      	str	r4, [r3, #8]
   824d0:	60d4      	str	r4, [r2, #12]
   824d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   824d6:	f000 bb93 	b.w	82c00 <__malloc_unlock>
   824da:	4d29      	ldr	r5, [pc, #164]	; (82580 <_free_r+0x18c>)
   824dc:	42a8      	cmp	r0, r5
   824de:	d1ae      	bne.n	8243e <_free_r+0x4a>
   824e0:	f043 0201 	orr.w	r2, r3, #1
   824e4:	f8cc 4014 	str.w	r4, [ip, #20]
   824e8:	f8cc 4010 	str.w	r4, [ip, #16]
   824ec:	60e0      	str	r0, [r4, #12]
   824ee:	60a0      	str	r0, [r4, #8]
   824f0:	6062      	str	r2, [r4, #4]
   824f2:	50e3      	str	r3, [r4, r3]
   824f4:	e7c8      	b.n	82488 <_free_r+0x94>
   824f6:	441f      	add	r7, r3
   824f8:	07cb      	lsls	r3, r1, #31
   824fa:	d407      	bmi.n	8250c <_free_r+0x118>
   824fc:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82500:	1a64      	subs	r4, r4, r1
   82502:	68e3      	ldr	r3, [r4, #12]
   82504:	68a2      	ldr	r2, [r4, #8]
   82506:	440f      	add	r7, r1
   82508:	60d3      	str	r3, [r2, #12]
   8250a:	609a      	str	r2, [r3, #8]
   8250c:	4b1d      	ldr	r3, [pc, #116]	; (82584 <_free_r+0x190>)
   8250e:	f047 0201 	orr.w	r2, r7, #1
   82512:	681b      	ldr	r3, [r3, #0]
   82514:	6062      	str	r2, [r4, #4]
   82516:	429f      	cmp	r7, r3
   82518:	f8cc 4008 	str.w	r4, [ip, #8]
   8251c:	d3b4      	bcc.n	82488 <_free_r+0x94>
   8251e:	4b1a      	ldr	r3, [pc, #104]	; (82588 <_free_r+0x194>)
   82520:	4630      	mov	r0, r6
   82522:	6819      	ldr	r1, [r3, #0]
   82524:	f7ff ff18 	bl	82358 <_malloc_trim_r>
   82528:	e7ae      	b.n	82488 <_free_r+0x94>
   8252a:	2101      	movs	r1, #1
   8252c:	e77f      	b.n	8242e <_free_r+0x3a>
   8252e:	2a14      	cmp	r2, #20
   82530:	d80b      	bhi.n	8254a <_free_r+0x156>
   82532:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   82536:	0041      	lsls	r1, r0, #1
   82538:	e792      	b.n	82460 <_free_r+0x6c>
   8253a:	1080      	asrs	r0, r0, #2
   8253c:	2501      	movs	r5, #1
   8253e:	4085      	lsls	r5, r0
   82540:	6848      	ldr	r0, [r1, #4]
   82542:	4613      	mov	r3, r2
   82544:	4328      	orrs	r0, r5
   82546:	6048      	str	r0, [r1, #4]
   82548:	e79a      	b.n	82480 <_free_r+0x8c>
   8254a:	2a54      	cmp	r2, #84	; 0x54
   8254c:	d803      	bhi.n	82556 <_free_r+0x162>
   8254e:	0b18      	lsrs	r0, r3, #12
   82550:	306e      	adds	r0, #110	; 0x6e
   82552:	0041      	lsls	r1, r0, #1
   82554:	e784      	b.n	82460 <_free_r+0x6c>
   82556:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8255a:	d803      	bhi.n	82564 <_free_r+0x170>
   8255c:	0bd8      	lsrs	r0, r3, #15
   8255e:	3077      	adds	r0, #119	; 0x77
   82560:	0041      	lsls	r1, r0, #1
   82562:	e77d      	b.n	82460 <_free_r+0x6c>
   82564:	f240 5154 	movw	r1, #1364	; 0x554
   82568:	428a      	cmp	r2, r1
   8256a:	d803      	bhi.n	82574 <_free_r+0x180>
   8256c:	0c98      	lsrs	r0, r3, #18
   8256e:	307c      	adds	r0, #124	; 0x7c
   82570:	0041      	lsls	r1, r0, #1
   82572:	e775      	b.n	82460 <_free_r+0x6c>
   82574:	21fc      	movs	r1, #252	; 0xfc
   82576:	207e      	movs	r0, #126	; 0x7e
   82578:	e772      	b.n	82460 <_free_r+0x6c>
   8257a:	bf00      	nop
   8257c:	20070434 	.word	0x20070434
   82580:	2007043c 	.word	0x2007043c
   82584:	2007083c 	.word	0x2007083c
   82588:	2007098c 	.word	0x2007098c

0008258c <_fwalk>:
   8258c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82590:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   82594:	4688      	mov	r8, r1
   82596:	d019      	beq.n	825cc <_fwalk+0x40>
   82598:	2600      	movs	r6, #0
   8259a:	687d      	ldr	r5, [r7, #4]
   8259c:	68bc      	ldr	r4, [r7, #8]
   8259e:	3d01      	subs	r5, #1
   825a0:	d40e      	bmi.n	825c0 <_fwalk+0x34>
   825a2:	89a3      	ldrh	r3, [r4, #12]
   825a4:	3d01      	subs	r5, #1
   825a6:	2b01      	cmp	r3, #1
   825a8:	d906      	bls.n	825b8 <_fwalk+0x2c>
   825aa:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   825ae:	4620      	mov	r0, r4
   825b0:	3301      	adds	r3, #1
   825b2:	d001      	beq.n	825b8 <_fwalk+0x2c>
   825b4:	47c0      	blx	r8
   825b6:	4306      	orrs	r6, r0
   825b8:	1c6b      	adds	r3, r5, #1
   825ba:	f104 0468 	add.w	r4, r4, #104	; 0x68
   825be:	d1f0      	bne.n	825a2 <_fwalk+0x16>
   825c0:	683f      	ldr	r7, [r7, #0]
   825c2:	2f00      	cmp	r7, #0
   825c4:	d1e9      	bne.n	8259a <_fwalk+0xe>
   825c6:	4630      	mov	r0, r6
   825c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   825cc:	463e      	mov	r6, r7
   825ce:	4630      	mov	r0, r6
   825d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000825d4 <__smakebuf_r>:
   825d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   825d6:	898b      	ldrh	r3, [r1, #12]
   825d8:	b091      	sub	sp, #68	; 0x44
   825da:	b29a      	uxth	r2, r3
   825dc:	0796      	lsls	r6, r2, #30
   825de:	460c      	mov	r4, r1
   825e0:	4605      	mov	r5, r0
   825e2:	d437      	bmi.n	82654 <__smakebuf_r+0x80>
   825e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   825e8:	2900      	cmp	r1, #0
   825ea:	db17      	blt.n	8261c <__smakebuf_r+0x48>
   825ec:	aa01      	add	r2, sp, #4
   825ee:	f000 fc1f 	bl	82e30 <_fstat_r>
   825f2:	2800      	cmp	r0, #0
   825f4:	db10      	blt.n	82618 <__smakebuf_r+0x44>
   825f6:	9b02      	ldr	r3, [sp, #8]
   825f8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   825fc:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   82600:	424f      	negs	r7, r1
   82602:	414f      	adcs	r7, r1
   82604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   82608:	d02c      	beq.n	82664 <__smakebuf_r+0x90>
   8260a:	89a3      	ldrh	r3, [r4, #12]
   8260c:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82610:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82614:	81a3      	strh	r3, [r4, #12]
   82616:	e00b      	b.n	82630 <__smakebuf_r+0x5c>
   82618:	89a3      	ldrh	r3, [r4, #12]
   8261a:	b29a      	uxth	r2, r3
   8261c:	f012 0f80 	tst.w	r2, #128	; 0x80
   82620:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82624:	81a3      	strh	r3, [r4, #12]
   82626:	bf14      	ite	ne
   82628:	2640      	movne	r6, #64	; 0x40
   8262a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   8262e:	2700      	movs	r7, #0
   82630:	4628      	mov	r0, r5
   82632:	4631      	mov	r1, r6
   82634:	f000 f846 	bl	826c4 <_malloc_r>
   82638:	89a3      	ldrh	r3, [r4, #12]
   8263a:	2800      	cmp	r0, #0
   8263c:	d029      	beq.n	82692 <__smakebuf_r+0xbe>
   8263e:	4a1b      	ldr	r2, [pc, #108]	; (826ac <__smakebuf_r+0xd8>)
   82640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82644:	63ea      	str	r2, [r5, #60]	; 0x3c
   82646:	81a3      	strh	r3, [r4, #12]
   82648:	6020      	str	r0, [r4, #0]
   8264a:	6120      	str	r0, [r4, #16]
   8264c:	6166      	str	r6, [r4, #20]
   8264e:	b9a7      	cbnz	r7, 8267a <__smakebuf_r+0xa6>
   82650:	b011      	add	sp, #68	; 0x44
   82652:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82654:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82658:	2201      	movs	r2, #1
   8265a:	600b      	str	r3, [r1, #0]
   8265c:	610b      	str	r3, [r1, #16]
   8265e:	614a      	str	r2, [r1, #20]
   82660:	b011      	add	sp, #68	; 0x44
   82662:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82664:	4a12      	ldr	r2, [pc, #72]	; (826b0 <__smakebuf_r+0xdc>)
   82666:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82668:	4293      	cmp	r3, r2
   8266a:	d1ce      	bne.n	8260a <__smakebuf_r+0x36>
   8266c:	89a3      	ldrh	r3, [r4, #12]
   8266e:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82672:	4333      	orrs	r3, r6
   82674:	81a3      	strh	r3, [r4, #12]
   82676:	64e6      	str	r6, [r4, #76]	; 0x4c
   82678:	e7da      	b.n	82630 <__smakebuf_r+0x5c>
   8267a:	4628      	mov	r0, r5
   8267c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82680:	f000 fbea 	bl	82e58 <_isatty_r>
   82684:	2800      	cmp	r0, #0
   82686:	d0e3      	beq.n	82650 <__smakebuf_r+0x7c>
   82688:	89a3      	ldrh	r3, [r4, #12]
   8268a:	f043 0301 	orr.w	r3, r3, #1
   8268e:	81a3      	strh	r3, [r4, #12]
   82690:	e7de      	b.n	82650 <__smakebuf_r+0x7c>
   82692:	059a      	lsls	r2, r3, #22
   82694:	d4dc      	bmi.n	82650 <__smakebuf_r+0x7c>
   82696:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8269a:	f043 0302 	orr.w	r3, r3, #2
   8269e:	2101      	movs	r1, #1
   826a0:	81a3      	strh	r3, [r4, #12]
   826a2:	6022      	str	r2, [r4, #0]
   826a4:	6122      	str	r2, [r4, #16]
   826a6:	6161      	str	r1, [r4, #20]
   826a8:	e7d2      	b.n	82650 <__smakebuf_r+0x7c>
   826aa:	bf00      	nop
   826ac:	00082221 	.word	0x00082221
   826b0:	00082c85 	.word	0x00082c85

000826b4 <malloc>:
   826b4:	4b02      	ldr	r3, [pc, #8]	; (826c0 <malloc+0xc>)
   826b6:	4601      	mov	r1, r0
   826b8:	6818      	ldr	r0, [r3, #0]
   826ba:	f000 b803 	b.w	826c4 <_malloc_r>
   826be:	bf00      	nop
   826c0:	20070430 	.word	0x20070430

000826c4 <_malloc_r>:
   826c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   826c8:	f101 050b 	add.w	r5, r1, #11
   826cc:	2d16      	cmp	r5, #22
   826ce:	b083      	sub	sp, #12
   826d0:	4606      	mov	r6, r0
   826d2:	d927      	bls.n	82724 <_malloc_r+0x60>
   826d4:	f035 0507 	bics.w	r5, r5, #7
   826d8:	d427      	bmi.n	8272a <_malloc_r+0x66>
   826da:	42a9      	cmp	r1, r5
   826dc:	d825      	bhi.n	8272a <_malloc_r+0x66>
   826de:	4630      	mov	r0, r6
   826e0:	f000 fa8c 	bl	82bfc <__malloc_lock>
   826e4:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   826e8:	d226      	bcs.n	82738 <_malloc_r+0x74>
   826ea:	4fc1      	ldr	r7, [pc, #772]	; (829f0 <_malloc_r+0x32c>)
   826ec:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   826f0:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   826f4:	68dc      	ldr	r4, [r3, #12]
   826f6:	429c      	cmp	r4, r3
   826f8:	f000 81d2 	beq.w	82aa0 <_malloc_r+0x3dc>
   826fc:	6863      	ldr	r3, [r4, #4]
   826fe:	68e2      	ldr	r2, [r4, #12]
   82700:	f023 0303 	bic.w	r3, r3, #3
   82704:	4423      	add	r3, r4
   82706:	6858      	ldr	r0, [r3, #4]
   82708:	68a1      	ldr	r1, [r4, #8]
   8270a:	f040 0501 	orr.w	r5, r0, #1
   8270e:	60ca      	str	r2, [r1, #12]
   82710:	4630      	mov	r0, r6
   82712:	6091      	str	r1, [r2, #8]
   82714:	605d      	str	r5, [r3, #4]
   82716:	f000 fa73 	bl	82c00 <__malloc_unlock>
   8271a:	3408      	adds	r4, #8
   8271c:	4620      	mov	r0, r4
   8271e:	b003      	add	sp, #12
   82720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82724:	2510      	movs	r5, #16
   82726:	42a9      	cmp	r1, r5
   82728:	d9d9      	bls.n	826de <_malloc_r+0x1a>
   8272a:	2400      	movs	r4, #0
   8272c:	230c      	movs	r3, #12
   8272e:	4620      	mov	r0, r4
   82730:	6033      	str	r3, [r6, #0]
   82732:	b003      	add	sp, #12
   82734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82738:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   8273c:	f000 8089 	beq.w	82852 <_malloc_r+0x18e>
   82740:	f1bc 0f04 	cmp.w	ip, #4
   82744:	f200 8160 	bhi.w	82a08 <_malloc_r+0x344>
   82748:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   8274c:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   82750:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82754:	4fa6      	ldr	r7, [pc, #664]	; (829f0 <_malloc_r+0x32c>)
   82756:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   8275a:	68cc      	ldr	r4, [r1, #12]
   8275c:	42a1      	cmp	r1, r4
   8275e:	d105      	bne.n	8276c <_malloc_r+0xa8>
   82760:	e00c      	b.n	8277c <_malloc_r+0xb8>
   82762:	2b00      	cmp	r3, #0
   82764:	da79      	bge.n	8285a <_malloc_r+0x196>
   82766:	68e4      	ldr	r4, [r4, #12]
   82768:	42a1      	cmp	r1, r4
   8276a:	d007      	beq.n	8277c <_malloc_r+0xb8>
   8276c:	6862      	ldr	r2, [r4, #4]
   8276e:	f022 0203 	bic.w	r2, r2, #3
   82772:	1b53      	subs	r3, r2, r5
   82774:	2b0f      	cmp	r3, #15
   82776:	ddf4      	ble.n	82762 <_malloc_r+0x9e>
   82778:	f10c 3cff 	add.w	ip, ip, #4294967295
   8277c:	f10c 0c01 	add.w	ip, ip, #1
   82780:	4b9b      	ldr	r3, [pc, #620]	; (829f0 <_malloc_r+0x32c>)
   82782:	693c      	ldr	r4, [r7, #16]
   82784:	f103 0e08 	add.w	lr, r3, #8
   82788:	4574      	cmp	r4, lr
   8278a:	f000 817e 	beq.w	82a8a <_malloc_r+0x3c6>
   8278e:	6861      	ldr	r1, [r4, #4]
   82790:	f021 0103 	bic.w	r1, r1, #3
   82794:	1b4a      	subs	r2, r1, r5
   82796:	2a0f      	cmp	r2, #15
   82798:	f300 8164 	bgt.w	82a64 <_malloc_r+0x3a0>
   8279c:	2a00      	cmp	r2, #0
   8279e:	f8c3 e014 	str.w	lr, [r3, #20]
   827a2:	f8c3 e010 	str.w	lr, [r3, #16]
   827a6:	da69      	bge.n	8287c <_malloc_r+0x1b8>
   827a8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   827ac:	f080 813a 	bcs.w	82a24 <_malloc_r+0x360>
   827b0:	08c9      	lsrs	r1, r1, #3
   827b2:	108a      	asrs	r2, r1, #2
   827b4:	f04f 0801 	mov.w	r8, #1
   827b8:	fa08 f802 	lsl.w	r8, r8, r2
   827bc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   827c0:	685a      	ldr	r2, [r3, #4]
   827c2:	6888      	ldr	r0, [r1, #8]
   827c4:	ea48 0202 	orr.w	r2, r8, r2
   827c8:	60a0      	str	r0, [r4, #8]
   827ca:	60e1      	str	r1, [r4, #12]
   827cc:	605a      	str	r2, [r3, #4]
   827ce:	608c      	str	r4, [r1, #8]
   827d0:	60c4      	str	r4, [r0, #12]
   827d2:	ea4f 03ac 	mov.w	r3, ip, asr #2
   827d6:	2001      	movs	r0, #1
   827d8:	4098      	lsls	r0, r3
   827da:	4290      	cmp	r0, r2
   827dc:	d85b      	bhi.n	82896 <_malloc_r+0x1d2>
   827de:	4202      	tst	r2, r0
   827e0:	d106      	bne.n	827f0 <_malloc_r+0x12c>
   827e2:	f02c 0c03 	bic.w	ip, ip, #3
   827e6:	0040      	lsls	r0, r0, #1
   827e8:	4202      	tst	r2, r0
   827ea:	f10c 0c04 	add.w	ip, ip, #4
   827ee:	d0fa      	beq.n	827e6 <_malloc_r+0x122>
   827f0:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   827f4:	4644      	mov	r4, r8
   827f6:	46e1      	mov	r9, ip
   827f8:	68e3      	ldr	r3, [r4, #12]
   827fa:	429c      	cmp	r4, r3
   827fc:	d107      	bne.n	8280e <_malloc_r+0x14a>
   827fe:	e146      	b.n	82a8e <_malloc_r+0x3ca>
   82800:	2a00      	cmp	r2, #0
   82802:	f280 8157 	bge.w	82ab4 <_malloc_r+0x3f0>
   82806:	68db      	ldr	r3, [r3, #12]
   82808:	429c      	cmp	r4, r3
   8280a:	f000 8140 	beq.w	82a8e <_malloc_r+0x3ca>
   8280e:	6859      	ldr	r1, [r3, #4]
   82810:	f021 0103 	bic.w	r1, r1, #3
   82814:	1b4a      	subs	r2, r1, r5
   82816:	2a0f      	cmp	r2, #15
   82818:	ddf2      	ble.n	82800 <_malloc_r+0x13c>
   8281a:	461c      	mov	r4, r3
   8281c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82820:	68d9      	ldr	r1, [r3, #12]
   82822:	f045 0901 	orr.w	r9, r5, #1
   82826:	f042 0801 	orr.w	r8, r2, #1
   8282a:	441d      	add	r5, r3
   8282c:	f8c3 9004 	str.w	r9, [r3, #4]
   82830:	4630      	mov	r0, r6
   82832:	f8cc 100c 	str.w	r1, [ip, #12]
   82836:	f8c1 c008 	str.w	ip, [r1, #8]
   8283a:	617d      	str	r5, [r7, #20]
   8283c:	613d      	str	r5, [r7, #16]
   8283e:	f8c5 e00c 	str.w	lr, [r5, #12]
   82842:	f8c5 e008 	str.w	lr, [r5, #8]
   82846:	f8c5 8004 	str.w	r8, [r5, #4]
   8284a:	50aa      	str	r2, [r5, r2]
   8284c:	f000 f9d8 	bl	82c00 <__malloc_unlock>
   82850:	e764      	b.n	8271c <_malloc_r+0x58>
   82852:	217e      	movs	r1, #126	; 0x7e
   82854:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   82858:	e77c      	b.n	82754 <_malloc_r+0x90>
   8285a:	4422      	add	r2, r4
   8285c:	6850      	ldr	r0, [r2, #4]
   8285e:	68e3      	ldr	r3, [r4, #12]
   82860:	68a1      	ldr	r1, [r4, #8]
   82862:	f040 0501 	orr.w	r5, r0, #1
   82866:	60cb      	str	r3, [r1, #12]
   82868:	4630      	mov	r0, r6
   8286a:	6099      	str	r1, [r3, #8]
   8286c:	6055      	str	r5, [r2, #4]
   8286e:	f000 f9c7 	bl	82c00 <__malloc_unlock>
   82872:	3408      	adds	r4, #8
   82874:	4620      	mov	r0, r4
   82876:	b003      	add	sp, #12
   82878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8287c:	4421      	add	r1, r4
   8287e:	684b      	ldr	r3, [r1, #4]
   82880:	4630      	mov	r0, r6
   82882:	f043 0301 	orr.w	r3, r3, #1
   82886:	604b      	str	r3, [r1, #4]
   82888:	f000 f9ba 	bl	82c00 <__malloc_unlock>
   8288c:	3408      	adds	r4, #8
   8288e:	4620      	mov	r0, r4
   82890:	b003      	add	sp, #12
   82892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82896:	68bc      	ldr	r4, [r7, #8]
   82898:	6863      	ldr	r3, [r4, #4]
   8289a:	f023 0903 	bic.w	r9, r3, #3
   8289e:	45a9      	cmp	r9, r5
   828a0:	d304      	bcc.n	828ac <_malloc_r+0x1e8>
   828a2:	ebc5 0309 	rsb	r3, r5, r9
   828a6:	2b0f      	cmp	r3, #15
   828a8:	f300 8091 	bgt.w	829ce <_malloc_r+0x30a>
   828ac:	4b51      	ldr	r3, [pc, #324]	; (829f4 <_malloc_r+0x330>)
   828ae:	4a52      	ldr	r2, [pc, #328]	; (829f8 <_malloc_r+0x334>)
   828b0:	6819      	ldr	r1, [r3, #0]
   828b2:	6813      	ldr	r3, [r2, #0]
   828b4:	eb05 0a01 	add.w	sl, r5, r1
   828b8:	3301      	adds	r3, #1
   828ba:	eb04 0b09 	add.w	fp, r4, r9
   828be:	f000 8161 	beq.w	82b84 <_malloc_r+0x4c0>
   828c2:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   828c6:	f10a 0a0f 	add.w	sl, sl, #15
   828ca:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   828ce:	f02a 0a0f 	bic.w	sl, sl, #15
   828d2:	4630      	mov	r0, r6
   828d4:	4651      	mov	r1, sl
   828d6:	9201      	str	r2, [sp, #4]
   828d8:	f000 f994 	bl	82c04 <_sbrk_r>
   828dc:	f1b0 3fff 	cmp.w	r0, #4294967295
   828e0:	4680      	mov	r8, r0
   828e2:	9a01      	ldr	r2, [sp, #4]
   828e4:	f000 8101 	beq.w	82aea <_malloc_r+0x426>
   828e8:	4583      	cmp	fp, r0
   828ea:	f200 80fb 	bhi.w	82ae4 <_malloc_r+0x420>
   828ee:	f8df c114 	ldr.w	ip, [pc, #276]	; 82a04 <_malloc_r+0x340>
   828f2:	45c3      	cmp	fp, r8
   828f4:	f8dc 3000 	ldr.w	r3, [ip]
   828f8:	4453      	add	r3, sl
   828fa:	f8cc 3000 	str.w	r3, [ip]
   828fe:	f000 814a 	beq.w	82b96 <_malloc_r+0x4d2>
   82902:	6812      	ldr	r2, [r2, #0]
   82904:	493c      	ldr	r1, [pc, #240]	; (829f8 <_malloc_r+0x334>)
   82906:	3201      	adds	r2, #1
   82908:	bf1b      	ittet	ne
   8290a:	ebcb 0b08 	rsbne	fp, fp, r8
   8290e:	445b      	addne	r3, fp
   82910:	f8c1 8000 	streq.w	r8, [r1]
   82914:	f8cc 3000 	strne.w	r3, [ip]
   82918:	f018 0307 	ands.w	r3, r8, #7
   8291c:	f000 8114 	beq.w	82b48 <_malloc_r+0x484>
   82920:	f1c3 0208 	rsb	r2, r3, #8
   82924:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   82928:	4490      	add	r8, r2
   8292a:	3308      	adds	r3, #8
   8292c:	44c2      	add	sl, r8
   8292e:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   82932:	ebca 0a03 	rsb	sl, sl, r3
   82936:	4651      	mov	r1, sl
   82938:	4630      	mov	r0, r6
   8293a:	f8cd c004 	str.w	ip, [sp, #4]
   8293e:	f000 f961 	bl	82c04 <_sbrk_r>
   82942:	1c43      	adds	r3, r0, #1
   82944:	f8dd c004 	ldr.w	ip, [sp, #4]
   82948:	f000 8135 	beq.w	82bb6 <_malloc_r+0x4f2>
   8294c:	ebc8 0200 	rsb	r2, r8, r0
   82950:	4452      	add	r2, sl
   82952:	f042 0201 	orr.w	r2, r2, #1
   82956:	f8dc 3000 	ldr.w	r3, [ip]
   8295a:	42bc      	cmp	r4, r7
   8295c:	4453      	add	r3, sl
   8295e:	f8c7 8008 	str.w	r8, [r7, #8]
   82962:	f8cc 3000 	str.w	r3, [ip]
   82966:	f8c8 2004 	str.w	r2, [r8, #4]
   8296a:	f8df a098 	ldr.w	sl, [pc, #152]	; 82a04 <_malloc_r+0x340>
   8296e:	d015      	beq.n	8299c <_malloc_r+0x2d8>
   82970:	f1b9 0f0f 	cmp.w	r9, #15
   82974:	f240 80eb 	bls.w	82b4e <_malloc_r+0x48a>
   82978:	6861      	ldr	r1, [r4, #4]
   8297a:	f1a9 020c 	sub.w	r2, r9, #12
   8297e:	f022 0207 	bic.w	r2, r2, #7
   82982:	f001 0101 	and.w	r1, r1, #1
   82986:	ea42 0e01 	orr.w	lr, r2, r1
   8298a:	2005      	movs	r0, #5
   8298c:	18a1      	adds	r1, r4, r2
   8298e:	2a0f      	cmp	r2, #15
   82990:	f8c4 e004 	str.w	lr, [r4, #4]
   82994:	6048      	str	r0, [r1, #4]
   82996:	6088      	str	r0, [r1, #8]
   82998:	f200 8111 	bhi.w	82bbe <_malloc_r+0x4fa>
   8299c:	4a17      	ldr	r2, [pc, #92]	; (829fc <_malloc_r+0x338>)
   8299e:	68bc      	ldr	r4, [r7, #8]
   829a0:	6811      	ldr	r1, [r2, #0]
   829a2:	428b      	cmp	r3, r1
   829a4:	bf88      	it	hi
   829a6:	6013      	strhi	r3, [r2, #0]
   829a8:	4a15      	ldr	r2, [pc, #84]	; (82a00 <_malloc_r+0x33c>)
   829aa:	6811      	ldr	r1, [r2, #0]
   829ac:	428b      	cmp	r3, r1
   829ae:	bf88      	it	hi
   829b0:	6013      	strhi	r3, [r2, #0]
   829b2:	6862      	ldr	r2, [r4, #4]
   829b4:	f022 0203 	bic.w	r2, r2, #3
   829b8:	4295      	cmp	r5, r2
   829ba:	ebc5 0302 	rsb	r3, r5, r2
   829be:	d801      	bhi.n	829c4 <_malloc_r+0x300>
   829c0:	2b0f      	cmp	r3, #15
   829c2:	dc04      	bgt.n	829ce <_malloc_r+0x30a>
   829c4:	4630      	mov	r0, r6
   829c6:	f000 f91b 	bl	82c00 <__malloc_unlock>
   829ca:	2400      	movs	r4, #0
   829cc:	e6a6      	b.n	8271c <_malloc_r+0x58>
   829ce:	f045 0201 	orr.w	r2, r5, #1
   829d2:	f043 0301 	orr.w	r3, r3, #1
   829d6:	4425      	add	r5, r4
   829d8:	6062      	str	r2, [r4, #4]
   829da:	4630      	mov	r0, r6
   829dc:	60bd      	str	r5, [r7, #8]
   829de:	606b      	str	r3, [r5, #4]
   829e0:	f000 f90e 	bl	82c00 <__malloc_unlock>
   829e4:	3408      	adds	r4, #8
   829e6:	4620      	mov	r0, r4
   829e8:	b003      	add	sp, #12
   829ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   829ee:	bf00      	nop
   829f0:	20070434 	.word	0x20070434
   829f4:	2007098c 	.word	0x2007098c
   829f8:	20070840 	.word	0x20070840
   829fc:	20070988 	.word	0x20070988
   82a00:	20070984 	.word	0x20070984
   82a04:	20070990 	.word	0x20070990
   82a08:	f1bc 0f14 	cmp.w	ip, #20
   82a0c:	d961      	bls.n	82ad2 <_malloc_r+0x40e>
   82a0e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   82a12:	f200 808f 	bhi.w	82b34 <_malloc_r+0x470>
   82a16:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   82a1a:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   82a1e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82a22:	e697      	b.n	82754 <_malloc_r+0x90>
   82a24:	0a4b      	lsrs	r3, r1, #9
   82a26:	2b04      	cmp	r3, #4
   82a28:	d958      	bls.n	82adc <_malloc_r+0x418>
   82a2a:	2b14      	cmp	r3, #20
   82a2c:	f200 80ad 	bhi.w	82b8a <_malloc_r+0x4c6>
   82a30:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   82a34:	0050      	lsls	r0, r2, #1
   82a36:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   82a3a:	6883      	ldr	r3, [r0, #8]
   82a3c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 82bf8 <_malloc_r+0x534>
   82a40:	4283      	cmp	r3, r0
   82a42:	f000 808a 	beq.w	82b5a <_malloc_r+0x496>
   82a46:	685a      	ldr	r2, [r3, #4]
   82a48:	f022 0203 	bic.w	r2, r2, #3
   82a4c:	4291      	cmp	r1, r2
   82a4e:	d202      	bcs.n	82a56 <_malloc_r+0x392>
   82a50:	689b      	ldr	r3, [r3, #8]
   82a52:	4298      	cmp	r0, r3
   82a54:	d1f7      	bne.n	82a46 <_malloc_r+0x382>
   82a56:	68d9      	ldr	r1, [r3, #12]
   82a58:	687a      	ldr	r2, [r7, #4]
   82a5a:	60e1      	str	r1, [r4, #12]
   82a5c:	60a3      	str	r3, [r4, #8]
   82a5e:	608c      	str	r4, [r1, #8]
   82a60:	60dc      	str	r4, [r3, #12]
   82a62:	e6b6      	b.n	827d2 <_malloc_r+0x10e>
   82a64:	f045 0701 	orr.w	r7, r5, #1
   82a68:	f042 0101 	orr.w	r1, r2, #1
   82a6c:	4425      	add	r5, r4
   82a6e:	6067      	str	r7, [r4, #4]
   82a70:	4630      	mov	r0, r6
   82a72:	615d      	str	r5, [r3, #20]
   82a74:	611d      	str	r5, [r3, #16]
   82a76:	f8c5 e00c 	str.w	lr, [r5, #12]
   82a7a:	f8c5 e008 	str.w	lr, [r5, #8]
   82a7e:	6069      	str	r1, [r5, #4]
   82a80:	50aa      	str	r2, [r5, r2]
   82a82:	3408      	adds	r4, #8
   82a84:	f000 f8bc 	bl	82c00 <__malloc_unlock>
   82a88:	e648      	b.n	8271c <_malloc_r+0x58>
   82a8a:	685a      	ldr	r2, [r3, #4]
   82a8c:	e6a1      	b.n	827d2 <_malloc_r+0x10e>
   82a8e:	f109 0901 	add.w	r9, r9, #1
   82a92:	f019 0f03 	tst.w	r9, #3
   82a96:	f104 0408 	add.w	r4, r4, #8
   82a9a:	f47f aead 	bne.w	827f8 <_malloc_r+0x134>
   82a9e:	e02d      	b.n	82afc <_malloc_r+0x438>
   82aa0:	f104 0308 	add.w	r3, r4, #8
   82aa4:	6964      	ldr	r4, [r4, #20]
   82aa6:	42a3      	cmp	r3, r4
   82aa8:	bf08      	it	eq
   82aaa:	f10c 0c02 	addeq.w	ip, ip, #2
   82aae:	f43f ae67 	beq.w	82780 <_malloc_r+0xbc>
   82ab2:	e623      	b.n	826fc <_malloc_r+0x38>
   82ab4:	4419      	add	r1, r3
   82ab6:	6848      	ldr	r0, [r1, #4]
   82ab8:	461c      	mov	r4, r3
   82aba:	f854 2f08 	ldr.w	r2, [r4, #8]!
   82abe:	68db      	ldr	r3, [r3, #12]
   82ac0:	f040 0501 	orr.w	r5, r0, #1
   82ac4:	604d      	str	r5, [r1, #4]
   82ac6:	4630      	mov	r0, r6
   82ac8:	60d3      	str	r3, [r2, #12]
   82aca:	609a      	str	r2, [r3, #8]
   82acc:	f000 f898 	bl	82c00 <__malloc_unlock>
   82ad0:	e624      	b.n	8271c <_malloc_r+0x58>
   82ad2:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   82ad6:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82ada:	e63b      	b.n	82754 <_malloc_r+0x90>
   82adc:	098a      	lsrs	r2, r1, #6
   82ade:	3238      	adds	r2, #56	; 0x38
   82ae0:	0050      	lsls	r0, r2, #1
   82ae2:	e7a8      	b.n	82a36 <_malloc_r+0x372>
   82ae4:	42bc      	cmp	r4, r7
   82ae6:	f43f af02 	beq.w	828ee <_malloc_r+0x22a>
   82aea:	68bc      	ldr	r4, [r7, #8]
   82aec:	6862      	ldr	r2, [r4, #4]
   82aee:	f022 0203 	bic.w	r2, r2, #3
   82af2:	e761      	b.n	829b8 <_malloc_r+0x2f4>
   82af4:	f8d8 8000 	ldr.w	r8, [r8]
   82af8:	4598      	cmp	r8, r3
   82afa:	d17a      	bne.n	82bf2 <_malloc_r+0x52e>
   82afc:	f01c 0f03 	tst.w	ip, #3
   82b00:	f1a8 0308 	sub.w	r3, r8, #8
   82b04:	f10c 3cff 	add.w	ip, ip, #4294967295
   82b08:	d1f4      	bne.n	82af4 <_malloc_r+0x430>
   82b0a:	687b      	ldr	r3, [r7, #4]
   82b0c:	ea23 0300 	bic.w	r3, r3, r0
   82b10:	607b      	str	r3, [r7, #4]
   82b12:	0040      	lsls	r0, r0, #1
   82b14:	4298      	cmp	r0, r3
   82b16:	f63f aebe 	bhi.w	82896 <_malloc_r+0x1d2>
   82b1a:	2800      	cmp	r0, #0
   82b1c:	f43f aebb 	beq.w	82896 <_malloc_r+0x1d2>
   82b20:	4203      	tst	r3, r0
   82b22:	46cc      	mov	ip, r9
   82b24:	f47f ae64 	bne.w	827f0 <_malloc_r+0x12c>
   82b28:	0040      	lsls	r0, r0, #1
   82b2a:	4203      	tst	r3, r0
   82b2c:	f10c 0c04 	add.w	ip, ip, #4
   82b30:	d0fa      	beq.n	82b28 <_malloc_r+0x464>
   82b32:	e65d      	b.n	827f0 <_malloc_r+0x12c>
   82b34:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   82b38:	d819      	bhi.n	82b6e <_malloc_r+0x4aa>
   82b3a:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   82b3e:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   82b42:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82b46:	e605      	b.n	82754 <_malloc_r+0x90>
   82b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82b4c:	e6ee      	b.n	8292c <_malloc_r+0x268>
   82b4e:	2301      	movs	r3, #1
   82b50:	f8c8 3004 	str.w	r3, [r8, #4]
   82b54:	4644      	mov	r4, r8
   82b56:	2200      	movs	r2, #0
   82b58:	e72e      	b.n	829b8 <_malloc_r+0x2f4>
   82b5a:	1092      	asrs	r2, r2, #2
   82b5c:	2001      	movs	r0, #1
   82b5e:	4090      	lsls	r0, r2
   82b60:	f8d8 2004 	ldr.w	r2, [r8, #4]
   82b64:	4619      	mov	r1, r3
   82b66:	4302      	orrs	r2, r0
   82b68:	f8c8 2004 	str.w	r2, [r8, #4]
   82b6c:	e775      	b.n	82a5a <_malloc_r+0x396>
   82b6e:	f240 5354 	movw	r3, #1364	; 0x554
   82b72:	459c      	cmp	ip, r3
   82b74:	d81b      	bhi.n	82bae <_malloc_r+0x4ea>
   82b76:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   82b7a:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   82b7e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82b82:	e5e7      	b.n	82754 <_malloc_r+0x90>
   82b84:	f10a 0a10 	add.w	sl, sl, #16
   82b88:	e6a3      	b.n	828d2 <_malloc_r+0x20e>
   82b8a:	2b54      	cmp	r3, #84	; 0x54
   82b8c:	d81f      	bhi.n	82bce <_malloc_r+0x50a>
   82b8e:	0b0a      	lsrs	r2, r1, #12
   82b90:	326e      	adds	r2, #110	; 0x6e
   82b92:	0050      	lsls	r0, r2, #1
   82b94:	e74f      	b.n	82a36 <_malloc_r+0x372>
   82b96:	f3cb 010b 	ubfx	r1, fp, #0, #12
   82b9a:	2900      	cmp	r1, #0
   82b9c:	f47f aeb1 	bne.w	82902 <_malloc_r+0x23e>
   82ba0:	eb0a 0109 	add.w	r1, sl, r9
   82ba4:	68ba      	ldr	r2, [r7, #8]
   82ba6:	f041 0101 	orr.w	r1, r1, #1
   82baa:	6051      	str	r1, [r2, #4]
   82bac:	e6f6      	b.n	8299c <_malloc_r+0x2d8>
   82bae:	21fc      	movs	r1, #252	; 0xfc
   82bb0:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   82bb4:	e5ce      	b.n	82754 <_malloc_r+0x90>
   82bb6:	2201      	movs	r2, #1
   82bb8:	f04f 0a00 	mov.w	sl, #0
   82bbc:	e6cb      	b.n	82956 <_malloc_r+0x292>
   82bbe:	f104 0108 	add.w	r1, r4, #8
   82bc2:	4630      	mov	r0, r6
   82bc4:	f7ff fc16 	bl	823f4 <_free_r>
   82bc8:	f8da 3000 	ldr.w	r3, [sl]
   82bcc:	e6e6      	b.n	8299c <_malloc_r+0x2d8>
   82bce:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82bd2:	d803      	bhi.n	82bdc <_malloc_r+0x518>
   82bd4:	0bca      	lsrs	r2, r1, #15
   82bd6:	3277      	adds	r2, #119	; 0x77
   82bd8:	0050      	lsls	r0, r2, #1
   82bda:	e72c      	b.n	82a36 <_malloc_r+0x372>
   82bdc:	f240 5254 	movw	r2, #1364	; 0x554
   82be0:	4293      	cmp	r3, r2
   82be2:	d803      	bhi.n	82bec <_malloc_r+0x528>
   82be4:	0c8a      	lsrs	r2, r1, #18
   82be6:	327c      	adds	r2, #124	; 0x7c
   82be8:	0050      	lsls	r0, r2, #1
   82bea:	e724      	b.n	82a36 <_malloc_r+0x372>
   82bec:	20fc      	movs	r0, #252	; 0xfc
   82bee:	227e      	movs	r2, #126	; 0x7e
   82bf0:	e721      	b.n	82a36 <_malloc_r+0x372>
   82bf2:	687b      	ldr	r3, [r7, #4]
   82bf4:	e78d      	b.n	82b12 <_malloc_r+0x44e>
   82bf6:	bf00      	nop
   82bf8:	20070434 	.word	0x20070434

00082bfc <__malloc_lock>:
   82bfc:	4770      	bx	lr
   82bfe:	bf00      	nop

00082c00 <__malloc_unlock>:
   82c00:	4770      	bx	lr
   82c02:	bf00      	nop

00082c04 <_sbrk_r>:
   82c04:	b538      	push	{r3, r4, r5, lr}
   82c06:	4c07      	ldr	r4, [pc, #28]	; (82c24 <_sbrk_r+0x20>)
   82c08:	2300      	movs	r3, #0
   82c0a:	4605      	mov	r5, r0
   82c0c:	4608      	mov	r0, r1
   82c0e:	6023      	str	r3, [r4, #0]
   82c10:	f7ff f856 	bl	81cc0 <_sbrk>
   82c14:	1c43      	adds	r3, r0, #1
   82c16:	d000      	beq.n	82c1a <_sbrk_r+0x16>
   82c18:	bd38      	pop	{r3, r4, r5, pc}
   82c1a:	6823      	ldr	r3, [r4, #0]
   82c1c:	2b00      	cmp	r3, #0
   82c1e:	d0fb      	beq.n	82c18 <_sbrk_r+0x14>
   82c20:	602b      	str	r3, [r5, #0]
   82c22:	bd38      	pop	{r3, r4, r5, pc}
   82c24:	20070a40 	.word	0x20070a40

00082c28 <__sread>:
   82c28:	b510      	push	{r4, lr}
   82c2a:	460c      	mov	r4, r1
   82c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82c30:	f000 f938 	bl	82ea4 <_read_r>
   82c34:	2800      	cmp	r0, #0
   82c36:	db03      	blt.n	82c40 <__sread+0x18>
   82c38:	6d23      	ldr	r3, [r4, #80]	; 0x50
   82c3a:	4403      	add	r3, r0
   82c3c:	6523      	str	r3, [r4, #80]	; 0x50
   82c3e:	bd10      	pop	{r4, pc}
   82c40:	89a3      	ldrh	r3, [r4, #12]
   82c42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   82c46:	81a3      	strh	r3, [r4, #12]
   82c48:	bd10      	pop	{r4, pc}
   82c4a:	bf00      	nop

00082c4c <__swrite>:
   82c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82c50:	460c      	mov	r4, r1
   82c52:	8989      	ldrh	r1, [r1, #12]
   82c54:	461d      	mov	r5, r3
   82c56:	05cb      	lsls	r3, r1, #23
   82c58:	4616      	mov	r6, r2
   82c5a:	4607      	mov	r7, r0
   82c5c:	d506      	bpl.n	82c6c <__swrite+0x20>
   82c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82c62:	2200      	movs	r2, #0
   82c64:	2302      	movs	r3, #2
   82c66:	f000 f909 	bl	82e7c <_lseek_r>
   82c6a:	89a1      	ldrh	r1, [r4, #12]
   82c6c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   82c70:	81a1      	strh	r1, [r4, #12]
   82c72:	4638      	mov	r0, r7
   82c74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82c78:	4632      	mov	r2, r6
   82c7a:	462b      	mov	r3, r5
   82c7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82c80:	f000 b814 	b.w	82cac <_write_r>

00082c84 <__sseek>:
   82c84:	b510      	push	{r4, lr}
   82c86:	460c      	mov	r4, r1
   82c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82c8c:	f000 f8f6 	bl	82e7c <_lseek_r>
   82c90:	89a3      	ldrh	r3, [r4, #12]
   82c92:	1c42      	adds	r2, r0, #1
   82c94:	bf0e      	itee	eq
   82c96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   82c9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   82c9e:	6520      	strne	r0, [r4, #80]	; 0x50
   82ca0:	81a3      	strh	r3, [r4, #12]
   82ca2:	bd10      	pop	{r4, pc}

00082ca4 <__sclose>:
   82ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82ca8:	f000 b868 	b.w	82d7c <_close_r>

00082cac <_write_r>:
   82cac:	b570      	push	{r4, r5, r6, lr}
   82cae:	4c08      	ldr	r4, [pc, #32]	; (82cd0 <_write_r+0x24>)
   82cb0:	4606      	mov	r6, r0
   82cb2:	2500      	movs	r5, #0
   82cb4:	4608      	mov	r0, r1
   82cb6:	4611      	mov	r1, r2
   82cb8:	461a      	mov	r2, r3
   82cba:	6025      	str	r5, [r4, #0]
   82cbc:	f7fd fbe6 	bl	8048c <_write>
   82cc0:	1c43      	adds	r3, r0, #1
   82cc2:	d000      	beq.n	82cc6 <_write_r+0x1a>
   82cc4:	bd70      	pop	{r4, r5, r6, pc}
   82cc6:	6823      	ldr	r3, [r4, #0]
   82cc8:	2b00      	cmp	r3, #0
   82cca:	d0fb      	beq.n	82cc4 <_write_r+0x18>
   82ccc:	6033      	str	r3, [r6, #0]
   82cce:	bd70      	pop	{r4, r5, r6, pc}
   82cd0:	20070a40 	.word	0x20070a40

00082cd4 <__register_exitproc>:
   82cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   82cd6:	4c27      	ldr	r4, [pc, #156]	; (82d74 <__register_exitproc+0xa0>)
   82cd8:	b085      	sub	sp, #20
   82cda:	6826      	ldr	r6, [r4, #0]
   82cdc:	4607      	mov	r7, r0
   82cde:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   82ce2:	2c00      	cmp	r4, #0
   82ce4:	d040      	beq.n	82d68 <__register_exitproc+0x94>
   82ce6:	6865      	ldr	r5, [r4, #4]
   82ce8:	2d1f      	cmp	r5, #31
   82cea:	dd1e      	ble.n	82d2a <__register_exitproc+0x56>
   82cec:	4822      	ldr	r0, [pc, #136]	; (82d78 <__register_exitproc+0xa4>)
   82cee:	b918      	cbnz	r0, 82cf8 <__register_exitproc+0x24>
   82cf0:	f04f 30ff 	mov.w	r0, #4294967295
   82cf4:	b005      	add	sp, #20
   82cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82cf8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   82cfc:	9103      	str	r1, [sp, #12]
   82cfe:	9202      	str	r2, [sp, #8]
   82d00:	9301      	str	r3, [sp, #4]
   82d02:	f7ff fcd7 	bl	826b4 <malloc>
   82d06:	9903      	ldr	r1, [sp, #12]
   82d08:	4604      	mov	r4, r0
   82d0a:	9a02      	ldr	r2, [sp, #8]
   82d0c:	9b01      	ldr	r3, [sp, #4]
   82d0e:	2800      	cmp	r0, #0
   82d10:	d0ee      	beq.n	82cf0 <__register_exitproc+0x1c>
   82d12:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   82d16:	2000      	movs	r0, #0
   82d18:	6025      	str	r5, [r4, #0]
   82d1a:	6060      	str	r0, [r4, #4]
   82d1c:	4605      	mov	r5, r0
   82d1e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   82d22:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   82d26:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   82d2a:	b93f      	cbnz	r7, 82d3c <__register_exitproc+0x68>
   82d2c:	1c6b      	adds	r3, r5, #1
   82d2e:	2000      	movs	r0, #0
   82d30:	3502      	adds	r5, #2
   82d32:	6063      	str	r3, [r4, #4]
   82d34:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   82d38:	b005      	add	sp, #20
   82d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82d3c:	2601      	movs	r6, #1
   82d3e:	40ae      	lsls	r6, r5
   82d40:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   82d44:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   82d48:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   82d4c:	2f02      	cmp	r7, #2
   82d4e:	ea42 0206 	orr.w	r2, r2, r6
   82d52:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   82d56:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   82d5a:	d1e7      	bne.n	82d2c <__register_exitproc+0x58>
   82d5c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   82d60:	431e      	orrs	r6, r3
   82d62:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   82d66:	e7e1      	b.n	82d2c <__register_exitproc+0x58>
   82d68:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   82d6c:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   82d70:	e7b9      	b.n	82ce6 <__register_exitproc+0x12>
   82d72:	bf00      	nop
   82d74:	00082fa0 	.word	0x00082fa0
   82d78:	000826b5 	.word	0x000826b5

00082d7c <_close_r>:
   82d7c:	b538      	push	{r3, r4, r5, lr}
   82d7e:	4c07      	ldr	r4, [pc, #28]	; (82d9c <_close_r+0x20>)
   82d80:	2300      	movs	r3, #0
   82d82:	4605      	mov	r5, r0
   82d84:	4608      	mov	r0, r1
   82d86:	6023      	str	r3, [r4, #0]
   82d88:	f7fe ffb4 	bl	81cf4 <_close>
   82d8c:	1c43      	adds	r3, r0, #1
   82d8e:	d000      	beq.n	82d92 <_close_r+0x16>
   82d90:	bd38      	pop	{r3, r4, r5, pc}
   82d92:	6823      	ldr	r3, [r4, #0]
   82d94:	2b00      	cmp	r3, #0
   82d96:	d0fb      	beq.n	82d90 <_close_r+0x14>
   82d98:	602b      	str	r3, [r5, #0]
   82d9a:	bd38      	pop	{r3, r4, r5, pc}
   82d9c:	20070a40 	.word	0x20070a40

00082da0 <_fclose_r>:
   82da0:	b570      	push	{r4, r5, r6, lr}
   82da2:	460c      	mov	r4, r1
   82da4:	4605      	mov	r5, r0
   82da6:	b131      	cbz	r1, 82db6 <_fclose_r+0x16>
   82da8:	b110      	cbz	r0, 82db0 <_fclose_r+0x10>
   82daa:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82dac:	2b00      	cmp	r3, #0
   82dae:	d02f      	beq.n	82e10 <_fclose_r+0x70>
   82db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82db4:	b90b      	cbnz	r3, 82dba <_fclose_r+0x1a>
   82db6:	2000      	movs	r0, #0
   82db8:	bd70      	pop	{r4, r5, r6, pc}
   82dba:	4628      	mov	r0, r5
   82dbc:	4621      	mov	r1, r4
   82dbe:	f7ff fa19 	bl	821f4 <_fflush_r>
   82dc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   82dc4:	4606      	mov	r6, r0
   82dc6:	b133      	cbz	r3, 82dd6 <_fclose_r+0x36>
   82dc8:	4628      	mov	r0, r5
   82dca:	69e1      	ldr	r1, [r4, #28]
   82dcc:	4798      	blx	r3
   82dce:	2800      	cmp	r0, #0
   82dd0:	bfb8      	it	lt
   82dd2:	f04f 36ff 	movlt.w	r6, #4294967295
   82dd6:	89a3      	ldrh	r3, [r4, #12]
   82dd8:	061b      	lsls	r3, r3, #24
   82dda:	d41c      	bmi.n	82e16 <_fclose_r+0x76>
   82ddc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82dde:	b141      	cbz	r1, 82df2 <_fclose_r+0x52>
   82de0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82de4:	4299      	cmp	r1, r3
   82de6:	d002      	beq.n	82dee <_fclose_r+0x4e>
   82de8:	4628      	mov	r0, r5
   82dea:	f7ff fb03 	bl	823f4 <_free_r>
   82dee:	2300      	movs	r3, #0
   82df0:	6323      	str	r3, [r4, #48]	; 0x30
   82df2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   82df4:	b121      	cbz	r1, 82e00 <_fclose_r+0x60>
   82df6:	4628      	mov	r0, r5
   82df8:	f7ff fafc 	bl	823f4 <_free_r>
   82dfc:	2300      	movs	r3, #0
   82dfe:	6463      	str	r3, [r4, #68]	; 0x44
   82e00:	f7ff fa8e 	bl	82320 <__sfp_lock_acquire>
   82e04:	2300      	movs	r3, #0
   82e06:	81a3      	strh	r3, [r4, #12]
   82e08:	f7ff fa8c 	bl	82324 <__sfp_lock_release>
   82e0c:	4630      	mov	r0, r6
   82e0e:	bd70      	pop	{r4, r5, r6, pc}
   82e10:	f7ff fa0c 	bl	8222c <__sinit>
   82e14:	e7cc      	b.n	82db0 <_fclose_r+0x10>
   82e16:	4628      	mov	r0, r5
   82e18:	6921      	ldr	r1, [r4, #16]
   82e1a:	f7ff faeb 	bl	823f4 <_free_r>
   82e1e:	e7dd      	b.n	82ddc <_fclose_r+0x3c>

00082e20 <fclose>:
   82e20:	4b02      	ldr	r3, [pc, #8]	; (82e2c <fclose+0xc>)
   82e22:	4601      	mov	r1, r0
   82e24:	6818      	ldr	r0, [r3, #0]
   82e26:	f7ff bfbb 	b.w	82da0 <_fclose_r>
   82e2a:	bf00      	nop
   82e2c:	20070430 	.word	0x20070430

00082e30 <_fstat_r>:
   82e30:	b538      	push	{r3, r4, r5, lr}
   82e32:	4c08      	ldr	r4, [pc, #32]	; (82e54 <_fstat_r+0x24>)
   82e34:	2300      	movs	r3, #0
   82e36:	4605      	mov	r5, r0
   82e38:	4608      	mov	r0, r1
   82e3a:	4611      	mov	r1, r2
   82e3c:	6023      	str	r3, [r4, #0]
   82e3e:	f7fe ff5d 	bl	81cfc <_fstat>
   82e42:	1c43      	adds	r3, r0, #1
   82e44:	d000      	beq.n	82e48 <_fstat_r+0x18>
   82e46:	bd38      	pop	{r3, r4, r5, pc}
   82e48:	6823      	ldr	r3, [r4, #0]
   82e4a:	2b00      	cmp	r3, #0
   82e4c:	d0fb      	beq.n	82e46 <_fstat_r+0x16>
   82e4e:	602b      	str	r3, [r5, #0]
   82e50:	bd38      	pop	{r3, r4, r5, pc}
   82e52:	bf00      	nop
   82e54:	20070a40 	.word	0x20070a40

00082e58 <_isatty_r>:
   82e58:	b538      	push	{r3, r4, r5, lr}
   82e5a:	4c07      	ldr	r4, [pc, #28]	; (82e78 <_isatty_r+0x20>)
   82e5c:	2300      	movs	r3, #0
   82e5e:	4605      	mov	r5, r0
   82e60:	4608      	mov	r0, r1
   82e62:	6023      	str	r3, [r4, #0]
   82e64:	f7fe ff50 	bl	81d08 <_isatty>
   82e68:	1c43      	adds	r3, r0, #1
   82e6a:	d000      	beq.n	82e6e <_isatty_r+0x16>
   82e6c:	bd38      	pop	{r3, r4, r5, pc}
   82e6e:	6823      	ldr	r3, [r4, #0]
   82e70:	2b00      	cmp	r3, #0
   82e72:	d0fb      	beq.n	82e6c <_isatty_r+0x14>
   82e74:	602b      	str	r3, [r5, #0]
   82e76:	bd38      	pop	{r3, r4, r5, pc}
   82e78:	20070a40 	.word	0x20070a40

00082e7c <_lseek_r>:
   82e7c:	b570      	push	{r4, r5, r6, lr}
   82e7e:	4c08      	ldr	r4, [pc, #32]	; (82ea0 <_lseek_r+0x24>)
   82e80:	4606      	mov	r6, r0
   82e82:	2500      	movs	r5, #0
   82e84:	4608      	mov	r0, r1
   82e86:	4611      	mov	r1, r2
   82e88:	461a      	mov	r2, r3
   82e8a:	6025      	str	r5, [r4, #0]
   82e8c:	f7fe ff3e 	bl	81d0c <_lseek>
   82e90:	1c43      	adds	r3, r0, #1
   82e92:	d000      	beq.n	82e96 <_lseek_r+0x1a>
   82e94:	bd70      	pop	{r4, r5, r6, pc}
   82e96:	6823      	ldr	r3, [r4, #0]
   82e98:	2b00      	cmp	r3, #0
   82e9a:	d0fb      	beq.n	82e94 <_lseek_r+0x18>
   82e9c:	6033      	str	r3, [r6, #0]
   82e9e:	bd70      	pop	{r4, r5, r6, pc}
   82ea0:	20070a40 	.word	0x20070a40

00082ea4 <_read_r>:
   82ea4:	b570      	push	{r4, r5, r6, lr}
   82ea6:	4c08      	ldr	r4, [pc, #32]	; (82ec8 <_read_r+0x24>)
   82ea8:	4606      	mov	r6, r0
   82eaa:	2500      	movs	r5, #0
   82eac:	4608      	mov	r0, r1
   82eae:	4611      	mov	r1, r2
   82eb0:	461a      	mov	r2, r3
   82eb2:	6025      	str	r5, [r4, #0]
   82eb4:	f7fd faca 	bl	8044c <_read>
   82eb8:	1c43      	adds	r3, r0, #1
   82eba:	d000      	beq.n	82ebe <_read_r+0x1a>
   82ebc:	bd70      	pop	{r4, r5, r6, pc}
   82ebe:	6823      	ldr	r3, [r4, #0]
   82ec0:	2b00      	cmp	r3, #0
   82ec2:	d0fb      	beq.n	82ebc <_read_r+0x18>
   82ec4:	6033      	str	r3, [r6, #0]
   82ec6:	bd70      	pop	{r4, r5, r6, pc}
   82ec8:	20070a40 	.word	0x20070a40
   82ecc:	6e6f7257 	.word	0x6e6f7257
   82ed0:	68632067 	.word	0x68632067
   82ed4:	656e6e61 	.word	0x656e6e61
   82ed8:	6e69206c 	.word	0x6e69206c
   82edc:	616e6520 	.word	0x616e6520
   82ee0:	64656c62 	.word	0x64656c62
   82ee4:	00000000 	.word	0x00000000
   82ee8:	74736574 	.word	0x74736574
   82eec:	7365742f 	.word	0x7365742f
   82ef0:	64615f74 	.word	0x64615f74
   82ef4:	00632e63 	.word	0x00632e63
   82ef8:	74736574 	.word	0x74736574
   82efc:	6d77705f 	.word	0x6d77705f
   82f00:	6168635f 	.word	0x6168635f
   82f04:	6c656e6e 	.word	0x6c656e6e
   82f08:	0000305f 	.word	0x0000305f

00082f0c <UnityStrOk>:
   82f0c:	00004b4f                                OK..

00082f10 <UnityStrSpacer>:
   82f10:	0000202e                                . ..

00082f14 <UnityStrWas>:
   82f14:	73615720 00000020                        Was ...

00082f1c <UnityStrFail>:
   82f1c:	4c494146 00000000                       FAIL....

00082f24 <UnityStrExpected>:
   82f24:	70784520 65746365 00002064               Expected ..

00082f30 <UnityStrBreaker>:
   82f30:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   82f40:	2d2d2d2d 002d2d2d                       -------.

00082f48 <UnityStrResultsFailures>:
   82f48:	69614620 6572756c 00002073               Failures ..

00082f54 <UnityStrResultsIgnored>:
   82f54:	6e674920 6465726f 00000020               Ignored ...

00082f60 <UnityStrResultsTests>:
   82f60:	73655420 00207374                        Tests .

00082f68 <UnityStrPass>:
   82f68:	53534150 00000000 00000001 00000002     PASS............
   82f78:	00000004 00000008 00000010 00000020     ............ ...
   82f88:	00000040 00000080 00000100 00000200     @...............
   82f98:	00000400 00000043                       ....C...

00082fa0 <_global_impure_ptr>:
   82fa0:	20070008                                ... 

00082fa4 <_init>:
   82fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82fa6:	bf00      	nop
   82fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82faa:	bc08      	pop	{r3}
   82fac:	469e      	mov	lr, r3
   82fae:	4770      	bx	lr

00082fb0 <__init_array_start>:
   82fb0:	0008208d 	.word	0x0008208d

00082fb4 <__frame_dummy_init_array_entry>:
   82fb4:	00080119                                ....

00082fb8 <_fini>:
   82fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82fba:	bf00      	nop
   82fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82fbe:	bc08      	pop	{r3}
   82fc0:	469e      	mov	lr, r3
   82fc2:	4770      	bx	lr

00082fc4 <__fini_array_start>:
   82fc4:	000800f5 	.word	0x000800f5
