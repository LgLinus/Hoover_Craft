
HoverCraft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e28  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000848  20070000  00082e28  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001d8  20070848  00083670  00010848  2**2
                  ALLOC
  3 .stack        00002000  20070a20  00083848  00010848  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010848  2**0
                  CONTENTS, READONLY
  5 .comment      00000071  00000000  00000000  00010871  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002216e  00000000  00000000  000108e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005e92  00000000  00000000  00032a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00009cce  00000000  00000000  000388e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001158  00000000  00000000  000425b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000cf8  00000000  00000000  00043708  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000190c7  00000000  00000000  00044400  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013a50  00000000  00000000  0005d4c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00071460  00000000  00000000  00070f17  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000024ec  00000000  00000000  000e2378  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072a20 	.word	0x20072a20
   80004:	00081a01 	.word	0x00081a01
   80008:	000819fd 	.word	0x000819fd
   8000c:	000819fd 	.word	0x000819fd
   80010:	000819fd 	.word	0x000819fd
   80014:	000819fd 	.word	0x000819fd
   80018:	000819fd 	.word	0x000819fd
	...
   8002c:	000812c9 	.word	0x000812c9
   80030:	000819fd 	.word	0x000819fd
   80034:	00000000 	.word	0x00000000
   80038:	00081301 	.word	0x00081301
   8003c:	0008133d 	.word	0x0008133d
   80040:	000819fd 	.word	0x000819fd
   80044:	000819fd 	.word	0x000819fd
   80048:	000819fd 	.word	0x000819fd
   8004c:	000819fd 	.word	0x000819fd
   80050:	000819fd 	.word	0x000819fd
   80054:	000819fd 	.word	0x000819fd
   80058:	000819fd 	.word	0x000819fd
   8005c:	000819fd 	.word	0x000819fd
   80060:	000819fd 	.word	0x000819fd
   80064:	000819fd 	.word	0x000819fd
   80068:	00000000 	.word	0x00000000
   8006c:	0008186d 	.word	0x0008186d
   80070:	00081881 	.word	0x00081881
   80074:	00081895 	.word	0x00081895
   80078:	000818a9 	.word	0x000818a9
	...
   80084:	000819fd 	.word	0x000819fd
   80088:	000819fd 	.word	0x000819fd
   8008c:	000819fd 	.word	0x000819fd
   80090:	000819fd 	.word	0x000819fd
   80094:	000819fd 	.word	0x000819fd
   80098:	000819fd 	.word	0x000819fd
   8009c:	000819fd 	.word	0x000819fd
   800a0:	000819fd 	.word	0x000819fd
   800a4:	00000000 	.word	0x00000000
   800a8:	000819fd 	.word	0x000819fd
   800ac:	000819fd 	.word	0x000819fd
   800b0:	000819fd 	.word	0x000819fd
   800b4:	000819fd 	.word	0x000819fd
   800b8:	000819fd 	.word	0x000819fd
   800bc:	000819fd 	.word	0x000819fd
   800c0:	000819fd 	.word	0x000819fd
   800c4:	000819fd 	.word	0x000819fd
   800c8:	000819fd 	.word	0x000819fd
   800cc:	000819fd 	.word	0x000819fd
   800d0:	000819fd 	.word	0x000819fd
   800d4:	000819fd 	.word	0x000819fd
   800d8:	000819fd 	.word	0x000819fd
   800dc:	000819fd 	.word	0x000819fd
   800e0:	000819fd 	.word	0x000819fd
   800e4:	000819fd 	.word	0x000819fd
   800e8:	000819fd 	.word	0x000819fd
   800ec:	000819fd 	.word	0x000819fd
   800f0:	000819fd 	.word	0x000819fd

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a1b      	subs	r3, r3, r0
   800fc:	2b06      	cmp	r3, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4b04      	ldr	r3, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2b00      	cmp	r3, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4798      	blx	r3
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	00082e28 	.word	0x00082e28
   80110:	00082e2b 	.word	0x00082e2b
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a1b      	subs	r3, r3, r0
   80120:	109b      	asrs	r3, r3, #2
   80122:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	00082e28 	.word	0x00082e28
   8013c:	00082e28 	.word	0x00082e28
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4b04      	ldr	r3, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b113      	cbz	r3, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2301      	movs	r3, #1
   8015c:	7023      	strb	r3, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070848 	.word	0x20070848
   80164:	00000000 	.word	0x00000000
   80168:	00082e28 	.word	0x00082e28

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6803      	ldr	r3, [r0, #0]
   8017e:	b113      	cbz	r3, 80186 <frame_dummy+0x1a>
   80180:	4b07      	ldr	r3, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b103      	cbz	r3, 80186 <frame_dummy+0x1a>
   80184:	4798      	blx	r3
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	00082e28 	.word	0x00082e28
   80198:	2007084c 	.word	0x2007084c
   8019c:	00082e28 	.word	0x00082e28
   801a0:	00000000 	.word	0x00000000

000801a4 <init_adc>:
/* Enable the adc */

#include <asf.h>

/* Initialize the A/D converter */
void init_adc(void){
   801a4:	b538      	push	{r3, r4, r5, lr}
	
	pmc_enable_periph_clk(ID_ADC);
   801a6:	2025      	movs	r0, #37	; 0x25
   801a8:	4b0c      	ldr	r3, [pc, #48]	; (801dc <init_adc+0x38>)
   801aa:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 1000000, 8);
   801ac:	4c0c      	ldr	r4, [pc, #48]	; (801e0 <init_adc+0x3c>)
   801ae:	4620      	mov	r0, r4
   801b0:	490c      	ldr	r1, [pc, #48]	; (801e4 <init_adc+0x40>)
   801b2:	4a0d      	ldr	r2, [pc, #52]	; (801e8 <init_adc+0x44>)
   801b4:	2308      	movs	r3, #8
   801b6:	4d0d      	ldr	r5, [pc, #52]	; (801ec <init_adc+0x48>)
   801b8:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);
   801ba:	4620      	mov	r0, r4
   801bc:	2100      	movs	r1, #0
   801be:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   801c2:	2301      	movs	r3, #1
   801c4:	4d0a      	ldr	r5, [pc, #40]	; (801f0 <init_adc+0x4c>)
   801c6:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
   801c8:	4620      	mov	r0, r4
   801ca:	2100      	movs	r1, #0
   801cc:	4b09      	ldr	r3, [pc, #36]	; (801f4 <init_adc+0x50>)
   801ce:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_3);
   801d0:	4620      	mov	r0, r4
   801d2:	2103      	movs	r1, #3
   801d4:	4b08      	ldr	r3, [pc, #32]	; (801f8 <init_adc+0x54>)
   801d6:	4798      	blx	r3
   801d8:	bd38      	pop	{r3, r4, r5, pc}
   801da:	bf00      	nop
   801dc:	000819a5 	.word	0x000819a5
   801e0:	400c0000 	.word	0x400c0000
   801e4:	0a037a00 	.word	0x0a037a00
   801e8:	000f4240 	.word	0x000f4240
   801ec:	000805a5 	.word	0x000805a5
   801f0:	000805e9 	.word	0x000805e9
   801f4:	000805d9 	.word	0x000805d9
   801f8:	00080611 	.word	0x00080611

000801fc <setUp>:
#include <asf.h>
#include "unity.h"

Adc* adc;

void setUp(){
   801fc:	4770      	bx	lr
   801fe:	bf00      	nop

00080200 <tearDown>:
}

void tearDown(){
   80200:	4770      	bx	lr
   80202:	bf00      	nop

00080204 <test_adc_12bit>:
void test_adc_enabled(void){
	
}

/* Method testing if the ADC resolution is 12 bit*/
void test_adc_12bit(void){
   80204:	b510      	push	{r4, lr}
   80206:	b082      	sub	sp, #8
	TEST_ASSERT_BIT_LOW_MESSAGE(4,ADC->ADC_MR,"ADC is 10bit");
   80208:	4b05      	ldr	r3, [pc, #20]	; (80220 <test_adc_12bit+0x1c>)
   8020a:	685a      	ldr	r2, [r3, #4]
   8020c:	2319      	movs	r3, #25
   8020e:	9300      	str	r3, [sp, #0]
   80210:	2010      	movs	r0, #16
   80212:	2100      	movs	r1, #0
   80214:	4b03      	ldr	r3, [pc, #12]	; (80224 <test_adc_12bit+0x20>)
   80216:	4c04      	ldr	r4, [pc, #16]	; (80228 <test_adc_12bit+0x24>)
   80218:	47a0      	blx	r4
}
   8021a:	b002      	add	sp, #8
   8021c:	bd10      	pop	{r4, pc}
   8021e:	bf00      	nop
   80220:	400c0000 	.word	0x400c0000
   80224:	00082d10 	.word	0x00082d10
   80228:	00080fd1 	.word	0x00080fd1

0008022c <test_channel_3_enabled>:

/* Check if channel 3 is enabled*/
void test_channel_3_enabled(void){
   8022c:	b510      	push	{r4, lr}
   8022e:	b082      	sub	sp, #8
	TEST_ASSERT_BIT_HIGH_MESSAGE(3,ADC->ADC_CHSR,"Channel 3 disabled");
   80230:	4b05      	ldr	r3, [pc, #20]	; (80248 <test_channel_3_enabled+0x1c>)
   80232:	699a      	ldr	r2, [r3, #24]
   80234:	231e      	movs	r3, #30
   80236:	9300      	str	r3, [sp, #0]
   80238:	2008      	movs	r0, #8
   8023a:	f04f 31ff 	mov.w	r1, #4294967295
   8023e:	4b03      	ldr	r3, [pc, #12]	; (8024c <test_channel_3_enabled+0x20>)
   80240:	4c03      	ldr	r4, [pc, #12]	; (80250 <test_channel_3_enabled+0x24>)
   80242:	47a0      	blx	r4
}
   80244:	b002      	add	sp, #8
   80246:	bd10      	pop	{r4, pc}
   80248:	400c0000 	.word	0x400c0000
   8024c:	00082d20 	.word	0x00082d20
   80250:	00080fd1 	.word	0x00080fd1

00080254 <test_adc_pin_enabled>:

void test_adc_pin_enabled(void){
   80254:	b510      	push	{r4, lr}
   80256:	b082      	sub	sp, #8
	TEST_ASSERT_BIT_HIGH_MESSAGE(6,PIOA->PIO_PSR,"Pin 3 is disabled");
   80258:	4b05      	ldr	r3, [pc, #20]	; (80270 <test_adc_pin_enabled+0x1c>)
   8025a:	689a      	ldr	r2, [r3, #8]
   8025c:	2322      	movs	r3, #34	; 0x22
   8025e:	9300      	str	r3, [sp, #0]
   80260:	2040      	movs	r0, #64	; 0x40
   80262:	f04f 31ff 	mov.w	r1, #4294967295
   80266:	4b03      	ldr	r3, [pc, #12]	; (80274 <test_adc_pin_enabled+0x20>)
   80268:	4c03      	ldr	r4, [pc, #12]	; (80278 <test_adc_pin_enabled+0x24>)
   8026a:	47a0      	blx	r4
   8026c:	b002      	add	sp, #8
   8026e:	bd10      	pop	{r4, pc}
   80270:	400e0e00 	.word	0x400e0e00
   80274:	00082d34 	.word	0x00082d34
   80278:	00080fd1 	.word	0x00080fd1

0008027c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8027c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8027e:	b083      	sub	sp, #12
   80280:	4604      	mov	r4, r0
   80282:	460d      	mov	r5, r1
	uint32_t val;

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80284:	4b1f      	ldr	r3, [pc, #124]	; (80304 <usart_serial_getchar+0x88>)
   80286:	4298      	cmp	r0, r3
   80288:	d107      	bne.n	8029a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
   8028a:	461f      	mov	r7, r3
   8028c:	4e1e      	ldr	r6, [pc, #120]	; (80308 <usart_serial_getchar+0x8c>)
   8028e:	4638      	mov	r0, r7
   80290:	4629      	mov	r1, r5
   80292:	47b0      	blx	r6
   80294:	2800      	cmp	r0, #0
   80296:	d1fa      	bne.n	8028e <usart_serial_getchar+0x12>
   80298:	e019      	b.n	802ce <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8029a:	4b1c      	ldr	r3, [pc, #112]	; (8030c <usart_serial_getchar+0x90>)
   8029c:	4298      	cmp	r0, r3
   8029e:	d109      	bne.n	802b4 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
   802a0:	461f      	mov	r7, r3
   802a2:	4e1b      	ldr	r6, [pc, #108]	; (80310 <usart_serial_getchar+0x94>)
   802a4:	4638      	mov	r0, r7
   802a6:	a901      	add	r1, sp, #4
   802a8:	47b0      	blx	r6
   802aa:	2800      	cmp	r0, #0
   802ac:	d1fa      	bne.n	802a4 <usart_serial_getchar+0x28>
		*data = (uint8_t)(val & 0xFF);
   802ae:	9b01      	ldr	r3, [sp, #4]
   802b0:	702b      	strb	r3, [r5, #0]
   802b2:	e019      	b.n	802e8 <usart_serial_getchar+0x6c>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   802b4:	4b17      	ldr	r3, [pc, #92]	; (80314 <usart_serial_getchar+0x98>)
   802b6:	4298      	cmp	r0, r3
   802b8:	d109      	bne.n	802ce <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
   802ba:	461e      	mov	r6, r3
   802bc:	4c14      	ldr	r4, [pc, #80]	; (80310 <usart_serial_getchar+0x94>)
   802be:	4630      	mov	r0, r6
   802c0:	a901      	add	r1, sp, #4
   802c2:	47a0      	blx	r4
   802c4:	2800      	cmp	r0, #0
   802c6:	d1fa      	bne.n	802be <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   802c8:	9b01      	ldr	r3, [sp, #4]
   802ca:	702b      	strb	r3, [r5, #0]
   802cc:	e018      	b.n	80300 <usart_serial_getchar+0x84>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   802ce:	4b12      	ldr	r3, [pc, #72]	; (80318 <usart_serial_getchar+0x9c>)
   802d0:	429c      	cmp	r4, r3
   802d2:	d109      	bne.n	802e8 <usart_serial_getchar+0x6c>
		while (usart_read(p_usart, &val));
   802d4:	461e      	mov	r6, r3
   802d6:	4c0e      	ldr	r4, [pc, #56]	; (80310 <usart_serial_getchar+0x94>)
   802d8:	4630      	mov	r0, r6
   802da:	a901      	add	r1, sp, #4
   802dc:	47a0      	blx	r4
   802de:	2800      	cmp	r0, #0
   802e0:	d1fa      	bne.n	802d8 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
   802e2:	9b01      	ldr	r3, [sp, #4]
   802e4:	702b      	strb	r3, [r5, #0]
   802e6:	e00b      	b.n	80300 <usart_serial_getchar+0x84>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   802e8:	4b0c      	ldr	r3, [pc, #48]	; (8031c <usart_serial_getchar+0xa0>)
   802ea:	429c      	cmp	r4, r3
   802ec:	d108      	bne.n	80300 <usart_serial_getchar+0x84>
		while (usart_read(p_usart, &val));
   802ee:	461e      	mov	r6, r3
   802f0:	4c07      	ldr	r4, [pc, #28]	; (80310 <usart_serial_getchar+0x94>)
   802f2:	4630      	mov	r0, r6
   802f4:	a901      	add	r1, sp, #4
   802f6:	47a0      	blx	r4
   802f8:	2800      	cmp	r0, #0
   802fa:	d1fa      	bne.n	802f2 <usart_serial_getchar+0x76>
		*data = (uint8_t)(val & 0xFF);
   802fc:	9b01      	ldr	r3, [sp, #4]
   802fe:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80300:	b003      	add	sp, #12
   80302:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80304:	400e0800 	.word	0x400e0800
   80308:	0008066d 	.word	0x0008066d
   8030c:	40098000 	.word	0x40098000
   80310:	00080699 	.word	0x00080699
   80314:	4009c000 	.word	0x4009c000
   80318:	400a0000 	.word	0x400a0000
   8031c:	400a4000 	.word	0x400a4000

00080320 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80320:	b570      	push	{r4, r5, r6, lr}
   80322:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80324:	4b21      	ldr	r3, [pc, #132]	; (803ac <usart_serial_putchar+0x8c>)
   80326:	4298      	cmp	r0, r3
   80328:	d107      	bne.n	8033a <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   8032a:	461e      	mov	r6, r3
   8032c:	4d20      	ldr	r5, [pc, #128]	; (803b0 <usart_serial_putchar+0x90>)
   8032e:	4630      	mov	r0, r6
   80330:	4621      	mov	r1, r4
   80332:	47a8      	blx	r5
   80334:	2800      	cmp	r0, #0
   80336:	d1fa      	bne.n	8032e <usart_serial_putchar+0xe>
   80338:	e02b      	b.n	80392 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8033a:	4b1e      	ldr	r3, [pc, #120]	; (803b4 <usart_serial_putchar+0x94>)
   8033c:	4298      	cmp	r0, r3
   8033e:	d107      	bne.n	80350 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80340:	461e      	mov	r6, r3
   80342:	4d1d      	ldr	r5, [pc, #116]	; (803b8 <usart_serial_putchar+0x98>)
   80344:	4630      	mov	r0, r6
   80346:	4621      	mov	r1, r4
   80348:	47a8      	blx	r5
   8034a:	2800      	cmp	r0, #0
   8034c:	d1fa      	bne.n	80344 <usart_serial_putchar+0x24>
   8034e:	e022      	b.n	80396 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80350:	4b1a      	ldr	r3, [pc, #104]	; (803bc <usart_serial_putchar+0x9c>)
   80352:	4298      	cmp	r0, r3
   80354:	d107      	bne.n	80366 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   80356:	461e      	mov	r6, r3
   80358:	4d17      	ldr	r5, [pc, #92]	; (803b8 <usart_serial_putchar+0x98>)
   8035a:	4630      	mov	r0, r6
   8035c:	4621      	mov	r1, r4
   8035e:	47a8      	blx	r5
   80360:	2800      	cmp	r0, #0
   80362:	d1fa      	bne.n	8035a <usart_serial_putchar+0x3a>
   80364:	e019      	b.n	8039a <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80366:	4b16      	ldr	r3, [pc, #88]	; (803c0 <usart_serial_putchar+0xa0>)
   80368:	4298      	cmp	r0, r3
   8036a:	d107      	bne.n	8037c <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   8036c:	461e      	mov	r6, r3
   8036e:	4d12      	ldr	r5, [pc, #72]	; (803b8 <usart_serial_putchar+0x98>)
   80370:	4630      	mov	r0, r6
   80372:	4621      	mov	r1, r4
   80374:	47a8      	blx	r5
   80376:	2800      	cmp	r0, #0
   80378:	d1fa      	bne.n	80370 <usart_serial_putchar+0x50>
   8037a:	e010      	b.n	8039e <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8037c:	4b11      	ldr	r3, [pc, #68]	; (803c4 <usart_serial_putchar+0xa4>)
   8037e:	4298      	cmp	r0, r3
   80380:	d10f      	bne.n	803a2 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80382:	461e      	mov	r6, r3
   80384:	4d0c      	ldr	r5, [pc, #48]	; (803b8 <usart_serial_putchar+0x98>)
   80386:	4630      	mov	r0, r6
   80388:	4621      	mov	r1, r4
   8038a:	47a8      	blx	r5
   8038c:	2800      	cmp	r0, #0
   8038e:	d1fa      	bne.n	80386 <usart_serial_putchar+0x66>
   80390:	e009      	b.n	803a6 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80392:	2001      	movs	r0, #1
   80394:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80396:	2001      	movs	r0, #1
   80398:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8039a:	2001      	movs	r0, #1
   8039c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8039e:	2001      	movs	r0, #1
   803a0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   803a2:	2000      	movs	r0, #0
   803a4:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   803a6:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   803a8:	bd70      	pop	{r4, r5, r6, pc}
   803aa:	bf00      	nop
   803ac:	400e0800 	.word	0x400e0800
   803b0:	00080659 	.word	0x00080659
   803b4:	40098000 	.word	0x40098000
   803b8:	00080681 	.word	0x00080681
   803bc:	4009c000 	.word	0x4009c000
   803c0:	400a0000 	.word	0x400a0000
   803c4:	400a4000 	.word	0x400a4000

000803c8 <main>:
	
	#endif
}

int main(void)
{
   803c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803cc:	b084      	sub	sp, #16
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   803ce:	2008      	movs	r0, #8
   803d0:	4d34      	ldr	r5, [pc, #208]	; (804a4 <main+0xdc>)
   803d2:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   803d4:	4c34      	ldr	r4, [pc, #208]	; (804a8 <main+0xe0>)
   803d6:	4b35      	ldr	r3, [pc, #212]	; (804ac <main+0xe4>)
   803d8:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   803da:	4a35      	ldr	r2, [pc, #212]	; (804b0 <main+0xe8>)
   803dc:	4b35      	ldr	r3, [pc, #212]	; (804b4 <main+0xec>)
   803de:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   803e0:	4a35      	ldr	r2, [pc, #212]	; (804b8 <main+0xf0>)
   803e2:	4b36      	ldr	r3, [pc, #216]	; (804bc <main+0xf4>)
   803e4:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   803e6:	4b36      	ldr	r3, [pc, #216]	; (804c0 <main+0xf8>)
   803e8:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   803ea:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   803ee:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   803f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   803f4:	9302      	str	r3, [sp, #8]
   803f6:	2008      	movs	r0, #8
   803f8:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   803fa:	4620      	mov	r0, r4
   803fc:	4669      	mov	r1, sp
   803fe:	4b31      	ldr	r3, [pc, #196]	; (804c4 <main+0xfc>)
   80400:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80402:	4e31      	ldr	r6, [pc, #196]	; (804c8 <main+0x100>)
   80404:	6833      	ldr	r3, [r6, #0]
   80406:	6898      	ldr	r0, [r3, #8]
   80408:	2100      	movs	r1, #0
   8040a:	4d30      	ldr	r5, [pc, #192]	; (804cc <main+0x104>)
   8040c:	47a8      	blx	r5
	setbuf(stdin, NULL);
   8040e:	6833      	ldr	r3, [r6, #0]
   80410:	6858      	ldr	r0, [r3, #4]
   80412:	2100      	movs	r1, #0
   80414:	47a8      	blx	r5
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   80416:	f504 64c0 	add.w	r4, r4, #1536	; 0x600
   8041a:	f44f 7380 	mov.w	r3, #256	; 0x100
   8041e:	6663      	str	r3, [r4, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80420:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80422:	6263      	str	r3, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80424:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   80428:	6f23      	ldr	r3, [r4, #112]	; 0x70
   8042a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   8042e:	6723      	str	r3, [r4, #112]	; 0x70
	stdio_serial_init(CONF_UART, &uart_serial_options);
	

	ioport_set_pin_mode(PIO_PA8_IDX,IOPORT_MODE_PULLUP); // Specify that sdout will not buffer 
	#if defined(__GNUC__)
	setbuf(stdout, NULL);
   80430:	6833      	ldr	r3, [r6, #0]
   80432:	6898      	ldr	r0, [r3, #8]
   80434:	2100      	movs	r1, #0
   80436:	47a8      	blx	r5
}

int main(void)
{
	configure_console();
	board_init();
   80438:	4b25      	ldr	r3, [pc, #148]	; (804d0 <main+0x108>)
   8043a:	4798      	blx	r3
	sysclk_init();
   8043c:	4b25      	ldr	r3, [pc, #148]	; (804d4 <main+0x10c>)
   8043e:	4798      	blx	r3
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   80440:	2540      	movs	r5, #64	; 0x40
   80442:	6025      	str	r5, [r4, #0]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80444:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80446:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	
	ioport_enable_pin(PIO_PA6_IDX);
	ioport_set_pin_dir(PIO_PA6_IDX,IOPORT_DIR_INPUT);
	
	init_adc();
   8044a:	4b23      	ldr	r3, [pc, #140]	; (804d8 <main+0x110>)
   8044c:	4798      	blx	r3
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   8044e:	6665      	str	r5, [r4, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80450:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80452:	6265      	str	r5, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80454:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   80458:	6f23      	ldr	r3, [r4, #112]	; 0x70
   8045a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   8045e:	6723      	str	r3, [r4, #112]	; 0x70
	
	ioport_set_pin_mode(PIO_PA6_IDX,IOPORT_MODE_PULLUP);//  for adc
	UnityBegin("test/test_adc.c"); // Begin unity on the test protocol for test_math, run setUp() in test_math.c
   80460:	481e      	ldr	r0, [pc, #120]	; (804dc <main+0x114>)
   80462:	4b1f      	ldr	r3, [pc, #124]	; (804e0 <main+0x118>)
   80464:	4798      	blx	r3
	
	RUN_TEST(test_adc_12bit,20); // Run test if adc is 12bit resolution.
   80466:	481f      	ldr	r0, [pc, #124]	; (804e4 <main+0x11c>)
   80468:	491f      	ldr	r1, [pc, #124]	; (804e8 <main+0x120>)
   8046a:	2214      	movs	r2, #20
   8046c:	4c1f      	ldr	r4, [pc, #124]	; (804ec <main+0x124>)
   8046e:	47a0      	blx	r4
	RUN_TEST(test_channel_3_enabled,20);
   80470:	481f      	ldr	r0, [pc, #124]	; (804f0 <main+0x128>)
   80472:	4920      	ldr	r1, [pc, #128]	; (804f4 <main+0x12c>)
   80474:	2214      	movs	r2, #20
   80476:	47a0      	blx	r4
	RUN_TEST(test_adc_pin_enabled,20);
   80478:	481f      	ldr	r0, [pc, #124]	; (804f8 <main+0x130>)
   8047a:	4920      	ldr	r1, [pc, #128]	; (804fc <main+0x134>)
   8047c:	2214      	movs	r2, #20
   8047e:	47a0      	blx	r4
	
	UnityEnd(); // End test protocol, print information
   80480:	4b1f      	ldr	r3, [pc, #124]	; (80500 <main+0x138>)
   80482:	4798      	blx	r3
	int a;
	int i;
	
	for(;;)
	{	
		i = 0;
   80484:	2400      	movs	r4, #0
		a = 0;	
		while(i<10) // Average filter 
		{
			int temp = adc_get_latest_value(ADC);
   80486:	4d1f      	ldr	r5, [pc, #124]	; (80504 <main+0x13c>)
   80488:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8050c <main+0x144>
			adc_start(ADC);
   8048c:	4f1e      	ldr	r7, [pc, #120]	; (80508 <main+0x140>)
	{	
		i = 0;
		a = 0;	
		while(i<10) // Average filter 
		{
			int temp = adc_get_latest_value(ADC);
   8048e:	4628      	mov	r0, r5
   80490:	47c0      	blx	r8
   80492:	4606      	mov	r6, r0
			adc_start(ADC);
   80494:	4628      	mov	r0, r5
   80496:	47b8      	blx	r7
			
			if(temp!=0)
   80498:	b106      	cbz	r6, 8049c <main+0xd4>
			{
				a += temp;
				i++;
   8049a:	3401      	adds	r4, #1
	int a;
	int i;
	
	for(;;)
	{	
		i = 0;
   8049c:	2c0a      	cmp	r4, #10
   8049e:	bfa8      	it	ge
   804a0:	2400      	movge	r4, #0
   804a2:	e7f4      	b.n	8048e <main+0xc6>
   804a4:	000819a5 	.word	0x000819a5
   804a8:	400e0800 	.word	0x400e0800
   804ac:	2007099c 	.word	0x2007099c
   804b0:	00080321 	.word	0x00080321
   804b4:	20070998 	.word	0x20070998
   804b8:	0008027d 	.word	0x0008027d
   804bc:	20070994 	.word	0x20070994
   804c0:	0501bd00 	.word	0x0501bd00
   804c4:	00080621 	.word	0x00080621
   804c8:	20070008 	.word	0x20070008
   804cc:	00081d39 	.word	0x00081d39
   804d0:	0008157d 	.word	0x0008157d
   804d4:	00081519 	.word	0x00081519
   804d8:	000801a5 	.word	0x000801a5
   804dc:	00082d48 	.word	0x00082d48
   804e0:	000810a1 	.word	0x000810a1
   804e4:	00080205 	.word	0x00080205
   804e8:	00082d58 	.word	0x00082d58
   804ec:	00081049 	.word	0x00081049
   804f0:	0008022d 	.word	0x0008022d
   804f4:	00082d68 	.word	0x00082d68
   804f8:	00080255 	.word	0x00080255
   804fc:	00082d80 	.word	0x00082d80
   80500:	000810bd 	.word	0x000810bd
   80504:	400c0000 	.word	0x400c0000
   80508:	00080609 	.word	0x00080609
   8050c:	0008061d 	.word	0x0008061d

00080510 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80514:	460c      	mov	r4, r1
   80516:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80518:	b960      	cbnz	r0, 80534 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   8051a:	2a00      	cmp	r2, #0
   8051c:	dd0e      	ble.n	8053c <_read+0x2c>
   8051e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80520:	4e09      	ldr	r6, [pc, #36]	; (80548 <_read+0x38>)
   80522:	4d0a      	ldr	r5, [pc, #40]	; (8054c <_read+0x3c>)
   80524:	6830      	ldr	r0, [r6, #0]
   80526:	4621      	mov	r1, r4
   80528:	682b      	ldr	r3, [r5, #0]
   8052a:	4798      	blx	r3
		ptr++;
   8052c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8052e:	42bc      	cmp	r4, r7
   80530:	d1f8      	bne.n	80524 <_read+0x14>
   80532:	e006      	b.n	80542 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80534:	f04f 30ff 	mov.w	r0, #4294967295
   80538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   8053c:	2000      	movs	r0, #0
   8053e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80542:	4640      	mov	r0, r8
	}
	return nChars;
}
   80544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80548:	2007099c 	.word	0x2007099c
   8054c:	20070994 	.word	0x20070994

00080550 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   80550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80554:	460e      	mov	r6, r1
   80556:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80558:	3801      	subs	r0, #1
   8055a:	2802      	cmp	r0, #2
   8055c:	d80f      	bhi.n	8057e <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   8055e:	b192      	cbz	r2, 80586 <_write+0x36>
   80560:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80562:	f8df 803c 	ldr.w	r8, [pc, #60]	; 805a0 <_write+0x50>
   80566:	4f0d      	ldr	r7, [pc, #52]	; (8059c <_write+0x4c>)
   80568:	f8d8 0000 	ldr.w	r0, [r8]
   8056c:	5d31      	ldrb	r1, [r6, r4]
   8056e:	683b      	ldr	r3, [r7, #0]
   80570:	4798      	blx	r3
   80572:	2800      	cmp	r0, #0
   80574:	db0a      	blt.n	8058c <_write+0x3c>
			return -1;
		}
		++nChars;
   80576:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80578:	42a5      	cmp	r5, r4
   8057a:	d1f5      	bne.n	80568 <_write+0x18>
   8057c:	e00a      	b.n	80594 <_write+0x44>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8057e:	f04f 30ff 	mov.w	r0, #4294967295
   80582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80586:	2000      	movs	r0, #0
   80588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   8058c:	f04f 30ff 	mov.w	r0, #4294967295
   80590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80594:	4620      	mov	r0, r4
	}
	return nChars;
}
   80596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8059a:	bf00      	nop
   8059c:	20070998 	.word	0x20070998
   805a0:	2007099c 	.word	0x2007099c

000805a4 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   805a4:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   805a6:	2401      	movs	r4, #1
   805a8:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   805aa:	2400      	movs	r4, #0
   805ac:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   805ae:	f240 2502 	movw	r5, #514	; 0x202
   805b2:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   805b6:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   805ba:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   805be:	6845      	ldr	r5, [r0, #4]
   805c0:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   805c2:	0052      	lsls	r2, r2, #1
   805c4:	fbb1 f1f2 	udiv	r1, r1, r2
   805c8:	1e4d      	subs	r5, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   805ca:	022d      	lsls	r5, r5, #8
   805cc:	b2ad      	uxth	r5, r5
   805ce:	432b      	orrs	r3, r5
   805d0:	6043      	str	r3, [r0, #4]
	return 0;
}
   805d2:	4620      	mov	r0, r4
   805d4:	bc30      	pop	{r4, r5}
   805d6:	4770      	bx	lr

000805d8 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   805d8:	6843      	ldr	r3, [r0, #4]
   805da:	f023 0310 	bic.w	r3, r3, #16
   805de:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   805e0:	6843      	ldr	r3, [r0, #4]
   805e2:	4319      	orrs	r1, r3
   805e4:	6041      	str	r1, [r0, #4]
   805e6:	4770      	bx	lr

000805e8 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   805e8:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   805ea:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   805ec:	4322      	orrs	r2, r4
   805ee:	0609      	lsls	r1, r1, #24
   805f0:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   805f4:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   805f6:	071b      	lsls	r3, r3, #28
   805f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   805fc:	431a      	orrs	r2, r3
   805fe:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   80600:	f85d 4b04 	ldr.w	r4, [sp], #4
   80604:	4770      	bx	lr
   80606:	bf00      	nop

00080608 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80608:	2302      	movs	r3, #2
   8060a:	6003      	str	r3, [r0, #0]
   8060c:	4770      	bx	lr
   8060e:	bf00      	nop

00080610 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80610:	2301      	movs	r3, #1
   80612:	fa03 f101 	lsl.w	r1, r3, r1
   80616:	6101      	str	r1, [r0, #16]
   80618:	4770      	bx	lr
   8061a:	bf00      	nop

0008061c <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
   8061c:	6a00      	ldr	r0, [r0, #32]
}
   8061e:	4770      	bx	lr

00080620 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80620:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80622:	23ac      	movs	r3, #172	; 0xac
   80624:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80626:	680a      	ldr	r2, [r1, #0]
   80628:	684b      	ldr	r3, [r1, #4]
   8062a:	fbb2 f3f3 	udiv	r3, r2, r3
   8062e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80630:	1e5c      	subs	r4, r3, #1
   80632:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80636:	4294      	cmp	r4, r2
   80638:	d80a      	bhi.n	80650 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   8063a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8063c:	688b      	ldr	r3, [r1, #8]
   8063e:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80640:	f240 2302 	movw	r3, #514	; 0x202
   80644:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80648:	2350      	movs	r3, #80	; 0x50
   8064a:	6003      	str	r3, [r0, #0]

	return 0;
   8064c:	2000      	movs	r0, #0
   8064e:	e000      	b.n	80652 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80650:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80652:	f85d 4b04 	ldr.w	r4, [sp], #4
   80656:	4770      	bx	lr

00080658 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80658:	6943      	ldr	r3, [r0, #20]
   8065a:	f013 0f02 	tst.w	r3, #2
   8065e:	d002      	beq.n	80666 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80660:	61c1      	str	r1, [r0, #28]
	return 0;
   80662:	2000      	movs	r0, #0
   80664:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80666:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80668:	4770      	bx	lr
   8066a:	bf00      	nop

0008066c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8066c:	6943      	ldr	r3, [r0, #20]
   8066e:	f013 0f01 	tst.w	r3, #1
   80672:	d003      	beq.n	8067c <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80674:	6983      	ldr	r3, [r0, #24]
   80676:	700b      	strb	r3, [r1, #0]
	return 0;
   80678:	2000      	movs	r0, #0
   8067a:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8067c:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   8067e:	4770      	bx	lr

00080680 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80680:	6943      	ldr	r3, [r0, #20]
   80682:	f013 0f02 	tst.w	r3, #2
   80686:	d004      	beq.n	80692 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80688:	f3c1 0108 	ubfx	r1, r1, #0, #9
   8068c:	61c1      	str	r1, [r0, #28]
	return 0;
   8068e:	2000      	movs	r0, #0
   80690:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80692:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80694:	4770      	bx	lr
   80696:	bf00      	nop

00080698 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80698:	6943      	ldr	r3, [r0, #20]
   8069a:	f013 0f01 	tst.w	r3, #1
   8069e:	d005      	beq.n	806ac <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   806a0:	6983      	ldr	r3, [r0, #24]
   806a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   806a6:	600b      	str	r3, [r1, #0]

	return 0;
   806a8:	2000      	movs	r0, #0
   806aa:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   806ac:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   806ae:	4770      	bx	lr

000806b0 <UnityPrintNumber>:
}

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumber(const _U_SINT number_to_print)
{
   806b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   806b4:	4605      	mov	r5, r0
    _U_SINT divisor = 1;
    _U_SINT next_divisor;
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
   806b6:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   806ba:	d132      	bne.n	80722 <UnityPrintNumber+0x72>
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   806bc:	4b5f      	ldr	r3, [pc, #380]	; (8083c <UnityPrintNumber+0x18c>)
   806be:	6818      	ldr	r0, [r3, #0]
   806c0:	6882      	ldr	r2, [r0, #8]
   806c2:	6893      	ldr	r3, [r2, #8]
   806c4:	3b01      	subs	r3, #1
   806c6:	6093      	str	r3, [r2, #8]
   806c8:	2b00      	cmp	r3, #0
   806ca:	da1d      	bge.n	80708 <UnityPrintNumber+0x58>
   806cc:	6882      	ldr	r2, [r0, #8]
   806ce:	6891      	ldr	r1, [r2, #8]
   806d0:	6993      	ldr	r3, [r2, #24]
   806d2:	4299      	cmp	r1, r3
   806d4:	db12      	blt.n	806fc <UnityPrintNumber+0x4c>
   806d6:	6813      	ldr	r3, [r2, #0]
   806d8:	222d      	movs	r2, #45	; 0x2d
   806da:	701a      	strb	r2, [r3, #0]
   806dc:	4b57      	ldr	r3, [pc, #348]	; (8083c <UnityPrintNumber+0x18c>)
   806de:	6818      	ldr	r0, [r3, #0]
   806e0:	6882      	ldr	r2, [r0, #8]
   806e2:	6813      	ldr	r3, [r2, #0]
   806e4:	7819      	ldrb	r1, [r3, #0]
   806e6:	290a      	cmp	r1, #10
   806e8:	d002      	beq.n	806f0 <UnityPrintNumber+0x40>
   806ea:	3301      	adds	r3, #1
   806ec:	6013      	str	r3, [r2, #0]
   806ee:	e04f      	b.n	80790 <UnityPrintNumber+0xe0>
   806f0:	210a      	movs	r1, #10
   806f2:	4b53      	ldr	r3, [pc, #332]	; (80840 <UnityPrintNumber+0x190>)
   806f4:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   806f6:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   806fa:	e049      	b.n	80790 <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   806fc:	212d      	movs	r1, #45	; 0x2d
   806fe:	4b50      	ldr	r3, [pc, #320]	; (80840 <UnityPrintNumber+0x190>)
   80700:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80702:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   80706:	e043      	b.n	80790 <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80708:	6883      	ldr	r3, [r0, #8]
   8070a:	681b      	ldr	r3, [r3, #0]
   8070c:	222d      	movs	r2, #45	; 0x2d
   8070e:	701a      	strb	r2, [r3, #0]
   80710:	4b4a      	ldr	r3, [pc, #296]	; (8083c <UnityPrintNumber+0x18c>)
   80712:	681b      	ldr	r3, [r3, #0]
   80714:	689b      	ldr	r3, [r3, #8]
   80716:	681a      	ldr	r2, [r3, #0]
   80718:	3201      	adds	r2, #1
   8071a:	601a      	str	r2, [r3, #0]
        number = (1ul << (UNITY_LONG_WIDTH-1));
   8071c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   80720:	e036      	b.n	80790 <UnityPrintNumber+0xe0>
    }
    else if (number_to_print < 0)
   80722:	2800      	cmp	r0, #0
   80724:	da34      	bge.n	80790 <UnityPrintNumber+0xe0>
    {
        //Some other negative number
        UNITY_OUTPUT_CHAR('-');
   80726:	4b45      	ldr	r3, [pc, #276]	; (8083c <UnityPrintNumber+0x18c>)
   80728:	6818      	ldr	r0, [r3, #0]
   8072a:	6882      	ldr	r2, [r0, #8]
   8072c:	6893      	ldr	r3, [r2, #8]
   8072e:	3b01      	subs	r3, #1
   80730:	6093      	str	r3, [r2, #8]
   80732:	2b00      	cmp	r3, #0
   80734:	da19      	bge.n	8076a <UnityPrintNumber+0xba>
   80736:	6882      	ldr	r2, [r0, #8]
   80738:	6891      	ldr	r1, [r2, #8]
   8073a:	6993      	ldr	r3, [r2, #24]
   8073c:	4299      	cmp	r1, r3
   8073e:	db10      	blt.n	80762 <UnityPrintNumber+0xb2>
   80740:	6813      	ldr	r3, [r2, #0]
   80742:	222d      	movs	r2, #45	; 0x2d
   80744:	701a      	strb	r2, [r3, #0]
   80746:	4b3d      	ldr	r3, [pc, #244]	; (8083c <UnityPrintNumber+0x18c>)
   80748:	6818      	ldr	r0, [r3, #0]
   8074a:	6882      	ldr	r2, [r0, #8]
   8074c:	6813      	ldr	r3, [r2, #0]
   8074e:	7819      	ldrb	r1, [r3, #0]
   80750:	290a      	cmp	r1, #10
   80752:	d002      	beq.n	8075a <UnityPrintNumber+0xaa>
   80754:	3301      	adds	r3, #1
   80756:	6013      	str	r3, [r2, #0]
   80758:	e011      	b.n	8077e <UnityPrintNumber+0xce>
   8075a:	210a      	movs	r1, #10
   8075c:	4b38      	ldr	r3, [pc, #224]	; (80840 <UnityPrintNumber+0x190>)
   8075e:	4798      	blx	r3
   80760:	e00d      	b.n	8077e <UnityPrintNumber+0xce>
   80762:	212d      	movs	r1, #45	; 0x2d
   80764:	4b36      	ldr	r3, [pc, #216]	; (80840 <UnityPrintNumber+0x190>)
   80766:	4798      	blx	r3
   80768:	e009      	b.n	8077e <UnityPrintNumber+0xce>
   8076a:	6883      	ldr	r3, [r0, #8]
   8076c:	681b      	ldr	r3, [r3, #0]
   8076e:	222d      	movs	r2, #45	; 0x2d
   80770:	701a      	strb	r2, [r3, #0]
   80772:	4b32      	ldr	r3, [pc, #200]	; (8083c <UnityPrintNumber+0x18c>)
   80774:	681b      	ldr	r3, [r3, #0]
   80776:	689b      	ldr	r3, [r3, #8]
   80778:	681a      	ldr	r2, [r3, #0]
   8077a:	3201      	adds	r2, #1
   8077c:	601a      	str	r2, [r3, #0]
        number = (_U_UINT)(-number_to_print);
   8077e:	426d      	negs	r5, r5
   80780:	e006      	b.n	80790 <UnityPrintNumber+0xe0>
    }

    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
   80782:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   80786:	005b      	lsls	r3, r3, #1
        if (next_divisor > divisor)
   80788:	429c      	cmp	r4, r3
   8078a:	da06      	bge.n	8079a <UnityPrintNumber+0xea>
            divisor = next_divisor;
   8078c:	461c      	mov	r4, r3
   8078e:	e000      	b.n	80792 <UnityPrintNumber+0xe2>

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80790:	2401      	movs	r4, #1
        //Positive number
        number = (_U_UINT)number_to_print;
    }

    // figure out initial divisor
    while (number / divisor > 9)
   80792:	fbb5 f3f4 	udiv	r3, r5, r4
   80796:	2b09      	cmp	r3, #9
   80798:	d8f3      	bhi.n	80782 <UnityPrintNumber+0xd2>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   8079a:	4e28      	ldr	r6, [pc, #160]	; (8083c <UnityPrintNumber+0x18c>)
   8079c:	4f29      	ldr	r7, [pc, #164]	; (80844 <UnityPrintNumber+0x194>)
   8079e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80840 <UnityPrintNumber+0x190>
   807a2:	6830      	ldr	r0, [r6, #0]
   807a4:	6882      	ldr	r2, [r0, #8]
   807a6:	6893      	ldr	r3, [r2, #8]
   807a8:	3b01      	subs	r3, #1
   807aa:	6093      	str	r3, [r2, #8]
   807ac:	2b00      	cmp	r3, #0
   807ae:	da29      	bge.n	80804 <UnityPrintNumber+0x154>
   807b0:	6882      	ldr	r2, [r0, #8]
   807b2:	6891      	ldr	r1, [r2, #8]
   807b4:	6993      	ldr	r3, [r2, #24]
   807b6:	4299      	cmp	r1, r3
   807b8:	db17      	blt.n	807ea <UnityPrintNumber+0x13a>
   807ba:	6811      	ldr	r1, [r2, #0]
   807bc:	fbb5 f3f4 	udiv	r3, r5, r4
   807c0:	fba7 0203 	umull	r0, r2, r7, r3
   807c4:	08d2      	lsrs	r2, r2, #3
   807c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   807ca:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   807ce:	3330      	adds	r3, #48	; 0x30
   807d0:	700b      	strb	r3, [r1, #0]
   807d2:	6830      	ldr	r0, [r6, #0]
   807d4:	6882      	ldr	r2, [r0, #8]
   807d6:	6813      	ldr	r3, [r2, #0]
   807d8:	7819      	ldrb	r1, [r3, #0]
   807da:	290a      	cmp	r1, #10
   807dc:	d002      	beq.n	807e4 <UnityPrintNumber+0x134>
   807de:	3301      	adds	r3, #1
   807e0:	6013      	str	r3, [r2, #0]
   807e2:	e021      	b.n	80828 <UnityPrintNumber+0x178>
   807e4:	210a      	movs	r1, #10
   807e6:	47c0      	blx	r8
   807e8:	e01e      	b.n	80828 <UnityPrintNumber+0x178>
   807ea:	fbb5 f3f4 	udiv	r3, r5, r4
   807ee:	fba7 e103 	umull	lr, r1, r7, r3
   807f2:	08c9      	lsrs	r1, r1, #3
   807f4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   807f8:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   807fc:	3130      	adds	r1, #48	; 0x30
   807fe:	b2c9      	uxtb	r1, r1
   80800:	47c0      	blx	r8
   80802:	e011      	b.n	80828 <UnityPrintNumber+0x178>
   80804:	6883      	ldr	r3, [r0, #8]
   80806:	6819      	ldr	r1, [r3, #0]
   80808:	fbb5 f3f4 	udiv	r3, r5, r4
   8080c:	fba7 0203 	umull	r0, r2, r7, r3
   80810:	08d2      	lsrs	r2, r2, #3
   80812:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80816:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   8081a:	3330      	adds	r3, #48	; 0x30
   8081c:	700b      	strb	r3, [r1, #0]
   8081e:	6833      	ldr	r3, [r6, #0]
   80820:	689b      	ldr	r3, [r3, #8]
   80822:	681a      	ldr	r2, [r3, #0]
   80824:	3201      	adds	r2, #1
   80826:	601a      	str	r2, [r3, #0]
        divisor /= 10;
   80828:	4b07      	ldr	r3, [pc, #28]	; (80848 <UnityPrintNumber+0x198>)
   8082a:	fb83 2304 	smull	r2, r3, r3, r4
   8082e:	17e4      	asrs	r4, r4, #31
   80830:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
    }
    while (divisor > 0);
   80834:	2c00      	cmp	r4, #0
   80836:	dcb4      	bgt.n	807a2 <UnityPrintNumber+0xf2>
}
   80838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8083c:	20070008 	.word	0x20070008
   80840:	00081e4d 	.word	0x00081e4d
   80844:	cccccccd 	.word	0xcccccccd
   80848:	66666667 	.word	0x66666667

0008084c <UnityPrintNumberHex>:
    while (divisor > 0);
}

//-----------------------------------------------
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
   8084c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80850:	4606      	mov	r6, r0
   80852:	460c      	mov	r4, r1
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
   80854:	4b5e      	ldr	r3, [pc, #376]	; (809d0 <UnityPrintNumberHex+0x184>)
   80856:	6818      	ldr	r0, [r3, #0]
   80858:	6882      	ldr	r2, [r0, #8]
   8085a:	6893      	ldr	r3, [r2, #8]
   8085c:	3b01      	subs	r3, #1
   8085e:	6093      	str	r3, [r2, #8]
   80860:	2b00      	cmp	r3, #0
   80862:	da19      	bge.n	80898 <UnityPrintNumberHex+0x4c>
   80864:	6882      	ldr	r2, [r0, #8]
   80866:	6891      	ldr	r1, [r2, #8]
   80868:	6993      	ldr	r3, [r2, #24]
   8086a:	4299      	cmp	r1, r3
   8086c:	db10      	blt.n	80890 <UnityPrintNumberHex+0x44>
   8086e:	6813      	ldr	r3, [r2, #0]
   80870:	2230      	movs	r2, #48	; 0x30
   80872:	701a      	strb	r2, [r3, #0]
   80874:	4b56      	ldr	r3, [pc, #344]	; (809d0 <UnityPrintNumberHex+0x184>)
   80876:	6818      	ldr	r0, [r3, #0]
   80878:	6882      	ldr	r2, [r0, #8]
   8087a:	6813      	ldr	r3, [r2, #0]
   8087c:	7819      	ldrb	r1, [r3, #0]
   8087e:	290a      	cmp	r1, #10
   80880:	d002      	beq.n	80888 <UnityPrintNumberHex+0x3c>
   80882:	3301      	adds	r3, #1
   80884:	6013      	str	r3, [r2, #0]
   80886:	e011      	b.n	808ac <UnityPrintNumberHex+0x60>
   80888:	210a      	movs	r1, #10
   8088a:	4b52      	ldr	r3, [pc, #328]	; (809d4 <UnityPrintNumberHex+0x188>)
   8088c:	4798      	blx	r3
   8088e:	e00d      	b.n	808ac <UnityPrintNumberHex+0x60>
   80890:	2130      	movs	r1, #48	; 0x30
   80892:	4b50      	ldr	r3, [pc, #320]	; (809d4 <UnityPrintNumberHex+0x188>)
   80894:	4798      	blx	r3
   80896:	e009      	b.n	808ac <UnityPrintNumberHex+0x60>
   80898:	6883      	ldr	r3, [r0, #8]
   8089a:	681b      	ldr	r3, [r3, #0]
   8089c:	2230      	movs	r2, #48	; 0x30
   8089e:	701a      	strb	r2, [r3, #0]
   808a0:	4b4b      	ldr	r3, [pc, #300]	; (809d0 <UnityPrintNumberHex+0x184>)
   808a2:	681b      	ldr	r3, [r3, #0]
   808a4:	689b      	ldr	r3, [r3, #8]
   808a6:	681a      	ldr	r2, [r3, #0]
   808a8:	3201      	adds	r2, #1
   808aa:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_CHAR('x');
   808ac:	4b48      	ldr	r3, [pc, #288]	; (809d0 <UnityPrintNumberHex+0x184>)
   808ae:	6818      	ldr	r0, [r3, #0]
   808b0:	6882      	ldr	r2, [r0, #8]
   808b2:	6893      	ldr	r3, [r2, #8]
   808b4:	3b01      	subs	r3, #1
   808b6:	6093      	str	r3, [r2, #8]
   808b8:	2b00      	cmp	r3, #0
   808ba:	da1b      	bge.n	808f4 <UnityPrintNumberHex+0xa8>
   808bc:	6882      	ldr	r2, [r0, #8]
   808be:	6891      	ldr	r1, [r2, #8]
   808c0:	6993      	ldr	r3, [r2, #24]
   808c2:	4299      	cmp	r1, r3
   808c4:	db10      	blt.n	808e8 <UnityPrintNumberHex+0x9c>
   808c6:	6813      	ldr	r3, [r2, #0]
   808c8:	2278      	movs	r2, #120	; 0x78
   808ca:	701a      	strb	r2, [r3, #0]
   808cc:	4b40      	ldr	r3, [pc, #256]	; (809d0 <UnityPrintNumberHex+0x184>)
   808ce:	6818      	ldr	r0, [r3, #0]
   808d0:	6882      	ldr	r2, [r0, #8]
   808d2:	6813      	ldr	r3, [r2, #0]
   808d4:	7819      	ldrb	r1, [r3, #0]
   808d6:	290a      	cmp	r1, #10
   808d8:	d002      	beq.n	808e0 <UnityPrintNumberHex+0x94>
   808da:	3301      	adds	r3, #1
   808dc:	6013      	str	r3, [r2, #0]
   808de:	e006      	b.n	808ee <UnityPrintNumberHex+0xa2>
   808e0:	210a      	movs	r1, #10
   808e2:	4b3c      	ldr	r3, [pc, #240]	; (809d4 <UnityPrintNumberHex+0x188>)
   808e4:	4798      	blx	r3
   808e6:	e002      	b.n	808ee <UnityPrintNumberHex+0xa2>
   808e8:	2178      	movs	r1, #120	; 0x78
   808ea:	4b3a      	ldr	r3, [pc, #232]	; (809d4 <UnityPrintNumberHex+0x188>)
   808ec:	4798      	blx	r3

    while (nibbles > 0)
   808ee:	b964      	cbnz	r4, 8090a <UnityPrintNumberHex+0xbe>
   808f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');
   808f4:	6883      	ldr	r3, [r0, #8]
   808f6:	681b      	ldr	r3, [r3, #0]
   808f8:	2278      	movs	r2, #120	; 0x78
   808fa:	701a      	strb	r2, [r3, #0]
   808fc:	4b34      	ldr	r3, [pc, #208]	; (809d0 <UnityPrintNumberHex+0x184>)
   808fe:	681b      	ldr	r3, [r3, #0]
   80900:	689b      	ldr	r3, [r3, #8]
   80902:	681a      	ldr	r2, [r3, #0]
   80904:	3201      	adds	r2, #1
   80906:	601a      	str	r2, [r3, #0]
   80908:	e7f1      	b.n	808ee <UnityPrintNumberHex+0xa2>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   8090a:	4d31      	ldr	r5, [pc, #196]	; (809d0 <UnityPrintNumberHex+0x184>)
   8090c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 809d4 <UnityPrintNumberHex+0x188>
   80910:	f04f 080a 	mov.w	r8, #10
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
    {
        nibble = (number >> (--nibbles << 2)) & 0x0000000F;
   80914:	3c01      	subs	r4, #1
   80916:	b2e4      	uxtb	r4, r4
   80918:	00a3      	lsls	r3, r4, #2
   8091a:	fa26 f303 	lsr.w	r3, r6, r3
   8091e:	f003 030f 	and.w	r3, r3, #15
        if (nibble <= 9)
   80922:	2b09      	cmp	r3, #9
   80924:	d828      	bhi.n	80978 <UnityPrintNumberHex+0x12c>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
   80926:	6828      	ldr	r0, [r5, #0]
   80928:	6881      	ldr	r1, [r0, #8]
   8092a:	688a      	ldr	r2, [r1, #8]
   8092c:	3a01      	subs	r2, #1
   8092e:	608a      	str	r2, [r1, #8]
   80930:	2a00      	cmp	r2, #0
   80932:	da17      	bge.n	80964 <UnityPrintNumberHex+0x118>
   80934:	6882      	ldr	r2, [r0, #8]
   80936:	6891      	ldr	r1, [r2, #8]
   80938:	6997      	ldr	r7, [r2, #24]
   8093a:	42b9      	cmp	r1, r7
   8093c:	db0e      	blt.n	8095c <UnityPrintNumberHex+0x110>
   8093e:	6812      	ldr	r2, [r2, #0]
   80940:	3330      	adds	r3, #48	; 0x30
   80942:	7013      	strb	r3, [r2, #0]
   80944:	6828      	ldr	r0, [r5, #0]
   80946:	6882      	ldr	r2, [r0, #8]
   80948:	6813      	ldr	r3, [r2, #0]
   8094a:	7819      	ldrb	r1, [r3, #0]
   8094c:	290a      	cmp	r1, #10
   8094e:	d002      	beq.n	80956 <UnityPrintNumberHex+0x10a>
   80950:	3301      	adds	r3, #1
   80952:	6013      	str	r3, [r2, #0]
   80954:	e038      	b.n	809c8 <UnityPrintNumberHex+0x17c>
   80956:	4641      	mov	r1, r8
   80958:	47c8      	blx	r9
   8095a:	e035      	b.n	809c8 <UnityPrintNumberHex+0x17c>
   8095c:	f103 0130 	add.w	r1, r3, #48	; 0x30
   80960:	47c8      	blx	r9
   80962:	e031      	b.n	809c8 <UnityPrintNumberHex+0x17c>
   80964:	6882      	ldr	r2, [r0, #8]
   80966:	6812      	ldr	r2, [r2, #0]
   80968:	3330      	adds	r3, #48	; 0x30
   8096a:	7013      	strb	r3, [r2, #0]
   8096c:	682b      	ldr	r3, [r5, #0]
   8096e:	689b      	ldr	r3, [r3, #8]
   80970:	681a      	ldr	r2, [r3, #0]
   80972:	3201      	adds	r2, #1
   80974:	601a      	str	r2, [r3, #0]
   80976:	e027      	b.n	809c8 <UnityPrintNumberHex+0x17c>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   80978:	6828      	ldr	r0, [r5, #0]
   8097a:	6881      	ldr	r1, [r0, #8]
   8097c:	688a      	ldr	r2, [r1, #8]
   8097e:	3a01      	subs	r2, #1
   80980:	608a      	str	r2, [r1, #8]
   80982:	2a00      	cmp	r2, #0
   80984:	da17      	bge.n	809b6 <UnityPrintNumberHex+0x16a>
   80986:	6882      	ldr	r2, [r0, #8]
   80988:	6891      	ldr	r1, [r2, #8]
   8098a:	6997      	ldr	r7, [r2, #24]
   8098c:	42b9      	cmp	r1, r7
   8098e:	db0e      	blt.n	809ae <UnityPrintNumberHex+0x162>
   80990:	6812      	ldr	r2, [r2, #0]
   80992:	3337      	adds	r3, #55	; 0x37
   80994:	7013      	strb	r3, [r2, #0]
   80996:	6828      	ldr	r0, [r5, #0]
   80998:	6882      	ldr	r2, [r0, #8]
   8099a:	6813      	ldr	r3, [r2, #0]
   8099c:	7819      	ldrb	r1, [r3, #0]
   8099e:	290a      	cmp	r1, #10
   809a0:	d002      	beq.n	809a8 <UnityPrintNumberHex+0x15c>
   809a2:	3301      	adds	r3, #1
   809a4:	6013      	str	r3, [r2, #0]
   809a6:	e00f      	b.n	809c8 <UnityPrintNumberHex+0x17c>
   809a8:	4641      	mov	r1, r8
   809aa:	47c8      	blx	r9
   809ac:	e00c      	b.n	809c8 <UnityPrintNumberHex+0x17c>
   809ae:	f103 0137 	add.w	r1, r3, #55	; 0x37
   809b2:	47c8      	blx	r9
   809b4:	e008      	b.n	809c8 <UnityPrintNumberHex+0x17c>
   809b6:	6882      	ldr	r2, [r0, #8]
   809b8:	6812      	ldr	r2, [r2, #0]
   809ba:	3337      	adds	r3, #55	; 0x37
   809bc:	7013      	strb	r3, [r2, #0]
   809be:	682b      	ldr	r3, [r5, #0]
   809c0:	689b      	ldr	r3, [r3, #8]
   809c2:	681a      	ldr	r2, [r3, #0]
   809c4:	3201      	adds	r2, #1
   809c6:	601a      	str	r2, [r3, #0]
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
   809c8:	2c00      	cmp	r4, #0
   809ca:	d1a3      	bne.n	80914 <UnityPrintNumberHex+0xc8>
   809cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   809d0:	20070008 	.word	0x20070008
   809d4:	00081e4d 	.word	0x00081e4d

000809d8 <UnityPrint>:
//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
{
   809d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const char* pch = string;

    if (pch != NULL)
   809da:	2800      	cmp	r0, #0
   809dc:	f000 810a 	beq.w	80bf4 <UnityPrint+0x21c>
    {
        while (*pch)
   809e0:	7803      	ldrb	r3, [r0, #0]
   809e2:	2b00      	cmp	r3, #0
   809e4:	f000 8106 	beq.w	80bf4 <UnityPrint+0x21c>
   809e8:	1c44      	adds	r4, r0, #1
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   809ea:	4d83      	ldr	r5, [pc, #524]	; (80bf8 <UnityPrint+0x220>)
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   809ec:	4e83      	ldr	r6, [pc, #524]	; (80bfc <UnityPrint+0x224>)
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   809ee:	4f84      	ldr	r7, [pc, #528]	; (80c00 <UnityPrint+0x228>)
    if (pch != NULL)
    {
        while (*pch)
        {
            // printable characters plus CR & LF are printed
            if ((*pch <= 126) && (*pch >= 32))
   809f0:	f1a3 0220 	sub.w	r2, r3, #32
   809f4:	b2d2      	uxtb	r2, r2
   809f6:	2a5e      	cmp	r2, #94	; 0x5e
   809f8:	d82a      	bhi.n	80a50 <UnityPrint+0x78>
            {
                UNITY_OUTPUT_CHAR(*pch);
   809fa:	6828      	ldr	r0, [r5, #0]
   809fc:	6882      	ldr	r2, [r0, #8]
   809fe:	6893      	ldr	r3, [r2, #8]
   80a00:	3b01      	subs	r3, #1
   80a02:	6093      	str	r3, [r2, #8]
   80a04:	2b00      	cmp	r3, #0
   80a06:	da18      	bge.n	80a3a <UnityPrint+0x62>
   80a08:	6882      	ldr	r2, [r0, #8]
   80a0a:	6891      	ldr	r1, [r2, #8]
   80a0c:	6993      	ldr	r3, [r2, #24]
   80a0e:	4299      	cmp	r1, r3
   80a10:	db0f      	blt.n	80a32 <UnityPrint+0x5a>
   80a12:	6813      	ldr	r3, [r2, #0]
   80a14:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   80a18:	701a      	strb	r2, [r3, #0]
   80a1a:	6828      	ldr	r0, [r5, #0]
   80a1c:	6882      	ldr	r2, [r0, #8]
   80a1e:	6813      	ldr	r3, [r2, #0]
   80a20:	7819      	ldrb	r1, [r3, #0]
   80a22:	290a      	cmp	r1, #10
   80a24:	d002      	beq.n	80a2c <UnityPrint+0x54>
   80a26:	3301      	adds	r3, #1
   80a28:	6013      	str	r3, [r2, #0]
   80a2a:	e0de      	b.n	80bea <UnityPrint+0x212>
   80a2c:	210a      	movs	r1, #10
   80a2e:	47b8      	blx	r7
   80a30:	e0db      	b.n	80bea <UnityPrint+0x212>
   80a32:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   80a36:	47b8      	blx	r7
   80a38:	e0d7      	b.n	80bea <UnityPrint+0x212>
   80a3a:	6883      	ldr	r3, [r0, #8]
   80a3c:	681b      	ldr	r3, [r3, #0]
   80a3e:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   80a42:	701a      	strb	r2, [r3, #0]
   80a44:	682b      	ldr	r3, [r5, #0]
   80a46:	689b      	ldr	r3, [r3, #8]
   80a48:	681a      	ldr	r2, [r3, #0]
   80a4a:	3201      	adds	r2, #1
   80a4c:	601a      	str	r2, [r3, #0]
   80a4e:	e0cc      	b.n	80bea <UnityPrint+0x212>
            }
            //write escaped carriage returns
            else if (*pch == 13)
   80a50:	2b0d      	cmp	r3, #13
   80a52:	d14e      	bne.n	80af2 <UnityPrint+0x11a>
            {
                UNITY_OUTPUT_CHAR('\\');
   80a54:	6828      	ldr	r0, [r5, #0]
   80a56:	6882      	ldr	r2, [r0, #8]
   80a58:	6893      	ldr	r3, [r2, #8]
   80a5a:	3b01      	subs	r3, #1
   80a5c:	6093      	str	r3, [r2, #8]
   80a5e:	2b00      	cmp	r3, #0
   80a60:	da16      	bge.n	80a90 <UnityPrint+0xb8>
   80a62:	6882      	ldr	r2, [r0, #8]
   80a64:	6891      	ldr	r1, [r2, #8]
   80a66:	6993      	ldr	r3, [r2, #24]
   80a68:	4299      	cmp	r1, r3
   80a6a:	db0e      	blt.n	80a8a <UnityPrint+0xb2>
   80a6c:	6813      	ldr	r3, [r2, #0]
   80a6e:	225c      	movs	r2, #92	; 0x5c
   80a70:	701a      	strb	r2, [r3, #0]
   80a72:	6828      	ldr	r0, [r5, #0]
   80a74:	6882      	ldr	r2, [r0, #8]
   80a76:	6813      	ldr	r3, [r2, #0]
   80a78:	7819      	ldrb	r1, [r3, #0]
   80a7a:	290a      	cmp	r1, #10
   80a7c:	d002      	beq.n	80a84 <UnityPrint+0xac>
   80a7e:	3301      	adds	r3, #1
   80a80:	6013      	str	r3, [r2, #0]
   80a82:	e00e      	b.n	80aa2 <UnityPrint+0xca>
   80a84:	210a      	movs	r1, #10
   80a86:	47b8      	blx	r7
   80a88:	e00b      	b.n	80aa2 <UnityPrint+0xca>
   80a8a:	215c      	movs	r1, #92	; 0x5c
   80a8c:	47b8      	blx	r7
   80a8e:	e008      	b.n	80aa2 <UnityPrint+0xca>
   80a90:	6883      	ldr	r3, [r0, #8]
   80a92:	681b      	ldr	r3, [r3, #0]
   80a94:	225c      	movs	r2, #92	; 0x5c
   80a96:	701a      	strb	r2, [r3, #0]
   80a98:	682b      	ldr	r3, [r5, #0]
   80a9a:	689b      	ldr	r3, [r3, #8]
   80a9c:	681a      	ldr	r2, [r3, #0]
   80a9e:	3201      	adds	r2, #1
   80aa0:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('r');
   80aa2:	6828      	ldr	r0, [r5, #0]
   80aa4:	6882      	ldr	r2, [r0, #8]
   80aa6:	6893      	ldr	r3, [r2, #8]
   80aa8:	3b01      	subs	r3, #1
   80aaa:	6093      	str	r3, [r2, #8]
   80aac:	2b00      	cmp	r3, #0
   80aae:	da16      	bge.n	80ade <UnityPrint+0x106>
   80ab0:	6882      	ldr	r2, [r0, #8]
   80ab2:	6891      	ldr	r1, [r2, #8]
   80ab4:	6993      	ldr	r3, [r2, #24]
   80ab6:	4299      	cmp	r1, r3
   80ab8:	db0e      	blt.n	80ad8 <UnityPrint+0x100>
   80aba:	6813      	ldr	r3, [r2, #0]
   80abc:	2272      	movs	r2, #114	; 0x72
   80abe:	701a      	strb	r2, [r3, #0]
   80ac0:	6828      	ldr	r0, [r5, #0]
   80ac2:	6882      	ldr	r2, [r0, #8]
   80ac4:	6813      	ldr	r3, [r2, #0]
   80ac6:	7819      	ldrb	r1, [r3, #0]
   80ac8:	290a      	cmp	r1, #10
   80aca:	d002      	beq.n	80ad2 <UnityPrint+0xfa>
   80acc:	3301      	adds	r3, #1
   80ace:	6013      	str	r3, [r2, #0]
   80ad0:	e08b      	b.n	80bea <UnityPrint+0x212>
   80ad2:	210a      	movs	r1, #10
   80ad4:	47b8      	blx	r7
   80ad6:	e088      	b.n	80bea <UnityPrint+0x212>
   80ad8:	2172      	movs	r1, #114	; 0x72
   80ada:	47b8      	blx	r7
   80adc:	e085      	b.n	80bea <UnityPrint+0x212>
   80ade:	6883      	ldr	r3, [r0, #8]
   80ae0:	681b      	ldr	r3, [r3, #0]
   80ae2:	2272      	movs	r2, #114	; 0x72
   80ae4:	701a      	strb	r2, [r3, #0]
   80ae6:	682b      	ldr	r3, [r5, #0]
   80ae8:	689b      	ldr	r3, [r3, #8]
   80aea:	681a      	ldr	r2, [r3, #0]
   80aec:	3201      	adds	r2, #1
   80aee:	601a      	str	r2, [r3, #0]
   80af0:	e07b      	b.n	80bea <UnityPrint+0x212>
            }
            //write escaped line feeds
            else if (*pch == 10)
   80af2:	2b0a      	cmp	r3, #10
   80af4:	d14e      	bne.n	80b94 <UnityPrint+0x1bc>
            {
                UNITY_OUTPUT_CHAR('\\');
   80af6:	6828      	ldr	r0, [r5, #0]
   80af8:	6882      	ldr	r2, [r0, #8]
   80afa:	6893      	ldr	r3, [r2, #8]
   80afc:	3b01      	subs	r3, #1
   80afe:	6093      	str	r3, [r2, #8]
   80b00:	2b00      	cmp	r3, #0
   80b02:	da16      	bge.n	80b32 <UnityPrint+0x15a>
   80b04:	6882      	ldr	r2, [r0, #8]
   80b06:	6891      	ldr	r1, [r2, #8]
   80b08:	6993      	ldr	r3, [r2, #24]
   80b0a:	4299      	cmp	r1, r3
   80b0c:	db0e      	blt.n	80b2c <UnityPrint+0x154>
   80b0e:	6813      	ldr	r3, [r2, #0]
   80b10:	225c      	movs	r2, #92	; 0x5c
   80b12:	701a      	strb	r2, [r3, #0]
   80b14:	6828      	ldr	r0, [r5, #0]
   80b16:	6882      	ldr	r2, [r0, #8]
   80b18:	6813      	ldr	r3, [r2, #0]
   80b1a:	7819      	ldrb	r1, [r3, #0]
   80b1c:	290a      	cmp	r1, #10
   80b1e:	d002      	beq.n	80b26 <UnityPrint+0x14e>
   80b20:	3301      	adds	r3, #1
   80b22:	6013      	str	r3, [r2, #0]
   80b24:	e00e      	b.n	80b44 <UnityPrint+0x16c>
   80b26:	210a      	movs	r1, #10
   80b28:	47b8      	blx	r7
   80b2a:	e00b      	b.n	80b44 <UnityPrint+0x16c>
   80b2c:	215c      	movs	r1, #92	; 0x5c
   80b2e:	47b8      	blx	r7
   80b30:	e008      	b.n	80b44 <UnityPrint+0x16c>
   80b32:	6883      	ldr	r3, [r0, #8]
   80b34:	681b      	ldr	r3, [r3, #0]
   80b36:	225c      	movs	r2, #92	; 0x5c
   80b38:	701a      	strb	r2, [r3, #0]
   80b3a:	682b      	ldr	r3, [r5, #0]
   80b3c:	689b      	ldr	r3, [r3, #8]
   80b3e:	681a      	ldr	r2, [r3, #0]
   80b40:	3201      	adds	r2, #1
   80b42:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('n');
   80b44:	6828      	ldr	r0, [r5, #0]
   80b46:	6882      	ldr	r2, [r0, #8]
   80b48:	6893      	ldr	r3, [r2, #8]
   80b4a:	3b01      	subs	r3, #1
   80b4c:	6093      	str	r3, [r2, #8]
   80b4e:	2b00      	cmp	r3, #0
   80b50:	da16      	bge.n	80b80 <UnityPrint+0x1a8>
   80b52:	6882      	ldr	r2, [r0, #8]
   80b54:	6891      	ldr	r1, [r2, #8]
   80b56:	6993      	ldr	r3, [r2, #24]
   80b58:	4299      	cmp	r1, r3
   80b5a:	db0e      	blt.n	80b7a <UnityPrint+0x1a2>
   80b5c:	6813      	ldr	r3, [r2, #0]
   80b5e:	226e      	movs	r2, #110	; 0x6e
   80b60:	701a      	strb	r2, [r3, #0]
   80b62:	6828      	ldr	r0, [r5, #0]
   80b64:	6882      	ldr	r2, [r0, #8]
   80b66:	6813      	ldr	r3, [r2, #0]
   80b68:	7819      	ldrb	r1, [r3, #0]
   80b6a:	290a      	cmp	r1, #10
   80b6c:	d002      	beq.n	80b74 <UnityPrint+0x19c>
   80b6e:	3301      	adds	r3, #1
   80b70:	6013      	str	r3, [r2, #0]
   80b72:	e03a      	b.n	80bea <UnityPrint+0x212>
   80b74:	210a      	movs	r1, #10
   80b76:	47b8      	blx	r7
   80b78:	e037      	b.n	80bea <UnityPrint+0x212>
   80b7a:	216e      	movs	r1, #110	; 0x6e
   80b7c:	47b8      	blx	r7
   80b7e:	e034      	b.n	80bea <UnityPrint+0x212>
   80b80:	6883      	ldr	r3, [r0, #8]
   80b82:	681b      	ldr	r3, [r3, #0]
   80b84:	226e      	movs	r2, #110	; 0x6e
   80b86:	701a      	strb	r2, [r3, #0]
   80b88:	682b      	ldr	r3, [r5, #0]
   80b8a:	689b      	ldr	r3, [r3, #8]
   80b8c:	681a      	ldr	r2, [r3, #0]
   80b8e:	3201      	adds	r2, #1
   80b90:	601a      	str	r2, [r3, #0]
   80b92:	e02a      	b.n	80bea <UnityPrint+0x212>
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80b94:	6828      	ldr	r0, [r5, #0]
   80b96:	6882      	ldr	r2, [r0, #8]
   80b98:	6893      	ldr	r3, [r2, #8]
   80b9a:	3b01      	subs	r3, #1
   80b9c:	6093      	str	r3, [r2, #8]
   80b9e:	2b00      	cmp	r3, #0
   80ba0:	da16      	bge.n	80bd0 <UnityPrint+0x1f8>
   80ba2:	6882      	ldr	r2, [r0, #8]
   80ba4:	6891      	ldr	r1, [r2, #8]
   80ba6:	6993      	ldr	r3, [r2, #24]
   80ba8:	4299      	cmp	r1, r3
   80baa:	db0e      	blt.n	80bca <UnityPrint+0x1f2>
   80bac:	6813      	ldr	r3, [r2, #0]
   80bae:	225c      	movs	r2, #92	; 0x5c
   80bb0:	701a      	strb	r2, [r3, #0]
   80bb2:	6828      	ldr	r0, [r5, #0]
   80bb4:	6882      	ldr	r2, [r0, #8]
   80bb6:	6813      	ldr	r3, [r2, #0]
   80bb8:	7819      	ldrb	r1, [r3, #0]
   80bba:	290a      	cmp	r1, #10
   80bbc:	d002      	beq.n	80bc4 <UnityPrint+0x1ec>
   80bbe:	3301      	adds	r3, #1
   80bc0:	6013      	str	r3, [r2, #0]
   80bc2:	e00e      	b.n	80be2 <UnityPrint+0x20a>
   80bc4:	210a      	movs	r1, #10
   80bc6:	47b8      	blx	r7
   80bc8:	e00b      	b.n	80be2 <UnityPrint+0x20a>
   80bca:	215c      	movs	r1, #92	; 0x5c
   80bcc:	47b8      	blx	r7
   80bce:	e008      	b.n	80be2 <UnityPrint+0x20a>
   80bd0:	6883      	ldr	r3, [r0, #8]
   80bd2:	681b      	ldr	r3, [r3, #0]
   80bd4:	225c      	movs	r2, #92	; 0x5c
   80bd6:	701a      	strb	r2, [r3, #0]
   80bd8:	682b      	ldr	r3, [r5, #0]
   80bda:	689b      	ldr	r3, [r3, #8]
   80bdc:	681a      	ldr	r2, [r3, #0]
   80bde:	3201      	adds	r2, #1
   80be0:	601a      	str	r2, [r3, #0]
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   80be2:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   80be6:	2102      	movs	r1, #2
   80be8:	47b0      	blx	r6
{
    const char* pch = string;

    if (pch != NULL)
    {
        while (*pch)
   80bea:	f814 3b01 	ldrb.w	r3, [r4], #1
   80bee:	2b00      	cmp	r3, #0
   80bf0:	f47f aefe 	bne.w	809f0 <UnityPrint+0x18>
   80bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80bf6:	bf00      	nop
   80bf8:	20070008 	.word	0x20070008
   80bfc:	0008084d 	.word	0x0008084d
   80c00:	00081e4d 	.word	0x00081e4d

00080c04 <UnityTestResultsBegin>:
    UnityPrint(UnityStrOk);
}

//-----------------------------------------------
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
   80c04:	b538      	push	{r3, r4, r5, lr}
   80c06:	460d      	mov	r5, r1
    UnityPrint(file);
   80c08:	4b46      	ldr	r3, [pc, #280]	; (80d24 <UnityTestResultsBegin+0x120>)
   80c0a:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80c0c:	4b46      	ldr	r3, [pc, #280]	; (80d28 <UnityTestResultsBegin+0x124>)
   80c0e:	6818      	ldr	r0, [r3, #0]
   80c10:	6884      	ldr	r4, [r0, #8]
   80c12:	68a2      	ldr	r2, [r4, #8]
   80c14:	3a01      	subs	r2, #1
   80c16:	60a2      	str	r2, [r4, #8]
   80c18:	2a00      	cmp	r2, #0
   80c1a:	da19      	bge.n	80c50 <UnityTestResultsBegin+0x4c>
   80c1c:	6882      	ldr	r2, [r0, #8]
   80c1e:	6893      	ldr	r3, [r2, #8]
   80c20:	6991      	ldr	r1, [r2, #24]
   80c22:	428b      	cmp	r3, r1
   80c24:	db10      	blt.n	80c48 <UnityTestResultsBegin+0x44>
   80c26:	6813      	ldr	r3, [r2, #0]
   80c28:	223a      	movs	r2, #58	; 0x3a
   80c2a:	701a      	strb	r2, [r3, #0]
   80c2c:	4b3e      	ldr	r3, [pc, #248]	; (80d28 <UnityTestResultsBegin+0x124>)
   80c2e:	6818      	ldr	r0, [r3, #0]
   80c30:	6882      	ldr	r2, [r0, #8]
   80c32:	6813      	ldr	r3, [r2, #0]
   80c34:	7819      	ldrb	r1, [r3, #0]
   80c36:	290a      	cmp	r1, #10
   80c38:	d002      	beq.n	80c40 <UnityTestResultsBegin+0x3c>
   80c3a:	3301      	adds	r3, #1
   80c3c:	6013      	str	r3, [r2, #0]
   80c3e:	e011      	b.n	80c64 <UnityTestResultsBegin+0x60>
   80c40:	210a      	movs	r1, #10
   80c42:	4b3a      	ldr	r3, [pc, #232]	; (80d2c <UnityTestResultsBegin+0x128>)
   80c44:	4798      	blx	r3
   80c46:	e00d      	b.n	80c64 <UnityTestResultsBegin+0x60>
   80c48:	213a      	movs	r1, #58	; 0x3a
   80c4a:	4b38      	ldr	r3, [pc, #224]	; (80d2c <UnityTestResultsBegin+0x128>)
   80c4c:	4798      	blx	r3
   80c4e:	e009      	b.n	80c64 <UnityTestResultsBegin+0x60>
   80c50:	6883      	ldr	r3, [r0, #8]
   80c52:	681b      	ldr	r3, [r3, #0]
   80c54:	223a      	movs	r2, #58	; 0x3a
   80c56:	701a      	strb	r2, [r3, #0]
   80c58:	4b33      	ldr	r3, [pc, #204]	; (80d28 <UnityTestResultsBegin+0x124>)
   80c5a:	681b      	ldr	r3, [r3, #0]
   80c5c:	689b      	ldr	r3, [r3, #8]
   80c5e:	681a      	ldr	r2, [r3, #0]
   80c60:	3201      	adds	r2, #1
   80c62:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)line);
   80c64:	4628      	mov	r0, r5
   80c66:	4b32      	ldr	r3, [pc, #200]	; (80d30 <UnityTestResultsBegin+0x12c>)
   80c68:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80c6a:	4b2f      	ldr	r3, [pc, #188]	; (80d28 <UnityTestResultsBegin+0x124>)
   80c6c:	6818      	ldr	r0, [r3, #0]
   80c6e:	6882      	ldr	r2, [r0, #8]
   80c70:	6893      	ldr	r3, [r2, #8]
   80c72:	3b01      	subs	r3, #1
   80c74:	6093      	str	r3, [r2, #8]
   80c76:	2b00      	cmp	r3, #0
   80c78:	da19      	bge.n	80cae <UnityTestResultsBegin+0xaa>
   80c7a:	6882      	ldr	r2, [r0, #8]
   80c7c:	6891      	ldr	r1, [r2, #8]
   80c7e:	6993      	ldr	r3, [r2, #24]
   80c80:	4299      	cmp	r1, r3
   80c82:	db10      	blt.n	80ca6 <UnityTestResultsBegin+0xa2>
   80c84:	6813      	ldr	r3, [r2, #0]
   80c86:	223a      	movs	r2, #58	; 0x3a
   80c88:	701a      	strb	r2, [r3, #0]
   80c8a:	4b27      	ldr	r3, [pc, #156]	; (80d28 <UnityTestResultsBegin+0x124>)
   80c8c:	6818      	ldr	r0, [r3, #0]
   80c8e:	6882      	ldr	r2, [r0, #8]
   80c90:	6813      	ldr	r3, [r2, #0]
   80c92:	7819      	ldrb	r1, [r3, #0]
   80c94:	290a      	cmp	r1, #10
   80c96:	d002      	beq.n	80c9e <UnityTestResultsBegin+0x9a>
   80c98:	3301      	adds	r3, #1
   80c9a:	6013      	str	r3, [r2, #0]
   80c9c:	e011      	b.n	80cc2 <UnityTestResultsBegin+0xbe>
   80c9e:	210a      	movs	r1, #10
   80ca0:	4b22      	ldr	r3, [pc, #136]	; (80d2c <UnityTestResultsBegin+0x128>)
   80ca2:	4798      	blx	r3
   80ca4:	e00d      	b.n	80cc2 <UnityTestResultsBegin+0xbe>
   80ca6:	213a      	movs	r1, #58	; 0x3a
   80ca8:	4b20      	ldr	r3, [pc, #128]	; (80d2c <UnityTestResultsBegin+0x128>)
   80caa:	4798      	blx	r3
   80cac:	e009      	b.n	80cc2 <UnityTestResultsBegin+0xbe>
   80cae:	6883      	ldr	r3, [r0, #8]
   80cb0:	681b      	ldr	r3, [r3, #0]
   80cb2:	223a      	movs	r2, #58	; 0x3a
   80cb4:	701a      	strb	r2, [r3, #0]
   80cb6:	4b1c      	ldr	r3, [pc, #112]	; (80d28 <UnityTestResultsBegin+0x124>)
   80cb8:	681b      	ldr	r3, [r3, #0]
   80cba:	689b      	ldr	r3, [r3, #8]
   80cbc:	681a      	ldr	r2, [r3, #0]
   80cbe:	3201      	adds	r2, #1
   80cc0:	601a      	str	r2, [r3, #0]
    UnityPrint(Unity.CurrentTestName);
   80cc2:	4b1c      	ldr	r3, [pc, #112]	; (80d34 <UnityTestResultsBegin+0x130>)
   80cc4:	6858      	ldr	r0, [r3, #4]
   80cc6:	4b17      	ldr	r3, [pc, #92]	; (80d24 <UnityTestResultsBegin+0x120>)
   80cc8:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80cca:	4b17      	ldr	r3, [pc, #92]	; (80d28 <UnityTestResultsBegin+0x124>)
   80ccc:	6818      	ldr	r0, [r3, #0]
   80cce:	6882      	ldr	r2, [r0, #8]
   80cd0:	6893      	ldr	r3, [r2, #8]
   80cd2:	3b01      	subs	r3, #1
   80cd4:	6093      	str	r3, [r2, #8]
   80cd6:	2b00      	cmp	r3, #0
   80cd8:	da19      	bge.n	80d0e <UnityTestResultsBegin+0x10a>
   80cda:	6882      	ldr	r2, [r0, #8]
   80cdc:	6891      	ldr	r1, [r2, #8]
   80cde:	6993      	ldr	r3, [r2, #24]
   80ce0:	4299      	cmp	r1, r3
   80ce2:	db10      	blt.n	80d06 <UnityTestResultsBegin+0x102>
   80ce4:	6813      	ldr	r3, [r2, #0]
   80ce6:	223a      	movs	r2, #58	; 0x3a
   80ce8:	701a      	strb	r2, [r3, #0]
   80cea:	4b0f      	ldr	r3, [pc, #60]	; (80d28 <UnityTestResultsBegin+0x124>)
   80cec:	6818      	ldr	r0, [r3, #0]
   80cee:	6882      	ldr	r2, [r0, #8]
   80cf0:	6813      	ldr	r3, [r2, #0]
   80cf2:	7819      	ldrb	r1, [r3, #0]
   80cf4:	290a      	cmp	r1, #10
   80cf6:	d002      	beq.n	80cfe <UnityTestResultsBegin+0xfa>
   80cf8:	3301      	adds	r3, #1
   80cfa:	6013      	str	r3, [r2, #0]
   80cfc:	bd38      	pop	{r3, r4, r5, pc}
   80cfe:	210a      	movs	r1, #10
   80d00:	4b0a      	ldr	r3, [pc, #40]	; (80d2c <UnityTestResultsBegin+0x128>)
   80d02:	4798      	blx	r3
   80d04:	bd38      	pop	{r3, r4, r5, pc}
   80d06:	213a      	movs	r1, #58	; 0x3a
   80d08:	4b08      	ldr	r3, [pc, #32]	; (80d2c <UnityTestResultsBegin+0x128>)
   80d0a:	4798      	blx	r3
   80d0c:	bd38      	pop	{r3, r4, r5, pc}
   80d0e:	6883      	ldr	r3, [r0, #8]
   80d10:	681b      	ldr	r3, [r3, #0]
   80d12:	223a      	movs	r2, #58	; 0x3a
   80d14:	701a      	strb	r2, [r3, #0]
   80d16:	4b04      	ldr	r3, [pc, #16]	; (80d28 <UnityTestResultsBegin+0x124>)
   80d18:	681b      	ldr	r3, [r3, #0]
   80d1a:	689b      	ldr	r3, [r3, #8]
   80d1c:	681a      	ldr	r2, [r3, #0]
   80d1e:	3201      	adds	r2, #1
   80d20:	601a      	str	r2, [r3, #0]
   80d22:	bd38      	pop	{r3, r4, r5, pc}
   80d24:	000809d9 	.word	0x000809d9
   80d28:	20070008 	.word	0x20070008
   80d2c:	00081e4d 	.word	0x00081e4d
   80d30:	000806b1 	.word	0x000806b1
   80d34:	200709a0 	.word	0x200709a0

00080d38 <UnityTestResultsFailBegin>:
}

//-----------------------------------------------
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
   80d38:	b508      	push	{r3, lr}
   80d3a:	4601      	mov	r1, r0
    UnityTestResultsBegin(Unity.TestFile, line);
   80d3c:	4b19      	ldr	r3, [pc, #100]	; (80da4 <UnityTestResultsFailBegin+0x6c>)
   80d3e:	6818      	ldr	r0, [r3, #0]
   80d40:	4b19      	ldr	r3, [pc, #100]	; (80da8 <UnityTestResultsFailBegin+0x70>)
   80d42:	4798      	blx	r3
    UnityPrint(UnityStrFail);
   80d44:	4819      	ldr	r0, [pc, #100]	; (80dac <UnityTestResultsFailBegin+0x74>)
   80d46:	4b1a      	ldr	r3, [pc, #104]	; (80db0 <UnityTestResultsFailBegin+0x78>)
   80d48:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80d4a:	4b1a      	ldr	r3, [pc, #104]	; (80db4 <UnityTestResultsFailBegin+0x7c>)
   80d4c:	6818      	ldr	r0, [r3, #0]
   80d4e:	6882      	ldr	r2, [r0, #8]
   80d50:	6893      	ldr	r3, [r2, #8]
   80d52:	3b01      	subs	r3, #1
   80d54:	6093      	str	r3, [r2, #8]
   80d56:	2b00      	cmp	r3, #0
   80d58:	da19      	bge.n	80d8e <UnityTestResultsFailBegin+0x56>
   80d5a:	6882      	ldr	r2, [r0, #8]
   80d5c:	6891      	ldr	r1, [r2, #8]
   80d5e:	6993      	ldr	r3, [r2, #24]
   80d60:	4299      	cmp	r1, r3
   80d62:	db10      	blt.n	80d86 <UnityTestResultsFailBegin+0x4e>
   80d64:	6813      	ldr	r3, [r2, #0]
   80d66:	223a      	movs	r2, #58	; 0x3a
   80d68:	701a      	strb	r2, [r3, #0]
   80d6a:	4b12      	ldr	r3, [pc, #72]	; (80db4 <UnityTestResultsFailBegin+0x7c>)
   80d6c:	6818      	ldr	r0, [r3, #0]
   80d6e:	6882      	ldr	r2, [r0, #8]
   80d70:	6813      	ldr	r3, [r2, #0]
   80d72:	7819      	ldrb	r1, [r3, #0]
   80d74:	290a      	cmp	r1, #10
   80d76:	d002      	beq.n	80d7e <UnityTestResultsFailBegin+0x46>
   80d78:	3301      	adds	r3, #1
   80d7a:	6013      	str	r3, [r2, #0]
   80d7c:	bd08      	pop	{r3, pc}
   80d7e:	210a      	movs	r1, #10
   80d80:	4b0d      	ldr	r3, [pc, #52]	; (80db8 <UnityTestResultsFailBegin+0x80>)
   80d82:	4798      	blx	r3
   80d84:	bd08      	pop	{r3, pc}
   80d86:	213a      	movs	r1, #58	; 0x3a
   80d88:	4b0b      	ldr	r3, [pc, #44]	; (80db8 <UnityTestResultsFailBegin+0x80>)
   80d8a:	4798      	blx	r3
   80d8c:	bd08      	pop	{r3, pc}
   80d8e:	6883      	ldr	r3, [r0, #8]
   80d90:	681b      	ldr	r3, [r3, #0]
   80d92:	223a      	movs	r2, #58	; 0x3a
   80d94:	701a      	strb	r2, [r3, #0]
   80d96:	4b07      	ldr	r3, [pc, #28]	; (80db4 <UnityTestResultsFailBegin+0x7c>)
   80d98:	681b      	ldr	r3, [r3, #0]
   80d9a:	689b      	ldr	r3, [r3, #8]
   80d9c:	681a      	ldr	r2, [r3, #0]
   80d9e:	3201      	adds	r2, #1
   80da0:	601a      	str	r2, [r3, #0]
   80da2:	bd08      	pop	{r3, pc}
   80da4:	200709a0 	.word	0x200709a0
   80da8:	00080c05 	.word	0x00080c05
   80dac:	00082da8 	.word	0x00082da8
   80db0:	000809d9 	.word	0x000809d9
   80db4:	20070008 	.word	0x20070008
   80db8:	00081e4d 	.word	0x00081e4d

00080dbc <UnityAddMsgIfSpecified>:
    UNITY_PRINT_EOL;
}

//-----------------------------------------------
static void UnityAddMsgIfSpecified(const char* msg)
{
   80dbc:	b538      	push	{r3, r4, r5, lr}
    if (msg)
   80dbe:	4605      	mov	r5, r0
   80dc0:	b120      	cbz	r0, 80dcc <UnityAddMsgIfSpecified+0x10>
    {
        UnityPrint(UnityStrSpacer);
   80dc2:	4803      	ldr	r0, [pc, #12]	; (80dd0 <UnityAddMsgIfSpecified+0x14>)
   80dc4:	4c03      	ldr	r4, [pc, #12]	; (80dd4 <UnityAddMsgIfSpecified+0x18>)
   80dc6:	47a0      	blx	r4
        UnityPrint(msg);
   80dc8:	4628      	mov	r0, r5
   80dca:	47a0      	blx	r4
   80dcc:	bd38      	pop	{r3, r4, r5, pc}
   80dce:	bf00      	nop
   80dd0:	00082d9c 	.word	0x00082d9c
   80dd4:	000809d9 	.word	0x000809d9

00080dd8 <UnityPrintMask>:
    }
}

//-----------------------------------------------
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
   80dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80ddc:	4607      	mov	r7, r0
   80dde:	4688      	mov	r8, r1
   80de0:	2520      	movs	r5, #32
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
   80de2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
                UNITY_OUTPUT_CHAR('0');
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   80de6:	4e43      	ldr	r6, [pc, #268]	; (80ef4 <UnityPrintMask+0x11c>)
   80de8:	f04f 0958 	mov.w	r9, #88	; 0x58
   80dec:	f8df a108 	ldr.w	sl, [pc, #264]	; 80ef8 <UnityPrintMask+0x120>
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
    {
        if (current_bit & mask)
   80df0:	423c      	tst	r4, r7
   80df2:	d052      	beq.n	80e9a <UnityPrintMask+0xc2>
        {
            if (current_bit & number)
   80df4:	ea14 0f08 	tst.w	r4, r8
   80df8:	d027      	beq.n	80e4a <UnityPrintMask+0x72>
            {
                UNITY_OUTPUT_CHAR('1');
   80dfa:	6830      	ldr	r0, [r6, #0]
   80dfc:	6882      	ldr	r2, [r0, #8]
   80dfe:	6893      	ldr	r3, [r2, #8]
   80e00:	3b01      	subs	r3, #1
   80e02:	6093      	str	r3, [r2, #8]
   80e04:	2b00      	cmp	r3, #0
   80e06:	da16      	bge.n	80e36 <UnityPrintMask+0x5e>
   80e08:	6882      	ldr	r2, [r0, #8]
   80e0a:	6891      	ldr	r1, [r2, #8]
   80e0c:	6993      	ldr	r3, [r2, #24]
   80e0e:	4299      	cmp	r1, r3
   80e10:	db0e      	blt.n	80e30 <UnityPrintMask+0x58>
   80e12:	6813      	ldr	r3, [r2, #0]
   80e14:	2231      	movs	r2, #49	; 0x31
   80e16:	701a      	strb	r2, [r3, #0]
   80e18:	6830      	ldr	r0, [r6, #0]
   80e1a:	6882      	ldr	r2, [r0, #8]
   80e1c:	6813      	ldr	r3, [r2, #0]
   80e1e:	7819      	ldrb	r1, [r3, #0]
   80e20:	290a      	cmp	r1, #10
   80e22:	d002      	beq.n	80e2a <UnityPrintMask+0x52>
   80e24:	3301      	adds	r3, #1
   80e26:	6013      	str	r3, [r2, #0]
   80e28:	e05e      	b.n	80ee8 <UnityPrintMask+0x110>
   80e2a:	210a      	movs	r1, #10
   80e2c:	47d0      	blx	sl
   80e2e:	e05b      	b.n	80ee8 <UnityPrintMask+0x110>
   80e30:	2131      	movs	r1, #49	; 0x31
   80e32:	47d0      	blx	sl
   80e34:	e058      	b.n	80ee8 <UnityPrintMask+0x110>
   80e36:	6883      	ldr	r3, [r0, #8]
   80e38:	681b      	ldr	r3, [r3, #0]
   80e3a:	2231      	movs	r2, #49	; 0x31
   80e3c:	701a      	strb	r2, [r3, #0]
   80e3e:	6833      	ldr	r3, [r6, #0]
   80e40:	689b      	ldr	r3, [r3, #8]
   80e42:	681a      	ldr	r2, [r3, #0]
   80e44:	3201      	adds	r2, #1
   80e46:	601a      	str	r2, [r3, #0]
   80e48:	e04e      	b.n	80ee8 <UnityPrintMask+0x110>
            }
            else
            {
                UNITY_OUTPUT_CHAR('0');
   80e4a:	6830      	ldr	r0, [r6, #0]
   80e4c:	6882      	ldr	r2, [r0, #8]
   80e4e:	6893      	ldr	r3, [r2, #8]
   80e50:	3b01      	subs	r3, #1
   80e52:	6093      	str	r3, [r2, #8]
   80e54:	2b00      	cmp	r3, #0
   80e56:	da16      	bge.n	80e86 <UnityPrintMask+0xae>
   80e58:	6882      	ldr	r2, [r0, #8]
   80e5a:	6891      	ldr	r1, [r2, #8]
   80e5c:	6993      	ldr	r3, [r2, #24]
   80e5e:	4299      	cmp	r1, r3
   80e60:	db0e      	blt.n	80e80 <UnityPrintMask+0xa8>
   80e62:	6813      	ldr	r3, [r2, #0]
   80e64:	2230      	movs	r2, #48	; 0x30
   80e66:	701a      	strb	r2, [r3, #0]
   80e68:	6830      	ldr	r0, [r6, #0]
   80e6a:	6882      	ldr	r2, [r0, #8]
   80e6c:	6813      	ldr	r3, [r2, #0]
   80e6e:	7819      	ldrb	r1, [r3, #0]
   80e70:	290a      	cmp	r1, #10
   80e72:	d002      	beq.n	80e7a <UnityPrintMask+0xa2>
   80e74:	3301      	adds	r3, #1
   80e76:	6013      	str	r3, [r2, #0]
   80e78:	e036      	b.n	80ee8 <UnityPrintMask+0x110>
   80e7a:	210a      	movs	r1, #10
   80e7c:	47d0      	blx	sl
   80e7e:	e033      	b.n	80ee8 <UnityPrintMask+0x110>
   80e80:	2130      	movs	r1, #48	; 0x30
   80e82:	47d0      	blx	sl
   80e84:	e030      	b.n	80ee8 <UnityPrintMask+0x110>
   80e86:	6883      	ldr	r3, [r0, #8]
   80e88:	681b      	ldr	r3, [r3, #0]
   80e8a:	2230      	movs	r2, #48	; 0x30
   80e8c:	701a      	strb	r2, [r3, #0]
   80e8e:	6833      	ldr	r3, [r6, #0]
   80e90:	689b      	ldr	r3, [r3, #8]
   80e92:	681a      	ldr	r2, [r3, #0]
   80e94:	3201      	adds	r2, #1
   80e96:	601a      	str	r2, [r3, #0]
   80e98:	e026      	b.n	80ee8 <UnityPrintMask+0x110>
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   80e9a:	6830      	ldr	r0, [r6, #0]
   80e9c:	6882      	ldr	r2, [r0, #8]
   80e9e:	6893      	ldr	r3, [r2, #8]
   80ea0:	3b01      	subs	r3, #1
   80ea2:	6093      	str	r3, [r2, #8]
   80ea4:	2b00      	cmp	r3, #0
   80ea6:	da16      	bge.n	80ed6 <UnityPrintMask+0xfe>
   80ea8:	6882      	ldr	r2, [r0, #8]
   80eaa:	6891      	ldr	r1, [r2, #8]
   80eac:	6993      	ldr	r3, [r2, #24]
   80eae:	4299      	cmp	r1, r3
   80eb0:	db0e      	blt.n	80ed0 <UnityPrintMask+0xf8>
   80eb2:	6813      	ldr	r3, [r2, #0]
   80eb4:	f883 9000 	strb.w	r9, [r3]
   80eb8:	6830      	ldr	r0, [r6, #0]
   80eba:	6882      	ldr	r2, [r0, #8]
   80ebc:	6813      	ldr	r3, [r2, #0]
   80ebe:	7819      	ldrb	r1, [r3, #0]
   80ec0:	290a      	cmp	r1, #10
   80ec2:	d002      	beq.n	80eca <UnityPrintMask+0xf2>
   80ec4:	3301      	adds	r3, #1
   80ec6:	6013      	str	r3, [r2, #0]
   80ec8:	e00e      	b.n	80ee8 <UnityPrintMask+0x110>
   80eca:	210a      	movs	r1, #10
   80ecc:	47d0      	blx	sl
   80ece:	e00b      	b.n	80ee8 <UnityPrintMask+0x110>
   80ed0:	4649      	mov	r1, r9
   80ed2:	47d0      	blx	sl
   80ed4:	e008      	b.n	80ee8 <UnityPrintMask+0x110>
   80ed6:	6883      	ldr	r3, [r0, #8]
   80ed8:	681b      	ldr	r3, [r3, #0]
   80eda:	f883 9000 	strb.w	r9, [r3]
   80ede:	6833      	ldr	r3, [r6, #0]
   80ee0:	689b      	ldr	r3, [r3, #8]
   80ee2:	681a      	ldr	r2, [r3, #0]
   80ee4:	3201      	adds	r2, #1
   80ee6:	601a      	str	r2, [r3, #0]
        }
        current_bit = current_bit >> 1;
   80ee8:	0864      	lsrs	r4, r4, #1
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
   80eea:	3d01      	subs	r5, #1
   80eec:	d180      	bne.n	80df0 <UnityPrintMask+0x18>
        {
            UNITY_OUTPUT_CHAR('X');
        }
        current_bit = current_bit >> 1;
    }
}
   80eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80ef2:	bf00      	nop
   80ef4:	20070008 	.word	0x20070008
   80ef8:	00081e4d 	.word	0x00081e4d

00080efc <UnityPrintFail>:
#endif

//-----------------------------------------------

void UnityPrintFail(void)
{
   80efc:	b508      	push	{r3, lr}
    UnityPrint(UnityStrFail);
   80efe:	4802      	ldr	r0, [pc, #8]	; (80f08 <UnityPrintFail+0xc>)
   80f00:	4b02      	ldr	r3, [pc, #8]	; (80f0c <UnityPrintFail+0x10>)
   80f02:	4798      	blx	r3
   80f04:	bd08      	pop	{r3, pc}
   80f06:	bf00      	nop
   80f08:	00082da8 	.word	0x00082da8
   80f0c:	000809d9 	.word	0x000809d9

00080f10 <UnityPrintOk>:
}

void UnityPrintOk(void)
{
   80f10:	b508      	push	{r3, lr}
    UnityPrint(UnityStrOk);
   80f12:	4802      	ldr	r0, [pc, #8]	; (80f1c <UnityPrintOk+0xc>)
   80f14:	4b02      	ldr	r3, [pc, #8]	; (80f20 <UnityPrintOk+0x10>)
   80f16:	4798      	blx	r3
   80f18:	bd08      	pop	{r3, pc}
   80f1a:	bf00      	nop
   80f1c:	00082d98 	.word	0x00082d98
   80f20:	000809d9 	.word	0x000809d9

00080f24 <UnityConcludeTest>:
    UNITY_OUTPUT_CHAR(':');
}

//-----------------------------------------------
void UnityConcludeTest(void)
{
   80f24:	b508      	push	{r3, lr}
    if (Unity.CurrentTestIgnored)
   80f26:	4b24      	ldr	r3, [pc, #144]	; (80fb8 <UnityConcludeTest+0x94>)
   80f28:	69db      	ldr	r3, [r3, #28]
   80f2a:	b123      	cbz	r3, 80f36 <UnityConcludeTest+0x12>
    {
        Unity.TestIgnores++;
   80f2c:	4b22      	ldr	r3, [pc, #136]	; (80fb8 <UnityConcludeTest+0x94>)
   80f2e:	695a      	ldr	r2, [r3, #20]
   80f30:	3201      	adds	r2, #1
   80f32:	615a      	str	r2, [r3, #20]
   80f34:	e00f      	b.n	80f56 <UnityConcludeTest+0x32>
    }
    else if (!Unity.CurrentTestFailed)
   80f36:	4b20      	ldr	r3, [pc, #128]	; (80fb8 <UnityConcludeTest+0x94>)
   80f38:	699b      	ldr	r3, [r3, #24]
   80f3a:	b943      	cbnz	r3, 80f4e <UnityConcludeTest+0x2a>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
   80f3c:	4b1e      	ldr	r3, [pc, #120]	; (80fb8 <UnityConcludeTest+0x94>)
   80f3e:	6818      	ldr	r0, [r3, #0]
   80f40:	6899      	ldr	r1, [r3, #8]
   80f42:	4b1e      	ldr	r3, [pc, #120]	; (80fbc <UnityConcludeTest+0x98>)
   80f44:	4798      	blx	r3
        UnityPrint(UnityStrPass);
   80f46:	481e      	ldr	r0, [pc, #120]	; (80fc0 <UnityConcludeTest+0x9c>)
   80f48:	4b1e      	ldr	r3, [pc, #120]	; (80fc4 <UnityConcludeTest+0xa0>)
   80f4a:	4798      	blx	r3
   80f4c:	e003      	b.n	80f56 <UnityConcludeTest+0x32>
    }
    else
    {
        Unity.TestFailures++;
   80f4e:	4b1a      	ldr	r3, [pc, #104]	; (80fb8 <UnityConcludeTest+0x94>)
   80f50:	691a      	ldr	r2, [r3, #16]
   80f52:	3201      	adds	r2, #1
   80f54:	611a      	str	r2, [r3, #16]
    }

    Unity.CurrentTestFailed = 0;
   80f56:	4b18      	ldr	r3, [pc, #96]	; (80fb8 <UnityConcludeTest+0x94>)
   80f58:	2200      	movs	r2, #0
   80f5a:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   80f5c:	61da      	str	r2, [r3, #28]
    UNITY_PRINT_EOL;
   80f5e:	4b1a      	ldr	r3, [pc, #104]	; (80fc8 <UnityConcludeTest+0xa4>)
   80f60:	6818      	ldr	r0, [r3, #0]
   80f62:	6882      	ldr	r2, [r0, #8]
   80f64:	6893      	ldr	r3, [r2, #8]
   80f66:	3b01      	subs	r3, #1
   80f68:	6093      	str	r3, [r2, #8]
   80f6a:	2b00      	cmp	r3, #0
   80f6c:	da19      	bge.n	80fa2 <UnityConcludeTest+0x7e>
   80f6e:	6882      	ldr	r2, [r0, #8]
   80f70:	6891      	ldr	r1, [r2, #8]
   80f72:	6993      	ldr	r3, [r2, #24]
   80f74:	4299      	cmp	r1, r3
   80f76:	db10      	blt.n	80f9a <UnityConcludeTest+0x76>
   80f78:	6813      	ldr	r3, [r2, #0]
   80f7a:	220a      	movs	r2, #10
   80f7c:	701a      	strb	r2, [r3, #0]
   80f7e:	4b12      	ldr	r3, [pc, #72]	; (80fc8 <UnityConcludeTest+0xa4>)
   80f80:	6818      	ldr	r0, [r3, #0]
   80f82:	6882      	ldr	r2, [r0, #8]
   80f84:	6813      	ldr	r3, [r2, #0]
   80f86:	7819      	ldrb	r1, [r3, #0]
   80f88:	290a      	cmp	r1, #10
   80f8a:	d002      	beq.n	80f92 <UnityConcludeTest+0x6e>
   80f8c:	3301      	adds	r3, #1
   80f8e:	6013      	str	r3, [r2, #0]
   80f90:	bd08      	pop	{r3, pc}
   80f92:	210a      	movs	r1, #10
   80f94:	4b0d      	ldr	r3, [pc, #52]	; (80fcc <UnityConcludeTest+0xa8>)
   80f96:	4798      	blx	r3
   80f98:	bd08      	pop	{r3, pc}
   80f9a:	210a      	movs	r1, #10
   80f9c:	4b0b      	ldr	r3, [pc, #44]	; (80fcc <UnityConcludeTest+0xa8>)
   80f9e:	4798      	blx	r3
   80fa0:	bd08      	pop	{r3, pc}
   80fa2:	6883      	ldr	r3, [r0, #8]
   80fa4:	681b      	ldr	r3, [r3, #0]
   80fa6:	220a      	movs	r2, #10
   80fa8:	701a      	strb	r2, [r3, #0]
   80faa:	4b07      	ldr	r3, [pc, #28]	; (80fc8 <UnityConcludeTest+0xa4>)
   80fac:	681b      	ldr	r3, [r3, #0]
   80fae:	689b      	ldr	r3, [r3, #8]
   80fb0:	681a      	ldr	r2, [r3, #0]
   80fb2:	3201      	adds	r2, #1
   80fb4:	601a      	str	r2, [r3, #0]
   80fb6:	bd08      	pop	{r3, pc}
   80fb8:	200709a0 	.word	0x200709a0
   80fbc:	00080c05 	.word	0x00080c05
   80fc0:	00082df4 	.word	0x00082df4
   80fc4:	000809d9 	.word	0x000809d9
   80fc8:	20070008 	.word	0x20070008
   80fcc:	00081e4d 	.word	0x00081e4d

00080fd0 <UnityAssertBits>:
void UnityAssertBits(const _U_SINT mask,
                     const _U_SINT expected,
                     const _U_SINT actual,
                     const char* msg,
                     const UNITY_LINE_TYPE lineNumber)
{
   80fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80fd4:	4605      	mov	r5, r0
   80fd6:	460f      	mov	r7, r1
   80fd8:	4616      	mov	r6, r2
   80fda:	4698      	mov	r8, r3
    UNITY_SKIP_EXECUTION;
   80fdc:	4c12      	ldr	r4, [pc, #72]	; (81028 <UnityAssertBits+0x58>)
   80fde:	69a4      	ldr	r4, [r4, #24]
   80fe0:	b9fc      	cbnz	r4, 81022 <UnityAssertBits+0x52>
   80fe2:	4a11      	ldr	r2, [pc, #68]	; (81028 <UnityAssertBits+0x58>)
   80fe4:	69d2      	ldr	r2, [r2, #28]
   80fe6:	b9e2      	cbnz	r2, 81022 <UnityAssertBits+0x52>

    if ((mask & expected) != (mask & actual))
   80fe8:	ea81 0306 	eor.w	r3, r1, r6
   80fec:	4203      	tst	r3, r0
   80fee:	d018      	beq.n	81022 <UnityAssertBits+0x52>
    {
        UnityTestResultsFailBegin(lineNumber);
   80ff0:	9808      	ldr	r0, [sp, #32]
   80ff2:	4b0e      	ldr	r3, [pc, #56]	; (8102c <UnityAssertBits+0x5c>)
   80ff4:	4798      	blx	r3
        UnityPrint(UnityStrExpected);
   80ff6:	480e      	ldr	r0, [pc, #56]	; (81030 <UnityAssertBits+0x60>)
   80ff8:	f8df 9048 	ldr.w	r9, [pc, #72]	; 81044 <UnityAssertBits+0x74>
   80ffc:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)expected);
   80ffe:	4628      	mov	r0, r5
   81000:	4639      	mov	r1, r7
   81002:	4c0c      	ldr	r4, [pc, #48]	; (81034 <UnityAssertBits+0x64>)
   81004:	47a0      	blx	r4
        UnityPrint(UnityStrWas);
   81006:	480c      	ldr	r0, [pc, #48]	; (81038 <UnityAssertBits+0x68>)
   81008:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)actual);
   8100a:	4628      	mov	r0, r5
   8100c:	4631      	mov	r1, r6
   8100e:	47a0      	blx	r4
        UnityAddMsgIfSpecified(msg);
   81010:	4640      	mov	r0, r8
   81012:	4b0a      	ldr	r3, [pc, #40]	; (8103c <UnityAssertBits+0x6c>)
   81014:	4798      	blx	r3
        UNITY_FAIL_AND_BAIL;
   81016:	4804      	ldr	r0, [pc, #16]	; (81028 <UnityAssertBits+0x58>)
   81018:	2101      	movs	r1, #1
   8101a:	6181      	str	r1, [r0, #24]
   8101c:	3020      	adds	r0, #32
   8101e:	4b08      	ldr	r3, [pc, #32]	; (81040 <UnityAssertBits+0x70>)
   81020:	4798      	blx	r3
   81022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81026:	bf00      	nop
   81028:	200709a0 	.word	0x200709a0
   8102c:	00080d39 	.word	0x00080d39
   81030:	00082db0 	.word	0x00082db0
   81034:	00080dd9 	.word	0x00080dd9
   81038:	00082da0 	.word	0x00082da0
   8103c:	00080dbd 	.word	0x00080dbd
   81040:	00081d55 	.word	0x00081d55
   81044:	000809d9 	.word	0x000809d9

00081048 <UnityDefaultTestRun>:
    void setUp(void);
    void tearDown(void);
#endif
//-----------------------------------------------
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
   81048:	b500      	push	{lr}
   8104a:	b083      	sub	sp, #12
   8104c:	9001      	str	r0, [sp, #4]
    Unity.CurrentTestName = FuncName;
   8104e:	480e      	ldr	r0, [pc, #56]	; (81088 <UnityDefaultTestRun+0x40>)
   81050:	6041      	str	r1, [r0, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
   81052:	6082      	str	r2, [r0, #8]
    Unity.NumberOfTests++;
   81054:	68c3      	ldr	r3, [r0, #12]
   81056:	3301      	adds	r3, #1
   81058:	60c3      	str	r3, [r0, #12]
    if (TEST_PROTECT())
   8105a:	3020      	adds	r0, #32
   8105c:	4b0b      	ldr	r3, [pc, #44]	; (8108c <UnityDefaultTestRun+0x44>)
   8105e:	4798      	blx	r3
   81060:	b918      	cbnz	r0, 8106a <UnityDefaultTestRun+0x22>
    {
        setUp();
   81062:	4b0b      	ldr	r3, [pc, #44]	; (81090 <UnityDefaultTestRun+0x48>)
   81064:	4798      	blx	r3
        Func();
   81066:	9b01      	ldr	r3, [sp, #4]
   81068:	4798      	blx	r3
    }
    if (TEST_PROTECT() && !(Unity.CurrentTestIgnored))
   8106a:	480a      	ldr	r0, [pc, #40]	; (81094 <UnityDefaultTestRun+0x4c>)
   8106c:	4b07      	ldr	r3, [pc, #28]	; (8108c <UnityDefaultTestRun+0x44>)
   8106e:	4798      	blx	r3
   81070:	b920      	cbnz	r0, 8107c <UnityDefaultTestRun+0x34>
   81072:	4b05      	ldr	r3, [pc, #20]	; (81088 <UnityDefaultTestRun+0x40>)
   81074:	69db      	ldr	r3, [r3, #28]
   81076:	b90b      	cbnz	r3, 8107c <UnityDefaultTestRun+0x34>
    {
        tearDown();
   81078:	4b07      	ldr	r3, [pc, #28]	; (81098 <UnityDefaultTestRun+0x50>)
   8107a:	4798      	blx	r3
    }
    UnityConcludeTest();
   8107c:	4b07      	ldr	r3, [pc, #28]	; (8109c <UnityDefaultTestRun+0x54>)
   8107e:	4798      	blx	r3
}
   81080:	b003      	add	sp, #12
   81082:	f85d fb04 	ldr.w	pc, [sp], #4
   81086:	bf00      	nop
   81088:	200709a0 	.word	0x200709a0
   8108c:	00081d49 	.word	0x00081d49
   81090:	000801fd 	.word	0x000801fd
   81094:	200709c0 	.word	0x200709c0
   81098:	00080201 	.word	0x00080201
   8109c:	00080f25 	.word	0x00080f25

000810a0 <UnityBegin>:

//-----------------------------------------------
void UnityBegin(const char* filename)
{
    Unity.TestFile = filename;
   810a0:	4b05      	ldr	r3, [pc, #20]	; (810b8 <UnityBegin+0x18>)
   810a2:	6018      	str	r0, [r3, #0]
    Unity.CurrentTestName = NULL;
   810a4:	2200      	movs	r2, #0
   810a6:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
   810a8:	609a      	str	r2, [r3, #8]
    Unity.NumberOfTests = 0;
   810aa:	60da      	str	r2, [r3, #12]
    Unity.TestFailures = 0;
   810ac:	611a      	str	r2, [r3, #16]
    Unity.TestIgnores = 0;
   810ae:	615a      	str	r2, [r3, #20]
    Unity.CurrentTestFailed = 0;
   810b0:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   810b2:	61da      	str	r2, [r3, #28]
   810b4:	4770      	bx	lr
   810b6:	bf00      	nop
   810b8:	200709a0 	.word	0x200709a0

000810bc <UnityEnd>:
    UNITY_OUTPUT_START();
}

//-----------------------------------------------
int UnityEnd(void)
{
   810bc:	b570      	push	{r4, r5, r6, lr}
    UNITY_PRINT_EOL;
   810be:	4b66      	ldr	r3, [pc, #408]	; (81258 <UnityEnd+0x19c>)
   810c0:	6818      	ldr	r0, [r3, #0]
   810c2:	6882      	ldr	r2, [r0, #8]
   810c4:	6893      	ldr	r3, [r2, #8]
   810c6:	3b01      	subs	r3, #1
   810c8:	6093      	str	r3, [r2, #8]
   810ca:	2b00      	cmp	r3, #0
   810cc:	da19      	bge.n	81102 <UnityEnd+0x46>
   810ce:	6882      	ldr	r2, [r0, #8]
   810d0:	6891      	ldr	r1, [r2, #8]
   810d2:	6993      	ldr	r3, [r2, #24]
   810d4:	4299      	cmp	r1, r3
   810d6:	db10      	blt.n	810fa <UnityEnd+0x3e>
   810d8:	6813      	ldr	r3, [r2, #0]
   810da:	220a      	movs	r2, #10
   810dc:	701a      	strb	r2, [r3, #0]
   810de:	4b5e      	ldr	r3, [pc, #376]	; (81258 <UnityEnd+0x19c>)
   810e0:	6818      	ldr	r0, [r3, #0]
   810e2:	6882      	ldr	r2, [r0, #8]
   810e4:	6813      	ldr	r3, [r2, #0]
   810e6:	7819      	ldrb	r1, [r3, #0]
   810e8:	290a      	cmp	r1, #10
   810ea:	d002      	beq.n	810f2 <UnityEnd+0x36>
   810ec:	3301      	adds	r3, #1
   810ee:	6013      	str	r3, [r2, #0]
   810f0:	e011      	b.n	81116 <UnityEnd+0x5a>
   810f2:	210a      	movs	r1, #10
   810f4:	4b59      	ldr	r3, [pc, #356]	; (8125c <UnityEnd+0x1a0>)
   810f6:	4798      	blx	r3
   810f8:	e00d      	b.n	81116 <UnityEnd+0x5a>
   810fa:	210a      	movs	r1, #10
   810fc:	4b57      	ldr	r3, [pc, #348]	; (8125c <UnityEnd+0x1a0>)
   810fe:	4798      	blx	r3
   81100:	e009      	b.n	81116 <UnityEnd+0x5a>
   81102:	6883      	ldr	r3, [r0, #8]
   81104:	681b      	ldr	r3, [r3, #0]
   81106:	220a      	movs	r2, #10
   81108:	701a      	strb	r2, [r3, #0]
   8110a:	4b53      	ldr	r3, [pc, #332]	; (81258 <UnityEnd+0x19c>)
   8110c:	681b      	ldr	r3, [r3, #0]
   8110e:	689b      	ldr	r3, [r3, #8]
   81110:	681a      	ldr	r2, [r3, #0]
   81112:	3201      	adds	r2, #1
   81114:	601a      	str	r2, [r3, #0]
    UnityPrint(UnityStrBreaker);
   81116:	4852      	ldr	r0, [pc, #328]	; (81260 <UnityEnd+0x1a4>)
   81118:	4b52      	ldr	r3, [pc, #328]	; (81264 <UnityEnd+0x1a8>)
   8111a:	4798      	blx	r3
    UNITY_PRINT_EOL;
   8111c:	4b4e      	ldr	r3, [pc, #312]	; (81258 <UnityEnd+0x19c>)
   8111e:	6818      	ldr	r0, [r3, #0]
   81120:	6882      	ldr	r2, [r0, #8]
   81122:	6893      	ldr	r3, [r2, #8]
   81124:	3b01      	subs	r3, #1
   81126:	6093      	str	r3, [r2, #8]
   81128:	2b00      	cmp	r3, #0
   8112a:	da19      	bge.n	81160 <UnityEnd+0xa4>
   8112c:	6882      	ldr	r2, [r0, #8]
   8112e:	6891      	ldr	r1, [r2, #8]
   81130:	6993      	ldr	r3, [r2, #24]
   81132:	4299      	cmp	r1, r3
   81134:	db10      	blt.n	81158 <UnityEnd+0x9c>
   81136:	6813      	ldr	r3, [r2, #0]
   81138:	220a      	movs	r2, #10
   8113a:	701a      	strb	r2, [r3, #0]
   8113c:	4b46      	ldr	r3, [pc, #280]	; (81258 <UnityEnd+0x19c>)
   8113e:	6818      	ldr	r0, [r3, #0]
   81140:	6882      	ldr	r2, [r0, #8]
   81142:	6813      	ldr	r3, [r2, #0]
   81144:	7819      	ldrb	r1, [r3, #0]
   81146:	290a      	cmp	r1, #10
   81148:	d002      	beq.n	81150 <UnityEnd+0x94>
   8114a:	3301      	adds	r3, #1
   8114c:	6013      	str	r3, [r2, #0]
   8114e:	e011      	b.n	81174 <UnityEnd+0xb8>
   81150:	210a      	movs	r1, #10
   81152:	4b42      	ldr	r3, [pc, #264]	; (8125c <UnityEnd+0x1a0>)
   81154:	4798      	blx	r3
   81156:	e00d      	b.n	81174 <UnityEnd+0xb8>
   81158:	210a      	movs	r1, #10
   8115a:	4b40      	ldr	r3, [pc, #256]	; (8125c <UnityEnd+0x1a0>)
   8115c:	4798      	blx	r3
   8115e:	e009      	b.n	81174 <UnityEnd+0xb8>
   81160:	6883      	ldr	r3, [r0, #8]
   81162:	681b      	ldr	r3, [r3, #0]
   81164:	220a      	movs	r2, #10
   81166:	701a      	strb	r2, [r3, #0]
   81168:	4b3b      	ldr	r3, [pc, #236]	; (81258 <UnityEnd+0x19c>)
   8116a:	681b      	ldr	r3, [r3, #0]
   8116c:	689b      	ldr	r3, [r3, #8]
   8116e:	681a      	ldr	r2, [r3, #0]
   81170:	3201      	adds	r2, #1
   81172:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)(Unity.NumberOfTests));
   81174:	4e3c      	ldr	r6, [pc, #240]	; (81268 <UnityEnd+0x1ac>)
   81176:	68f0      	ldr	r0, [r6, #12]
   81178:	4d3c      	ldr	r5, [pc, #240]	; (8126c <UnityEnd+0x1b0>)
   8117a:	47a8      	blx	r5
    UnityPrint(UnityStrResultsTests);
   8117c:	483c      	ldr	r0, [pc, #240]	; (81270 <UnityEnd+0x1b4>)
   8117e:	4c39      	ldr	r4, [pc, #228]	; (81264 <UnityEnd+0x1a8>)
   81180:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestFailures));
   81182:	6930      	ldr	r0, [r6, #16]
   81184:	47a8      	blx	r5
    UnityPrint(UnityStrResultsFailures);
   81186:	483b      	ldr	r0, [pc, #236]	; (81274 <UnityEnd+0x1b8>)
   81188:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestIgnores));
   8118a:	6970      	ldr	r0, [r6, #20]
   8118c:	47a8      	blx	r5
    UnityPrint(UnityStrResultsIgnored);
   8118e:	483a      	ldr	r0, [pc, #232]	; (81278 <UnityEnd+0x1bc>)
   81190:	47a0      	blx	r4
    UNITY_PRINT_EOL;
   81192:	4b31      	ldr	r3, [pc, #196]	; (81258 <UnityEnd+0x19c>)
   81194:	6818      	ldr	r0, [r3, #0]
   81196:	6882      	ldr	r2, [r0, #8]
   81198:	6893      	ldr	r3, [r2, #8]
   8119a:	3b01      	subs	r3, #1
   8119c:	6093      	str	r3, [r2, #8]
   8119e:	2b00      	cmp	r3, #0
   811a0:	da19      	bge.n	811d6 <UnityEnd+0x11a>
   811a2:	6882      	ldr	r2, [r0, #8]
   811a4:	6891      	ldr	r1, [r2, #8]
   811a6:	6993      	ldr	r3, [r2, #24]
   811a8:	4299      	cmp	r1, r3
   811aa:	db10      	blt.n	811ce <UnityEnd+0x112>
   811ac:	6813      	ldr	r3, [r2, #0]
   811ae:	220a      	movs	r2, #10
   811b0:	701a      	strb	r2, [r3, #0]
   811b2:	4b29      	ldr	r3, [pc, #164]	; (81258 <UnityEnd+0x19c>)
   811b4:	6818      	ldr	r0, [r3, #0]
   811b6:	6882      	ldr	r2, [r0, #8]
   811b8:	6813      	ldr	r3, [r2, #0]
   811ba:	7819      	ldrb	r1, [r3, #0]
   811bc:	290a      	cmp	r1, #10
   811be:	d002      	beq.n	811c6 <UnityEnd+0x10a>
   811c0:	3301      	adds	r3, #1
   811c2:	6013      	str	r3, [r2, #0]
   811c4:	e011      	b.n	811ea <UnityEnd+0x12e>
   811c6:	210a      	movs	r1, #10
   811c8:	4b24      	ldr	r3, [pc, #144]	; (8125c <UnityEnd+0x1a0>)
   811ca:	4798      	blx	r3
   811cc:	e00d      	b.n	811ea <UnityEnd+0x12e>
   811ce:	210a      	movs	r1, #10
   811d0:	4b22      	ldr	r3, [pc, #136]	; (8125c <UnityEnd+0x1a0>)
   811d2:	4798      	blx	r3
   811d4:	e009      	b.n	811ea <UnityEnd+0x12e>
   811d6:	6883      	ldr	r3, [r0, #8]
   811d8:	681b      	ldr	r3, [r3, #0]
   811da:	220a      	movs	r2, #10
   811dc:	701a      	strb	r2, [r3, #0]
   811de:	4b1e      	ldr	r3, [pc, #120]	; (81258 <UnityEnd+0x19c>)
   811e0:	681b      	ldr	r3, [r3, #0]
   811e2:	689b      	ldr	r3, [r3, #8]
   811e4:	681a      	ldr	r2, [r3, #0]
   811e6:	3201      	adds	r2, #1
   811e8:	601a      	str	r2, [r3, #0]
    if (Unity.TestFailures == 0U)
   811ea:	4b1f      	ldr	r3, [pc, #124]	; (81268 <UnityEnd+0x1ac>)
   811ec:	691b      	ldr	r3, [r3, #16]
   811ee:	b913      	cbnz	r3, 811f6 <UnityEnd+0x13a>
    {
        UnityPrintOk();
   811f0:	4b22      	ldr	r3, [pc, #136]	; (8127c <UnityEnd+0x1c0>)
   811f2:	4798      	blx	r3
   811f4:	e001      	b.n	811fa <UnityEnd+0x13e>
    }
    else
    {
        UnityPrintFail();
   811f6:	4b22      	ldr	r3, [pc, #136]	; (81280 <UnityEnd+0x1c4>)
   811f8:	4798      	blx	r3
    }
    UNITY_PRINT_EOL;
   811fa:	4b17      	ldr	r3, [pc, #92]	; (81258 <UnityEnd+0x19c>)
   811fc:	6818      	ldr	r0, [r3, #0]
   811fe:	6882      	ldr	r2, [r0, #8]
   81200:	6893      	ldr	r3, [r2, #8]
   81202:	3b01      	subs	r3, #1
   81204:	6093      	str	r3, [r2, #8]
   81206:	2b00      	cmp	r3, #0
   81208:	da19      	bge.n	8123e <UnityEnd+0x182>
   8120a:	6882      	ldr	r2, [r0, #8]
   8120c:	6891      	ldr	r1, [r2, #8]
   8120e:	6993      	ldr	r3, [r2, #24]
   81210:	4299      	cmp	r1, r3
   81212:	db10      	blt.n	81236 <UnityEnd+0x17a>
   81214:	6813      	ldr	r3, [r2, #0]
   81216:	220a      	movs	r2, #10
   81218:	701a      	strb	r2, [r3, #0]
   8121a:	4b0f      	ldr	r3, [pc, #60]	; (81258 <UnityEnd+0x19c>)
   8121c:	6818      	ldr	r0, [r3, #0]
   8121e:	6882      	ldr	r2, [r0, #8]
   81220:	6813      	ldr	r3, [r2, #0]
   81222:	7819      	ldrb	r1, [r3, #0]
   81224:	290a      	cmp	r1, #10
   81226:	d002      	beq.n	8122e <UnityEnd+0x172>
   81228:	3301      	adds	r3, #1
   8122a:	6013      	str	r3, [r2, #0]
   8122c:	e011      	b.n	81252 <UnityEnd+0x196>
   8122e:	210a      	movs	r1, #10
   81230:	4b0a      	ldr	r3, [pc, #40]	; (8125c <UnityEnd+0x1a0>)
   81232:	4798      	blx	r3
   81234:	e00d      	b.n	81252 <UnityEnd+0x196>
   81236:	210a      	movs	r1, #10
   81238:	4b08      	ldr	r3, [pc, #32]	; (8125c <UnityEnd+0x1a0>)
   8123a:	4798      	blx	r3
   8123c:	e009      	b.n	81252 <UnityEnd+0x196>
   8123e:	6883      	ldr	r3, [r0, #8]
   81240:	681b      	ldr	r3, [r3, #0]
   81242:	220a      	movs	r2, #10
   81244:	701a      	strb	r2, [r3, #0]
   81246:	4b04      	ldr	r3, [pc, #16]	; (81258 <UnityEnd+0x19c>)
   81248:	681b      	ldr	r3, [r3, #0]
   8124a:	689b      	ldr	r3, [r3, #8]
   8124c:	681a      	ldr	r2, [r3, #0]
   8124e:	3201      	adds	r2, #1
   81250:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
}
   81252:	4b05      	ldr	r3, [pc, #20]	; (81268 <UnityEnd+0x1ac>)
   81254:	6918      	ldr	r0, [r3, #16]
   81256:	bd70      	pop	{r4, r5, r6, pc}
   81258:	20070008 	.word	0x20070008
   8125c:	00081e4d 	.word	0x00081e4d
   81260:	00082dbc 	.word	0x00082dbc
   81264:	000809d9 	.word	0x000809d9
   81268:	200709a0 	.word	0x200709a0
   8126c:	000806b1 	.word	0x000806b1
   81270:	00082dec 	.word	0x00082dec
   81274:	00082dd4 	.word	0x00082dd4
   81278:	00082de0 	.word	0x00082de0
   8127c:	00080f11 	.word	0x00080f11
   81280:	00080efd 	.word	0x00080efd

00081284 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   81284:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   81286:	685a      	ldr	r2, [r3, #4]
   81288:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   8128a:	6842      	ldr	r2, [r0, #4]
   8128c:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8128e:	685a      	ldr	r2, [r3, #4]
   81290:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   81292:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   81294:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   81296:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81298:	6803      	ldr	r3, [r0, #0]
   8129a:	3301      	adds	r3, #1
   8129c:	6003      	str	r3, [r0, #0]
   8129e:	4770      	bx	lr

000812a0 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   812a0:	6843      	ldr	r3, [r0, #4]
   812a2:	6882      	ldr	r2, [r0, #8]
   812a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   812a6:	6883      	ldr	r3, [r0, #8]
   812a8:	6842      	ldr	r2, [r0, #4]
   812aa:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   812ac:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   812ae:	685a      	ldr	r2, [r3, #4]
   812b0:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   812b2:	bf04      	itt	eq
   812b4:	6882      	ldreq	r2, [r0, #8]
   812b6:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   812b8:	2200      	movs	r2, #0
   812ba:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   812bc:	681a      	ldr	r2, [r3, #0]
   812be:	3a01      	subs	r2, #1
   812c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   812c2:	6818      	ldr	r0, [r3, #0]
}
   812c4:	4770      	bx	lr
   812c6:	bf00      	nop

000812c8 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   812c8:	4b06      	ldr	r3, [pc, #24]	; (812e4 <pxCurrentTCBConst2>)
   812ca:	6819      	ldr	r1, [r3, #0]
   812cc:	6808      	ldr	r0, [r1, #0]
   812ce:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   812d2:	f380 8809 	msr	PSP, r0
   812d6:	f04f 0000 	mov.w	r0, #0
   812da:	f380 8811 	msr	BASEPRI, r0
   812de:	f04e 0e0d 	orr.w	lr, lr, #13
   812e2:	4770      	bx	lr

000812e4 <pxCurrentTCBConst2>:
   812e4:	200708d8 	.word	0x200708d8

000812e8 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   812e8:	f3ef 8011 	mrs	r0, BASEPRI
   812ec:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   812f0:	f381 8811 	msr	BASEPRI, r1
   812f4:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   812f6:	2000      	movs	r0, #0

000812f8 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   812f8:	f380 8811 	msr	BASEPRI, r0
   812fc:	4770      	bx	lr
   812fe:	bf00      	nop

00081300 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   81300:	f3ef 8009 	mrs	r0, PSP
   81304:	4b0c      	ldr	r3, [pc, #48]	; (81338 <pxCurrentTCBConst>)
   81306:	681a      	ldr	r2, [r3, #0]
   81308:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8130c:	6010      	str	r0, [r2, #0]
   8130e:	e92d 4008 	stmdb	sp!, {r3, lr}
   81312:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   81316:	f380 8811 	msr	BASEPRI, r0
   8131a:	f000 f8b5 	bl	81488 <vTaskSwitchContext>
   8131e:	f04f 0000 	mov.w	r0, #0
   81322:	f380 8811 	msr	BASEPRI, r0
   81326:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8132a:	6819      	ldr	r1, [r3, #0]
   8132c:	6808      	ldr	r0, [r1, #0]
   8132e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81332:	f380 8809 	msr	PSP, r0
   81336:	4770      	bx	lr

00081338 <pxCurrentTCBConst>:
   81338:	200708d8 	.word	0x200708d8

0008133c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   8133c:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8133e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81342:	4b05      	ldr	r3, [pc, #20]	; (81358 <SysTick_Handler+0x1c>)
   81344:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   81346:	4b05      	ldr	r3, [pc, #20]	; (8135c <SysTick_Handler+0x20>)
   81348:	4798      	blx	r3
	{
		vTaskIncrementTick();
   8134a:	4b05      	ldr	r3, [pc, #20]	; (81360 <SysTick_Handler+0x24>)
   8134c:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8134e:	2000      	movs	r0, #0
   81350:	4b04      	ldr	r3, [pc, #16]	; (81364 <SysTick_Handler+0x28>)
   81352:	4798      	blx	r3
   81354:	bd08      	pop	{r3, pc}
   81356:	bf00      	nop
   81358:	e000ed04 	.word	0xe000ed04
   8135c:	000812e9 	.word	0x000812e9
   81360:	00081369 	.word	0x00081369
   81364:	000812f9 	.word	0x000812f9

00081368 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8136c:	4b3a      	ldr	r3, [pc, #232]	; (81458 <vTaskIncrementTick+0xf0>)
   8136e:	681b      	ldr	r3, [r3, #0]
   81370:	2b00      	cmp	r3, #0
   81372:	d16b      	bne.n	8144c <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   81374:	4b39      	ldr	r3, [pc, #228]	; (8145c <vTaskIncrementTick+0xf4>)
   81376:	681a      	ldr	r2, [r3, #0]
   81378:	3201      	adds	r2, #1
   8137a:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   8137c:	681b      	ldr	r3, [r3, #0]
   8137e:	bb03      	cbnz	r3, 813c2 <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81380:	4b37      	ldr	r3, [pc, #220]	; (81460 <vTaskIncrementTick+0xf8>)
   81382:	681b      	ldr	r3, [r3, #0]
   81384:	681b      	ldr	r3, [r3, #0]
   81386:	b11b      	cbz	r3, 81390 <vTaskIncrementTick+0x28>
   81388:	4b36      	ldr	r3, [pc, #216]	; (81464 <vTaskIncrementTick+0xfc>)
   8138a:	4798      	blx	r3
   8138c:	bf00      	nop
   8138e:	e7fd      	b.n	8138c <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   81390:	4b33      	ldr	r3, [pc, #204]	; (81460 <vTaskIncrementTick+0xf8>)
   81392:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81394:	4a34      	ldr	r2, [pc, #208]	; (81468 <vTaskIncrementTick+0x100>)
   81396:	6810      	ldr	r0, [r2, #0]
   81398:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   8139a:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   8139c:	4a33      	ldr	r2, [pc, #204]	; (8146c <vTaskIncrementTick+0x104>)
   8139e:	6811      	ldr	r1, [r2, #0]
   813a0:	3101      	adds	r1, #1
   813a2:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   813a4:	681b      	ldr	r3, [r3, #0]
   813a6:	681b      	ldr	r3, [r3, #0]
   813a8:	b923      	cbnz	r3, 813b4 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   813aa:	f04f 32ff 	mov.w	r2, #4294967295
   813ae:	4b30      	ldr	r3, [pc, #192]	; (81470 <vTaskIncrementTick+0x108>)
   813b0:	601a      	str	r2, [r3, #0]
   813b2:	e006      	b.n	813c2 <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   813b4:	4b2a      	ldr	r3, [pc, #168]	; (81460 <vTaskIncrementTick+0xf8>)
   813b6:	681b      	ldr	r3, [r3, #0]
   813b8:	68db      	ldr	r3, [r3, #12]
   813ba:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   813bc:	685a      	ldr	r2, [r3, #4]
   813be:	4b2c      	ldr	r3, [pc, #176]	; (81470 <vTaskIncrementTick+0x108>)
   813c0:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   813c2:	4b26      	ldr	r3, [pc, #152]	; (8145c <vTaskIncrementTick+0xf4>)
   813c4:	681a      	ldr	r2, [r3, #0]
   813c6:	4b2a      	ldr	r3, [pc, #168]	; (81470 <vTaskIncrementTick+0x108>)
   813c8:	681b      	ldr	r3, [r3, #0]
   813ca:	429a      	cmp	r2, r3
   813cc:	d342      	bcc.n	81454 <vTaskIncrementTick+0xec>
   813ce:	4b24      	ldr	r3, [pc, #144]	; (81460 <vTaskIncrementTick+0xf8>)
   813d0:	681b      	ldr	r3, [r3, #0]
   813d2:	681b      	ldr	r3, [r3, #0]
   813d4:	b14b      	cbz	r3, 813ea <vTaskIncrementTick+0x82>
   813d6:	4b22      	ldr	r3, [pc, #136]	; (81460 <vTaskIncrementTick+0xf8>)
   813d8:	681b      	ldr	r3, [r3, #0]
   813da:	68db      	ldr	r3, [r3, #12]
   813dc:	68dc      	ldr	r4, [r3, #12]
   813de:	6863      	ldr	r3, [r4, #4]
   813e0:	4a1e      	ldr	r2, [pc, #120]	; (8145c <vTaskIncrementTick+0xf4>)
   813e2:	6812      	ldr	r2, [r2, #0]
   813e4:	4293      	cmp	r3, r2
   813e6:	d913      	bls.n	81410 <vTaskIncrementTick+0xa8>
   813e8:	e00e      	b.n	81408 <vTaskIncrementTick+0xa0>
   813ea:	f04f 32ff 	mov.w	r2, #4294967295
   813ee:	4b20      	ldr	r3, [pc, #128]	; (81470 <vTaskIncrementTick+0x108>)
   813f0:	601a      	str	r2, [r3, #0]
   813f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   813f6:	4b1a      	ldr	r3, [pc, #104]	; (81460 <vTaskIncrementTick+0xf8>)
   813f8:	681b      	ldr	r3, [r3, #0]
   813fa:	68db      	ldr	r3, [r3, #12]
   813fc:	68dc      	ldr	r4, [r3, #12]
   813fe:	6863      	ldr	r3, [r4, #4]
   81400:	4a16      	ldr	r2, [pc, #88]	; (8145c <vTaskIncrementTick+0xf4>)
   81402:	6812      	ldr	r2, [r2, #0]
   81404:	4293      	cmp	r3, r2
   81406:	d907      	bls.n	81418 <vTaskIncrementTick+0xb0>
   81408:	4a19      	ldr	r2, [pc, #100]	; (81470 <vTaskIncrementTick+0x108>)
   8140a:	6013      	str	r3, [r2, #0]
   8140c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81410:	4e18      	ldr	r6, [pc, #96]	; (81474 <vTaskIncrementTick+0x10c>)
   81412:	4f19      	ldr	r7, [pc, #100]	; (81478 <vTaskIncrementTick+0x110>)
   81414:	f8df 806c 	ldr.w	r8, [pc, #108]	; 81484 <vTaskIncrementTick+0x11c>
   81418:	1d25      	adds	r5, r4, #4
   8141a:	4628      	mov	r0, r5
   8141c:	47b0      	blx	r6
   8141e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81420:	b113      	cbz	r3, 81428 <vTaskIncrementTick+0xc0>
   81422:	f104 0018 	add.w	r0, r4, #24
   81426:	47b0      	blx	r6
   81428:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8142a:	683a      	ldr	r2, [r7, #0]
   8142c:	4293      	cmp	r3, r2
   8142e:	bf88      	it	hi
   81430:	603b      	strhi	r3, [r7, #0]
   81432:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   81436:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   8143a:	4629      	mov	r1, r5
   8143c:	4b0f      	ldr	r3, [pc, #60]	; (8147c <vTaskIncrementTick+0x114>)
   8143e:	4798      	blx	r3
   81440:	4b07      	ldr	r3, [pc, #28]	; (81460 <vTaskIncrementTick+0xf8>)
   81442:	681b      	ldr	r3, [r3, #0]
   81444:	681b      	ldr	r3, [r3, #0]
   81446:	2b00      	cmp	r3, #0
   81448:	d1d5      	bne.n	813f6 <vTaskIncrementTick+0x8e>
   8144a:	e7ce      	b.n	813ea <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
   8144c:	4b0c      	ldr	r3, [pc, #48]	; (81480 <vTaskIncrementTick+0x118>)
   8144e:	681a      	ldr	r2, [r3, #0]
   81450:	3201      	adds	r2, #1
   81452:	601a      	str	r2, [r3, #0]
   81454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81458:	200708dc 	.word	0x200708dc
   8145c:	200708e0 	.word	0x200708e0
   81460:	20070868 	.word	0x20070868
   81464:	000812e9 	.word	0x000812e9
   81468:	200708e4 	.word	0x200708e4
   8146c:	200708d4 	.word	0x200708d4
   81470:	20070000 	.word	0x20070000
   81474:	000812a1 	.word	0x000812a1
   81478:	2007086c 	.word	0x2007086c
   8147c:	00081285 	.word	0x00081285
   81480:	20070864 	.word	0x20070864
   81484:	20070870 	.word	0x20070870

00081488 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81488:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   8148a:	4b1d      	ldr	r3, [pc, #116]	; (81500 <vTaskSwitchContext+0x78>)
   8148c:	681b      	ldr	r3, [r3, #0]
   8148e:	b95b      	cbnz	r3, 814a8 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81490:	4b1c      	ldr	r3, [pc, #112]	; (81504 <vTaskSwitchContext+0x7c>)
   81492:	681b      	ldr	r3, [r3, #0]
   81494:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81498:	009b      	lsls	r3, r3, #2
   8149a:	4a1b      	ldr	r2, [pc, #108]	; (81508 <vTaskSwitchContext+0x80>)
   8149c:	58d3      	ldr	r3, [r2, r3]
   8149e:	b9cb      	cbnz	r3, 814d4 <vTaskSwitchContext+0x4c>
   814a0:	4b18      	ldr	r3, [pc, #96]	; (81504 <vTaskSwitchContext+0x7c>)
   814a2:	681b      	ldr	r3, [r3, #0]
   814a4:	b953      	cbnz	r3, 814bc <vTaskSwitchContext+0x34>
   814a6:	e005      	b.n	814b4 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   814a8:	2201      	movs	r2, #1
   814aa:	4b18      	ldr	r3, [pc, #96]	; (8150c <vTaskSwitchContext+0x84>)
   814ac:	601a      	str	r2, [r3, #0]
   814ae:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   814b0:	681a      	ldr	r2, [r3, #0]
   814b2:	b92a      	cbnz	r2, 814c0 <vTaskSwitchContext+0x38>
   814b4:	4b16      	ldr	r3, [pc, #88]	; (81510 <vTaskSwitchContext+0x88>)
   814b6:	4798      	blx	r3
   814b8:	bf00      	nop
   814ba:	e7fd      	b.n	814b8 <vTaskSwitchContext+0x30>
   814bc:	4b11      	ldr	r3, [pc, #68]	; (81504 <vTaskSwitchContext+0x7c>)
   814be:	4912      	ldr	r1, [pc, #72]	; (81508 <vTaskSwitchContext+0x80>)
   814c0:	681a      	ldr	r2, [r3, #0]
   814c2:	3a01      	subs	r2, #1
   814c4:	601a      	str	r2, [r3, #0]
   814c6:	681a      	ldr	r2, [r3, #0]
   814c8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   814cc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   814d0:	2a00      	cmp	r2, #0
   814d2:	d0ed      	beq.n	814b0 <vTaskSwitchContext+0x28>
   814d4:	4b0b      	ldr	r3, [pc, #44]	; (81504 <vTaskSwitchContext+0x7c>)
   814d6:	681b      	ldr	r3, [r3, #0]
   814d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   814dc:	4a0a      	ldr	r2, [pc, #40]	; (81508 <vTaskSwitchContext+0x80>)
   814de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   814e2:	685a      	ldr	r2, [r3, #4]
   814e4:	6852      	ldr	r2, [r2, #4]
   814e6:	605a      	str	r2, [r3, #4]
   814e8:	f103 0108 	add.w	r1, r3, #8
   814ec:	428a      	cmp	r2, r1
   814ee:	bf04      	itt	eq
   814f0:	6852      	ldreq	r2, [r2, #4]
   814f2:	605a      	streq	r2, [r3, #4]
   814f4:	685b      	ldr	r3, [r3, #4]
   814f6:	68da      	ldr	r2, [r3, #12]
   814f8:	4b06      	ldr	r3, [pc, #24]	; (81514 <vTaskSwitchContext+0x8c>)
   814fa:	601a      	str	r2, [r3, #0]
   814fc:	bd08      	pop	{r3, pc}
   814fe:	bf00      	nop
   81500:	200708dc 	.word	0x200708dc
   81504:	2007086c 	.word	0x2007086c
   81508:	20070870 	.word	0x20070870
   8150c:	200708e8 	.word	0x200708e8
   81510:	000812e9 	.word	0x000812e9
   81514:	200708d8 	.word	0x200708d8

00081518 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81518:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8151a:	480e      	ldr	r0, [pc, #56]	; (81554 <sysclk_init+0x3c>)
   8151c:	4b0e      	ldr	r3, [pc, #56]	; (81558 <sysclk_init+0x40>)
   8151e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81520:	2000      	movs	r0, #0
   81522:	213e      	movs	r1, #62	; 0x3e
   81524:	4b0d      	ldr	r3, [pc, #52]	; (8155c <sysclk_init+0x44>)
   81526:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81528:	4c0d      	ldr	r4, [pc, #52]	; (81560 <sysclk_init+0x48>)
   8152a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8152c:	2800      	cmp	r0, #0
   8152e:	d0fc      	beq.n	8152a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81530:	4b0c      	ldr	r3, [pc, #48]	; (81564 <sysclk_init+0x4c>)
   81532:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81534:	4a0c      	ldr	r2, [pc, #48]	; (81568 <sysclk_init+0x50>)
   81536:	4b0d      	ldr	r3, [pc, #52]	; (8156c <sysclk_init+0x54>)
   81538:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8153a:	4c0d      	ldr	r4, [pc, #52]	; (81570 <sysclk_init+0x58>)
   8153c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8153e:	2800      	cmp	r0, #0
   81540:	d0fc      	beq.n	8153c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81542:	2010      	movs	r0, #16
   81544:	4b0b      	ldr	r3, [pc, #44]	; (81574 <sysclk_init+0x5c>)
   81546:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81548:	4b0b      	ldr	r3, [pc, #44]	; (81578 <sysclk_init+0x60>)
   8154a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8154c:	4801      	ldr	r0, [pc, #4]	; (81554 <sysclk_init+0x3c>)
   8154e:	4b02      	ldr	r3, [pc, #8]	; (81558 <sysclk_init+0x40>)
   81550:	4798      	blx	r3
   81552:	bd10      	pop	{r4, pc}
   81554:	0501bd00 	.word	0x0501bd00
   81558:	00081bcd 	.word	0x00081bcd
   8155c:	00081921 	.word	0x00081921
   81560:	00081975 	.word	0x00081975
   81564:	00081985 	.word	0x00081985
   81568:	200d3f01 	.word	0x200d3f01
   8156c:	400e0600 	.word	0x400e0600
   81570:	00081995 	.word	0x00081995
   81574:	000818bd 	.word	0x000818bd
   81578:	00081ab1 	.word	0x00081ab1

0008157c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   8157c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8157e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81582:	4b17      	ldr	r3, [pc, #92]	; (815e0 <board_init+0x64>)
   81584:	605a      	str	r2, [r3, #4]
   81586:	200b      	movs	r0, #11
   81588:	4c16      	ldr	r4, [pc, #88]	; (815e4 <board_init+0x68>)
   8158a:	47a0      	blx	r4
   8158c:	200c      	movs	r0, #12
   8158e:	47a0      	blx	r4
   81590:	200d      	movs	r0, #13
   81592:	47a0      	blx	r4
   81594:	200e      	movs	r0, #14
   81596:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81598:	203b      	movs	r0, #59	; 0x3b
   8159a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8159e:	4c12      	ldr	r4, [pc, #72]	; (815e8 <board_init+0x6c>)
   815a0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   815a2:	2055      	movs	r0, #85	; 0x55
   815a4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   815a8:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   815aa:	2056      	movs	r0, #86	; 0x56
   815ac:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   815b0:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   815b2:	2068      	movs	r0, #104	; 0x68
   815b4:	490d      	ldr	r1, [pc, #52]	; (815ec <board_init+0x70>)
   815b6:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   815b8:	205c      	movs	r0, #92	; 0x5c
   815ba:	490d      	ldr	r1, [pc, #52]	; (815f0 <board_init+0x74>)
   815bc:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   815be:	480d      	ldr	r0, [pc, #52]	; (815f4 <board_init+0x78>)
   815c0:	f44f 7140 	mov.w	r1, #768	; 0x300
   815c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   815c8:	4b0b      	ldr	r3, [pc, #44]	; (815f8 <board_init+0x7c>)
   815ca:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   815cc:	202b      	movs	r0, #43	; 0x2b
   815ce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   815d2:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   815d4:	202a      	movs	r0, #42	; 0x2a
   815d6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   815da:	47a0      	blx	r4
   815dc:	bd10      	pop	{r4, pc}
   815de:	bf00      	nop
   815e0:	400e1a50 	.word	0x400e1a50
   815e4:	000819a5 	.word	0x000819a5
   815e8:	000816a1 	.word	0x000816a1
   815ec:	28000079 	.word	0x28000079
   815f0:	28000001 	.word	0x28000001
   815f4:	400e0e00 	.word	0x400e0e00
   815f8:	00081775 	.word	0x00081775

000815fc <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   815fc:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   815fe:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81602:	d016      	beq.n	81632 <pio_set_peripheral+0x36>
   81604:	d804      	bhi.n	81610 <pio_set_peripheral+0x14>
   81606:	b1c1      	cbz	r1, 8163a <pio_set_peripheral+0x3e>
   81608:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8160c:	d00a      	beq.n	81624 <pio_set_peripheral+0x28>
   8160e:	e013      	b.n	81638 <pio_set_peripheral+0x3c>
   81610:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81614:	d011      	beq.n	8163a <pio_set_peripheral+0x3e>
   81616:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8161a:	d00e      	beq.n	8163a <pio_set_peripheral+0x3e>
   8161c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81620:	d10a      	bne.n	81638 <pio_set_peripheral+0x3c>
   81622:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81624:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81626:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81628:	400b      	ands	r3, r1
   8162a:	ea23 0302 	bic.w	r3, r3, r2
   8162e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81630:	e002      	b.n	81638 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   81632:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81634:	4313      	orrs	r3, r2
   81636:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81638:	6042      	str	r2, [r0, #4]
   8163a:	4770      	bx	lr

0008163c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8163c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8163e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81642:	bf14      	ite	ne
   81644:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81646:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81648:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8164c:	bf14      	ite	ne
   8164e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   81650:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   81652:	f012 0f02 	tst.w	r2, #2
   81656:	d002      	beq.n	8165e <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   81658:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8165c:	e004      	b.n	81668 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8165e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   81662:	bf18      	it	ne
   81664:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81668:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8166a:	6001      	str	r1, [r0, #0]
   8166c:	4770      	bx	lr
   8166e:	bf00      	nop

00081670 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   81670:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81672:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81674:	9c01      	ldr	r4, [sp, #4]
   81676:	b10c      	cbz	r4, 8167c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   81678:	6641      	str	r1, [r0, #100]	; 0x64
   8167a:	e000      	b.n	8167e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8167c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8167e:	b10b      	cbz	r3, 81684 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   81680:	6501      	str	r1, [r0, #80]	; 0x50
   81682:	e000      	b.n	81686 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   81684:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81686:	b10a      	cbz	r2, 8168c <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   81688:	6301      	str	r1, [r0, #48]	; 0x30
   8168a:	e000      	b.n	8168e <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8168c:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8168e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81690:	6001      	str	r1, [r0, #0]
}
   81692:	f85d 4b04 	ldr.w	r4, [sp], #4
   81696:	4770      	bx	lr

00081698 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81698:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8169a:	4770      	bx	lr

0008169c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8169c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8169e:	4770      	bx	lr

000816a0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   816a0:	b570      	push	{r4, r5, r6, lr}
   816a2:	b082      	sub	sp, #8
   816a4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   816a6:	0944      	lsrs	r4, r0, #5
   816a8:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   816ac:	f204 7407 	addw	r4, r4, #1799	; 0x707
   816b0:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   816b2:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   816b6:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   816ba:	d030      	beq.n	8171e <pio_configure_pin+0x7e>
   816bc:	d806      	bhi.n	816cc <pio_configure_pin+0x2c>
   816be:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   816c2:	d00a      	beq.n	816da <pio_configure_pin+0x3a>
   816c4:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   816c8:	d018      	beq.n	816fc <pio_configure_pin+0x5c>
   816ca:	e049      	b.n	81760 <pio_configure_pin+0xc0>
   816cc:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   816d0:	d030      	beq.n	81734 <pio_configure_pin+0x94>
   816d2:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   816d6:	d02d      	beq.n	81734 <pio_configure_pin+0x94>
   816d8:	e042      	b.n	81760 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   816da:	f000 001f 	and.w	r0, r0, #31
   816de:	2401      	movs	r4, #1
   816e0:	4084      	lsls	r4, r0
   816e2:	4630      	mov	r0, r6
   816e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   816e8:	4622      	mov	r2, r4
   816ea:	4b1f      	ldr	r3, [pc, #124]	; (81768 <pio_configure_pin+0xc8>)
   816ec:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   816ee:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   816f2:	bf14      	ite	ne
   816f4:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   816f6:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   816f8:	2001      	movs	r0, #1
   816fa:	e032      	b.n	81762 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   816fc:	f000 001f 	and.w	r0, r0, #31
   81700:	2401      	movs	r4, #1
   81702:	4084      	lsls	r4, r0
   81704:	4630      	mov	r0, r6
   81706:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8170a:	4622      	mov	r2, r4
   8170c:	4b16      	ldr	r3, [pc, #88]	; (81768 <pio_configure_pin+0xc8>)
   8170e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81710:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81714:	bf14      	ite	ne
   81716:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81718:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8171a:	2001      	movs	r0, #1
   8171c:	e021      	b.n	81762 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8171e:	f000 011f 	and.w	r1, r0, #31
   81722:	2401      	movs	r4, #1
   81724:	4630      	mov	r0, r6
   81726:	fa04 f101 	lsl.w	r1, r4, r1
   8172a:	462a      	mov	r2, r5
   8172c:	4b0f      	ldr	r3, [pc, #60]	; (8176c <pio_configure_pin+0xcc>)
   8172e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81730:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   81732:	e016      	b.n	81762 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81734:	f000 011f 	and.w	r1, r0, #31
   81738:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8173a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8173e:	ea05 0304 	and.w	r3, r5, r4
   81742:	9300      	str	r3, [sp, #0]
   81744:	4630      	mov	r0, r6
   81746:	fa04 f101 	lsl.w	r1, r4, r1
   8174a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8174e:	bf14      	ite	ne
   81750:	2200      	movne	r2, #0
   81752:	2201      	moveq	r2, #1
   81754:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81758:	4d05      	ldr	r5, [pc, #20]	; (81770 <pio_configure_pin+0xd0>)
   8175a:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   8175c:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8175e:	e000      	b.n	81762 <pio_configure_pin+0xc2>

	default:
		return 0;
   81760:	2000      	movs	r0, #0
	}

	return 1;
}
   81762:	b002      	add	sp, #8
   81764:	bd70      	pop	{r4, r5, r6, pc}
   81766:	bf00      	nop
   81768:	000815fd 	.word	0x000815fd
   8176c:	0008163d 	.word	0x0008163d
   81770:	00081671 	.word	0x00081671

00081774 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   81774:	b5f0      	push	{r4, r5, r6, r7, lr}
   81776:	b083      	sub	sp, #12
   81778:	4607      	mov	r7, r0
   8177a:	460e      	mov	r6, r1
   8177c:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8177e:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   81782:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81786:	d026      	beq.n	817d6 <pio_configure_pin_group+0x62>
   81788:	d806      	bhi.n	81798 <pio_configure_pin_group+0x24>
   8178a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8178e:	d00a      	beq.n	817a6 <pio_configure_pin_group+0x32>
   81790:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81794:	d013      	beq.n	817be <pio_configure_pin_group+0x4a>
   81796:	e034      	b.n	81802 <pio_configure_pin_group+0x8e>
   81798:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   8179c:	d01f      	beq.n	817de <pio_configure_pin_group+0x6a>
   8179e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   817a2:	d01c      	beq.n	817de <pio_configure_pin_group+0x6a>
   817a4:	e02d      	b.n	81802 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   817a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   817aa:	4632      	mov	r2, r6
   817ac:	4b16      	ldr	r3, [pc, #88]	; (81808 <pio_configure_pin_group+0x94>)
   817ae:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   817b0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   817b4:	bf14      	ite	ne
   817b6:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   817b8:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   817ba:	2001      	movs	r0, #1
   817bc:	e022      	b.n	81804 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   817be:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   817c2:	4632      	mov	r2, r6
   817c4:	4b10      	ldr	r3, [pc, #64]	; (81808 <pio_configure_pin_group+0x94>)
   817c6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   817c8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   817cc:	bf14      	ite	ne
   817ce:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   817d0:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   817d2:	2001      	movs	r0, #1
   817d4:	e016      	b.n	81804 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   817d6:	4b0d      	ldr	r3, [pc, #52]	; (8180c <pio_configure_pin_group+0x98>)
   817d8:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   817da:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   817dc:	e012      	b.n	81804 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   817de:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   817e2:	f005 0301 	and.w	r3, r5, #1
   817e6:	9300      	str	r3, [sp, #0]
   817e8:	4638      	mov	r0, r7
   817ea:	4631      	mov	r1, r6
   817ec:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   817f0:	bf14      	ite	ne
   817f2:	2200      	movne	r2, #0
   817f4:	2201      	moveq	r2, #1
   817f6:	f3c5 0380 	ubfx	r3, r5, #2, #1
   817fa:	4c05      	ldr	r4, [pc, #20]	; (81810 <pio_configure_pin_group+0x9c>)
   817fc:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   817fe:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81800:	e000      	b.n	81804 <pio_configure_pin_group+0x90>

	default:
		return 0;
   81802:	2000      	movs	r0, #0
	}

	return 1;
}
   81804:	b003      	add	sp, #12
   81806:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81808:	000815fd 	.word	0x000815fd
   8180c:	0008163d 	.word	0x0008163d
   81810:	00081671 	.word	0x00081671

00081814 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81818:	4604      	mov	r4, r0
   8181a:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8181c:	4b10      	ldr	r3, [pc, #64]	; (81860 <pio_handler_process+0x4c>)
   8181e:	4798      	blx	r3
   81820:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81822:	4620      	mov	r0, r4
   81824:	4b0f      	ldr	r3, [pc, #60]	; (81864 <pio_handler_process+0x50>)
   81826:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81828:	4005      	ands	r5, r0
   8182a:	d017      	beq.n	8185c <pio_handler_process+0x48>
   8182c:	4f0e      	ldr	r7, [pc, #56]	; (81868 <pio_handler_process+0x54>)
   8182e:	f107 040c 	add.w	r4, r7, #12
   81832:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81834:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   81838:	42b3      	cmp	r3, r6
   8183a:	d10a      	bne.n	81852 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8183c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   81840:	4229      	tst	r1, r5
   81842:	d006      	beq.n	81852 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81844:	6823      	ldr	r3, [r4, #0]
   81846:	4630      	mov	r0, r6
   81848:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8184a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8184e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   81852:	42bc      	cmp	r4, r7
   81854:	d002      	beq.n	8185c <pio_handler_process+0x48>
   81856:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   81858:	2d00      	cmp	r5, #0
   8185a:	d1eb      	bne.n	81834 <pio_handler_process+0x20>
   8185c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81860:	00081699 	.word	0x00081699
   81864:	0008169d 	.word	0x0008169d
   81868:	200708ec 	.word	0x200708ec

0008186c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8186c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8186e:	4802      	ldr	r0, [pc, #8]	; (81878 <PIOA_Handler+0xc>)
   81870:	210b      	movs	r1, #11
   81872:	4b02      	ldr	r3, [pc, #8]	; (8187c <PIOA_Handler+0x10>)
   81874:	4798      	blx	r3
   81876:	bd08      	pop	{r3, pc}
   81878:	400e0e00 	.word	0x400e0e00
   8187c:	00081815 	.word	0x00081815

00081880 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81880:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81882:	4802      	ldr	r0, [pc, #8]	; (8188c <PIOB_Handler+0xc>)
   81884:	210c      	movs	r1, #12
   81886:	4b02      	ldr	r3, [pc, #8]	; (81890 <PIOB_Handler+0x10>)
   81888:	4798      	blx	r3
   8188a:	bd08      	pop	{r3, pc}
   8188c:	400e1000 	.word	0x400e1000
   81890:	00081815 	.word	0x00081815

00081894 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81894:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81896:	4802      	ldr	r0, [pc, #8]	; (818a0 <PIOC_Handler+0xc>)
   81898:	210d      	movs	r1, #13
   8189a:	4b02      	ldr	r3, [pc, #8]	; (818a4 <PIOC_Handler+0x10>)
   8189c:	4798      	blx	r3
   8189e:	bd08      	pop	{r3, pc}
   818a0:	400e1200 	.word	0x400e1200
   818a4:	00081815 	.word	0x00081815

000818a8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   818a8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   818aa:	4802      	ldr	r0, [pc, #8]	; (818b4 <PIOD_Handler+0xc>)
   818ac:	210e      	movs	r1, #14
   818ae:	4b02      	ldr	r3, [pc, #8]	; (818b8 <PIOD_Handler+0x10>)
   818b0:	4798      	blx	r3
   818b2:	bd08      	pop	{r3, pc}
   818b4:	400e1400 	.word	0x400e1400
   818b8:	00081815 	.word	0x00081815

000818bc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   818bc:	4b17      	ldr	r3, [pc, #92]	; (8191c <pmc_switch_mck_to_pllack+0x60>)
   818be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   818c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   818c4:	4310      	orrs	r0, r2
   818c6:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   818c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   818ca:	f013 0f08 	tst.w	r3, #8
   818ce:	d109      	bne.n	818e4 <pmc_switch_mck_to_pllack+0x28>
   818d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   818d4:	4911      	ldr	r1, [pc, #68]	; (8191c <pmc_switch_mck_to_pllack+0x60>)
   818d6:	e001      	b.n	818dc <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   818d8:	3b01      	subs	r3, #1
   818da:	d019      	beq.n	81910 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   818dc:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   818de:	f012 0f08 	tst.w	r2, #8
   818e2:	d0f9      	beq.n	818d8 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   818e4:	4b0d      	ldr	r3, [pc, #52]	; (8191c <pmc_switch_mck_to_pllack+0x60>)
   818e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   818e8:	f022 0203 	bic.w	r2, r2, #3
   818ec:	f042 0202 	orr.w	r2, r2, #2
   818f0:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   818f2:	6e98      	ldr	r0, [r3, #104]	; 0x68
   818f4:	f010 0008 	ands.w	r0, r0, #8
   818f8:	d10c      	bne.n	81914 <pmc_switch_mck_to_pllack+0x58>
   818fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
   818fe:	4907      	ldr	r1, [pc, #28]	; (8191c <pmc_switch_mck_to_pllack+0x60>)
   81900:	e001      	b.n	81906 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81902:	3b01      	subs	r3, #1
   81904:	d008      	beq.n	81918 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81906:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81908:	f012 0f08 	tst.w	r2, #8
   8190c:	d0f9      	beq.n	81902 <pmc_switch_mck_to_pllack+0x46>
   8190e:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81910:	2001      	movs	r0, #1
   81912:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   81914:	2000      	movs	r0, #0
   81916:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81918:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8191a:	4770      	bx	lr
   8191c:	400e0600 	.word	0x400e0600

00081920 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81920:	b138      	cbz	r0, 81932 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81922:	4911      	ldr	r1, [pc, #68]	; (81968 <pmc_switch_mainck_to_xtal+0x48>)
   81924:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81926:	4a11      	ldr	r2, [pc, #68]	; (8196c <pmc_switch_mainck_to_xtal+0x4c>)
   81928:	401a      	ands	r2, r3
   8192a:	4b11      	ldr	r3, [pc, #68]	; (81970 <pmc_switch_mainck_to_xtal+0x50>)
   8192c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8192e:	620b      	str	r3, [r1, #32]
   81930:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81932:	4a0d      	ldr	r2, [pc, #52]	; (81968 <pmc_switch_mainck_to_xtal+0x48>)
   81934:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81936:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8193a:	f023 0303 	bic.w	r3, r3, #3
   8193e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81942:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81946:	0209      	lsls	r1, r1, #8
   81948:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8194a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8194c:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8194e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81950:	f013 0f01 	tst.w	r3, #1
   81954:	d0fb      	beq.n	8194e <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81956:	4a04      	ldr	r2, [pc, #16]	; (81968 <pmc_switch_mainck_to_xtal+0x48>)
   81958:	6a13      	ldr	r3, [r2, #32]
   8195a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8195e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81962:	6213      	str	r3, [r2, #32]
   81964:	4770      	bx	lr
   81966:	bf00      	nop
   81968:	400e0600 	.word	0x400e0600
   8196c:	fec8fffc 	.word	0xfec8fffc
   81970:	01370002 	.word	0x01370002

00081974 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81974:	4b02      	ldr	r3, [pc, #8]	; (81980 <pmc_osc_is_ready_mainck+0xc>)
   81976:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81978:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8197c:	4770      	bx	lr
   8197e:	bf00      	nop
   81980:	400e0600 	.word	0x400e0600

00081984 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81984:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81988:	4b01      	ldr	r3, [pc, #4]	; (81990 <pmc_disable_pllack+0xc>)
   8198a:	629a      	str	r2, [r3, #40]	; 0x28
   8198c:	4770      	bx	lr
   8198e:	bf00      	nop
   81990:	400e0600 	.word	0x400e0600

00081994 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81994:	4b02      	ldr	r3, [pc, #8]	; (819a0 <pmc_is_locked_pllack+0xc>)
   81996:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81998:	f000 0002 	and.w	r0, r0, #2
   8199c:	4770      	bx	lr
   8199e:	bf00      	nop
   819a0:	400e0600 	.word	0x400e0600

000819a4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   819a4:	282c      	cmp	r0, #44	; 0x2c
   819a6:	d820      	bhi.n	819ea <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   819a8:	281f      	cmp	r0, #31
   819aa:	d80d      	bhi.n	819c8 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   819ac:	4b12      	ldr	r3, [pc, #72]	; (819f8 <pmc_enable_periph_clk+0x54>)
   819ae:	699a      	ldr	r2, [r3, #24]
   819b0:	2301      	movs	r3, #1
   819b2:	4083      	lsls	r3, r0
   819b4:	401a      	ands	r2, r3
   819b6:	4293      	cmp	r3, r2
   819b8:	d019      	beq.n	819ee <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   819ba:	2301      	movs	r3, #1
   819bc:	fa03 f000 	lsl.w	r0, r3, r0
   819c0:	4b0d      	ldr	r3, [pc, #52]	; (819f8 <pmc_enable_periph_clk+0x54>)
   819c2:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   819c4:	2000      	movs	r0, #0
   819c6:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   819c8:	4b0b      	ldr	r3, [pc, #44]	; (819f8 <pmc_enable_periph_clk+0x54>)
   819ca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
   819ce:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   819d0:	2301      	movs	r3, #1
   819d2:	4083      	lsls	r3, r0
   819d4:	401a      	ands	r2, r3
   819d6:	4293      	cmp	r3, r2
   819d8:	d00b      	beq.n	819f2 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   819da:	2301      	movs	r3, #1
   819dc:	fa03 f000 	lsl.w	r0, r3, r0
   819e0:	4b05      	ldr	r3, [pc, #20]	; (819f8 <pmc_enable_periph_clk+0x54>)
   819e2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   819e6:	2000      	movs	r0, #0
   819e8:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   819ea:	2001      	movs	r0, #1
   819ec:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   819ee:	2000      	movs	r0, #0
   819f0:	4770      	bx	lr
   819f2:	2000      	movs	r0, #0
}
   819f4:	4770      	bx	lr
   819f6:	bf00      	nop
   819f8:	400e0600 	.word	0x400e0600

000819fc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   819fc:	e7fe      	b.n	819fc <Dummy_Handler>
   819fe:	bf00      	nop

00081a00 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81a00:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81a02:	4b1e      	ldr	r3, [pc, #120]	; (81a7c <Reset_Handler+0x7c>)
   81a04:	4a1e      	ldr	r2, [pc, #120]	; (81a80 <Reset_Handler+0x80>)
   81a06:	429a      	cmp	r2, r3
   81a08:	d003      	beq.n	81a12 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   81a0a:	4b1e      	ldr	r3, [pc, #120]	; (81a84 <Reset_Handler+0x84>)
   81a0c:	4a1b      	ldr	r2, [pc, #108]	; (81a7c <Reset_Handler+0x7c>)
   81a0e:	429a      	cmp	r2, r3
   81a10:	d304      	bcc.n	81a1c <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81a12:	4b1d      	ldr	r3, [pc, #116]	; (81a88 <Reset_Handler+0x88>)
   81a14:	4a1d      	ldr	r2, [pc, #116]	; (81a8c <Reset_Handler+0x8c>)
   81a16:	429a      	cmp	r2, r3
   81a18:	d30f      	bcc.n	81a3a <Reset_Handler+0x3a>
   81a1a:	e01a      	b.n	81a52 <Reset_Handler+0x52>
   81a1c:	4b1c      	ldr	r3, [pc, #112]	; (81a90 <Reset_Handler+0x90>)
   81a1e:	4c1d      	ldr	r4, [pc, #116]	; (81a94 <Reset_Handler+0x94>)
   81a20:	1ae4      	subs	r4, r4, r3
   81a22:	f024 0403 	bic.w	r4, r4, #3
   81a26:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81a28:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   81a2a:	4814      	ldr	r0, [pc, #80]	; (81a7c <Reset_Handler+0x7c>)
   81a2c:	4914      	ldr	r1, [pc, #80]	; (81a80 <Reset_Handler+0x80>)
   81a2e:	585a      	ldr	r2, [r3, r1]
   81a30:	501a      	str	r2, [r3, r0]
   81a32:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81a34:	42a3      	cmp	r3, r4
   81a36:	d1fa      	bne.n	81a2e <Reset_Handler+0x2e>
   81a38:	e7eb      	b.n	81a12 <Reset_Handler+0x12>
   81a3a:	4b17      	ldr	r3, [pc, #92]	; (81a98 <Reset_Handler+0x98>)
   81a3c:	4917      	ldr	r1, [pc, #92]	; (81a9c <Reset_Handler+0x9c>)
   81a3e:	1ac9      	subs	r1, r1, r3
   81a40:	f021 0103 	bic.w	r1, r1, #3
   81a44:	1d1a      	adds	r2, r3, #4
   81a46:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   81a48:	2200      	movs	r2, #0
   81a4a:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81a4e:	428b      	cmp	r3, r1
   81a50:	d1fb      	bne.n	81a4a <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81a52:	4a13      	ldr	r2, [pc, #76]	; (81aa0 <Reset_Handler+0xa0>)
   81a54:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   81a58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81a5c:	4911      	ldr	r1, [pc, #68]	; (81aa4 <Reset_Handler+0xa4>)
   81a5e:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81a60:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   81a64:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   81a68:	d203      	bcs.n	81a72 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81a6a:	688a      	ldr	r2, [r1, #8]
   81a6c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81a70:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81a72:	4b0d      	ldr	r3, [pc, #52]	; (81aa8 <Reset_Handler+0xa8>)
   81a74:	4798      	blx	r3

	/* Branch to main function */
	main();
   81a76:	4b0d      	ldr	r3, [pc, #52]	; (81aac <Reset_Handler+0xac>)
   81a78:	4798      	blx	r3
   81a7a:	e7fe      	b.n	81a7a <Reset_Handler+0x7a>
   81a7c:	20070000 	.word	0x20070000
   81a80:	00082e28 	.word	0x00082e28
   81a84:	20070848 	.word	0x20070848
   81a88:	20070a20 	.word	0x20070a20
   81a8c:	20070848 	.word	0x20070848
   81a90:	20070004 	.word	0x20070004
   81a94:	2007084b 	.word	0x2007084b
   81a98:	20070844 	.word	0x20070844
   81a9c:	20070a1b 	.word	0x20070a1b
   81aa0:	00080000 	.word	0x00080000
   81aa4:	e000ed00 	.word	0xe000ed00
   81aa8:	00081cdd 	.word	0x00081cdd
   81aac:	000803c9 	.word	0x000803c9

00081ab0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81ab0:	4b3e      	ldr	r3, [pc, #248]	; (81bac <SystemCoreClockUpdate+0xfc>)
   81ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81ab4:	f003 0303 	and.w	r3, r3, #3
   81ab8:	2b03      	cmp	r3, #3
   81aba:	d85f      	bhi.n	81b7c <SystemCoreClockUpdate+0xcc>
   81abc:	e8df f003 	tbb	[pc, r3]
   81ac0:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81ac4:	4b3a      	ldr	r3, [pc, #232]	; (81bb0 <SystemCoreClockUpdate+0x100>)
   81ac6:	695b      	ldr	r3, [r3, #20]
   81ac8:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81acc:	bf14      	ite	ne
   81ace:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81ad2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81ad6:	4b37      	ldr	r3, [pc, #220]	; (81bb4 <SystemCoreClockUpdate+0x104>)
   81ad8:	601a      	str	r2, [r3, #0]
   81ada:	e04f      	b.n	81b7c <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81adc:	4b33      	ldr	r3, [pc, #204]	; (81bac <SystemCoreClockUpdate+0xfc>)
   81ade:	6a1b      	ldr	r3, [r3, #32]
   81ae0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81ae4:	d003      	beq.n	81aee <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81ae6:	4a34      	ldr	r2, [pc, #208]	; (81bb8 <SystemCoreClockUpdate+0x108>)
   81ae8:	4b32      	ldr	r3, [pc, #200]	; (81bb4 <SystemCoreClockUpdate+0x104>)
   81aea:	601a      	str	r2, [r3, #0]
   81aec:	e046      	b.n	81b7c <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81aee:	4a33      	ldr	r2, [pc, #204]	; (81bbc <SystemCoreClockUpdate+0x10c>)
   81af0:	4b30      	ldr	r3, [pc, #192]	; (81bb4 <SystemCoreClockUpdate+0x104>)
   81af2:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81af4:	4b2d      	ldr	r3, [pc, #180]	; (81bac <SystemCoreClockUpdate+0xfc>)
   81af6:	6a1b      	ldr	r3, [r3, #32]
   81af8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81afc:	2b10      	cmp	r3, #16
   81afe:	d002      	beq.n	81b06 <SystemCoreClockUpdate+0x56>
   81b00:	2b20      	cmp	r3, #32
   81b02:	d004      	beq.n	81b0e <SystemCoreClockUpdate+0x5e>
   81b04:	e03a      	b.n	81b7c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81b06:	4a2e      	ldr	r2, [pc, #184]	; (81bc0 <SystemCoreClockUpdate+0x110>)
   81b08:	4b2a      	ldr	r3, [pc, #168]	; (81bb4 <SystemCoreClockUpdate+0x104>)
   81b0a:	601a      	str	r2, [r3, #0]
				break;
   81b0c:	e036      	b.n	81b7c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81b0e:	4a2a      	ldr	r2, [pc, #168]	; (81bb8 <SystemCoreClockUpdate+0x108>)
   81b10:	4b28      	ldr	r3, [pc, #160]	; (81bb4 <SystemCoreClockUpdate+0x104>)
   81b12:	601a      	str	r2, [r3, #0]
				break;
   81b14:	e032      	b.n	81b7c <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81b16:	4b25      	ldr	r3, [pc, #148]	; (81bac <SystemCoreClockUpdate+0xfc>)
   81b18:	6a1b      	ldr	r3, [r3, #32]
   81b1a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81b1e:	d003      	beq.n	81b28 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81b20:	4a25      	ldr	r2, [pc, #148]	; (81bb8 <SystemCoreClockUpdate+0x108>)
   81b22:	4b24      	ldr	r3, [pc, #144]	; (81bb4 <SystemCoreClockUpdate+0x104>)
   81b24:	601a      	str	r2, [r3, #0]
   81b26:	e012      	b.n	81b4e <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81b28:	4a24      	ldr	r2, [pc, #144]	; (81bbc <SystemCoreClockUpdate+0x10c>)
   81b2a:	4b22      	ldr	r3, [pc, #136]	; (81bb4 <SystemCoreClockUpdate+0x104>)
   81b2c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81b2e:	4b1f      	ldr	r3, [pc, #124]	; (81bac <SystemCoreClockUpdate+0xfc>)
   81b30:	6a1b      	ldr	r3, [r3, #32]
   81b32:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81b36:	2b10      	cmp	r3, #16
   81b38:	d002      	beq.n	81b40 <SystemCoreClockUpdate+0x90>
   81b3a:	2b20      	cmp	r3, #32
   81b3c:	d004      	beq.n	81b48 <SystemCoreClockUpdate+0x98>
   81b3e:	e006      	b.n	81b4e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81b40:	4a1f      	ldr	r2, [pc, #124]	; (81bc0 <SystemCoreClockUpdate+0x110>)
   81b42:	4b1c      	ldr	r3, [pc, #112]	; (81bb4 <SystemCoreClockUpdate+0x104>)
   81b44:	601a      	str	r2, [r3, #0]
				break;
   81b46:	e002      	b.n	81b4e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81b48:	4a1b      	ldr	r2, [pc, #108]	; (81bb8 <SystemCoreClockUpdate+0x108>)
   81b4a:	4b1a      	ldr	r3, [pc, #104]	; (81bb4 <SystemCoreClockUpdate+0x104>)
   81b4c:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81b4e:	4b17      	ldr	r3, [pc, #92]	; (81bac <SystemCoreClockUpdate+0xfc>)
   81b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81b52:	f003 0303 	and.w	r3, r3, #3
   81b56:	2b02      	cmp	r3, #2
   81b58:	d10d      	bne.n	81b76 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81b5a:	4b14      	ldr	r3, [pc, #80]	; (81bac <SystemCoreClockUpdate+0xfc>)
   81b5c:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81b5e:	6a99      	ldr	r1, [r3, #40]	; 0x28
   81b60:	4b14      	ldr	r3, [pc, #80]	; (81bb4 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81b62:	f3c0 400a 	ubfx	r0, r0, #16, #11
   81b66:	681a      	ldr	r2, [r3, #0]
   81b68:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81b6c:	b2c9      	uxtb	r1, r1
   81b6e:	fbb2 f2f1 	udiv	r2, r2, r1
   81b72:	601a      	str	r2, [r3, #0]
   81b74:	e002      	b.n	81b7c <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81b76:	4a13      	ldr	r2, [pc, #76]	; (81bc4 <SystemCoreClockUpdate+0x114>)
   81b78:	4b0e      	ldr	r3, [pc, #56]	; (81bb4 <SystemCoreClockUpdate+0x104>)
   81b7a:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81b7c:	4b0b      	ldr	r3, [pc, #44]	; (81bac <SystemCoreClockUpdate+0xfc>)
   81b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81b80:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81b84:	2b70      	cmp	r3, #112	; 0x70
   81b86:	d107      	bne.n	81b98 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   81b88:	4b0a      	ldr	r3, [pc, #40]	; (81bb4 <SystemCoreClockUpdate+0x104>)
   81b8a:	681a      	ldr	r2, [r3, #0]
   81b8c:	490e      	ldr	r1, [pc, #56]	; (81bc8 <SystemCoreClockUpdate+0x118>)
   81b8e:	fba1 0202 	umull	r0, r2, r1, r2
   81b92:	0852      	lsrs	r2, r2, #1
   81b94:	601a      	str	r2, [r3, #0]
   81b96:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81b98:	4b04      	ldr	r3, [pc, #16]	; (81bac <SystemCoreClockUpdate+0xfc>)
   81b9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   81b9c:	4b05      	ldr	r3, [pc, #20]	; (81bb4 <SystemCoreClockUpdate+0x104>)
   81b9e:	f3c1 1102 	ubfx	r1, r1, #4, #3
   81ba2:	681a      	ldr	r2, [r3, #0]
   81ba4:	40ca      	lsrs	r2, r1
   81ba6:	601a      	str	r2, [r3, #0]
   81ba8:	4770      	bx	lr
   81baa:	bf00      	nop
   81bac:	400e0600 	.word	0x400e0600
   81bb0:	400e1a10 	.word	0x400e1a10
   81bb4:	20070004 	.word	0x20070004
   81bb8:	00b71b00 	.word	0x00b71b00
   81bbc:	003d0900 	.word	0x003d0900
   81bc0:	007a1200 	.word	0x007a1200
   81bc4:	0e4e1c00 	.word	0x0e4e1c00
   81bc8:	aaaaaaab 	.word	0xaaaaaaab

00081bcc <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   81bcc:	4b1b      	ldr	r3, [pc, #108]	; (81c3c <system_init_flash+0x70>)
   81bce:	4298      	cmp	r0, r3
   81bd0:	d806      	bhi.n	81be0 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   81bd2:	2300      	movs	r3, #0
   81bd4:	4a1a      	ldr	r2, [pc, #104]	; (81c40 <system_init_flash+0x74>)
   81bd6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   81bd8:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81bdc:	6013      	str	r3, [r2, #0]
   81bde:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   81be0:	4b18      	ldr	r3, [pc, #96]	; (81c44 <system_init_flash+0x78>)
   81be2:	4298      	cmp	r0, r3
   81be4:	d807      	bhi.n	81bf6 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   81be6:	f44f 7380 	mov.w	r3, #256	; 0x100
   81bea:	4a15      	ldr	r2, [pc, #84]	; (81c40 <system_init_flash+0x74>)
   81bec:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   81bee:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81bf2:	6013      	str	r3, [r2, #0]
   81bf4:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   81bf6:	4b14      	ldr	r3, [pc, #80]	; (81c48 <system_init_flash+0x7c>)
   81bf8:	4298      	cmp	r0, r3
   81bfa:	d807      	bhi.n	81c0c <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   81bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
   81c00:	4a0f      	ldr	r2, [pc, #60]	; (81c40 <system_init_flash+0x74>)
   81c02:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   81c04:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81c08:	6013      	str	r3, [r2, #0]
   81c0a:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   81c0c:	4b0f      	ldr	r3, [pc, #60]	; (81c4c <system_init_flash+0x80>)
   81c0e:	4298      	cmp	r0, r3
   81c10:	d807      	bhi.n	81c22 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   81c12:	f44f 7340 	mov.w	r3, #768	; 0x300
   81c16:	4a0a      	ldr	r2, [pc, #40]	; (81c40 <system_init_flash+0x74>)
   81c18:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   81c1a:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81c1e:	6013      	str	r3, [r2, #0]
   81c20:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   81c22:	4b0b      	ldr	r3, [pc, #44]	; (81c50 <system_init_flash+0x84>)
   81c24:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   81c26:	bf94      	ite	ls
   81c28:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   81c2c:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
   81c30:	4a03      	ldr	r2, [pc, #12]	; (81c40 <system_init_flash+0x74>)
   81c32:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   81c34:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81c38:	6013      	str	r3, [r2, #0]
   81c3a:	4770      	bx	lr
   81c3c:	0121eabf 	.word	0x0121eabf
   81c40:	400e0a00 	.word	0x400e0a00
   81c44:	02faf07f 	.word	0x02faf07f
   81c48:	03d08fff 	.word	0x03d08fff
   81c4c:	04c4b3ff 	.word	0x04c4b3ff
   81c50:	055d4a7f 	.word	0x055d4a7f

00081c54 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81c54:	4b09      	ldr	r3, [pc, #36]	; (81c7c <_sbrk+0x28>)
   81c56:	681b      	ldr	r3, [r3, #0]
   81c58:	b913      	cbnz	r3, 81c60 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   81c5a:	4a09      	ldr	r2, [pc, #36]	; (81c80 <_sbrk+0x2c>)
   81c5c:	4b07      	ldr	r3, [pc, #28]	; (81c7c <_sbrk+0x28>)
   81c5e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   81c60:	4b06      	ldr	r3, [pc, #24]	; (81c7c <_sbrk+0x28>)
   81c62:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81c64:	181a      	adds	r2, r3, r0
   81c66:	4907      	ldr	r1, [pc, #28]	; (81c84 <_sbrk+0x30>)
   81c68:	4291      	cmp	r1, r2
   81c6a:	db04      	blt.n	81c76 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   81c6c:	4610      	mov	r0, r2
   81c6e:	4a03      	ldr	r2, [pc, #12]	; (81c7c <_sbrk+0x28>)
   81c70:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81c72:	4618      	mov	r0, r3
   81c74:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   81c76:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   81c7a:	4770      	bx	lr
   81c7c:	2007095c 	.word	0x2007095c
   81c80:	20072a20 	.word	0x20072a20
   81c84:	20087ffc 	.word	0x20087ffc

00081c88 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81c88:	f04f 30ff 	mov.w	r0, #4294967295
   81c8c:	4770      	bx	lr
   81c8e:	bf00      	nop

00081c90 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   81c90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81c94:	604b      	str	r3, [r1, #4]

	return 0;
}
   81c96:	2000      	movs	r0, #0
   81c98:	4770      	bx	lr
   81c9a:	bf00      	nop

00081c9c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81c9c:	2001      	movs	r0, #1
   81c9e:	4770      	bx	lr

00081ca0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81ca0:	2000      	movs	r0, #0
   81ca2:	4770      	bx	lr

00081ca4 <atexit>:
   81ca4:	4601      	mov	r1, r0
   81ca6:	2000      	movs	r0, #0
   81ca8:	4602      	mov	r2, r0
   81caa:	4603      	mov	r3, r0
   81cac:	f000 b97a 	b.w	81fa4 <__register_exitproc>

00081cb0 <__libc_fini_array>:
   81cb0:	b538      	push	{r3, r4, r5, lr}
   81cb2:	4d08      	ldr	r5, [pc, #32]	; (81cd4 <__libc_fini_array+0x24>)
   81cb4:	4c08      	ldr	r4, [pc, #32]	; (81cd8 <__libc_fini_array+0x28>)
   81cb6:	1b64      	subs	r4, r4, r5
   81cb8:	10a4      	asrs	r4, r4, #2
   81cba:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   81cbe:	b124      	cbz	r4, 81cca <__libc_fini_array+0x1a>
   81cc0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   81cc4:	3c01      	subs	r4, #1
   81cc6:	4798      	blx	r3
   81cc8:	e7f9      	b.n	81cbe <__libc_fini_array+0xe>
   81cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81cce:	f001 b8a3 	b.w	82e18 <_fini>
   81cd2:	bf00      	nop
   81cd4:	00082e24 	.word	0x00082e24
   81cd8:	00082e28 	.word	0x00082e28

00081cdc <__libc_init_array>:
   81cdc:	b570      	push	{r4, r5, r6, lr}
   81cde:	4b0e      	ldr	r3, [pc, #56]	; (81d18 <__libc_init_array+0x3c>)
   81ce0:	4d0e      	ldr	r5, [pc, #56]	; (81d1c <__libc_init_array+0x40>)
   81ce2:	2400      	movs	r4, #0
   81ce4:	1aed      	subs	r5, r5, r3
   81ce6:	10ad      	asrs	r5, r5, #2
   81ce8:	461e      	mov	r6, r3
   81cea:	42ac      	cmp	r4, r5
   81cec:	d004      	beq.n	81cf8 <__libc_init_array+0x1c>
   81cee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   81cf2:	4790      	blx	r2
   81cf4:	3401      	adds	r4, #1
   81cf6:	e7f8      	b.n	81cea <__libc_init_array+0xe>
   81cf8:	f001 f884 	bl	82e04 <_init>
   81cfc:	4d08      	ldr	r5, [pc, #32]	; (81d20 <__libc_init_array+0x44>)
   81cfe:	4b09      	ldr	r3, [pc, #36]	; (81d24 <__libc_init_array+0x48>)
   81d00:	2400      	movs	r4, #0
   81d02:	1aed      	subs	r5, r5, r3
   81d04:	10ad      	asrs	r5, r5, #2
   81d06:	461e      	mov	r6, r3
   81d08:	42ac      	cmp	r4, r5
   81d0a:	d004      	beq.n	81d16 <__libc_init_array+0x3a>
   81d0c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   81d10:	4790      	blx	r2
   81d12:	3401      	adds	r4, #1
   81d14:	e7f8      	b.n	81d08 <__libc_init_array+0x2c>
   81d16:	bd70      	pop	{r4, r5, r6, pc}
   81d18:	00082e10 	.word	0x00082e10
   81d1c:	00082e10 	.word	0x00082e10
   81d20:	00082e18 	.word	0x00082e18
   81d24:	00082e10 	.word	0x00082e10

00081d28 <memset>:
   81d28:	4402      	add	r2, r0
   81d2a:	4603      	mov	r3, r0
   81d2c:	4293      	cmp	r3, r2
   81d2e:	d002      	beq.n	81d36 <memset+0xe>
   81d30:	f803 1b01 	strb.w	r1, [r3], #1
   81d34:	e7fa      	b.n	81d2c <memset+0x4>
   81d36:	4770      	bx	lr

00081d38 <setbuf>:
   81d38:	2900      	cmp	r1, #0
   81d3a:	bf0c      	ite	eq
   81d3c:	2202      	moveq	r2, #2
   81d3e:	2200      	movne	r2, #0
   81d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81d44:	f000 b80e 	b.w	81d64 <setvbuf>

00081d48 <setjmp>:
   81d48:	46ec      	mov	ip, sp
   81d4a:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81d4e:	f04f 0000 	mov.w	r0, #0
   81d52:	4770      	bx	lr

00081d54 <longjmp>:
   81d54:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81d58:	46e5      	mov	sp, ip
   81d5a:	0008      	movs	r0, r1
   81d5c:	bf08      	it	eq
   81d5e:	2001      	moveq	r0, #1
   81d60:	4770      	bx	lr
   81d62:	bf00      	nop

00081d64 <setvbuf>:
   81d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81d68:	461d      	mov	r5, r3
   81d6a:	4b36      	ldr	r3, [pc, #216]	; (81e44 <setvbuf+0xe0>)
   81d6c:	4604      	mov	r4, r0
   81d6e:	681f      	ldr	r7, [r3, #0]
   81d70:	460e      	mov	r6, r1
   81d72:	4690      	mov	r8, r2
   81d74:	b127      	cbz	r7, 81d80 <setvbuf+0x1c>
   81d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   81d78:	b913      	cbnz	r3, 81d80 <setvbuf+0x1c>
   81d7a:	4638      	mov	r0, r7
   81d7c:	f000 fa3c 	bl	821f8 <__sinit>
   81d80:	f1b8 0f02 	cmp.w	r8, #2
   81d84:	d859      	bhi.n	81e3a <setvbuf+0xd6>
   81d86:	2d00      	cmp	r5, #0
   81d88:	db57      	blt.n	81e3a <setvbuf+0xd6>
   81d8a:	4638      	mov	r0, r7
   81d8c:	4621      	mov	r1, r4
   81d8e:	f000 f9ea 	bl	82166 <_fflush_r>
   81d92:	2300      	movs	r3, #0
   81d94:	6063      	str	r3, [r4, #4]
   81d96:	61a3      	str	r3, [r4, #24]
   81d98:	89a3      	ldrh	r3, [r4, #12]
   81d9a:	061b      	lsls	r3, r3, #24
   81d9c:	d503      	bpl.n	81da6 <setvbuf+0x42>
   81d9e:	4638      	mov	r0, r7
   81da0:	6921      	ldr	r1, [r4, #16]
   81da2:	f000 fb41 	bl	82428 <_free_r>
   81da6:	89a3      	ldrh	r3, [r4, #12]
   81da8:	f1b8 0f02 	cmp.w	r8, #2
   81dac:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81db0:	81a3      	strh	r3, [r4, #12]
   81db2:	d012      	beq.n	81dda <setvbuf+0x76>
   81db4:	bb36      	cbnz	r6, 81e04 <setvbuf+0xa0>
   81db6:	2d00      	cmp	r5, #0
   81db8:	bf08      	it	eq
   81dba:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   81dbe:	4628      	mov	r0, r5
   81dc0:	f000 fc88 	bl	826d4 <malloc>
   81dc4:	4606      	mov	r6, r0
   81dc6:	b9c8      	cbnz	r0, 81dfc <setvbuf+0x98>
   81dc8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81dcc:	f000 fc82 	bl	826d4 <malloc>
   81dd0:	4606      	mov	r6, r0
   81dd2:	b988      	cbnz	r0, 81df8 <setvbuf+0x94>
   81dd4:	f04f 30ff 	mov.w	r0, #4294967295
   81dd8:	e000      	b.n	81ddc <setvbuf+0x78>
   81dda:	2000      	movs	r0, #0
   81ddc:	89a3      	ldrh	r3, [r4, #12]
   81dde:	f043 0302 	orr.w	r3, r3, #2
   81de2:	81a3      	strh	r3, [r4, #12]
   81de4:	2300      	movs	r3, #0
   81de6:	60a3      	str	r3, [r4, #8]
   81de8:	f104 0343 	add.w	r3, r4, #67	; 0x43
   81dec:	6023      	str	r3, [r4, #0]
   81dee:	6123      	str	r3, [r4, #16]
   81df0:	2301      	movs	r3, #1
   81df2:	6163      	str	r3, [r4, #20]
   81df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81df8:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81dfc:	89a3      	ldrh	r3, [r4, #12]
   81dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81e02:	81a3      	strh	r3, [r4, #12]
   81e04:	f1b8 0f01 	cmp.w	r8, #1
   81e08:	d105      	bne.n	81e16 <setvbuf+0xb2>
   81e0a:	89a3      	ldrh	r3, [r4, #12]
   81e0c:	f043 0301 	orr.w	r3, r3, #1
   81e10:	81a3      	strh	r3, [r4, #12]
   81e12:	426b      	negs	r3, r5
   81e14:	61a3      	str	r3, [r4, #24]
   81e16:	4b0c      	ldr	r3, [pc, #48]	; (81e48 <setvbuf+0xe4>)
   81e18:	63fb      	str	r3, [r7, #60]	; 0x3c
   81e1a:	89a3      	ldrh	r3, [r4, #12]
   81e1c:	6026      	str	r6, [r4, #0]
   81e1e:	f003 0008 	and.w	r0, r3, #8
   81e22:	b280      	uxth	r0, r0
   81e24:	6126      	str	r6, [r4, #16]
   81e26:	6165      	str	r5, [r4, #20]
   81e28:	b148      	cbz	r0, 81e3e <setvbuf+0xda>
   81e2a:	f013 0f03 	tst.w	r3, #3
   81e2e:	bf18      	it	ne
   81e30:	2500      	movne	r5, #0
   81e32:	60a5      	str	r5, [r4, #8]
   81e34:	2000      	movs	r0, #0
   81e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e3a:	f04f 30ff 	mov.w	r0, #4294967295
   81e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e42:	bf00      	nop
   81e44:	20070008 	.word	0x20070008
   81e48:	000821b5 	.word	0x000821b5

00081e4c <__swbuf_r>:
   81e4c:	b570      	push	{r4, r5, r6, lr}
   81e4e:	460d      	mov	r5, r1
   81e50:	4614      	mov	r4, r2
   81e52:	4606      	mov	r6, r0
   81e54:	b118      	cbz	r0, 81e5e <__swbuf_r+0x12>
   81e56:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81e58:	b90b      	cbnz	r3, 81e5e <__swbuf_r+0x12>
   81e5a:	f000 f9cd 	bl	821f8 <__sinit>
   81e5e:	69a3      	ldr	r3, [r4, #24]
   81e60:	60a3      	str	r3, [r4, #8]
   81e62:	89a3      	ldrh	r3, [r4, #12]
   81e64:	0719      	lsls	r1, r3, #28
   81e66:	d50d      	bpl.n	81e84 <__swbuf_r+0x38>
   81e68:	6923      	ldr	r3, [r4, #16]
   81e6a:	b15b      	cbz	r3, 81e84 <__swbuf_r+0x38>
   81e6c:	89a3      	ldrh	r3, [r4, #12]
   81e6e:	b2ed      	uxtb	r5, r5
   81e70:	049a      	lsls	r2, r3, #18
   81e72:	d410      	bmi.n	81e96 <__swbuf_r+0x4a>
   81e74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   81e78:	81a3      	strh	r3, [r4, #12]
   81e7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   81e7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   81e80:	6663      	str	r3, [r4, #100]	; 0x64
   81e82:	e008      	b.n	81e96 <__swbuf_r+0x4a>
   81e84:	4630      	mov	r0, r6
   81e86:	4621      	mov	r1, r4
   81e88:	f000 f832 	bl	81ef0 <__swsetup_r>
   81e8c:	2800      	cmp	r0, #0
   81e8e:	d0ed      	beq.n	81e6c <__swbuf_r+0x20>
   81e90:	f04f 30ff 	mov.w	r0, #4294967295
   81e94:	bd70      	pop	{r4, r5, r6, pc}
   81e96:	6923      	ldr	r3, [r4, #16]
   81e98:	6820      	ldr	r0, [r4, #0]
   81e9a:	1ac0      	subs	r0, r0, r3
   81e9c:	6963      	ldr	r3, [r4, #20]
   81e9e:	4298      	cmp	r0, r3
   81ea0:	db05      	blt.n	81eae <__swbuf_r+0x62>
   81ea2:	4630      	mov	r0, r6
   81ea4:	4621      	mov	r1, r4
   81ea6:	f000 f95e 	bl	82166 <_fflush_r>
   81eaa:	2800      	cmp	r0, #0
   81eac:	d1f0      	bne.n	81e90 <__swbuf_r+0x44>
   81eae:	68a3      	ldr	r3, [r4, #8]
   81eb0:	3001      	adds	r0, #1
   81eb2:	3b01      	subs	r3, #1
   81eb4:	60a3      	str	r3, [r4, #8]
   81eb6:	6823      	ldr	r3, [r4, #0]
   81eb8:	1c5a      	adds	r2, r3, #1
   81eba:	6022      	str	r2, [r4, #0]
   81ebc:	701d      	strb	r5, [r3, #0]
   81ebe:	6963      	ldr	r3, [r4, #20]
   81ec0:	4298      	cmp	r0, r3
   81ec2:	d004      	beq.n	81ece <__swbuf_r+0x82>
   81ec4:	89a3      	ldrh	r3, [r4, #12]
   81ec6:	07db      	lsls	r3, r3, #31
   81ec8:	d507      	bpl.n	81eda <__swbuf_r+0x8e>
   81eca:	2d0a      	cmp	r5, #10
   81ecc:	d105      	bne.n	81eda <__swbuf_r+0x8e>
   81ece:	4630      	mov	r0, r6
   81ed0:	4621      	mov	r1, r4
   81ed2:	f000 f948 	bl	82166 <_fflush_r>
   81ed6:	2800      	cmp	r0, #0
   81ed8:	d1da      	bne.n	81e90 <__swbuf_r+0x44>
   81eda:	4628      	mov	r0, r5
   81edc:	bd70      	pop	{r4, r5, r6, pc}

00081ede <__swbuf>:
   81ede:	460a      	mov	r2, r1
   81ee0:	4902      	ldr	r1, [pc, #8]	; (81eec <__swbuf+0xe>)
   81ee2:	4603      	mov	r3, r0
   81ee4:	6808      	ldr	r0, [r1, #0]
   81ee6:	4619      	mov	r1, r3
   81ee8:	f7ff bfb0 	b.w	81e4c <__swbuf_r>
   81eec:	20070008 	.word	0x20070008

00081ef0 <__swsetup_r>:
   81ef0:	b538      	push	{r3, r4, r5, lr}
   81ef2:	4b2b      	ldr	r3, [pc, #172]	; (81fa0 <__swsetup_r+0xb0>)
   81ef4:	4605      	mov	r5, r0
   81ef6:	6818      	ldr	r0, [r3, #0]
   81ef8:	460c      	mov	r4, r1
   81efa:	b118      	cbz	r0, 81f04 <__swsetup_r+0x14>
   81efc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81efe:	b90b      	cbnz	r3, 81f04 <__swsetup_r+0x14>
   81f00:	f000 f97a 	bl	821f8 <__sinit>
   81f04:	89a2      	ldrh	r2, [r4, #12]
   81f06:	b293      	uxth	r3, r2
   81f08:	0718      	lsls	r0, r3, #28
   81f0a:	d420      	bmi.n	81f4e <__swsetup_r+0x5e>
   81f0c:	06d9      	lsls	r1, r3, #27
   81f0e:	d405      	bmi.n	81f1c <__swsetup_r+0x2c>
   81f10:	2309      	movs	r3, #9
   81f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   81f16:	602b      	str	r3, [r5, #0]
   81f18:	81a2      	strh	r2, [r4, #12]
   81f1a:	e03b      	b.n	81f94 <__swsetup_r+0xa4>
   81f1c:	0758      	lsls	r0, r3, #29
   81f1e:	d512      	bpl.n	81f46 <__swsetup_r+0x56>
   81f20:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81f22:	b141      	cbz	r1, 81f36 <__swsetup_r+0x46>
   81f24:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81f28:	4299      	cmp	r1, r3
   81f2a:	d002      	beq.n	81f32 <__swsetup_r+0x42>
   81f2c:	4628      	mov	r0, r5
   81f2e:	f000 fa7b 	bl	82428 <_free_r>
   81f32:	2300      	movs	r3, #0
   81f34:	6323      	str	r3, [r4, #48]	; 0x30
   81f36:	89a3      	ldrh	r3, [r4, #12]
   81f38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   81f3c:	81a3      	strh	r3, [r4, #12]
   81f3e:	2300      	movs	r3, #0
   81f40:	6063      	str	r3, [r4, #4]
   81f42:	6923      	ldr	r3, [r4, #16]
   81f44:	6023      	str	r3, [r4, #0]
   81f46:	89a3      	ldrh	r3, [r4, #12]
   81f48:	f043 0308 	orr.w	r3, r3, #8
   81f4c:	81a3      	strh	r3, [r4, #12]
   81f4e:	6923      	ldr	r3, [r4, #16]
   81f50:	b94b      	cbnz	r3, 81f66 <__swsetup_r+0x76>
   81f52:	89a3      	ldrh	r3, [r4, #12]
   81f54:	f403 7320 	and.w	r3, r3, #640	; 0x280
   81f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   81f5c:	d003      	beq.n	81f66 <__swsetup_r+0x76>
   81f5e:	4628      	mov	r0, r5
   81f60:	4621      	mov	r1, r4
   81f62:	f000 fb53 	bl	8260c <__smakebuf_r>
   81f66:	89a3      	ldrh	r3, [r4, #12]
   81f68:	f013 0201 	ands.w	r2, r3, #1
   81f6c:	d005      	beq.n	81f7a <__swsetup_r+0x8a>
   81f6e:	2200      	movs	r2, #0
   81f70:	60a2      	str	r2, [r4, #8]
   81f72:	6962      	ldr	r2, [r4, #20]
   81f74:	4252      	negs	r2, r2
   81f76:	61a2      	str	r2, [r4, #24]
   81f78:	e003      	b.n	81f82 <__swsetup_r+0x92>
   81f7a:	0799      	lsls	r1, r3, #30
   81f7c:	bf58      	it	pl
   81f7e:	6962      	ldrpl	r2, [r4, #20]
   81f80:	60a2      	str	r2, [r4, #8]
   81f82:	6922      	ldr	r2, [r4, #16]
   81f84:	b94a      	cbnz	r2, 81f9a <__swsetup_r+0xaa>
   81f86:	f003 0080 	and.w	r0, r3, #128	; 0x80
   81f8a:	b280      	uxth	r0, r0
   81f8c:	b130      	cbz	r0, 81f9c <__swsetup_r+0xac>
   81f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f92:	81a3      	strh	r3, [r4, #12]
   81f94:	f04f 30ff 	mov.w	r0, #4294967295
   81f98:	bd38      	pop	{r3, r4, r5, pc}
   81f9a:	2000      	movs	r0, #0
   81f9c:	bd38      	pop	{r3, r4, r5, pc}
   81f9e:	bf00      	nop
   81fa0:	20070008 	.word	0x20070008

00081fa4 <__register_exitproc>:
   81fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81fa8:	4698      	mov	r8, r3
   81faa:	4b22      	ldr	r3, [pc, #136]	; (82034 <__register_exitproc+0x90>)
   81fac:	4606      	mov	r6, r0
   81fae:	681c      	ldr	r4, [r3, #0]
   81fb0:	460f      	mov	r7, r1
   81fb2:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   81fb6:	4691      	mov	r9, r2
   81fb8:	b918      	cbnz	r0, 81fc2 <__register_exitproc+0x1e>
   81fba:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   81fbe:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   81fc2:	6843      	ldr	r3, [r0, #4]
   81fc4:	2b1f      	cmp	r3, #31
   81fc6:	dd16      	ble.n	81ff6 <__register_exitproc+0x52>
   81fc8:	4b1b      	ldr	r3, [pc, #108]	; (82038 <__register_exitproc+0x94>)
   81fca:	b91b      	cbnz	r3, 81fd4 <__register_exitproc+0x30>
   81fcc:	f04f 30ff 	mov.w	r0, #4294967295
   81fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81fd4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81fd8:	f000 fb7c 	bl	826d4 <malloc>
   81fdc:	2800      	cmp	r0, #0
   81fde:	d0f5      	beq.n	81fcc <__register_exitproc+0x28>
   81fe0:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81fe4:	2500      	movs	r5, #0
   81fe6:	6045      	str	r5, [r0, #4]
   81fe8:	6001      	str	r1, [r0, #0]
   81fea:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   81fee:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   81ff2:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   81ff6:	6844      	ldr	r4, [r0, #4]
   81ff8:	b1a6      	cbz	r6, 82024 <__register_exitproc+0x80>
   81ffa:	2201      	movs	r2, #1
   81ffc:	40a2      	lsls	r2, r4
   81ffe:	eb00 0584 	add.w	r5, r0, r4, lsl #2
   82002:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
   82006:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   8200a:	2e02      	cmp	r6, #2
   8200c:	ea41 0102 	orr.w	r1, r1, r2
   82010:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   82014:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
   82018:	d104      	bne.n	82024 <__register_exitproc+0x80>
   8201a:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   8201e:	431a      	orrs	r2, r3
   82020:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   82024:	1c63      	adds	r3, r4, #1
   82026:	3402      	adds	r4, #2
   82028:	6043      	str	r3, [r0, #4]
   8202a:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
   8202e:	2000      	movs	r0, #0
   82030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82034:	00082dfc 	.word	0x00082dfc
   82038:	000826d5 	.word	0x000826d5

0008203c <register_fini>:
   8203c:	4b02      	ldr	r3, [pc, #8]	; (82048 <register_fini+0xc>)
   8203e:	b113      	cbz	r3, 82046 <register_fini+0xa>
   82040:	4802      	ldr	r0, [pc, #8]	; (8204c <register_fini+0x10>)
   82042:	f7ff be2f 	b.w	81ca4 <atexit>
   82046:	4770      	bx	lr
   82048:	00000000 	.word	0x00000000
   8204c:	00081cb1 	.word	0x00081cb1

00082050 <__sflush_r>:
   82050:	898a      	ldrh	r2, [r1, #12]
   82052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82056:	b293      	uxth	r3, r2
   82058:	4605      	mov	r5, r0
   8205a:	0718      	lsls	r0, r3, #28
   8205c:	460c      	mov	r4, r1
   8205e:	d45e      	bmi.n	8211e <__sflush_r+0xce>
   82060:	684b      	ldr	r3, [r1, #4]
   82062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   82066:	2b00      	cmp	r3, #0
   82068:	818a      	strh	r2, [r1, #12]
   8206a:	dc02      	bgt.n	82072 <__sflush_r+0x22>
   8206c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8206e:	2b00      	cmp	r3, #0
   82070:	dd18      	ble.n	820a4 <__sflush_r+0x54>
   82072:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   82074:	b1b6      	cbz	r6, 820a4 <__sflush_r+0x54>
   82076:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   8207a:	2300      	movs	r3, #0
   8207c:	b292      	uxth	r2, r2
   8207e:	682f      	ldr	r7, [r5, #0]
   82080:	602b      	str	r3, [r5, #0]
   82082:	b10a      	cbz	r2, 82088 <__sflush_r+0x38>
   82084:	6d22      	ldr	r2, [r4, #80]	; 0x50
   82086:	e010      	b.n	820aa <__sflush_r+0x5a>
   82088:	69e1      	ldr	r1, [r4, #28]
   8208a:	4628      	mov	r0, r5
   8208c:	2301      	movs	r3, #1
   8208e:	47b0      	blx	r6
   82090:	1c41      	adds	r1, r0, #1
   82092:	4602      	mov	r2, r0
   82094:	d109      	bne.n	820aa <__sflush_r+0x5a>
   82096:	682b      	ldr	r3, [r5, #0]
   82098:	b13b      	cbz	r3, 820aa <__sflush_r+0x5a>
   8209a:	2b1d      	cmp	r3, #29
   8209c:	d001      	beq.n	820a2 <__sflush_r+0x52>
   8209e:	2b16      	cmp	r3, #22
   820a0:	d14a      	bne.n	82138 <__sflush_r+0xe8>
   820a2:	602f      	str	r7, [r5, #0]
   820a4:	2000      	movs	r0, #0
   820a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820aa:	89a3      	ldrh	r3, [r4, #12]
   820ac:	075b      	lsls	r3, r3, #29
   820ae:	d505      	bpl.n	820bc <__sflush_r+0x6c>
   820b0:	6863      	ldr	r3, [r4, #4]
   820b2:	1ad2      	subs	r2, r2, r3
   820b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   820b6:	b10b      	cbz	r3, 820bc <__sflush_r+0x6c>
   820b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   820ba:	1ad2      	subs	r2, r2, r3
   820bc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   820be:	4628      	mov	r0, r5
   820c0:	69e1      	ldr	r1, [r4, #28]
   820c2:	2300      	movs	r3, #0
   820c4:	47b0      	blx	r6
   820c6:	1c46      	adds	r6, r0, #1
   820c8:	89a2      	ldrh	r2, [r4, #12]
   820ca:	d105      	bne.n	820d8 <__sflush_r+0x88>
   820cc:	682b      	ldr	r3, [r5, #0]
   820ce:	b11b      	cbz	r3, 820d8 <__sflush_r+0x88>
   820d0:	2b1d      	cmp	r3, #29
   820d2:	d001      	beq.n	820d8 <__sflush_r+0x88>
   820d4:	2b16      	cmp	r3, #22
   820d6:	d11d      	bne.n	82114 <__sflush_r+0xc4>
   820d8:	2300      	movs	r3, #0
   820da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   820de:	b292      	uxth	r2, r2
   820e0:	6063      	str	r3, [r4, #4]
   820e2:	6923      	ldr	r3, [r4, #16]
   820e4:	04d1      	lsls	r1, r2, #19
   820e6:	81a2      	strh	r2, [r4, #12]
   820e8:	6023      	str	r3, [r4, #0]
   820ea:	d504      	bpl.n	820f6 <__sflush_r+0xa6>
   820ec:	1c42      	adds	r2, r0, #1
   820ee:	d101      	bne.n	820f4 <__sflush_r+0xa4>
   820f0:	682b      	ldr	r3, [r5, #0]
   820f2:	b903      	cbnz	r3, 820f6 <__sflush_r+0xa6>
   820f4:	6520      	str	r0, [r4, #80]	; 0x50
   820f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   820f8:	602f      	str	r7, [r5, #0]
   820fa:	2900      	cmp	r1, #0
   820fc:	d0d2      	beq.n	820a4 <__sflush_r+0x54>
   820fe:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82102:	4299      	cmp	r1, r3
   82104:	d002      	beq.n	8210c <__sflush_r+0xbc>
   82106:	4628      	mov	r0, r5
   82108:	f000 f98e 	bl	82428 <_free_r>
   8210c:	2000      	movs	r0, #0
   8210e:	6320      	str	r0, [r4, #48]	; 0x30
   82110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   82118:	81a2      	strh	r2, [r4, #12]
   8211a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8211e:	690e      	ldr	r6, [r1, #16]
   82120:	2e00      	cmp	r6, #0
   82122:	d0bf      	beq.n	820a4 <__sflush_r+0x54>
   82124:	079b      	lsls	r3, r3, #30
   82126:	680a      	ldr	r2, [r1, #0]
   82128:	bf0c      	ite	eq
   8212a:	694b      	ldreq	r3, [r1, #20]
   8212c:	2300      	movne	r3, #0
   8212e:	ebc6 0802 	rsb	r8, r6, r2
   82132:	600e      	str	r6, [r1, #0]
   82134:	608b      	str	r3, [r1, #8]
   82136:	e012      	b.n	8215e <__sflush_r+0x10e>
   82138:	89a3      	ldrh	r3, [r4, #12]
   8213a:	f04f 30ff 	mov.w	r0, #4294967295
   8213e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82142:	81a3      	strh	r3, [r4, #12]
   82144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82148:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8214a:	4628      	mov	r0, r5
   8214c:	69e1      	ldr	r1, [r4, #28]
   8214e:	4632      	mov	r2, r6
   82150:	4643      	mov	r3, r8
   82152:	47b8      	blx	r7
   82154:	2800      	cmp	r0, #0
   82156:	ddef      	ble.n	82138 <__sflush_r+0xe8>
   82158:	4406      	add	r6, r0
   8215a:	ebc0 0808 	rsb	r8, r0, r8
   8215e:	f1b8 0f00 	cmp.w	r8, #0
   82162:	dcf1      	bgt.n	82148 <__sflush_r+0xf8>
   82164:	e79e      	b.n	820a4 <__sflush_r+0x54>

00082166 <_fflush_r>:
   82166:	b538      	push	{r3, r4, r5, lr}
   82168:	460c      	mov	r4, r1
   8216a:	4605      	mov	r5, r0
   8216c:	b118      	cbz	r0, 82176 <_fflush_r+0x10>
   8216e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82170:	b90b      	cbnz	r3, 82176 <_fflush_r+0x10>
   82172:	f000 f841 	bl	821f8 <__sinit>
   82176:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8217a:	b128      	cbz	r0, 82188 <_fflush_r+0x22>
   8217c:	4628      	mov	r0, r5
   8217e:	4621      	mov	r1, r4
   82180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82184:	f7ff bf64 	b.w	82050 <__sflush_r>
   82188:	bd38      	pop	{r3, r4, r5, pc}

0008218a <fflush>:
   8218a:	4601      	mov	r1, r0
   8218c:	b920      	cbnz	r0, 82198 <fflush+0xe>
   8218e:	4b04      	ldr	r3, [pc, #16]	; (821a0 <fflush+0x16>)
   82190:	4904      	ldr	r1, [pc, #16]	; (821a4 <fflush+0x1a>)
   82192:	6818      	ldr	r0, [r3, #0]
   82194:	f000 ba1c 	b.w	825d0 <_fwalk_reent>
   82198:	4b03      	ldr	r3, [pc, #12]	; (821a8 <fflush+0x1e>)
   8219a:	6818      	ldr	r0, [r3, #0]
   8219c:	f7ff bfe3 	b.w	82166 <_fflush_r>
   821a0:	00082dfc 	.word	0x00082dfc
   821a4:	00082167 	.word	0x00082167
   821a8:	20070008 	.word	0x20070008

000821ac <__fp_lock>:
   821ac:	2000      	movs	r0, #0
   821ae:	4770      	bx	lr

000821b0 <__fp_unlock>:
   821b0:	2000      	movs	r0, #0
   821b2:	4770      	bx	lr

000821b4 <_cleanup_r>:
   821b4:	4901      	ldr	r1, [pc, #4]	; (821bc <_cleanup_r+0x8>)
   821b6:	f000 b9ef 	b.w	82598 <_fwalk>
   821ba:	bf00      	nop
   821bc:	00082c75 	.word	0x00082c75

000821c0 <__sfmoreglue>:
   821c0:	b570      	push	{r4, r5, r6, lr}
   821c2:	1e4b      	subs	r3, r1, #1
   821c4:	2568      	movs	r5, #104	; 0x68
   821c6:	435d      	muls	r5, r3
   821c8:	460e      	mov	r6, r1
   821ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
   821ce:	f000 fa91 	bl	826f4 <_malloc_r>
   821d2:	4604      	mov	r4, r0
   821d4:	b140      	cbz	r0, 821e8 <__sfmoreglue+0x28>
   821d6:	2100      	movs	r1, #0
   821d8:	e880 0042 	stmia.w	r0, {r1, r6}
   821dc:	300c      	adds	r0, #12
   821de:	60a0      	str	r0, [r4, #8]
   821e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
   821e4:	f7ff fda0 	bl	81d28 <memset>
   821e8:	4620      	mov	r0, r4
   821ea:	bd70      	pop	{r4, r5, r6, pc}

000821ec <_cleanup>:
   821ec:	4b01      	ldr	r3, [pc, #4]	; (821f4 <_cleanup+0x8>)
   821ee:	6818      	ldr	r0, [r3, #0]
   821f0:	f7ff bfe0 	b.w	821b4 <_cleanup_r>
   821f4:	00082dfc 	.word	0x00082dfc

000821f8 <__sinit>:
   821f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   821fc:	6b84      	ldr	r4, [r0, #56]	; 0x38
   821fe:	4606      	mov	r6, r0
   82200:	2c00      	cmp	r4, #0
   82202:	d162      	bne.n	822ca <__sinit+0xd2>
   82204:	4b32      	ldr	r3, [pc, #200]	; (822d0 <__sinit+0xd8>)
   82206:	6845      	ldr	r5, [r0, #4]
   82208:	63c3      	str	r3, [r0, #60]	; 0x3c
   8220a:	2303      	movs	r3, #3
   8220c:	f8c0 32e4 	str.w	r3, [r0, #740]	; 0x2e4
   82210:	f500 733b 	add.w	r3, r0, #748	; 0x2ec
   82214:	f8c0 32e8 	str.w	r3, [r0, #744]	; 0x2e8
   82218:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 822d8 <__sinit+0xe0>
   8221c:	2304      	movs	r3, #4
   8221e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 822dc <__sinit+0xe4>
   82222:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 822e0 <__sinit+0xe8>
   82226:	4f2b      	ldr	r7, [pc, #172]	; (822d4 <__sinit+0xdc>)
   82228:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
   8222c:	4621      	mov	r1, r4
   8222e:	81ab      	strh	r3, [r5, #12]
   82230:	602c      	str	r4, [r5, #0]
   82232:	606c      	str	r4, [r5, #4]
   82234:	60ac      	str	r4, [r5, #8]
   82236:	666c      	str	r4, [r5, #100]	; 0x64
   82238:	81ec      	strh	r4, [r5, #14]
   8223a:	612c      	str	r4, [r5, #16]
   8223c:	616c      	str	r4, [r5, #20]
   8223e:	61ac      	str	r4, [r5, #24]
   82240:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82244:	2208      	movs	r2, #8
   82246:	f7ff fd6f 	bl	81d28 <memset>
   8224a:	61ed      	str	r5, [r5, #28]
   8224c:	f8c5 a020 	str.w	sl, [r5, #32]
   82250:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   82254:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   82258:	62ef      	str	r7, [r5, #44]	; 0x2c
   8225a:	68b5      	ldr	r5, [r6, #8]
   8225c:	2309      	movs	r3, #9
   8225e:	f04f 0b01 	mov.w	fp, #1
   82262:	81ab      	strh	r3, [r5, #12]
   82264:	602c      	str	r4, [r5, #0]
   82266:	606c      	str	r4, [r5, #4]
   82268:	60ac      	str	r4, [r5, #8]
   8226a:	666c      	str	r4, [r5, #100]	; 0x64
   8226c:	f8a5 b00e 	strh.w	fp, [r5, #14]
   82270:	612c      	str	r4, [r5, #16]
   82272:	616c      	str	r4, [r5, #20]
   82274:	61ac      	str	r4, [r5, #24]
   82276:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8227a:	4621      	mov	r1, r4
   8227c:	2208      	movs	r2, #8
   8227e:	f7ff fd53 	bl	81d28 <memset>
   82282:	61ed      	str	r5, [r5, #28]
   82284:	f8c5 a020 	str.w	sl, [r5, #32]
   82288:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   8228c:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   82290:	62ef      	str	r7, [r5, #44]	; 0x2c
   82292:	68f5      	ldr	r5, [r6, #12]
   82294:	2312      	movs	r3, #18
   82296:	81ab      	strh	r3, [r5, #12]
   82298:	2302      	movs	r3, #2
   8229a:	602c      	str	r4, [r5, #0]
   8229c:	606c      	str	r4, [r5, #4]
   8229e:	60ac      	str	r4, [r5, #8]
   822a0:	666c      	str	r4, [r5, #100]	; 0x64
   822a2:	81eb      	strh	r3, [r5, #14]
   822a4:	612c      	str	r4, [r5, #16]
   822a6:	616c      	str	r4, [r5, #20]
   822a8:	61ac      	str	r4, [r5, #24]
   822aa:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   822ae:	4621      	mov	r1, r4
   822b0:	2208      	movs	r2, #8
   822b2:	f7ff fd39 	bl	81d28 <memset>
   822b6:	61ed      	str	r5, [r5, #28]
   822b8:	f8c5 a020 	str.w	sl, [r5, #32]
   822bc:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   822c0:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   822c4:	62ef      	str	r7, [r5, #44]	; 0x2c
   822c6:	f8c6 b038 	str.w	fp, [r6, #56]	; 0x38
   822ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   822ce:	bf00      	nop
   822d0:	000821b5 	.word	0x000821b5
   822d4:	00082bab 	.word	0x00082bab
   822d8:	00082b29 	.word	0x00082b29
   822dc:	00082b4f 	.word	0x00082b4f
   822e0:	00082b87 	.word	0x00082b87

000822e4 <__sfp>:
   822e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   822e6:	4b1c      	ldr	r3, [pc, #112]	; (82358 <__sfp+0x74>)
   822e8:	4607      	mov	r7, r0
   822ea:	681e      	ldr	r6, [r3, #0]
   822ec:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   822ee:	b913      	cbnz	r3, 822f6 <__sfp+0x12>
   822f0:	4630      	mov	r0, r6
   822f2:	f7ff ff81 	bl	821f8 <__sinit>
   822f6:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
   822fa:	68b4      	ldr	r4, [r6, #8]
   822fc:	6873      	ldr	r3, [r6, #4]
   822fe:	3b01      	subs	r3, #1
   82300:	d404      	bmi.n	8230c <__sfp+0x28>
   82302:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   82306:	b175      	cbz	r5, 82326 <__sfp+0x42>
   82308:	3468      	adds	r4, #104	; 0x68
   8230a:	e7f8      	b.n	822fe <__sfp+0x1a>
   8230c:	6833      	ldr	r3, [r6, #0]
   8230e:	b92b      	cbnz	r3, 8231c <__sfp+0x38>
   82310:	4638      	mov	r0, r7
   82312:	2104      	movs	r1, #4
   82314:	f7ff ff54 	bl	821c0 <__sfmoreglue>
   82318:	6030      	str	r0, [r6, #0]
   8231a:	b108      	cbz	r0, 82320 <__sfp+0x3c>
   8231c:	6836      	ldr	r6, [r6, #0]
   8231e:	e7ec      	b.n	822fa <__sfp+0x16>
   82320:	230c      	movs	r3, #12
   82322:	603b      	str	r3, [r7, #0]
   82324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82326:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8232a:	81e3      	strh	r3, [r4, #14]
   8232c:	2301      	movs	r3, #1
   8232e:	81a3      	strh	r3, [r4, #12]
   82330:	6665      	str	r5, [r4, #100]	; 0x64
   82332:	6025      	str	r5, [r4, #0]
   82334:	60a5      	str	r5, [r4, #8]
   82336:	6065      	str	r5, [r4, #4]
   82338:	6125      	str	r5, [r4, #16]
   8233a:	6165      	str	r5, [r4, #20]
   8233c:	61a5      	str	r5, [r4, #24]
   8233e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   82342:	4629      	mov	r1, r5
   82344:	2208      	movs	r2, #8
   82346:	f7ff fcef 	bl	81d28 <memset>
   8234a:	6325      	str	r5, [r4, #48]	; 0x30
   8234c:	6365      	str	r5, [r4, #52]	; 0x34
   8234e:	6465      	str	r5, [r4, #68]	; 0x44
   82350:	64a5      	str	r5, [r4, #72]	; 0x48
   82352:	4620      	mov	r0, r4
   82354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82356:	bf00      	nop
   82358:	00082dfc 	.word	0x00082dfc

0008235c <__sfp_lock_acquire>:
   8235c:	4770      	bx	lr

0008235e <__sfp_lock_release>:
   8235e:	4770      	bx	lr

00082360 <__sinit_lock_acquire>:
   82360:	4770      	bx	lr

00082362 <__sinit_lock_release>:
   82362:	4770      	bx	lr

00082364 <__fp_lock_all>:
   82364:	4b02      	ldr	r3, [pc, #8]	; (82370 <__fp_lock_all+0xc>)
   82366:	4903      	ldr	r1, [pc, #12]	; (82374 <__fp_lock_all+0x10>)
   82368:	6818      	ldr	r0, [r3, #0]
   8236a:	f000 b915 	b.w	82598 <_fwalk>
   8236e:	bf00      	nop
   82370:	20070008 	.word	0x20070008
   82374:	000821ad 	.word	0x000821ad

00082378 <__fp_unlock_all>:
   82378:	4b02      	ldr	r3, [pc, #8]	; (82384 <__fp_unlock_all+0xc>)
   8237a:	4903      	ldr	r1, [pc, #12]	; (82388 <__fp_unlock_all+0x10>)
   8237c:	6818      	ldr	r0, [r3, #0]
   8237e:	f000 b90b 	b.w	82598 <_fwalk>
   82382:	bf00      	nop
   82384:	20070008 	.word	0x20070008
   82388:	000821b1 	.word	0x000821b1

0008238c <_malloc_trim_r>:
   8238c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8238e:	4d23      	ldr	r5, [pc, #140]	; (8241c <_malloc_trim_r+0x90>)
   82390:	460e      	mov	r6, r1
   82392:	4604      	mov	r4, r0
   82394:	f000 fbb6 	bl	82b04 <__malloc_lock>
   82398:	68ab      	ldr	r3, [r5, #8]
   8239a:	685f      	ldr	r7, [r3, #4]
   8239c:	f027 0703 	bic.w	r7, r7, #3
   823a0:	1bbe      	subs	r6, r7, r6
   823a2:	f606 76ef 	addw	r6, r6, #4079	; 0xfef
   823a6:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
   823aa:	f026 060f 	bic.w	r6, r6, #15
   823ae:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   823b2:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   823b6:	da04      	bge.n	823c2 <_malloc_trim_r+0x36>
   823b8:	4620      	mov	r0, r4
   823ba:	f000 fba4 	bl	82b06 <__malloc_unlock>
   823be:	2000      	movs	r0, #0
   823c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   823c2:	4620      	mov	r0, r4
   823c4:	2100      	movs	r1, #0
   823c6:	f000 fb9f 	bl	82b08 <_sbrk_r>
   823ca:	68ab      	ldr	r3, [r5, #8]
   823cc:	443b      	add	r3, r7
   823ce:	4298      	cmp	r0, r3
   823d0:	d1f2      	bne.n	823b8 <_malloc_trim_r+0x2c>
   823d2:	4620      	mov	r0, r4
   823d4:	4271      	negs	r1, r6
   823d6:	f000 fb97 	bl	82b08 <_sbrk_r>
   823da:	3001      	adds	r0, #1
   823dc:	d110      	bne.n	82400 <_malloc_trim_r+0x74>
   823de:	4620      	mov	r0, r4
   823e0:	2100      	movs	r1, #0
   823e2:	f000 fb91 	bl	82b08 <_sbrk_r>
   823e6:	68ab      	ldr	r3, [r5, #8]
   823e8:	1ac2      	subs	r2, r0, r3
   823ea:	2a0f      	cmp	r2, #15
   823ec:	dde4      	ble.n	823b8 <_malloc_trim_r+0x2c>
   823ee:	490c      	ldr	r1, [pc, #48]	; (82420 <_malloc_trim_r+0x94>)
   823f0:	f042 0201 	orr.w	r2, r2, #1
   823f4:	6809      	ldr	r1, [r1, #0]
   823f6:	605a      	str	r2, [r3, #4]
   823f8:	1a40      	subs	r0, r0, r1
   823fa:	490a      	ldr	r1, [pc, #40]	; (82424 <_malloc_trim_r+0x98>)
   823fc:	6008      	str	r0, [r1, #0]
   823fe:	e7db      	b.n	823b8 <_malloc_trim_r+0x2c>
   82400:	68ab      	ldr	r3, [r5, #8]
   82402:	1bbf      	subs	r7, r7, r6
   82404:	f047 0701 	orr.w	r7, r7, #1
   82408:	605f      	str	r7, [r3, #4]
   8240a:	4b06      	ldr	r3, [pc, #24]	; (82424 <_malloc_trim_r+0x98>)
   8240c:	4620      	mov	r0, r4
   8240e:	681a      	ldr	r2, [r3, #0]
   82410:	1b96      	subs	r6, r2, r6
   82412:	601e      	str	r6, [r3, #0]
   82414:	f000 fb77 	bl	82b06 <__malloc_unlock>
   82418:	2001      	movs	r0, #1
   8241a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8241c:	20070438 	.word	0x20070438
   82420:	20070840 	.word	0x20070840
   82424:	20070964 	.word	0x20070964

00082428 <_free_r>:
   82428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8242a:	4606      	mov	r6, r0
   8242c:	460d      	mov	r5, r1
   8242e:	2900      	cmp	r1, #0
   82430:	f000 80a9 	beq.w	82586 <_free_r+0x15e>
   82434:	f000 fb66 	bl	82b04 <__malloc_lock>
   82438:	f855 cc04 	ldr.w	ip, [r5, #-4]
   8243c:	4c52      	ldr	r4, [pc, #328]	; (82588 <_free_r+0x160>)
   8243e:	f1a5 0308 	sub.w	r3, r5, #8
   82442:	f02c 0201 	bic.w	r2, ip, #1
   82446:	1898      	adds	r0, r3, r2
   82448:	68a1      	ldr	r1, [r4, #8]
   8244a:	6847      	ldr	r7, [r0, #4]
   8244c:	4288      	cmp	r0, r1
   8244e:	f027 0703 	bic.w	r7, r7, #3
   82452:	f00c 0101 	and.w	r1, ip, #1
   82456:	d11b      	bne.n	82490 <_free_r+0x68>
   82458:	443a      	add	r2, r7
   8245a:	b939      	cbnz	r1, 8246c <_free_r+0x44>
   8245c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82460:	1a5b      	subs	r3, r3, r1
   82462:	6898      	ldr	r0, [r3, #8]
   82464:	440a      	add	r2, r1
   82466:	68d9      	ldr	r1, [r3, #12]
   82468:	60c1      	str	r1, [r0, #12]
   8246a:	6088      	str	r0, [r1, #8]
   8246c:	f042 0101 	orr.w	r1, r2, #1
   82470:	6059      	str	r1, [r3, #4]
   82472:	60a3      	str	r3, [r4, #8]
   82474:	4b45      	ldr	r3, [pc, #276]	; (8258c <_free_r+0x164>)
   82476:	681b      	ldr	r3, [r3, #0]
   82478:	429a      	cmp	r2, r3
   8247a:	d304      	bcc.n	82486 <_free_r+0x5e>
   8247c:	4b44      	ldr	r3, [pc, #272]	; (82590 <_free_r+0x168>)
   8247e:	4630      	mov	r0, r6
   82480:	6819      	ldr	r1, [r3, #0]
   82482:	f7ff ff83 	bl	8238c <_malloc_trim_r>
   82486:	4630      	mov	r0, r6
   82488:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8248c:	f000 bb3b 	b.w	82b06 <__malloc_unlock>
   82490:	6047      	str	r7, [r0, #4]
   82492:	b979      	cbnz	r1, 824b4 <_free_r+0x8c>
   82494:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82498:	f104 0c08 	add.w	ip, r4, #8
   8249c:	1b5b      	subs	r3, r3, r5
   8249e:	442a      	add	r2, r5
   824a0:	689d      	ldr	r5, [r3, #8]
   824a2:	4565      	cmp	r5, ip
   824a4:	d008      	beq.n	824b8 <_free_r+0x90>
   824a6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   824aa:	f8c5 c00c 	str.w	ip, [r5, #12]
   824ae:	f8cc 5008 	str.w	r5, [ip, #8]
   824b2:	e002      	b.n	824ba <_free_r+0x92>
   824b4:	2100      	movs	r1, #0
   824b6:	e000      	b.n	824ba <_free_r+0x92>
   824b8:	2101      	movs	r1, #1
   824ba:	19c5      	adds	r5, r0, r7
   824bc:	686d      	ldr	r5, [r5, #4]
   824be:	07ed      	lsls	r5, r5, #31
   824c0:	d40e      	bmi.n	824e0 <_free_r+0xb8>
   824c2:	443a      	add	r2, r7
   824c4:	6885      	ldr	r5, [r0, #8]
   824c6:	b941      	cbnz	r1, 824da <_free_r+0xb2>
   824c8:	4f32      	ldr	r7, [pc, #200]	; (82594 <_free_r+0x16c>)
   824ca:	42bd      	cmp	r5, r7
   824cc:	d105      	bne.n	824da <_free_r+0xb2>
   824ce:	6163      	str	r3, [r4, #20]
   824d0:	6123      	str	r3, [r4, #16]
   824d2:	2101      	movs	r1, #1
   824d4:	60dd      	str	r5, [r3, #12]
   824d6:	609d      	str	r5, [r3, #8]
   824d8:	e002      	b.n	824e0 <_free_r+0xb8>
   824da:	68c0      	ldr	r0, [r0, #12]
   824dc:	60e8      	str	r0, [r5, #12]
   824de:	6085      	str	r5, [r0, #8]
   824e0:	f042 0001 	orr.w	r0, r2, #1
   824e4:	6058      	str	r0, [r3, #4]
   824e6:	509a      	str	r2, [r3, r2]
   824e8:	2900      	cmp	r1, #0
   824ea:	d1cc      	bne.n	82486 <_free_r+0x5e>
   824ec:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   824f0:	d20e      	bcs.n	82510 <_free_r+0xe8>
   824f2:	08d2      	lsrs	r2, r2, #3
   824f4:	1091      	asrs	r1, r2, #2
   824f6:	2001      	movs	r0, #1
   824f8:	4088      	lsls	r0, r1
   824fa:	6861      	ldr	r1, [r4, #4]
   824fc:	4301      	orrs	r1, r0
   824fe:	6061      	str	r1, [r4, #4]
   82500:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
   82504:	68a2      	ldr	r2, [r4, #8]
   82506:	60dc      	str	r4, [r3, #12]
   82508:	609a      	str	r2, [r3, #8]
   8250a:	60a3      	str	r3, [r4, #8]
   8250c:	60d3      	str	r3, [r2, #12]
   8250e:	e7ba      	b.n	82486 <_free_r+0x5e>
   82510:	0a51      	lsrs	r1, r2, #9
   82512:	2904      	cmp	r1, #4
   82514:	d802      	bhi.n	8251c <_free_r+0xf4>
   82516:	0991      	lsrs	r1, r2, #6
   82518:	3138      	adds	r1, #56	; 0x38
   8251a:	e015      	b.n	82548 <_free_r+0x120>
   8251c:	2914      	cmp	r1, #20
   8251e:	d801      	bhi.n	82524 <_free_r+0xfc>
   82520:	315b      	adds	r1, #91	; 0x5b
   82522:	e011      	b.n	82548 <_free_r+0x120>
   82524:	2954      	cmp	r1, #84	; 0x54
   82526:	d802      	bhi.n	8252e <_free_r+0x106>
   82528:	0b11      	lsrs	r1, r2, #12
   8252a:	316e      	adds	r1, #110	; 0x6e
   8252c:	e00c      	b.n	82548 <_free_r+0x120>
   8252e:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
   82532:	d802      	bhi.n	8253a <_free_r+0x112>
   82534:	0bd1      	lsrs	r1, r2, #15
   82536:	3177      	adds	r1, #119	; 0x77
   82538:	e006      	b.n	82548 <_free_r+0x120>
   8253a:	f240 5054 	movw	r0, #1364	; 0x554
   8253e:	4281      	cmp	r1, r0
   82540:	bf9a      	itte	ls
   82542:	0c91      	lsrls	r1, r2, #18
   82544:	317c      	addls	r1, #124	; 0x7c
   82546:	217e      	movhi	r1, #126	; 0x7e
   82548:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
   8254c:	68a5      	ldr	r5, [r4, #8]
   8254e:	480e      	ldr	r0, [pc, #56]	; (82588 <_free_r+0x160>)
   82550:	42a5      	cmp	r5, r4
   82552:	d001      	beq.n	82558 <_free_r+0x130>
   82554:	4629      	mov	r1, r5
   82556:	e00b      	b.n	82570 <_free_r+0x148>
   82558:	2201      	movs	r2, #1
   8255a:	1089      	asrs	r1, r1, #2
   8255c:	fa02 f101 	lsl.w	r1, r2, r1
   82560:	6842      	ldr	r2, [r0, #4]
   82562:	430a      	orrs	r2, r1
   82564:	6042      	str	r2, [r0, #4]
   82566:	4629      	mov	r1, r5
   82568:	e008      	b.n	8257c <_free_r+0x154>
   8256a:	6889      	ldr	r1, [r1, #8]
   8256c:	42a1      	cmp	r1, r4
   8256e:	d004      	beq.n	8257a <_free_r+0x152>
   82570:	6848      	ldr	r0, [r1, #4]
   82572:	f020 0003 	bic.w	r0, r0, #3
   82576:	4282      	cmp	r2, r0
   82578:	d3f7      	bcc.n	8256a <_free_r+0x142>
   8257a:	68cd      	ldr	r5, [r1, #12]
   8257c:	60dd      	str	r5, [r3, #12]
   8257e:	6099      	str	r1, [r3, #8]
   82580:	60ab      	str	r3, [r5, #8]
   82582:	60cb      	str	r3, [r1, #12]
   82584:	e77f      	b.n	82486 <_free_r+0x5e>
   82586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82588:	20070438 	.word	0x20070438
   8258c:	20070844 	.word	0x20070844
   82590:	20070960 	.word	0x20070960
   82594:	20070440 	.word	0x20070440

00082598 <_fwalk>:
   82598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8259c:	4688      	mov	r8, r1
   8259e:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
   825a2:	2600      	movs	r6, #0
   825a4:	b18c      	cbz	r4, 825ca <_fwalk+0x32>
   825a6:	68a5      	ldr	r5, [r4, #8]
   825a8:	6867      	ldr	r7, [r4, #4]
   825aa:	3f01      	subs	r7, #1
   825ac:	d40b      	bmi.n	825c6 <_fwalk+0x2e>
   825ae:	89ab      	ldrh	r3, [r5, #12]
   825b0:	2b01      	cmp	r3, #1
   825b2:	d906      	bls.n	825c2 <_fwalk+0x2a>
   825b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   825b8:	3301      	adds	r3, #1
   825ba:	d002      	beq.n	825c2 <_fwalk+0x2a>
   825bc:	4628      	mov	r0, r5
   825be:	47c0      	blx	r8
   825c0:	4306      	orrs	r6, r0
   825c2:	3568      	adds	r5, #104	; 0x68
   825c4:	e7f1      	b.n	825aa <_fwalk+0x12>
   825c6:	6824      	ldr	r4, [r4, #0]
   825c8:	e7ec      	b.n	825a4 <_fwalk+0xc>
   825ca:	4630      	mov	r0, r6
   825cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000825d0 <_fwalk_reent>:
   825d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   825d4:	4680      	mov	r8, r0
   825d6:	4689      	mov	r9, r1
   825d8:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
   825dc:	2600      	movs	r6, #0
   825de:	b194      	cbz	r4, 82606 <_fwalk_reent+0x36>
   825e0:	68a5      	ldr	r5, [r4, #8]
   825e2:	6867      	ldr	r7, [r4, #4]
   825e4:	3f01      	subs	r7, #1
   825e6:	d40c      	bmi.n	82602 <_fwalk_reent+0x32>
   825e8:	89ab      	ldrh	r3, [r5, #12]
   825ea:	2b01      	cmp	r3, #1
   825ec:	d907      	bls.n	825fe <_fwalk_reent+0x2e>
   825ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   825f2:	3301      	adds	r3, #1
   825f4:	d003      	beq.n	825fe <_fwalk_reent+0x2e>
   825f6:	4640      	mov	r0, r8
   825f8:	4629      	mov	r1, r5
   825fa:	47c8      	blx	r9
   825fc:	4306      	orrs	r6, r0
   825fe:	3568      	adds	r5, #104	; 0x68
   82600:	e7f0      	b.n	825e4 <_fwalk_reent+0x14>
   82602:	6824      	ldr	r4, [r4, #0]
   82604:	e7eb      	b.n	825de <_fwalk_reent+0xe>
   82606:	4630      	mov	r0, r6
   82608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008260c <__smakebuf_r>:
   8260c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8260e:	898b      	ldrh	r3, [r1, #12]
   82610:	b091      	sub	sp, #68	; 0x44
   82612:	079d      	lsls	r5, r3, #30
   82614:	4606      	mov	r6, r0
   82616:	460c      	mov	r4, r1
   82618:	d43a      	bmi.n	82690 <__smakebuf_r+0x84>
   8261a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8261e:	2900      	cmp	r1, #0
   82620:	da0b      	bge.n	8263a <__smakebuf_r+0x2e>
   82622:	89a3      	ldrh	r3, [r4, #12]
   82624:	2700      	movs	r7, #0
   82626:	f013 0f80 	tst.w	r3, #128	; 0x80
   8262a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8262e:	bf0c      	ite	eq
   82630:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   82634:	2540      	movne	r5, #64	; 0x40
   82636:	81a3      	strh	r3, [r4, #12]
   82638:	e01f      	b.n	8267a <__smakebuf_r+0x6e>
   8263a:	aa01      	add	r2, sp, #4
   8263c:	f000 fb22 	bl	82c84 <_fstat_r>
   82640:	2800      	cmp	r0, #0
   82642:	dbee      	blt.n	82622 <__smakebuf_r+0x16>
   82644:	9b02      	ldr	r3, [sp, #8]
   82646:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   8264a:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   8264e:	424f      	negs	r7, r1
   82650:	414f      	adcs	r7, r1
   82652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   82656:	89a3      	ldrh	r3, [r4, #12]
   82658:	d10a      	bne.n	82670 <__smakebuf_r+0x64>
   8265a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   8265c:	491b      	ldr	r1, [pc, #108]	; (826cc <__smakebuf_r+0xc0>)
   8265e:	428a      	cmp	r2, r1
   82660:	d106      	bne.n	82670 <__smakebuf_r+0x64>
   82662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   82666:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8266a:	81a3      	strh	r3, [r4, #12]
   8266c:	64e5      	str	r5, [r4, #76]	; 0x4c
   8266e:	e004      	b.n	8267a <__smakebuf_r+0x6e>
   82670:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82674:	81a3      	strh	r3, [r4, #12]
   82676:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8267a:	4630      	mov	r0, r6
   8267c:	4629      	mov	r1, r5
   8267e:	f000 f839 	bl	826f4 <_malloc_r>
   82682:	b960      	cbnz	r0, 8269e <__smakebuf_r+0x92>
   82684:	89a3      	ldrh	r3, [r4, #12]
   82686:	059a      	lsls	r2, r3, #22
   82688:	d41d      	bmi.n	826c6 <__smakebuf_r+0xba>
   8268a:	f043 0302 	orr.w	r3, r3, #2
   8268e:	81a3      	strh	r3, [r4, #12]
   82690:	f104 0343 	add.w	r3, r4, #67	; 0x43
   82694:	6023      	str	r3, [r4, #0]
   82696:	6123      	str	r3, [r4, #16]
   82698:	2301      	movs	r3, #1
   8269a:	6163      	str	r3, [r4, #20]
   8269c:	e013      	b.n	826c6 <__smakebuf_r+0xba>
   8269e:	4b0c      	ldr	r3, [pc, #48]	; (826d0 <__smakebuf_r+0xc4>)
   826a0:	63f3      	str	r3, [r6, #60]	; 0x3c
   826a2:	89a3      	ldrh	r3, [r4, #12]
   826a4:	6020      	str	r0, [r4, #0]
   826a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   826aa:	81a3      	strh	r3, [r4, #12]
   826ac:	6120      	str	r0, [r4, #16]
   826ae:	6165      	str	r5, [r4, #20]
   826b0:	b14f      	cbz	r7, 826c6 <__smakebuf_r+0xba>
   826b2:	4630      	mov	r0, r6
   826b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   826b8:	f000 faf6 	bl	82ca8 <_isatty_r>
   826bc:	b118      	cbz	r0, 826c6 <__smakebuf_r+0xba>
   826be:	89a3      	ldrh	r3, [r4, #12]
   826c0:	f043 0301 	orr.w	r3, r3, #1
   826c4:	81a3      	strh	r3, [r4, #12]
   826c6:	b011      	add	sp, #68	; 0x44
   826c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   826ca:	bf00      	nop
   826cc:	00082b87 	.word	0x00082b87
   826d0:	000821b5 	.word	0x000821b5

000826d4 <malloc>:
   826d4:	4b02      	ldr	r3, [pc, #8]	; (826e0 <malloc+0xc>)
   826d6:	4601      	mov	r1, r0
   826d8:	6818      	ldr	r0, [r3, #0]
   826da:	f000 b80b 	b.w	826f4 <_malloc_r>
   826de:	bf00      	nop
   826e0:	20070008 	.word	0x20070008

000826e4 <free>:
   826e4:	4b02      	ldr	r3, [pc, #8]	; (826f0 <free+0xc>)
   826e6:	4601      	mov	r1, r0
   826e8:	6818      	ldr	r0, [r3, #0]
   826ea:	f7ff be9d 	b.w	82428 <_free_r>
   826ee:	bf00      	nop
   826f0:	20070008 	.word	0x20070008

000826f4 <_malloc_r>:
   826f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   826f8:	f101 040b 	add.w	r4, r1, #11
   826fc:	2c16      	cmp	r4, #22
   826fe:	4607      	mov	r7, r0
   82700:	d903      	bls.n	8270a <_malloc_r+0x16>
   82702:	f034 0407 	bics.w	r4, r4, #7
   82706:	d501      	bpl.n	8270c <_malloc_r+0x18>
   82708:	e002      	b.n	82710 <_malloc_r+0x1c>
   8270a:	2410      	movs	r4, #16
   8270c:	428c      	cmp	r4, r1
   8270e:	d202      	bcs.n	82716 <_malloc_r+0x22>
   82710:	230c      	movs	r3, #12
   82712:	603b      	str	r3, [r7, #0]
   82714:	e1de      	b.n	82ad4 <_malloc_r+0x3e0>
   82716:	4638      	mov	r0, r7
   82718:	f000 f9f4 	bl	82b04 <__malloc_lock>
   8271c:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   82720:	4da3      	ldr	r5, [pc, #652]	; (829b0 <_malloc_r+0x2bc>)
   82722:	d214      	bcs.n	8274e <_malloc_r+0x5a>
   82724:	08e2      	lsrs	r2, r4, #3
   82726:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   8272a:	68de      	ldr	r6, [r3, #12]
   8272c:	429e      	cmp	r6, r3
   8272e:	d106      	bne.n	8273e <_malloc_r+0x4a>
   82730:	f106 0308 	add.w	r3, r6, #8
   82734:	6976      	ldr	r6, [r6, #20]
   82736:	429e      	cmp	r6, r3
   82738:	bf08      	it	eq
   8273a:	3202      	addeq	r2, #2
   8273c:	d043      	beq.n	827c6 <_malloc_r+0xd2>
   8273e:	6873      	ldr	r3, [r6, #4]
   82740:	68f2      	ldr	r2, [r6, #12]
   82742:	68b1      	ldr	r1, [r6, #8]
   82744:	f023 0303 	bic.w	r3, r3, #3
   82748:	60ca      	str	r2, [r1, #12]
   8274a:	6091      	str	r1, [r2, #8]
   8274c:	e05d      	b.n	8280a <_malloc_r+0x116>
   8274e:	0a62      	lsrs	r2, r4, #9
   82750:	d01a      	beq.n	82788 <_malloc_r+0x94>
   82752:	2a04      	cmp	r2, #4
   82754:	d802      	bhi.n	8275c <_malloc_r+0x68>
   82756:	09a2      	lsrs	r2, r4, #6
   82758:	3238      	adds	r2, #56	; 0x38
   8275a:	e018      	b.n	8278e <_malloc_r+0x9a>
   8275c:	2a14      	cmp	r2, #20
   8275e:	d801      	bhi.n	82764 <_malloc_r+0x70>
   82760:	325b      	adds	r2, #91	; 0x5b
   82762:	e014      	b.n	8278e <_malloc_r+0x9a>
   82764:	2a54      	cmp	r2, #84	; 0x54
   82766:	d802      	bhi.n	8276e <_malloc_r+0x7a>
   82768:	0b22      	lsrs	r2, r4, #12
   8276a:	326e      	adds	r2, #110	; 0x6e
   8276c:	e00f      	b.n	8278e <_malloc_r+0x9a>
   8276e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82772:	d802      	bhi.n	8277a <_malloc_r+0x86>
   82774:	0be2      	lsrs	r2, r4, #15
   82776:	3277      	adds	r2, #119	; 0x77
   82778:	e009      	b.n	8278e <_malloc_r+0x9a>
   8277a:	f240 5354 	movw	r3, #1364	; 0x554
   8277e:	429a      	cmp	r2, r3
   82780:	d804      	bhi.n	8278c <_malloc_r+0x98>
   82782:	0ca2      	lsrs	r2, r4, #18
   82784:	327c      	adds	r2, #124	; 0x7c
   82786:	e002      	b.n	8278e <_malloc_r+0x9a>
   82788:	223f      	movs	r2, #63	; 0x3f
   8278a:	e000      	b.n	8278e <_malloc_r+0x9a>
   8278c:	227e      	movs	r2, #126	; 0x7e
   8278e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   82792:	68de      	ldr	r6, [r3, #12]
   82794:	429e      	cmp	r6, r3
   82796:	d015      	beq.n	827c4 <_malloc_r+0xd0>
   82798:	6871      	ldr	r1, [r6, #4]
   8279a:	f021 0103 	bic.w	r1, r1, #3
   8279e:	1b08      	subs	r0, r1, r4
   827a0:	280f      	cmp	r0, #15
   827a2:	dd01      	ble.n	827a8 <_malloc_r+0xb4>
   827a4:	3a01      	subs	r2, #1
   827a6:	e00d      	b.n	827c4 <_malloc_r+0xd0>
   827a8:	2800      	cmp	r0, #0
   827aa:	db09      	blt.n	827c0 <_malloc_r+0xcc>
   827ac:	68f3      	ldr	r3, [r6, #12]
   827ae:	68b2      	ldr	r2, [r6, #8]
   827b0:	60d3      	str	r3, [r2, #12]
   827b2:	609a      	str	r2, [r3, #8]
   827b4:	1873      	adds	r3, r6, r1
   827b6:	685a      	ldr	r2, [r3, #4]
   827b8:	f042 0201 	orr.w	r2, r2, #1
   827bc:	605a      	str	r2, [r3, #4]
   827be:	e194      	b.n	82aea <_malloc_r+0x3f6>
   827c0:	68f6      	ldr	r6, [r6, #12]
   827c2:	e7e7      	b.n	82794 <_malloc_r+0xa0>
   827c4:	3201      	adds	r2, #1
   827c6:	497a      	ldr	r1, [pc, #488]	; (829b0 <_malloc_r+0x2bc>)
   827c8:	692e      	ldr	r6, [r5, #16]
   827ca:	f101 0008 	add.w	r0, r1, #8
   827ce:	4286      	cmp	r6, r0
   827d0:	4686      	mov	lr, r0
   827d2:	d06d      	beq.n	828b0 <_malloc_r+0x1bc>
   827d4:	6873      	ldr	r3, [r6, #4]
   827d6:	f023 0303 	bic.w	r3, r3, #3
   827da:	ebc4 0c03 	rsb	ip, r4, r3
   827de:	f1bc 0f0f 	cmp.w	ip, #15
   827e2:	dd0d      	ble.n	82800 <_malloc_r+0x10c>
   827e4:	1933      	adds	r3, r6, r4
   827e6:	f04c 0201 	orr.w	r2, ip, #1
   827ea:	f044 0401 	orr.w	r4, r4, #1
   827ee:	6074      	str	r4, [r6, #4]
   827f0:	614b      	str	r3, [r1, #20]
   827f2:	610b      	str	r3, [r1, #16]
   827f4:	60d8      	str	r0, [r3, #12]
   827f6:	6098      	str	r0, [r3, #8]
   827f8:	605a      	str	r2, [r3, #4]
   827fa:	f843 c00c 	str.w	ip, [r3, ip]
   827fe:	e174      	b.n	82aea <_malloc_r+0x3f6>
   82800:	f1bc 0f00 	cmp.w	ip, #0
   82804:	6148      	str	r0, [r1, #20]
   82806:	6108      	str	r0, [r1, #16]
   82808:	db01      	blt.n	8280e <_malloc_r+0x11a>
   8280a:	4433      	add	r3, r6
   8280c:	e7d3      	b.n	827b6 <_malloc_r+0xc2>
   8280e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82812:	d211      	bcs.n	82838 <_malloc_r+0x144>
   82814:	08db      	lsrs	r3, r3, #3
   82816:	1098      	asrs	r0, r3, #2
   82818:	f04f 0c01 	mov.w	ip, #1
   8281c:	fa0c fc00 	lsl.w	ip, ip, r0
   82820:	6848      	ldr	r0, [r1, #4]
   82822:	ea4c 0000 	orr.w	r0, ip, r0
   82826:	6048      	str	r0, [r1, #4]
   82828:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   8282c:	688b      	ldr	r3, [r1, #8]
   8282e:	60f1      	str	r1, [r6, #12]
   82830:	60b3      	str	r3, [r6, #8]
   82832:	608e      	str	r6, [r1, #8]
   82834:	60de      	str	r6, [r3, #12]
   82836:	e03b      	b.n	828b0 <_malloc_r+0x1bc>
   82838:	0a58      	lsrs	r0, r3, #9
   8283a:	2804      	cmp	r0, #4
   8283c:	d802      	bhi.n	82844 <_malloc_r+0x150>
   8283e:	0998      	lsrs	r0, r3, #6
   82840:	3038      	adds	r0, #56	; 0x38
   82842:	e015      	b.n	82870 <_malloc_r+0x17c>
   82844:	2814      	cmp	r0, #20
   82846:	d801      	bhi.n	8284c <_malloc_r+0x158>
   82848:	305b      	adds	r0, #91	; 0x5b
   8284a:	e011      	b.n	82870 <_malloc_r+0x17c>
   8284c:	2854      	cmp	r0, #84	; 0x54
   8284e:	d802      	bhi.n	82856 <_malloc_r+0x162>
   82850:	0b18      	lsrs	r0, r3, #12
   82852:	306e      	adds	r0, #110	; 0x6e
   82854:	e00c      	b.n	82870 <_malloc_r+0x17c>
   82856:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   8285a:	d802      	bhi.n	82862 <_malloc_r+0x16e>
   8285c:	0bd8      	lsrs	r0, r3, #15
   8285e:	3077      	adds	r0, #119	; 0x77
   82860:	e006      	b.n	82870 <_malloc_r+0x17c>
   82862:	f240 5154 	movw	r1, #1364	; 0x554
   82866:	4288      	cmp	r0, r1
   82868:	bf9a      	itte	ls
   8286a:	0c98      	lsrls	r0, r3, #18
   8286c:	307c      	addls	r0, #124	; 0x7c
   8286e:	207e      	movhi	r0, #126	; 0x7e
   82870:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
   82874:	f8dc 1008 	ldr.w	r1, [ip, #8]
   82878:	f8df 8134 	ldr.w	r8, [pc, #308]	; 829b0 <_malloc_r+0x2bc>
   8287c:	4561      	cmp	r1, ip
   8287e:	d10d      	bne.n	8289c <_malloc_r+0x1a8>
   82880:	2301      	movs	r3, #1
   82882:	1080      	asrs	r0, r0, #2
   82884:	fa03 f000 	lsl.w	r0, r3, r0
   82888:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8288c:	4303      	orrs	r3, r0
   8288e:	f8c8 3004 	str.w	r3, [r8, #4]
   82892:	460b      	mov	r3, r1
   82894:	e008      	b.n	828a8 <_malloc_r+0x1b4>
   82896:	6889      	ldr	r1, [r1, #8]
   82898:	4561      	cmp	r1, ip
   8289a:	d004      	beq.n	828a6 <_malloc_r+0x1b2>
   8289c:	6848      	ldr	r0, [r1, #4]
   8289e:	f020 0003 	bic.w	r0, r0, #3
   828a2:	4283      	cmp	r3, r0
   828a4:	d3f7      	bcc.n	82896 <_malloc_r+0x1a2>
   828a6:	68cb      	ldr	r3, [r1, #12]
   828a8:	60f3      	str	r3, [r6, #12]
   828aa:	60b1      	str	r1, [r6, #8]
   828ac:	609e      	str	r6, [r3, #8]
   828ae:	60ce      	str	r6, [r1, #12]
   828b0:	2101      	movs	r1, #1
   828b2:	1093      	asrs	r3, r2, #2
   828b4:	fa01 f303 	lsl.w	r3, r1, r3
   828b8:	6869      	ldr	r1, [r5, #4]
   828ba:	428b      	cmp	r3, r1
   828bc:	d85d      	bhi.n	8297a <_malloc_r+0x286>
   828be:	420b      	tst	r3, r1
   828c0:	d106      	bne.n	828d0 <_malloc_r+0x1dc>
   828c2:	f022 0203 	bic.w	r2, r2, #3
   828c6:	005b      	lsls	r3, r3, #1
   828c8:	420b      	tst	r3, r1
   828ca:	f102 0204 	add.w	r2, r2, #4
   828ce:	d0fa      	beq.n	828c6 <_malloc_r+0x1d2>
   828d0:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
   828d4:	4680      	mov	r8, r0
   828d6:	4694      	mov	ip, r2
   828d8:	f8d8 600c 	ldr.w	r6, [r8, #12]
   828dc:	4546      	cmp	r6, r8
   828de:	d02d      	beq.n	8293c <_malloc_r+0x248>
   828e0:	6871      	ldr	r1, [r6, #4]
   828e2:	f021 0903 	bic.w	r9, r1, #3
   828e6:	ebc4 0109 	rsb	r1, r4, r9
   828ea:	290f      	cmp	r1, #15
   828ec:	dd13      	ble.n	82916 <_malloc_r+0x222>
   828ee:	1933      	adds	r3, r6, r4
   828f0:	f044 0401 	orr.w	r4, r4, #1
   828f4:	68f2      	ldr	r2, [r6, #12]
   828f6:	6074      	str	r4, [r6, #4]
   828f8:	f856 0f08 	ldr.w	r0, [r6, #8]!
   828fc:	60c2      	str	r2, [r0, #12]
   828fe:	6090      	str	r0, [r2, #8]
   82900:	f041 0201 	orr.w	r2, r1, #1
   82904:	616b      	str	r3, [r5, #20]
   82906:	612b      	str	r3, [r5, #16]
   82908:	f8c3 e00c 	str.w	lr, [r3, #12]
   8290c:	f8c3 e008 	str.w	lr, [r3, #8]
   82910:	605a      	str	r2, [r3, #4]
   82912:	5059      	str	r1, [r3, r1]
   82914:	e00c      	b.n	82930 <_malloc_r+0x23c>
   82916:	2900      	cmp	r1, #0
   82918:	db0e      	blt.n	82938 <_malloc_r+0x244>
   8291a:	eb06 0109 	add.w	r1, r6, r9
   8291e:	684b      	ldr	r3, [r1, #4]
   82920:	f043 0301 	orr.w	r3, r3, #1
   82924:	604b      	str	r3, [r1, #4]
   82926:	68f3      	ldr	r3, [r6, #12]
   82928:	f856 2f08 	ldr.w	r2, [r6, #8]!
   8292c:	60d3      	str	r3, [r2, #12]
   8292e:	609a      	str	r2, [r3, #8]
   82930:	4638      	mov	r0, r7
   82932:	f000 f8e8 	bl	82b06 <__malloc_unlock>
   82936:	e0dc      	b.n	82af2 <_malloc_r+0x3fe>
   82938:	68f6      	ldr	r6, [r6, #12]
   8293a:	e7cf      	b.n	828dc <_malloc_r+0x1e8>
   8293c:	f10c 0c01 	add.w	ip, ip, #1
   82940:	f01c 0f03 	tst.w	ip, #3
   82944:	f108 0808 	add.w	r8, r8, #8
   82948:	d1c6      	bne.n	828d8 <_malloc_r+0x1e4>
   8294a:	0791      	lsls	r1, r2, #30
   8294c:	d104      	bne.n	82958 <_malloc_r+0x264>
   8294e:	686a      	ldr	r2, [r5, #4]
   82950:	ea22 0203 	bic.w	r2, r2, r3
   82954:	606a      	str	r2, [r5, #4]
   82956:	e005      	b.n	82964 <_malloc_r+0x270>
   82958:	f1a0 0108 	sub.w	r1, r0, #8
   8295c:	6800      	ldr	r0, [r0, #0]
   8295e:	3a01      	subs	r2, #1
   82960:	4288      	cmp	r0, r1
   82962:	d0f2      	beq.n	8294a <_malloc_r+0x256>
   82964:	6869      	ldr	r1, [r5, #4]
   82966:	005b      	lsls	r3, r3, #1
   82968:	428b      	cmp	r3, r1
   8296a:	d806      	bhi.n	8297a <_malloc_r+0x286>
   8296c:	b12b      	cbz	r3, 8297a <_malloc_r+0x286>
   8296e:	4662      	mov	r2, ip
   82970:	420b      	tst	r3, r1
   82972:	d1ad      	bne.n	828d0 <_malloc_r+0x1dc>
   82974:	3204      	adds	r2, #4
   82976:	005b      	lsls	r3, r3, #1
   82978:	e7fa      	b.n	82970 <_malloc_r+0x27c>
   8297a:	f8d5 9008 	ldr.w	r9, [r5, #8]
   8297e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   82982:	f023 0b03 	bic.w	fp, r3, #3
   82986:	45a3      	cmp	fp, r4
   82988:	d304      	bcc.n	82994 <_malloc_r+0x2a0>
   8298a:	ebc4 030b 	rsb	r3, r4, fp
   8298e:	2b0f      	cmp	r3, #15
   82990:	f300 80a2 	bgt.w	82ad8 <_malloc_r+0x3e4>
   82994:	4907      	ldr	r1, [pc, #28]	; (829b4 <_malloc_r+0x2c0>)
   82996:	eb09 030b 	add.w	r3, r9, fp
   8299a:	680a      	ldr	r2, [r1, #0]
   8299c:	4688      	mov	r8, r1
   8299e:	eb04 0a02 	add.w	sl, r4, r2
   829a2:	f8d5 2408 	ldr.w	r2, [r5, #1032]	; 0x408
   829a6:	3201      	adds	r2, #1
   829a8:	d106      	bne.n	829b8 <_malloc_r+0x2c4>
   829aa:	f10a 0a10 	add.w	sl, sl, #16
   829ae:	e00b      	b.n	829c8 <_malloc_r+0x2d4>
   829b0:	20070438 	.word	0x20070438
   829b4:	20070960 	.word	0x20070960
   829b8:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   829bc:	f10a 0a0f 	add.w	sl, sl, #15
   829c0:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   829c4:	f02a 0a0f 	bic.w	sl, sl, #15
   829c8:	4638      	mov	r0, r7
   829ca:	4651      	mov	r1, sl
   829cc:	9301      	str	r3, [sp, #4]
   829ce:	f000 f89b 	bl	82b08 <_sbrk_r>
   829d2:	1c42      	adds	r2, r0, #1
   829d4:	4606      	mov	r6, r0
   829d6:	9b01      	ldr	r3, [sp, #4]
   829d8:	d06f      	beq.n	82aba <_malloc_r+0x3c6>
   829da:	4298      	cmp	r0, r3
   829dc:	d201      	bcs.n	829e2 <_malloc_r+0x2ee>
   829de:	45a9      	cmp	r9, r5
   829e0:	d16b      	bne.n	82aba <_malloc_r+0x3c6>
   829e2:	f8d8 2004 	ldr.w	r2, [r8, #4]
   829e6:	429e      	cmp	r6, r3
   829e8:	4452      	add	r2, sl
   829ea:	f8c8 2004 	str.w	r2, [r8, #4]
   829ee:	d108      	bne.n	82a02 <_malloc_r+0x30e>
   829f0:	f3c6 010b 	ubfx	r1, r6, #0, #12
   829f4:	b929      	cbnz	r1, 82a02 <_malloc_r+0x30e>
   829f6:	68ab      	ldr	r3, [r5, #8]
   829f8:	44da      	add	sl, fp
   829fa:	f04a 0201 	orr.w	r2, sl, #1
   829fe:	605a      	str	r2, [r3, #4]
   82a00:	e04d      	b.n	82a9e <_malloc_r+0x3aa>
   82a02:	f8d5 1408 	ldr.w	r1, [r5, #1032]	; 0x408
   82a06:	3101      	adds	r1, #1
   82a08:	d103      	bne.n	82a12 <_malloc_r+0x31e>
   82a0a:	4b3c      	ldr	r3, [pc, #240]	; (82afc <_malloc_r+0x408>)
   82a0c:	f8c3 6408 	str.w	r6, [r3, #1032]	; 0x408
   82a10:	e003      	b.n	82a1a <_malloc_r+0x326>
   82a12:	1af3      	subs	r3, r6, r3
   82a14:	441a      	add	r2, r3
   82a16:	f8c8 2004 	str.w	r2, [r8, #4]
   82a1a:	f016 0307 	ands.w	r3, r6, #7
   82a1e:	bf1c      	itt	ne
   82a20:	f1c3 0308 	rsbne	r3, r3, #8
   82a24:	18f6      	addne	r6, r6, r3
   82a26:	44b2      	add	sl, r6
   82a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   82a2c:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   82a30:	ebca 0a03 	rsb	sl, sl, r3
   82a34:	4651      	mov	r1, sl
   82a36:	4638      	mov	r0, r7
   82a38:	f000 f866 	bl	82b08 <_sbrk_r>
   82a3c:	1c43      	adds	r3, r0, #1
   82a3e:	bf04      	itt	eq
   82a40:	4630      	moveq	r0, r6
   82a42:	f04f 0a00 	moveq.w	sl, #0
   82a46:	f8d8 3004 	ldr.w	r3, [r8, #4]
   82a4a:	1b80      	subs	r0, r0, r6
   82a4c:	4450      	add	r0, sl
   82a4e:	4453      	add	r3, sl
   82a50:	f040 0001 	orr.w	r0, r0, #1
   82a54:	45a9      	cmp	r9, r5
   82a56:	60ae      	str	r6, [r5, #8]
   82a58:	f8c8 3004 	str.w	r3, [r8, #4]
   82a5c:	6070      	str	r0, [r6, #4]
   82a5e:	d01e      	beq.n	82a9e <_malloc_r+0x3aa>
   82a60:	f1bb 0f0f 	cmp.w	fp, #15
   82a64:	d802      	bhi.n	82a6c <_malloc_r+0x378>
   82a66:	2301      	movs	r3, #1
   82a68:	6073      	str	r3, [r6, #4]
   82a6a:	e026      	b.n	82aba <_malloc_r+0x3c6>
   82a6c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   82a70:	f1ab 0b0c 	sub.w	fp, fp, #12
   82a74:	f02b 0b07 	bic.w	fp, fp, #7
   82a78:	f003 0301 	and.w	r3, r3, #1
   82a7c:	ea4b 0303 	orr.w	r3, fp, r3
   82a80:	f8c9 3004 	str.w	r3, [r9, #4]
   82a84:	2205      	movs	r2, #5
   82a86:	eb09 030b 	add.w	r3, r9, fp
   82a8a:	f1bb 0f0f 	cmp.w	fp, #15
   82a8e:	605a      	str	r2, [r3, #4]
   82a90:	609a      	str	r2, [r3, #8]
   82a92:	d904      	bls.n	82a9e <_malloc_r+0x3aa>
   82a94:	4638      	mov	r0, r7
   82a96:	f109 0108 	add.w	r1, r9, #8
   82a9a:	f7ff fcc5 	bl	82428 <_free_r>
   82a9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   82aa2:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
   82aa6:	4293      	cmp	r3, r2
   82aa8:	bf84      	itt	hi
   82aaa:	4a15      	ldrhi	r2, [pc, #84]	; (82b00 <_malloc_r+0x40c>)
   82aac:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   82aae:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
   82ab2:	4293      	cmp	r3, r2
   82ab4:	bf84      	itt	hi
   82ab6:	4a12      	ldrhi	r2, [pc, #72]	; (82b00 <_malloc_r+0x40c>)
   82ab8:	6313      	strhi	r3, [r2, #48]	; 0x30
   82aba:	68ab      	ldr	r3, [r5, #8]
   82abc:	685a      	ldr	r2, [r3, #4]
   82abe:	f022 0203 	bic.w	r2, r2, #3
   82ac2:	42a2      	cmp	r2, r4
   82ac4:	ebc4 0302 	rsb	r3, r4, r2
   82ac8:	d301      	bcc.n	82ace <_malloc_r+0x3da>
   82aca:	2b0f      	cmp	r3, #15
   82acc:	dc04      	bgt.n	82ad8 <_malloc_r+0x3e4>
   82ace:	4638      	mov	r0, r7
   82ad0:	f000 f819 	bl	82b06 <__malloc_unlock>
   82ad4:	2600      	movs	r6, #0
   82ad6:	e00c      	b.n	82af2 <_malloc_r+0x3fe>
   82ad8:	68ae      	ldr	r6, [r5, #8]
   82ada:	f044 0201 	orr.w	r2, r4, #1
   82ade:	f043 0301 	orr.w	r3, r3, #1
   82ae2:	4434      	add	r4, r6
   82ae4:	6072      	str	r2, [r6, #4]
   82ae6:	60ac      	str	r4, [r5, #8]
   82ae8:	6063      	str	r3, [r4, #4]
   82aea:	4638      	mov	r0, r7
   82aec:	f000 f80b 	bl	82b06 <__malloc_unlock>
   82af0:	3608      	adds	r6, #8
   82af2:	4630      	mov	r0, r6
   82af4:	b003      	add	sp, #12
   82af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82afa:	bf00      	nop
   82afc:	20070438 	.word	0x20070438
   82b00:	20070960 	.word	0x20070960

00082b04 <__malloc_lock>:
   82b04:	4770      	bx	lr

00082b06 <__malloc_unlock>:
   82b06:	4770      	bx	lr

00082b08 <_sbrk_r>:
   82b08:	b538      	push	{r3, r4, r5, lr}
   82b0a:	4c06      	ldr	r4, [pc, #24]	; (82b24 <_sbrk_r+0x1c>)
   82b0c:	2300      	movs	r3, #0
   82b0e:	4605      	mov	r5, r0
   82b10:	4608      	mov	r0, r1
   82b12:	6023      	str	r3, [r4, #0]
   82b14:	f7ff f89e 	bl	81c54 <_sbrk>
   82b18:	1c43      	adds	r3, r0, #1
   82b1a:	d102      	bne.n	82b22 <_sbrk_r+0x1a>
   82b1c:	6823      	ldr	r3, [r4, #0]
   82b1e:	b103      	cbz	r3, 82b22 <_sbrk_r+0x1a>
   82b20:	602b      	str	r3, [r5, #0]
   82b22:	bd38      	pop	{r3, r4, r5, pc}
   82b24:	20070a1c 	.word	0x20070a1c

00082b28 <__sread>:
   82b28:	b510      	push	{r4, lr}
   82b2a:	460c      	mov	r4, r1
   82b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82b30:	f000 f8dc 	bl	82cec <_read_r>
   82b34:	2800      	cmp	r0, #0
   82b36:	db03      	blt.n	82b40 <__sread+0x18>
   82b38:	6d23      	ldr	r3, [r4, #80]	; 0x50
   82b3a:	4403      	add	r3, r0
   82b3c:	6523      	str	r3, [r4, #80]	; 0x50
   82b3e:	bd10      	pop	{r4, pc}
   82b40:	89a3      	ldrh	r3, [r4, #12]
   82b42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   82b46:	81a3      	strh	r3, [r4, #12]
   82b48:	bd10      	pop	{r4, pc}

00082b4a <__seofread>:
   82b4a:	2000      	movs	r0, #0
   82b4c:	4770      	bx	lr

00082b4e <__swrite>:
   82b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82b52:	461d      	mov	r5, r3
   82b54:	898b      	ldrh	r3, [r1, #12]
   82b56:	4607      	mov	r7, r0
   82b58:	05db      	lsls	r3, r3, #23
   82b5a:	460c      	mov	r4, r1
   82b5c:	4616      	mov	r6, r2
   82b5e:	d505      	bpl.n	82b6c <__swrite+0x1e>
   82b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82b64:	2200      	movs	r2, #0
   82b66:	2302      	movs	r3, #2
   82b68:	f000 f8ae 	bl	82cc8 <_lseek_r>
   82b6c:	89a3      	ldrh	r3, [r4, #12]
   82b6e:	4638      	mov	r0, r7
   82b70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   82b74:	81a3      	strh	r3, [r4, #12]
   82b76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82b7a:	4632      	mov	r2, r6
   82b7c:	462b      	mov	r3, r5
   82b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82b82:	f000 b817 	b.w	82bb4 <_write_r>

00082b86 <__sseek>:
   82b86:	b510      	push	{r4, lr}
   82b88:	460c      	mov	r4, r1
   82b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82b8e:	f000 f89b 	bl	82cc8 <_lseek_r>
   82b92:	1c43      	adds	r3, r0, #1
   82b94:	89a3      	ldrh	r3, [r4, #12]
   82b96:	d103      	bne.n	82ba0 <__sseek+0x1a>
   82b98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   82b9c:	81a3      	strh	r3, [r4, #12]
   82b9e:	bd10      	pop	{r4, pc}
   82ba0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   82ba4:	81a3      	strh	r3, [r4, #12]
   82ba6:	6520      	str	r0, [r4, #80]	; 0x50
   82ba8:	bd10      	pop	{r4, pc}

00082baa <__sclose>:
   82baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82bae:	f000 b813 	b.w	82bd8 <_close_r>
	...

00082bb4 <_write_r>:
   82bb4:	b538      	push	{r3, r4, r5, lr}
   82bb6:	4c07      	ldr	r4, [pc, #28]	; (82bd4 <_write_r+0x20>)
   82bb8:	4605      	mov	r5, r0
   82bba:	2000      	movs	r0, #0
   82bbc:	6020      	str	r0, [r4, #0]
   82bbe:	4608      	mov	r0, r1
   82bc0:	4611      	mov	r1, r2
   82bc2:	461a      	mov	r2, r3
   82bc4:	f7fd fcc4 	bl	80550 <_write>
   82bc8:	1c43      	adds	r3, r0, #1
   82bca:	d102      	bne.n	82bd2 <_write_r+0x1e>
   82bcc:	6823      	ldr	r3, [r4, #0]
   82bce:	b103      	cbz	r3, 82bd2 <_write_r+0x1e>
   82bd0:	602b      	str	r3, [r5, #0]
   82bd2:	bd38      	pop	{r3, r4, r5, pc}
   82bd4:	20070a1c 	.word	0x20070a1c

00082bd8 <_close_r>:
   82bd8:	b538      	push	{r3, r4, r5, lr}
   82bda:	4c06      	ldr	r4, [pc, #24]	; (82bf4 <_close_r+0x1c>)
   82bdc:	2300      	movs	r3, #0
   82bde:	4605      	mov	r5, r0
   82be0:	4608      	mov	r0, r1
   82be2:	6023      	str	r3, [r4, #0]
   82be4:	f7ff f850 	bl	81c88 <_close>
   82be8:	1c43      	adds	r3, r0, #1
   82bea:	d102      	bne.n	82bf2 <_close_r+0x1a>
   82bec:	6823      	ldr	r3, [r4, #0]
   82bee:	b103      	cbz	r3, 82bf2 <_close_r+0x1a>
   82bf0:	602b      	str	r3, [r5, #0]
   82bf2:	bd38      	pop	{r3, r4, r5, pc}
   82bf4:	20070a1c 	.word	0x20070a1c

00082bf8 <_fclose_r>:
   82bf8:	b570      	push	{r4, r5, r6, lr}
   82bfa:	4605      	mov	r5, r0
   82bfc:	460c      	mov	r4, r1
   82bfe:	b909      	cbnz	r1, 82c04 <_fclose_r+0xc>
   82c00:	2000      	movs	r0, #0
   82c02:	bd70      	pop	{r4, r5, r6, pc}
   82c04:	b118      	cbz	r0, 82c0e <_fclose_r+0x16>
   82c06:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82c08:	b90b      	cbnz	r3, 82c0e <_fclose_r+0x16>
   82c0a:	f7ff faf5 	bl	821f8 <__sinit>
   82c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82c12:	2b00      	cmp	r3, #0
   82c14:	d0f4      	beq.n	82c00 <_fclose_r+0x8>
   82c16:	4628      	mov	r0, r5
   82c18:	4621      	mov	r1, r4
   82c1a:	f7ff faa4 	bl	82166 <_fflush_r>
   82c1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   82c20:	4606      	mov	r6, r0
   82c22:	b133      	cbz	r3, 82c32 <_fclose_r+0x3a>
   82c24:	4628      	mov	r0, r5
   82c26:	69e1      	ldr	r1, [r4, #28]
   82c28:	4798      	blx	r3
   82c2a:	2800      	cmp	r0, #0
   82c2c:	bfb8      	it	lt
   82c2e:	f04f 36ff 	movlt.w	r6, #4294967295
   82c32:	89a3      	ldrh	r3, [r4, #12]
   82c34:	061b      	lsls	r3, r3, #24
   82c36:	d503      	bpl.n	82c40 <_fclose_r+0x48>
   82c38:	4628      	mov	r0, r5
   82c3a:	6921      	ldr	r1, [r4, #16]
   82c3c:	f7ff fbf4 	bl	82428 <_free_r>
   82c40:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82c42:	b141      	cbz	r1, 82c56 <_fclose_r+0x5e>
   82c44:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82c48:	4299      	cmp	r1, r3
   82c4a:	d002      	beq.n	82c52 <_fclose_r+0x5a>
   82c4c:	4628      	mov	r0, r5
   82c4e:	f7ff fbeb 	bl	82428 <_free_r>
   82c52:	2300      	movs	r3, #0
   82c54:	6323      	str	r3, [r4, #48]	; 0x30
   82c56:	6c61      	ldr	r1, [r4, #68]	; 0x44
   82c58:	b121      	cbz	r1, 82c64 <_fclose_r+0x6c>
   82c5a:	4628      	mov	r0, r5
   82c5c:	f7ff fbe4 	bl	82428 <_free_r>
   82c60:	2300      	movs	r3, #0
   82c62:	6463      	str	r3, [r4, #68]	; 0x44
   82c64:	f7ff fb7a 	bl	8235c <__sfp_lock_acquire>
   82c68:	2300      	movs	r3, #0
   82c6a:	81a3      	strh	r3, [r4, #12]
   82c6c:	f7ff fb77 	bl	8235e <__sfp_lock_release>
   82c70:	4630      	mov	r0, r6
   82c72:	bd70      	pop	{r4, r5, r6, pc}

00082c74 <fclose>:
   82c74:	4b02      	ldr	r3, [pc, #8]	; (82c80 <fclose+0xc>)
   82c76:	4601      	mov	r1, r0
   82c78:	6818      	ldr	r0, [r3, #0]
   82c7a:	f7ff bfbd 	b.w	82bf8 <_fclose_r>
   82c7e:	bf00      	nop
   82c80:	20070008 	.word	0x20070008

00082c84 <_fstat_r>:
   82c84:	b538      	push	{r3, r4, r5, lr}
   82c86:	4c07      	ldr	r4, [pc, #28]	; (82ca4 <_fstat_r+0x20>)
   82c88:	2300      	movs	r3, #0
   82c8a:	4605      	mov	r5, r0
   82c8c:	4608      	mov	r0, r1
   82c8e:	4611      	mov	r1, r2
   82c90:	6023      	str	r3, [r4, #0]
   82c92:	f7fe fffd 	bl	81c90 <_fstat>
   82c96:	1c43      	adds	r3, r0, #1
   82c98:	d102      	bne.n	82ca0 <_fstat_r+0x1c>
   82c9a:	6823      	ldr	r3, [r4, #0]
   82c9c:	b103      	cbz	r3, 82ca0 <_fstat_r+0x1c>
   82c9e:	602b      	str	r3, [r5, #0]
   82ca0:	bd38      	pop	{r3, r4, r5, pc}
   82ca2:	bf00      	nop
   82ca4:	20070a1c 	.word	0x20070a1c

00082ca8 <_isatty_r>:
   82ca8:	b538      	push	{r3, r4, r5, lr}
   82caa:	4c06      	ldr	r4, [pc, #24]	; (82cc4 <_isatty_r+0x1c>)
   82cac:	2300      	movs	r3, #0
   82cae:	4605      	mov	r5, r0
   82cb0:	4608      	mov	r0, r1
   82cb2:	6023      	str	r3, [r4, #0]
   82cb4:	f7fe fff2 	bl	81c9c <_isatty>
   82cb8:	1c43      	adds	r3, r0, #1
   82cba:	d102      	bne.n	82cc2 <_isatty_r+0x1a>
   82cbc:	6823      	ldr	r3, [r4, #0]
   82cbe:	b103      	cbz	r3, 82cc2 <_isatty_r+0x1a>
   82cc0:	602b      	str	r3, [r5, #0]
   82cc2:	bd38      	pop	{r3, r4, r5, pc}
   82cc4:	20070a1c 	.word	0x20070a1c

00082cc8 <_lseek_r>:
   82cc8:	b538      	push	{r3, r4, r5, lr}
   82cca:	4c07      	ldr	r4, [pc, #28]	; (82ce8 <_lseek_r+0x20>)
   82ccc:	4605      	mov	r5, r0
   82cce:	2000      	movs	r0, #0
   82cd0:	6020      	str	r0, [r4, #0]
   82cd2:	4608      	mov	r0, r1
   82cd4:	4611      	mov	r1, r2
   82cd6:	461a      	mov	r2, r3
   82cd8:	f7fe ffe2 	bl	81ca0 <_lseek>
   82cdc:	1c43      	adds	r3, r0, #1
   82cde:	d102      	bne.n	82ce6 <_lseek_r+0x1e>
   82ce0:	6823      	ldr	r3, [r4, #0]
   82ce2:	b103      	cbz	r3, 82ce6 <_lseek_r+0x1e>
   82ce4:	602b      	str	r3, [r5, #0]
   82ce6:	bd38      	pop	{r3, r4, r5, pc}
   82ce8:	20070a1c 	.word	0x20070a1c

00082cec <_read_r>:
   82cec:	b538      	push	{r3, r4, r5, lr}
   82cee:	4c07      	ldr	r4, [pc, #28]	; (82d0c <_read_r+0x20>)
   82cf0:	4605      	mov	r5, r0
   82cf2:	2000      	movs	r0, #0
   82cf4:	6020      	str	r0, [r4, #0]
   82cf6:	4608      	mov	r0, r1
   82cf8:	4611      	mov	r1, r2
   82cfa:	461a      	mov	r2, r3
   82cfc:	f7fd fc08 	bl	80510 <_read>
   82d00:	1c43      	adds	r3, r0, #1
   82d02:	d102      	bne.n	82d0a <_read_r+0x1e>
   82d04:	6823      	ldr	r3, [r4, #0]
   82d06:	b103      	cbz	r3, 82d0a <_read_r+0x1e>
   82d08:	602b      	str	r3, [r5, #0]
   82d0a:	bd38      	pop	{r3, r4, r5, pc}
   82d0c:	20070a1c 	.word	0x20070a1c
   82d10:	20434441 	.word	0x20434441
   82d14:	31207369 	.word	0x31207369
   82d18:	74696230 	.word	0x74696230
   82d1c:	00000000 	.word	0x00000000
   82d20:	6e616843 	.word	0x6e616843
   82d24:	206c656e 	.word	0x206c656e
   82d28:	69642033 	.word	0x69642033
   82d2c:	6c626173 	.word	0x6c626173
   82d30:	00006465 	.word	0x00006465
   82d34:	206e6950 	.word	0x206e6950
   82d38:	73692033 	.word	0x73692033
   82d3c:	73696420 	.word	0x73696420
   82d40:	656c6261 	.word	0x656c6261
   82d44:	00000064 	.word	0x00000064
   82d48:	74736574 	.word	0x74736574
   82d4c:	7365742f 	.word	0x7365742f
   82d50:	64615f74 	.word	0x64615f74
   82d54:	00632e63 	.word	0x00632e63
   82d58:	74736574 	.word	0x74736574
   82d5c:	6364615f 	.word	0x6364615f
   82d60:	6232315f 	.word	0x6232315f
   82d64:	00007469 	.word	0x00007469
   82d68:	74736574 	.word	0x74736574
   82d6c:	6168635f 	.word	0x6168635f
   82d70:	6c656e6e 	.word	0x6c656e6e
   82d74:	655f335f 	.word	0x655f335f
   82d78:	6c62616e 	.word	0x6c62616e
   82d7c:	00006465 	.word	0x00006465
   82d80:	74736574 	.word	0x74736574
   82d84:	6364615f 	.word	0x6364615f
   82d88:	6e69705f 	.word	0x6e69705f
   82d8c:	616e655f 	.word	0x616e655f
   82d90:	64656c62 	.word	0x64656c62
   82d94:	00000000 	.word	0x00000000

00082d98 <UnityStrOk>:
   82d98:	00004b4f                                OK..

00082d9c <UnityStrSpacer>:
   82d9c:	0000202e                                . ..

00082da0 <UnityStrWas>:
   82da0:	73615720 00000020                        Was ...

00082da8 <UnityStrFail>:
   82da8:	4c494146 00000000                       FAIL....

00082db0 <UnityStrExpected>:
   82db0:	70784520 65746365 00002064               Expected ..

00082dbc <UnityStrBreaker>:
   82dbc:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   82dcc:	2d2d2d2d 002d2d2d                       -------.

00082dd4 <UnityStrResultsFailures>:
   82dd4:	69614620 6572756c 00002073               Failures ..

00082de0 <UnityStrResultsIgnored>:
   82de0:	6e674920 6465726f 00000020               Ignored ...

00082dec <UnityStrResultsTests>:
   82dec:	73655420 00207374                        Tests .

00082df4 <UnityStrPass>:
   82df4:	53534150 00000000                       PASS....

00082dfc <_global_impure_ptr>:
   82dfc:	20070010 00000043                       ... C...

00082e04 <_init>:
   82e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82e06:	bf00      	nop
   82e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82e0a:	bc08      	pop	{r3}
   82e0c:	469e      	mov	lr, r3
   82e0e:	4770      	bx	lr

00082e10 <__init_array_start>:
   82e10:	0008203d 	.word	0x0008203d

00082e14 <__frame_dummy_init_array_entry>:
   82e14:	0008016d                                m...

00082e18 <_fini>:
   82e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82e1a:	bf00      	nop
   82e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82e1e:	bc08      	pop	{r3}
   82e20:	469e      	mov	lr, r3
   82e22:	4770      	bx	lr

00082e24 <__fini_array_start>:
   82e24:	00080145 	.word	0x00080145
