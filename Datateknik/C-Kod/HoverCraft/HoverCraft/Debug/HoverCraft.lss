
HoverCraft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000472c  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008472c  0008472c  0000c72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008c8  20070000  00084734  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000001d8  200708c8  00084ffc  000108c8  2**2
                  ALLOC
  4 .stack        00002000  20070aa0  000851d4  000108c8  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000108c8  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  000108f1  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002936f  00000000  00000000  00010962  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000074eb  00000000  00000000  00039cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000cb59  00000000  00000000  000411bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001308  00000000  00000000  0004dd18  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d40  00000000  00000000  0004f020  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000190c7  00000000  00000000  0004fd60  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000157e8  00000000  00000000  00068e27  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00071e27  00000000  00000000  0007e60f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002974  00000000  00000000  000f0438  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072aa0 	.word	0x20072aa0
   80004:	00081ac9 	.word	0x00081ac9
   80008:	00081ac5 	.word	0x00081ac5
   8000c:	00081ac5 	.word	0x00081ac5
   80010:	00081ac5 	.word	0x00081ac5
   80014:	00081ac5 	.word	0x00081ac5
   80018:	00081ac5 	.word	0x00081ac5
	...
   8002c:	00081391 	.word	0x00081391
   80030:	00081ac5 	.word	0x00081ac5
   80034:	00000000 	.word	0x00000000
   80038:	000813c9 	.word	0x000813c9
   8003c:	00081405 	.word	0x00081405
   80040:	00081ac5 	.word	0x00081ac5
   80044:	00081ac5 	.word	0x00081ac5
   80048:	00081ac5 	.word	0x00081ac5
   8004c:	00081ac5 	.word	0x00081ac5
   80050:	00081ac5 	.word	0x00081ac5
   80054:	00081ac5 	.word	0x00081ac5
   80058:	00081ac5 	.word	0x00081ac5
   8005c:	00081ac5 	.word	0x00081ac5
   80060:	00081ac5 	.word	0x00081ac5
   80064:	00081ac5 	.word	0x00081ac5
   80068:	00000000 	.word	0x00000000
   8006c:	00081935 	.word	0x00081935
   80070:	00081949 	.word	0x00081949
   80074:	0008195d 	.word	0x0008195d
   80078:	00081971 	.word	0x00081971
	...
   80084:	00081ac5 	.word	0x00081ac5
   80088:	00081ac5 	.word	0x00081ac5
   8008c:	00081ac5 	.word	0x00081ac5
   80090:	00081ac5 	.word	0x00081ac5
   80094:	00081ac5 	.word	0x00081ac5
   80098:	00081ac5 	.word	0x00081ac5
   8009c:	00081ac5 	.word	0x00081ac5
   800a0:	00081ac5 	.word	0x00081ac5
   800a4:	00000000 	.word	0x00000000
   800a8:	00081ac5 	.word	0x00081ac5
   800ac:	00081ac5 	.word	0x00081ac5
   800b0:	00081ac5 	.word	0x00081ac5
   800b4:	00081ac5 	.word	0x00081ac5
   800b8:	00081ac5 	.word	0x00081ac5
   800bc:	00081ac5 	.word	0x00081ac5
   800c0:	00081ac5 	.word	0x00081ac5
   800c4:	00081ac5 	.word	0x00081ac5
   800c8:	00081ac5 	.word	0x00081ac5
   800cc:	00081ac5 	.word	0x00081ac5
   800d0:	00081ac5 	.word	0x00081ac5
   800d4:	00081ac5 	.word	0x00081ac5
   800d8:	00081ac5 	.word	0x00081ac5
   800dc:	00081ac5 	.word	0x00081ac5
   800e0:	00081ac5 	.word	0x00081ac5
   800e4:	00081ac5 	.word	0x00081ac5
   800e8:	00081ac5 	.word	0x00081ac5
   800ec:	00081ac5 	.word	0x00081ac5
   800f0:	00081ac5 	.word	0x00081ac5

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a1b      	subs	r3, r3, r0
   800fc:	2b06      	cmp	r3, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4b04      	ldr	r3, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2b00      	cmp	r3, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4798      	blx	r3
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	00084734 	.word	0x00084734
   80110:	00084737 	.word	0x00084737
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a1b      	subs	r3, r3, r0
   80120:	109b      	asrs	r3, r3, #2
   80122:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	00084734 	.word	0x00084734
   8013c:	00084734 	.word	0x00084734
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4b04      	ldr	r3, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b113      	cbz	r3, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2301      	movs	r3, #1
   8015c:	7023      	strb	r3, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	200708c8 	.word	0x200708c8
   80164:	00000000 	.word	0x00000000
   80168:	00084734 	.word	0x00084734

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6803      	ldr	r3, [r0, #0]
   8017e:	b113      	cbz	r3, 80186 <frame_dummy+0x1a>
   80180:	4b07      	ldr	r3, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b103      	cbz	r3, 80186 <frame_dummy+0x1a>
   80184:	4798      	blx	r3
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	00084734 	.word	0x00084734
   80198:	200708cc 	.word	0x200708cc
   8019c:	00084734 	.word	0x00084734
   801a0:	00000000 	.word	0x00000000

000801a4 <init_adc>:
/* Enable the adc */

#include <asf.h>

/* Initialize the A/D converter */
void init_adc(void){
   801a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   801a6:	4c19      	ldr	r4, [pc, #100]	; (8020c <init_adc+0x68>)
   801a8:	2540      	movs	r5, #64	; 0x40
   801aa:	6025      	str	r5, [r4, #0]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   801ac:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   801ae:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   801b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   801b6:	6023      	str	r3, [r4, #0]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   801b8:	6163      	str	r3, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   801ba:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	
	// Enable analog pin 3
	ioport_enable_pin(PIO_PA22_IDX); // Enable analog pin 4
	ioport_set_pin_dir(PIO_PA22_IDX,IOPORT_DIR_INPUT); // Set analog pin 4 as input

	pmc_enable_periph_clk(ID_ADC);
   801be:	2025      	movs	r0, #37	; 0x25
   801c0:	4b13      	ldr	r3, [pc, #76]	; (80210 <init_adc+0x6c>)
   801c2:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 1000000, 8);
   801c4:	4e13      	ldr	r6, [pc, #76]	; (80214 <init_adc+0x70>)
   801c6:	4630      	mov	r0, r6
   801c8:	4913      	ldr	r1, [pc, #76]	; (80218 <init_adc+0x74>)
   801ca:	4a14      	ldr	r2, [pc, #80]	; (8021c <init_adc+0x78>)
   801cc:	2308      	movs	r3, #8
   801ce:	4f14      	ldr	r7, [pc, #80]	; (80220 <init_adc+0x7c>)
   801d0:	47b8      	blx	r7
	adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);
   801d2:	4630      	mov	r0, r6
   801d4:	2100      	movs	r1, #0
   801d6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   801da:	2301      	movs	r3, #1
   801dc:	4f11      	ldr	r7, [pc, #68]	; (80224 <init_adc+0x80>)
   801de:	47b8      	blx	r7
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
   801e0:	4630      	mov	r0, r6
   801e2:	2100      	movs	r1, #0
   801e4:	4b10      	ldr	r3, [pc, #64]	; (80228 <init_adc+0x84>)
   801e6:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_3);
   801e8:	4630      	mov	r0, r6
   801ea:	2103      	movs	r1, #3
   801ec:	4f0f      	ldr	r7, [pc, #60]	; (8022c <init_adc+0x88>)
   801ee:	47b8      	blx	r7
	adc_enable_channel(ADC, ADC_CHANNEL_4);
   801f0:	4630      	mov	r0, r6
   801f2:	2104      	movs	r1, #4
   801f4:	47b8      	blx	r7
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   801f6:	6665      	str	r5, [r4, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   801f8:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   801fa:	6265      	str	r5, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   801fc:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   80200:	6f23      	ldr	r3, [r4, #112]	; 0x70
   80202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   80206:	6723      	str	r3, [r4, #112]	; 0x70
   80208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8020a:	bf00      	nop
   8020c:	400e0e00 	.word	0x400e0e00
   80210:	00081a6d 	.word	0x00081a6d
   80214:	400c0000 	.word	0x400c0000
   80218:	0a037a00 	.word	0x0a037a00
   8021c:	000f4240 	.word	0x000f4240
   80220:	00080671 	.word	0x00080671
   80224:	000806b5 	.word	0x000806b5
   80228:	000806a5 	.word	0x000806a5
   8022c:	000806dd 	.word	0x000806dd

00080230 <setUp>:
#include <asf.h>
#include "unity.h"

Adc* adc;

void setUp(){
   80230:	4770      	bx	lr
   80232:	bf00      	nop

00080234 <tearDown>:
}

void tearDown(){
   80234:	4770      	bx	lr
   80236:	bf00      	nop

00080238 <test_adc_12bit>:
void test_adc_enabled(void){
	
}

/* Method testing if the ADC resolution is 12 bit*/
void test_adc_12bit(void){
   80238:	b510      	push	{r4, lr}
   8023a:	b082      	sub	sp, #8
	TEST_ASSERT_BIT_LOW_MESSAGE(4,ADC->ADC_MR,"ADC is 10bit");
   8023c:	4b05      	ldr	r3, [pc, #20]	; (80254 <test_adc_12bit+0x1c>)
   8023e:	685a      	ldr	r2, [r3, #4]
   80240:	2319      	movs	r3, #25
   80242:	9300      	str	r3, [sp, #0]
   80244:	2010      	movs	r0, #16
   80246:	2100      	movs	r1, #0
   80248:	4b03      	ldr	r3, [pc, #12]	; (80258 <test_adc_12bit+0x20>)
   8024a:	4c04      	ldr	r4, [pc, #16]	; (8025c <test_adc_12bit+0x24>)
   8024c:	47a0      	blx	r4
}
   8024e:	b002      	add	sp, #8
   80250:	bd10      	pop	{r4, pc}
   80252:	bf00      	nop
   80254:	400c0000 	.word	0x400c0000
   80258:	00084568 	.word	0x00084568
   8025c:	00081099 	.word	0x00081099

00080260 <test_channel_3_enabled>:
/* Check if channel 3 is enabled*/
void test_channel_3_enabled(void){
   80260:	b510      	push	{r4, lr}
   80262:	b082      	sub	sp, #8
	TEST_ASSERT_BIT_HIGH_MESSAGE(3,ADC->ADC_CHSR,"Channel 3 disabled");
   80264:	4b05      	ldr	r3, [pc, #20]	; (8027c <test_channel_3_enabled+0x1c>)
   80266:	699a      	ldr	r2, [r3, #24]
   80268:	231d      	movs	r3, #29
   8026a:	9300      	str	r3, [sp, #0]
   8026c:	2008      	movs	r0, #8
   8026e:	f04f 31ff 	mov.w	r1, #4294967295
   80272:	4b03      	ldr	r3, [pc, #12]	; (80280 <test_channel_3_enabled+0x20>)
   80274:	4c03      	ldr	r4, [pc, #12]	; (80284 <test_channel_3_enabled+0x24>)
   80276:	47a0      	blx	r4
}
   80278:	b002      	add	sp, #8
   8027a:	bd10      	pop	{r4, pc}
   8027c:	400c0000 	.word	0x400c0000
   80280:	00084578 	.word	0x00084578
   80284:	00081099 	.word	0x00081099

00080288 <test_adc_pin_enabled>:

/* Check if the adc pin is enabled*/
void test_adc_pin_enabled(void){
   80288:	b510      	push	{r4, lr}
   8028a:	b082      	sub	sp, #8
	TEST_ASSERT_BIT_HIGH_MESSAGE(PIO_PA6_IDX,PIOA->PIO_PSR,"Pin 3 is disabled");
   8028c:	4b05      	ldr	r3, [pc, #20]	; (802a4 <test_adc_pin_enabled+0x1c>)
   8028e:	689a      	ldr	r2, [r3, #8]
   80290:	2322      	movs	r3, #34	; 0x22
   80292:	9300      	str	r3, [sp, #0]
   80294:	2040      	movs	r0, #64	; 0x40
   80296:	f04f 31ff 	mov.w	r1, #4294967295
   8029a:	4b03      	ldr	r3, [pc, #12]	; (802a8 <test_adc_pin_enabled+0x20>)
   8029c:	4c03      	ldr	r4, [pc, #12]	; (802ac <test_adc_pin_enabled+0x24>)
   8029e:	47a0      	blx	r4
}
   802a0:	b002      	add	sp, #8
   802a2:	bd10      	pop	{r4, pc}
   802a4:	400e0e00 	.word	0x400e0e00
   802a8:	0008458c 	.word	0x0008458c
   802ac:	00081099 	.word	0x00081099

000802b0 <test_adc_pin_input>:

/* Check if the adc pin is set to input */
void test_adc_pin_input(void){
   802b0:	b510      	push	{r4, lr}
   802b2:	b082      	sub	sp, #8
	TEST_ASSERT_BIT_LOW_MESSAGE(PIO_PA6_IDX,PIOA->PIO_OSR,"Pin 3 is output");
   802b4:	4b05      	ldr	r3, [pc, #20]	; (802cc <test_adc_pin_input+0x1c>)
   802b6:	699a      	ldr	r2, [r3, #24]
   802b8:	2327      	movs	r3, #39	; 0x27
   802ba:	9300      	str	r3, [sp, #0]
   802bc:	2040      	movs	r0, #64	; 0x40
   802be:	2100      	movs	r1, #0
   802c0:	4b03      	ldr	r3, [pc, #12]	; (802d0 <test_adc_pin_input+0x20>)
   802c2:	4c04      	ldr	r4, [pc, #16]	; (802d4 <test_adc_pin_input+0x24>)
   802c4:	47a0      	blx	r4
}
   802c6:	b002      	add	sp, #8
   802c8:	bd10      	pop	{r4, pc}
   802ca:	bf00      	nop
   802cc:	400e0e00 	.word	0x400e0e00
   802d0:	000845a0 	.word	0x000845a0
   802d4:	00081099 	.word	0x00081099

000802d8 <test_adc_pin_pullup>:

/* Check if the adc pin is set to input */
void test_adc_pin_pullup(void){
   802d8:	b510      	push	{r4, lr}
   802da:	b082      	sub	sp, #8
	TEST_ASSERT_BIT_LOW_MESSAGE(PIO_PA6_IDX,PIOA->PIO_PUSR,"Pin 3 mode is not pullup");
   802dc:	4b05      	ldr	r3, [pc, #20]	; (802f4 <test_adc_pin_pullup+0x1c>)
   802de:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   802e0:	232c      	movs	r3, #44	; 0x2c
   802e2:	9300      	str	r3, [sp, #0]
   802e4:	2040      	movs	r0, #64	; 0x40
   802e6:	2100      	movs	r1, #0
   802e8:	4b03      	ldr	r3, [pc, #12]	; (802f8 <test_adc_pin_pullup+0x20>)
   802ea:	4c04      	ldr	r4, [pc, #16]	; (802fc <test_adc_pin_pullup+0x24>)
   802ec:	47a0      	blx	r4
}
   802ee:	b002      	add	sp, #8
   802f0:	bd10      	pop	{r4, pc}
   802f2:	bf00      	nop
   802f4:	400e0e00 	.word	0x400e0e00
   802f8:	000845b0 	.word	0x000845b0
   802fc:	00081099 	.word	0x00081099

00080300 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80300:	b5f0      	push	{r4, r5, r6, r7, lr}
   80302:	b083      	sub	sp, #12
   80304:	4604      	mov	r4, r0
   80306:	460d      	mov	r5, r1
	uint32_t val;

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80308:	4b1f      	ldr	r3, [pc, #124]	; (80388 <usart_serial_getchar+0x88>)
   8030a:	4298      	cmp	r0, r3
   8030c:	d107      	bne.n	8031e <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
   8030e:	461f      	mov	r7, r3
   80310:	4e1e      	ldr	r6, [pc, #120]	; (8038c <usart_serial_getchar+0x8c>)
   80312:	4638      	mov	r0, r7
   80314:	4629      	mov	r1, r5
   80316:	47b0      	blx	r6
   80318:	2800      	cmp	r0, #0
   8031a:	d1fa      	bne.n	80312 <usart_serial_getchar+0x12>
   8031c:	e019      	b.n	80352 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8031e:	4b1c      	ldr	r3, [pc, #112]	; (80390 <usart_serial_getchar+0x90>)
   80320:	4298      	cmp	r0, r3
   80322:	d109      	bne.n	80338 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
   80324:	461f      	mov	r7, r3
   80326:	4e1b      	ldr	r6, [pc, #108]	; (80394 <usart_serial_getchar+0x94>)
   80328:	4638      	mov	r0, r7
   8032a:	a901      	add	r1, sp, #4
   8032c:	47b0      	blx	r6
   8032e:	2800      	cmp	r0, #0
   80330:	d1fa      	bne.n	80328 <usart_serial_getchar+0x28>
		*data = (uint8_t)(val & 0xFF);
   80332:	9b01      	ldr	r3, [sp, #4]
   80334:	702b      	strb	r3, [r5, #0]
   80336:	e019      	b.n	8036c <usart_serial_getchar+0x6c>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80338:	4b17      	ldr	r3, [pc, #92]	; (80398 <usart_serial_getchar+0x98>)
   8033a:	4298      	cmp	r0, r3
   8033c:	d109      	bne.n	80352 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
   8033e:	461e      	mov	r6, r3
   80340:	4c14      	ldr	r4, [pc, #80]	; (80394 <usart_serial_getchar+0x94>)
   80342:	4630      	mov	r0, r6
   80344:	a901      	add	r1, sp, #4
   80346:	47a0      	blx	r4
   80348:	2800      	cmp	r0, #0
   8034a:	d1fa      	bne.n	80342 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   8034c:	9b01      	ldr	r3, [sp, #4]
   8034e:	702b      	strb	r3, [r5, #0]
   80350:	e018      	b.n	80384 <usart_serial_getchar+0x84>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80352:	4b12      	ldr	r3, [pc, #72]	; (8039c <usart_serial_getchar+0x9c>)
   80354:	429c      	cmp	r4, r3
   80356:	d109      	bne.n	8036c <usart_serial_getchar+0x6c>
		while (usart_read(p_usart, &val));
   80358:	461e      	mov	r6, r3
   8035a:	4c0e      	ldr	r4, [pc, #56]	; (80394 <usart_serial_getchar+0x94>)
   8035c:	4630      	mov	r0, r6
   8035e:	a901      	add	r1, sp, #4
   80360:	47a0      	blx	r4
   80362:	2800      	cmp	r0, #0
   80364:	d1fa      	bne.n	8035c <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
   80366:	9b01      	ldr	r3, [sp, #4]
   80368:	702b      	strb	r3, [r5, #0]
   8036a:	e00b      	b.n	80384 <usart_serial_getchar+0x84>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8036c:	4b0c      	ldr	r3, [pc, #48]	; (803a0 <usart_serial_getchar+0xa0>)
   8036e:	429c      	cmp	r4, r3
   80370:	d108      	bne.n	80384 <usart_serial_getchar+0x84>
		while (usart_read(p_usart, &val));
   80372:	461e      	mov	r6, r3
   80374:	4c07      	ldr	r4, [pc, #28]	; (80394 <usart_serial_getchar+0x94>)
   80376:	4630      	mov	r0, r6
   80378:	a901      	add	r1, sp, #4
   8037a:	47a0      	blx	r4
   8037c:	2800      	cmp	r0, #0
   8037e:	d1fa      	bne.n	80376 <usart_serial_getchar+0x76>
		*data = (uint8_t)(val & 0xFF);
   80380:	9b01      	ldr	r3, [sp, #4]
   80382:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80384:	b003      	add	sp, #12
   80386:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80388:	400e0800 	.word	0x400e0800
   8038c:	00080735 	.word	0x00080735
   80390:	40098000 	.word	0x40098000
   80394:	00080761 	.word	0x00080761
   80398:	4009c000 	.word	0x4009c000
   8039c:	400a0000 	.word	0x400a0000
   803a0:	400a4000 	.word	0x400a4000

000803a4 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   803a4:	b570      	push	{r4, r5, r6, lr}
   803a6:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   803a8:	4b21      	ldr	r3, [pc, #132]	; (80430 <usart_serial_putchar+0x8c>)
   803aa:	4298      	cmp	r0, r3
   803ac:	d107      	bne.n	803be <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   803ae:	461e      	mov	r6, r3
   803b0:	4d20      	ldr	r5, [pc, #128]	; (80434 <usart_serial_putchar+0x90>)
   803b2:	4630      	mov	r0, r6
   803b4:	4621      	mov	r1, r4
   803b6:	47a8      	blx	r5
   803b8:	2800      	cmp	r0, #0
   803ba:	d1fa      	bne.n	803b2 <usart_serial_putchar+0xe>
   803bc:	e02b      	b.n	80416 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   803be:	4b1e      	ldr	r3, [pc, #120]	; (80438 <usart_serial_putchar+0x94>)
   803c0:	4298      	cmp	r0, r3
   803c2:	d107      	bne.n	803d4 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   803c4:	461e      	mov	r6, r3
   803c6:	4d1d      	ldr	r5, [pc, #116]	; (8043c <usart_serial_putchar+0x98>)
   803c8:	4630      	mov	r0, r6
   803ca:	4621      	mov	r1, r4
   803cc:	47a8      	blx	r5
   803ce:	2800      	cmp	r0, #0
   803d0:	d1fa      	bne.n	803c8 <usart_serial_putchar+0x24>
   803d2:	e022      	b.n	8041a <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   803d4:	4b1a      	ldr	r3, [pc, #104]	; (80440 <usart_serial_putchar+0x9c>)
   803d6:	4298      	cmp	r0, r3
   803d8:	d107      	bne.n	803ea <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   803da:	461e      	mov	r6, r3
   803dc:	4d17      	ldr	r5, [pc, #92]	; (8043c <usart_serial_putchar+0x98>)
   803de:	4630      	mov	r0, r6
   803e0:	4621      	mov	r1, r4
   803e2:	47a8      	blx	r5
   803e4:	2800      	cmp	r0, #0
   803e6:	d1fa      	bne.n	803de <usart_serial_putchar+0x3a>
   803e8:	e019      	b.n	8041e <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   803ea:	4b16      	ldr	r3, [pc, #88]	; (80444 <usart_serial_putchar+0xa0>)
   803ec:	4298      	cmp	r0, r3
   803ee:	d107      	bne.n	80400 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   803f0:	461e      	mov	r6, r3
   803f2:	4d12      	ldr	r5, [pc, #72]	; (8043c <usart_serial_putchar+0x98>)
   803f4:	4630      	mov	r0, r6
   803f6:	4621      	mov	r1, r4
   803f8:	47a8      	blx	r5
   803fa:	2800      	cmp	r0, #0
   803fc:	d1fa      	bne.n	803f4 <usart_serial_putchar+0x50>
   803fe:	e010      	b.n	80422 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80400:	4b11      	ldr	r3, [pc, #68]	; (80448 <usart_serial_putchar+0xa4>)
   80402:	4298      	cmp	r0, r3
   80404:	d10f      	bne.n	80426 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80406:	461e      	mov	r6, r3
   80408:	4d0c      	ldr	r5, [pc, #48]	; (8043c <usart_serial_putchar+0x98>)
   8040a:	4630      	mov	r0, r6
   8040c:	4621      	mov	r1, r4
   8040e:	47a8      	blx	r5
   80410:	2800      	cmp	r0, #0
   80412:	d1fa      	bne.n	8040a <usart_serial_putchar+0x66>
   80414:	e009      	b.n	8042a <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80416:	2001      	movs	r0, #1
   80418:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8041a:	2001      	movs	r0, #1
   8041c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8041e:	2001      	movs	r0, #1
   80420:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80422:	2001      	movs	r0, #1
   80424:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80426:	2000      	movs	r0, #0
   80428:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8042a:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   8042c:	bd70      	pop	{r4, r5, r6, pc}
   8042e:	bf00      	nop
   80430:	400e0800 	.word	0x400e0800
   80434:	00080721 	.word	0x00080721
   80438:	40098000 	.word	0x40098000
   8043c:	00080749 	.word	0x00080749
   80440:	4009c000 	.word	0x4009c000
   80444:	400a0000 	.word	0x400a0000
   80448:	400a4000 	.word	0x400a4000

0008044c <main>:
	
	#endif
}

int main(void)
{
   8044c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80450:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80452:	2008      	movs	r0, #8
   80454:	4d3e      	ldr	r5, [pc, #248]	; (80550 <main+0x104>)
   80456:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80458:	4c3e      	ldr	r4, [pc, #248]	; (80554 <main+0x108>)
   8045a:	4b3f      	ldr	r3, [pc, #252]	; (80558 <main+0x10c>)
   8045c:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8045e:	4a3f      	ldr	r2, [pc, #252]	; (8055c <main+0x110>)
   80460:	4b3f      	ldr	r3, [pc, #252]	; (80560 <main+0x114>)
   80462:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80464:	4a3f      	ldr	r2, [pc, #252]	; (80564 <main+0x118>)
   80466:	4b40      	ldr	r3, [pc, #256]	; (80568 <main+0x11c>)
   80468:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8046a:	4b40      	ldr	r3, [pc, #256]	; (8056c <main+0x120>)
   8046c:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   8046e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80472:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   80474:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80478:	9302      	str	r3, [sp, #8]
   8047a:	2008      	movs	r0, #8
   8047c:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   8047e:	4620      	mov	r0, r4
   80480:	4669      	mov	r1, sp
   80482:	4b3b      	ldr	r3, [pc, #236]	; (80570 <main+0x124>)
   80484:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80486:	4d3b      	ldr	r5, [pc, #236]	; (80574 <main+0x128>)
   80488:	682b      	ldr	r3, [r5, #0]
   8048a:	6898      	ldr	r0, [r3, #8]
   8048c:	2100      	movs	r1, #0
   8048e:	4c3a      	ldr	r4, [pc, #232]	; (80578 <main+0x12c>)
   80490:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80492:	682b      	ldr	r3, [r5, #0]
   80494:	6858      	ldr	r0, [r3, #4]
   80496:	2100      	movs	r1, #0
   80498:	47a0      	blx	r4
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   8049a:	4b38      	ldr	r3, [pc, #224]	; (8057c <main+0x130>)
   8049c:	f44f 7280 	mov.w	r2, #256	; 0x100
   804a0:	665a      	str	r2, [r3, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   804a2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   804a4:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   804a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   804aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   804ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   804b0:	671a      	str	r2, [r3, #112]	; 0x70
	stdio_serial_init(CONF_UART, &uart_serial_options);
	

	ioport_set_pin_mode(PIO_PA8_IDX,IOPORT_MODE_PULLUP); // Specify that sdout will not buffer 
	#if defined(__GNUC__)
	setbuf(stdout, NULL);
   804b2:	682b      	ldr	r3, [r5, #0]
   804b4:	6898      	ldr	r0, [r3, #8]
   804b6:	2100      	movs	r1, #0
   804b8:	47a0      	blx	r4
}

int main(void)
{
	configure_console();
	board_init();
   804ba:	4b31      	ldr	r3, [pc, #196]	; (80580 <main+0x134>)
   804bc:	4798      	blx	r3
	sysclk_init();
   804be:	4b31      	ldr	r3, [pc, #196]	; (80584 <main+0x138>)
   804c0:	4798      	blx	r3
	
	init_adc();
   804c2:	4b31      	ldr	r3, [pc, #196]	; (80588 <main+0x13c>)
   804c4:	4798      	blx	r3
	
	UnityBegin("test/test_adc.c"); // Begin unity on the test protocol for test_math, run setUp() in test_math.c
   804c6:	4831      	ldr	r0, [pc, #196]	; (8058c <main+0x140>)
   804c8:	4b31      	ldr	r3, [pc, #196]	; (80590 <main+0x144>)
   804ca:	4798      	blx	r3
	
	RUN_TEST(test_adc_12bit,20); // Run test if adc is 12bit resolution.
   804cc:	4831      	ldr	r0, [pc, #196]	; (80594 <main+0x148>)
   804ce:	4932      	ldr	r1, [pc, #200]	; (80598 <main+0x14c>)
   804d0:	2214      	movs	r2, #20
   804d2:	4c32      	ldr	r4, [pc, #200]	; (8059c <main+0x150>)
   804d4:	47a0      	blx	r4
	RUN_TEST(test_channel_3_enabled,20); // Test i channel 3 is enabled
   804d6:	4832      	ldr	r0, [pc, #200]	; (805a0 <main+0x154>)
   804d8:	4932      	ldr	r1, [pc, #200]	; (805a4 <main+0x158>)
   804da:	2214      	movs	r2, #20
   804dc:	47a0      	blx	r4
	RUN_TEST(test_adc_pin_enabled,20); // Test if analog pin is enabled
   804de:	4832      	ldr	r0, [pc, #200]	; (805a8 <main+0x15c>)
   804e0:	4932      	ldr	r1, [pc, #200]	; (805ac <main+0x160>)
   804e2:	2214      	movs	r2, #20
   804e4:	47a0      	blx	r4
	RUN_TEST(test_adc_pin_input,20); // Test if analpog pin is set as input
   804e6:	4832      	ldr	r0, [pc, #200]	; (805b0 <main+0x164>)
   804e8:	4932      	ldr	r1, [pc, #200]	; (805b4 <main+0x168>)
   804ea:	2214      	movs	r2, #20
   804ec:	47a0      	blx	r4
	RUN_TEST(test_adc_pin_pullup,20); // Test if analpog pin is set as input
   804ee:	4832      	ldr	r0, [pc, #200]	; (805b8 <main+0x16c>)
   804f0:	4932      	ldr	r1, [pc, #200]	; (805bc <main+0x170>)
   804f2:	2214      	movs	r2, #20
   804f4:	47a0      	blx	r4
	
	UnityEnd(); // End test protocol, print information
   804f6:	4b32      	ldr	r3, [pc, #200]	; (805c0 <main+0x174>)
   804f8:	4798      	blx	r3
	int b;
	int i;
	
	for(;;)
	{	
		i = 0;
   804fa:	2500      	movs	r5, #0
		a = 0;
		b = 0;
   804fc:	462c      	mov	r4, r5
	int i;
	
	for(;;)
	{	
		i = 0;
		a = 0;
   804fe:	462e      	mov	r6, r5
				i++;
			}
	}
	a = a/10;
	b = b/10;
		printf("#3 %d\n\r",a);
   80500:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 805d0 <main+0x184>
				a += temp;
				b += temp2;
				i++;
			}
	}
	a = a/10;
   80504:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 805d4 <main+0x188>
	b = b/10;
		printf("#3 %d\n\r",a);
   80508:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 805d8 <main+0x18c>
   8050c:	e00c      	b.n	80528 <main+0xdc>
		i = 0;
		a = 0;
		b = 0;
		while(i<10) // Average filter 
		{
		int temp = ADC->ADC_CDR[3];//adc_get_latest_value(ADC);
   8050e:	4f2d      	ldr	r7, [pc, #180]	; (805c4 <main+0x178>)
   80510:	f8d7 805c 	ldr.w	r8, [r7, #92]	; 0x5c
			adc_start(ADC);
   80514:	4638      	mov	r0, r7
   80516:	4b2c      	ldr	r3, [pc, #176]	; (805c8 <main+0x17c>)
   80518:	4798      	blx	r3
		int temp2 = ADC->ADC_CDR[4];	
   8051a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
			if(temp!=0)
   8051c:	f1b8 0f00 	cmp.w	r8, #0
   80520:	d002      	beq.n	80528 <main+0xdc>
			{
				a += temp;
   80522:	4446      	add	r6, r8
				b += temp2;
   80524:	441c      	add	r4, r3
				i++;
   80526:	3501      	adds	r5, #1
	for(;;)
	{	
		i = 0;
		a = 0;
		b = 0;
		while(i<10) // Average filter 
   80528:	2d09      	cmp	r5, #9
   8052a:	ddf0      	ble.n	8050e <main+0xc2>
				a += temp;
				b += temp2;
				i++;
			}
	}
	a = a/10;
   8052c:	fb8a 3106 	smull	r3, r1, sl, r6
   80530:	17f6      	asrs	r6, r6, #31
	b = b/10;
		printf("#3 %d\n\r",a);
   80532:	4658      	mov	r0, fp
   80534:	ebc6 01a1 	rsb	r1, r6, r1, asr #2
   80538:	47c8      	blx	r9
				b += temp2;
				i++;
			}
	}
	a = a/10;
	b = b/10;
   8053a:	fb8a 3104 	smull	r3, r1, sl, r4
   8053e:	17e4      	asrs	r4, r4, #31
		printf("#3 %d\n\r",a);
		printf("#4 %d\n\r",b);
   80540:	4822      	ldr	r0, [pc, #136]	; (805cc <main+0x180>)
   80542:	ebc4 01a1 	rsb	r1, r4, r1, asr #2
   80546:	47c8      	blx	r9
	int b;
	int i;
	
	for(;;)
	{	
		i = 0;
   80548:	2400      	movs	r4, #0
		a = 0;
		b = 0;
   8054a:	4625      	mov	r5, r4
	int i;
	
	for(;;)
	{	
		i = 0;
		a = 0;
   8054c:	4626      	mov	r6, r4
	}
	a = a/10;
	b = b/10;
		printf("#3 %d\n\r",a);
		printf("#4 %d\n\r",b);
	}
   8054e:	e7eb      	b.n	80528 <main+0xdc>
   80550:	00081a6d 	.word	0x00081a6d
   80554:	400e0800 	.word	0x400e0800
   80558:	20070a1c 	.word	0x20070a1c
   8055c:	000803a5 	.word	0x000803a5
   80560:	20070a18 	.word	0x20070a18
   80564:	00080301 	.word	0x00080301
   80568:	20070a14 	.word	0x20070a14
   8056c:	0501bd00 	.word	0x0501bd00
   80570:	000806e9 	.word	0x000806e9
   80574:	20070008 	.word	0x20070008
   80578:	00081e53 	.word	0x00081e53
   8057c:	400e0e00 	.word	0x400e0e00
   80580:	00081645 	.word	0x00081645
   80584:	000815e1 	.word	0x000815e1
   80588:	000801a5 	.word	0x000801a5
   8058c:	000845cc 	.word	0x000845cc
   80590:	00081169 	.word	0x00081169
   80594:	00080239 	.word	0x00080239
   80598:	000845dc 	.word	0x000845dc
   8059c:	00081111 	.word	0x00081111
   805a0:	00080261 	.word	0x00080261
   805a4:	000845ec 	.word	0x000845ec
   805a8:	00080289 	.word	0x00080289
   805ac:	00084604 	.word	0x00084604
   805b0:	000802b1 	.word	0x000802b1
   805b4:	0008461c 	.word	0x0008461c
   805b8:	000802d9 	.word	0x000802d9
   805bc:	00084630 	.word	0x00084630
   805c0:	00081185 	.word	0x00081185
   805c4:	400c0000 	.word	0x400c0000
   805c8:	000806d5 	.word	0x000806d5
   805cc:	0008464c 	.word	0x0008464c
   805d0:	00084644 	.word	0x00084644
   805d4:	66666667 	.word	0x66666667
   805d8:	00081df1 	.word	0x00081df1

000805dc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   805dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   805e0:	460c      	mov	r4, r1
   805e2:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   805e4:	b960      	cbnz	r0, 80600 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   805e6:	2a00      	cmp	r2, #0
   805e8:	dd0e      	ble.n	80608 <_read+0x2c>
   805ea:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   805ec:	4e09      	ldr	r6, [pc, #36]	; (80614 <_read+0x38>)
   805ee:	4d0a      	ldr	r5, [pc, #40]	; (80618 <_read+0x3c>)
   805f0:	6830      	ldr	r0, [r6, #0]
   805f2:	4621      	mov	r1, r4
   805f4:	682b      	ldr	r3, [r5, #0]
   805f6:	4798      	blx	r3
		ptr++;
   805f8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   805fa:	42bc      	cmp	r4, r7
   805fc:	d1f8      	bne.n	805f0 <_read+0x14>
   805fe:	e006      	b.n	8060e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80600:	f04f 30ff 	mov.w	r0, #4294967295
   80604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80608:	2000      	movs	r0, #0
   8060a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8060e:	4640      	mov	r0, r8
	}
	return nChars;
}
   80610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80614:	20070a1c 	.word	0x20070a1c
   80618:	20070a14 	.word	0x20070a14

0008061c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   8061c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80620:	460e      	mov	r6, r1
   80622:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80624:	3801      	subs	r0, #1
   80626:	2802      	cmp	r0, #2
   80628:	d80f      	bhi.n	8064a <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   8062a:	b192      	cbz	r2, 80652 <_write+0x36>
   8062c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8062e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8066c <_write+0x50>
   80632:	4f0d      	ldr	r7, [pc, #52]	; (80668 <_write+0x4c>)
   80634:	f8d8 0000 	ldr.w	r0, [r8]
   80638:	5d31      	ldrb	r1, [r6, r4]
   8063a:	683b      	ldr	r3, [r7, #0]
   8063c:	4798      	blx	r3
   8063e:	2800      	cmp	r0, #0
   80640:	db0a      	blt.n	80658 <_write+0x3c>
			return -1;
		}
		++nChars;
   80642:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80644:	42a5      	cmp	r5, r4
   80646:	d1f5      	bne.n	80634 <_write+0x18>
   80648:	e00a      	b.n	80660 <_write+0x44>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8064a:	f04f 30ff 	mov.w	r0, #4294967295
   8064e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80652:	2000      	movs	r0, #0
   80654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80658:	f04f 30ff 	mov.w	r0, #4294967295
   8065c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80660:	4620      	mov	r0, r4
	}
	return nChars;
}
   80662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80666:	bf00      	nop
   80668:	20070a18 	.word	0x20070a18
   8066c:	20070a1c 	.word	0x20070a1c

00080670 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80670:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   80672:	2401      	movs	r4, #1
   80674:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80676:	2400      	movs	r4, #0
   80678:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   8067a:	f240 2502 	movw	r5, #514	; 0x202
   8067e:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   80682:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   80686:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   8068a:	6845      	ldr	r5, [r0, #4]
   8068c:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   8068e:	0052      	lsls	r2, r2, #1
   80690:	fbb1 f1f2 	udiv	r1, r1, r2
   80694:	1e4d      	subs	r5, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80696:	022d      	lsls	r5, r5, #8
   80698:	b2ad      	uxth	r5, r5
   8069a:	432b      	orrs	r3, r5
   8069c:	6043      	str	r3, [r0, #4]
	return 0;
}
   8069e:	4620      	mov	r0, r4
   806a0:	bc30      	pop	{r4, r5}
   806a2:	4770      	bx	lr

000806a4 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   806a4:	6843      	ldr	r3, [r0, #4]
   806a6:	f023 0310 	bic.w	r3, r3, #16
   806aa:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   806ac:	6843      	ldr	r3, [r0, #4]
   806ae:	4319      	orrs	r1, r3
   806b0:	6041      	str	r1, [r0, #4]
   806b2:	4770      	bx	lr

000806b4 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   806b4:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   806b6:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   806b8:	4322      	orrs	r2, r4
   806ba:	0609      	lsls	r1, r1, #24
   806bc:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   806c0:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   806c2:	071b      	lsls	r3, r3, #28
   806c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   806c8:	431a      	orrs	r2, r3
   806ca:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   806cc:	f85d 4b04 	ldr.w	r4, [sp], #4
   806d0:	4770      	bx	lr
   806d2:	bf00      	nop

000806d4 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   806d4:	2302      	movs	r3, #2
   806d6:	6003      	str	r3, [r0, #0]
   806d8:	4770      	bx	lr
   806da:	bf00      	nop

000806dc <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   806dc:	2301      	movs	r3, #1
   806de:	fa03 f101 	lsl.w	r1, r3, r1
   806e2:	6101      	str	r1, [r0, #16]
   806e4:	4770      	bx	lr
   806e6:	bf00      	nop

000806e8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   806e8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   806ea:	23ac      	movs	r3, #172	; 0xac
   806ec:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   806ee:	680a      	ldr	r2, [r1, #0]
   806f0:	684b      	ldr	r3, [r1, #4]
   806f2:	fbb2 f3f3 	udiv	r3, r2, r3
   806f6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   806f8:	1e5c      	subs	r4, r3, #1
   806fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   806fe:	4294      	cmp	r4, r2
   80700:	d80a      	bhi.n	80718 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80702:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80704:	688b      	ldr	r3, [r1, #8]
   80706:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80708:	f240 2302 	movw	r3, #514	; 0x202
   8070c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80710:	2350      	movs	r3, #80	; 0x50
   80712:	6003      	str	r3, [r0, #0]

	return 0;
   80714:	2000      	movs	r0, #0
   80716:	e000      	b.n	8071a <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80718:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8071a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8071e:	4770      	bx	lr

00080720 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80720:	6943      	ldr	r3, [r0, #20]
   80722:	f013 0f02 	tst.w	r3, #2
   80726:	d002      	beq.n	8072e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80728:	61c1      	str	r1, [r0, #28]
	return 0;
   8072a:	2000      	movs	r0, #0
   8072c:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   8072e:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80730:	4770      	bx	lr
   80732:	bf00      	nop

00080734 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80734:	6943      	ldr	r3, [r0, #20]
   80736:	f013 0f01 	tst.w	r3, #1
   8073a:	d003      	beq.n	80744 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8073c:	6983      	ldr	r3, [r0, #24]
   8073e:	700b      	strb	r3, [r1, #0]
	return 0;
   80740:	2000      	movs	r0, #0
   80742:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80744:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80746:	4770      	bx	lr

00080748 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80748:	6943      	ldr	r3, [r0, #20]
   8074a:	f013 0f02 	tst.w	r3, #2
   8074e:	d004      	beq.n	8075a <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80750:	f3c1 0108 	ubfx	r1, r1, #0, #9
   80754:	61c1      	str	r1, [r0, #28]
	return 0;
   80756:	2000      	movs	r0, #0
   80758:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8075a:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8075c:	4770      	bx	lr
   8075e:	bf00      	nop

00080760 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80760:	6943      	ldr	r3, [r0, #20]
   80762:	f013 0f01 	tst.w	r3, #1
   80766:	d005      	beq.n	80774 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80768:	6983      	ldr	r3, [r0, #24]
   8076a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8076e:	600b      	str	r3, [r1, #0]

	return 0;
   80770:	2000      	movs	r0, #0
   80772:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80774:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80776:	4770      	bx	lr

00080778 <UnityPrintNumber>:
}

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumber(const _U_SINT number_to_print)
{
   80778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8077c:	4605      	mov	r5, r0
    _U_SINT divisor = 1;
    _U_SINT next_divisor;
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
   8077e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   80782:	d132      	bne.n	807ea <UnityPrintNumber+0x72>
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80784:	4b5f      	ldr	r3, [pc, #380]	; (80904 <UnityPrintNumber+0x18c>)
   80786:	6818      	ldr	r0, [r3, #0]
   80788:	6882      	ldr	r2, [r0, #8]
   8078a:	6893      	ldr	r3, [r2, #8]
   8078c:	3b01      	subs	r3, #1
   8078e:	6093      	str	r3, [r2, #8]
   80790:	2b00      	cmp	r3, #0
   80792:	da1d      	bge.n	807d0 <UnityPrintNumber+0x58>
   80794:	6882      	ldr	r2, [r0, #8]
   80796:	6891      	ldr	r1, [r2, #8]
   80798:	6993      	ldr	r3, [r2, #24]
   8079a:	4299      	cmp	r1, r3
   8079c:	db12      	blt.n	807c4 <UnityPrintNumber+0x4c>
   8079e:	6813      	ldr	r3, [r2, #0]
   807a0:	222d      	movs	r2, #45	; 0x2d
   807a2:	701a      	strb	r2, [r3, #0]
   807a4:	4b57      	ldr	r3, [pc, #348]	; (80904 <UnityPrintNumber+0x18c>)
   807a6:	6818      	ldr	r0, [r3, #0]
   807a8:	6882      	ldr	r2, [r0, #8]
   807aa:	6813      	ldr	r3, [r2, #0]
   807ac:	7819      	ldrb	r1, [r3, #0]
   807ae:	290a      	cmp	r1, #10
   807b0:	d002      	beq.n	807b8 <UnityPrintNumber+0x40>
   807b2:	3301      	adds	r3, #1
   807b4:	6013      	str	r3, [r2, #0]
   807b6:	e04f      	b.n	80858 <UnityPrintNumber+0xe0>
   807b8:	210a      	movs	r1, #10
   807ba:	4b53      	ldr	r3, [pc, #332]	; (80908 <UnityPrintNumber+0x190>)
   807bc:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   807be:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   807c2:	e049      	b.n	80858 <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   807c4:	212d      	movs	r1, #45	; 0x2d
   807c6:	4b50      	ldr	r3, [pc, #320]	; (80908 <UnityPrintNumber+0x190>)
   807c8:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   807ca:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   807ce:	e043      	b.n	80858 <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   807d0:	6883      	ldr	r3, [r0, #8]
   807d2:	681b      	ldr	r3, [r3, #0]
   807d4:	222d      	movs	r2, #45	; 0x2d
   807d6:	701a      	strb	r2, [r3, #0]
   807d8:	4b4a      	ldr	r3, [pc, #296]	; (80904 <UnityPrintNumber+0x18c>)
   807da:	681b      	ldr	r3, [r3, #0]
   807dc:	689b      	ldr	r3, [r3, #8]
   807de:	681a      	ldr	r2, [r3, #0]
   807e0:	3201      	adds	r2, #1
   807e2:	601a      	str	r2, [r3, #0]
        number = (1ul << (UNITY_LONG_WIDTH-1));
   807e4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   807e8:	e036      	b.n	80858 <UnityPrintNumber+0xe0>
    }
    else if (number_to_print < 0)
   807ea:	2800      	cmp	r0, #0
   807ec:	da34      	bge.n	80858 <UnityPrintNumber+0xe0>
    {
        //Some other negative number
        UNITY_OUTPUT_CHAR('-');
   807ee:	4b45      	ldr	r3, [pc, #276]	; (80904 <UnityPrintNumber+0x18c>)
   807f0:	6818      	ldr	r0, [r3, #0]
   807f2:	6882      	ldr	r2, [r0, #8]
   807f4:	6893      	ldr	r3, [r2, #8]
   807f6:	3b01      	subs	r3, #1
   807f8:	6093      	str	r3, [r2, #8]
   807fa:	2b00      	cmp	r3, #0
   807fc:	da19      	bge.n	80832 <UnityPrintNumber+0xba>
   807fe:	6882      	ldr	r2, [r0, #8]
   80800:	6891      	ldr	r1, [r2, #8]
   80802:	6993      	ldr	r3, [r2, #24]
   80804:	4299      	cmp	r1, r3
   80806:	db10      	blt.n	8082a <UnityPrintNumber+0xb2>
   80808:	6813      	ldr	r3, [r2, #0]
   8080a:	222d      	movs	r2, #45	; 0x2d
   8080c:	701a      	strb	r2, [r3, #0]
   8080e:	4b3d      	ldr	r3, [pc, #244]	; (80904 <UnityPrintNumber+0x18c>)
   80810:	6818      	ldr	r0, [r3, #0]
   80812:	6882      	ldr	r2, [r0, #8]
   80814:	6813      	ldr	r3, [r2, #0]
   80816:	7819      	ldrb	r1, [r3, #0]
   80818:	290a      	cmp	r1, #10
   8081a:	d002      	beq.n	80822 <UnityPrintNumber+0xaa>
   8081c:	3301      	adds	r3, #1
   8081e:	6013      	str	r3, [r2, #0]
   80820:	e011      	b.n	80846 <UnityPrintNumber+0xce>
   80822:	210a      	movs	r1, #10
   80824:	4b38      	ldr	r3, [pc, #224]	; (80908 <UnityPrintNumber+0x190>)
   80826:	4798      	blx	r3
   80828:	e00d      	b.n	80846 <UnityPrintNumber+0xce>
   8082a:	212d      	movs	r1, #45	; 0x2d
   8082c:	4b36      	ldr	r3, [pc, #216]	; (80908 <UnityPrintNumber+0x190>)
   8082e:	4798      	blx	r3
   80830:	e009      	b.n	80846 <UnityPrintNumber+0xce>
   80832:	6883      	ldr	r3, [r0, #8]
   80834:	681b      	ldr	r3, [r3, #0]
   80836:	222d      	movs	r2, #45	; 0x2d
   80838:	701a      	strb	r2, [r3, #0]
   8083a:	4b32      	ldr	r3, [pc, #200]	; (80904 <UnityPrintNumber+0x18c>)
   8083c:	681b      	ldr	r3, [r3, #0]
   8083e:	689b      	ldr	r3, [r3, #8]
   80840:	681a      	ldr	r2, [r3, #0]
   80842:	3201      	adds	r2, #1
   80844:	601a      	str	r2, [r3, #0]
        number = (_U_UINT)(-number_to_print);
   80846:	426d      	negs	r5, r5
   80848:	e006      	b.n	80858 <UnityPrintNumber+0xe0>
    }

    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
   8084a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   8084e:	005b      	lsls	r3, r3, #1
        if (next_divisor > divisor)
   80850:	429c      	cmp	r4, r3
   80852:	da06      	bge.n	80862 <UnityPrintNumber+0xea>
            divisor = next_divisor;
   80854:	461c      	mov	r4, r3
   80856:	e000      	b.n	8085a <UnityPrintNumber+0xe2>

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80858:	2401      	movs	r4, #1
        //Positive number
        number = (_U_UINT)number_to_print;
    }

    // figure out initial divisor
    while (number / divisor > 9)
   8085a:	fbb5 f3f4 	udiv	r3, r5, r4
   8085e:	2b09      	cmp	r3, #9
   80860:	d8f3      	bhi.n	8084a <UnityPrintNumber+0xd2>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   80862:	4e28      	ldr	r6, [pc, #160]	; (80904 <UnityPrintNumber+0x18c>)
   80864:	4f29      	ldr	r7, [pc, #164]	; (8090c <UnityPrintNumber+0x194>)
   80866:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80908 <UnityPrintNumber+0x190>
   8086a:	6830      	ldr	r0, [r6, #0]
   8086c:	6882      	ldr	r2, [r0, #8]
   8086e:	6893      	ldr	r3, [r2, #8]
   80870:	3b01      	subs	r3, #1
   80872:	6093      	str	r3, [r2, #8]
   80874:	2b00      	cmp	r3, #0
   80876:	da29      	bge.n	808cc <UnityPrintNumber+0x154>
   80878:	6882      	ldr	r2, [r0, #8]
   8087a:	6891      	ldr	r1, [r2, #8]
   8087c:	6993      	ldr	r3, [r2, #24]
   8087e:	4299      	cmp	r1, r3
   80880:	db17      	blt.n	808b2 <UnityPrintNumber+0x13a>
   80882:	6811      	ldr	r1, [r2, #0]
   80884:	fbb5 f3f4 	udiv	r3, r5, r4
   80888:	fba7 0203 	umull	r0, r2, r7, r3
   8088c:	08d2      	lsrs	r2, r2, #3
   8088e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80892:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   80896:	3330      	adds	r3, #48	; 0x30
   80898:	700b      	strb	r3, [r1, #0]
   8089a:	6830      	ldr	r0, [r6, #0]
   8089c:	6882      	ldr	r2, [r0, #8]
   8089e:	6813      	ldr	r3, [r2, #0]
   808a0:	7819      	ldrb	r1, [r3, #0]
   808a2:	290a      	cmp	r1, #10
   808a4:	d002      	beq.n	808ac <UnityPrintNumber+0x134>
   808a6:	3301      	adds	r3, #1
   808a8:	6013      	str	r3, [r2, #0]
   808aa:	e021      	b.n	808f0 <UnityPrintNumber+0x178>
   808ac:	210a      	movs	r1, #10
   808ae:	47c0      	blx	r8
   808b0:	e01e      	b.n	808f0 <UnityPrintNumber+0x178>
   808b2:	fbb5 f3f4 	udiv	r3, r5, r4
   808b6:	fba7 e103 	umull	lr, r1, r7, r3
   808ba:	08c9      	lsrs	r1, r1, #3
   808bc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   808c0:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   808c4:	3130      	adds	r1, #48	; 0x30
   808c6:	b2c9      	uxtb	r1, r1
   808c8:	47c0      	blx	r8
   808ca:	e011      	b.n	808f0 <UnityPrintNumber+0x178>
   808cc:	6883      	ldr	r3, [r0, #8]
   808ce:	6819      	ldr	r1, [r3, #0]
   808d0:	fbb5 f3f4 	udiv	r3, r5, r4
   808d4:	fba7 0203 	umull	r0, r2, r7, r3
   808d8:	08d2      	lsrs	r2, r2, #3
   808da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   808de:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   808e2:	3330      	adds	r3, #48	; 0x30
   808e4:	700b      	strb	r3, [r1, #0]
   808e6:	6833      	ldr	r3, [r6, #0]
   808e8:	689b      	ldr	r3, [r3, #8]
   808ea:	681a      	ldr	r2, [r3, #0]
   808ec:	3201      	adds	r2, #1
   808ee:	601a      	str	r2, [r3, #0]
        divisor /= 10;
   808f0:	4b07      	ldr	r3, [pc, #28]	; (80910 <UnityPrintNumber+0x198>)
   808f2:	fb83 2304 	smull	r2, r3, r3, r4
   808f6:	17e4      	asrs	r4, r4, #31
   808f8:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
    }
    while (divisor > 0);
   808fc:	2c00      	cmp	r4, #0
   808fe:	dcb4      	bgt.n	8086a <UnityPrintNumber+0xf2>
}
   80900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80904:	20070008 	.word	0x20070008
   80908:	00082885 	.word	0x00082885
   8090c:	cccccccd 	.word	0xcccccccd
   80910:	66666667 	.word	0x66666667

00080914 <UnityPrintNumberHex>:
    while (divisor > 0);
}

//-----------------------------------------------
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
   80914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80918:	4606      	mov	r6, r0
   8091a:	460c      	mov	r4, r1
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
   8091c:	4b5e      	ldr	r3, [pc, #376]	; (80a98 <UnityPrintNumberHex+0x184>)
   8091e:	6818      	ldr	r0, [r3, #0]
   80920:	6882      	ldr	r2, [r0, #8]
   80922:	6893      	ldr	r3, [r2, #8]
   80924:	3b01      	subs	r3, #1
   80926:	6093      	str	r3, [r2, #8]
   80928:	2b00      	cmp	r3, #0
   8092a:	da19      	bge.n	80960 <UnityPrintNumberHex+0x4c>
   8092c:	6882      	ldr	r2, [r0, #8]
   8092e:	6891      	ldr	r1, [r2, #8]
   80930:	6993      	ldr	r3, [r2, #24]
   80932:	4299      	cmp	r1, r3
   80934:	db10      	blt.n	80958 <UnityPrintNumberHex+0x44>
   80936:	6813      	ldr	r3, [r2, #0]
   80938:	2230      	movs	r2, #48	; 0x30
   8093a:	701a      	strb	r2, [r3, #0]
   8093c:	4b56      	ldr	r3, [pc, #344]	; (80a98 <UnityPrintNumberHex+0x184>)
   8093e:	6818      	ldr	r0, [r3, #0]
   80940:	6882      	ldr	r2, [r0, #8]
   80942:	6813      	ldr	r3, [r2, #0]
   80944:	7819      	ldrb	r1, [r3, #0]
   80946:	290a      	cmp	r1, #10
   80948:	d002      	beq.n	80950 <UnityPrintNumberHex+0x3c>
   8094a:	3301      	adds	r3, #1
   8094c:	6013      	str	r3, [r2, #0]
   8094e:	e011      	b.n	80974 <UnityPrintNumberHex+0x60>
   80950:	210a      	movs	r1, #10
   80952:	4b52      	ldr	r3, [pc, #328]	; (80a9c <UnityPrintNumberHex+0x188>)
   80954:	4798      	blx	r3
   80956:	e00d      	b.n	80974 <UnityPrintNumberHex+0x60>
   80958:	2130      	movs	r1, #48	; 0x30
   8095a:	4b50      	ldr	r3, [pc, #320]	; (80a9c <UnityPrintNumberHex+0x188>)
   8095c:	4798      	blx	r3
   8095e:	e009      	b.n	80974 <UnityPrintNumberHex+0x60>
   80960:	6883      	ldr	r3, [r0, #8]
   80962:	681b      	ldr	r3, [r3, #0]
   80964:	2230      	movs	r2, #48	; 0x30
   80966:	701a      	strb	r2, [r3, #0]
   80968:	4b4b      	ldr	r3, [pc, #300]	; (80a98 <UnityPrintNumberHex+0x184>)
   8096a:	681b      	ldr	r3, [r3, #0]
   8096c:	689b      	ldr	r3, [r3, #8]
   8096e:	681a      	ldr	r2, [r3, #0]
   80970:	3201      	adds	r2, #1
   80972:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_CHAR('x');
   80974:	4b48      	ldr	r3, [pc, #288]	; (80a98 <UnityPrintNumberHex+0x184>)
   80976:	6818      	ldr	r0, [r3, #0]
   80978:	6882      	ldr	r2, [r0, #8]
   8097a:	6893      	ldr	r3, [r2, #8]
   8097c:	3b01      	subs	r3, #1
   8097e:	6093      	str	r3, [r2, #8]
   80980:	2b00      	cmp	r3, #0
   80982:	da1b      	bge.n	809bc <UnityPrintNumberHex+0xa8>
   80984:	6882      	ldr	r2, [r0, #8]
   80986:	6891      	ldr	r1, [r2, #8]
   80988:	6993      	ldr	r3, [r2, #24]
   8098a:	4299      	cmp	r1, r3
   8098c:	db10      	blt.n	809b0 <UnityPrintNumberHex+0x9c>
   8098e:	6813      	ldr	r3, [r2, #0]
   80990:	2278      	movs	r2, #120	; 0x78
   80992:	701a      	strb	r2, [r3, #0]
   80994:	4b40      	ldr	r3, [pc, #256]	; (80a98 <UnityPrintNumberHex+0x184>)
   80996:	6818      	ldr	r0, [r3, #0]
   80998:	6882      	ldr	r2, [r0, #8]
   8099a:	6813      	ldr	r3, [r2, #0]
   8099c:	7819      	ldrb	r1, [r3, #0]
   8099e:	290a      	cmp	r1, #10
   809a0:	d002      	beq.n	809a8 <UnityPrintNumberHex+0x94>
   809a2:	3301      	adds	r3, #1
   809a4:	6013      	str	r3, [r2, #0]
   809a6:	e006      	b.n	809b6 <UnityPrintNumberHex+0xa2>
   809a8:	210a      	movs	r1, #10
   809aa:	4b3c      	ldr	r3, [pc, #240]	; (80a9c <UnityPrintNumberHex+0x188>)
   809ac:	4798      	blx	r3
   809ae:	e002      	b.n	809b6 <UnityPrintNumberHex+0xa2>
   809b0:	2178      	movs	r1, #120	; 0x78
   809b2:	4b3a      	ldr	r3, [pc, #232]	; (80a9c <UnityPrintNumberHex+0x188>)
   809b4:	4798      	blx	r3

    while (nibbles > 0)
   809b6:	b964      	cbnz	r4, 809d2 <UnityPrintNumberHex+0xbe>
   809b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');
   809bc:	6883      	ldr	r3, [r0, #8]
   809be:	681b      	ldr	r3, [r3, #0]
   809c0:	2278      	movs	r2, #120	; 0x78
   809c2:	701a      	strb	r2, [r3, #0]
   809c4:	4b34      	ldr	r3, [pc, #208]	; (80a98 <UnityPrintNumberHex+0x184>)
   809c6:	681b      	ldr	r3, [r3, #0]
   809c8:	689b      	ldr	r3, [r3, #8]
   809ca:	681a      	ldr	r2, [r3, #0]
   809cc:	3201      	adds	r2, #1
   809ce:	601a      	str	r2, [r3, #0]
   809d0:	e7f1      	b.n	809b6 <UnityPrintNumberHex+0xa2>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   809d2:	4d31      	ldr	r5, [pc, #196]	; (80a98 <UnityPrintNumberHex+0x184>)
   809d4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80a9c <UnityPrintNumberHex+0x188>
   809d8:	f04f 080a 	mov.w	r8, #10
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
    {
        nibble = (number >> (--nibbles << 2)) & 0x0000000F;
   809dc:	3c01      	subs	r4, #1
   809de:	b2e4      	uxtb	r4, r4
   809e0:	00a3      	lsls	r3, r4, #2
   809e2:	fa26 f303 	lsr.w	r3, r6, r3
   809e6:	f003 030f 	and.w	r3, r3, #15
        if (nibble <= 9)
   809ea:	2b09      	cmp	r3, #9
   809ec:	d828      	bhi.n	80a40 <UnityPrintNumberHex+0x12c>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
   809ee:	6828      	ldr	r0, [r5, #0]
   809f0:	6881      	ldr	r1, [r0, #8]
   809f2:	688a      	ldr	r2, [r1, #8]
   809f4:	3a01      	subs	r2, #1
   809f6:	608a      	str	r2, [r1, #8]
   809f8:	2a00      	cmp	r2, #0
   809fa:	da17      	bge.n	80a2c <UnityPrintNumberHex+0x118>
   809fc:	6882      	ldr	r2, [r0, #8]
   809fe:	6891      	ldr	r1, [r2, #8]
   80a00:	6997      	ldr	r7, [r2, #24]
   80a02:	42b9      	cmp	r1, r7
   80a04:	db0e      	blt.n	80a24 <UnityPrintNumberHex+0x110>
   80a06:	6812      	ldr	r2, [r2, #0]
   80a08:	3330      	adds	r3, #48	; 0x30
   80a0a:	7013      	strb	r3, [r2, #0]
   80a0c:	6828      	ldr	r0, [r5, #0]
   80a0e:	6882      	ldr	r2, [r0, #8]
   80a10:	6813      	ldr	r3, [r2, #0]
   80a12:	7819      	ldrb	r1, [r3, #0]
   80a14:	290a      	cmp	r1, #10
   80a16:	d002      	beq.n	80a1e <UnityPrintNumberHex+0x10a>
   80a18:	3301      	adds	r3, #1
   80a1a:	6013      	str	r3, [r2, #0]
   80a1c:	e038      	b.n	80a90 <UnityPrintNumberHex+0x17c>
   80a1e:	4641      	mov	r1, r8
   80a20:	47c8      	blx	r9
   80a22:	e035      	b.n	80a90 <UnityPrintNumberHex+0x17c>
   80a24:	f103 0130 	add.w	r1, r3, #48	; 0x30
   80a28:	47c8      	blx	r9
   80a2a:	e031      	b.n	80a90 <UnityPrintNumberHex+0x17c>
   80a2c:	6882      	ldr	r2, [r0, #8]
   80a2e:	6812      	ldr	r2, [r2, #0]
   80a30:	3330      	adds	r3, #48	; 0x30
   80a32:	7013      	strb	r3, [r2, #0]
   80a34:	682b      	ldr	r3, [r5, #0]
   80a36:	689b      	ldr	r3, [r3, #8]
   80a38:	681a      	ldr	r2, [r3, #0]
   80a3a:	3201      	adds	r2, #1
   80a3c:	601a      	str	r2, [r3, #0]
   80a3e:	e027      	b.n	80a90 <UnityPrintNumberHex+0x17c>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   80a40:	6828      	ldr	r0, [r5, #0]
   80a42:	6881      	ldr	r1, [r0, #8]
   80a44:	688a      	ldr	r2, [r1, #8]
   80a46:	3a01      	subs	r2, #1
   80a48:	608a      	str	r2, [r1, #8]
   80a4a:	2a00      	cmp	r2, #0
   80a4c:	da17      	bge.n	80a7e <UnityPrintNumberHex+0x16a>
   80a4e:	6882      	ldr	r2, [r0, #8]
   80a50:	6891      	ldr	r1, [r2, #8]
   80a52:	6997      	ldr	r7, [r2, #24]
   80a54:	42b9      	cmp	r1, r7
   80a56:	db0e      	blt.n	80a76 <UnityPrintNumberHex+0x162>
   80a58:	6812      	ldr	r2, [r2, #0]
   80a5a:	3337      	adds	r3, #55	; 0x37
   80a5c:	7013      	strb	r3, [r2, #0]
   80a5e:	6828      	ldr	r0, [r5, #0]
   80a60:	6882      	ldr	r2, [r0, #8]
   80a62:	6813      	ldr	r3, [r2, #0]
   80a64:	7819      	ldrb	r1, [r3, #0]
   80a66:	290a      	cmp	r1, #10
   80a68:	d002      	beq.n	80a70 <UnityPrintNumberHex+0x15c>
   80a6a:	3301      	adds	r3, #1
   80a6c:	6013      	str	r3, [r2, #0]
   80a6e:	e00f      	b.n	80a90 <UnityPrintNumberHex+0x17c>
   80a70:	4641      	mov	r1, r8
   80a72:	47c8      	blx	r9
   80a74:	e00c      	b.n	80a90 <UnityPrintNumberHex+0x17c>
   80a76:	f103 0137 	add.w	r1, r3, #55	; 0x37
   80a7a:	47c8      	blx	r9
   80a7c:	e008      	b.n	80a90 <UnityPrintNumberHex+0x17c>
   80a7e:	6882      	ldr	r2, [r0, #8]
   80a80:	6812      	ldr	r2, [r2, #0]
   80a82:	3337      	adds	r3, #55	; 0x37
   80a84:	7013      	strb	r3, [r2, #0]
   80a86:	682b      	ldr	r3, [r5, #0]
   80a88:	689b      	ldr	r3, [r3, #8]
   80a8a:	681a      	ldr	r2, [r3, #0]
   80a8c:	3201      	adds	r2, #1
   80a8e:	601a      	str	r2, [r3, #0]
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
   80a90:	2c00      	cmp	r4, #0
   80a92:	d1a3      	bne.n	809dc <UnityPrintNumberHex+0xc8>
   80a94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80a98:	20070008 	.word	0x20070008
   80a9c:	00082885 	.word	0x00082885

00080aa0 <UnityPrint>:
//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
{
   80aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const char* pch = string;

    if (pch != NULL)
   80aa2:	2800      	cmp	r0, #0
   80aa4:	f000 810a 	beq.w	80cbc <UnityPrint+0x21c>
    {
        while (*pch)
   80aa8:	7803      	ldrb	r3, [r0, #0]
   80aaa:	2b00      	cmp	r3, #0
   80aac:	f000 8106 	beq.w	80cbc <UnityPrint+0x21c>
   80ab0:	1c44      	adds	r4, r0, #1
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80ab2:	4d83      	ldr	r5, [pc, #524]	; (80cc0 <UnityPrint+0x220>)
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   80ab4:	4e83      	ldr	r6, [pc, #524]	; (80cc4 <UnityPrint+0x224>)
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80ab6:	4f84      	ldr	r7, [pc, #528]	; (80cc8 <UnityPrint+0x228>)
    if (pch != NULL)
    {
        while (*pch)
        {
            // printable characters plus CR & LF are printed
            if ((*pch <= 126) && (*pch >= 32))
   80ab8:	f1a3 0220 	sub.w	r2, r3, #32
   80abc:	b2d2      	uxtb	r2, r2
   80abe:	2a5e      	cmp	r2, #94	; 0x5e
   80ac0:	d82a      	bhi.n	80b18 <UnityPrint+0x78>
            {
                UNITY_OUTPUT_CHAR(*pch);
   80ac2:	6828      	ldr	r0, [r5, #0]
   80ac4:	6882      	ldr	r2, [r0, #8]
   80ac6:	6893      	ldr	r3, [r2, #8]
   80ac8:	3b01      	subs	r3, #1
   80aca:	6093      	str	r3, [r2, #8]
   80acc:	2b00      	cmp	r3, #0
   80ace:	da18      	bge.n	80b02 <UnityPrint+0x62>
   80ad0:	6882      	ldr	r2, [r0, #8]
   80ad2:	6891      	ldr	r1, [r2, #8]
   80ad4:	6993      	ldr	r3, [r2, #24]
   80ad6:	4299      	cmp	r1, r3
   80ad8:	db0f      	blt.n	80afa <UnityPrint+0x5a>
   80ada:	6813      	ldr	r3, [r2, #0]
   80adc:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   80ae0:	701a      	strb	r2, [r3, #0]
   80ae2:	6828      	ldr	r0, [r5, #0]
   80ae4:	6882      	ldr	r2, [r0, #8]
   80ae6:	6813      	ldr	r3, [r2, #0]
   80ae8:	7819      	ldrb	r1, [r3, #0]
   80aea:	290a      	cmp	r1, #10
   80aec:	d002      	beq.n	80af4 <UnityPrint+0x54>
   80aee:	3301      	adds	r3, #1
   80af0:	6013      	str	r3, [r2, #0]
   80af2:	e0de      	b.n	80cb2 <UnityPrint+0x212>
   80af4:	210a      	movs	r1, #10
   80af6:	47b8      	blx	r7
   80af8:	e0db      	b.n	80cb2 <UnityPrint+0x212>
   80afa:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   80afe:	47b8      	blx	r7
   80b00:	e0d7      	b.n	80cb2 <UnityPrint+0x212>
   80b02:	6883      	ldr	r3, [r0, #8]
   80b04:	681b      	ldr	r3, [r3, #0]
   80b06:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   80b0a:	701a      	strb	r2, [r3, #0]
   80b0c:	682b      	ldr	r3, [r5, #0]
   80b0e:	689b      	ldr	r3, [r3, #8]
   80b10:	681a      	ldr	r2, [r3, #0]
   80b12:	3201      	adds	r2, #1
   80b14:	601a      	str	r2, [r3, #0]
   80b16:	e0cc      	b.n	80cb2 <UnityPrint+0x212>
            }
            //write escaped carriage returns
            else if (*pch == 13)
   80b18:	2b0d      	cmp	r3, #13
   80b1a:	d14e      	bne.n	80bba <UnityPrint+0x11a>
            {
                UNITY_OUTPUT_CHAR('\\');
   80b1c:	6828      	ldr	r0, [r5, #0]
   80b1e:	6882      	ldr	r2, [r0, #8]
   80b20:	6893      	ldr	r3, [r2, #8]
   80b22:	3b01      	subs	r3, #1
   80b24:	6093      	str	r3, [r2, #8]
   80b26:	2b00      	cmp	r3, #0
   80b28:	da16      	bge.n	80b58 <UnityPrint+0xb8>
   80b2a:	6882      	ldr	r2, [r0, #8]
   80b2c:	6891      	ldr	r1, [r2, #8]
   80b2e:	6993      	ldr	r3, [r2, #24]
   80b30:	4299      	cmp	r1, r3
   80b32:	db0e      	blt.n	80b52 <UnityPrint+0xb2>
   80b34:	6813      	ldr	r3, [r2, #0]
   80b36:	225c      	movs	r2, #92	; 0x5c
   80b38:	701a      	strb	r2, [r3, #0]
   80b3a:	6828      	ldr	r0, [r5, #0]
   80b3c:	6882      	ldr	r2, [r0, #8]
   80b3e:	6813      	ldr	r3, [r2, #0]
   80b40:	7819      	ldrb	r1, [r3, #0]
   80b42:	290a      	cmp	r1, #10
   80b44:	d002      	beq.n	80b4c <UnityPrint+0xac>
   80b46:	3301      	adds	r3, #1
   80b48:	6013      	str	r3, [r2, #0]
   80b4a:	e00e      	b.n	80b6a <UnityPrint+0xca>
   80b4c:	210a      	movs	r1, #10
   80b4e:	47b8      	blx	r7
   80b50:	e00b      	b.n	80b6a <UnityPrint+0xca>
   80b52:	215c      	movs	r1, #92	; 0x5c
   80b54:	47b8      	blx	r7
   80b56:	e008      	b.n	80b6a <UnityPrint+0xca>
   80b58:	6883      	ldr	r3, [r0, #8]
   80b5a:	681b      	ldr	r3, [r3, #0]
   80b5c:	225c      	movs	r2, #92	; 0x5c
   80b5e:	701a      	strb	r2, [r3, #0]
   80b60:	682b      	ldr	r3, [r5, #0]
   80b62:	689b      	ldr	r3, [r3, #8]
   80b64:	681a      	ldr	r2, [r3, #0]
   80b66:	3201      	adds	r2, #1
   80b68:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('r');
   80b6a:	6828      	ldr	r0, [r5, #0]
   80b6c:	6882      	ldr	r2, [r0, #8]
   80b6e:	6893      	ldr	r3, [r2, #8]
   80b70:	3b01      	subs	r3, #1
   80b72:	6093      	str	r3, [r2, #8]
   80b74:	2b00      	cmp	r3, #0
   80b76:	da16      	bge.n	80ba6 <UnityPrint+0x106>
   80b78:	6882      	ldr	r2, [r0, #8]
   80b7a:	6891      	ldr	r1, [r2, #8]
   80b7c:	6993      	ldr	r3, [r2, #24]
   80b7e:	4299      	cmp	r1, r3
   80b80:	db0e      	blt.n	80ba0 <UnityPrint+0x100>
   80b82:	6813      	ldr	r3, [r2, #0]
   80b84:	2272      	movs	r2, #114	; 0x72
   80b86:	701a      	strb	r2, [r3, #0]
   80b88:	6828      	ldr	r0, [r5, #0]
   80b8a:	6882      	ldr	r2, [r0, #8]
   80b8c:	6813      	ldr	r3, [r2, #0]
   80b8e:	7819      	ldrb	r1, [r3, #0]
   80b90:	290a      	cmp	r1, #10
   80b92:	d002      	beq.n	80b9a <UnityPrint+0xfa>
   80b94:	3301      	adds	r3, #1
   80b96:	6013      	str	r3, [r2, #0]
   80b98:	e08b      	b.n	80cb2 <UnityPrint+0x212>
   80b9a:	210a      	movs	r1, #10
   80b9c:	47b8      	blx	r7
   80b9e:	e088      	b.n	80cb2 <UnityPrint+0x212>
   80ba0:	2172      	movs	r1, #114	; 0x72
   80ba2:	47b8      	blx	r7
   80ba4:	e085      	b.n	80cb2 <UnityPrint+0x212>
   80ba6:	6883      	ldr	r3, [r0, #8]
   80ba8:	681b      	ldr	r3, [r3, #0]
   80baa:	2272      	movs	r2, #114	; 0x72
   80bac:	701a      	strb	r2, [r3, #0]
   80bae:	682b      	ldr	r3, [r5, #0]
   80bb0:	689b      	ldr	r3, [r3, #8]
   80bb2:	681a      	ldr	r2, [r3, #0]
   80bb4:	3201      	adds	r2, #1
   80bb6:	601a      	str	r2, [r3, #0]
   80bb8:	e07b      	b.n	80cb2 <UnityPrint+0x212>
            }
            //write escaped line feeds
            else if (*pch == 10)
   80bba:	2b0a      	cmp	r3, #10
   80bbc:	d14e      	bne.n	80c5c <UnityPrint+0x1bc>
            {
                UNITY_OUTPUT_CHAR('\\');
   80bbe:	6828      	ldr	r0, [r5, #0]
   80bc0:	6882      	ldr	r2, [r0, #8]
   80bc2:	6893      	ldr	r3, [r2, #8]
   80bc4:	3b01      	subs	r3, #1
   80bc6:	6093      	str	r3, [r2, #8]
   80bc8:	2b00      	cmp	r3, #0
   80bca:	da16      	bge.n	80bfa <UnityPrint+0x15a>
   80bcc:	6882      	ldr	r2, [r0, #8]
   80bce:	6891      	ldr	r1, [r2, #8]
   80bd0:	6993      	ldr	r3, [r2, #24]
   80bd2:	4299      	cmp	r1, r3
   80bd4:	db0e      	blt.n	80bf4 <UnityPrint+0x154>
   80bd6:	6813      	ldr	r3, [r2, #0]
   80bd8:	225c      	movs	r2, #92	; 0x5c
   80bda:	701a      	strb	r2, [r3, #0]
   80bdc:	6828      	ldr	r0, [r5, #0]
   80bde:	6882      	ldr	r2, [r0, #8]
   80be0:	6813      	ldr	r3, [r2, #0]
   80be2:	7819      	ldrb	r1, [r3, #0]
   80be4:	290a      	cmp	r1, #10
   80be6:	d002      	beq.n	80bee <UnityPrint+0x14e>
   80be8:	3301      	adds	r3, #1
   80bea:	6013      	str	r3, [r2, #0]
   80bec:	e00e      	b.n	80c0c <UnityPrint+0x16c>
   80bee:	210a      	movs	r1, #10
   80bf0:	47b8      	blx	r7
   80bf2:	e00b      	b.n	80c0c <UnityPrint+0x16c>
   80bf4:	215c      	movs	r1, #92	; 0x5c
   80bf6:	47b8      	blx	r7
   80bf8:	e008      	b.n	80c0c <UnityPrint+0x16c>
   80bfa:	6883      	ldr	r3, [r0, #8]
   80bfc:	681b      	ldr	r3, [r3, #0]
   80bfe:	225c      	movs	r2, #92	; 0x5c
   80c00:	701a      	strb	r2, [r3, #0]
   80c02:	682b      	ldr	r3, [r5, #0]
   80c04:	689b      	ldr	r3, [r3, #8]
   80c06:	681a      	ldr	r2, [r3, #0]
   80c08:	3201      	adds	r2, #1
   80c0a:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('n');
   80c0c:	6828      	ldr	r0, [r5, #0]
   80c0e:	6882      	ldr	r2, [r0, #8]
   80c10:	6893      	ldr	r3, [r2, #8]
   80c12:	3b01      	subs	r3, #1
   80c14:	6093      	str	r3, [r2, #8]
   80c16:	2b00      	cmp	r3, #0
   80c18:	da16      	bge.n	80c48 <UnityPrint+0x1a8>
   80c1a:	6882      	ldr	r2, [r0, #8]
   80c1c:	6891      	ldr	r1, [r2, #8]
   80c1e:	6993      	ldr	r3, [r2, #24]
   80c20:	4299      	cmp	r1, r3
   80c22:	db0e      	blt.n	80c42 <UnityPrint+0x1a2>
   80c24:	6813      	ldr	r3, [r2, #0]
   80c26:	226e      	movs	r2, #110	; 0x6e
   80c28:	701a      	strb	r2, [r3, #0]
   80c2a:	6828      	ldr	r0, [r5, #0]
   80c2c:	6882      	ldr	r2, [r0, #8]
   80c2e:	6813      	ldr	r3, [r2, #0]
   80c30:	7819      	ldrb	r1, [r3, #0]
   80c32:	290a      	cmp	r1, #10
   80c34:	d002      	beq.n	80c3c <UnityPrint+0x19c>
   80c36:	3301      	adds	r3, #1
   80c38:	6013      	str	r3, [r2, #0]
   80c3a:	e03a      	b.n	80cb2 <UnityPrint+0x212>
   80c3c:	210a      	movs	r1, #10
   80c3e:	47b8      	blx	r7
   80c40:	e037      	b.n	80cb2 <UnityPrint+0x212>
   80c42:	216e      	movs	r1, #110	; 0x6e
   80c44:	47b8      	blx	r7
   80c46:	e034      	b.n	80cb2 <UnityPrint+0x212>
   80c48:	6883      	ldr	r3, [r0, #8]
   80c4a:	681b      	ldr	r3, [r3, #0]
   80c4c:	226e      	movs	r2, #110	; 0x6e
   80c4e:	701a      	strb	r2, [r3, #0]
   80c50:	682b      	ldr	r3, [r5, #0]
   80c52:	689b      	ldr	r3, [r3, #8]
   80c54:	681a      	ldr	r2, [r3, #0]
   80c56:	3201      	adds	r2, #1
   80c58:	601a      	str	r2, [r3, #0]
   80c5a:	e02a      	b.n	80cb2 <UnityPrint+0x212>
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80c5c:	6828      	ldr	r0, [r5, #0]
   80c5e:	6882      	ldr	r2, [r0, #8]
   80c60:	6893      	ldr	r3, [r2, #8]
   80c62:	3b01      	subs	r3, #1
   80c64:	6093      	str	r3, [r2, #8]
   80c66:	2b00      	cmp	r3, #0
   80c68:	da16      	bge.n	80c98 <UnityPrint+0x1f8>
   80c6a:	6882      	ldr	r2, [r0, #8]
   80c6c:	6891      	ldr	r1, [r2, #8]
   80c6e:	6993      	ldr	r3, [r2, #24]
   80c70:	4299      	cmp	r1, r3
   80c72:	db0e      	blt.n	80c92 <UnityPrint+0x1f2>
   80c74:	6813      	ldr	r3, [r2, #0]
   80c76:	225c      	movs	r2, #92	; 0x5c
   80c78:	701a      	strb	r2, [r3, #0]
   80c7a:	6828      	ldr	r0, [r5, #0]
   80c7c:	6882      	ldr	r2, [r0, #8]
   80c7e:	6813      	ldr	r3, [r2, #0]
   80c80:	7819      	ldrb	r1, [r3, #0]
   80c82:	290a      	cmp	r1, #10
   80c84:	d002      	beq.n	80c8c <UnityPrint+0x1ec>
   80c86:	3301      	adds	r3, #1
   80c88:	6013      	str	r3, [r2, #0]
   80c8a:	e00e      	b.n	80caa <UnityPrint+0x20a>
   80c8c:	210a      	movs	r1, #10
   80c8e:	47b8      	blx	r7
   80c90:	e00b      	b.n	80caa <UnityPrint+0x20a>
   80c92:	215c      	movs	r1, #92	; 0x5c
   80c94:	47b8      	blx	r7
   80c96:	e008      	b.n	80caa <UnityPrint+0x20a>
   80c98:	6883      	ldr	r3, [r0, #8]
   80c9a:	681b      	ldr	r3, [r3, #0]
   80c9c:	225c      	movs	r2, #92	; 0x5c
   80c9e:	701a      	strb	r2, [r3, #0]
   80ca0:	682b      	ldr	r3, [r5, #0]
   80ca2:	689b      	ldr	r3, [r3, #8]
   80ca4:	681a      	ldr	r2, [r3, #0]
   80ca6:	3201      	adds	r2, #1
   80ca8:	601a      	str	r2, [r3, #0]
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   80caa:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   80cae:	2102      	movs	r1, #2
   80cb0:	47b0      	blx	r6
{
    const char* pch = string;

    if (pch != NULL)
    {
        while (*pch)
   80cb2:	f814 3b01 	ldrb.w	r3, [r4], #1
   80cb6:	2b00      	cmp	r3, #0
   80cb8:	f47f aefe 	bne.w	80ab8 <UnityPrint+0x18>
   80cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80cbe:	bf00      	nop
   80cc0:	20070008 	.word	0x20070008
   80cc4:	00080915 	.word	0x00080915
   80cc8:	00082885 	.word	0x00082885

00080ccc <UnityTestResultsBegin>:
    UnityPrint(UnityStrOk);
}

//-----------------------------------------------
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
   80ccc:	b538      	push	{r3, r4, r5, lr}
   80cce:	460d      	mov	r5, r1
    UnityPrint(file);
   80cd0:	4b46      	ldr	r3, [pc, #280]	; (80dec <UnityTestResultsBegin+0x120>)
   80cd2:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80cd4:	4b46      	ldr	r3, [pc, #280]	; (80df0 <UnityTestResultsBegin+0x124>)
   80cd6:	6818      	ldr	r0, [r3, #0]
   80cd8:	6884      	ldr	r4, [r0, #8]
   80cda:	68a2      	ldr	r2, [r4, #8]
   80cdc:	3a01      	subs	r2, #1
   80cde:	60a2      	str	r2, [r4, #8]
   80ce0:	2a00      	cmp	r2, #0
   80ce2:	da19      	bge.n	80d18 <UnityTestResultsBegin+0x4c>
   80ce4:	6882      	ldr	r2, [r0, #8]
   80ce6:	6893      	ldr	r3, [r2, #8]
   80ce8:	6991      	ldr	r1, [r2, #24]
   80cea:	428b      	cmp	r3, r1
   80cec:	db10      	blt.n	80d10 <UnityTestResultsBegin+0x44>
   80cee:	6813      	ldr	r3, [r2, #0]
   80cf0:	223a      	movs	r2, #58	; 0x3a
   80cf2:	701a      	strb	r2, [r3, #0]
   80cf4:	4b3e      	ldr	r3, [pc, #248]	; (80df0 <UnityTestResultsBegin+0x124>)
   80cf6:	6818      	ldr	r0, [r3, #0]
   80cf8:	6882      	ldr	r2, [r0, #8]
   80cfa:	6813      	ldr	r3, [r2, #0]
   80cfc:	7819      	ldrb	r1, [r3, #0]
   80cfe:	290a      	cmp	r1, #10
   80d00:	d002      	beq.n	80d08 <UnityTestResultsBegin+0x3c>
   80d02:	3301      	adds	r3, #1
   80d04:	6013      	str	r3, [r2, #0]
   80d06:	e011      	b.n	80d2c <UnityTestResultsBegin+0x60>
   80d08:	210a      	movs	r1, #10
   80d0a:	4b3a      	ldr	r3, [pc, #232]	; (80df4 <UnityTestResultsBegin+0x128>)
   80d0c:	4798      	blx	r3
   80d0e:	e00d      	b.n	80d2c <UnityTestResultsBegin+0x60>
   80d10:	213a      	movs	r1, #58	; 0x3a
   80d12:	4b38      	ldr	r3, [pc, #224]	; (80df4 <UnityTestResultsBegin+0x128>)
   80d14:	4798      	blx	r3
   80d16:	e009      	b.n	80d2c <UnityTestResultsBegin+0x60>
   80d18:	6883      	ldr	r3, [r0, #8]
   80d1a:	681b      	ldr	r3, [r3, #0]
   80d1c:	223a      	movs	r2, #58	; 0x3a
   80d1e:	701a      	strb	r2, [r3, #0]
   80d20:	4b33      	ldr	r3, [pc, #204]	; (80df0 <UnityTestResultsBegin+0x124>)
   80d22:	681b      	ldr	r3, [r3, #0]
   80d24:	689b      	ldr	r3, [r3, #8]
   80d26:	681a      	ldr	r2, [r3, #0]
   80d28:	3201      	adds	r2, #1
   80d2a:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)line);
   80d2c:	4628      	mov	r0, r5
   80d2e:	4b32      	ldr	r3, [pc, #200]	; (80df8 <UnityTestResultsBegin+0x12c>)
   80d30:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80d32:	4b2f      	ldr	r3, [pc, #188]	; (80df0 <UnityTestResultsBegin+0x124>)
   80d34:	6818      	ldr	r0, [r3, #0]
   80d36:	6882      	ldr	r2, [r0, #8]
   80d38:	6893      	ldr	r3, [r2, #8]
   80d3a:	3b01      	subs	r3, #1
   80d3c:	6093      	str	r3, [r2, #8]
   80d3e:	2b00      	cmp	r3, #0
   80d40:	da19      	bge.n	80d76 <UnityTestResultsBegin+0xaa>
   80d42:	6882      	ldr	r2, [r0, #8]
   80d44:	6891      	ldr	r1, [r2, #8]
   80d46:	6993      	ldr	r3, [r2, #24]
   80d48:	4299      	cmp	r1, r3
   80d4a:	db10      	blt.n	80d6e <UnityTestResultsBegin+0xa2>
   80d4c:	6813      	ldr	r3, [r2, #0]
   80d4e:	223a      	movs	r2, #58	; 0x3a
   80d50:	701a      	strb	r2, [r3, #0]
   80d52:	4b27      	ldr	r3, [pc, #156]	; (80df0 <UnityTestResultsBegin+0x124>)
   80d54:	6818      	ldr	r0, [r3, #0]
   80d56:	6882      	ldr	r2, [r0, #8]
   80d58:	6813      	ldr	r3, [r2, #0]
   80d5a:	7819      	ldrb	r1, [r3, #0]
   80d5c:	290a      	cmp	r1, #10
   80d5e:	d002      	beq.n	80d66 <UnityTestResultsBegin+0x9a>
   80d60:	3301      	adds	r3, #1
   80d62:	6013      	str	r3, [r2, #0]
   80d64:	e011      	b.n	80d8a <UnityTestResultsBegin+0xbe>
   80d66:	210a      	movs	r1, #10
   80d68:	4b22      	ldr	r3, [pc, #136]	; (80df4 <UnityTestResultsBegin+0x128>)
   80d6a:	4798      	blx	r3
   80d6c:	e00d      	b.n	80d8a <UnityTestResultsBegin+0xbe>
   80d6e:	213a      	movs	r1, #58	; 0x3a
   80d70:	4b20      	ldr	r3, [pc, #128]	; (80df4 <UnityTestResultsBegin+0x128>)
   80d72:	4798      	blx	r3
   80d74:	e009      	b.n	80d8a <UnityTestResultsBegin+0xbe>
   80d76:	6883      	ldr	r3, [r0, #8]
   80d78:	681b      	ldr	r3, [r3, #0]
   80d7a:	223a      	movs	r2, #58	; 0x3a
   80d7c:	701a      	strb	r2, [r3, #0]
   80d7e:	4b1c      	ldr	r3, [pc, #112]	; (80df0 <UnityTestResultsBegin+0x124>)
   80d80:	681b      	ldr	r3, [r3, #0]
   80d82:	689b      	ldr	r3, [r3, #8]
   80d84:	681a      	ldr	r2, [r3, #0]
   80d86:	3201      	adds	r2, #1
   80d88:	601a      	str	r2, [r3, #0]
    UnityPrint(Unity.CurrentTestName);
   80d8a:	4b1c      	ldr	r3, [pc, #112]	; (80dfc <UnityTestResultsBegin+0x130>)
   80d8c:	6858      	ldr	r0, [r3, #4]
   80d8e:	4b17      	ldr	r3, [pc, #92]	; (80dec <UnityTestResultsBegin+0x120>)
   80d90:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80d92:	4b17      	ldr	r3, [pc, #92]	; (80df0 <UnityTestResultsBegin+0x124>)
   80d94:	6818      	ldr	r0, [r3, #0]
   80d96:	6882      	ldr	r2, [r0, #8]
   80d98:	6893      	ldr	r3, [r2, #8]
   80d9a:	3b01      	subs	r3, #1
   80d9c:	6093      	str	r3, [r2, #8]
   80d9e:	2b00      	cmp	r3, #0
   80da0:	da19      	bge.n	80dd6 <UnityTestResultsBegin+0x10a>
   80da2:	6882      	ldr	r2, [r0, #8]
   80da4:	6891      	ldr	r1, [r2, #8]
   80da6:	6993      	ldr	r3, [r2, #24]
   80da8:	4299      	cmp	r1, r3
   80daa:	db10      	blt.n	80dce <UnityTestResultsBegin+0x102>
   80dac:	6813      	ldr	r3, [r2, #0]
   80dae:	223a      	movs	r2, #58	; 0x3a
   80db0:	701a      	strb	r2, [r3, #0]
   80db2:	4b0f      	ldr	r3, [pc, #60]	; (80df0 <UnityTestResultsBegin+0x124>)
   80db4:	6818      	ldr	r0, [r3, #0]
   80db6:	6882      	ldr	r2, [r0, #8]
   80db8:	6813      	ldr	r3, [r2, #0]
   80dba:	7819      	ldrb	r1, [r3, #0]
   80dbc:	290a      	cmp	r1, #10
   80dbe:	d002      	beq.n	80dc6 <UnityTestResultsBegin+0xfa>
   80dc0:	3301      	adds	r3, #1
   80dc2:	6013      	str	r3, [r2, #0]
   80dc4:	bd38      	pop	{r3, r4, r5, pc}
   80dc6:	210a      	movs	r1, #10
   80dc8:	4b0a      	ldr	r3, [pc, #40]	; (80df4 <UnityTestResultsBegin+0x128>)
   80dca:	4798      	blx	r3
   80dcc:	bd38      	pop	{r3, r4, r5, pc}
   80dce:	213a      	movs	r1, #58	; 0x3a
   80dd0:	4b08      	ldr	r3, [pc, #32]	; (80df4 <UnityTestResultsBegin+0x128>)
   80dd2:	4798      	blx	r3
   80dd4:	bd38      	pop	{r3, r4, r5, pc}
   80dd6:	6883      	ldr	r3, [r0, #8]
   80dd8:	681b      	ldr	r3, [r3, #0]
   80dda:	223a      	movs	r2, #58	; 0x3a
   80ddc:	701a      	strb	r2, [r3, #0]
   80dde:	4b04      	ldr	r3, [pc, #16]	; (80df0 <UnityTestResultsBegin+0x124>)
   80de0:	681b      	ldr	r3, [r3, #0]
   80de2:	689b      	ldr	r3, [r3, #8]
   80de4:	681a      	ldr	r2, [r3, #0]
   80de6:	3201      	adds	r2, #1
   80de8:	601a      	str	r2, [r3, #0]
   80dea:	bd38      	pop	{r3, r4, r5, pc}
   80dec:	00080aa1 	.word	0x00080aa1
   80df0:	20070008 	.word	0x20070008
   80df4:	00082885 	.word	0x00082885
   80df8:	00080779 	.word	0x00080779
   80dfc:	20070a20 	.word	0x20070a20

00080e00 <UnityTestResultsFailBegin>:
}

//-----------------------------------------------
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
   80e00:	b508      	push	{r3, lr}
   80e02:	4601      	mov	r1, r0
    UnityTestResultsBegin(Unity.TestFile, line);
   80e04:	4b19      	ldr	r3, [pc, #100]	; (80e6c <UnityTestResultsFailBegin+0x6c>)
   80e06:	6818      	ldr	r0, [r3, #0]
   80e08:	4b19      	ldr	r3, [pc, #100]	; (80e70 <UnityTestResultsFailBegin+0x70>)
   80e0a:	4798      	blx	r3
    UnityPrint(UnityStrFail);
   80e0c:	4819      	ldr	r0, [pc, #100]	; (80e74 <UnityTestResultsFailBegin+0x74>)
   80e0e:	4b1a      	ldr	r3, [pc, #104]	; (80e78 <UnityTestResultsFailBegin+0x78>)
   80e10:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80e12:	4b1a      	ldr	r3, [pc, #104]	; (80e7c <UnityTestResultsFailBegin+0x7c>)
   80e14:	6818      	ldr	r0, [r3, #0]
   80e16:	6882      	ldr	r2, [r0, #8]
   80e18:	6893      	ldr	r3, [r2, #8]
   80e1a:	3b01      	subs	r3, #1
   80e1c:	6093      	str	r3, [r2, #8]
   80e1e:	2b00      	cmp	r3, #0
   80e20:	da19      	bge.n	80e56 <UnityTestResultsFailBegin+0x56>
   80e22:	6882      	ldr	r2, [r0, #8]
   80e24:	6891      	ldr	r1, [r2, #8]
   80e26:	6993      	ldr	r3, [r2, #24]
   80e28:	4299      	cmp	r1, r3
   80e2a:	db10      	blt.n	80e4e <UnityTestResultsFailBegin+0x4e>
   80e2c:	6813      	ldr	r3, [r2, #0]
   80e2e:	223a      	movs	r2, #58	; 0x3a
   80e30:	701a      	strb	r2, [r3, #0]
   80e32:	4b12      	ldr	r3, [pc, #72]	; (80e7c <UnityTestResultsFailBegin+0x7c>)
   80e34:	6818      	ldr	r0, [r3, #0]
   80e36:	6882      	ldr	r2, [r0, #8]
   80e38:	6813      	ldr	r3, [r2, #0]
   80e3a:	7819      	ldrb	r1, [r3, #0]
   80e3c:	290a      	cmp	r1, #10
   80e3e:	d002      	beq.n	80e46 <UnityTestResultsFailBegin+0x46>
   80e40:	3301      	adds	r3, #1
   80e42:	6013      	str	r3, [r2, #0]
   80e44:	bd08      	pop	{r3, pc}
   80e46:	210a      	movs	r1, #10
   80e48:	4b0d      	ldr	r3, [pc, #52]	; (80e80 <UnityTestResultsFailBegin+0x80>)
   80e4a:	4798      	blx	r3
   80e4c:	bd08      	pop	{r3, pc}
   80e4e:	213a      	movs	r1, #58	; 0x3a
   80e50:	4b0b      	ldr	r3, [pc, #44]	; (80e80 <UnityTestResultsFailBegin+0x80>)
   80e52:	4798      	blx	r3
   80e54:	bd08      	pop	{r3, pc}
   80e56:	6883      	ldr	r3, [r0, #8]
   80e58:	681b      	ldr	r3, [r3, #0]
   80e5a:	223a      	movs	r2, #58	; 0x3a
   80e5c:	701a      	strb	r2, [r3, #0]
   80e5e:	4b07      	ldr	r3, [pc, #28]	; (80e7c <UnityTestResultsFailBegin+0x7c>)
   80e60:	681b      	ldr	r3, [r3, #0]
   80e62:	689b      	ldr	r3, [r3, #8]
   80e64:	681a      	ldr	r2, [r3, #0]
   80e66:	3201      	adds	r2, #1
   80e68:	601a      	str	r2, [r3, #0]
   80e6a:	bd08      	pop	{r3, pc}
   80e6c:	20070a20 	.word	0x20070a20
   80e70:	00080ccd 	.word	0x00080ccd
   80e74:	00084664 	.word	0x00084664
   80e78:	00080aa1 	.word	0x00080aa1
   80e7c:	20070008 	.word	0x20070008
   80e80:	00082885 	.word	0x00082885

00080e84 <UnityAddMsgIfSpecified>:
    UNITY_PRINT_EOL;
}

//-----------------------------------------------
static void UnityAddMsgIfSpecified(const char* msg)
{
   80e84:	b538      	push	{r3, r4, r5, lr}
    if (msg)
   80e86:	4605      	mov	r5, r0
   80e88:	b120      	cbz	r0, 80e94 <UnityAddMsgIfSpecified+0x10>
    {
        UnityPrint(UnityStrSpacer);
   80e8a:	4803      	ldr	r0, [pc, #12]	; (80e98 <UnityAddMsgIfSpecified+0x14>)
   80e8c:	4c03      	ldr	r4, [pc, #12]	; (80e9c <UnityAddMsgIfSpecified+0x18>)
   80e8e:	47a0      	blx	r4
        UnityPrint(msg);
   80e90:	4628      	mov	r0, r5
   80e92:	47a0      	blx	r4
   80e94:	bd38      	pop	{r3, r4, r5, pc}
   80e96:	bf00      	nop
   80e98:	00084658 	.word	0x00084658
   80e9c:	00080aa1 	.word	0x00080aa1

00080ea0 <UnityPrintMask>:
    }
}

//-----------------------------------------------
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
   80ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80ea4:	4607      	mov	r7, r0
   80ea6:	4688      	mov	r8, r1
   80ea8:	2520      	movs	r5, #32
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
   80eaa:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
                UNITY_OUTPUT_CHAR('0');
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   80eae:	4e43      	ldr	r6, [pc, #268]	; (80fbc <UnityPrintMask+0x11c>)
   80eb0:	f04f 0958 	mov.w	r9, #88	; 0x58
   80eb4:	f8df a108 	ldr.w	sl, [pc, #264]	; 80fc0 <UnityPrintMask+0x120>
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
    {
        if (current_bit & mask)
   80eb8:	423c      	tst	r4, r7
   80eba:	d052      	beq.n	80f62 <UnityPrintMask+0xc2>
        {
            if (current_bit & number)
   80ebc:	ea14 0f08 	tst.w	r4, r8
   80ec0:	d027      	beq.n	80f12 <UnityPrintMask+0x72>
            {
                UNITY_OUTPUT_CHAR('1');
   80ec2:	6830      	ldr	r0, [r6, #0]
   80ec4:	6882      	ldr	r2, [r0, #8]
   80ec6:	6893      	ldr	r3, [r2, #8]
   80ec8:	3b01      	subs	r3, #1
   80eca:	6093      	str	r3, [r2, #8]
   80ecc:	2b00      	cmp	r3, #0
   80ece:	da16      	bge.n	80efe <UnityPrintMask+0x5e>
   80ed0:	6882      	ldr	r2, [r0, #8]
   80ed2:	6891      	ldr	r1, [r2, #8]
   80ed4:	6993      	ldr	r3, [r2, #24]
   80ed6:	4299      	cmp	r1, r3
   80ed8:	db0e      	blt.n	80ef8 <UnityPrintMask+0x58>
   80eda:	6813      	ldr	r3, [r2, #0]
   80edc:	2231      	movs	r2, #49	; 0x31
   80ede:	701a      	strb	r2, [r3, #0]
   80ee0:	6830      	ldr	r0, [r6, #0]
   80ee2:	6882      	ldr	r2, [r0, #8]
   80ee4:	6813      	ldr	r3, [r2, #0]
   80ee6:	7819      	ldrb	r1, [r3, #0]
   80ee8:	290a      	cmp	r1, #10
   80eea:	d002      	beq.n	80ef2 <UnityPrintMask+0x52>
   80eec:	3301      	adds	r3, #1
   80eee:	6013      	str	r3, [r2, #0]
   80ef0:	e05e      	b.n	80fb0 <UnityPrintMask+0x110>
   80ef2:	210a      	movs	r1, #10
   80ef4:	47d0      	blx	sl
   80ef6:	e05b      	b.n	80fb0 <UnityPrintMask+0x110>
   80ef8:	2131      	movs	r1, #49	; 0x31
   80efa:	47d0      	blx	sl
   80efc:	e058      	b.n	80fb0 <UnityPrintMask+0x110>
   80efe:	6883      	ldr	r3, [r0, #8]
   80f00:	681b      	ldr	r3, [r3, #0]
   80f02:	2231      	movs	r2, #49	; 0x31
   80f04:	701a      	strb	r2, [r3, #0]
   80f06:	6833      	ldr	r3, [r6, #0]
   80f08:	689b      	ldr	r3, [r3, #8]
   80f0a:	681a      	ldr	r2, [r3, #0]
   80f0c:	3201      	adds	r2, #1
   80f0e:	601a      	str	r2, [r3, #0]
   80f10:	e04e      	b.n	80fb0 <UnityPrintMask+0x110>
            }
            else
            {
                UNITY_OUTPUT_CHAR('0');
   80f12:	6830      	ldr	r0, [r6, #0]
   80f14:	6882      	ldr	r2, [r0, #8]
   80f16:	6893      	ldr	r3, [r2, #8]
   80f18:	3b01      	subs	r3, #1
   80f1a:	6093      	str	r3, [r2, #8]
   80f1c:	2b00      	cmp	r3, #0
   80f1e:	da16      	bge.n	80f4e <UnityPrintMask+0xae>
   80f20:	6882      	ldr	r2, [r0, #8]
   80f22:	6891      	ldr	r1, [r2, #8]
   80f24:	6993      	ldr	r3, [r2, #24]
   80f26:	4299      	cmp	r1, r3
   80f28:	db0e      	blt.n	80f48 <UnityPrintMask+0xa8>
   80f2a:	6813      	ldr	r3, [r2, #0]
   80f2c:	2230      	movs	r2, #48	; 0x30
   80f2e:	701a      	strb	r2, [r3, #0]
   80f30:	6830      	ldr	r0, [r6, #0]
   80f32:	6882      	ldr	r2, [r0, #8]
   80f34:	6813      	ldr	r3, [r2, #0]
   80f36:	7819      	ldrb	r1, [r3, #0]
   80f38:	290a      	cmp	r1, #10
   80f3a:	d002      	beq.n	80f42 <UnityPrintMask+0xa2>
   80f3c:	3301      	adds	r3, #1
   80f3e:	6013      	str	r3, [r2, #0]
   80f40:	e036      	b.n	80fb0 <UnityPrintMask+0x110>
   80f42:	210a      	movs	r1, #10
   80f44:	47d0      	blx	sl
   80f46:	e033      	b.n	80fb0 <UnityPrintMask+0x110>
   80f48:	2130      	movs	r1, #48	; 0x30
   80f4a:	47d0      	blx	sl
   80f4c:	e030      	b.n	80fb0 <UnityPrintMask+0x110>
   80f4e:	6883      	ldr	r3, [r0, #8]
   80f50:	681b      	ldr	r3, [r3, #0]
   80f52:	2230      	movs	r2, #48	; 0x30
   80f54:	701a      	strb	r2, [r3, #0]
   80f56:	6833      	ldr	r3, [r6, #0]
   80f58:	689b      	ldr	r3, [r3, #8]
   80f5a:	681a      	ldr	r2, [r3, #0]
   80f5c:	3201      	adds	r2, #1
   80f5e:	601a      	str	r2, [r3, #0]
   80f60:	e026      	b.n	80fb0 <UnityPrintMask+0x110>
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   80f62:	6830      	ldr	r0, [r6, #0]
   80f64:	6882      	ldr	r2, [r0, #8]
   80f66:	6893      	ldr	r3, [r2, #8]
   80f68:	3b01      	subs	r3, #1
   80f6a:	6093      	str	r3, [r2, #8]
   80f6c:	2b00      	cmp	r3, #0
   80f6e:	da16      	bge.n	80f9e <UnityPrintMask+0xfe>
   80f70:	6882      	ldr	r2, [r0, #8]
   80f72:	6891      	ldr	r1, [r2, #8]
   80f74:	6993      	ldr	r3, [r2, #24]
   80f76:	4299      	cmp	r1, r3
   80f78:	db0e      	blt.n	80f98 <UnityPrintMask+0xf8>
   80f7a:	6813      	ldr	r3, [r2, #0]
   80f7c:	f883 9000 	strb.w	r9, [r3]
   80f80:	6830      	ldr	r0, [r6, #0]
   80f82:	6882      	ldr	r2, [r0, #8]
   80f84:	6813      	ldr	r3, [r2, #0]
   80f86:	7819      	ldrb	r1, [r3, #0]
   80f88:	290a      	cmp	r1, #10
   80f8a:	d002      	beq.n	80f92 <UnityPrintMask+0xf2>
   80f8c:	3301      	adds	r3, #1
   80f8e:	6013      	str	r3, [r2, #0]
   80f90:	e00e      	b.n	80fb0 <UnityPrintMask+0x110>
   80f92:	210a      	movs	r1, #10
   80f94:	47d0      	blx	sl
   80f96:	e00b      	b.n	80fb0 <UnityPrintMask+0x110>
   80f98:	4649      	mov	r1, r9
   80f9a:	47d0      	blx	sl
   80f9c:	e008      	b.n	80fb0 <UnityPrintMask+0x110>
   80f9e:	6883      	ldr	r3, [r0, #8]
   80fa0:	681b      	ldr	r3, [r3, #0]
   80fa2:	f883 9000 	strb.w	r9, [r3]
   80fa6:	6833      	ldr	r3, [r6, #0]
   80fa8:	689b      	ldr	r3, [r3, #8]
   80faa:	681a      	ldr	r2, [r3, #0]
   80fac:	3201      	adds	r2, #1
   80fae:	601a      	str	r2, [r3, #0]
        }
        current_bit = current_bit >> 1;
   80fb0:	0864      	lsrs	r4, r4, #1
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
   80fb2:	3d01      	subs	r5, #1
   80fb4:	d180      	bne.n	80eb8 <UnityPrintMask+0x18>
        {
            UNITY_OUTPUT_CHAR('X');
        }
        current_bit = current_bit >> 1;
    }
}
   80fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80fba:	bf00      	nop
   80fbc:	20070008 	.word	0x20070008
   80fc0:	00082885 	.word	0x00082885

00080fc4 <UnityPrintFail>:
#endif

//-----------------------------------------------

void UnityPrintFail(void)
{
   80fc4:	b508      	push	{r3, lr}
    UnityPrint(UnityStrFail);
   80fc6:	4802      	ldr	r0, [pc, #8]	; (80fd0 <UnityPrintFail+0xc>)
   80fc8:	4b02      	ldr	r3, [pc, #8]	; (80fd4 <UnityPrintFail+0x10>)
   80fca:	4798      	blx	r3
   80fcc:	bd08      	pop	{r3, pc}
   80fce:	bf00      	nop
   80fd0:	00084664 	.word	0x00084664
   80fd4:	00080aa1 	.word	0x00080aa1

00080fd8 <UnityPrintOk>:
}

void UnityPrintOk(void)
{
   80fd8:	b508      	push	{r3, lr}
    UnityPrint(UnityStrOk);
   80fda:	4802      	ldr	r0, [pc, #8]	; (80fe4 <UnityPrintOk+0xc>)
   80fdc:	4b02      	ldr	r3, [pc, #8]	; (80fe8 <UnityPrintOk+0x10>)
   80fde:	4798      	blx	r3
   80fe0:	bd08      	pop	{r3, pc}
   80fe2:	bf00      	nop
   80fe4:	00084654 	.word	0x00084654
   80fe8:	00080aa1 	.word	0x00080aa1

00080fec <UnityConcludeTest>:
    UNITY_OUTPUT_CHAR(':');
}

//-----------------------------------------------
void UnityConcludeTest(void)
{
   80fec:	b508      	push	{r3, lr}
    if (Unity.CurrentTestIgnored)
   80fee:	4b24      	ldr	r3, [pc, #144]	; (81080 <UnityConcludeTest+0x94>)
   80ff0:	69db      	ldr	r3, [r3, #28]
   80ff2:	b123      	cbz	r3, 80ffe <UnityConcludeTest+0x12>
    {
        Unity.TestIgnores++;
   80ff4:	4b22      	ldr	r3, [pc, #136]	; (81080 <UnityConcludeTest+0x94>)
   80ff6:	695a      	ldr	r2, [r3, #20]
   80ff8:	3201      	adds	r2, #1
   80ffa:	615a      	str	r2, [r3, #20]
   80ffc:	e00f      	b.n	8101e <UnityConcludeTest+0x32>
    }
    else if (!Unity.CurrentTestFailed)
   80ffe:	4b20      	ldr	r3, [pc, #128]	; (81080 <UnityConcludeTest+0x94>)
   81000:	699b      	ldr	r3, [r3, #24]
   81002:	b943      	cbnz	r3, 81016 <UnityConcludeTest+0x2a>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
   81004:	4b1e      	ldr	r3, [pc, #120]	; (81080 <UnityConcludeTest+0x94>)
   81006:	6818      	ldr	r0, [r3, #0]
   81008:	6899      	ldr	r1, [r3, #8]
   8100a:	4b1e      	ldr	r3, [pc, #120]	; (81084 <UnityConcludeTest+0x98>)
   8100c:	4798      	blx	r3
        UnityPrint(UnityStrPass);
   8100e:	481e      	ldr	r0, [pc, #120]	; (81088 <UnityConcludeTest+0x9c>)
   81010:	4b1e      	ldr	r3, [pc, #120]	; (8108c <UnityConcludeTest+0xa0>)
   81012:	4798      	blx	r3
   81014:	e003      	b.n	8101e <UnityConcludeTest+0x32>
    }
    else
    {
        Unity.TestFailures++;
   81016:	4b1a      	ldr	r3, [pc, #104]	; (81080 <UnityConcludeTest+0x94>)
   81018:	691a      	ldr	r2, [r3, #16]
   8101a:	3201      	adds	r2, #1
   8101c:	611a      	str	r2, [r3, #16]
    }

    Unity.CurrentTestFailed = 0;
   8101e:	4b18      	ldr	r3, [pc, #96]	; (81080 <UnityConcludeTest+0x94>)
   81020:	2200      	movs	r2, #0
   81022:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   81024:	61da      	str	r2, [r3, #28]
    UNITY_PRINT_EOL;
   81026:	4b1a      	ldr	r3, [pc, #104]	; (81090 <UnityConcludeTest+0xa4>)
   81028:	6818      	ldr	r0, [r3, #0]
   8102a:	6882      	ldr	r2, [r0, #8]
   8102c:	6893      	ldr	r3, [r2, #8]
   8102e:	3b01      	subs	r3, #1
   81030:	6093      	str	r3, [r2, #8]
   81032:	2b00      	cmp	r3, #0
   81034:	da19      	bge.n	8106a <UnityConcludeTest+0x7e>
   81036:	6882      	ldr	r2, [r0, #8]
   81038:	6891      	ldr	r1, [r2, #8]
   8103a:	6993      	ldr	r3, [r2, #24]
   8103c:	4299      	cmp	r1, r3
   8103e:	db10      	blt.n	81062 <UnityConcludeTest+0x76>
   81040:	6813      	ldr	r3, [r2, #0]
   81042:	220a      	movs	r2, #10
   81044:	701a      	strb	r2, [r3, #0]
   81046:	4b12      	ldr	r3, [pc, #72]	; (81090 <UnityConcludeTest+0xa4>)
   81048:	6818      	ldr	r0, [r3, #0]
   8104a:	6882      	ldr	r2, [r0, #8]
   8104c:	6813      	ldr	r3, [r2, #0]
   8104e:	7819      	ldrb	r1, [r3, #0]
   81050:	290a      	cmp	r1, #10
   81052:	d002      	beq.n	8105a <UnityConcludeTest+0x6e>
   81054:	3301      	adds	r3, #1
   81056:	6013      	str	r3, [r2, #0]
   81058:	bd08      	pop	{r3, pc}
   8105a:	210a      	movs	r1, #10
   8105c:	4b0d      	ldr	r3, [pc, #52]	; (81094 <UnityConcludeTest+0xa8>)
   8105e:	4798      	blx	r3
   81060:	bd08      	pop	{r3, pc}
   81062:	210a      	movs	r1, #10
   81064:	4b0b      	ldr	r3, [pc, #44]	; (81094 <UnityConcludeTest+0xa8>)
   81066:	4798      	blx	r3
   81068:	bd08      	pop	{r3, pc}
   8106a:	6883      	ldr	r3, [r0, #8]
   8106c:	681b      	ldr	r3, [r3, #0]
   8106e:	220a      	movs	r2, #10
   81070:	701a      	strb	r2, [r3, #0]
   81072:	4b07      	ldr	r3, [pc, #28]	; (81090 <UnityConcludeTest+0xa4>)
   81074:	681b      	ldr	r3, [r3, #0]
   81076:	689b      	ldr	r3, [r3, #8]
   81078:	681a      	ldr	r2, [r3, #0]
   8107a:	3201      	adds	r2, #1
   8107c:	601a      	str	r2, [r3, #0]
   8107e:	bd08      	pop	{r3, pc}
   81080:	20070a20 	.word	0x20070a20
   81084:	00080ccd 	.word	0x00080ccd
   81088:	000846b0 	.word	0x000846b0
   8108c:	00080aa1 	.word	0x00080aa1
   81090:	20070008 	.word	0x20070008
   81094:	00082885 	.word	0x00082885

00081098 <UnityAssertBits>:
void UnityAssertBits(const _U_SINT mask,
                     const _U_SINT expected,
                     const _U_SINT actual,
                     const char* msg,
                     const UNITY_LINE_TYPE lineNumber)
{
   81098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8109c:	4605      	mov	r5, r0
   8109e:	460f      	mov	r7, r1
   810a0:	4616      	mov	r6, r2
   810a2:	4698      	mov	r8, r3
    UNITY_SKIP_EXECUTION;
   810a4:	4c12      	ldr	r4, [pc, #72]	; (810f0 <UnityAssertBits+0x58>)
   810a6:	69a4      	ldr	r4, [r4, #24]
   810a8:	b9fc      	cbnz	r4, 810ea <UnityAssertBits+0x52>
   810aa:	4a11      	ldr	r2, [pc, #68]	; (810f0 <UnityAssertBits+0x58>)
   810ac:	69d2      	ldr	r2, [r2, #28]
   810ae:	b9e2      	cbnz	r2, 810ea <UnityAssertBits+0x52>

    if ((mask & expected) != (mask & actual))
   810b0:	ea81 0306 	eor.w	r3, r1, r6
   810b4:	4203      	tst	r3, r0
   810b6:	d018      	beq.n	810ea <UnityAssertBits+0x52>
    {
        UnityTestResultsFailBegin(lineNumber);
   810b8:	9808      	ldr	r0, [sp, #32]
   810ba:	4b0e      	ldr	r3, [pc, #56]	; (810f4 <UnityAssertBits+0x5c>)
   810bc:	4798      	blx	r3
        UnityPrint(UnityStrExpected);
   810be:	480e      	ldr	r0, [pc, #56]	; (810f8 <UnityAssertBits+0x60>)
   810c0:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8110c <UnityAssertBits+0x74>
   810c4:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)expected);
   810c6:	4628      	mov	r0, r5
   810c8:	4639      	mov	r1, r7
   810ca:	4c0c      	ldr	r4, [pc, #48]	; (810fc <UnityAssertBits+0x64>)
   810cc:	47a0      	blx	r4
        UnityPrint(UnityStrWas);
   810ce:	480c      	ldr	r0, [pc, #48]	; (81100 <UnityAssertBits+0x68>)
   810d0:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)actual);
   810d2:	4628      	mov	r0, r5
   810d4:	4631      	mov	r1, r6
   810d6:	47a0      	blx	r4
        UnityAddMsgIfSpecified(msg);
   810d8:	4640      	mov	r0, r8
   810da:	4b0a      	ldr	r3, [pc, #40]	; (81104 <UnityAssertBits+0x6c>)
   810dc:	4798      	blx	r3
        UNITY_FAIL_AND_BAIL;
   810de:	4804      	ldr	r0, [pc, #16]	; (810f0 <UnityAssertBits+0x58>)
   810e0:	2101      	movs	r1, #1
   810e2:	6181      	str	r1, [r0, #24]
   810e4:	3020      	adds	r0, #32
   810e6:	4b08      	ldr	r3, [pc, #32]	; (81108 <UnityAssertBits+0x70>)
   810e8:	4798      	blx	r3
   810ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   810ee:	bf00      	nop
   810f0:	20070a20 	.word	0x20070a20
   810f4:	00080e01 	.word	0x00080e01
   810f8:	0008466c 	.word	0x0008466c
   810fc:	00080ea1 	.word	0x00080ea1
   81100:	0008465c 	.word	0x0008465c
   81104:	00080e85 	.word	0x00080e85
   81108:	00081e71 	.word	0x00081e71
   8110c:	00080aa1 	.word	0x00080aa1

00081110 <UnityDefaultTestRun>:
    void setUp(void);
    void tearDown(void);
#endif
//-----------------------------------------------
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
   81110:	b500      	push	{lr}
   81112:	b083      	sub	sp, #12
   81114:	9001      	str	r0, [sp, #4]
    Unity.CurrentTestName = FuncName;
   81116:	480e      	ldr	r0, [pc, #56]	; (81150 <UnityDefaultTestRun+0x40>)
   81118:	6041      	str	r1, [r0, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
   8111a:	6082      	str	r2, [r0, #8]
    Unity.NumberOfTests++;
   8111c:	68c3      	ldr	r3, [r0, #12]
   8111e:	3301      	adds	r3, #1
   81120:	60c3      	str	r3, [r0, #12]
    if (TEST_PROTECT())
   81122:	3020      	adds	r0, #32
   81124:	4b0b      	ldr	r3, [pc, #44]	; (81154 <UnityDefaultTestRun+0x44>)
   81126:	4798      	blx	r3
   81128:	b918      	cbnz	r0, 81132 <UnityDefaultTestRun+0x22>
    {
        setUp();
   8112a:	4b0b      	ldr	r3, [pc, #44]	; (81158 <UnityDefaultTestRun+0x48>)
   8112c:	4798      	blx	r3
        Func();
   8112e:	9b01      	ldr	r3, [sp, #4]
   81130:	4798      	blx	r3
    }
    if (TEST_PROTECT() && !(Unity.CurrentTestIgnored))
   81132:	480a      	ldr	r0, [pc, #40]	; (8115c <UnityDefaultTestRun+0x4c>)
   81134:	4b07      	ldr	r3, [pc, #28]	; (81154 <UnityDefaultTestRun+0x44>)
   81136:	4798      	blx	r3
   81138:	b920      	cbnz	r0, 81144 <UnityDefaultTestRun+0x34>
   8113a:	4b05      	ldr	r3, [pc, #20]	; (81150 <UnityDefaultTestRun+0x40>)
   8113c:	69db      	ldr	r3, [r3, #28]
   8113e:	b90b      	cbnz	r3, 81144 <UnityDefaultTestRun+0x34>
    {
        tearDown();
   81140:	4b07      	ldr	r3, [pc, #28]	; (81160 <UnityDefaultTestRun+0x50>)
   81142:	4798      	blx	r3
    }
    UnityConcludeTest();
   81144:	4b07      	ldr	r3, [pc, #28]	; (81164 <UnityDefaultTestRun+0x54>)
   81146:	4798      	blx	r3
}
   81148:	b003      	add	sp, #12
   8114a:	f85d fb04 	ldr.w	pc, [sp], #4
   8114e:	bf00      	nop
   81150:	20070a20 	.word	0x20070a20
   81154:	00081e65 	.word	0x00081e65
   81158:	00080231 	.word	0x00080231
   8115c:	20070a40 	.word	0x20070a40
   81160:	00080235 	.word	0x00080235
   81164:	00080fed 	.word	0x00080fed

00081168 <UnityBegin>:

//-----------------------------------------------
void UnityBegin(const char* filename)
{
    Unity.TestFile = filename;
   81168:	4b05      	ldr	r3, [pc, #20]	; (81180 <UnityBegin+0x18>)
   8116a:	6018      	str	r0, [r3, #0]
    Unity.CurrentTestName = NULL;
   8116c:	2200      	movs	r2, #0
   8116e:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
   81170:	609a      	str	r2, [r3, #8]
    Unity.NumberOfTests = 0;
   81172:	60da      	str	r2, [r3, #12]
    Unity.TestFailures = 0;
   81174:	611a      	str	r2, [r3, #16]
    Unity.TestIgnores = 0;
   81176:	615a      	str	r2, [r3, #20]
    Unity.CurrentTestFailed = 0;
   81178:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   8117a:	61da      	str	r2, [r3, #28]
   8117c:	4770      	bx	lr
   8117e:	bf00      	nop
   81180:	20070a20 	.word	0x20070a20

00081184 <UnityEnd>:
    UNITY_OUTPUT_START();
}

//-----------------------------------------------
int UnityEnd(void)
{
   81184:	b570      	push	{r4, r5, r6, lr}
    UNITY_PRINT_EOL;
   81186:	4b66      	ldr	r3, [pc, #408]	; (81320 <UnityEnd+0x19c>)
   81188:	6818      	ldr	r0, [r3, #0]
   8118a:	6882      	ldr	r2, [r0, #8]
   8118c:	6893      	ldr	r3, [r2, #8]
   8118e:	3b01      	subs	r3, #1
   81190:	6093      	str	r3, [r2, #8]
   81192:	2b00      	cmp	r3, #0
   81194:	da19      	bge.n	811ca <UnityEnd+0x46>
   81196:	6882      	ldr	r2, [r0, #8]
   81198:	6891      	ldr	r1, [r2, #8]
   8119a:	6993      	ldr	r3, [r2, #24]
   8119c:	4299      	cmp	r1, r3
   8119e:	db10      	blt.n	811c2 <UnityEnd+0x3e>
   811a0:	6813      	ldr	r3, [r2, #0]
   811a2:	220a      	movs	r2, #10
   811a4:	701a      	strb	r2, [r3, #0]
   811a6:	4b5e      	ldr	r3, [pc, #376]	; (81320 <UnityEnd+0x19c>)
   811a8:	6818      	ldr	r0, [r3, #0]
   811aa:	6882      	ldr	r2, [r0, #8]
   811ac:	6813      	ldr	r3, [r2, #0]
   811ae:	7819      	ldrb	r1, [r3, #0]
   811b0:	290a      	cmp	r1, #10
   811b2:	d002      	beq.n	811ba <UnityEnd+0x36>
   811b4:	3301      	adds	r3, #1
   811b6:	6013      	str	r3, [r2, #0]
   811b8:	e011      	b.n	811de <UnityEnd+0x5a>
   811ba:	210a      	movs	r1, #10
   811bc:	4b59      	ldr	r3, [pc, #356]	; (81324 <UnityEnd+0x1a0>)
   811be:	4798      	blx	r3
   811c0:	e00d      	b.n	811de <UnityEnd+0x5a>
   811c2:	210a      	movs	r1, #10
   811c4:	4b57      	ldr	r3, [pc, #348]	; (81324 <UnityEnd+0x1a0>)
   811c6:	4798      	blx	r3
   811c8:	e009      	b.n	811de <UnityEnd+0x5a>
   811ca:	6883      	ldr	r3, [r0, #8]
   811cc:	681b      	ldr	r3, [r3, #0]
   811ce:	220a      	movs	r2, #10
   811d0:	701a      	strb	r2, [r3, #0]
   811d2:	4b53      	ldr	r3, [pc, #332]	; (81320 <UnityEnd+0x19c>)
   811d4:	681b      	ldr	r3, [r3, #0]
   811d6:	689b      	ldr	r3, [r3, #8]
   811d8:	681a      	ldr	r2, [r3, #0]
   811da:	3201      	adds	r2, #1
   811dc:	601a      	str	r2, [r3, #0]
    UnityPrint(UnityStrBreaker);
   811de:	4852      	ldr	r0, [pc, #328]	; (81328 <UnityEnd+0x1a4>)
   811e0:	4b52      	ldr	r3, [pc, #328]	; (8132c <UnityEnd+0x1a8>)
   811e2:	4798      	blx	r3
    UNITY_PRINT_EOL;
   811e4:	4b4e      	ldr	r3, [pc, #312]	; (81320 <UnityEnd+0x19c>)
   811e6:	6818      	ldr	r0, [r3, #0]
   811e8:	6882      	ldr	r2, [r0, #8]
   811ea:	6893      	ldr	r3, [r2, #8]
   811ec:	3b01      	subs	r3, #1
   811ee:	6093      	str	r3, [r2, #8]
   811f0:	2b00      	cmp	r3, #0
   811f2:	da19      	bge.n	81228 <UnityEnd+0xa4>
   811f4:	6882      	ldr	r2, [r0, #8]
   811f6:	6891      	ldr	r1, [r2, #8]
   811f8:	6993      	ldr	r3, [r2, #24]
   811fa:	4299      	cmp	r1, r3
   811fc:	db10      	blt.n	81220 <UnityEnd+0x9c>
   811fe:	6813      	ldr	r3, [r2, #0]
   81200:	220a      	movs	r2, #10
   81202:	701a      	strb	r2, [r3, #0]
   81204:	4b46      	ldr	r3, [pc, #280]	; (81320 <UnityEnd+0x19c>)
   81206:	6818      	ldr	r0, [r3, #0]
   81208:	6882      	ldr	r2, [r0, #8]
   8120a:	6813      	ldr	r3, [r2, #0]
   8120c:	7819      	ldrb	r1, [r3, #0]
   8120e:	290a      	cmp	r1, #10
   81210:	d002      	beq.n	81218 <UnityEnd+0x94>
   81212:	3301      	adds	r3, #1
   81214:	6013      	str	r3, [r2, #0]
   81216:	e011      	b.n	8123c <UnityEnd+0xb8>
   81218:	210a      	movs	r1, #10
   8121a:	4b42      	ldr	r3, [pc, #264]	; (81324 <UnityEnd+0x1a0>)
   8121c:	4798      	blx	r3
   8121e:	e00d      	b.n	8123c <UnityEnd+0xb8>
   81220:	210a      	movs	r1, #10
   81222:	4b40      	ldr	r3, [pc, #256]	; (81324 <UnityEnd+0x1a0>)
   81224:	4798      	blx	r3
   81226:	e009      	b.n	8123c <UnityEnd+0xb8>
   81228:	6883      	ldr	r3, [r0, #8]
   8122a:	681b      	ldr	r3, [r3, #0]
   8122c:	220a      	movs	r2, #10
   8122e:	701a      	strb	r2, [r3, #0]
   81230:	4b3b      	ldr	r3, [pc, #236]	; (81320 <UnityEnd+0x19c>)
   81232:	681b      	ldr	r3, [r3, #0]
   81234:	689b      	ldr	r3, [r3, #8]
   81236:	681a      	ldr	r2, [r3, #0]
   81238:	3201      	adds	r2, #1
   8123a:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)(Unity.NumberOfTests));
   8123c:	4e3c      	ldr	r6, [pc, #240]	; (81330 <UnityEnd+0x1ac>)
   8123e:	68f0      	ldr	r0, [r6, #12]
   81240:	4d3c      	ldr	r5, [pc, #240]	; (81334 <UnityEnd+0x1b0>)
   81242:	47a8      	blx	r5
    UnityPrint(UnityStrResultsTests);
   81244:	483c      	ldr	r0, [pc, #240]	; (81338 <UnityEnd+0x1b4>)
   81246:	4c39      	ldr	r4, [pc, #228]	; (8132c <UnityEnd+0x1a8>)
   81248:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestFailures));
   8124a:	6930      	ldr	r0, [r6, #16]
   8124c:	47a8      	blx	r5
    UnityPrint(UnityStrResultsFailures);
   8124e:	483b      	ldr	r0, [pc, #236]	; (8133c <UnityEnd+0x1b8>)
   81250:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestIgnores));
   81252:	6970      	ldr	r0, [r6, #20]
   81254:	47a8      	blx	r5
    UnityPrint(UnityStrResultsIgnored);
   81256:	483a      	ldr	r0, [pc, #232]	; (81340 <UnityEnd+0x1bc>)
   81258:	47a0      	blx	r4
    UNITY_PRINT_EOL;
   8125a:	4b31      	ldr	r3, [pc, #196]	; (81320 <UnityEnd+0x19c>)
   8125c:	6818      	ldr	r0, [r3, #0]
   8125e:	6882      	ldr	r2, [r0, #8]
   81260:	6893      	ldr	r3, [r2, #8]
   81262:	3b01      	subs	r3, #1
   81264:	6093      	str	r3, [r2, #8]
   81266:	2b00      	cmp	r3, #0
   81268:	da19      	bge.n	8129e <UnityEnd+0x11a>
   8126a:	6882      	ldr	r2, [r0, #8]
   8126c:	6891      	ldr	r1, [r2, #8]
   8126e:	6993      	ldr	r3, [r2, #24]
   81270:	4299      	cmp	r1, r3
   81272:	db10      	blt.n	81296 <UnityEnd+0x112>
   81274:	6813      	ldr	r3, [r2, #0]
   81276:	220a      	movs	r2, #10
   81278:	701a      	strb	r2, [r3, #0]
   8127a:	4b29      	ldr	r3, [pc, #164]	; (81320 <UnityEnd+0x19c>)
   8127c:	6818      	ldr	r0, [r3, #0]
   8127e:	6882      	ldr	r2, [r0, #8]
   81280:	6813      	ldr	r3, [r2, #0]
   81282:	7819      	ldrb	r1, [r3, #0]
   81284:	290a      	cmp	r1, #10
   81286:	d002      	beq.n	8128e <UnityEnd+0x10a>
   81288:	3301      	adds	r3, #1
   8128a:	6013      	str	r3, [r2, #0]
   8128c:	e011      	b.n	812b2 <UnityEnd+0x12e>
   8128e:	210a      	movs	r1, #10
   81290:	4b24      	ldr	r3, [pc, #144]	; (81324 <UnityEnd+0x1a0>)
   81292:	4798      	blx	r3
   81294:	e00d      	b.n	812b2 <UnityEnd+0x12e>
   81296:	210a      	movs	r1, #10
   81298:	4b22      	ldr	r3, [pc, #136]	; (81324 <UnityEnd+0x1a0>)
   8129a:	4798      	blx	r3
   8129c:	e009      	b.n	812b2 <UnityEnd+0x12e>
   8129e:	6883      	ldr	r3, [r0, #8]
   812a0:	681b      	ldr	r3, [r3, #0]
   812a2:	220a      	movs	r2, #10
   812a4:	701a      	strb	r2, [r3, #0]
   812a6:	4b1e      	ldr	r3, [pc, #120]	; (81320 <UnityEnd+0x19c>)
   812a8:	681b      	ldr	r3, [r3, #0]
   812aa:	689b      	ldr	r3, [r3, #8]
   812ac:	681a      	ldr	r2, [r3, #0]
   812ae:	3201      	adds	r2, #1
   812b0:	601a      	str	r2, [r3, #0]
    if (Unity.TestFailures == 0U)
   812b2:	4b1f      	ldr	r3, [pc, #124]	; (81330 <UnityEnd+0x1ac>)
   812b4:	691b      	ldr	r3, [r3, #16]
   812b6:	b913      	cbnz	r3, 812be <UnityEnd+0x13a>
    {
        UnityPrintOk();
   812b8:	4b22      	ldr	r3, [pc, #136]	; (81344 <UnityEnd+0x1c0>)
   812ba:	4798      	blx	r3
   812bc:	e001      	b.n	812c2 <UnityEnd+0x13e>
    }
    else
    {
        UnityPrintFail();
   812be:	4b22      	ldr	r3, [pc, #136]	; (81348 <UnityEnd+0x1c4>)
   812c0:	4798      	blx	r3
    }
    UNITY_PRINT_EOL;
   812c2:	4b17      	ldr	r3, [pc, #92]	; (81320 <UnityEnd+0x19c>)
   812c4:	6818      	ldr	r0, [r3, #0]
   812c6:	6882      	ldr	r2, [r0, #8]
   812c8:	6893      	ldr	r3, [r2, #8]
   812ca:	3b01      	subs	r3, #1
   812cc:	6093      	str	r3, [r2, #8]
   812ce:	2b00      	cmp	r3, #0
   812d0:	da19      	bge.n	81306 <UnityEnd+0x182>
   812d2:	6882      	ldr	r2, [r0, #8]
   812d4:	6891      	ldr	r1, [r2, #8]
   812d6:	6993      	ldr	r3, [r2, #24]
   812d8:	4299      	cmp	r1, r3
   812da:	db10      	blt.n	812fe <UnityEnd+0x17a>
   812dc:	6813      	ldr	r3, [r2, #0]
   812de:	220a      	movs	r2, #10
   812e0:	701a      	strb	r2, [r3, #0]
   812e2:	4b0f      	ldr	r3, [pc, #60]	; (81320 <UnityEnd+0x19c>)
   812e4:	6818      	ldr	r0, [r3, #0]
   812e6:	6882      	ldr	r2, [r0, #8]
   812e8:	6813      	ldr	r3, [r2, #0]
   812ea:	7819      	ldrb	r1, [r3, #0]
   812ec:	290a      	cmp	r1, #10
   812ee:	d002      	beq.n	812f6 <UnityEnd+0x172>
   812f0:	3301      	adds	r3, #1
   812f2:	6013      	str	r3, [r2, #0]
   812f4:	e011      	b.n	8131a <UnityEnd+0x196>
   812f6:	210a      	movs	r1, #10
   812f8:	4b0a      	ldr	r3, [pc, #40]	; (81324 <UnityEnd+0x1a0>)
   812fa:	4798      	blx	r3
   812fc:	e00d      	b.n	8131a <UnityEnd+0x196>
   812fe:	210a      	movs	r1, #10
   81300:	4b08      	ldr	r3, [pc, #32]	; (81324 <UnityEnd+0x1a0>)
   81302:	4798      	blx	r3
   81304:	e009      	b.n	8131a <UnityEnd+0x196>
   81306:	6883      	ldr	r3, [r0, #8]
   81308:	681b      	ldr	r3, [r3, #0]
   8130a:	220a      	movs	r2, #10
   8130c:	701a      	strb	r2, [r3, #0]
   8130e:	4b04      	ldr	r3, [pc, #16]	; (81320 <UnityEnd+0x19c>)
   81310:	681b      	ldr	r3, [r3, #0]
   81312:	689b      	ldr	r3, [r3, #8]
   81314:	681a      	ldr	r2, [r3, #0]
   81316:	3201      	adds	r2, #1
   81318:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
}
   8131a:	4b05      	ldr	r3, [pc, #20]	; (81330 <UnityEnd+0x1ac>)
   8131c:	6918      	ldr	r0, [r3, #16]
   8131e:	bd70      	pop	{r4, r5, r6, pc}
   81320:	20070008 	.word	0x20070008
   81324:	00082885 	.word	0x00082885
   81328:	00084678 	.word	0x00084678
   8132c:	00080aa1 	.word	0x00080aa1
   81330:	20070a20 	.word	0x20070a20
   81334:	00080779 	.word	0x00080779
   81338:	000846a8 	.word	0x000846a8
   8133c:	00084690 	.word	0x00084690
   81340:	0008469c 	.word	0x0008469c
   81344:	00080fd9 	.word	0x00080fd9
   81348:	00080fc5 	.word	0x00080fc5

0008134c <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   8134c:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   8134e:	685a      	ldr	r2, [r3, #4]
   81350:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   81352:	6842      	ldr	r2, [r0, #4]
   81354:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   81356:	685a      	ldr	r2, [r3, #4]
   81358:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8135a:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   8135c:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8135e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81360:	6803      	ldr	r3, [r0, #0]
   81362:	3301      	adds	r3, #1
   81364:	6003      	str	r3, [r0, #0]
   81366:	4770      	bx	lr

00081368 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   81368:	6843      	ldr	r3, [r0, #4]
   8136a:	6882      	ldr	r2, [r0, #8]
   8136c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   8136e:	6883      	ldr	r3, [r0, #8]
   81370:	6842      	ldr	r2, [r0, #4]
   81372:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   81374:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   81376:	685a      	ldr	r2, [r3, #4]
   81378:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   8137a:	bf04      	itt	eq
   8137c:	6882      	ldreq	r2, [r0, #8]
   8137e:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   81380:	2200      	movs	r2, #0
   81382:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   81384:	681a      	ldr	r2, [r3, #0]
   81386:	3a01      	subs	r2, #1
   81388:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   8138a:	6818      	ldr	r0, [r3, #0]
}
   8138c:	4770      	bx	lr
   8138e:	bf00      	nop

00081390 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   81390:	4b06      	ldr	r3, [pc, #24]	; (813ac <pxCurrentTCBConst2>)
   81392:	6819      	ldr	r1, [r3, #0]
   81394:	6808      	ldr	r0, [r1, #0]
   81396:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8139a:	f380 8809 	msr	PSP, r0
   8139e:	f04f 0000 	mov.w	r0, #0
   813a2:	f380 8811 	msr	BASEPRI, r0
   813a6:	f04e 0e0d 	orr.w	lr, lr, #13
   813aa:	4770      	bx	lr

000813ac <pxCurrentTCBConst2>:
   813ac:	20070958 	.word	0x20070958

000813b0 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   813b0:	f3ef 8011 	mrs	r0, BASEPRI
   813b4:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   813b8:	f381 8811 	msr	BASEPRI, r1
   813bc:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   813be:	2000      	movs	r0, #0

000813c0 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   813c0:	f380 8811 	msr	BASEPRI, r0
   813c4:	4770      	bx	lr
   813c6:	bf00      	nop

000813c8 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   813c8:	f3ef 8009 	mrs	r0, PSP
   813cc:	4b0c      	ldr	r3, [pc, #48]	; (81400 <pxCurrentTCBConst>)
   813ce:	681a      	ldr	r2, [r3, #0]
   813d0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   813d4:	6010      	str	r0, [r2, #0]
   813d6:	e92d 4008 	stmdb	sp!, {r3, lr}
   813da:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   813de:	f380 8811 	msr	BASEPRI, r0
   813e2:	f000 f8b5 	bl	81550 <vTaskSwitchContext>
   813e6:	f04f 0000 	mov.w	r0, #0
   813ea:	f380 8811 	msr	BASEPRI, r0
   813ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   813f2:	6819      	ldr	r1, [r3, #0]
   813f4:	6808      	ldr	r0, [r1, #0]
   813f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   813fa:	f380 8809 	msr	PSP, r0
   813fe:	4770      	bx	lr

00081400 <pxCurrentTCBConst>:
   81400:	20070958 	.word	0x20070958

00081404 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   81404:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8140a:	4b05      	ldr	r3, [pc, #20]	; (81420 <SysTick_Handler+0x1c>)
   8140c:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   8140e:	4b05      	ldr	r3, [pc, #20]	; (81424 <SysTick_Handler+0x20>)
   81410:	4798      	blx	r3
	{
		vTaskIncrementTick();
   81412:	4b05      	ldr	r3, [pc, #20]	; (81428 <SysTick_Handler+0x24>)
   81414:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   81416:	2000      	movs	r0, #0
   81418:	4b04      	ldr	r3, [pc, #16]	; (8142c <SysTick_Handler+0x28>)
   8141a:	4798      	blx	r3
   8141c:	bd08      	pop	{r3, pc}
   8141e:	bf00      	nop
   81420:	e000ed04 	.word	0xe000ed04
   81424:	000813b1 	.word	0x000813b1
   81428:	00081431 	.word	0x00081431
   8142c:	000813c1 	.word	0x000813c1

00081430 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81434:	4b3a      	ldr	r3, [pc, #232]	; (81520 <vTaskIncrementTick+0xf0>)
   81436:	681b      	ldr	r3, [r3, #0]
   81438:	2b00      	cmp	r3, #0
   8143a:	d16b      	bne.n	81514 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   8143c:	4b39      	ldr	r3, [pc, #228]	; (81524 <vTaskIncrementTick+0xf4>)
   8143e:	681a      	ldr	r2, [r3, #0]
   81440:	3201      	adds	r2, #1
   81442:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   81444:	681b      	ldr	r3, [r3, #0]
   81446:	bb03      	cbnz	r3, 8148a <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81448:	4b37      	ldr	r3, [pc, #220]	; (81528 <vTaskIncrementTick+0xf8>)
   8144a:	681b      	ldr	r3, [r3, #0]
   8144c:	681b      	ldr	r3, [r3, #0]
   8144e:	b11b      	cbz	r3, 81458 <vTaskIncrementTick+0x28>
   81450:	4b36      	ldr	r3, [pc, #216]	; (8152c <vTaskIncrementTick+0xfc>)
   81452:	4798      	blx	r3
   81454:	bf00      	nop
   81456:	e7fd      	b.n	81454 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   81458:	4b33      	ldr	r3, [pc, #204]	; (81528 <vTaskIncrementTick+0xf8>)
   8145a:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   8145c:	4a34      	ldr	r2, [pc, #208]	; (81530 <vTaskIncrementTick+0x100>)
   8145e:	6810      	ldr	r0, [r2, #0]
   81460:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   81462:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81464:	4a33      	ldr	r2, [pc, #204]	; (81534 <vTaskIncrementTick+0x104>)
   81466:	6811      	ldr	r1, [r2, #0]
   81468:	3101      	adds	r1, #1
   8146a:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8146c:	681b      	ldr	r3, [r3, #0]
   8146e:	681b      	ldr	r3, [r3, #0]
   81470:	b923      	cbnz	r3, 8147c <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   81472:	f04f 32ff 	mov.w	r2, #4294967295
   81476:	4b30      	ldr	r3, [pc, #192]	; (81538 <vTaskIncrementTick+0x108>)
   81478:	601a      	str	r2, [r3, #0]
   8147a:	e006      	b.n	8148a <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   8147c:	4b2a      	ldr	r3, [pc, #168]	; (81528 <vTaskIncrementTick+0xf8>)
   8147e:	681b      	ldr	r3, [r3, #0]
   81480:	68db      	ldr	r3, [r3, #12]
   81482:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81484:	685a      	ldr	r2, [r3, #4]
   81486:	4b2c      	ldr	r3, [pc, #176]	; (81538 <vTaskIncrementTick+0x108>)
   81488:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   8148a:	4b26      	ldr	r3, [pc, #152]	; (81524 <vTaskIncrementTick+0xf4>)
   8148c:	681a      	ldr	r2, [r3, #0]
   8148e:	4b2a      	ldr	r3, [pc, #168]	; (81538 <vTaskIncrementTick+0x108>)
   81490:	681b      	ldr	r3, [r3, #0]
   81492:	429a      	cmp	r2, r3
   81494:	d342      	bcc.n	8151c <vTaskIncrementTick+0xec>
   81496:	4b24      	ldr	r3, [pc, #144]	; (81528 <vTaskIncrementTick+0xf8>)
   81498:	681b      	ldr	r3, [r3, #0]
   8149a:	681b      	ldr	r3, [r3, #0]
   8149c:	b14b      	cbz	r3, 814b2 <vTaskIncrementTick+0x82>
   8149e:	4b22      	ldr	r3, [pc, #136]	; (81528 <vTaskIncrementTick+0xf8>)
   814a0:	681b      	ldr	r3, [r3, #0]
   814a2:	68db      	ldr	r3, [r3, #12]
   814a4:	68dc      	ldr	r4, [r3, #12]
   814a6:	6863      	ldr	r3, [r4, #4]
   814a8:	4a1e      	ldr	r2, [pc, #120]	; (81524 <vTaskIncrementTick+0xf4>)
   814aa:	6812      	ldr	r2, [r2, #0]
   814ac:	4293      	cmp	r3, r2
   814ae:	d913      	bls.n	814d8 <vTaskIncrementTick+0xa8>
   814b0:	e00e      	b.n	814d0 <vTaskIncrementTick+0xa0>
   814b2:	f04f 32ff 	mov.w	r2, #4294967295
   814b6:	4b20      	ldr	r3, [pc, #128]	; (81538 <vTaskIncrementTick+0x108>)
   814b8:	601a      	str	r2, [r3, #0]
   814ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   814be:	4b1a      	ldr	r3, [pc, #104]	; (81528 <vTaskIncrementTick+0xf8>)
   814c0:	681b      	ldr	r3, [r3, #0]
   814c2:	68db      	ldr	r3, [r3, #12]
   814c4:	68dc      	ldr	r4, [r3, #12]
   814c6:	6863      	ldr	r3, [r4, #4]
   814c8:	4a16      	ldr	r2, [pc, #88]	; (81524 <vTaskIncrementTick+0xf4>)
   814ca:	6812      	ldr	r2, [r2, #0]
   814cc:	4293      	cmp	r3, r2
   814ce:	d907      	bls.n	814e0 <vTaskIncrementTick+0xb0>
   814d0:	4a19      	ldr	r2, [pc, #100]	; (81538 <vTaskIncrementTick+0x108>)
   814d2:	6013      	str	r3, [r2, #0]
   814d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   814d8:	4e18      	ldr	r6, [pc, #96]	; (8153c <vTaskIncrementTick+0x10c>)
   814da:	4f19      	ldr	r7, [pc, #100]	; (81540 <vTaskIncrementTick+0x110>)
   814dc:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8154c <vTaskIncrementTick+0x11c>
   814e0:	1d25      	adds	r5, r4, #4
   814e2:	4628      	mov	r0, r5
   814e4:	47b0      	blx	r6
   814e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   814e8:	b113      	cbz	r3, 814f0 <vTaskIncrementTick+0xc0>
   814ea:	f104 0018 	add.w	r0, r4, #24
   814ee:	47b0      	blx	r6
   814f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   814f2:	683a      	ldr	r2, [r7, #0]
   814f4:	4293      	cmp	r3, r2
   814f6:	bf88      	it	hi
   814f8:	603b      	strhi	r3, [r7, #0]
   814fa:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   814fe:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   81502:	4629      	mov	r1, r5
   81504:	4b0f      	ldr	r3, [pc, #60]	; (81544 <vTaskIncrementTick+0x114>)
   81506:	4798      	blx	r3
   81508:	4b07      	ldr	r3, [pc, #28]	; (81528 <vTaskIncrementTick+0xf8>)
   8150a:	681b      	ldr	r3, [r3, #0]
   8150c:	681b      	ldr	r3, [r3, #0]
   8150e:	2b00      	cmp	r3, #0
   81510:	d1d5      	bne.n	814be <vTaskIncrementTick+0x8e>
   81512:	e7ce      	b.n	814b2 <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
   81514:	4b0c      	ldr	r3, [pc, #48]	; (81548 <vTaskIncrementTick+0x118>)
   81516:	681a      	ldr	r2, [r3, #0]
   81518:	3201      	adds	r2, #1
   8151a:	601a      	str	r2, [r3, #0]
   8151c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81520:	2007095c 	.word	0x2007095c
   81524:	20070960 	.word	0x20070960
   81528:	200708e8 	.word	0x200708e8
   8152c:	000813b1 	.word	0x000813b1
   81530:	20070964 	.word	0x20070964
   81534:	20070954 	.word	0x20070954
   81538:	20070000 	.word	0x20070000
   8153c:	00081369 	.word	0x00081369
   81540:	200708ec 	.word	0x200708ec
   81544:	0008134d 	.word	0x0008134d
   81548:	200708e4 	.word	0x200708e4
   8154c:	200708f0 	.word	0x200708f0

00081550 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81550:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81552:	4b1d      	ldr	r3, [pc, #116]	; (815c8 <vTaskSwitchContext+0x78>)
   81554:	681b      	ldr	r3, [r3, #0]
   81556:	b95b      	cbnz	r3, 81570 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81558:	4b1c      	ldr	r3, [pc, #112]	; (815cc <vTaskSwitchContext+0x7c>)
   8155a:	681b      	ldr	r3, [r3, #0]
   8155c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81560:	009b      	lsls	r3, r3, #2
   81562:	4a1b      	ldr	r2, [pc, #108]	; (815d0 <vTaskSwitchContext+0x80>)
   81564:	58d3      	ldr	r3, [r2, r3]
   81566:	b9cb      	cbnz	r3, 8159c <vTaskSwitchContext+0x4c>
   81568:	4b18      	ldr	r3, [pc, #96]	; (815cc <vTaskSwitchContext+0x7c>)
   8156a:	681b      	ldr	r3, [r3, #0]
   8156c:	b953      	cbnz	r3, 81584 <vTaskSwitchContext+0x34>
   8156e:	e005      	b.n	8157c <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   81570:	2201      	movs	r2, #1
   81572:	4b18      	ldr	r3, [pc, #96]	; (815d4 <vTaskSwitchContext+0x84>)
   81574:	601a      	str	r2, [r3, #0]
   81576:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81578:	681a      	ldr	r2, [r3, #0]
   8157a:	b92a      	cbnz	r2, 81588 <vTaskSwitchContext+0x38>
   8157c:	4b16      	ldr	r3, [pc, #88]	; (815d8 <vTaskSwitchContext+0x88>)
   8157e:	4798      	blx	r3
   81580:	bf00      	nop
   81582:	e7fd      	b.n	81580 <vTaskSwitchContext+0x30>
   81584:	4b11      	ldr	r3, [pc, #68]	; (815cc <vTaskSwitchContext+0x7c>)
   81586:	4912      	ldr	r1, [pc, #72]	; (815d0 <vTaskSwitchContext+0x80>)
   81588:	681a      	ldr	r2, [r3, #0]
   8158a:	3a01      	subs	r2, #1
   8158c:	601a      	str	r2, [r3, #0]
   8158e:	681a      	ldr	r2, [r3, #0]
   81590:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81594:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   81598:	2a00      	cmp	r2, #0
   8159a:	d0ed      	beq.n	81578 <vTaskSwitchContext+0x28>
   8159c:	4b0b      	ldr	r3, [pc, #44]	; (815cc <vTaskSwitchContext+0x7c>)
   8159e:	681b      	ldr	r3, [r3, #0]
   815a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   815a4:	4a0a      	ldr	r2, [pc, #40]	; (815d0 <vTaskSwitchContext+0x80>)
   815a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   815aa:	685a      	ldr	r2, [r3, #4]
   815ac:	6852      	ldr	r2, [r2, #4]
   815ae:	605a      	str	r2, [r3, #4]
   815b0:	f103 0108 	add.w	r1, r3, #8
   815b4:	428a      	cmp	r2, r1
   815b6:	bf04      	itt	eq
   815b8:	6852      	ldreq	r2, [r2, #4]
   815ba:	605a      	streq	r2, [r3, #4]
   815bc:	685b      	ldr	r3, [r3, #4]
   815be:	68da      	ldr	r2, [r3, #12]
   815c0:	4b06      	ldr	r3, [pc, #24]	; (815dc <vTaskSwitchContext+0x8c>)
   815c2:	601a      	str	r2, [r3, #0]
   815c4:	bd08      	pop	{r3, pc}
   815c6:	bf00      	nop
   815c8:	2007095c 	.word	0x2007095c
   815cc:	200708ec 	.word	0x200708ec
   815d0:	200708f0 	.word	0x200708f0
   815d4:	20070968 	.word	0x20070968
   815d8:	000813b1 	.word	0x000813b1
   815dc:	20070958 	.word	0x20070958

000815e0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   815e0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   815e2:	480e      	ldr	r0, [pc, #56]	; (8161c <sysclk_init+0x3c>)
   815e4:	4b0e      	ldr	r3, [pc, #56]	; (81620 <sysclk_init+0x40>)
   815e6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   815e8:	2000      	movs	r0, #0
   815ea:	213e      	movs	r1, #62	; 0x3e
   815ec:	4b0d      	ldr	r3, [pc, #52]	; (81624 <sysclk_init+0x44>)
   815ee:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   815f0:	4c0d      	ldr	r4, [pc, #52]	; (81628 <sysclk_init+0x48>)
   815f2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   815f4:	2800      	cmp	r0, #0
   815f6:	d0fc      	beq.n	815f2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   815f8:	4b0c      	ldr	r3, [pc, #48]	; (8162c <sysclk_init+0x4c>)
   815fa:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   815fc:	4a0c      	ldr	r2, [pc, #48]	; (81630 <sysclk_init+0x50>)
   815fe:	4b0d      	ldr	r3, [pc, #52]	; (81634 <sysclk_init+0x54>)
   81600:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81602:	4c0d      	ldr	r4, [pc, #52]	; (81638 <sysclk_init+0x58>)
   81604:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81606:	2800      	cmp	r0, #0
   81608:	d0fc      	beq.n	81604 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8160a:	2010      	movs	r0, #16
   8160c:	4b0b      	ldr	r3, [pc, #44]	; (8163c <sysclk_init+0x5c>)
   8160e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81610:	4b0b      	ldr	r3, [pc, #44]	; (81640 <sysclk_init+0x60>)
   81612:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81614:	4801      	ldr	r0, [pc, #4]	; (8161c <sysclk_init+0x3c>)
   81616:	4b02      	ldr	r3, [pc, #8]	; (81620 <sysclk_init+0x40>)
   81618:	4798      	blx	r3
   8161a:	bd10      	pop	{r4, pc}
   8161c:	0501bd00 	.word	0x0501bd00
   81620:	00081c95 	.word	0x00081c95
   81624:	000819e9 	.word	0x000819e9
   81628:	00081a3d 	.word	0x00081a3d
   8162c:	00081a4d 	.word	0x00081a4d
   81630:	200d3f01 	.word	0x200d3f01
   81634:	400e0600 	.word	0x400e0600
   81638:	00081a5d 	.word	0x00081a5d
   8163c:	00081985 	.word	0x00081985
   81640:	00081b79 	.word	0x00081b79

00081644 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81644:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81646:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8164a:	4b17      	ldr	r3, [pc, #92]	; (816a8 <board_init+0x64>)
   8164c:	605a      	str	r2, [r3, #4]
   8164e:	200b      	movs	r0, #11
   81650:	4c16      	ldr	r4, [pc, #88]	; (816ac <board_init+0x68>)
   81652:	47a0      	blx	r4
   81654:	200c      	movs	r0, #12
   81656:	47a0      	blx	r4
   81658:	200d      	movs	r0, #13
   8165a:	47a0      	blx	r4
   8165c:	200e      	movs	r0, #14
   8165e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81660:	203b      	movs	r0, #59	; 0x3b
   81662:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81666:	4c12      	ldr	r4, [pc, #72]	; (816b0 <board_init+0x6c>)
   81668:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8166a:	2055      	movs	r0, #85	; 0x55
   8166c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81670:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81672:	2056      	movs	r0, #86	; 0x56
   81674:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81678:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8167a:	2068      	movs	r0, #104	; 0x68
   8167c:	490d      	ldr	r1, [pc, #52]	; (816b4 <board_init+0x70>)
   8167e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81680:	205c      	movs	r0, #92	; 0x5c
   81682:	490d      	ldr	r1, [pc, #52]	; (816b8 <board_init+0x74>)
   81684:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81686:	480d      	ldr	r0, [pc, #52]	; (816bc <board_init+0x78>)
   81688:	f44f 7140 	mov.w	r1, #768	; 0x300
   8168c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81690:	4b0b      	ldr	r3, [pc, #44]	; (816c0 <board_init+0x7c>)
   81692:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81694:	202b      	movs	r0, #43	; 0x2b
   81696:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8169a:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8169c:	202a      	movs	r0, #42	; 0x2a
   8169e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   816a2:	47a0      	blx	r4
   816a4:	bd10      	pop	{r4, pc}
   816a6:	bf00      	nop
   816a8:	400e1a50 	.word	0x400e1a50
   816ac:	00081a6d 	.word	0x00081a6d
   816b0:	00081769 	.word	0x00081769
   816b4:	28000079 	.word	0x28000079
   816b8:	28000001 	.word	0x28000001
   816bc:	400e0e00 	.word	0x400e0e00
   816c0:	0008183d 	.word	0x0008183d

000816c4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   816c4:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   816c6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   816ca:	d016      	beq.n	816fa <pio_set_peripheral+0x36>
   816cc:	d804      	bhi.n	816d8 <pio_set_peripheral+0x14>
   816ce:	b1c1      	cbz	r1, 81702 <pio_set_peripheral+0x3e>
   816d0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   816d4:	d00a      	beq.n	816ec <pio_set_peripheral+0x28>
   816d6:	e013      	b.n	81700 <pio_set_peripheral+0x3c>
   816d8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   816dc:	d011      	beq.n	81702 <pio_set_peripheral+0x3e>
   816de:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   816e2:	d00e      	beq.n	81702 <pio_set_peripheral+0x3e>
   816e4:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   816e8:	d10a      	bne.n	81700 <pio_set_peripheral+0x3c>
   816ea:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   816ec:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   816ee:	6f01      	ldr	r1, [r0, #112]	; 0x70
   816f0:	400b      	ands	r3, r1
   816f2:	ea23 0302 	bic.w	r3, r3, r2
   816f6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   816f8:	e002      	b.n	81700 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   816fa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   816fc:	4313      	orrs	r3, r2
   816fe:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81700:	6042      	str	r2, [r0, #4]
   81702:	4770      	bx	lr

00081704 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81704:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81706:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8170a:	bf14      	ite	ne
   8170c:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8170e:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81710:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81714:	bf14      	ite	ne
   81716:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   81718:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8171a:	f012 0f02 	tst.w	r2, #2
   8171e:	d002      	beq.n	81726 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   81720:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81724:	e004      	b.n	81730 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   81726:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8172a:	bf18      	it	ne
   8172c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81730:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81732:	6001      	str	r1, [r0, #0]
   81734:	4770      	bx	lr
   81736:	bf00      	nop

00081738 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   81738:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8173a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8173c:	9c01      	ldr	r4, [sp, #4]
   8173e:	b10c      	cbz	r4, 81744 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   81740:	6641      	str	r1, [r0, #100]	; 0x64
   81742:	e000      	b.n	81746 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81744:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   81746:	b10b      	cbz	r3, 8174c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   81748:	6501      	str	r1, [r0, #80]	; 0x50
   8174a:	e000      	b.n	8174e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8174c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8174e:	b10a      	cbz	r2, 81754 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   81750:	6301      	str	r1, [r0, #48]	; 0x30
   81752:	e000      	b.n	81756 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81754:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   81756:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81758:	6001      	str	r1, [r0, #0]
}
   8175a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8175e:	4770      	bx	lr

00081760 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81760:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81762:	4770      	bx	lr

00081764 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81764:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81766:	4770      	bx	lr

00081768 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81768:	b570      	push	{r4, r5, r6, lr}
   8176a:	b082      	sub	sp, #8
   8176c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8176e:	0944      	lsrs	r4, r0, #5
   81770:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   81774:	f204 7407 	addw	r4, r4, #1799	; 0x707
   81778:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8177a:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   8177e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81782:	d030      	beq.n	817e6 <pio_configure_pin+0x7e>
   81784:	d806      	bhi.n	81794 <pio_configure_pin+0x2c>
   81786:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8178a:	d00a      	beq.n	817a2 <pio_configure_pin+0x3a>
   8178c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81790:	d018      	beq.n	817c4 <pio_configure_pin+0x5c>
   81792:	e049      	b.n	81828 <pio_configure_pin+0xc0>
   81794:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81798:	d030      	beq.n	817fc <pio_configure_pin+0x94>
   8179a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8179e:	d02d      	beq.n	817fc <pio_configure_pin+0x94>
   817a0:	e042      	b.n	81828 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   817a2:	f000 001f 	and.w	r0, r0, #31
   817a6:	2401      	movs	r4, #1
   817a8:	4084      	lsls	r4, r0
   817aa:	4630      	mov	r0, r6
   817ac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   817b0:	4622      	mov	r2, r4
   817b2:	4b1f      	ldr	r3, [pc, #124]	; (81830 <pio_configure_pin+0xc8>)
   817b4:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   817b6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   817ba:	bf14      	ite	ne
   817bc:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   817be:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   817c0:	2001      	movs	r0, #1
   817c2:	e032      	b.n	8182a <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   817c4:	f000 001f 	and.w	r0, r0, #31
   817c8:	2401      	movs	r4, #1
   817ca:	4084      	lsls	r4, r0
   817cc:	4630      	mov	r0, r6
   817ce:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   817d2:	4622      	mov	r2, r4
   817d4:	4b16      	ldr	r3, [pc, #88]	; (81830 <pio_configure_pin+0xc8>)
   817d6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   817d8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   817dc:	bf14      	ite	ne
   817de:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   817e0:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   817e2:	2001      	movs	r0, #1
   817e4:	e021      	b.n	8182a <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   817e6:	f000 011f 	and.w	r1, r0, #31
   817ea:	2401      	movs	r4, #1
   817ec:	4630      	mov	r0, r6
   817ee:	fa04 f101 	lsl.w	r1, r4, r1
   817f2:	462a      	mov	r2, r5
   817f4:	4b0f      	ldr	r3, [pc, #60]	; (81834 <pio_configure_pin+0xcc>)
   817f6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   817f8:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   817fa:	e016      	b.n	8182a <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   817fc:	f000 011f 	and.w	r1, r0, #31
   81800:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81802:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81806:	ea05 0304 	and.w	r3, r5, r4
   8180a:	9300      	str	r3, [sp, #0]
   8180c:	4630      	mov	r0, r6
   8180e:	fa04 f101 	lsl.w	r1, r4, r1
   81812:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81816:	bf14      	ite	ne
   81818:	2200      	movne	r2, #0
   8181a:	2201      	moveq	r2, #1
   8181c:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81820:	4d05      	ldr	r5, [pc, #20]	; (81838 <pio_configure_pin+0xd0>)
   81822:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   81824:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81826:	e000      	b.n	8182a <pio_configure_pin+0xc2>

	default:
		return 0;
   81828:	2000      	movs	r0, #0
	}

	return 1;
}
   8182a:	b002      	add	sp, #8
   8182c:	bd70      	pop	{r4, r5, r6, pc}
   8182e:	bf00      	nop
   81830:	000816c5 	.word	0x000816c5
   81834:	00081705 	.word	0x00081705
   81838:	00081739 	.word	0x00081739

0008183c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   8183c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8183e:	b083      	sub	sp, #12
   81840:	4607      	mov	r7, r0
   81842:	460e      	mov	r6, r1
   81844:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81846:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8184a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8184e:	d026      	beq.n	8189e <pio_configure_pin_group+0x62>
   81850:	d806      	bhi.n	81860 <pio_configure_pin_group+0x24>
   81852:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   81856:	d00a      	beq.n	8186e <pio_configure_pin_group+0x32>
   81858:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   8185c:	d013      	beq.n	81886 <pio_configure_pin_group+0x4a>
   8185e:	e034      	b.n	818ca <pio_configure_pin_group+0x8e>
   81860:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81864:	d01f      	beq.n	818a6 <pio_configure_pin_group+0x6a>
   81866:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8186a:	d01c      	beq.n	818a6 <pio_configure_pin_group+0x6a>
   8186c:	e02d      	b.n	818ca <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8186e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81872:	4632      	mov	r2, r6
   81874:	4b16      	ldr	r3, [pc, #88]	; (818d0 <pio_configure_pin_group+0x94>)
   81876:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81878:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8187c:	bf14      	ite	ne
   8187e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81880:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81882:	2001      	movs	r0, #1
   81884:	e022      	b.n	818cc <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81886:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8188a:	4632      	mov	r2, r6
   8188c:	4b10      	ldr	r3, [pc, #64]	; (818d0 <pio_configure_pin_group+0x94>)
   8188e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81890:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81894:	bf14      	ite	ne
   81896:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81898:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8189a:	2001      	movs	r0, #1
   8189c:	e016      	b.n	818cc <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8189e:	4b0d      	ldr	r3, [pc, #52]	; (818d4 <pio_configure_pin_group+0x98>)
   818a0:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   818a2:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   818a4:	e012      	b.n	818cc <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   818a6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   818aa:	f005 0301 	and.w	r3, r5, #1
   818ae:	9300      	str	r3, [sp, #0]
   818b0:	4638      	mov	r0, r7
   818b2:	4631      	mov	r1, r6
   818b4:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   818b8:	bf14      	ite	ne
   818ba:	2200      	movne	r2, #0
   818bc:	2201      	moveq	r2, #1
   818be:	f3c5 0380 	ubfx	r3, r5, #2, #1
   818c2:	4c05      	ldr	r4, [pc, #20]	; (818d8 <pio_configure_pin_group+0x9c>)
   818c4:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   818c6:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   818c8:	e000      	b.n	818cc <pio_configure_pin_group+0x90>

	default:
		return 0;
   818ca:	2000      	movs	r0, #0
	}

	return 1;
}
   818cc:	b003      	add	sp, #12
   818ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   818d0:	000816c5 	.word	0x000816c5
   818d4:	00081705 	.word	0x00081705
   818d8:	00081739 	.word	0x00081739

000818dc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   818dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   818e0:	4604      	mov	r4, r0
   818e2:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   818e4:	4b10      	ldr	r3, [pc, #64]	; (81928 <pio_handler_process+0x4c>)
   818e6:	4798      	blx	r3
   818e8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   818ea:	4620      	mov	r0, r4
   818ec:	4b0f      	ldr	r3, [pc, #60]	; (8192c <pio_handler_process+0x50>)
   818ee:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   818f0:	4005      	ands	r5, r0
   818f2:	d017      	beq.n	81924 <pio_handler_process+0x48>
   818f4:	4f0e      	ldr	r7, [pc, #56]	; (81930 <pio_handler_process+0x54>)
   818f6:	f107 040c 	add.w	r4, r7, #12
   818fa:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   818fc:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   81900:	42b3      	cmp	r3, r6
   81902:	d10a      	bne.n	8191a <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81904:	f854 1c08 	ldr.w	r1, [r4, #-8]
   81908:	4229      	tst	r1, r5
   8190a:	d006      	beq.n	8191a <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8190c:	6823      	ldr	r3, [r4, #0]
   8190e:	4630      	mov	r0, r6
   81910:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81912:	f854 3c08 	ldr.w	r3, [r4, #-8]
   81916:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8191a:	42bc      	cmp	r4, r7
   8191c:	d002      	beq.n	81924 <pio_handler_process+0x48>
   8191e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   81920:	2d00      	cmp	r5, #0
   81922:	d1eb      	bne.n	818fc <pio_handler_process+0x20>
   81924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81928:	00081761 	.word	0x00081761
   8192c:	00081765 	.word	0x00081765
   81930:	2007096c 	.word	0x2007096c

00081934 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81934:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81936:	4802      	ldr	r0, [pc, #8]	; (81940 <PIOA_Handler+0xc>)
   81938:	210b      	movs	r1, #11
   8193a:	4b02      	ldr	r3, [pc, #8]	; (81944 <PIOA_Handler+0x10>)
   8193c:	4798      	blx	r3
   8193e:	bd08      	pop	{r3, pc}
   81940:	400e0e00 	.word	0x400e0e00
   81944:	000818dd 	.word	0x000818dd

00081948 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81948:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8194a:	4802      	ldr	r0, [pc, #8]	; (81954 <PIOB_Handler+0xc>)
   8194c:	210c      	movs	r1, #12
   8194e:	4b02      	ldr	r3, [pc, #8]	; (81958 <PIOB_Handler+0x10>)
   81950:	4798      	blx	r3
   81952:	bd08      	pop	{r3, pc}
   81954:	400e1000 	.word	0x400e1000
   81958:	000818dd 	.word	0x000818dd

0008195c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8195c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8195e:	4802      	ldr	r0, [pc, #8]	; (81968 <PIOC_Handler+0xc>)
   81960:	210d      	movs	r1, #13
   81962:	4b02      	ldr	r3, [pc, #8]	; (8196c <PIOC_Handler+0x10>)
   81964:	4798      	blx	r3
   81966:	bd08      	pop	{r3, pc}
   81968:	400e1200 	.word	0x400e1200
   8196c:	000818dd 	.word	0x000818dd

00081970 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81970:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81972:	4802      	ldr	r0, [pc, #8]	; (8197c <PIOD_Handler+0xc>)
   81974:	210e      	movs	r1, #14
   81976:	4b02      	ldr	r3, [pc, #8]	; (81980 <PIOD_Handler+0x10>)
   81978:	4798      	blx	r3
   8197a:	bd08      	pop	{r3, pc}
   8197c:	400e1400 	.word	0x400e1400
   81980:	000818dd 	.word	0x000818dd

00081984 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81984:	4b17      	ldr	r3, [pc, #92]	; (819e4 <pmc_switch_mck_to_pllack+0x60>)
   81986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81988:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   8198c:	4310      	orrs	r0, r2
   8198e:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81990:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81992:	f013 0f08 	tst.w	r3, #8
   81996:	d109      	bne.n	819ac <pmc_switch_mck_to_pllack+0x28>
   81998:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8199c:	4911      	ldr	r1, [pc, #68]	; (819e4 <pmc_switch_mck_to_pllack+0x60>)
   8199e:	e001      	b.n	819a4 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   819a0:	3b01      	subs	r3, #1
   819a2:	d019      	beq.n	819d8 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   819a4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   819a6:	f012 0f08 	tst.w	r2, #8
   819aa:	d0f9      	beq.n	819a0 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   819ac:	4b0d      	ldr	r3, [pc, #52]	; (819e4 <pmc_switch_mck_to_pllack+0x60>)
   819ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   819b0:	f022 0203 	bic.w	r2, r2, #3
   819b4:	f042 0202 	orr.w	r2, r2, #2
   819b8:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   819ba:	6e98      	ldr	r0, [r3, #104]	; 0x68
   819bc:	f010 0008 	ands.w	r0, r0, #8
   819c0:	d10c      	bne.n	819dc <pmc_switch_mck_to_pllack+0x58>
   819c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   819c6:	4907      	ldr	r1, [pc, #28]	; (819e4 <pmc_switch_mck_to_pllack+0x60>)
   819c8:	e001      	b.n	819ce <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   819ca:	3b01      	subs	r3, #1
   819cc:	d008      	beq.n	819e0 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   819ce:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   819d0:	f012 0f08 	tst.w	r2, #8
   819d4:	d0f9      	beq.n	819ca <pmc_switch_mck_to_pllack+0x46>
   819d6:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   819d8:	2001      	movs	r0, #1
   819da:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   819dc:	2000      	movs	r0, #0
   819de:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   819e0:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   819e2:	4770      	bx	lr
   819e4:	400e0600 	.word	0x400e0600

000819e8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   819e8:	b138      	cbz	r0, 819fa <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   819ea:	4911      	ldr	r1, [pc, #68]	; (81a30 <pmc_switch_mainck_to_xtal+0x48>)
   819ec:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   819ee:	4a11      	ldr	r2, [pc, #68]	; (81a34 <pmc_switch_mainck_to_xtal+0x4c>)
   819f0:	401a      	ands	r2, r3
   819f2:	4b11      	ldr	r3, [pc, #68]	; (81a38 <pmc_switch_mainck_to_xtal+0x50>)
   819f4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   819f6:	620b      	str	r3, [r1, #32]
   819f8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   819fa:	4a0d      	ldr	r2, [pc, #52]	; (81a30 <pmc_switch_mainck_to_xtal+0x48>)
   819fc:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   819fe:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81a02:	f023 0303 	bic.w	r3, r3, #3
   81a06:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81a0a:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81a0e:	0209      	lsls	r1, r1, #8
   81a10:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81a12:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81a14:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81a16:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81a18:	f013 0f01 	tst.w	r3, #1
   81a1c:	d0fb      	beq.n	81a16 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81a1e:	4a04      	ldr	r2, [pc, #16]	; (81a30 <pmc_switch_mainck_to_xtal+0x48>)
   81a20:	6a13      	ldr	r3, [r2, #32]
   81a22:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81a2a:	6213      	str	r3, [r2, #32]
   81a2c:	4770      	bx	lr
   81a2e:	bf00      	nop
   81a30:	400e0600 	.word	0x400e0600
   81a34:	fec8fffc 	.word	0xfec8fffc
   81a38:	01370002 	.word	0x01370002

00081a3c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81a3c:	4b02      	ldr	r3, [pc, #8]	; (81a48 <pmc_osc_is_ready_mainck+0xc>)
   81a3e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81a40:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81a44:	4770      	bx	lr
   81a46:	bf00      	nop
   81a48:	400e0600 	.word	0x400e0600

00081a4c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81a4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81a50:	4b01      	ldr	r3, [pc, #4]	; (81a58 <pmc_disable_pllack+0xc>)
   81a52:	629a      	str	r2, [r3, #40]	; 0x28
   81a54:	4770      	bx	lr
   81a56:	bf00      	nop
   81a58:	400e0600 	.word	0x400e0600

00081a5c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81a5c:	4b02      	ldr	r3, [pc, #8]	; (81a68 <pmc_is_locked_pllack+0xc>)
   81a5e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81a60:	f000 0002 	and.w	r0, r0, #2
   81a64:	4770      	bx	lr
   81a66:	bf00      	nop
   81a68:	400e0600 	.word	0x400e0600

00081a6c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81a6c:	282c      	cmp	r0, #44	; 0x2c
   81a6e:	d820      	bhi.n	81ab2 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   81a70:	281f      	cmp	r0, #31
   81a72:	d80d      	bhi.n	81a90 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81a74:	4b12      	ldr	r3, [pc, #72]	; (81ac0 <pmc_enable_periph_clk+0x54>)
   81a76:	699a      	ldr	r2, [r3, #24]
   81a78:	2301      	movs	r3, #1
   81a7a:	4083      	lsls	r3, r0
   81a7c:	401a      	ands	r2, r3
   81a7e:	4293      	cmp	r3, r2
   81a80:	d019      	beq.n	81ab6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   81a82:	2301      	movs	r3, #1
   81a84:	fa03 f000 	lsl.w	r0, r3, r0
   81a88:	4b0d      	ldr	r3, [pc, #52]	; (81ac0 <pmc_enable_periph_clk+0x54>)
   81a8a:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81a8c:	2000      	movs	r0, #0
   81a8e:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81a90:	4b0b      	ldr	r3, [pc, #44]	; (81ac0 <pmc_enable_periph_clk+0x54>)
   81a92:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
   81a96:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81a98:	2301      	movs	r3, #1
   81a9a:	4083      	lsls	r3, r0
   81a9c:	401a      	ands	r2, r3
   81a9e:	4293      	cmp	r3, r2
   81aa0:	d00b      	beq.n	81aba <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   81aa2:	2301      	movs	r3, #1
   81aa4:	fa03 f000 	lsl.w	r0, r3, r0
   81aa8:	4b05      	ldr	r3, [pc, #20]	; (81ac0 <pmc_enable_periph_clk+0x54>)
   81aaa:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   81aae:	2000      	movs	r0, #0
   81ab0:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   81ab2:	2001      	movs	r0, #1
   81ab4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81ab6:	2000      	movs	r0, #0
   81ab8:	4770      	bx	lr
   81aba:	2000      	movs	r0, #0
}
   81abc:	4770      	bx	lr
   81abe:	bf00      	nop
   81ac0:	400e0600 	.word	0x400e0600

00081ac4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81ac4:	e7fe      	b.n	81ac4 <Dummy_Handler>
   81ac6:	bf00      	nop

00081ac8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81ac8:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81aca:	4b1e      	ldr	r3, [pc, #120]	; (81b44 <Reset_Handler+0x7c>)
   81acc:	4a1e      	ldr	r2, [pc, #120]	; (81b48 <Reset_Handler+0x80>)
   81ace:	429a      	cmp	r2, r3
   81ad0:	d003      	beq.n	81ada <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   81ad2:	4b1e      	ldr	r3, [pc, #120]	; (81b4c <Reset_Handler+0x84>)
   81ad4:	4a1b      	ldr	r2, [pc, #108]	; (81b44 <Reset_Handler+0x7c>)
   81ad6:	429a      	cmp	r2, r3
   81ad8:	d304      	bcc.n	81ae4 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81ada:	4b1d      	ldr	r3, [pc, #116]	; (81b50 <Reset_Handler+0x88>)
   81adc:	4a1d      	ldr	r2, [pc, #116]	; (81b54 <Reset_Handler+0x8c>)
   81ade:	429a      	cmp	r2, r3
   81ae0:	d30f      	bcc.n	81b02 <Reset_Handler+0x3a>
   81ae2:	e01a      	b.n	81b1a <Reset_Handler+0x52>
   81ae4:	4b1c      	ldr	r3, [pc, #112]	; (81b58 <Reset_Handler+0x90>)
   81ae6:	4c1d      	ldr	r4, [pc, #116]	; (81b5c <Reset_Handler+0x94>)
   81ae8:	1ae4      	subs	r4, r4, r3
   81aea:	f024 0403 	bic.w	r4, r4, #3
   81aee:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81af0:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   81af2:	4814      	ldr	r0, [pc, #80]	; (81b44 <Reset_Handler+0x7c>)
   81af4:	4914      	ldr	r1, [pc, #80]	; (81b48 <Reset_Handler+0x80>)
   81af6:	585a      	ldr	r2, [r3, r1]
   81af8:	501a      	str	r2, [r3, r0]
   81afa:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81afc:	42a3      	cmp	r3, r4
   81afe:	d1fa      	bne.n	81af6 <Reset_Handler+0x2e>
   81b00:	e7eb      	b.n	81ada <Reset_Handler+0x12>
   81b02:	4b17      	ldr	r3, [pc, #92]	; (81b60 <Reset_Handler+0x98>)
   81b04:	4917      	ldr	r1, [pc, #92]	; (81b64 <Reset_Handler+0x9c>)
   81b06:	1ac9      	subs	r1, r1, r3
   81b08:	f021 0103 	bic.w	r1, r1, #3
   81b0c:	1d1a      	adds	r2, r3, #4
   81b0e:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   81b10:	2200      	movs	r2, #0
   81b12:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81b16:	428b      	cmp	r3, r1
   81b18:	d1fb      	bne.n	81b12 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81b1a:	4a13      	ldr	r2, [pc, #76]	; (81b68 <Reset_Handler+0xa0>)
   81b1c:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   81b20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81b24:	4911      	ldr	r1, [pc, #68]	; (81b6c <Reset_Handler+0xa4>)
   81b26:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81b28:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   81b2c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   81b30:	d203      	bcs.n	81b3a <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81b32:	688a      	ldr	r2, [r1, #8]
   81b34:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81b38:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81b3a:	4b0d      	ldr	r3, [pc, #52]	; (81b70 <Reset_Handler+0xa8>)
   81b3c:	4798      	blx	r3

	/* Branch to main function */
	main();
   81b3e:	4b0d      	ldr	r3, [pc, #52]	; (81b74 <Reset_Handler+0xac>)
   81b40:	4798      	blx	r3
   81b42:	e7fe      	b.n	81b42 <Reset_Handler+0x7a>
   81b44:	20070000 	.word	0x20070000
   81b48:	00084734 	.word	0x00084734
   81b4c:	200708c8 	.word	0x200708c8
   81b50:	20070aa0 	.word	0x20070aa0
   81b54:	200708c8 	.word	0x200708c8
   81b58:	20070004 	.word	0x20070004
   81b5c:	200708cb 	.word	0x200708cb
   81b60:	200708c4 	.word	0x200708c4
   81b64:	20070a9b 	.word	0x20070a9b
   81b68:	00080000 	.word	0x00080000
   81b6c:	e000ed00 	.word	0xe000ed00
   81b70:	00081da5 	.word	0x00081da5
   81b74:	0008044d 	.word	0x0008044d

00081b78 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81b78:	4b3e      	ldr	r3, [pc, #248]	; (81c74 <SystemCoreClockUpdate+0xfc>)
   81b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81b7c:	f003 0303 	and.w	r3, r3, #3
   81b80:	2b03      	cmp	r3, #3
   81b82:	d85f      	bhi.n	81c44 <SystemCoreClockUpdate+0xcc>
   81b84:	e8df f003 	tbb	[pc, r3]
   81b88:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81b8c:	4b3a      	ldr	r3, [pc, #232]	; (81c78 <SystemCoreClockUpdate+0x100>)
   81b8e:	695b      	ldr	r3, [r3, #20]
   81b90:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81b94:	bf14      	ite	ne
   81b96:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81b9a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81b9e:	4b37      	ldr	r3, [pc, #220]	; (81c7c <SystemCoreClockUpdate+0x104>)
   81ba0:	601a      	str	r2, [r3, #0]
   81ba2:	e04f      	b.n	81c44 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81ba4:	4b33      	ldr	r3, [pc, #204]	; (81c74 <SystemCoreClockUpdate+0xfc>)
   81ba6:	6a1b      	ldr	r3, [r3, #32]
   81ba8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81bac:	d003      	beq.n	81bb6 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81bae:	4a34      	ldr	r2, [pc, #208]	; (81c80 <SystemCoreClockUpdate+0x108>)
   81bb0:	4b32      	ldr	r3, [pc, #200]	; (81c7c <SystemCoreClockUpdate+0x104>)
   81bb2:	601a      	str	r2, [r3, #0]
   81bb4:	e046      	b.n	81c44 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81bb6:	4a33      	ldr	r2, [pc, #204]	; (81c84 <SystemCoreClockUpdate+0x10c>)
   81bb8:	4b30      	ldr	r3, [pc, #192]	; (81c7c <SystemCoreClockUpdate+0x104>)
   81bba:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81bbc:	4b2d      	ldr	r3, [pc, #180]	; (81c74 <SystemCoreClockUpdate+0xfc>)
   81bbe:	6a1b      	ldr	r3, [r3, #32]
   81bc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81bc4:	2b10      	cmp	r3, #16
   81bc6:	d002      	beq.n	81bce <SystemCoreClockUpdate+0x56>
   81bc8:	2b20      	cmp	r3, #32
   81bca:	d004      	beq.n	81bd6 <SystemCoreClockUpdate+0x5e>
   81bcc:	e03a      	b.n	81c44 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81bce:	4a2e      	ldr	r2, [pc, #184]	; (81c88 <SystemCoreClockUpdate+0x110>)
   81bd0:	4b2a      	ldr	r3, [pc, #168]	; (81c7c <SystemCoreClockUpdate+0x104>)
   81bd2:	601a      	str	r2, [r3, #0]
				break;
   81bd4:	e036      	b.n	81c44 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81bd6:	4a2a      	ldr	r2, [pc, #168]	; (81c80 <SystemCoreClockUpdate+0x108>)
   81bd8:	4b28      	ldr	r3, [pc, #160]	; (81c7c <SystemCoreClockUpdate+0x104>)
   81bda:	601a      	str	r2, [r3, #0]
				break;
   81bdc:	e032      	b.n	81c44 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81bde:	4b25      	ldr	r3, [pc, #148]	; (81c74 <SystemCoreClockUpdate+0xfc>)
   81be0:	6a1b      	ldr	r3, [r3, #32]
   81be2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81be6:	d003      	beq.n	81bf0 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81be8:	4a25      	ldr	r2, [pc, #148]	; (81c80 <SystemCoreClockUpdate+0x108>)
   81bea:	4b24      	ldr	r3, [pc, #144]	; (81c7c <SystemCoreClockUpdate+0x104>)
   81bec:	601a      	str	r2, [r3, #0]
   81bee:	e012      	b.n	81c16 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81bf0:	4a24      	ldr	r2, [pc, #144]	; (81c84 <SystemCoreClockUpdate+0x10c>)
   81bf2:	4b22      	ldr	r3, [pc, #136]	; (81c7c <SystemCoreClockUpdate+0x104>)
   81bf4:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81bf6:	4b1f      	ldr	r3, [pc, #124]	; (81c74 <SystemCoreClockUpdate+0xfc>)
   81bf8:	6a1b      	ldr	r3, [r3, #32]
   81bfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81bfe:	2b10      	cmp	r3, #16
   81c00:	d002      	beq.n	81c08 <SystemCoreClockUpdate+0x90>
   81c02:	2b20      	cmp	r3, #32
   81c04:	d004      	beq.n	81c10 <SystemCoreClockUpdate+0x98>
   81c06:	e006      	b.n	81c16 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81c08:	4a1f      	ldr	r2, [pc, #124]	; (81c88 <SystemCoreClockUpdate+0x110>)
   81c0a:	4b1c      	ldr	r3, [pc, #112]	; (81c7c <SystemCoreClockUpdate+0x104>)
   81c0c:	601a      	str	r2, [r3, #0]
				break;
   81c0e:	e002      	b.n	81c16 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81c10:	4a1b      	ldr	r2, [pc, #108]	; (81c80 <SystemCoreClockUpdate+0x108>)
   81c12:	4b1a      	ldr	r3, [pc, #104]	; (81c7c <SystemCoreClockUpdate+0x104>)
   81c14:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81c16:	4b17      	ldr	r3, [pc, #92]	; (81c74 <SystemCoreClockUpdate+0xfc>)
   81c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81c1a:	f003 0303 	and.w	r3, r3, #3
   81c1e:	2b02      	cmp	r3, #2
   81c20:	d10d      	bne.n	81c3e <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81c22:	4b14      	ldr	r3, [pc, #80]	; (81c74 <SystemCoreClockUpdate+0xfc>)
   81c24:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81c26:	6a99      	ldr	r1, [r3, #40]	; 0x28
   81c28:	4b14      	ldr	r3, [pc, #80]	; (81c7c <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81c2a:	f3c0 400a 	ubfx	r0, r0, #16, #11
   81c2e:	681a      	ldr	r2, [r3, #0]
   81c30:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81c34:	b2c9      	uxtb	r1, r1
   81c36:	fbb2 f2f1 	udiv	r2, r2, r1
   81c3a:	601a      	str	r2, [r3, #0]
   81c3c:	e002      	b.n	81c44 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81c3e:	4a13      	ldr	r2, [pc, #76]	; (81c8c <SystemCoreClockUpdate+0x114>)
   81c40:	4b0e      	ldr	r3, [pc, #56]	; (81c7c <SystemCoreClockUpdate+0x104>)
   81c42:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81c44:	4b0b      	ldr	r3, [pc, #44]	; (81c74 <SystemCoreClockUpdate+0xfc>)
   81c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81c48:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81c4c:	2b70      	cmp	r3, #112	; 0x70
   81c4e:	d107      	bne.n	81c60 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   81c50:	4b0a      	ldr	r3, [pc, #40]	; (81c7c <SystemCoreClockUpdate+0x104>)
   81c52:	681a      	ldr	r2, [r3, #0]
   81c54:	490e      	ldr	r1, [pc, #56]	; (81c90 <SystemCoreClockUpdate+0x118>)
   81c56:	fba1 0202 	umull	r0, r2, r1, r2
   81c5a:	0852      	lsrs	r2, r2, #1
   81c5c:	601a      	str	r2, [r3, #0]
   81c5e:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81c60:	4b04      	ldr	r3, [pc, #16]	; (81c74 <SystemCoreClockUpdate+0xfc>)
   81c62:	6b19      	ldr	r1, [r3, #48]	; 0x30
   81c64:	4b05      	ldr	r3, [pc, #20]	; (81c7c <SystemCoreClockUpdate+0x104>)
   81c66:	f3c1 1102 	ubfx	r1, r1, #4, #3
   81c6a:	681a      	ldr	r2, [r3, #0]
   81c6c:	40ca      	lsrs	r2, r1
   81c6e:	601a      	str	r2, [r3, #0]
   81c70:	4770      	bx	lr
   81c72:	bf00      	nop
   81c74:	400e0600 	.word	0x400e0600
   81c78:	400e1a10 	.word	0x400e1a10
   81c7c:	20070004 	.word	0x20070004
   81c80:	00b71b00 	.word	0x00b71b00
   81c84:	003d0900 	.word	0x003d0900
   81c88:	007a1200 	.word	0x007a1200
   81c8c:	0e4e1c00 	.word	0x0e4e1c00
   81c90:	aaaaaaab 	.word	0xaaaaaaab

00081c94 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   81c94:	4b1b      	ldr	r3, [pc, #108]	; (81d04 <system_init_flash+0x70>)
   81c96:	4298      	cmp	r0, r3
   81c98:	d806      	bhi.n	81ca8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   81c9a:	2300      	movs	r3, #0
   81c9c:	4a1a      	ldr	r2, [pc, #104]	; (81d08 <system_init_flash+0x74>)
   81c9e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   81ca0:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81ca4:	6013      	str	r3, [r2, #0]
   81ca6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   81ca8:	4b18      	ldr	r3, [pc, #96]	; (81d0c <system_init_flash+0x78>)
   81caa:	4298      	cmp	r0, r3
   81cac:	d807      	bhi.n	81cbe <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   81cae:	f44f 7380 	mov.w	r3, #256	; 0x100
   81cb2:	4a15      	ldr	r2, [pc, #84]	; (81d08 <system_init_flash+0x74>)
   81cb4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   81cb6:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81cba:	6013      	str	r3, [r2, #0]
   81cbc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   81cbe:	4b14      	ldr	r3, [pc, #80]	; (81d10 <system_init_flash+0x7c>)
   81cc0:	4298      	cmp	r0, r3
   81cc2:	d807      	bhi.n	81cd4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   81cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
   81cc8:	4a0f      	ldr	r2, [pc, #60]	; (81d08 <system_init_flash+0x74>)
   81cca:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   81ccc:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81cd0:	6013      	str	r3, [r2, #0]
   81cd2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   81cd4:	4b0f      	ldr	r3, [pc, #60]	; (81d14 <system_init_flash+0x80>)
   81cd6:	4298      	cmp	r0, r3
   81cd8:	d807      	bhi.n	81cea <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   81cda:	f44f 7340 	mov.w	r3, #768	; 0x300
   81cde:	4a0a      	ldr	r2, [pc, #40]	; (81d08 <system_init_flash+0x74>)
   81ce0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   81ce2:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81ce6:	6013      	str	r3, [r2, #0]
   81ce8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   81cea:	4b0b      	ldr	r3, [pc, #44]	; (81d18 <system_init_flash+0x84>)
   81cec:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   81cee:	bf94      	ite	ls
   81cf0:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   81cf4:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
   81cf8:	4a03      	ldr	r2, [pc, #12]	; (81d08 <system_init_flash+0x74>)
   81cfa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   81cfc:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81d00:	6013      	str	r3, [r2, #0]
   81d02:	4770      	bx	lr
   81d04:	0121eabf 	.word	0x0121eabf
   81d08:	400e0a00 	.word	0x400e0a00
   81d0c:	02faf07f 	.word	0x02faf07f
   81d10:	03d08fff 	.word	0x03d08fff
   81d14:	04c4b3ff 	.word	0x04c4b3ff
   81d18:	055d4a7f 	.word	0x055d4a7f

00081d1c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81d1c:	4b09      	ldr	r3, [pc, #36]	; (81d44 <_sbrk+0x28>)
   81d1e:	681b      	ldr	r3, [r3, #0]
   81d20:	b913      	cbnz	r3, 81d28 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   81d22:	4a09      	ldr	r2, [pc, #36]	; (81d48 <_sbrk+0x2c>)
   81d24:	4b07      	ldr	r3, [pc, #28]	; (81d44 <_sbrk+0x28>)
   81d26:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   81d28:	4b06      	ldr	r3, [pc, #24]	; (81d44 <_sbrk+0x28>)
   81d2a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81d2c:	181a      	adds	r2, r3, r0
   81d2e:	4907      	ldr	r1, [pc, #28]	; (81d4c <_sbrk+0x30>)
   81d30:	4291      	cmp	r1, r2
   81d32:	db04      	blt.n	81d3e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   81d34:	4610      	mov	r0, r2
   81d36:	4a03      	ldr	r2, [pc, #12]	; (81d44 <_sbrk+0x28>)
   81d38:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81d3a:	4618      	mov	r0, r3
   81d3c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   81d3e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   81d42:	4770      	bx	lr
   81d44:	200709dc 	.word	0x200709dc
   81d48:	20072aa0 	.word	0x20072aa0
   81d4c:	20087ffc 	.word	0x20087ffc

00081d50 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81d50:	f04f 30ff 	mov.w	r0, #4294967295
   81d54:	4770      	bx	lr
   81d56:	bf00      	nop

00081d58 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   81d58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81d5c:	604b      	str	r3, [r1, #4]

	return 0;
}
   81d5e:	2000      	movs	r0, #0
   81d60:	4770      	bx	lr
   81d62:	bf00      	nop

00081d64 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81d64:	2001      	movs	r0, #1
   81d66:	4770      	bx	lr

00081d68 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81d68:	2000      	movs	r0, #0
   81d6a:	4770      	bx	lr

00081d6c <atexit>:
   81d6c:	4601      	mov	r1, r0
   81d6e:	2000      	movs	r0, #0
   81d70:	4602      	mov	r2, r0
   81d72:	4603      	mov	r3, r0
   81d74:	f000 be32 	b.w	829dc <__register_exitproc>

00081d78 <__libc_fini_array>:
   81d78:	b538      	push	{r3, r4, r5, lr}
   81d7a:	4d08      	ldr	r5, [pc, #32]	; (81d9c <__libc_fini_array+0x24>)
   81d7c:	4c08      	ldr	r4, [pc, #32]	; (81da0 <__libc_fini_array+0x28>)
   81d7e:	1b64      	subs	r4, r4, r5
   81d80:	10a4      	asrs	r4, r4, #2
   81d82:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   81d86:	b124      	cbz	r4, 81d92 <__libc_fini_array+0x1a>
   81d88:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   81d8c:	3c01      	subs	r4, #1
   81d8e:	4798      	blx	r3
   81d90:	e7f9      	b.n	81d86 <__libc_fini_array+0xe>
   81d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81d96:	f002 bcc1 	b.w	8471c <_fini>
   81d9a:	bf00      	nop
   81d9c:	00084728 	.word	0x00084728
   81da0:	0008472c 	.word	0x0008472c

00081da4 <__libc_init_array>:
   81da4:	b570      	push	{r4, r5, r6, lr}
   81da6:	4b0e      	ldr	r3, [pc, #56]	; (81de0 <__libc_init_array+0x3c>)
   81da8:	4d0e      	ldr	r5, [pc, #56]	; (81de4 <__libc_init_array+0x40>)
   81daa:	2400      	movs	r4, #0
   81dac:	1aed      	subs	r5, r5, r3
   81dae:	10ad      	asrs	r5, r5, #2
   81db0:	461e      	mov	r6, r3
   81db2:	42ac      	cmp	r4, r5
   81db4:	d004      	beq.n	81dc0 <__libc_init_array+0x1c>
   81db6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   81dba:	4790      	blx	r2
   81dbc:	3401      	adds	r4, #1
   81dbe:	e7f8      	b.n	81db2 <__libc_init_array+0xe>
   81dc0:	f002 fca2 	bl	84708 <_init>
   81dc4:	4d08      	ldr	r5, [pc, #32]	; (81de8 <__libc_init_array+0x44>)
   81dc6:	4b09      	ldr	r3, [pc, #36]	; (81dec <__libc_init_array+0x48>)
   81dc8:	2400      	movs	r4, #0
   81dca:	1aed      	subs	r5, r5, r3
   81dcc:	10ad      	asrs	r5, r5, #2
   81dce:	461e      	mov	r6, r3
   81dd0:	42ac      	cmp	r4, r5
   81dd2:	d004      	beq.n	81dde <__libc_init_array+0x3a>
   81dd4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   81dd8:	4790      	blx	r2
   81dda:	3401      	adds	r4, #1
   81ddc:	e7f8      	b.n	81dd0 <__libc_init_array+0x2c>
   81dde:	bd70      	pop	{r4, r5, r6, pc}
   81de0:	00084714 	.word	0x00084714
   81de4:	00084714 	.word	0x00084714
   81de8:	0008471c 	.word	0x0008471c
   81dec:	00084714 	.word	0x00084714

00081df0 <iprintf>:
   81df0:	b40f      	push	{r0, r1, r2, r3}
   81df2:	b507      	push	{r0, r1, r2, lr}
   81df4:	4906      	ldr	r1, [pc, #24]	; (81e10 <iprintf+0x20>)
   81df6:	ab04      	add	r3, sp, #16
   81df8:	6808      	ldr	r0, [r1, #0]
   81dfa:	f853 2b04 	ldr.w	r2, [r3], #4
   81dfe:	6881      	ldr	r1, [r0, #8]
   81e00:	9301      	str	r3, [sp, #4]
   81e02:	f000 f8ec 	bl	81fde <_vfiprintf_r>
   81e06:	b003      	add	sp, #12
   81e08:	f85d eb04 	ldr.w	lr, [sp], #4
   81e0c:	b004      	add	sp, #16
   81e0e:	4770      	bx	lr
   81e10:	20070008 	.word	0x20070008

00081e14 <_iprintf_r>:
   81e14:	b40e      	push	{r1, r2, r3}
   81e16:	b503      	push	{r0, r1, lr}
   81e18:	ab03      	add	r3, sp, #12
   81e1a:	f853 2b04 	ldr.w	r2, [r3], #4
   81e1e:	6881      	ldr	r1, [r0, #8]
   81e20:	9301      	str	r3, [sp, #4]
   81e22:	f000 f8dc 	bl	81fde <_vfiprintf_r>
   81e26:	b002      	add	sp, #8
   81e28:	f85d eb04 	ldr.w	lr, [sp], #4
   81e2c:	b003      	add	sp, #12
   81e2e:	4770      	bx	lr

00081e30 <memcpy>:
   81e30:	b510      	push	{r4, lr}
   81e32:	2300      	movs	r3, #0
   81e34:	4293      	cmp	r3, r2
   81e36:	d003      	beq.n	81e40 <memcpy+0x10>
   81e38:	5ccc      	ldrb	r4, [r1, r3]
   81e3a:	54c4      	strb	r4, [r0, r3]
   81e3c:	3301      	adds	r3, #1
   81e3e:	e7f9      	b.n	81e34 <memcpy+0x4>
   81e40:	bd10      	pop	{r4, pc}

00081e42 <memset>:
   81e42:	4402      	add	r2, r0
   81e44:	4603      	mov	r3, r0
   81e46:	4293      	cmp	r3, r2
   81e48:	d002      	beq.n	81e50 <memset+0xe>
   81e4a:	f803 1b01 	strb.w	r1, [r3], #1
   81e4e:	e7fa      	b.n	81e46 <memset+0x4>
   81e50:	4770      	bx	lr

00081e52 <setbuf>:
   81e52:	2900      	cmp	r1, #0
   81e54:	bf0c      	ite	eq
   81e56:	2202      	moveq	r2, #2
   81e58:	2200      	movne	r2, #0
   81e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81e5e:	f000 b80f 	b.w	81e80 <setvbuf>
	...

00081e64 <setjmp>:
   81e64:	46ec      	mov	ip, sp
   81e66:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81e6a:	f04f 0000 	mov.w	r0, #0
   81e6e:	4770      	bx	lr

00081e70 <longjmp>:
   81e70:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81e74:	46e5      	mov	sp, ip
   81e76:	0008      	movs	r0, r1
   81e78:	bf08      	it	eq
   81e7a:	2001      	moveq	r0, #1
   81e7c:	4770      	bx	lr
   81e7e:	bf00      	nop

00081e80 <setvbuf>:
   81e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81e84:	461d      	mov	r5, r3
   81e86:	4b36      	ldr	r3, [pc, #216]	; (81f60 <setvbuf+0xe0>)
   81e88:	4604      	mov	r4, r0
   81e8a:	681f      	ldr	r7, [r3, #0]
   81e8c:	460e      	mov	r6, r1
   81e8e:	4690      	mov	r8, r2
   81e90:	b127      	cbz	r7, 81e9c <setvbuf+0x1c>
   81e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   81e94:	b913      	cbnz	r3, 81e9c <setvbuf+0x1c>
   81e96:	4638      	mov	r0, r7
   81e98:	f000 feca 	bl	82c30 <__sinit>
   81e9c:	f1b8 0f02 	cmp.w	r8, #2
   81ea0:	d859      	bhi.n	81f56 <setvbuf+0xd6>
   81ea2:	2d00      	cmp	r5, #0
   81ea4:	db57      	blt.n	81f56 <setvbuf+0xd6>
   81ea6:	4638      	mov	r0, r7
   81ea8:	4621      	mov	r1, r4
   81eaa:	f000 fe78 	bl	82b9e <_fflush_r>
   81eae:	2300      	movs	r3, #0
   81eb0:	6063      	str	r3, [r4, #4]
   81eb2:	61a3      	str	r3, [r4, #24]
   81eb4:	89a3      	ldrh	r3, [r4, #12]
   81eb6:	061b      	lsls	r3, r3, #24
   81eb8:	d503      	bpl.n	81ec2 <setvbuf+0x42>
   81eba:	4638      	mov	r0, r7
   81ebc:	6921      	ldr	r1, [r4, #16]
   81ebe:	f001 f83b 	bl	82f38 <_free_r>
   81ec2:	89a3      	ldrh	r3, [r4, #12]
   81ec4:	f1b8 0f02 	cmp.w	r8, #2
   81ec8:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81ecc:	81a3      	strh	r3, [r4, #12]
   81ece:	d012      	beq.n	81ef6 <setvbuf+0x76>
   81ed0:	bb36      	cbnz	r6, 81f20 <setvbuf+0xa0>
   81ed2:	2d00      	cmp	r5, #0
   81ed4:	bf08      	it	eq
   81ed6:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   81eda:	4628      	mov	r0, r5
   81edc:	f001 fb10 	bl	83500 <malloc>
   81ee0:	4606      	mov	r6, r0
   81ee2:	b9c8      	cbnz	r0, 81f18 <setvbuf+0x98>
   81ee4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81ee8:	f001 fb0a 	bl	83500 <malloc>
   81eec:	4606      	mov	r6, r0
   81eee:	b988      	cbnz	r0, 81f14 <setvbuf+0x94>
   81ef0:	f04f 30ff 	mov.w	r0, #4294967295
   81ef4:	e000      	b.n	81ef8 <setvbuf+0x78>
   81ef6:	2000      	movs	r0, #0
   81ef8:	89a3      	ldrh	r3, [r4, #12]
   81efa:	f043 0302 	orr.w	r3, r3, #2
   81efe:	81a3      	strh	r3, [r4, #12]
   81f00:	2300      	movs	r3, #0
   81f02:	60a3      	str	r3, [r4, #8]
   81f04:	f104 0343 	add.w	r3, r4, #67	; 0x43
   81f08:	6023      	str	r3, [r4, #0]
   81f0a:	6123      	str	r3, [r4, #16]
   81f0c:	2301      	movs	r3, #1
   81f0e:	6163      	str	r3, [r4, #20]
   81f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f14:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81f18:	89a3      	ldrh	r3, [r4, #12]
   81f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81f1e:	81a3      	strh	r3, [r4, #12]
   81f20:	f1b8 0f01 	cmp.w	r8, #1
   81f24:	d105      	bne.n	81f32 <setvbuf+0xb2>
   81f26:	89a3      	ldrh	r3, [r4, #12]
   81f28:	f043 0301 	orr.w	r3, r3, #1
   81f2c:	81a3      	strh	r3, [r4, #12]
   81f2e:	426b      	negs	r3, r5
   81f30:	61a3      	str	r3, [r4, #24]
   81f32:	4b0c      	ldr	r3, [pc, #48]	; (81f64 <setvbuf+0xe4>)
   81f34:	63fb      	str	r3, [r7, #60]	; 0x3c
   81f36:	89a3      	ldrh	r3, [r4, #12]
   81f38:	6026      	str	r6, [r4, #0]
   81f3a:	f003 0008 	and.w	r0, r3, #8
   81f3e:	b280      	uxth	r0, r0
   81f40:	6126      	str	r6, [r4, #16]
   81f42:	6165      	str	r5, [r4, #20]
   81f44:	b148      	cbz	r0, 81f5a <setvbuf+0xda>
   81f46:	f013 0f03 	tst.w	r3, #3
   81f4a:	bf18      	it	ne
   81f4c:	2500      	movne	r5, #0
   81f4e:	60a5      	str	r5, [r4, #8]
   81f50:	2000      	movs	r0, #0
   81f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f56:	f04f 30ff 	mov.w	r0, #4294967295
   81f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f5e:	bf00      	nop
   81f60:	20070008 	.word	0x20070008
   81f64:	00082bed 	.word	0x00082bed

00081f68 <strlen>:
   81f68:	4603      	mov	r3, r0
   81f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
   81f6e:	2a00      	cmp	r2, #0
   81f70:	d1fb      	bne.n	81f6a <strlen+0x2>
   81f72:	1a18      	subs	r0, r3, r0
   81f74:	3801      	subs	r0, #1
   81f76:	4770      	bx	lr

00081f78 <__sprint_r>:
   81f78:	6893      	ldr	r3, [r2, #8]
   81f7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81f7e:	4681      	mov	r9, r0
   81f80:	460f      	mov	r7, r1
   81f82:	4614      	mov	r4, r2
   81f84:	b91b      	cbnz	r3, 81f8e <__sprint_r+0x16>
   81f86:	6053      	str	r3, [r2, #4]
   81f88:	4618      	mov	r0, r3
   81f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81f8e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81f90:	049d      	lsls	r5, r3, #18
   81f92:	d51d      	bpl.n	81fd0 <__sprint_r+0x58>
   81f94:	6815      	ldr	r5, [r2, #0]
   81f96:	68a3      	ldr	r3, [r4, #8]
   81f98:	3508      	adds	r5, #8
   81f9a:	b1bb      	cbz	r3, 81fcc <__sprint_r+0x54>
   81f9c:	f855 3c04 	ldr.w	r3, [r5, #-4]
   81fa0:	f855 ac08 	ldr.w	sl, [r5, #-8]
   81fa4:	ea4f 0893 	mov.w	r8, r3, lsr #2
   81fa8:	2600      	movs	r6, #0
   81faa:	4546      	cmp	r6, r8
   81fac:	da09      	bge.n	81fc2 <__sprint_r+0x4a>
   81fae:	4648      	mov	r0, r9
   81fb0:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
   81fb4:	463a      	mov	r2, r7
   81fb6:	f000 ff05 	bl	82dc4 <_fputwc_r>
   81fba:	1c43      	adds	r3, r0, #1
   81fbc:	d00a      	beq.n	81fd4 <__sprint_r+0x5c>
   81fbe:	3601      	adds	r6, #1
   81fc0:	e7f3      	b.n	81faa <__sprint_r+0x32>
   81fc2:	68a3      	ldr	r3, [r4, #8]
   81fc4:	eba3 0388 	sub.w	r3, r3, r8, lsl #2
   81fc8:	60a3      	str	r3, [r4, #8]
   81fca:	e7e4      	b.n	81f96 <__sprint_r+0x1e>
   81fcc:	4618      	mov	r0, r3
   81fce:	e001      	b.n	81fd4 <__sprint_r+0x5c>
   81fd0:	f001 f86a 	bl	830a8 <__sfvwrite_r>
   81fd4:	2300      	movs	r3, #0
   81fd6:	60a3      	str	r3, [r4, #8]
   81fd8:	6063      	str	r3, [r4, #4]
   81fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081fde <_vfiprintf_r>:
   81fde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81fe2:	b0ad      	sub	sp, #180	; 0xb4
   81fe4:	4688      	mov	r8, r1
   81fe6:	9202      	str	r2, [sp, #8]
   81fe8:	461c      	mov	r4, r3
   81fea:	461e      	mov	r6, r3
   81fec:	4683      	mov	fp, r0
   81fee:	b118      	cbz	r0, 81ff8 <_vfiprintf_r+0x1a>
   81ff0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81ff2:	b90b      	cbnz	r3, 81ff8 <_vfiprintf_r+0x1a>
   81ff4:	f000 fe1c 	bl	82c30 <__sinit>
   81ff8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   81ffc:	0498      	lsls	r0, r3, #18
   81ffe:	d409      	bmi.n	82014 <_vfiprintf_r+0x36>
   82000:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82004:	f8a8 300c 	strh.w	r3, [r8, #12]
   82008:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
   8200c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   82010:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
   82014:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   82018:	0719      	lsls	r1, r3, #28
   8201a:	d509      	bpl.n	82030 <_vfiprintf_r+0x52>
   8201c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   82020:	b133      	cbz	r3, 82030 <_vfiprintf_r+0x52>
   82022:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   82026:	f003 031a 	and.w	r3, r3, #26
   8202a:	2b0a      	cmp	r3, #10
   8202c:	d114      	bne.n	82058 <_vfiprintf_r+0x7a>
   8202e:	e008      	b.n	82042 <_vfiprintf_r+0x64>
   82030:	4658      	mov	r0, fp
   82032:	4641      	mov	r1, r8
   82034:	f000 fc78 	bl	82928 <__swsetup_r>
   82038:	2800      	cmp	r0, #0
   8203a:	d0f2      	beq.n	82022 <_vfiprintf_r+0x44>
   8203c:	f04f 30ff 	mov.w	r0, #4294967295
   82040:	e3d9      	b.n	827f6 <_vfiprintf_r+0x818>
   82042:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
   82046:	2b00      	cmp	r3, #0
   82048:	db06      	blt.n	82058 <_vfiprintf_r+0x7a>
   8204a:	4658      	mov	r0, fp
   8204c:	4641      	mov	r1, r8
   8204e:	9a02      	ldr	r2, [sp, #8]
   82050:	4623      	mov	r3, r4
   82052:	f000 fbe1 	bl	82818 <__sbprintf>
   82056:	e3ce      	b.n	827f6 <_vfiprintf_r+0x818>
   82058:	2300      	movs	r3, #0
   8205a:	aa1c      	add	r2, sp, #112	; 0x70
   8205c:	920f      	str	r2, [sp, #60]	; 0x3c
   8205e:	9311      	str	r3, [sp, #68]	; 0x44
   82060:	9310      	str	r3, [sp, #64]	; 0x40
   82062:	4694      	mov	ip, r2
   82064:	930a      	str	r3, [sp, #40]	; 0x28
   82066:	9305      	str	r3, [sp, #20]
   82068:	9b02      	ldr	r3, [sp, #8]
   8206a:	461c      	mov	r4, r3
   8206c:	f813 2b01 	ldrb.w	r2, [r3], #1
   82070:	b91a      	cbnz	r2, 8207a <_vfiprintf_r+0x9c>
   82072:	9802      	ldr	r0, [sp, #8]
   82074:	1a25      	subs	r5, r4, r0
   82076:	d103      	bne.n	82080 <_vfiprintf_r+0xa2>
   82078:	e01d      	b.n	820b6 <_vfiprintf_r+0xd8>
   8207a:	2a25      	cmp	r2, #37	; 0x25
   8207c:	d1f5      	bne.n	8206a <_vfiprintf_r+0x8c>
   8207e:	e7f8      	b.n	82072 <_vfiprintf_r+0x94>
   82080:	9b11      	ldr	r3, [sp, #68]	; 0x44
   82082:	9902      	ldr	r1, [sp, #8]
   82084:	442b      	add	r3, r5
   82086:	9311      	str	r3, [sp, #68]	; 0x44
   82088:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8208a:	e88c 0022 	stmia.w	ip, {r1, r5}
   8208e:	3301      	adds	r3, #1
   82090:	2b07      	cmp	r3, #7
   82092:	9310      	str	r3, [sp, #64]	; 0x40
   82094:	dc02      	bgt.n	8209c <_vfiprintf_r+0xbe>
   82096:	f10c 0c08 	add.w	ip, ip, #8
   8209a:	e009      	b.n	820b0 <_vfiprintf_r+0xd2>
   8209c:	4658      	mov	r0, fp
   8209e:	4641      	mov	r1, r8
   820a0:	aa0f      	add	r2, sp, #60	; 0x3c
   820a2:	f7ff ff69 	bl	81f78 <__sprint_r>
   820a6:	2800      	cmp	r0, #0
   820a8:	f040 839f 	bne.w	827ea <_vfiprintf_r+0x80c>
   820ac:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   820b0:	9a05      	ldr	r2, [sp, #20]
   820b2:	442a      	add	r2, r5
   820b4:	9205      	str	r2, [sp, #20]
   820b6:	7823      	ldrb	r3, [r4, #0]
   820b8:	2b00      	cmp	r3, #0
   820ba:	f000 838f 	beq.w	827dc <_vfiprintf_r+0x7fe>
   820be:	2200      	movs	r2, #0
   820c0:	3401      	adds	r4, #1
   820c2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   820c6:	f04f 3aff 	mov.w	sl, #4294967295
   820ca:	9204      	str	r2, [sp, #16]
   820cc:	4617      	mov	r7, r2
   820ce:	1c65      	adds	r5, r4, #1
   820d0:	7823      	ldrb	r3, [r4, #0]
   820d2:	9502      	str	r5, [sp, #8]
   820d4:	2b58      	cmp	r3, #88	; 0x58
   820d6:	d064      	beq.n	821a2 <_vfiprintf_r+0x1c4>
   820d8:	dc2d      	bgt.n	82136 <_vfiprintf_r+0x158>
   820da:	2b2e      	cmp	r3, #46	; 0x2e
   820dc:	d076      	beq.n	821cc <_vfiprintf_r+0x1ee>
   820de:	dc12      	bgt.n	82106 <_vfiprintf_r+0x128>
   820e0:	2b2a      	cmp	r3, #42	; 0x2a
   820e2:	d066      	beq.n	821b2 <_vfiprintf_r+0x1d4>
   820e4:	dc08      	bgt.n	820f8 <_vfiprintf_r+0x11a>
   820e6:	2b20      	cmp	r3, #32
   820e8:	d05f      	beq.n	821aa <_vfiprintf_r+0x1cc>
   820ea:	2b23      	cmp	r3, #35	; 0x23
   820ec:	f040 8200 	bne.w	824f0 <_vfiprintf_r+0x512>
   820f0:	f047 0701 	orr.w	r7, r7, #1
   820f4:	9c02      	ldr	r4, [sp, #8]
   820f6:	e7ea      	b.n	820ce <_vfiprintf_r+0xf0>
   820f8:	2b2b      	cmp	r3, #43	; 0x2b
   820fa:	d101      	bne.n	82100 <_vfiprintf_r+0x122>
   820fc:	461a      	mov	r2, r3
   820fe:	e7f9      	b.n	820f4 <_vfiprintf_r+0x116>
   82100:	2b2d      	cmp	r3, #45	; 0x2d
   82102:	d060      	beq.n	821c6 <_vfiprintf_r+0x1e8>
   82104:	e1f4      	b.n	824f0 <_vfiprintf_r+0x512>
   82106:	2b39      	cmp	r3, #57	; 0x39
   82108:	dc07      	bgt.n	8211a <_vfiprintf_r+0x13c>
   8210a:	2b31      	cmp	r3, #49	; 0x31
   8210c:	da7f      	bge.n	8220e <_vfiprintf_r+0x230>
   8210e:	2b30      	cmp	r3, #48	; 0x30
   82110:	f040 81ee 	bne.w	824f0 <_vfiprintf_r+0x512>
   82114:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   82118:	e7ec      	b.n	820f4 <_vfiprintf_r+0x116>
   8211a:	2b4f      	cmp	r3, #79	; 0x4f
   8211c:	f000 80e0 	beq.w	822e0 <_vfiprintf_r+0x302>
   82120:	2b55      	cmp	r3, #85	; 0x55
   82122:	f000 8120 	beq.w	82366 <_vfiprintf_r+0x388>
   82126:	2b44      	cmp	r3, #68	; 0x44
   82128:	f040 81e2 	bne.w	824f0 <_vfiprintf_r+0x512>
   8212c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   82130:	f047 0710 	orr.w	r7, r7, #16
   82134:	e094      	b.n	82260 <_vfiprintf_r+0x282>
   82136:	2b6e      	cmp	r3, #110	; 0x6e
   82138:	f000 80b6 	beq.w	822a8 <_vfiprintf_r+0x2ca>
   8213c:	dc0d      	bgt.n	8215a <_vfiprintf_r+0x17c>
   8213e:	2b68      	cmp	r3, #104	; 0x68
   82140:	d076      	beq.n	82230 <_vfiprintf_r+0x252>
   82142:	dc05      	bgt.n	82150 <_vfiprintf_r+0x172>
   82144:	2b63      	cmp	r3, #99	; 0x63
   82146:	f000 8083 	beq.w	82250 <_vfiprintf_r+0x272>
   8214a:	2b64      	cmp	r3, #100	; 0x64
   8214c:	d026      	beq.n	8219c <_vfiprintf_r+0x1be>
   8214e:	e1cf      	b.n	824f0 <_vfiprintf_r+0x512>
   82150:	2b69      	cmp	r3, #105	; 0x69
   82152:	d023      	beq.n	8219c <_vfiprintf_r+0x1be>
   82154:	2b6c      	cmp	r3, #108	; 0x6c
   82156:	d06e      	beq.n	82236 <_vfiprintf_r+0x258>
   82158:	e1ca      	b.n	824f0 <_vfiprintf_r+0x512>
   8215a:	2b71      	cmp	r3, #113	; 0x71
   8215c:	d075      	beq.n	8224a <_vfiprintf_r+0x26c>
   8215e:	dc13      	bgt.n	82188 <_vfiprintf_r+0x1aa>
   82160:	2b6f      	cmp	r3, #111	; 0x6f
   82162:	f000 80bf 	beq.w	822e4 <_vfiprintf_r+0x306>
   82166:	2b70      	cmp	r3, #112	; 0x70
   82168:	f040 81c2 	bne.w	824f0 <_vfiprintf_r+0x512>
   8216c:	2330      	movs	r3, #48	; 0x30
   8216e:	48a0      	ldr	r0, [pc, #640]	; (823f0 <_vfiprintf_r+0x412>)
   82170:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   82174:	2378      	movs	r3, #120	; 0x78
   82176:	6834      	ldr	r4, [r6, #0]
   82178:	2500      	movs	r5, #0
   8217a:	f047 0702 	orr.w	r7, r7, #2
   8217e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   82182:	3604      	adds	r6, #4
   82184:	900a      	str	r0, [sp, #40]	; 0x28
   82186:	e12e      	b.n	823e6 <_vfiprintf_r+0x408>
   82188:	2b75      	cmp	r3, #117	; 0x75
   8218a:	f000 80ee 	beq.w	8236a <_vfiprintf_r+0x38c>
   8218e:	2b78      	cmp	r3, #120	; 0x78
   82190:	f000 8103 	beq.w	8239a <_vfiprintf_r+0x3bc>
   82194:	2b73      	cmp	r3, #115	; 0x73
   82196:	f040 81ab 	bne.w	824f0 <_vfiprintf_r+0x512>
   8219a:	e0bf      	b.n	8231c <_vfiprintf_r+0x33e>
   8219c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   821a0:	e05e      	b.n	82260 <_vfiprintf_r+0x282>
   821a2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   821a6:	4c93      	ldr	r4, [pc, #588]	; (823f4 <_vfiprintf_r+0x416>)
   821a8:	e0fa      	b.n	823a0 <_vfiprintf_r+0x3c2>
   821aa:	2a00      	cmp	r2, #0
   821ac:	bf08      	it	eq
   821ae:	2220      	moveq	r2, #32
   821b0:	e7a0      	b.n	820f4 <_vfiprintf_r+0x116>
   821b2:	1d33      	adds	r3, r6, #4
   821b4:	6836      	ldr	r6, [r6, #0]
   821b6:	2e00      	cmp	r6, #0
   821b8:	9604      	str	r6, [sp, #16]
   821ba:	db01      	blt.n	821c0 <_vfiprintf_r+0x1e2>
   821bc:	461e      	mov	r6, r3
   821be:	e799      	b.n	820f4 <_vfiprintf_r+0x116>
   821c0:	4275      	negs	r5, r6
   821c2:	9504      	str	r5, [sp, #16]
   821c4:	461e      	mov	r6, r3
   821c6:	f047 0704 	orr.w	r7, r7, #4
   821ca:	e793      	b.n	820f4 <_vfiprintf_r+0x116>
   821cc:	9c02      	ldr	r4, [sp, #8]
   821ce:	7823      	ldrb	r3, [r4, #0]
   821d0:	1c61      	adds	r1, r4, #1
   821d2:	2b2a      	cmp	r3, #42	; 0x2a
   821d4:	d002      	beq.n	821dc <_vfiprintf_r+0x1fe>
   821d6:	f04f 0a00 	mov.w	sl, #0
   821da:	e00a      	b.n	821f2 <_vfiprintf_r+0x214>
   821dc:	f8d6 a000 	ldr.w	sl, [r6]
   821e0:	1d33      	adds	r3, r6, #4
   821e2:	f1ba 0f00 	cmp.w	sl, #0
   821e6:	461e      	mov	r6, r3
   821e8:	9102      	str	r1, [sp, #8]
   821ea:	da83      	bge.n	820f4 <_vfiprintf_r+0x116>
   821ec:	f04f 3aff 	mov.w	sl, #4294967295
   821f0:	e780      	b.n	820f4 <_vfiprintf_r+0x116>
   821f2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   821f6:	2809      	cmp	r0, #9
   821f8:	d805      	bhi.n	82206 <_vfiprintf_r+0x228>
   821fa:	230a      	movs	r3, #10
   821fc:	fb03 0a0a 	mla	sl, r3, sl, r0
   82200:	f811 3b01 	ldrb.w	r3, [r1], #1
   82204:	e7f5      	b.n	821f2 <_vfiprintf_r+0x214>
   82206:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
   8220a:	9102      	str	r1, [sp, #8]
   8220c:	e762      	b.n	820d4 <_vfiprintf_r+0xf6>
   8220e:	2500      	movs	r5, #0
   82210:	9504      	str	r5, [sp, #16]
   82212:	9c04      	ldr	r4, [sp, #16]
   82214:	3b30      	subs	r3, #48	; 0x30
   82216:	210a      	movs	r1, #10
   82218:	fb01 3404 	mla	r4, r1, r4, r3
   8221c:	9902      	ldr	r1, [sp, #8]
   8221e:	9404      	str	r4, [sp, #16]
   82220:	f811 3b01 	ldrb.w	r3, [r1], #1
   82224:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82228:	2809      	cmp	r0, #9
   8222a:	d8ee      	bhi.n	8220a <_vfiprintf_r+0x22c>
   8222c:	9102      	str	r1, [sp, #8]
   8222e:	e7f0      	b.n	82212 <_vfiprintf_r+0x234>
   82230:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   82234:	e75e      	b.n	820f4 <_vfiprintf_r+0x116>
   82236:	9d02      	ldr	r5, [sp, #8]
   82238:	782b      	ldrb	r3, [r5, #0]
   8223a:	2b6c      	cmp	r3, #108	; 0x6c
   8223c:	d102      	bne.n	82244 <_vfiprintf_r+0x266>
   8223e:	3501      	adds	r5, #1
   82240:	9502      	str	r5, [sp, #8]
   82242:	e002      	b.n	8224a <_vfiprintf_r+0x26c>
   82244:	f047 0710 	orr.w	r7, r7, #16
   82248:	e754      	b.n	820f4 <_vfiprintf_r+0x116>
   8224a:	f047 0720 	orr.w	r7, r7, #32
   8224e:	e751      	b.n	820f4 <_vfiprintf_r+0x116>
   82250:	6833      	ldr	r3, [r6, #0]
   82252:	2500      	movs	r5, #0
   82254:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   82258:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   8225c:	3604      	adds	r6, #4
   8225e:	e151      	b.n	82504 <_vfiprintf_r+0x526>
   82260:	06ba      	lsls	r2, r7, #26
   82262:	d507      	bpl.n	82274 <_vfiprintf_r+0x296>
   82264:	3607      	adds	r6, #7
   82266:	f026 0307 	bic.w	r3, r6, #7
   8226a:	f103 0608 	add.w	r6, r3, #8
   8226e:	e9d3 4500 	ldrd	r4, r5, [r3]
   82272:	e00d      	b.n	82290 <_vfiprintf_r+0x2b2>
   82274:	f017 0f10 	tst.w	r7, #16
   82278:	f106 0304 	add.w	r3, r6, #4
   8227c:	d001      	beq.n	82282 <_vfiprintf_r+0x2a4>
   8227e:	6834      	ldr	r4, [r6, #0]
   82280:	e004      	b.n	8228c <_vfiprintf_r+0x2ae>
   82282:	6834      	ldr	r4, [r6, #0]
   82284:	f017 0f40 	tst.w	r7, #64	; 0x40
   82288:	bf18      	it	ne
   8228a:	b224      	sxthne	r4, r4
   8228c:	17e5      	asrs	r5, r4, #31
   8228e:	461e      	mov	r6, r3
   82290:	2c00      	cmp	r4, #0
   82292:	f175 0000 	sbcs.w	r0, r5, #0
   82296:	f280 80af 	bge.w	823f8 <_vfiprintf_r+0x41a>
   8229a:	232d      	movs	r3, #45	; 0x2d
   8229c:	4264      	negs	r4, r4
   8229e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   822a2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   822a6:	e0a7      	b.n	823f8 <_vfiprintf_r+0x41a>
   822a8:	f017 0f20 	tst.w	r7, #32
   822ac:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   822b0:	f106 0104 	add.w	r1, r6, #4
   822b4:	d007      	beq.n	822c6 <_vfiprintf_r+0x2e8>
   822b6:	9c05      	ldr	r4, [sp, #20]
   822b8:	6830      	ldr	r0, [r6, #0]
   822ba:	17e5      	asrs	r5, r4, #31
   822bc:	4622      	mov	r2, r4
   822be:	462b      	mov	r3, r5
   822c0:	e9c0 2300 	strd	r2, r3, [r0]
   822c4:	e00a      	b.n	822dc <_vfiprintf_r+0x2fe>
   822c6:	06fb      	lsls	r3, r7, #27
   822c8:	d405      	bmi.n	822d6 <_vfiprintf_r+0x2f8>
   822ca:	067f      	lsls	r7, r7, #25
   822cc:	d503      	bpl.n	822d6 <_vfiprintf_r+0x2f8>
   822ce:	6833      	ldr	r3, [r6, #0]
   822d0:	9c05      	ldr	r4, [sp, #20]
   822d2:	801c      	strh	r4, [r3, #0]
   822d4:	e002      	b.n	822dc <_vfiprintf_r+0x2fe>
   822d6:	6833      	ldr	r3, [r6, #0]
   822d8:	9d05      	ldr	r5, [sp, #20]
   822da:	601d      	str	r5, [r3, #0]
   822dc:	460e      	mov	r6, r1
   822de:	e6c3      	b.n	82068 <_vfiprintf_r+0x8a>
   822e0:	f047 0710 	orr.w	r7, r7, #16
   822e4:	f017 0320 	ands.w	r3, r7, #32
   822e8:	d008      	beq.n	822fc <_vfiprintf_r+0x31e>
   822ea:	3607      	adds	r6, #7
   822ec:	f026 0307 	bic.w	r3, r6, #7
   822f0:	f103 0608 	add.w	r6, r3, #8
   822f4:	e9d3 4500 	ldrd	r4, r5, [r3]
   822f8:	2300      	movs	r3, #0
   822fa:	e075      	b.n	823e8 <_vfiprintf_r+0x40a>
   822fc:	f017 0110 	ands.w	r1, r7, #16
   82300:	f106 0204 	add.w	r2, r6, #4
   82304:	d106      	bne.n	82314 <_vfiprintf_r+0x336>
   82306:	f017 0340 	ands.w	r3, r7, #64	; 0x40
   8230a:	d003      	beq.n	82314 <_vfiprintf_r+0x336>
   8230c:	8834      	ldrh	r4, [r6, #0]
   8230e:	2500      	movs	r5, #0
   82310:	4616      	mov	r6, r2
   82312:	e7f1      	b.n	822f8 <_vfiprintf_r+0x31a>
   82314:	6834      	ldr	r4, [r6, #0]
   82316:	2500      	movs	r5, #0
   82318:	4616      	mov	r6, r2
   8231a:	e065      	b.n	823e8 <_vfiprintf_r+0x40a>
   8231c:	f8d6 9000 	ldr.w	r9, [r6]
   82320:	2300      	movs	r3, #0
   82322:	459a      	cmp	sl, r3
   82324:	f106 0604 	add.w	r6, r6, #4
   82328:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   8232c:	4648      	mov	r0, r9
   8232e:	db11      	blt.n	82354 <_vfiprintf_r+0x376>
   82330:	4619      	mov	r1, r3
   82332:	4652      	mov	r2, sl
   82334:	f8cd c004 	str.w	ip, [sp, #4]
   82338:	f001 fafa 	bl	83930 <memchr>
   8233c:	f8dd c004 	ldr.w	ip, [sp, #4]
   82340:	2800      	cmp	r0, #0
   82342:	f000 80e4 	beq.w	8250e <_vfiprintf_r+0x530>
   82346:	ebc9 0000 	rsb	r0, r9, r0
   8234a:	4550      	cmp	r0, sl
   8234c:	bfb8      	it	lt
   8234e:	4682      	movlt	sl, r0
   82350:	2500      	movs	r5, #0
   82352:	e0dd      	b.n	82510 <_vfiprintf_r+0x532>
   82354:	f8cd c004 	str.w	ip, [sp, #4]
   82358:	f7ff fe06 	bl	81f68 <strlen>
   8235c:	2500      	movs	r5, #0
   8235e:	4682      	mov	sl, r0
   82360:	f8dd c004 	ldr.w	ip, [sp, #4]
   82364:	e0d4      	b.n	82510 <_vfiprintf_r+0x532>
   82366:	f047 0710 	orr.w	r7, r7, #16
   8236a:	06bd      	lsls	r5, r7, #26
   8236c:	d507      	bpl.n	8237e <_vfiprintf_r+0x3a0>
   8236e:	3607      	adds	r6, #7
   82370:	f026 0307 	bic.w	r3, r6, #7
   82374:	f103 0608 	add.w	r6, r3, #8
   82378:	e9d3 4500 	ldrd	r4, r5, [r3]
   8237c:	e00b      	b.n	82396 <_vfiprintf_r+0x3b8>
   8237e:	f017 0f10 	tst.w	r7, #16
   82382:	f106 0304 	add.w	r3, r6, #4
   82386:	d103      	bne.n	82390 <_vfiprintf_r+0x3b2>
   82388:	067c      	lsls	r4, r7, #25
   8238a:	d501      	bpl.n	82390 <_vfiprintf_r+0x3b2>
   8238c:	8834      	ldrh	r4, [r6, #0]
   8238e:	e000      	b.n	82392 <_vfiprintf_r+0x3b4>
   82390:	6834      	ldr	r4, [r6, #0]
   82392:	2500      	movs	r5, #0
   82394:	461e      	mov	r6, r3
   82396:	2301      	movs	r3, #1
   82398:	e026      	b.n	823e8 <_vfiprintf_r+0x40a>
   8239a:	4c15      	ldr	r4, [pc, #84]	; (823f0 <_vfiprintf_r+0x412>)
   8239c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   823a0:	06b8      	lsls	r0, r7, #26
   823a2:	940a      	str	r4, [sp, #40]	; 0x28
   823a4:	d507      	bpl.n	823b6 <_vfiprintf_r+0x3d8>
   823a6:	3607      	adds	r6, #7
   823a8:	f026 0207 	bic.w	r2, r6, #7
   823ac:	f102 0608 	add.w	r6, r2, #8
   823b0:	e9d2 4500 	ldrd	r4, r5, [r2]
   823b4:	e00b      	b.n	823ce <_vfiprintf_r+0x3f0>
   823b6:	f017 0f10 	tst.w	r7, #16
   823ba:	f106 0204 	add.w	r2, r6, #4
   823be:	d103      	bne.n	823c8 <_vfiprintf_r+0x3ea>
   823c0:	0679      	lsls	r1, r7, #25
   823c2:	d501      	bpl.n	823c8 <_vfiprintf_r+0x3ea>
   823c4:	8834      	ldrh	r4, [r6, #0]
   823c6:	e000      	b.n	823ca <_vfiprintf_r+0x3ec>
   823c8:	6834      	ldr	r4, [r6, #0]
   823ca:	2500      	movs	r5, #0
   823cc:	4616      	mov	r6, r2
   823ce:	07fa      	lsls	r2, r7, #31
   823d0:	d509      	bpl.n	823e6 <_vfiprintf_r+0x408>
   823d2:	ea54 0005 	orrs.w	r0, r4, r5
   823d6:	d006      	beq.n	823e6 <_vfiprintf_r+0x408>
   823d8:	2230      	movs	r2, #48	; 0x30
   823da:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   823de:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   823e2:	f047 0702 	orr.w	r7, r7, #2
   823e6:	2302      	movs	r3, #2
   823e8:	2200      	movs	r2, #0
   823ea:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   823ee:	e004      	b.n	823fa <_vfiprintf_r+0x41c>
   823f0:	000846ef 	.word	0x000846ef
   823f4:	000846de 	.word	0x000846de
   823f8:	2301      	movs	r3, #1
   823fa:	f1ba 0f00 	cmp.w	sl, #0
   823fe:	bfa8      	it	ge
   82400:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   82404:	ea54 0105 	orrs.w	r1, r4, r5
   82408:	d102      	bne.n	82410 <_vfiprintf_r+0x432>
   8240a:	f1ba 0f00 	cmp.w	sl, #0
   8240e:	d05e      	beq.n	824ce <_vfiprintf_r+0x4f0>
   82410:	2b01      	cmp	r3, #1
   82412:	d01f      	beq.n	82454 <_vfiprintf_r+0x476>
   82414:	2b02      	cmp	r3, #2
   82416:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
   8241a:	d045      	beq.n	824a8 <_vfiprintf_r+0x4ca>
   8241c:	08e0      	lsrs	r0, r4, #3
   8241e:	ea40 7145 	orr.w	r1, r0, r5, lsl #29
   82422:	08e8      	lsrs	r0, r5, #3
   82424:	f004 0207 	and.w	r2, r4, #7
   82428:	9106      	str	r1, [sp, #24]
   8242a:	9007      	str	r0, [sp, #28]
   8242c:	3230      	adds	r2, #48	; 0x30
   8242e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
   82432:	ea54 0105 	orrs.w	r1, r4, r5
   82436:	4699      	mov	r9, r3
   82438:	701a      	strb	r2, [r3, #0]
   8243a:	f103 33ff 	add.w	r3, r3, #4294967295
   8243e:	d1ed      	bne.n	8241c <_vfiprintf_r+0x43e>
   82440:	07f8      	lsls	r0, r7, #31
   82442:	4649      	mov	r1, r9
   82444:	d54e      	bpl.n	824e4 <_vfiprintf_r+0x506>
   82446:	2a30      	cmp	r2, #48	; 0x30
   82448:	d04c      	beq.n	824e4 <_vfiprintf_r+0x506>
   8244a:	4699      	mov	r9, r3
   8244c:	2330      	movs	r3, #48	; 0x30
   8244e:	f801 3c01 	strb.w	r3, [r1, #-1]
   82452:	e047      	b.n	824e4 <_vfiprintf_r+0x506>
   82454:	2d00      	cmp	r5, #0
   82456:	bf08      	it	eq
   82458:	2c0a      	cmpeq	r4, #10
   8245a:	d205      	bcs.n	82468 <_vfiprintf_r+0x48a>
   8245c:	3430      	adds	r4, #48	; 0x30
   8245e:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   82462:	f10d 096f 	add.w	r9, sp, #111	; 0x6f
   82466:	e03d      	b.n	824e4 <_vfiprintf_r+0x506>
   82468:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
   8246c:	9203      	str	r2, [sp, #12]
   8246e:	4620      	mov	r0, r4
   82470:	4629      	mov	r1, r5
   82472:	220a      	movs	r2, #10
   82474:	2300      	movs	r3, #0
   82476:	f8cd c004 	str.w	ip, [sp, #4]
   8247a:	f001 fd95 	bl	83fa8 <__aeabi_uldivmod>
   8247e:	9b03      	ldr	r3, [sp, #12]
   82480:	3230      	adds	r2, #48	; 0x30
   82482:	f803 2901 	strb.w	r2, [r3], #-1
   82486:	4620      	mov	r0, r4
   82488:	4629      	mov	r1, r5
   8248a:	f8dd 900c 	ldr.w	r9, [sp, #12]
   8248e:	220a      	movs	r2, #10
   82490:	9303      	str	r3, [sp, #12]
   82492:	2300      	movs	r3, #0
   82494:	f001 fd88 	bl	83fa8 <__aeabi_uldivmod>
   82498:	4604      	mov	r4, r0
   8249a:	460d      	mov	r5, r1
   8249c:	ea54 0005 	orrs.w	r0, r4, r5
   824a0:	f8dd c004 	ldr.w	ip, [sp, #4]
   824a4:	d1e3      	bne.n	8246e <_vfiprintf_r+0x490>
   824a6:	e01d      	b.n	824e4 <_vfiprintf_r+0x506>
   824a8:	990a      	ldr	r1, [sp, #40]	; 0x28
   824aa:	f004 020f 	and.w	r2, r4, #15
   824ae:	5c8a      	ldrb	r2, [r1, r2]
   824b0:	4699      	mov	r9, r3
   824b2:	f803 2901 	strb.w	r2, [r3], #-1
   824b6:	0922      	lsrs	r2, r4, #4
   824b8:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
   824bc:	0929      	lsrs	r1, r5, #4
   824be:	9008      	str	r0, [sp, #32]
   824c0:	9109      	str	r1, [sp, #36]	; 0x24
   824c2:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   824c6:	ea54 0205 	orrs.w	r2, r4, r5
   824ca:	d1ed      	bne.n	824a8 <_vfiprintf_r+0x4ca>
   824cc:	e00a      	b.n	824e4 <_vfiprintf_r+0x506>
   824ce:	b93b      	cbnz	r3, 824e0 <_vfiprintf_r+0x502>
   824d0:	07f9      	lsls	r1, r7, #31
   824d2:	d505      	bpl.n	824e0 <_vfiprintf_r+0x502>
   824d4:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
   824d8:	2330      	movs	r3, #48	; 0x30
   824da:	f809 3d41 	strb.w	r3, [r9, #-65]!
   824de:	e001      	b.n	824e4 <_vfiprintf_r+0x506>
   824e0:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   824e4:	4655      	mov	r5, sl
   824e6:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   824ea:	ebc9 0a0a 	rsb	sl, r9, sl
   824ee:	e00f      	b.n	82510 <_vfiprintf_r+0x532>
   824f0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   824f4:	2b00      	cmp	r3, #0
   824f6:	f000 8171 	beq.w	827dc <_vfiprintf_r+0x7fe>
   824fa:	2500      	movs	r5, #0
   824fc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   82500:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   82504:	f04f 0a01 	mov.w	sl, #1
   82508:	f10d 0948 	add.w	r9, sp, #72	; 0x48
   8250c:	e000      	b.n	82510 <_vfiprintf_r+0x532>
   8250e:	4605      	mov	r5, r0
   82510:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   82514:	45aa      	cmp	sl, r5
   82516:	bfac      	ite	ge
   82518:	4654      	movge	r4, sl
   8251a:	462c      	movlt	r4, r5
   8251c:	b103      	cbz	r3, 82520 <_vfiprintf_r+0x542>
   8251e:	3401      	adds	r4, #1
   82520:	f017 0302 	ands.w	r3, r7, #2
   82524:	9303      	str	r3, [sp, #12]
   82526:	bf18      	it	ne
   82528:	3402      	addne	r4, #2
   8252a:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   8252e:	930b      	str	r3, [sp, #44]	; 0x2c
   82530:	d13b      	bne.n	825aa <_vfiprintf_r+0x5cc>
   82532:	9804      	ldr	r0, [sp, #16]
   82534:	1b03      	subs	r3, r0, r4
   82536:	2b00      	cmp	r3, #0
   82538:	dd37      	ble.n	825aa <_vfiprintf_r+0x5cc>
   8253a:	4aa6      	ldr	r2, [pc, #664]	; (827d4 <_vfiprintf_r+0x7f6>)
   8253c:	2b10      	cmp	r3, #16
   8253e:	f8cc 2000 	str.w	r2, [ip]
   82542:	dd1b      	ble.n	8257c <_vfiprintf_r+0x59e>
   82544:	2210      	movs	r2, #16
   82546:	f8cc 2004 	str.w	r2, [ip, #4]
   8254a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8254c:	3210      	adds	r2, #16
   8254e:	9211      	str	r2, [sp, #68]	; 0x44
   82550:	9a10      	ldr	r2, [sp, #64]	; 0x40
   82552:	3201      	adds	r2, #1
   82554:	2a07      	cmp	r2, #7
   82556:	9210      	str	r2, [sp, #64]	; 0x40
   82558:	dc02      	bgt.n	82560 <_vfiprintf_r+0x582>
   8255a:	f10c 0c08 	add.w	ip, ip, #8
   8255e:	e00b      	b.n	82578 <_vfiprintf_r+0x59a>
   82560:	4658      	mov	r0, fp
   82562:	4641      	mov	r1, r8
   82564:	aa0f      	add	r2, sp, #60	; 0x3c
   82566:	9301      	str	r3, [sp, #4]
   82568:	f7ff fd06 	bl	81f78 <__sprint_r>
   8256c:	9b01      	ldr	r3, [sp, #4]
   8256e:	2800      	cmp	r0, #0
   82570:	f040 813b 	bne.w	827ea <_vfiprintf_r+0x80c>
   82574:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   82578:	3b10      	subs	r3, #16
   8257a:	e7de      	b.n	8253a <_vfiprintf_r+0x55c>
   8257c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8257e:	f8cc 3004 	str.w	r3, [ip, #4]
   82582:	4413      	add	r3, r2
   82584:	9311      	str	r3, [sp, #68]	; 0x44
   82586:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82588:	3301      	adds	r3, #1
   8258a:	2b07      	cmp	r3, #7
   8258c:	9310      	str	r3, [sp, #64]	; 0x40
   8258e:	dc02      	bgt.n	82596 <_vfiprintf_r+0x5b8>
   82590:	f10c 0c08 	add.w	ip, ip, #8
   82594:	e009      	b.n	825aa <_vfiprintf_r+0x5cc>
   82596:	4658      	mov	r0, fp
   82598:	4641      	mov	r1, r8
   8259a:	aa0f      	add	r2, sp, #60	; 0x3c
   8259c:	f7ff fcec 	bl	81f78 <__sprint_r>
   825a0:	2800      	cmp	r0, #0
   825a2:	f040 8122 	bne.w	827ea <_vfiprintf_r+0x80c>
   825a6:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   825aa:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   825ae:	b1db      	cbz	r3, 825e8 <_vfiprintf_r+0x60a>
   825b0:	f10d 0337 	add.w	r3, sp, #55	; 0x37
   825b4:	f8cc 3000 	str.w	r3, [ip]
   825b8:	2301      	movs	r3, #1
   825ba:	f8cc 3004 	str.w	r3, [ip, #4]
   825be:	9b11      	ldr	r3, [sp, #68]	; 0x44
   825c0:	3301      	adds	r3, #1
   825c2:	9311      	str	r3, [sp, #68]	; 0x44
   825c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   825c6:	3301      	adds	r3, #1
   825c8:	2b07      	cmp	r3, #7
   825ca:	9310      	str	r3, [sp, #64]	; 0x40
   825cc:	dc02      	bgt.n	825d4 <_vfiprintf_r+0x5f6>
   825ce:	f10c 0c08 	add.w	ip, ip, #8
   825d2:	e009      	b.n	825e8 <_vfiprintf_r+0x60a>
   825d4:	4658      	mov	r0, fp
   825d6:	4641      	mov	r1, r8
   825d8:	aa0f      	add	r2, sp, #60	; 0x3c
   825da:	f7ff fccd 	bl	81f78 <__sprint_r>
   825de:	2800      	cmp	r0, #0
   825e0:	f040 8103 	bne.w	827ea <_vfiprintf_r+0x80c>
   825e4:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   825e8:	9b03      	ldr	r3, [sp, #12]
   825ea:	b1d3      	cbz	r3, 82622 <_vfiprintf_r+0x644>
   825ec:	ab0e      	add	r3, sp, #56	; 0x38
   825ee:	f8cc 3000 	str.w	r3, [ip]
   825f2:	2302      	movs	r3, #2
   825f4:	f8cc 3004 	str.w	r3, [ip, #4]
   825f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   825fa:	3302      	adds	r3, #2
   825fc:	9311      	str	r3, [sp, #68]	; 0x44
   825fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82600:	3301      	adds	r3, #1
   82602:	2b07      	cmp	r3, #7
   82604:	9310      	str	r3, [sp, #64]	; 0x40
   82606:	dc02      	bgt.n	8260e <_vfiprintf_r+0x630>
   82608:	f10c 0c08 	add.w	ip, ip, #8
   8260c:	e009      	b.n	82622 <_vfiprintf_r+0x644>
   8260e:	4658      	mov	r0, fp
   82610:	4641      	mov	r1, r8
   82612:	aa0f      	add	r2, sp, #60	; 0x3c
   82614:	f7ff fcb0 	bl	81f78 <__sprint_r>
   82618:	2800      	cmp	r0, #0
   8261a:	f040 80e6 	bne.w	827ea <_vfiprintf_r+0x80c>
   8261e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   82622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   82624:	2b80      	cmp	r3, #128	; 0x80
   82626:	d13f      	bne.n	826a8 <_vfiprintf_r+0x6ca>
   82628:	9b04      	ldr	r3, [sp, #16]
   8262a:	1b1b      	subs	r3, r3, r4
   8262c:	2b00      	cmp	r3, #0
   8262e:	9303      	str	r3, [sp, #12]
   82630:	dd3a      	ble.n	826a8 <_vfiprintf_r+0x6ca>
   82632:	9b03      	ldr	r3, [sp, #12]
   82634:	2b10      	cmp	r3, #16
   82636:	4b68      	ldr	r3, [pc, #416]	; (827d8 <_vfiprintf_r+0x7fa>)
   82638:	f8cc 3000 	str.w	r3, [ip]
   8263c:	dd1b      	ble.n	82676 <_vfiprintf_r+0x698>
   8263e:	2310      	movs	r3, #16
   82640:	f8cc 3004 	str.w	r3, [ip, #4]
   82644:	9b11      	ldr	r3, [sp, #68]	; 0x44
   82646:	3310      	adds	r3, #16
   82648:	9311      	str	r3, [sp, #68]	; 0x44
   8264a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8264c:	3301      	adds	r3, #1
   8264e:	2b07      	cmp	r3, #7
   82650:	9310      	str	r3, [sp, #64]	; 0x40
   82652:	dc02      	bgt.n	8265a <_vfiprintf_r+0x67c>
   82654:	f10c 0c08 	add.w	ip, ip, #8
   82658:	e009      	b.n	8266e <_vfiprintf_r+0x690>
   8265a:	4658      	mov	r0, fp
   8265c:	4641      	mov	r1, r8
   8265e:	aa0f      	add	r2, sp, #60	; 0x3c
   82660:	f7ff fc8a 	bl	81f78 <__sprint_r>
   82664:	2800      	cmp	r0, #0
   82666:	f040 80c0 	bne.w	827ea <_vfiprintf_r+0x80c>
   8266a:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   8266e:	9b03      	ldr	r3, [sp, #12]
   82670:	3b10      	subs	r3, #16
   82672:	9303      	str	r3, [sp, #12]
   82674:	e7dd      	b.n	82632 <_vfiprintf_r+0x654>
   82676:	9b03      	ldr	r3, [sp, #12]
   82678:	9803      	ldr	r0, [sp, #12]
   8267a:	f8cc 3004 	str.w	r3, [ip, #4]
   8267e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   82680:	4403      	add	r3, r0
   82682:	9311      	str	r3, [sp, #68]	; 0x44
   82684:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82686:	3301      	adds	r3, #1
   82688:	2b07      	cmp	r3, #7
   8268a:	9310      	str	r3, [sp, #64]	; 0x40
   8268c:	dc02      	bgt.n	82694 <_vfiprintf_r+0x6b6>
   8268e:	f10c 0c08 	add.w	ip, ip, #8
   82692:	e009      	b.n	826a8 <_vfiprintf_r+0x6ca>
   82694:	4658      	mov	r0, fp
   82696:	4641      	mov	r1, r8
   82698:	aa0f      	add	r2, sp, #60	; 0x3c
   8269a:	f7ff fc6d 	bl	81f78 <__sprint_r>
   8269e:	2800      	cmp	r0, #0
   826a0:	f040 80a3 	bne.w	827ea <_vfiprintf_r+0x80c>
   826a4:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   826a8:	ebca 0505 	rsb	r5, sl, r5
   826ac:	2d00      	cmp	r5, #0
   826ae:	dd34      	ble.n	8271a <_vfiprintf_r+0x73c>
   826b0:	4b49      	ldr	r3, [pc, #292]	; (827d8 <_vfiprintf_r+0x7fa>)
   826b2:	2d10      	cmp	r5, #16
   826b4:	f8cc 3000 	str.w	r3, [ip]
   826b8:	dd19      	ble.n	826ee <_vfiprintf_r+0x710>
   826ba:	2310      	movs	r3, #16
   826bc:	f8cc 3004 	str.w	r3, [ip, #4]
   826c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   826c2:	3310      	adds	r3, #16
   826c4:	9311      	str	r3, [sp, #68]	; 0x44
   826c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   826c8:	3301      	adds	r3, #1
   826ca:	2b07      	cmp	r3, #7
   826cc:	9310      	str	r3, [sp, #64]	; 0x40
   826ce:	dc02      	bgt.n	826d6 <_vfiprintf_r+0x6f8>
   826d0:	f10c 0c08 	add.w	ip, ip, #8
   826d4:	e009      	b.n	826ea <_vfiprintf_r+0x70c>
   826d6:	4658      	mov	r0, fp
   826d8:	4641      	mov	r1, r8
   826da:	aa0f      	add	r2, sp, #60	; 0x3c
   826dc:	f7ff fc4c 	bl	81f78 <__sprint_r>
   826e0:	2800      	cmp	r0, #0
   826e2:	f040 8082 	bne.w	827ea <_vfiprintf_r+0x80c>
   826e6:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   826ea:	3d10      	subs	r5, #16
   826ec:	e7e0      	b.n	826b0 <_vfiprintf_r+0x6d2>
   826ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   826f0:	f8cc 5004 	str.w	r5, [ip, #4]
   826f4:	441d      	add	r5, r3
   826f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   826f8:	9511      	str	r5, [sp, #68]	; 0x44
   826fa:	3301      	adds	r3, #1
   826fc:	2b07      	cmp	r3, #7
   826fe:	9310      	str	r3, [sp, #64]	; 0x40
   82700:	dc02      	bgt.n	82708 <_vfiprintf_r+0x72a>
   82702:	f10c 0c08 	add.w	ip, ip, #8
   82706:	e008      	b.n	8271a <_vfiprintf_r+0x73c>
   82708:	4658      	mov	r0, fp
   8270a:	4641      	mov	r1, r8
   8270c:	aa0f      	add	r2, sp, #60	; 0x3c
   8270e:	f7ff fc33 	bl	81f78 <__sprint_r>
   82712:	2800      	cmp	r0, #0
   82714:	d169      	bne.n	827ea <_vfiprintf_r+0x80c>
   82716:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   8271a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8271c:	e88c 0600 	stmia.w	ip, {r9, sl}
   82720:	4453      	add	r3, sl
   82722:	9311      	str	r3, [sp, #68]	; 0x44
   82724:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82726:	3301      	adds	r3, #1
   82728:	2b07      	cmp	r3, #7
   8272a:	9310      	str	r3, [sp, #64]	; 0x40
   8272c:	dc02      	bgt.n	82734 <_vfiprintf_r+0x756>
   8272e:	f10c 0308 	add.w	r3, ip, #8
   82732:	e007      	b.n	82744 <_vfiprintf_r+0x766>
   82734:	4658      	mov	r0, fp
   82736:	4641      	mov	r1, r8
   82738:	aa0f      	add	r2, sp, #60	; 0x3c
   8273a:	f7ff fc1d 	bl	81f78 <__sprint_r>
   8273e:	2800      	cmp	r0, #0
   82740:	d153      	bne.n	827ea <_vfiprintf_r+0x80c>
   82742:	ab1c      	add	r3, sp, #112	; 0x70
   82744:	077a      	lsls	r2, r7, #29
   82746:	d40a      	bmi.n	8275e <_vfiprintf_r+0x780>
   82748:	9d05      	ldr	r5, [sp, #20]
   8274a:	9804      	ldr	r0, [sp, #16]
   8274c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8274e:	4284      	cmp	r4, r0
   82750:	bfac      	ite	ge
   82752:	192d      	addge	r5, r5, r4
   82754:	182d      	addlt	r5, r5, r0
   82756:	9505      	str	r5, [sp, #20]
   82758:	2b00      	cmp	r3, #0
   8275a:	d035      	beq.n	827c8 <_vfiprintf_r+0x7ea>
   8275c:	e02e      	b.n	827bc <_vfiprintf_r+0x7de>
   8275e:	9904      	ldr	r1, [sp, #16]
   82760:	1b0d      	subs	r5, r1, r4
   82762:	2d00      	cmp	r5, #0
   82764:	ddf0      	ble.n	82748 <_vfiprintf_r+0x76a>
   82766:	4a1b      	ldr	r2, [pc, #108]	; (827d4 <_vfiprintf_r+0x7f6>)
   82768:	2d10      	cmp	r5, #16
   8276a:	601a      	str	r2, [r3, #0]
   8276c:	dd15      	ble.n	8279a <_vfiprintf_r+0x7bc>
   8276e:	2210      	movs	r2, #16
   82770:	605a      	str	r2, [r3, #4]
   82772:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82774:	3210      	adds	r2, #16
   82776:	9211      	str	r2, [sp, #68]	; 0x44
   82778:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8277a:	3201      	adds	r2, #1
   8277c:	2a07      	cmp	r2, #7
   8277e:	9210      	str	r2, [sp, #64]	; 0x40
   82780:	dc01      	bgt.n	82786 <_vfiprintf_r+0x7a8>
   82782:	3308      	adds	r3, #8
   82784:	e007      	b.n	82796 <_vfiprintf_r+0x7b8>
   82786:	4658      	mov	r0, fp
   82788:	4641      	mov	r1, r8
   8278a:	aa0f      	add	r2, sp, #60	; 0x3c
   8278c:	f7ff fbf4 	bl	81f78 <__sprint_r>
   82790:	2800      	cmp	r0, #0
   82792:	d12a      	bne.n	827ea <_vfiprintf_r+0x80c>
   82794:	ab1c      	add	r3, sp, #112	; 0x70
   82796:	3d10      	subs	r5, #16
   82798:	e7e5      	b.n	82766 <_vfiprintf_r+0x788>
   8279a:	605d      	str	r5, [r3, #4]
   8279c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8279e:	441d      	add	r5, r3
   827a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   827a2:	9511      	str	r5, [sp, #68]	; 0x44
   827a4:	3301      	adds	r3, #1
   827a6:	2b07      	cmp	r3, #7
   827a8:	9310      	str	r3, [sp, #64]	; 0x40
   827aa:	ddcd      	ble.n	82748 <_vfiprintf_r+0x76a>
   827ac:	4658      	mov	r0, fp
   827ae:	4641      	mov	r1, r8
   827b0:	aa0f      	add	r2, sp, #60	; 0x3c
   827b2:	f7ff fbe1 	bl	81f78 <__sprint_r>
   827b6:	2800      	cmp	r0, #0
   827b8:	d0c6      	beq.n	82748 <_vfiprintf_r+0x76a>
   827ba:	e016      	b.n	827ea <_vfiprintf_r+0x80c>
   827bc:	4658      	mov	r0, fp
   827be:	4641      	mov	r1, r8
   827c0:	aa0f      	add	r2, sp, #60	; 0x3c
   827c2:	f7ff fbd9 	bl	81f78 <__sprint_r>
   827c6:	b980      	cbnz	r0, 827ea <_vfiprintf_r+0x80c>
   827c8:	2300      	movs	r3, #0
   827ca:	9310      	str	r3, [sp, #64]	; 0x40
   827cc:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   827d0:	e44a      	b.n	82068 <_vfiprintf_r+0x8a>
   827d2:	bf00      	nop
   827d4:	000846be 	.word	0x000846be
   827d8:	000846ce 	.word	0x000846ce
   827dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   827de:	b123      	cbz	r3, 827ea <_vfiprintf_r+0x80c>
   827e0:	4658      	mov	r0, fp
   827e2:	4641      	mov	r1, r8
   827e4:	aa0f      	add	r2, sp, #60	; 0x3c
   827e6:	f7ff fbc7 	bl	81f78 <__sprint_r>
   827ea:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   827ee:	065b      	lsls	r3, r3, #25
   827f0:	f53f ac24 	bmi.w	8203c <_vfiprintf_r+0x5e>
   827f4:	9805      	ldr	r0, [sp, #20]
   827f6:	b02d      	add	sp, #180	; 0xb4
   827f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000827fc <vfiprintf>:
   827fc:	b530      	push	{r4, r5, lr}
   827fe:	4613      	mov	r3, r2
   82800:	4a04      	ldr	r2, [pc, #16]	; (82814 <vfiprintf+0x18>)
   82802:	4605      	mov	r5, r0
   82804:	460c      	mov	r4, r1
   82806:	6810      	ldr	r0, [r2, #0]
   82808:	4629      	mov	r1, r5
   8280a:	4622      	mov	r2, r4
   8280c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   82810:	f7ff bbe5 	b.w	81fde <_vfiprintf_r>
   82814:	20070008 	.word	0x20070008

00082818 <__sbprintf>:
   82818:	b570      	push	{r4, r5, r6, lr}
   8281a:	460c      	mov	r4, r1
   8281c:	8989      	ldrh	r1, [r1, #12]
   8281e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   82822:	f021 0102 	bic.w	r1, r1, #2
   82826:	f8ad 100c 	strh.w	r1, [sp, #12]
   8282a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8282c:	4606      	mov	r6, r0
   8282e:	9119      	str	r1, [sp, #100]	; 0x64
   82830:	89e1      	ldrh	r1, [r4, #14]
   82832:	f8ad 100e 	strh.w	r1, [sp, #14]
   82836:	69e1      	ldr	r1, [r4, #28]
   82838:	9107      	str	r1, [sp, #28]
   8283a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   8283c:	9109      	str	r1, [sp, #36]	; 0x24
   8283e:	a91a      	add	r1, sp, #104	; 0x68
   82840:	9100      	str	r1, [sp, #0]
   82842:	9104      	str	r1, [sp, #16]
   82844:	f44f 6180 	mov.w	r1, #1024	; 0x400
   82848:	9102      	str	r1, [sp, #8]
   8284a:	9105      	str	r1, [sp, #20]
   8284c:	2100      	movs	r1, #0
   8284e:	9106      	str	r1, [sp, #24]
   82850:	4669      	mov	r1, sp
   82852:	f7ff fbc4 	bl	81fde <_vfiprintf_r>
   82856:	1e05      	subs	r5, r0, #0
   82858:	db07      	blt.n	8286a <__sbprintf+0x52>
   8285a:	4630      	mov	r0, r6
   8285c:	4669      	mov	r1, sp
   8285e:	f000 f99e 	bl	82b9e <_fflush_r>
   82862:	2800      	cmp	r0, #0
   82864:	bf18      	it	ne
   82866:	f04f 35ff 	movne.w	r5, #4294967295
   8286a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8286e:	065b      	lsls	r3, r3, #25
   82870:	d503      	bpl.n	8287a <__sbprintf+0x62>
   82872:	89a3      	ldrh	r3, [r4, #12]
   82874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82878:	81a3      	strh	r3, [r4, #12]
   8287a:	4628      	mov	r0, r5
   8287c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   82880:	bd70      	pop	{r4, r5, r6, pc}
   82882:	bf00      	nop

00082884 <__swbuf_r>:
   82884:	b570      	push	{r4, r5, r6, lr}
   82886:	460d      	mov	r5, r1
   82888:	4614      	mov	r4, r2
   8288a:	4606      	mov	r6, r0
   8288c:	b118      	cbz	r0, 82896 <__swbuf_r+0x12>
   8288e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82890:	b90b      	cbnz	r3, 82896 <__swbuf_r+0x12>
   82892:	f000 f9cd 	bl	82c30 <__sinit>
   82896:	69a3      	ldr	r3, [r4, #24]
   82898:	60a3      	str	r3, [r4, #8]
   8289a:	89a3      	ldrh	r3, [r4, #12]
   8289c:	0719      	lsls	r1, r3, #28
   8289e:	d50d      	bpl.n	828bc <__swbuf_r+0x38>
   828a0:	6923      	ldr	r3, [r4, #16]
   828a2:	b15b      	cbz	r3, 828bc <__swbuf_r+0x38>
   828a4:	89a3      	ldrh	r3, [r4, #12]
   828a6:	b2ed      	uxtb	r5, r5
   828a8:	049a      	lsls	r2, r3, #18
   828aa:	d410      	bmi.n	828ce <__swbuf_r+0x4a>
   828ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   828b0:	81a3      	strh	r3, [r4, #12]
   828b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   828b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   828b8:	6663      	str	r3, [r4, #100]	; 0x64
   828ba:	e008      	b.n	828ce <__swbuf_r+0x4a>
   828bc:	4630      	mov	r0, r6
   828be:	4621      	mov	r1, r4
   828c0:	f000 f832 	bl	82928 <__swsetup_r>
   828c4:	2800      	cmp	r0, #0
   828c6:	d0ed      	beq.n	828a4 <__swbuf_r+0x20>
   828c8:	f04f 30ff 	mov.w	r0, #4294967295
   828cc:	bd70      	pop	{r4, r5, r6, pc}
   828ce:	6923      	ldr	r3, [r4, #16]
   828d0:	6820      	ldr	r0, [r4, #0]
   828d2:	1ac0      	subs	r0, r0, r3
   828d4:	6963      	ldr	r3, [r4, #20]
   828d6:	4298      	cmp	r0, r3
   828d8:	db05      	blt.n	828e6 <__swbuf_r+0x62>
   828da:	4630      	mov	r0, r6
   828dc:	4621      	mov	r1, r4
   828de:	f000 f95e 	bl	82b9e <_fflush_r>
   828e2:	2800      	cmp	r0, #0
   828e4:	d1f0      	bne.n	828c8 <__swbuf_r+0x44>
   828e6:	68a3      	ldr	r3, [r4, #8]
   828e8:	3001      	adds	r0, #1
   828ea:	3b01      	subs	r3, #1
   828ec:	60a3      	str	r3, [r4, #8]
   828ee:	6823      	ldr	r3, [r4, #0]
   828f0:	1c5a      	adds	r2, r3, #1
   828f2:	6022      	str	r2, [r4, #0]
   828f4:	701d      	strb	r5, [r3, #0]
   828f6:	6963      	ldr	r3, [r4, #20]
   828f8:	4298      	cmp	r0, r3
   828fa:	d004      	beq.n	82906 <__swbuf_r+0x82>
   828fc:	89a3      	ldrh	r3, [r4, #12]
   828fe:	07db      	lsls	r3, r3, #31
   82900:	d507      	bpl.n	82912 <__swbuf_r+0x8e>
   82902:	2d0a      	cmp	r5, #10
   82904:	d105      	bne.n	82912 <__swbuf_r+0x8e>
   82906:	4630      	mov	r0, r6
   82908:	4621      	mov	r1, r4
   8290a:	f000 f948 	bl	82b9e <_fflush_r>
   8290e:	2800      	cmp	r0, #0
   82910:	d1da      	bne.n	828c8 <__swbuf_r+0x44>
   82912:	4628      	mov	r0, r5
   82914:	bd70      	pop	{r4, r5, r6, pc}

00082916 <__swbuf>:
   82916:	460a      	mov	r2, r1
   82918:	4902      	ldr	r1, [pc, #8]	; (82924 <__swbuf+0xe>)
   8291a:	4603      	mov	r3, r0
   8291c:	6808      	ldr	r0, [r1, #0]
   8291e:	4619      	mov	r1, r3
   82920:	f7ff bfb0 	b.w	82884 <__swbuf_r>
   82924:	20070008 	.word	0x20070008

00082928 <__swsetup_r>:
   82928:	b538      	push	{r3, r4, r5, lr}
   8292a:	4b2b      	ldr	r3, [pc, #172]	; (829d8 <__swsetup_r+0xb0>)
   8292c:	4605      	mov	r5, r0
   8292e:	6818      	ldr	r0, [r3, #0]
   82930:	460c      	mov	r4, r1
   82932:	b118      	cbz	r0, 8293c <__swsetup_r+0x14>
   82934:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82936:	b90b      	cbnz	r3, 8293c <__swsetup_r+0x14>
   82938:	f000 f97a 	bl	82c30 <__sinit>
   8293c:	89a2      	ldrh	r2, [r4, #12]
   8293e:	b293      	uxth	r3, r2
   82940:	0718      	lsls	r0, r3, #28
   82942:	d420      	bmi.n	82986 <__swsetup_r+0x5e>
   82944:	06d9      	lsls	r1, r3, #27
   82946:	d405      	bmi.n	82954 <__swsetup_r+0x2c>
   82948:	2309      	movs	r3, #9
   8294a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   8294e:	602b      	str	r3, [r5, #0]
   82950:	81a2      	strh	r2, [r4, #12]
   82952:	e03b      	b.n	829cc <__swsetup_r+0xa4>
   82954:	0758      	lsls	r0, r3, #29
   82956:	d512      	bpl.n	8297e <__swsetup_r+0x56>
   82958:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8295a:	b141      	cbz	r1, 8296e <__swsetup_r+0x46>
   8295c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82960:	4299      	cmp	r1, r3
   82962:	d002      	beq.n	8296a <__swsetup_r+0x42>
   82964:	4628      	mov	r0, r5
   82966:	f000 fae7 	bl	82f38 <_free_r>
   8296a:	2300      	movs	r3, #0
   8296c:	6323      	str	r3, [r4, #48]	; 0x30
   8296e:	89a3      	ldrh	r3, [r4, #12]
   82970:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   82974:	81a3      	strh	r3, [r4, #12]
   82976:	2300      	movs	r3, #0
   82978:	6063      	str	r3, [r4, #4]
   8297a:	6923      	ldr	r3, [r4, #16]
   8297c:	6023      	str	r3, [r4, #0]
   8297e:	89a3      	ldrh	r3, [r4, #12]
   82980:	f043 0308 	orr.w	r3, r3, #8
   82984:	81a3      	strh	r3, [r4, #12]
   82986:	6923      	ldr	r3, [r4, #16]
   82988:	b94b      	cbnz	r3, 8299e <__swsetup_r+0x76>
   8298a:	89a3      	ldrh	r3, [r4, #12]
   8298c:	f403 7320 	and.w	r3, r3, #640	; 0x280
   82990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82994:	d003      	beq.n	8299e <__swsetup_r+0x76>
   82996:	4628      	mov	r0, r5
   82998:	4621      	mov	r1, r4
   8299a:	f000 fd4d 	bl	83438 <__smakebuf_r>
   8299e:	89a3      	ldrh	r3, [r4, #12]
   829a0:	f013 0201 	ands.w	r2, r3, #1
   829a4:	d005      	beq.n	829b2 <__swsetup_r+0x8a>
   829a6:	2200      	movs	r2, #0
   829a8:	60a2      	str	r2, [r4, #8]
   829aa:	6962      	ldr	r2, [r4, #20]
   829ac:	4252      	negs	r2, r2
   829ae:	61a2      	str	r2, [r4, #24]
   829b0:	e003      	b.n	829ba <__swsetup_r+0x92>
   829b2:	0799      	lsls	r1, r3, #30
   829b4:	bf58      	it	pl
   829b6:	6962      	ldrpl	r2, [r4, #20]
   829b8:	60a2      	str	r2, [r4, #8]
   829ba:	6922      	ldr	r2, [r4, #16]
   829bc:	b94a      	cbnz	r2, 829d2 <__swsetup_r+0xaa>
   829be:	f003 0080 	and.w	r0, r3, #128	; 0x80
   829c2:	b280      	uxth	r0, r0
   829c4:	b130      	cbz	r0, 829d4 <__swsetup_r+0xac>
   829c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   829ca:	81a3      	strh	r3, [r4, #12]
   829cc:	f04f 30ff 	mov.w	r0, #4294967295
   829d0:	bd38      	pop	{r3, r4, r5, pc}
   829d2:	2000      	movs	r0, #0
   829d4:	bd38      	pop	{r3, r4, r5, pc}
   829d6:	bf00      	nop
   829d8:	20070008 	.word	0x20070008

000829dc <__register_exitproc>:
   829dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   829e0:	4698      	mov	r8, r3
   829e2:	4b22      	ldr	r3, [pc, #136]	; (82a6c <__register_exitproc+0x90>)
   829e4:	4606      	mov	r6, r0
   829e6:	681c      	ldr	r4, [r3, #0]
   829e8:	460f      	mov	r7, r1
   829ea:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   829ee:	4691      	mov	r9, r2
   829f0:	b918      	cbnz	r0, 829fa <__register_exitproc+0x1e>
   829f2:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   829f6:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   829fa:	6843      	ldr	r3, [r0, #4]
   829fc:	2b1f      	cmp	r3, #31
   829fe:	dd16      	ble.n	82a2e <__register_exitproc+0x52>
   82a00:	4b1b      	ldr	r3, [pc, #108]	; (82a70 <__register_exitproc+0x94>)
   82a02:	b91b      	cbnz	r3, 82a0c <__register_exitproc+0x30>
   82a04:	f04f 30ff 	mov.w	r0, #4294967295
   82a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82a0c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   82a10:	f000 fd76 	bl	83500 <malloc>
   82a14:	2800      	cmp	r0, #0
   82a16:	d0f5      	beq.n	82a04 <__register_exitproc+0x28>
   82a18:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   82a1c:	2500      	movs	r5, #0
   82a1e:	6045      	str	r5, [r0, #4]
   82a20:	6001      	str	r1, [r0, #0]
   82a22:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   82a26:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   82a2a:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   82a2e:	6844      	ldr	r4, [r0, #4]
   82a30:	b1a6      	cbz	r6, 82a5c <__register_exitproc+0x80>
   82a32:	2201      	movs	r2, #1
   82a34:	40a2      	lsls	r2, r4
   82a36:	eb00 0584 	add.w	r5, r0, r4, lsl #2
   82a3a:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
   82a3e:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   82a42:	2e02      	cmp	r6, #2
   82a44:	ea41 0102 	orr.w	r1, r1, r2
   82a48:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   82a4c:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
   82a50:	d104      	bne.n	82a5c <__register_exitproc+0x80>
   82a52:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   82a56:	431a      	orrs	r2, r3
   82a58:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   82a5c:	1c63      	adds	r3, r4, #1
   82a5e:	3402      	adds	r4, #2
   82a60:	6043      	str	r3, [r0, #4]
   82a62:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
   82a66:	2000      	movs	r0, #0
   82a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82a6c:	000846b8 	.word	0x000846b8
   82a70:	00083501 	.word	0x00083501

00082a74 <register_fini>:
   82a74:	4b02      	ldr	r3, [pc, #8]	; (82a80 <register_fini+0xc>)
   82a76:	b113      	cbz	r3, 82a7e <register_fini+0xa>
   82a78:	4802      	ldr	r0, [pc, #8]	; (82a84 <register_fini+0x10>)
   82a7a:	f7ff b977 	b.w	81d6c <atexit>
   82a7e:	4770      	bx	lr
   82a80:	00000000 	.word	0x00000000
   82a84:	00081d79 	.word	0x00081d79

00082a88 <__sflush_r>:
   82a88:	898a      	ldrh	r2, [r1, #12]
   82a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82a8e:	b293      	uxth	r3, r2
   82a90:	4605      	mov	r5, r0
   82a92:	0718      	lsls	r0, r3, #28
   82a94:	460c      	mov	r4, r1
   82a96:	d45e      	bmi.n	82b56 <__sflush_r+0xce>
   82a98:	684b      	ldr	r3, [r1, #4]
   82a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   82a9e:	2b00      	cmp	r3, #0
   82aa0:	818a      	strh	r2, [r1, #12]
   82aa2:	dc02      	bgt.n	82aaa <__sflush_r+0x22>
   82aa4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82aa6:	2b00      	cmp	r3, #0
   82aa8:	dd18      	ble.n	82adc <__sflush_r+0x54>
   82aaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   82aac:	b1b6      	cbz	r6, 82adc <__sflush_r+0x54>
   82aae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   82ab2:	2300      	movs	r3, #0
   82ab4:	b292      	uxth	r2, r2
   82ab6:	682f      	ldr	r7, [r5, #0]
   82ab8:	602b      	str	r3, [r5, #0]
   82aba:	b10a      	cbz	r2, 82ac0 <__sflush_r+0x38>
   82abc:	6d22      	ldr	r2, [r4, #80]	; 0x50
   82abe:	e010      	b.n	82ae2 <__sflush_r+0x5a>
   82ac0:	69e1      	ldr	r1, [r4, #28]
   82ac2:	4628      	mov	r0, r5
   82ac4:	2301      	movs	r3, #1
   82ac6:	47b0      	blx	r6
   82ac8:	1c41      	adds	r1, r0, #1
   82aca:	4602      	mov	r2, r0
   82acc:	d109      	bne.n	82ae2 <__sflush_r+0x5a>
   82ace:	682b      	ldr	r3, [r5, #0]
   82ad0:	b13b      	cbz	r3, 82ae2 <__sflush_r+0x5a>
   82ad2:	2b1d      	cmp	r3, #29
   82ad4:	d001      	beq.n	82ada <__sflush_r+0x52>
   82ad6:	2b16      	cmp	r3, #22
   82ad8:	d14a      	bne.n	82b70 <__sflush_r+0xe8>
   82ada:	602f      	str	r7, [r5, #0]
   82adc:	2000      	movs	r0, #0
   82ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82ae2:	89a3      	ldrh	r3, [r4, #12]
   82ae4:	075b      	lsls	r3, r3, #29
   82ae6:	d505      	bpl.n	82af4 <__sflush_r+0x6c>
   82ae8:	6863      	ldr	r3, [r4, #4]
   82aea:	1ad2      	subs	r2, r2, r3
   82aec:	6b23      	ldr	r3, [r4, #48]	; 0x30
   82aee:	b10b      	cbz	r3, 82af4 <__sflush_r+0x6c>
   82af0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   82af2:	1ad2      	subs	r2, r2, r3
   82af4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   82af6:	4628      	mov	r0, r5
   82af8:	69e1      	ldr	r1, [r4, #28]
   82afa:	2300      	movs	r3, #0
   82afc:	47b0      	blx	r6
   82afe:	1c46      	adds	r6, r0, #1
   82b00:	89a2      	ldrh	r2, [r4, #12]
   82b02:	d105      	bne.n	82b10 <__sflush_r+0x88>
   82b04:	682b      	ldr	r3, [r5, #0]
   82b06:	b11b      	cbz	r3, 82b10 <__sflush_r+0x88>
   82b08:	2b1d      	cmp	r3, #29
   82b0a:	d001      	beq.n	82b10 <__sflush_r+0x88>
   82b0c:	2b16      	cmp	r3, #22
   82b0e:	d11d      	bne.n	82b4c <__sflush_r+0xc4>
   82b10:	2300      	movs	r3, #0
   82b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82b16:	b292      	uxth	r2, r2
   82b18:	6063      	str	r3, [r4, #4]
   82b1a:	6923      	ldr	r3, [r4, #16]
   82b1c:	04d1      	lsls	r1, r2, #19
   82b1e:	81a2      	strh	r2, [r4, #12]
   82b20:	6023      	str	r3, [r4, #0]
   82b22:	d504      	bpl.n	82b2e <__sflush_r+0xa6>
   82b24:	1c42      	adds	r2, r0, #1
   82b26:	d101      	bne.n	82b2c <__sflush_r+0xa4>
   82b28:	682b      	ldr	r3, [r5, #0]
   82b2a:	b903      	cbnz	r3, 82b2e <__sflush_r+0xa6>
   82b2c:	6520      	str	r0, [r4, #80]	; 0x50
   82b2e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82b30:	602f      	str	r7, [r5, #0]
   82b32:	2900      	cmp	r1, #0
   82b34:	d0d2      	beq.n	82adc <__sflush_r+0x54>
   82b36:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82b3a:	4299      	cmp	r1, r3
   82b3c:	d002      	beq.n	82b44 <__sflush_r+0xbc>
   82b3e:	4628      	mov	r0, r5
   82b40:	f000 f9fa 	bl	82f38 <_free_r>
   82b44:	2000      	movs	r0, #0
   82b46:	6320      	str	r0, [r4, #48]	; 0x30
   82b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   82b50:	81a2      	strh	r2, [r4, #12]
   82b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b56:	690e      	ldr	r6, [r1, #16]
   82b58:	2e00      	cmp	r6, #0
   82b5a:	d0bf      	beq.n	82adc <__sflush_r+0x54>
   82b5c:	079b      	lsls	r3, r3, #30
   82b5e:	680a      	ldr	r2, [r1, #0]
   82b60:	bf0c      	ite	eq
   82b62:	694b      	ldreq	r3, [r1, #20]
   82b64:	2300      	movne	r3, #0
   82b66:	ebc6 0802 	rsb	r8, r6, r2
   82b6a:	600e      	str	r6, [r1, #0]
   82b6c:	608b      	str	r3, [r1, #8]
   82b6e:	e012      	b.n	82b96 <__sflush_r+0x10e>
   82b70:	89a3      	ldrh	r3, [r4, #12]
   82b72:	f04f 30ff 	mov.w	r0, #4294967295
   82b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82b7a:	81a3      	strh	r3, [r4, #12]
   82b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b80:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82b82:	4628      	mov	r0, r5
   82b84:	69e1      	ldr	r1, [r4, #28]
   82b86:	4632      	mov	r2, r6
   82b88:	4643      	mov	r3, r8
   82b8a:	47b8      	blx	r7
   82b8c:	2800      	cmp	r0, #0
   82b8e:	ddef      	ble.n	82b70 <__sflush_r+0xe8>
   82b90:	4406      	add	r6, r0
   82b92:	ebc0 0808 	rsb	r8, r0, r8
   82b96:	f1b8 0f00 	cmp.w	r8, #0
   82b9a:	dcf1      	bgt.n	82b80 <__sflush_r+0xf8>
   82b9c:	e79e      	b.n	82adc <__sflush_r+0x54>

00082b9e <_fflush_r>:
   82b9e:	b538      	push	{r3, r4, r5, lr}
   82ba0:	460c      	mov	r4, r1
   82ba2:	4605      	mov	r5, r0
   82ba4:	b118      	cbz	r0, 82bae <_fflush_r+0x10>
   82ba6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82ba8:	b90b      	cbnz	r3, 82bae <_fflush_r+0x10>
   82baa:	f000 f841 	bl	82c30 <__sinit>
   82bae:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   82bb2:	b128      	cbz	r0, 82bc0 <_fflush_r+0x22>
   82bb4:	4628      	mov	r0, r5
   82bb6:	4621      	mov	r1, r4
   82bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82bbc:	f7ff bf64 	b.w	82a88 <__sflush_r>
   82bc0:	bd38      	pop	{r3, r4, r5, pc}

00082bc2 <fflush>:
   82bc2:	4601      	mov	r1, r0
   82bc4:	b920      	cbnz	r0, 82bd0 <fflush+0xe>
   82bc6:	4b04      	ldr	r3, [pc, #16]	; (82bd8 <fflush+0x16>)
   82bc8:	4904      	ldr	r1, [pc, #16]	; (82bdc <fflush+0x1a>)
   82bca:	6818      	ldr	r0, [r3, #0]
   82bcc:	f000 bbd4 	b.w	83378 <_fwalk_reent>
   82bd0:	4b03      	ldr	r3, [pc, #12]	; (82be0 <fflush+0x1e>)
   82bd2:	6818      	ldr	r0, [r3, #0]
   82bd4:	f7ff bfe3 	b.w	82b9e <_fflush_r>
   82bd8:	000846b8 	.word	0x000846b8
   82bdc:	00082b9f 	.word	0x00082b9f
   82be0:	20070008 	.word	0x20070008

00082be4 <__fp_lock>:
   82be4:	2000      	movs	r0, #0
   82be6:	4770      	bx	lr

00082be8 <__fp_unlock>:
   82be8:	2000      	movs	r0, #0
   82bea:	4770      	bx	lr

00082bec <_cleanup_r>:
   82bec:	4901      	ldr	r1, [pc, #4]	; (82bf4 <_cleanup_r+0x8>)
   82bee:	f000 bba7 	b.w	83340 <_fwalk>
   82bf2:	bf00      	nop
   82bf4:	00083f0d 	.word	0x00083f0d

00082bf8 <__sfmoreglue>:
   82bf8:	b570      	push	{r4, r5, r6, lr}
   82bfa:	1e4b      	subs	r3, r1, #1
   82bfc:	2568      	movs	r5, #104	; 0x68
   82bfe:	435d      	muls	r5, r3
   82c00:	460e      	mov	r6, r1
   82c02:	f105 0174 	add.w	r1, r5, #116	; 0x74
   82c06:	f000 fc8b 	bl	83520 <_malloc_r>
   82c0a:	4604      	mov	r4, r0
   82c0c:	b140      	cbz	r0, 82c20 <__sfmoreglue+0x28>
   82c0e:	2100      	movs	r1, #0
   82c10:	e880 0042 	stmia.w	r0, {r1, r6}
   82c14:	300c      	adds	r0, #12
   82c16:	60a0      	str	r0, [r4, #8]
   82c18:	f105 0268 	add.w	r2, r5, #104	; 0x68
   82c1c:	f7ff f911 	bl	81e42 <memset>
   82c20:	4620      	mov	r0, r4
   82c22:	bd70      	pop	{r4, r5, r6, pc}

00082c24 <_cleanup>:
   82c24:	4b01      	ldr	r3, [pc, #4]	; (82c2c <_cleanup+0x8>)
   82c26:	6818      	ldr	r0, [r3, #0]
   82c28:	f7ff bfe0 	b.w	82bec <_cleanup_r>
   82c2c:	000846b8 	.word	0x000846b8

00082c30 <__sinit>:
   82c30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82c34:	6b84      	ldr	r4, [r0, #56]	; 0x38
   82c36:	4606      	mov	r6, r0
   82c38:	2c00      	cmp	r4, #0
   82c3a:	d162      	bne.n	82d02 <__sinit+0xd2>
   82c3c:	4b32      	ldr	r3, [pc, #200]	; (82d08 <__sinit+0xd8>)
   82c3e:	6845      	ldr	r5, [r0, #4]
   82c40:	63c3      	str	r3, [r0, #60]	; 0x3c
   82c42:	2303      	movs	r3, #3
   82c44:	f8c0 32e4 	str.w	r3, [r0, #740]	; 0x2e4
   82c48:	f500 733b 	add.w	r3, r0, #748	; 0x2ec
   82c4c:	f8c0 32e8 	str.w	r3, [r0, #744]	; 0x2e8
   82c50:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 82d10 <__sinit+0xe0>
   82c54:	2304      	movs	r3, #4
   82c56:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 82d14 <__sinit+0xe4>
   82c5a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 82d18 <__sinit+0xe8>
   82c5e:	4f2b      	ldr	r7, [pc, #172]	; (82d0c <__sinit+0xdc>)
   82c60:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
   82c64:	4621      	mov	r1, r4
   82c66:	81ab      	strh	r3, [r5, #12]
   82c68:	602c      	str	r4, [r5, #0]
   82c6a:	606c      	str	r4, [r5, #4]
   82c6c:	60ac      	str	r4, [r5, #8]
   82c6e:	666c      	str	r4, [r5, #100]	; 0x64
   82c70:	81ec      	strh	r4, [r5, #14]
   82c72:	612c      	str	r4, [r5, #16]
   82c74:	616c      	str	r4, [r5, #20]
   82c76:	61ac      	str	r4, [r5, #24]
   82c78:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82c7c:	2208      	movs	r2, #8
   82c7e:	f7ff f8e0 	bl	81e42 <memset>
   82c82:	61ed      	str	r5, [r5, #28]
   82c84:	f8c5 a020 	str.w	sl, [r5, #32]
   82c88:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   82c8c:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   82c90:	62ef      	str	r7, [r5, #44]	; 0x2c
   82c92:	68b5      	ldr	r5, [r6, #8]
   82c94:	2309      	movs	r3, #9
   82c96:	f04f 0b01 	mov.w	fp, #1
   82c9a:	81ab      	strh	r3, [r5, #12]
   82c9c:	602c      	str	r4, [r5, #0]
   82c9e:	606c      	str	r4, [r5, #4]
   82ca0:	60ac      	str	r4, [r5, #8]
   82ca2:	666c      	str	r4, [r5, #100]	; 0x64
   82ca4:	f8a5 b00e 	strh.w	fp, [r5, #14]
   82ca8:	612c      	str	r4, [r5, #16]
   82caa:	616c      	str	r4, [r5, #20]
   82cac:	61ac      	str	r4, [r5, #24]
   82cae:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82cb2:	4621      	mov	r1, r4
   82cb4:	2208      	movs	r2, #8
   82cb6:	f7ff f8c4 	bl	81e42 <memset>
   82cba:	61ed      	str	r5, [r5, #28]
   82cbc:	f8c5 a020 	str.w	sl, [r5, #32]
   82cc0:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   82cc4:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   82cc8:	62ef      	str	r7, [r5, #44]	; 0x2c
   82cca:	68f5      	ldr	r5, [r6, #12]
   82ccc:	2312      	movs	r3, #18
   82cce:	81ab      	strh	r3, [r5, #12]
   82cd0:	2302      	movs	r3, #2
   82cd2:	602c      	str	r4, [r5, #0]
   82cd4:	606c      	str	r4, [r5, #4]
   82cd6:	60ac      	str	r4, [r5, #8]
   82cd8:	666c      	str	r4, [r5, #100]	; 0x64
   82cda:	81eb      	strh	r3, [r5, #14]
   82cdc:	612c      	str	r4, [r5, #16]
   82cde:	616c      	str	r4, [r5, #20]
   82ce0:	61ac      	str	r4, [r5, #24]
   82ce2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82ce6:	4621      	mov	r1, r4
   82ce8:	2208      	movs	r2, #8
   82cea:	f7ff f8aa 	bl	81e42 <memset>
   82cee:	61ed      	str	r5, [r5, #28]
   82cf0:	f8c5 a020 	str.w	sl, [r5, #32]
   82cf4:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   82cf8:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   82cfc:	62ef      	str	r7, [r5, #44]	; 0x2c
   82cfe:	f8c6 b038 	str.w	fp, [r6, #56]	; 0x38
   82d02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82d06:	bf00      	nop
   82d08:	00082bed 	.word	0x00082bed
   82d0c:	00083d7f 	.word	0x00083d7f
   82d10:	00083cfd 	.word	0x00083cfd
   82d14:	00083d23 	.word	0x00083d23
   82d18:	00083d5b 	.word	0x00083d5b

00082d1c <__sfp>:
   82d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82d1e:	4b1c      	ldr	r3, [pc, #112]	; (82d90 <__sfp+0x74>)
   82d20:	4607      	mov	r7, r0
   82d22:	681e      	ldr	r6, [r3, #0]
   82d24:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   82d26:	b913      	cbnz	r3, 82d2e <__sfp+0x12>
   82d28:	4630      	mov	r0, r6
   82d2a:	f7ff ff81 	bl	82c30 <__sinit>
   82d2e:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
   82d32:	68b4      	ldr	r4, [r6, #8]
   82d34:	6873      	ldr	r3, [r6, #4]
   82d36:	3b01      	subs	r3, #1
   82d38:	d404      	bmi.n	82d44 <__sfp+0x28>
   82d3a:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   82d3e:	b175      	cbz	r5, 82d5e <__sfp+0x42>
   82d40:	3468      	adds	r4, #104	; 0x68
   82d42:	e7f8      	b.n	82d36 <__sfp+0x1a>
   82d44:	6833      	ldr	r3, [r6, #0]
   82d46:	b92b      	cbnz	r3, 82d54 <__sfp+0x38>
   82d48:	4638      	mov	r0, r7
   82d4a:	2104      	movs	r1, #4
   82d4c:	f7ff ff54 	bl	82bf8 <__sfmoreglue>
   82d50:	6030      	str	r0, [r6, #0]
   82d52:	b108      	cbz	r0, 82d58 <__sfp+0x3c>
   82d54:	6836      	ldr	r6, [r6, #0]
   82d56:	e7ec      	b.n	82d32 <__sfp+0x16>
   82d58:	230c      	movs	r3, #12
   82d5a:	603b      	str	r3, [r7, #0]
   82d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   82d62:	81e3      	strh	r3, [r4, #14]
   82d64:	2301      	movs	r3, #1
   82d66:	81a3      	strh	r3, [r4, #12]
   82d68:	6665      	str	r5, [r4, #100]	; 0x64
   82d6a:	6025      	str	r5, [r4, #0]
   82d6c:	60a5      	str	r5, [r4, #8]
   82d6e:	6065      	str	r5, [r4, #4]
   82d70:	6125      	str	r5, [r4, #16]
   82d72:	6165      	str	r5, [r4, #20]
   82d74:	61a5      	str	r5, [r4, #24]
   82d76:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   82d7a:	4629      	mov	r1, r5
   82d7c:	2208      	movs	r2, #8
   82d7e:	f7ff f860 	bl	81e42 <memset>
   82d82:	6325      	str	r5, [r4, #48]	; 0x30
   82d84:	6365      	str	r5, [r4, #52]	; 0x34
   82d86:	6465      	str	r5, [r4, #68]	; 0x44
   82d88:	64a5      	str	r5, [r4, #72]	; 0x48
   82d8a:	4620      	mov	r0, r4
   82d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d8e:	bf00      	nop
   82d90:	000846b8 	.word	0x000846b8

00082d94 <__sfp_lock_acquire>:
   82d94:	4770      	bx	lr

00082d96 <__sfp_lock_release>:
   82d96:	4770      	bx	lr

00082d98 <__sinit_lock_acquire>:
   82d98:	4770      	bx	lr

00082d9a <__sinit_lock_release>:
   82d9a:	4770      	bx	lr

00082d9c <__fp_lock_all>:
   82d9c:	4b02      	ldr	r3, [pc, #8]	; (82da8 <__fp_lock_all+0xc>)
   82d9e:	4903      	ldr	r1, [pc, #12]	; (82dac <__fp_lock_all+0x10>)
   82da0:	6818      	ldr	r0, [r3, #0]
   82da2:	f000 bacd 	b.w	83340 <_fwalk>
   82da6:	bf00      	nop
   82da8:	20070008 	.word	0x20070008
   82dac:	00082be5 	.word	0x00082be5

00082db0 <__fp_unlock_all>:
   82db0:	4b02      	ldr	r3, [pc, #8]	; (82dbc <__fp_unlock_all+0xc>)
   82db2:	4903      	ldr	r1, [pc, #12]	; (82dc0 <__fp_unlock_all+0x10>)
   82db4:	6818      	ldr	r0, [r3, #0]
   82db6:	f000 bac3 	b.w	83340 <_fwalk>
   82dba:	bf00      	nop
   82dbc:	20070008 	.word	0x20070008
   82dc0:	00082be9 	.word	0x00082be9

00082dc4 <_fputwc_r>:
   82dc4:	8993      	ldrh	r3, [r2, #12]
   82dc6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   82dca:	460e      	mov	r6, r1
   82dcc:	0499      	lsls	r1, r3, #18
   82dce:	4680      	mov	r8, r0
   82dd0:	4614      	mov	r4, r2
   82dd2:	d406      	bmi.n	82de2 <_fputwc_r+0x1e>
   82dd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82dd8:	8193      	strh	r3, [r2, #12]
   82dda:	6e53      	ldr	r3, [r2, #100]	; 0x64
   82ddc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82de0:	6653      	str	r3, [r2, #100]	; 0x64
   82de2:	f000 fb0b 	bl	833fc <__locale_mb_cur_max>
   82de6:	2801      	cmp	r0, #1
   82de8:	d106      	bne.n	82df8 <_fputwc_r+0x34>
   82dea:	1e73      	subs	r3, r6, #1
   82dec:	2bfe      	cmp	r3, #254	; 0xfe
   82dee:	d803      	bhi.n	82df8 <_fputwc_r+0x34>
   82df0:	f88d 6004 	strb.w	r6, [sp, #4]
   82df4:	4607      	mov	r7, r0
   82df6:	e00e      	b.n	82e16 <_fputwc_r+0x52>
   82df8:	4632      	mov	r2, r6
   82dfa:	4640      	mov	r0, r8
   82dfc:	a901      	add	r1, sp, #4
   82dfe:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82e02:	f000 ffcb 	bl	83d9c <_wcrtomb_r>
   82e06:	1c42      	adds	r2, r0, #1
   82e08:	4607      	mov	r7, r0
   82e0a:	d104      	bne.n	82e16 <_fputwc_r+0x52>
   82e0c:	89a3      	ldrh	r3, [r4, #12]
   82e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82e12:	81a3      	strh	r3, [r4, #12]
   82e14:	e02b      	b.n	82e6e <_fputwc_r+0xaa>
   82e16:	2500      	movs	r5, #0
   82e18:	42bd      	cmp	r5, r7
   82e1a:	d024      	beq.n	82e66 <_fputwc_r+0xa2>
   82e1c:	68a2      	ldr	r2, [r4, #8]
   82e1e:	ab01      	add	r3, sp, #4
   82e20:	3a01      	subs	r2, #1
   82e22:	2a00      	cmp	r2, #0
   82e24:	60a2      	str	r2, [r4, #8]
   82e26:	da16      	bge.n	82e56 <_fputwc_r+0x92>
   82e28:	69a1      	ldr	r1, [r4, #24]
   82e2a:	428a      	cmp	r2, r1
   82e2c:	db08      	blt.n	82e40 <_fputwc_r+0x7c>
   82e2e:	5d5b      	ldrb	r3, [r3, r5]
   82e30:	6822      	ldr	r2, [r4, #0]
   82e32:	7013      	strb	r3, [r2, #0]
   82e34:	6823      	ldr	r3, [r4, #0]
   82e36:	7819      	ldrb	r1, [r3, #0]
   82e38:	290a      	cmp	r1, #10
   82e3a:	d110      	bne.n	82e5e <_fputwc_r+0x9a>
   82e3c:	4640      	mov	r0, r8
   82e3e:	e001      	b.n	82e44 <_fputwc_r+0x80>
   82e40:	5d59      	ldrb	r1, [r3, r5]
   82e42:	4640      	mov	r0, r8
   82e44:	4622      	mov	r2, r4
   82e46:	f7ff fd1d 	bl	82884 <__swbuf_r>
   82e4a:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   82e4e:	4258      	negs	r0, r3
   82e50:	4158      	adcs	r0, r3
   82e52:	b130      	cbz	r0, 82e62 <_fputwc_r+0x9e>
   82e54:	e009      	b.n	82e6a <_fputwc_r+0xa6>
   82e56:	5d5b      	ldrb	r3, [r3, r5]
   82e58:	6822      	ldr	r2, [r4, #0]
   82e5a:	7013      	strb	r3, [r2, #0]
   82e5c:	6823      	ldr	r3, [r4, #0]
   82e5e:	3301      	adds	r3, #1
   82e60:	6023      	str	r3, [r4, #0]
   82e62:	3501      	adds	r5, #1
   82e64:	e7d8      	b.n	82e18 <_fputwc_r+0x54>
   82e66:	4630      	mov	r0, r6
   82e68:	e001      	b.n	82e6e <_fputwc_r+0xaa>
   82e6a:	f04f 30ff 	mov.w	r0, #4294967295
   82e6e:	b002      	add	sp, #8
   82e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082e74 <fputwc>:
   82e74:	4b08      	ldr	r3, [pc, #32]	; (82e98 <fputwc+0x24>)
   82e76:	b570      	push	{r4, r5, r6, lr}
   82e78:	681c      	ldr	r4, [r3, #0]
   82e7a:	4606      	mov	r6, r0
   82e7c:	460d      	mov	r5, r1
   82e7e:	b124      	cbz	r4, 82e8a <fputwc+0x16>
   82e80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   82e82:	b913      	cbnz	r3, 82e8a <fputwc+0x16>
   82e84:	4620      	mov	r0, r4
   82e86:	f7ff fed3 	bl	82c30 <__sinit>
   82e8a:	4620      	mov	r0, r4
   82e8c:	4631      	mov	r1, r6
   82e8e:	462a      	mov	r2, r5
   82e90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   82e94:	f7ff bf96 	b.w	82dc4 <_fputwc_r>
   82e98:	20070008 	.word	0x20070008

00082e9c <_malloc_trim_r>:
   82e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82e9e:	4d23      	ldr	r5, [pc, #140]	; (82f2c <_malloc_trim_r+0x90>)
   82ea0:	460e      	mov	r6, r1
   82ea2:	4604      	mov	r4, r0
   82ea4:	f000 fd6d 	bl	83982 <__malloc_lock>
   82ea8:	68ab      	ldr	r3, [r5, #8]
   82eaa:	685f      	ldr	r7, [r3, #4]
   82eac:	f027 0703 	bic.w	r7, r7, #3
   82eb0:	1bbe      	subs	r6, r7, r6
   82eb2:	f606 76ef 	addw	r6, r6, #4079	; 0xfef
   82eb6:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
   82eba:	f026 060f 	bic.w	r6, r6, #15
   82ebe:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   82ec2:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   82ec6:	da04      	bge.n	82ed2 <_malloc_trim_r+0x36>
   82ec8:	4620      	mov	r0, r4
   82eca:	f000 fd5b 	bl	83984 <__malloc_unlock>
   82ece:	2000      	movs	r0, #0
   82ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82ed2:	4620      	mov	r0, r4
   82ed4:	2100      	movs	r1, #0
   82ed6:	f000 ff01 	bl	83cdc <_sbrk_r>
   82eda:	68ab      	ldr	r3, [r5, #8]
   82edc:	443b      	add	r3, r7
   82ede:	4298      	cmp	r0, r3
   82ee0:	d1f2      	bne.n	82ec8 <_malloc_trim_r+0x2c>
   82ee2:	4620      	mov	r0, r4
   82ee4:	4271      	negs	r1, r6
   82ee6:	f000 fef9 	bl	83cdc <_sbrk_r>
   82eea:	3001      	adds	r0, #1
   82eec:	d110      	bne.n	82f10 <_malloc_trim_r+0x74>
   82eee:	4620      	mov	r0, r4
   82ef0:	2100      	movs	r1, #0
   82ef2:	f000 fef3 	bl	83cdc <_sbrk_r>
   82ef6:	68ab      	ldr	r3, [r5, #8]
   82ef8:	1ac2      	subs	r2, r0, r3
   82efa:	2a0f      	cmp	r2, #15
   82efc:	dde4      	ble.n	82ec8 <_malloc_trim_r+0x2c>
   82efe:	490c      	ldr	r1, [pc, #48]	; (82f30 <_malloc_trim_r+0x94>)
   82f00:	f042 0201 	orr.w	r2, r2, #1
   82f04:	6809      	ldr	r1, [r1, #0]
   82f06:	605a      	str	r2, [r3, #4]
   82f08:	1a40      	subs	r0, r0, r1
   82f0a:	490a      	ldr	r1, [pc, #40]	; (82f34 <_malloc_trim_r+0x98>)
   82f0c:	6008      	str	r0, [r1, #0]
   82f0e:	e7db      	b.n	82ec8 <_malloc_trim_r+0x2c>
   82f10:	68ab      	ldr	r3, [r5, #8]
   82f12:	1bbf      	subs	r7, r7, r6
   82f14:	f047 0701 	orr.w	r7, r7, #1
   82f18:	605f      	str	r7, [r3, #4]
   82f1a:	4b06      	ldr	r3, [pc, #24]	; (82f34 <_malloc_trim_r+0x98>)
   82f1c:	4620      	mov	r0, r4
   82f1e:	681a      	ldr	r2, [r3, #0]
   82f20:	1b96      	subs	r6, r2, r6
   82f22:	601e      	str	r6, [r3, #0]
   82f24:	f000 fd2e 	bl	83984 <__malloc_unlock>
   82f28:	2001      	movs	r0, #1
   82f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82f2c:	200704b4 	.word	0x200704b4
   82f30:	200708bc 	.word	0x200708bc
   82f34:	200709e4 	.word	0x200709e4

00082f38 <_free_r>:
   82f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82f3a:	4606      	mov	r6, r0
   82f3c:	460d      	mov	r5, r1
   82f3e:	2900      	cmp	r1, #0
   82f40:	f000 80a9 	beq.w	83096 <_free_r+0x15e>
   82f44:	f000 fd1d 	bl	83982 <__malloc_lock>
   82f48:	f855 cc04 	ldr.w	ip, [r5, #-4]
   82f4c:	4c52      	ldr	r4, [pc, #328]	; (83098 <_free_r+0x160>)
   82f4e:	f1a5 0308 	sub.w	r3, r5, #8
   82f52:	f02c 0201 	bic.w	r2, ip, #1
   82f56:	1898      	adds	r0, r3, r2
   82f58:	68a1      	ldr	r1, [r4, #8]
   82f5a:	6847      	ldr	r7, [r0, #4]
   82f5c:	4288      	cmp	r0, r1
   82f5e:	f027 0703 	bic.w	r7, r7, #3
   82f62:	f00c 0101 	and.w	r1, ip, #1
   82f66:	d11b      	bne.n	82fa0 <_free_r+0x68>
   82f68:	443a      	add	r2, r7
   82f6a:	b939      	cbnz	r1, 82f7c <_free_r+0x44>
   82f6c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82f70:	1a5b      	subs	r3, r3, r1
   82f72:	6898      	ldr	r0, [r3, #8]
   82f74:	440a      	add	r2, r1
   82f76:	68d9      	ldr	r1, [r3, #12]
   82f78:	60c1      	str	r1, [r0, #12]
   82f7a:	6088      	str	r0, [r1, #8]
   82f7c:	f042 0101 	orr.w	r1, r2, #1
   82f80:	6059      	str	r1, [r3, #4]
   82f82:	60a3      	str	r3, [r4, #8]
   82f84:	4b45      	ldr	r3, [pc, #276]	; (8309c <_free_r+0x164>)
   82f86:	681b      	ldr	r3, [r3, #0]
   82f88:	429a      	cmp	r2, r3
   82f8a:	d304      	bcc.n	82f96 <_free_r+0x5e>
   82f8c:	4b44      	ldr	r3, [pc, #272]	; (830a0 <_free_r+0x168>)
   82f8e:	4630      	mov	r0, r6
   82f90:	6819      	ldr	r1, [r3, #0]
   82f92:	f7ff ff83 	bl	82e9c <_malloc_trim_r>
   82f96:	4630      	mov	r0, r6
   82f98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   82f9c:	f000 bcf2 	b.w	83984 <__malloc_unlock>
   82fa0:	6047      	str	r7, [r0, #4]
   82fa2:	b979      	cbnz	r1, 82fc4 <_free_r+0x8c>
   82fa4:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82fa8:	f104 0c08 	add.w	ip, r4, #8
   82fac:	1b5b      	subs	r3, r3, r5
   82fae:	442a      	add	r2, r5
   82fb0:	689d      	ldr	r5, [r3, #8]
   82fb2:	4565      	cmp	r5, ip
   82fb4:	d008      	beq.n	82fc8 <_free_r+0x90>
   82fb6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   82fba:	f8c5 c00c 	str.w	ip, [r5, #12]
   82fbe:	f8cc 5008 	str.w	r5, [ip, #8]
   82fc2:	e002      	b.n	82fca <_free_r+0x92>
   82fc4:	2100      	movs	r1, #0
   82fc6:	e000      	b.n	82fca <_free_r+0x92>
   82fc8:	2101      	movs	r1, #1
   82fca:	19c5      	adds	r5, r0, r7
   82fcc:	686d      	ldr	r5, [r5, #4]
   82fce:	07ed      	lsls	r5, r5, #31
   82fd0:	d40e      	bmi.n	82ff0 <_free_r+0xb8>
   82fd2:	443a      	add	r2, r7
   82fd4:	6885      	ldr	r5, [r0, #8]
   82fd6:	b941      	cbnz	r1, 82fea <_free_r+0xb2>
   82fd8:	4f32      	ldr	r7, [pc, #200]	; (830a4 <_free_r+0x16c>)
   82fda:	42bd      	cmp	r5, r7
   82fdc:	d105      	bne.n	82fea <_free_r+0xb2>
   82fde:	6163      	str	r3, [r4, #20]
   82fe0:	6123      	str	r3, [r4, #16]
   82fe2:	2101      	movs	r1, #1
   82fe4:	60dd      	str	r5, [r3, #12]
   82fe6:	609d      	str	r5, [r3, #8]
   82fe8:	e002      	b.n	82ff0 <_free_r+0xb8>
   82fea:	68c0      	ldr	r0, [r0, #12]
   82fec:	60e8      	str	r0, [r5, #12]
   82fee:	6085      	str	r5, [r0, #8]
   82ff0:	f042 0001 	orr.w	r0, r2, #1
   82ff4:	6058      	str	r0, [r3, #4]
   82ff6:	509a      	str	r2, [r3, r2]
   82ff8:	2900      	cmp	r1, #0
   82ffa:	d1cc      	bne.n	82f96 <_free_r+0x5e>
   82ffc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   83000:	d20e      	bcs.n	83020 <_free_r+0xe8>
   83002:	08d2      	lsrs	r2, r2, #3
   83004:	1091      	asrs	r1, r2, #2
   83006:	2001      	movs	r0, #1
   83008:	4088      	lsls	r0, r1
   8300a:	6861      	ldr	r1, [r4, #4]
   8300c:	4301      	orrs	r1, r0
   8300e:	6061      	str	r1, [r4, #4]
   83010:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
   83014:	68a2      	ldr	r2, [r4, #8]
   83016:	60dc      	str	r4, [r3, #12]
   83018:	609a      	str	r2, [r3, #8]
   8301a:	60a3      	str	r3, [r4, #8]
   8301c:	60d3      	str	r3, [r2, #12]
   8301e:	e7ba      	b.n	82f96 <_free_r+0x5e>
   83020:	0a51      	lsrs	r1, r2, #9
   83022:	2904      	cmp	r1, #4
   83024:	d802      	bhi.n	8302c <_free_r+0xf4>
   83026:	0991      	lsrs	r1, r2, #6
   83028:	3138      	adds	r1, #56	; 0x38
   8302a:	e015      	b.n	83058 <_free_r+0x120>
   8302c:	2914      	cmp	r1, #20
   8302e:	d801      	bhi.n	83034 <_free_r+0xfc>
   83030:	315b      	adds	r1, #91	; 0x5b
   83032:	e011      	b.n	83058 <_free_r+0x120>
   83034:	2954      	cmp	r1, #84	; 0x54
   83036:	d802      	bhi.n	8303e <_free_r+0x106>
   83038:	0b11      	lsrs	r1, r2, #12
   8303a:	316e      	adds	r1, #110	; 0x6e
   8303c:	e00c      	b.n	83058 <_free_r+0x120>
   8303e:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
   83042:	d802      	bhi.n	8304a <_free_r+0x112>
   83044:	0bd1      	lsrs	r1, r2, #15
   83046:	3177      	adds	r1, #119	; 0x77
   83048:	e006      	b.n	83058 <_free_r+0x120>
   8304a:	f240 5054 	movw	r0, #1364	; 0x554
   8304e:	4281      	cmp	r1, r0
   83050:	bf9a      	itte	ls
   83052:	0c91      	lsrls	r1, r2, #18
   83054:	317c      	addls	r1, #124	; 0x7c
   83056:	217e      	movhi	r1, #126	; 0x7e
   83058:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
   8305c:	68a5      	ldr	r5, [r4, #8]
   8305e:	480e      	ldr	r0, [pc, #56]	; (83098 <_free_r+0x160>)
   83060:	42a5      	cmp	r5, r4
   83062:	d001      	beq.n	83068 <_free_r+0x130>
   83064:	4629      	mov	r1, r5
   83066:	e00b      	b.n	83080 <_free_r+0x148>
   83068:	2201      	movs	r2, #1
   8306a:	1089      	asrs	r1, r1, #2
   8306c:	fa02 f101 	lsl.w	r1, r2, r1
   83070:	6842      	ldr	r2, [r0, #4]
   83072:	430a      	orrs	r2, r1
   83074:	6042      	str	r2, [r0, #4]
   83076:	4629      	mov	r1, r5
   83078:	e008      	b.n	8308c <_free_r+0x154>
   8307a:	6889      	ldr	r1, [r1, #8]
   8307c:	42a1      	cmp	r1, r4
   8307e:	d004      	beq.n	8308a <_free_r+0x152>
   83080:	6848      	ldr	r0, [r1, #4]
   83082:	f020 0003 	bic.w	r0, r0, #3
   83086:	4282      	cmp	r2, r0
   83088:	d3f7      	bcc.n	8307a <_free_r+0x142>
   8308a:	68cd      	ldr	r5, [r1, #12]
   8308c:	60dd      	str	r5, [r3, #12]
   8308e:	6099      	str	r1, [r3, #8]
   83090:	60ab      	str	r3, [r5, #8]
   83092:	60cb      	str	r3, [r1, #12]
   83094:	e77f      	b.n	82f96 <_free_r+0x5e>
   83096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83098:	200704b4 	.word	0x200704b4
   8309c:	200708c0 	.word	0x200708c0
   830a0:	200709e0 	.word	0x200709e0
   830a4:	200704bc 	.word	0x200704bc

000830a8 <__sfvwrite_r>:
   830a8:	6893      	ldr	r3, [r2, #8]
   830aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   830ae:	4680      	mov	r8, r0
   830b0:	460c      	mov	r4, r1
   830b2:	4691      	mov	r9, r2
   830b4:	b90b      	cbnz	r3, 830ba <__sfvwrite_r+0x12>
   830b6:	2000      	movs	r0, #0
   830b8:	e13c      	b.n	83334 <__sfvwrite_r+0x28c>
   830ba:	898b      	ldrh	r3, [r1, #12]
   830bc:	0718      	lsls	r0, r3, #28
   830be:	d50e      	bpl.n	830de <__sfvwrite_r+0x36>
   830c0:	690b      	ldr	r3, [r1, #16]
   830c2:	b163      	cbz	r3, 830de <__sfvwrite_r+0x36>
   830c4:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
   830c8:	f8d9 6000 	ldr.w	r6, [r9]
   830cc:	f00a 0c02 	and.w	ip, sl, #2
   830d0:	fa1f f38c 	uxth.w	r3, ip
   830d4:	b333      	cbz	r3, 83124 <__sfvwrite_r+0x7c>
   830d6:	f04f 0a00 	mov.w	sl, #0
   830da:	4657      	mov	r7, sl
   830dc:	e01b      	b.n	83116 <__sfvwrite_r+0x6e>
   830de:	4640      	mov	r0, r8
   830e0:	4621      	mov	r1, r4
   830e2:	f7ff fc21 	bl	82928 <__swsetup_r>
   830e6:	2800      	cmp	r0, #0
   830e8:	d0ec      	beq.n	830c4 <__sfvwrite_r+0x1c>
   830ea:	e121      	b.n	83330 <__sfvwrite_r+0x288>
   830ec:	4b93      	ldr	r3, [pc, #588]	; (8333c <__sfvwrite_r+0x294>)
   830ee:	4640      	mov	r0, r8
   830f0:	429f      	cmp	r7, r3
   830f2:	bf38      	it	cc
   830f4:	463b      	movcc	r3, r7
   830f6:	69e1      	ldr	r1, [r4, #28]
   830f8:	4652      	mov	r2, sl
   830fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
   830fc:	47a8      	blx	r5
   830fe:	2800      	cmp	r0, #0
   83100:	f340 8112 	ble.w	83328 <__sfvwrite_r+0x280>
   83104:	f8d9 3008 	ldr.w	r3, [r9, #8]
   83108:	4482      	add	sl, r0
   8310a:	1a3f      	subs	r7, r7, r0
   8310c:	1a18      	subs	r0, r3, r0
   8310e:	f8c9 0008 	str.w	r0, [r9, #8]
   83112:	2800      	cmp	r0, #0
   83114:	d0cf      	beq.n	830b6 <__sfvwrite_r+0xe>
   83116:	2f00      	cmp	r7, #0
   83118:	d1e8      	bne.n	830ec <__sfvwrite_r+0x44>
   8311a:	f8d6 a000 	ldr.w	sl, [r6]
   8311e:	6877      	ldr	r7, [r6, #4]
   83120:	3608      	adds	r6, #8
   83122:	e7f8      	b.n	83116 <__sfvwrite_r+0x6e>
   83124:	f01a 0a01 	ands.w	sl, sl, #1
   83128:	d004      	beq.n	83134 <__sfvwrite_r+0x8c>
   8312a:	469b      	mov	fp, r3
   8312c:	9301      	str	r3, [sp, #4]
   8312e:	461f      	mov	r7, r3
   83130:	469a      	mov	sl, r3
   83132:	e0bf      	b.n	832b4 <__sfvwrite_r+0x20c>
   83134:	4655      	mov	r5, sl
   83136:	b925      	cbnz	r5, 83142 <__sfvwrite_r+0x9a>
   83138:	f8d6 a000 	ldr.w	sl, [r6]
   8313c:	6875      	ldr	r5, [r6, #4]
   8313e:	3608      	adds	r6, #8
   83140:	e7f9      	b.n	83136 <__sfvwrite_r+0x8e>
   83142:	89a2      	ldrh	r2, [r4, #12]
   83144:	68a7      	ldr	r7, [r4, #8]
   83146:	0591      	lsls	r1, r2, #22
   83148:	d552      	bpl.n	831f0 <__sfvwrite_r+0x148>
   8314a:	42bd      	cmp	r5, r7
   8314c:	d342      	bcc.n	831d4 <__sfvwrite_r+0x12c>
   8314e:	f412 6f90 	tst.w	r2, #1152	; 0x480
   83152:	d03d      	beq.n	831d0 <__sfvwrite_r+0x128>
   83154:	6921      	ldr	r1, [r4, #16]
   83156:	6823      	ldr	r3, [r4, #0]
   83158:	2002      	movs	r0, #2
   8315a:	1a5b      	subs	r3, r3, r1
   8315c:	9301      	str	r3, [sp, #4]
   8315e:	6963      	ldr	r3, [r4, #20]
   83160:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   83164:	fb93 fbf0 	sdiv	fp, r3, r0
   83168:	9b01      	ldr	r3, [sp, #4]
   8316a:	1c58      	adds	r0, r3, #1
   8316c:	4428      	add	r0, r5
   8316e:	4583      	cmp	fp, r0
   83170:	bf38      	it	cc
   83172:	4683      	movcc	fp, r0
   83174:	0553      	lsls	r3, r2, #21
   83176:	4640      	mov	r0, r8
   83178:	d50f      	bpl.n	8319a <__sfvwrite_r+0xf2>
   8317a:	4659      	mov	r1, fp
   8317c:	f000 f9d0 	bl	83520 <_malloc_r>
   83180:	4607      	mov	r7, r0
   83182:	b1b8      	cbz	r0, 831b4 <__sfvwrite_r+0x10c>
   83184:	9a01      	ldr	r2, [sp, #4]
   83186:	6921      	ldr	r1, [r4, #16]
   83188:	f7fe fe52 	bl	81e30 <memcpy>
   8318c:	89a2      	ldrh	r2, [r4, #12]
   8318e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   83192:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   83196:	81a2      	strh	r2, [r4, #12]
   83198:	e010      	b.n	831bc <__sfvwrite_r+0x114>
   8319a:	465a      	mov	r2, fp
   8319c:	f000 fbf4 	bl	83988 <_realloc_r>
   831a0:	4607      	mov	r7, r0
   831a2:	b958      	cbnz	r0, 831bc <__sfvwrite_r+0x114>
   831a4:	4640      	mov	r0, r8
   831a6:	6921      	ldr	r1, [r4, #16]
   831a8:	f7ff fec6 	bl	82f38 <_free_r>
   831ac:	89a3      	ldrh	r3, [r4, #12]
   831ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   831b2:	81a3      	strh	r3, [r4, #12]
   831b4:	230c      	movs	r3, #12
   831b6:	f8c8 3000 	str.w	r3, [r8]
   831ba:	e0b5      	b.n	83328 <__sfvwrite_r+0x280>
   831bc:	9b01      	ldr	r3, [sp, #4]
   831be:	6127      	str	r7, [r4, #16]
   831c0:	441f      	add	r7, r3
   831c2:	ebc3 030b 	rsb	r3, r3, fp
   831c6:	6027      	str	r7, [r4, #0]
   831c8:	f8c4 b014 	str.w	fp, [r4, #20]
   831cc:	462f      	mov	r7, r5
   831ce:	60a3      	str	r3, [r4, #8]
   831d0:	42bd      	cmp	r5, r7
   831d2:	d200      	bcs.n	831d6 <__sfvwrite_r+0x12e>
   831d4:	462f      	mov	r7, r5
   831d6:	463a      	mov	r2, r7
   831d8:	6820      	ldr	r0, [r4, #0]
   831da:	4651      	mov	r1, sl
   831dc:	f000 fbb6 	bl	8394c <memmove>
   831e0:	68a3      	ldr	r3, [r4, #8]
   831e2:	1bdb      	subs	r3, r3, r7
   831e4:	60a3      	str	r3, [r4, #8]
   831e6:	6823      	ldr	r3, [r4, #0]
   831e8:	441f      	add	r7, r3
   831ea:	6027      	str	r7, [r4, #0]
   831ec:	462f      	mov	r7, r5
   831ee:	e02a      	b.n	83246 <__sfvwrite_r+0x19e>
   831f0:	6820      	ldr	r0, [r4, #0]
   831f2:	6923      	ldr	r3, [r4, #16]
   831f4:	4298      	cmp	r0, r3
   831f6:	d802      	bhi.n	831fe <__sfvwrite_r+0x156>
   831f8:	6963      	ldr	r3, [r4, #20]
   831fa:	429d      	cmp	r5, r3
   831fc:	d213      	bcs.n	83226 <__sfvwrite_r+0x17e>
   831fe:	42bd      	cmp	r5, r7
   83200:	bf38      	it	cc
   83202:	462f      	movcc	r7, r5
   83204:	463a      	mov	r2, r7
   83206:	4651      	mov	r1, sl
   83208:	f000 fba0 	bl	8394c <memmove>
   8320c:	68a3      	ldr	r3, [r4, #8]
   8320e:	6822      	ldr	r2, [r4, #0]
   83210:	1bdb      	subs	r3, r3, r7
   83212:	443a      	add	r2, r7
   83214:	60a3      	str	r3, [r4, #8]
   83216:	6022      	str	r2, [r4, #0]
   83218:	b9ab      	cbnz	r3, 83246 <__sfvwrite_r+0x19e>
   8321a:	4640      	mov	r0, r8
   8321c:	4621      	mov	r1, r4
   8321e:	f7ff fcbe 	bl	82b9e <_fflush_r>
   83222:	b180      	cbz	r0, 83246 <__sfvwrite_r+0x19e>
   83224:	e080      	b.n	83328 <__sfvwrite_r+0x280>
   83226:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   8322a:	4575      	cmp	r5, lr
   8322c:	bf38      	it	cc
   8322e:	46ae      	movcc	lr, r5
   83230:	fb9e fef3 	sdiv	lr, lr, r3
   83234:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83236:	4640      	mov	r0, r8
   83238:	69e1      	ldr	r1, [r4, #28]
   8323a:	4652      	mov	r2, sl
   8323c:	fb03 f30e 	mul.w	r3, r3, lr
   83240:	47b8      	blx	r7
   83242:	1e07      	subs	r7, r0, #0
   83244:	dd70      	ble.n	83328 <__sfvwrite_r+0x280>
   83246:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8324a:	44ba      	add	sl, r7
   8324c:	1bed      	subs	r5, r5, r7
   8324e:	1bdf      	subs	r7, r3, r7
   83250:	f8c9 7008 	str.w	r7, [r9, #8]
   83254:	2f00      	cmp	r7, #0
   83256:	f47f af6e 	bne.w	83136 <__sfvwrite_r+0x8e>
   8325a:	e72c      	b.n	830b6 <__sfvwrite_r+0xe>
   8325c:	9d01      	ldr	r5, [sp, #4]
   8325e:	2d00      	cmp	r5, #0
   83260:	d031      	beq.n	832c6 <__sfvwrite_r+0x21e>
   83262:	6820      	ldr	r0, [r4, #0]
   83264:	6922      	ldr	r2, [r4, #16]
   83266:	45d3      	cmp	fp, sl
   83268:	bf34      	ite	cc
   8326a:	465b      	movcc	r3, fp
   8326c:	4653      	movcs	r3, sl
   8326e:	4290      	cmp	r0, r2
   83270:	68a5      	ldr	r5, [r4, #8]
   83272:	f8d4 e014 	ldr.w	lr, [r4, #20]
   83276:	d936      	bls.n	832e6 <__sfvwrite_r+0x23e>
   83278:	4475      	add	r5, lr
   8327a:	42ab      	cmp	r3, r5
   8327c:	dd33      	ble.n	832e6 <__sfvwrite_r+0x23e>
   8327e:	4639      	mov	r1, r7
   83280:	462a      	mov	r2, r5
   83282:	f000 fb63 	bl	8394c <memmove>
   83286:	6823      	ldr	r3, [r4, #0]
   83288:	4640      	mov	r0, r8
   8328a:	442b      	add	r3, r5
   8328c:	6023      	str	r3, [r4, #0]
   8328e:	4621      	mov	r1, r4
   83290:	f7ff fc85 	bl	82b9e <_fflush_r>
   83294:	2800      	cmp	r0, #0
   83296:	d147      	bne.n	83328 <__sfvwrite_r+0x280>
   83298:	ebbb 0b05 	subs.w	fp, fp, r5
   8329c:	d03c      	beq.n	83318 <__sfvwrite_r+0x270>
   8329e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   832a2:	442f      	add	r7, r5
   832a4:	ebc5 0a0a 	rsb	sl, r5, sl
   832a8:	1b5d      	subs	r5, r3, r5
   832aa:	f8c9 5008 	str.w	r5, [r9, #8]
   832ae:	2d00      	cmp	r5, #0
   832b0:	f43f af01 	beq.w	830b6 <__sfvwrite_r+0xe>
   832b4:	f1ba 0f00 	cmp.w	sl, #0
   832b8:	d1d0      	bne.n	8325c <__sfvwrite_r+0x1b4>
   832ba:	2500      	movs	r5, #0
   832bc:	e896 0480 	ldmia.w	r6, {r7, sl}
   832c0:	9501      	str	r5, [sp, #4]
   832c2:	3608      	adds	r6, #8
   832c4:	e7f6      	b.n	832b4 <__sfvwrite_r+0x20c>
   832c6:	4638      	mov	r0, r7
   832c8:	210a      	movs	r1, #10
   832ca:	4652      	mov	r2, sl
   832cc:	f000 fb30 	bl	83930 <memchr>
   832d0:	b120      	cbz	r0, 832dc <__sfvwrite_r+0x234>
   832d2:	f100 0c01 	add.w	ip, r0, #1
   832d6:	ebc7 0b0c 	rsb	fp, r7, ip
   832da:	e001      	b.n	832e0 <__sfvwrite_r+0x238>
   832dc:	f10a 0b01 	add.w	fp, sl, #1
   832e0:	2501      	movs	r5, #1
   832e2:	9501      	str	r5, [sp, #4]
   832e4:	e7bd      	b.n	83262 <__sfvwrite_r+0x1ba>
   832e6:	4573      	cmp	r3, lr
   832e8:	db08      	blt.n	832fc <__sfvwrite_r+0x254>
   832ea:	6a65      	ldr	r5, [r4, #36]	; 0x24
   832ec:	4640      	mov	r0, r8
   832ee:	69e1      	ldr	r1, [r4, #28]
   832f0:	463a      	mov	r2, r7
   832f2:	4673      	mov	r3, lr
   832f4:	47a8      	blx	r5
   832f6:	1e05      	subs	r5, r0, #0
   832f8:	dcce      	bgt.n	83298 <__sfvwrite_r+0x1f0>
   832fa:	e015      	b.n	83328 <__sfvwrite_r+0x280>
   832fc:	461a      	mov	r2, r3
   832fe:	4639      	mov	r1, r7
   83300:	9300      	str	r3, [sp, #0]
   83302:	f000 fb23 	bl	8394c <memmove>
   83306:	9b00      	ldr	r3, [sp, #0]
   83308:	68a2      	ldr	r2, [r4, #8]
   8330a:	461d      	mov	r5, r3
   8330c:	1ad2      	subs	r2, r2, r3
   8330e:	60a2      	str	r2, [r4, #8]
   83310:	6822      	ldr	r2, [r4, #0]
   83312:	441a      	add	r2, r3
   83314:	6022      	str	r2, [r4, #0]
   83316:	e7bf      	b.n	83298 <__sfvwrite_r+0x1f0>
   83318:	4640      	mov	r0, r8
   8331a:	4621      	mov	r1, r4
   8331c:	f7ff fc3f 	bl	82b9e <_fflush_r>
   83320:	b910      	cbnz	r0, 83328 <__sfvwrite_r+0x280>
   83322:	f8cd b004 	str.w	fp, [sp, #4]
   83326:	e7ba      	b.n	8329e <__sfvwrite_r+0x1f6>
   83328:	89a3      	ldrh	r3, [r4, #12]
   8332a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8332e:	81a3      	strh	r3, [r4, #12]
   83330:	f04f 30ff 	mov.w	r0, #4294967295
   83334:	b003      	add	sp, #12
   83336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8333a:	bf00      	nop
   8333c:	7ffffc00 	.word	0x7ffffc00

00083340 <_fwalk>:
   83340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83344:	4688      	mov	r8, r1
   83346:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
   8334a:	2600      	movs	r6, #0
   8334c:	b18c      	cbz	r4, 83372 <_fwalk+0x32>
   8334e:	68a5      	ldr	r5, [r4, #8]
   83350:	6867      	ldr	r7, [r4, #4]
   83352:	3f01      	subs	r7, #1
   83354:	d40b      	bmi.n	8336e <_fwalk+0x2e>
   83356:	89ab      	ldrh	r3, [r5, #12]
   83358:	2b01      	cmp	r3, #1
   8335a:	d906      	bls.n	8336a <_fwalk+0x2a>
   8335c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   83360:	3301      	adds	r3, #1
   83362:	d002      	beq.n	8336a <_fwalk+0x2a>
   83364:	4628      	mov	r0, r5
   83366:	47c0      	blx	r8
   83368:	4306      	orrs	r6, r0
   8336a:	3568      	adds	r5, #104	; 0x68
   8336c:	e7f1      	b.n	83352 <_fwalk+0x12>
   8336e:	6824      	ldr	r4, [r4, #0]
   83370:	e7ec      	b.n	8334c <_fwalk+0xc>
   83372:	4630      	mov	r0, r6
   83374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083378 <_fwalk_reent>:
   83378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8337c:	4680      	mov	r8, r0
   8337e:	4689      	mov	r9, r1
   83380:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
   83384:	2600      	movs	r6, #0
   83386:	b194      	cbz	r4, 833ae <_fwalk_reent+0x36>
   83388:	68a5      	ldr	r5, [r4, #8]
   8338a:	6867      	ldr	r7, [r4, #4]
   8338c:	3f01      	subs	r7, #1
   8338e:	d40c      	bmi.n	833aa <_fwalk_reent+0x32>
   83390:	89ab      	ldrh	r3, [r5, #12]
   83392:	2b01      	cmp	r3, #1
   83394:	d907      	bls.n	833a6 <_fwalk_reent+0x2e>
   83396:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   8339a:	3301      	adds	r3, #1
   8339c:	d003      	beq.n	833a6 <_fwalk_reent+0x2e>
   8339e:	4640      	mov	r0, r8
   833a0:	4629      	mov	r1, r5
   833a2:	47c8      	blx	r9
   833a4:	4306      	orrs	r6, r0
   833a6:	3568      	adds	r5, #104	; 0x68
   833a8:	e7f0      	b.n	8338c <_fwalk_reent+0x14>
   833aa:	6824      	ldr	r4, [r4, #0]
   833ac:	e7eb      	b.n	83386 <_fwalk_reent+0xe>
   833ae:	4630      	mov	r0, r6
   833b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000833b4 <_setlocale_r>:
   833b4:	b510      	push	{r4, lr}
   833b6:	4614      	mov	r4, r2
   833b8:	b90a      	cbnz	r2, 833be <_setlocale_r+0xa>
   833ba:	480b      	ldr	r0, [pc, #44]	; (833e8 <_setlocale_r+0x34>)
   833bc:	bd10      	pop	{r4, pc}
   833be:	4610      	mov	r0, r2
   833c0:	490a      	ldr	r1, [pc, #40]	; (833ec <_setlocale_r+0x38>)
   833c2:	f000 fce0 	bl	83d86 <strcmp>
   833c6:	2800      	cmp	r0, #0
   833c8:	d0f7      	beq.n	833ba <_setlocale_r+0x6>
   833ca:	4620      	mov	r0, r4
   833cc:	4906      	ldr	r1, [pc, #24]	; (833e8 <_setlocale_r+0x34>)
   833ce:	f000 fcda 	bl	83d86 <strcmp>
   833d2:	2800      	cmp	r0, #0
   833d4:	d0f1      	beq.n	833ba <_setlocale_r+0x6>
   833d6:	4620      	mov	r0, r4
   833d8:	4905      	ldr	r1, [pc, #20]	; (833f0 <_setlocale_r+0x3c>)
   833da:	f000 fcd4 	bl	83d86 <strcmp>
   833de:	2800      	cmp	r0, #0
   833e0:	4801      	ldr	r0, [pc, #4]	; (833e8 <_setlocale_r+0x34>)
   833e2:	bf18      	it	ne
   833e4:	2000      	movne	r0, #0
   833e6:	bd10      	pop	{r4, pc}
   833e8:	000846bc 	.word	0x000846bc
   833ec:	00084700 	.word	0x00084700
   833f0:	00084707 	.word	0x00084707

000833f4 <__locale_charset>:
   833f4:	4800      	ldr	r0, [pc, #0]	; (833f8 <__locale_charset+0x4>)
   833f6:	4770      	bx	lr
   833f8:	20070438 	.word	0x20070438

000833fc <__locale_mb_cur_max>:
   833fc:	4b01      	ldr	r3, [pc, #4]	; (83404 <__locale_mb_cur_max+0x8>)
   833fe:	6a18      	ldr	r0, [r3, #32]
   83400:	4770      	bx	lr
   83402:	bf00      	nop
   83404:	20070438 	.word	0x20070438

00083408 <__locale_msgcharset>:
   83408:	4800      	ldr	r0, [pc, #0]	; (8340c <__locale_msgcharset+0x4>)
   8340a:	4770      	bx	lr
   8340c:	2007045c 	.word	0x2007045c

00083410 <__locale_cjk_lang>:
   83410:	2000      	movs	r0, #0
   83412:	4770      	bx	lr

00083414 <_localeconv_r>:
   83414:	4800      	ldr	r0, [pc, #0]	; (83418 <_localeconv_r+0x4>)
   83416:	4770      	bx	lr
   83418:	2007047c 	.word	0x2007047c

0008341c <setlocale>:
   8341c:	460a      	mov	r2, r1
   8341e:	4903      	ldr	r1, [pc, #12]	; (8342c <setlocale+0x10>)
   83420:	4603      	mov	r3, r0
   83422:	6808      	ldr	r0, [r1, #0]
   83424:	4619      	mov	r1, r3
   83426:	f7ff bfc5 	b.w	833b4 <_setlocale_r>
   8342a:	bf00      	nop
   8342c:	20070008 	.word	0x20070008

00083430 <localeconv>:
   83430:	4800      	ldr	r0, [pc, #0]	; (83434 <localeconv+0x4>)
   83432:	4770      	bx	lr
   83434:	2007047c 	.word	0x2007047c

00083438 <__smakebuf_r>:
   83438:	b5f0      	push	{r4, r5, r6, r7, lr}
   8343a:	898b      	ldrh	r3, [r1, #12]
   8343c:	b091      	sub	sp, #68	; 0x44
   8343e:	079d      	lsls	r5, r3, #30
   83440:	4606      	mov	r6, r0
   83442:	460c      	mov	r4, r1
   83444:	d43a      	bmi.n	834bc <__smakebuf_r+0x84>
   83446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8344a:	2900      	cmp	r1, #0
   8344c:	da0b      	bge.n	83466 <__smakebuf_r+0x2e>
   8344e:	89a3      	ldrh	r3, [r4, #12]
   83450:	2700      	movs	r7, #0
   83452:	f013 0f80 	tst.w	r3, #128	; 0x80
   83456:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8345a:	bf0c      	ite	eq
   8345c:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   83460:	2540      	movne	r5, #64	; 0x40
   83462:	81a3      	strh	r3, [r4, #12]
   83464:	e01f      	b.n	834a6 <__smakebuf_r+0x6e>
   83466:	aa01      	add	r2, sp, #4
   83468:	f000 fd58 	bl	83f1c <_fstat_r>
   8346c:	2800      	cmp	r0, #0
   8346e:	dbee      	blt.n	8344e <__smakebuf_r+0x16>
   83470:	9b02      	ldr	r3, [sp, #8]
   83472:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   83476:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   8347a:	424f      	negs	r7, r1
   8347c:	414f      	adcs	r7, r1
   8347e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   83482:	89a3      	ldrh	r3, [r4, #12]
   83484:	d10a      	bne.n	8349c <__smakebuf_r+0x64>
   83486:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   83488:	491b      	ldr	r1, [pc, #108]	; (834f8 <__smakebuf_r+0xc0>)
   8348a:	428a      	cmp	r2, r1
   8348c:	d106      	bne.n	8349c <__smakebuf_r+0x64>
   8348e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   83492:	f44f 6580 	mov.w	r5, #1024	; 0x400
   83496:	81a3      	strh	r3, [r4, #12]
   83498:	64e5      	str	r5, [r4, #76]	; 0x4c
   8349a:	e004      	b.n	834a6 <__smakebuf_r+0x6e>
   8349c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   834a0:	81a3      	strh	r3, [r4, #12]
   834a2:	f44f 6580 	mov.w	r5, #1024	; 0x400
   834a6:	4630      	mov	r0, r6
   834a8:	4629      	mov	r1, r5
   834aa:	f000 f839 	bl	83520 <_malloc_r>
   834ae:	b960      	cbnz	r0, 834ca <__smakebuf_r+0x92>
   834b0:	89a3      	ldrh	r3, [r4, #12]
   834b2:	059a      	lsls	r2, r3, #22
   834b4:	d41d      	bmi.n	834f2 <__smakebuf_r+0xba>
   834b6:	f043 0302 	orr.w	r3, r3, #2
   834ba:	81a3      	strh	r3, [r4, #12]
   834bc:	f104 0343 	add.w	r3, r4, #67	; 0x43
   834c0:	6023      	str	r3, [r4, #0]
   834c2:	6123      	str	r3, [r4, #16]
   834c4:	2301      	movs	r3, #1
   834c6:	6163      	str	r3, [r4, #20]
   834c8:	e013      	b.n	834f2 <__smakebuf_r+0xba>
   834ca:	4b0c      	ldr	r3, [pc, #48]	; (834fc <__smakebuf_r+0xc4>)
   834cc:	63f3      	str	r3, [r6, #60]	; 0x3c
   834ce:	89a3      	ldrh	r3, [r4, #12]
   834d0:	6020      	str	r0, [r4, #0]
   834d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   834d6:	81a3      	strh	r3, [r4, #12]
   834d8:	6120      	str	r0, [r4, #16]
   834da:	6165      	str	r5, [r4, #20]
   834dc:	b14f      	cbz	r7, 834f2 <__smakebuf_r+0xba>
   834de:	4630      	mov	r0, r6
   834e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   834e4:	f000 fd2c 	bl	83f40 <_isatty_r>
   834e8:	b118      	cbz	r0, 834f2 <__smakebuf_r+0xba>
   834ea:	89a3      	ldrh	r3, [r4, #12]
   834ec:	f043 0301 	orr.w	r3, r3, #1
   834f0:	81a3      	strh	r3, [r4, #12]
   834f2:	b011      	add	sp, #68	; 0x44
   834f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   834f6:	bf00      	nop
   834f8:	00083d5b 	.word	0x00083d5b
   834fc:	00082bed 	.word	0x00082bed

00083500 <malloc>:
   83500:	4b02      	ldr	r3, [pc, #8]	; (8350c <malloc+0xc>)
   83502:	4601      	mov	r1, r0
   83504:	6818      	ldr	r0, [r3, #0]
   83506:	f000 b80b 	b.w	83520 <_malloc_r>
   8350a:	bf00      	nop
   8350c:	20070008 	.word	0x20070008

00083510 <free>:
   83510:	4b02      	ldr	r3, [pc, #8]	; (8351c <free+0xc>)
   83512:	4601      	mov	r1, r0
   83514:	6818      	ldr	r0, [r3, #0]
   83516:	f7ff bd0f 	b.w	82f38 <_free_r>
   8351a:	bf00      	nop
   8351c:	20070008 	.word	0x20070008

00083520 <_malloc_r>:
   83520:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83524:	f101 040b 	add.w	r4, r1, #11
   83528:	2c16      	cmp	r4, #22
   8352a:	4607      	mov	r7, r0
   8352c:	d903      	bls.n	83536 <_malloc_r+0x16>
   8352e:	f034 0407 	bics.w	r4, r4, #7
   83532:	d501      	bpl.n	83538 <_malloc_r+0x18>
   83534:	e002      	b.n	8353c <_malloc_r+0x1c>
   83536:	2410      	movs	r4, #16
   83538:	428c      	cmp	r4, r1
   8353a:	d202      	bcs.n	83542 <_malloc_r+0x22>
   8353c:	230c      	movs	r3, #12
   8353e:	603b      	str	r3, [r7, #0]
   83540:	e1de      	b.n	83900 <_malloc_r+0x3e0>
   83542:	4638      	mov	r0, r7
   83544:	f000 fa1d 	bl	83982 <__malloc_lock>
   83548:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   8354c:	4da3      	ldr	r5, [pc, #652]	; (837dc <_malloc_r+0x2bc>)
   8354e:	d214      	bcs.n	8357a <_malloc_r+0x5a>
   83550:	08e2      	lsrs	r2, r4, #3
   83552:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   83556:	68de      	ldr	r6, [r3, #12]
   83558:	429e      	cmp	r6, r3
   8355a:	d106      	bne.n	8356a <_malloc_r+0x4a>
   8355c:	f106 0308 	add.w	r3, r6, #8
   83560:	6976      	ldr	r6, [r6, #20]
   83562:	429e      	cmp	r6, r3
   83564:	bf08      	it	eq
   83566:	3202      	addeq	r2, #2
   83568:	d043      	beq.n	835f2 <_malloc_r+0xd2>
   8356a:	6873      	ldr	r3, [r6, #4]
   8356c:	68f2      	ldr	r2, [r6, #12]
   8356e:	68b1      	ldr	r1, [r6, #8]
   83570:	f023 0303 	bic.w	r3, r3, #3
   83574:	60ca      	str	r2, [r1, #12]
   83576:	6091      	str	r1, [r2, #8]
   83578:	e05d      	b.n	83636 <_malloc_r+0x116>
   8357a:	0a62      	lsrs	r2, r4, #9
   8357c:	d01a      	beq.n	835b4 <_malloc_r+0x94>
   8357e:	2a04      	cmp	r2, #4
   83580:	d802      	bhi.n	83588 <_malloc_r+0x68>
   83582:	09a2      	lsrs	r2, r4, #6
   83584:	3238      	adds	r2, #56	; 0x38
   83586:	e018      	b.n	835ba <_malloc_r+0x9a>
   83588:	2a14      	cmp	r2, #20
   8358a:	d801      	bhi.n	83590 <_malloc_r+0x70>
   8358c:	325b      	adds	r2, #91	; 0x5b
   8358e:	e014      	b.n	835ba <_malloc_r+0x9a>
   83590:	2a54      	cmp	r2, #84	; 0x54
   83592:	d802      	bhi.n	8359a <_malloc_r+0x7a>
   83594:	0b22      	lsrs	r2, r4, #12
   83596:	326e      	adds	r2, #110	; 0x6e
   83598:	e00f      	b.n	835ba <_malloc_r+0x9a>
   8359a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8359e:	d802      	bhi.n	835a6 <_malloc_r+0x86>
   835a0:	0be2      	lsrs	r2, r4, #15
   835a2:	3277      	adds	r2, #119	; 0x77
   835a4:	e009      	b.n	835ba <_malloc_r+0x9a>
   835a6:	f240 5354 	movw	r3, #1364	; 0x554
   835aa:	429a      	cmp	r2, r3
   835ac:	d804      	bhi.n	835b8 <_malloc_r+0x98>
   835ae:	0ca2      	lsrs	r2, r4, #18
   835b0:	327c      	adds	r2, #124	; 0x7c
   835b2:	e002      	b.n	835ba <_malloc_r+0x9a>
   835b4:	223f      	movs	r2, #63	; 0x3f
   835b6:	e000      	b.n	835ba <_malloc_r+0x9a>
   835b8:	227e      	movs	r2, #126	; 0x7e
   835ba:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   835be:	68de      	ldr	r6, [r3, #12]
   835c0:	429e      	cmp	r6, r3
   835c2:	d015      	beq.n	835f0 <_malloc_r+0xd0>
   835c4:	6871      	ldr	r1, [r6, #4]
   835c6:	f021 0103 	bic.w	r1, r1, #3
   835ca:	1b08      	subs	r0, r1, r4
   835cc:	280f      	cmp	r0, #15
   835ce:	dd01      	ble.n	835d4 <_malloc_r+0xb4>
   835d0:	3a01      	subs	r2, #1
   835d2:	e00d      	b.n	835f0 <_malloc_r+0xd0>
   835d4:	2800      	cmp	r0, #0
   835d6:	db09      	blt.n	835ec <_malloc_r+0xcc>
   835d8:	68f3      	ldr	r3, [r6, #12]
   835da:	68b2      	ldr	r2, [r6, #8]
   835dc:	60d3      	str	r3, [r2, #12]
   835de:	609a      	str	r2, [r3, #8]
   835e0:	1873      	adds	r3, r6, r1
   835e2:	685a      	ldr	r2, [r3, #4]
   835e4:	f042 0201 	orr.w	r2, r2, #1
   835e8:	605a      	str	r2, [r3, #4]
   835ea:	e194      	b.n	83916 <_malloc_r+0x3f6>
   835ec:	68f6      	ldr	r6, [r6, #12]
   835ee:	e7e7      	b.n	835c0 <_malloc_r+0xa0>
   835f0:	3201      	adds	r2, #1
   835f2:	497a      	ldr	r1, [pc, #488]	; (837dc <_malloc_r+0x2bc>)
   835f4:	692e      	ldr	r6, [r5, #16]
   835f6:	f101 0008 	add.w	r0, r1, #8
   835fa:	4286      	cmp	r6, r0
   835fc:	4686      	mov	lr, r0
   835fe:	d06d      	beq.n	836dc <_malloc_r+0x1bc>
   83600:	6873      	ldr	r3, [r6, #4]
   83602:	f023 0303 	bic.w	r3, r3, #3
   83606:	ebc4 0c03 	rsb	ip, r4, r3
   8360a:	f1bc 0f0f 	cmp.w	ip, #15
   8360e:	dd0d      	ble.n	8362c <_malloc_r+0x10c>
   83610:	1933      	adds	r3, r6, r4
   83612:	f04c 0201 	orr.w	r2, ip, #1
   83616:	f044 0401 	orr.w	r4, r4, #1
   8361a:	6074      	str	r4, [r6, #4]
   8361c:	614b      	str	r3, [r1, #20]
   8361e:	610b      	str	r3, [r1, #16]
   83620:	60d8      	str	r0, [r3, #12]
   83622:	6098      	str	r0, [r3, #8]
   83624:	605a      	str	r2, [r3, #4]
   83626:	f843 c00c 	str.w	ip, [r3, ip]
   8362a:	e174      	b.n	83916 <_malloc_r+0x3f6>
   8362c:	f1bc 0f00 	cmp.w	ip, #0
   83630:	6148      	str	r0, [r1, #20]
   83632:	6108      	str	r0, [r1, #16]
   83634:	db01      	blt.n	8363a <_malloc_r+0x11a>
   83636:	4433      	add	r3, r6
   83638:	e7d3      	b.n	835e2 <_malloc_r+0xc2>
   8363a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8363e:	d211      	bcs.n	83664 <_malloc_r+0x144>
   83640:	08db      	lsrs	r3, r3, #3
   83642:	1098      	asrs	r0, r3, #2
   83644:	f04f 0c01 	mov.w	ip, #1
   83648:	fa0c fc00 	lsl.w	ip, ip, r0
   8364c:	6848      	ldr	r0, [r1, #4]
   8364e:	ea4c 0000 	orr.w	r0, ip, r0
   83652:	6048      	str	r0, [r1, #4]
   83654:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   83658:	688b      	ldr	r3, [r1, #8]
   8365a:	60f1      	str	r1, [r6, #12]
   8365c:	60b3      	str	r3, [r6, #8]
   8365e:	608e      	str	r6, [r1, #8]
   83660:	60de      	str	r6, [r3, #12]
   83662:	e03b      	b.n	836dc <_malloc_r+0x1bc>
   83664:	0a58      	lsrs	r0, r3, #9
   83666:	2804      	cmp	r0, #4
   83668:	d802      	bhi.n	83670 <_malloc_r+0x150>
   8366a:	0998      	lsrs	r0, r3, #6
   8366c:	3038      	adds	r0, #56	; 0x38
   8366e:	e015      	b.n	8369c <_malloc_r+0x17c>
   83670:	2814      	cmp	r0, #20
   83672:	d801      	bhi.n	83678 <_malloc_r+0x158>
   83674:	305b      	adds	r0, #91	; 0x5b
   83676:	e011      	b.n	8369c <_malloc_r+0x17c>
   83678:	2854      	cmp	r0, #84	; 0x54
   8367a:	d802      	bhi.n	83682 <_malloc_r+0x162>
   8367c:	0b18      	lsrs	r0, r3, #12
   8367e:	306e      	adds	r0, #110	; 0x6e
   83680:	e00c      	b.n	8369c <_malloc_r+0x17c>
   83682:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   83686:	d802      	bhi.n	8368e <_malloc_r+0x16e>
   83688:	0bd8      	lsrs	r0, r3, #15
   8368a:	3077      	adds	r0, #119	; 0x77
   8368c:	e006      	b.n	8369c <_malloc_r+0x17c>
   8368e:	f240 5154 	movw	r1, #1364	; 0x554
   83692:	4288      	cmp	r0, r1
   83694:	bf9a      	itte	ls
   83696:	0c98      	lsrls	r0, r3, #18
   83698:	307c      	addls	r0, #124	; 0x7c
   8369a:	207e      	movhi	r0, #126	; 0x7e
   8369c:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
   836a0:	f8dc 1008 	ldr.w	r1, [ip, #8]
   836a4:	f8df 8134 	ldr.w	r8, [pc, #308]	; 837dc <_malloc_r+0x2bc>
   836a8:	4561      	cmp	r1, ip
   836aa:	d10d      	bne.n	836c8 <_malloc_r+0x1a8>
   836ac:	2301      	movs	r3, #1
   836ae:	1080      	asrs	r0, r0, #2
   836b0:	fa03 f000 	lsl.w	r0, r3, r0
   836b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   836b8:	4303      	orrs	r3, r0
   836ba:	f8c8 3004 	str.w	r3, [r8, #4]
   836be:	460b      	mov	r3, r1
   836c0:	e008      	b.n	836d4 <_malloc_r+0x1b4>
   836c2:	6889      	ldr	r1, [r1, #8]
   836c4:	4561      	cmp	r1, ip
   836c6:	d004      	beq.n	836d2 <_malloc_r+0x1b2>
   836c8:	6848      	ldr	r0, [r1, #4]
   836ca:	f020 0003 	bic.w	r0, r0, #3
   836ce:	4283      	cmp	r3, r0
   836d0:	d3f7      	bcc.n	836c2 <_malloc_r+0x1a2>
   836d2:	68cb      	ldr	r3, [r1, #12]
   836d4:	60f3      	str	r3, [r6, #12]
   836d6:	60b1      	str	r1, [r6, #8]
   836d8:	609e      	str	r6, [r3, #8]
   836da:	60ce      	str	r6, [r1, #12]
   836dc:	2101      	movs	r1, #1
   836de:	1093      	asrs	r3, r2, #2
   836e0:	fa01 f303 	lsl.w	r3, r1, r3
   836e4:	6869      	ldr	r1, [r5, #4]
   836e6:	428b      	cmp	r3, r1
   836e8:	d85d      	bhi.n	837a6 <_malloc_r+0x286>
   836ea:	420b      	tst	r3, r1
   836ec:	d106      	bne.n	836fc <_malloc_r+0x1dc>
   836ee:	f022 0203 	bic.w	r2, r2, #3
   836f2:	005b      	lsls	r3, r3, #1
   836f4:	420b      	tst	r3, r1
   836f6:	f102 0204 	add.w	r2, r2, #4
   836fa:	d0fa      	beq.n	836f2 <_malloc_r+0x1d2>
   836fc:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
   83700:	4680      	mov	r8, r0
   83702:	4694      	mov	ip, r2
   83704:	f8d8 600c 	ldr.w	r6, [r8, #12]
   83708:	4546      	cmp	r6, r8
   8370a:	d02d      	beq.n	83768 <_malloc_r+0x248>
   8370c:	6871      	ldr	r1, [r6, #4]
   8370e:	f021 0903 	bic.w	r9, r1, #3
   83712:	ebc4 0109 	rsb	r1, r4, r9
   83716:	290f      	cmp	r1, #15
   83718:	dd13      	ble.n	83742 <_malloc_r+0x222>
   8371a:	1933      	adds	r3, r6, r4
   8371c:	f044 0401 	orr.w	r4, r4, #1
   83720:	68f2      	ldr	r2, [r6, #12]
   83722:	6074      	str	r4, [r6, #4]
   83724:	f856 0f08 	ldr.w	r0, [r6, #8]!
   83728:	60c2      	str	r2, [r0, #12]
   8372a:	6090      	str	r0, [r2, #8]
   8372c:	f041 0201 	orr.w	r2, r1, #1
   83730:	616b      	str	r3, [r5, #20]
   83732:	612b      	str	r3, [r5, #16]
   83734:	f8c3 e00c 	str.w	lr, [r3, #12]
   83738:	f8c3 e008 	str.w	lr, [r3, #8]
   8373c:	605a      	str	r2, [r3, #4]
   8373e:	5059      	str	r1, [r3, r1]
   83740:	e00c      	b.n	8375c <_malloc_r+0x23c>
   83742:	2900      	cmp	r1, #0
   83744:	db0e      	blt.n	83764 <_malloc_r+0x244>
   83746:	eb06 0109 	add.w	r1, r6, r9
   8374a:	684b      	ldr	r3, [r1, #4]
   8374c:	f043 0301 	orr.w	r3, r3, #1
   83750:	604b      	str	r3, [r1, #4]
   83752:	68f3      	ldr	r3, [r6, #12]
   83754:	f856 2f08 	ldr.w	r2, [r6, #8]!
   83758:	60d3      	str	r3, [r2, #12]
   8375a:	609a      	str	r2, [r3, #8]
   8375c:	4638      	mov	r0, r7
   8375e:	f000 f911 	bl	83984 <__malloc_unlock>
   83762:	e0dc      	b.n	8391e <_malloc_r+0x3fe>
   83764:	68f6      	ldr	r6, [r6, #12]
   83766:	e7cf      	b.n	83708 <_malloc_r+0x1e8>
   83768:	f10c 0c01 	add.w	ip, ip, #1
   8376c:	f01c 0f03 	tst.w	ip, #3
   83770:	f108 0808 	add.w	r8, r8, #8
   83774:	d1c6      	bne.n	83704 <_malloc_r+0x1e4>
   83776:	0791      	lsls	r1, r2, #30
   83778:	d104      	bne.n	83784 <_malloc_r+0x264>
   8377a:	686a      	ldr	r2, [r5, #4]
   8377c:	ea22 0203 	bic.w	r2, r2, r3
   83780:	606a      	str	r2, [r5, #4]
   83782:	e005      	b.n	83790 <_malloc_r+0x270>
   83784:	f1a0 0108 	sub.w	r1, r0, #8
   83788:	6800      	ldr	r0, [r0, #0]
   8378a:	3a01      	subs	r2, #1
   8378c:	4288      	cmp	r0, r1
   8378e:	d0f2      	beq.n	83776 <_malloc_r+0x256>
   83790:	6869      	ldr	r1, [r5, #4]
   83792:	005b      	lsls	r3, r3, #1
   83794:	428b      	cmp	r3, r1
   83796:	d806      	bhi.n	837a6 <_malloc_r+0x286>
   83798:	b12b      	cbz	r3, 837a6 <_malloc_r+0x286>
   8379a:	4662      	mov	r2, ip
   8379c:	420b      	tst	r3, r1
   8379e:	d1ad      	bne.n	836fc <_malloc_r+0x1dc>
   837a0:	3204      	adds	r2, #4
   837a2:	005b      	lsls	r3, r3, #1
   837a4:	e7fa      	b.n	8379c <_malloc_r+0x27c>
   837a6:	f8d5 9008 	ldr.w	r9, [r5, #8]
   837aa:	f8d9 3004 	ldr.w	r3, [r9, #4]
   837ae:	f023 0b03 	bic.w	fp, r3, #3
   837b2:	45a3      	cmp	fp, r4
   837b4:	d304      	bcc.n	837c0 <_malloc_r+0x2a0>
   837b6:	ebc4 030b 	rsb	r3, r4, fp
   837ba:	2b0f      	cmp	r3, #15
   837bc:	f300 80a2 	bgt.w	83904 <_malloc_r+0x3e4>
   837c0:	4907      	ldr	r1, [pc, #28]	; (837e0 <_malloc_r+0x2c0>)
   837c2:	eb09 030b 	add.w	r3, r9, fp
   837c6:	680a      	ldr	r2, [r1, #0]
   837c8:	4688      	mov	r8, r1
   837ca:	eb04 0a02 	add.w	sl, r4, r2
   837ce:	f8d5 2408 	ldr.w	r2, [r5, #1032]	; 0x408
   837d2:	3201      	adds	r2, #1
   837d4:	d106      	bne.n	837e4 <_malloc_r+0x2c4>
   837d6:	f10a 0a10 	add.w	sl, sl, #16
   837da:	e00b      	b.n	837f4 <_malloc_r+0x2d4>
   837dc:	200704b4 	.word	0x200704b4
   837e0:	200709e0 	.word	0x200709e0
   837e4:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   837e8:	f10a 0a0f 	add.w	sl, sl, #15
   837ec:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   837f0:	f02a 0a0f 	bic.w	sl, sl, #15
   837f4:	4638      	mov	r0, r7
   837f6:	4651      	mov	r1, sl
   837f8:	9301      	str	r3, [sp, #4]
   837fa:	f000 fa6f 	bl	83cdc <_sbrk_r>
   837fe:	1c42      	adds	r2, r0, #1
   83800:	4606      	mov	r6, r0
   83802:	9b01      	ldr	r3, [sp, #4]
   83804:	d06f      	beq.n	838e6 <_malloc_r+0x3c6>
   83806:	4298      	cmp	r0, r3
   83808:	d201      	bcs.n	8380e <_malloc_r+0x2ee>
   8380a:	45a9      	cmp	r9, r5
   8380c:	d16b      	bne.n	838e6 <_malloc_r+0x3c6>
   8380e:	f8d8 2004 	ldr.w	r2, [r8, #4]
   83812:	429e      	cmp	r6, r3
   83814:	4452      	add	r2, sl
   83816:	f8c8 2004 	str.w	r2, [r8, #4]
   8381a:	d108      	bne.n	8382e <_malloc_r+0x30e>
   8381c:	f3c6 010b 	ubfx	r1, r6, #0, #12
   83820:	b929      	cbnz	r1, 8382e <_malloc_r+0x30e>
   83822:	68ab      	ldr	r3, [r5, #8]
   83824:	44da      	add	sl, fp
   83826:	f04a 0201 	orr.w	r2, sl, #1
   8382a:	605a      	str	r2, [r3, #4]
   8382c:	e04d      	b.n	838ca <_malloc_r+0x3aa>
   8382e:	f8d5 1408 	ldr.w	r1, [r5, #1032]	; 0x408
   83832:	3101      	adds	r1, #1
   83834:	d103      	bne.n	8383e <_malloc_r+0x31e>
   83836:	4b3c      	ldr	r3, [pc, #240]	; (83928 <_malloc_r+0x408>)
   83838:	f8c3 6408 	str.w	r6, [r3, #1032]	; 0x408
   8383c:	e003      	b.n	83846 <_malloc_r+0x326>
   8383e:	1af3      	subs	r3, r6, r3
   83840:	441a      	add	r2, r3
   83842:	f8c8 2004 	str.w	r2, [r8, #4]
   83846:	f016 0307 	ands.w	r3, r6, #7
   8384a:	bf1c      	itt	ne
   8384c:	f1c3 0308 	rsbne	r3, r3, #8
   83850:	18f6      	addne	r6, r6, r3
   83852:	44b2      	add	sl, r6
   83854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   83858:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   8385c:	ebca 0a03 	rsb	sl, sl, r3
   83860:	4651      	mov	r1, sl
   83862:	4638      	mov	r0, r7
   83864:	f000 fa3a 	bl	83cdc <_sbrk_r>
   83868:	1c43      	adds	r3, r0, #1
   8386a:	bf04      	itt	eq
   8386c:	4630      	moveq	r0, r6
   8386e:	f04f 0a00 	moveq.w	sl, #0
   83872:	f8d8 3004 	ldr.w	r3, [r8, #4]
   83876:	1b80      	subs	r0, r0, r6
   83878:	4450      	add	r0, sl
   8387a:	4453      	add	r3, sl
   8387c:	f040 0001 	orr.w	r0, r0, #1
   83880:	45a9      	cmp	r9, r5
   83882:	60ae      	str	r6, [r5, #8]
   83884:	f8c8 3004 	str.w	r3, [r8, #4]
   83888:	6070      	str	r0, [r6, #4]
   8388a:	d01e      	beq.n	838ca <_malloc_r+0x3aa>
   8388c:	f1bb 0f0f 	cmp.w	fp, #15
   83890:	d802      	bhi.n	83898 <_malloc_r+0x378>
   83892:	2301      	movs	r3, #1
   83894:	6073      	str	r3, [r6, #4]
   83896:	e026      	b.n	838e6 <_malloc_r+0x3c6>
   83898:	f8d9 3004 	ldr.w	r3, [r9, #4]
   8389c:	f1ab 0b0c 	sub.w	fp, fp, #12
   838a0:	f02b 0b07 	bic.w	fp, fp, #7
   838a4:	f003 0301 	and.w	r3, r3, #1
   838a8:	ea4b 0303 	orr.w	r3, fp, r3
   838ac:	f8c9 3004 	str.w	r3, [r9, #4]
   838b0:	2205      	movs	r2, #5
   838b2:	eb09 030b 	add.w	r3, r9, fp
   838b6:	f1bb 0f0f 	cmp.w	fp, #15
   838ba:	605a      	str	r2, [r3, #4]
   838bc:	609a      	str	r2, [r3, #8]
   838be:	d904      	bls.n	838ca <_malloc_r+0x3aa>
   838c0:	4638      	mov	r0, r7
   838c2:	f109 0108 	add.w	r1, r9, #8
   838c6:	f7ff fb37 	bl	82f38 <_free_r>
   838ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
   838ce:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
   838d2:	4293      	cmp	r3, r2
   838d4:	bf84      	itt	hi
   838d6:	4a15      	ldrhi	r2, [pc, #84]	; (8392c <_malloc_r+0x40c>)
   838d8:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   838da:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
   838de:	4293      	cmp	r3, r2
   838e0:	bf84      	itt	hi
   838e2:	4a12      	ldrhi	r2, [pc, #72]	; (8392c <_malloc_r+0x40c>)
   838e4:	6313      	strhi	r3, [r2, #48]	; 0x30
   838e6:	68ab      	ldr	r3, [r5, #8]
   838e8:	685a      	ldr	r2, [r3, #4]
   838ea:	f022 0203 	bic.w	r2, r2, #3
   838ee:	42a2      	cmp	r2, r4
   838f0:	ebc4 0302 	rsb	r3, r4, r2
   838f4:	d301      	bcc.n	838fa <_malloc_r+0x3da>
   838f6:	2b0f      	cmp	r3, #15
   838f8:	dc04      	bgt.n	83904 <_malloc_r+0x3e4>
   838fa:	4638      	mov	r0, r7
   838fc:	f000 f842 	bl	83984 <__malloc_unlock>
   83900:	2600      	movs	r6, #0
   83902:	e00c      	b.n	8391e <_malloc_r+0x3fe>
   83904:	68ae      	ldr	r6, [r5, #8]
   83906:	f044 0201 	orr.w	r2, r4, #1
   8390a:	f043 0301 	orr.w	r3, r3, #1
   8390e:	4434      	add	r4, r6
   83910:	6072      	str	r2, [r6, #4]
   83912:	60ac      	str	r4, [r5, #8]
   83914:	6063      	str	r3, [r4, #4]
   83916:	4638      	mov	r0, r7
   83918:	f000 f834 	bl	83984 <__malloc_unlock>
   8391c:	3608      	adds	r6, #8
   8391e:	4630      	mov	r0, r6
   83920:	b003      	add	sp, #12
   83922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83926:	bf00      	nop
   83928:	200704b4 	.word	0x200704b4
   8392c:	200709e0 	.word	0x200709e0

00083930 <memchr>:
   83930:	b510      	push	{r4, lr}
   83932:	b2c9      	uxtb	r1, r1
   83934:	4402      	add	r2, r0
   83936:	4290      	cmp	r0, r2
   83938:	4603      	mov	r3, r0
   8393a:	d005      	beq.n	83948 <memchr+0x18>
   8393c:	781c      	ldrb	r4, [r3, #0]
   8393e:	3001      	adds	r0, #1
   83940:	428c      	cmp	r4, r1
   83942:	d1f8      	bne.n	83936 <memchr+0x6>
   83944:	4618      	mov	r0, r3
   83946:	bd10      	pop	{r4, pc}
   83948:	2000      	movs	r0, #0
   8394a:	bd10      	pop	{r4, pc}

0008394c <memmove>:
   8394c:	4281      	cmp	r1, r0
   8394e:	b570      	push	{r4, r5, r6, lr}
   83950:	d301      	bcc.n	83956 <memmove+0xa>
   83952:	2300      	movs	r3, #0
   83954:	e00e      	b.n	83974 <memmove+0x28>
   83956:	188c      	adds	r4, r1, r2
   83958:	42a0      	cmp	r0, r4
   8395a:	d2fa      	bcs.n	83952 <memmove+0x6>
   8395c:	1885      	adds	r5, r0, r2
   8395e:	4613      	mov	r3, r2
   83960:	f113 33ff 	adds.w	r3, r3, #4294967295
   83964:	d305      	bcc.n	83972 <memmove+0x26>
   83966:	4251      	negs	r1, r2
   83968:	1866      	adds	r6, r4, r1
   8396a:	5cf6      	ldrb	r6, [r6, r3]
   8396c:	4429      	add	r1, r5
   8396e:	54ce      	strb	r6, [r1, r3]
   83970:	e7f6      	b.n	83960 <memmove+0x14>
   83972:	bd70      	pop	{r4, r5, r6, pc}
   83974:	4293      	cmp	r3, r2
   83976:	d003      	beq.n	83980 <memmove+0x34>
   83978:	5ccc      	ldrb	r4, [r1, r3]
   8397a:	54c4      	strb	r4, [r0, r3]
   8397c:	3301      	adds	r3, #1
   8397e:	e7f9      	b.n	83974 <memmove+0x28>
   83980:	bd70      	pop	{r4, r5, r6, pc}

00083982 <__malloc_lock>:
   83982:	4770      	bx	lr

00083984 <__malloc_unlock>:
   83984:	4770      	bx	lr
	...

00083988 <_realloc_r>:
   83988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8398c:	4681      	mov	r9, r0
   8398e:	460c      	mov	r4, r1
   83990:	b929      	cbnz	r1, 8399e <_realloc_r+0x16>
   83992:	4611      	mov	r1, r2
   83994:	b003      	add	sp, #12
   83996:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8399a:	f7ff bdc1 	b.w	83520 <_malloc_r>
   8399e:	9201      	str	r2, [sp, #4]
   839a0:	f7ff ffef 	bl	83982 <__malloc_lock>
   839a4:	9a01      	ldr	r2, [sp, #4]
   839a6:	f854 5c04 	ldr.w	r5, [r4, #-4]
   839aa:	f102 070b 	add.w	r7, r2, #11
   839ae:	2f16      	cmp	r7, #22
   839b0:	f1a4 0808 	sub.w	r8, r4, #8
   839b4:	f025 0603 	bic.w	r6, r5, #3
   839b8:	d903      	bls.n	839c2 <_realloc_r+0x3a>
   839ba:	f037 0707 	bics.w	r7, r7, #7
   839be:	d501      	bpl.n	839c4 <_realloc_r+0x3c>
   839c0:	e002      	b.n	839c8 <_realloc_r+0x40>
   839c2:	2710      	movs	r7, #16
   839c4:	4297      	cmp	r7, r2
   839c6:	d204      	bcs.n	839d2 <_realloc_r+0x4a>
   839c8:	230c      	movs	r3, #12
   839ca:	f8c9 3000 	str.w	r3, [r9]
   839ce:	2000      	movs	r0, #0
   839d0:	e180      	b.n	83cd4 <_realloc_r+0x34c>
   839d2:	42be      	cmp	r6, r7
   839d4:	f280 8156 	bge.w	83c84 <_realloc_r+0x2fc>
   839d8:	49a3      	ldr	r1, [pc, #652]	; (83c68 <_realloc_r+0x2e0>)
   839da:	eb08 0306 	add.w	r3, r8, r6
   839de:	f8d1 e008 	ldr.w	lr, [r1, #8]
   839e2:	468b      	mov	fp, r1
   839e4:	4573      	cmp	r3, lr
   839e6:	6858      	ldr	r0, [r3, #4]
   839e8:	d005      	beq.n	839f6 <_realloc_r+0x6e>
   839ea:	f020 0101 	bic.w	r1, r0, #1
   839ee:	4419      	add	r1, r3
   839f0:	6849      	ldr	r1, [r1, #4]
   839f2:	07c9      	lsls	r1, r1, #31
   839f4:	d425      	bmi.n	83a42 <_realloc_r+0xba>
   839f6:	f020 0003 	bic.w	r0, r0, #3
   839fa:	4573      	cmp	r3, lr
   839fc:	eb00 0106 	add.w	r1, r0, r6
   83a00:	d117      	bne.n	83a32 <_realloc_r+0xaa>
   83a02:	f107 0c10 	add.w	ip, r7, #16
   83a06:	4561      	cmp	r1, ip
   83a08:	db1d      	blt.n	83a46 <_realloc_r+0xbe>
   83a0a:	1bc9      	subs	r1, r1, r7
   83a0c:	eb08 0507 	add.w	r5, r8, r7
   83a10:	f041 0101 	orr.w	r1, r1, #1
   83a14:	f8cb 5008 	str.w	r5, [fp, #8]
   83a18:	6069      	str	r1, [r5, #4]
   83a1a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83a1e:	4648      	mov	r0, r9
   83a20:	f003 0301 	and.w	r3, r3, #1
   83a24:	431f      	orrs	r7, r3
   83a26:	f844 7c04 	str.w	r7, [r4, #-4]
   83a2a:	f7ff ffab 	bl	83984 <__malloc_unlock>
   83a2e:	4620      	mov	r0, r4
   83a30:	e150      	b.n	83cd4 <_realloc_r+0x34c>
   83a32:	42b9      	cmp	r1, r7
   83a34:	db07      	blt.n	83a46 <_realloc_r+0xbe>
   83a36:	68da      	ldr	r2, [r3, #12]
   83a38:	689b      	ldr	r3, [r3, #8]
   83a3a:	460e      	mov	r6, r1
   83a3c:	60da      	str	r2, [r3, #12]
   83a3e:	6093      	str	r3, [r2, #8]
   83a40:	e120      	b.n	83c84 <_realloc_r+0x2fc>
   83a42:	2000      	movs	r0, #0
   83a44:	4603      	mov	r3, r0
   83a46:	07e9      	lsls	r1, r5, #31
   83a48:	f100 80cb 	bmi.w	83be2 <_realloc_r+0x25a>
   83a4c:	f854 5c08 	ldr.w	r5, [r4, #-8]
   83a50:	ebc5 0508 	rsb	r5, r5, r8
   83a54:	6869      	ldr	r1, [r5, #4]
   83a56:	f021 0103 	bic.w	r1, r1, #3
   83a5a:	eb01 0a06 	add.w	sl, r1, r6
   83a5e:	2b00      	cmp	r3, #0
   83a60:	f000 808a 	beq.w	83b78 <_realloc_r+0x1f0>
   83a64:	4573      	cmp	r3, lr
   83a66:	d14d      	bne.n	83b04 <_realloc_r+0x17c>
   83a68:	eb0a 0300 	add.w	r3, sl, r0
   83a6c:	f107 0110 	add.w	r1, r7, #16
   83a70:	428b      	cmp	r3, r1
   83a72:	f2c0 8081 	blt.w	83b78 <_realloc_r+0x1f0>
   83a76:	46a8      	mov	r8, r5
   83a78:	68ea      	ldr	r2, [r5, #12]
   83a7a:	f858 1f08 	ldr.w	r1, [r8, #8]!
   83a7e:	60ca      	str	r2, [r1, #12]
   83a80:	6091      	str	r1, [r2, #8]
   83a82:	1f32      	subs	r2, r6, #4
   83a84:	2a24      	cmp	r2, #36	; 0x24
   83a86:	d826      	bhi.n	83ad6 <_realloc_r+0x14e>
   83a88:	2a13      	cmp	r2, #19
   83a8a:	d91c      	bls.n	83ac6 <_realloc_r+0x13e>
   83a8c:	6821      	ldr	r1, [r4, #0]
   83a8e:	2a1b      	cmp	r2, #27
   83a90:	60a9      	str	r1, [r5, #8]
   83a92:	6861      	ldr	r1, [r4, #4]
   83a94:	60e9      	str	r1, [r5, #12]
   83a96:	d803      	bhi.n	83aa0 <_realloc_r+0x118>
   83a98:	f105 0210 	add.w	r2, r5, #16
   83a9c:	3408      	adds	r4, #8
   83a9e:	e013      	b.n	83ac8 <_realloc_r+0x140>
   83aa0:	68a1      	ldr	r1, [r4, #8]
   83aa2:	2a24      	cmp	r2, #36	; 0x24
   83aa4:	6129      	str	r1, [r5, #16]
   83aa6:	68e1      	ldr	r1, [r4, #12]
   83aa8:	6169      	str	r1, [r5, #20]
   83aaa:	d003      	beq.n	83ab4 <_realloc_r+0x12c>
   83aac:	f105 0218 	add.w	r2, r5, #24
   83ab0:	3410      	adds	r4, #16
   83ab2:	e009      	b.n	83ac8 <_realloc_r+0x140>
   83ab4:	6922      	ldr	r2, [r4, #16]
   83ab6:	3418      	adds	r4, #24
   83ab8:	61aa      	str	r2, [r5, #24]
   83aba:	f854 1c04 	ldr.w	r1, [r4, #-4]
   83abe:	f105 0220 	add.w	r2, r5, #32
   83ac2:	61e9      	str	r1, [r5, #28]
   83ac4:	e000      	b.n	83ac8 <_realloc_r+0x140>
   83ac6:	4642      	mov	r2, r8
   83ac8:	6821      	ldr	r1, [r4, #0]
   83aca:	6011      	str	r1, [r2, #0]
   83acc:	6861      	ldr	r1, [r4, #4]
   83ace:	6051      	str	r1, [r2, #4]
   83ad0:	68a1      	ldr	r1, [r4, #8]
   83ad2:	6091      	str	r1, [r2, #8]
   83ad4:	e005      	b.n	83ae2 <_realloc_r+0x15a>
   83ad6:	4640      	mov	r0, r8
   83ad8:	4621      	mov	r1, r4
   83ada:	9301      	str	r3, [sp, #4]
   83adc:	f7ff ff36 	bl	8394c <memmove>
   83ae0:	9b01      	ldr	r3, [sp, #4]
   83ae2:	1bdb      	subs	r3, r3, r7
   83ae4:	19ea      	adds	r2, r5, r7
   83ae6:	f043 0301 	orr.w	r3, r3, #1
   83aea:	f8cb 2008 	str.w	r2, [fp, #8]
   83aee:	6053      	str	r3, [r2, #4]
   83af0:	686b      	ldr	r3, [r5, #4]
   83af2:	4648      	mov	r0, r9
   83af4:	f003 0301 	and.w	r3, r3, #1
   83af8:	431f      	orrs	r7, r3
   83afa:	606f      	str	r7, [r5, #4]
   83afc:	f7ff ff42 	bl	83984 <__malloc_unlock>
   83b00:	4640      	mov	r0, r8
   83b02:	e0e7      	b.n	83cd4 <_realloc_r+0x34c>
   83b04:	eb0a 0b00 	add.w	fp, sl, r0
   83b08:	45bb      	cmp	fp, r7
   83b0a:	db35      	blt.n	83b78 <_realloc_r+0x1f0>
   83b0c:	68da      	ldr	r2, [r3, #12]
   83b0e:	689b      	ldr	r3, [r3, #8]
   83b10:	4628      	mov	r0, r5
   83b12:	60da      	str	r2, [r3, #12]
   83b14:	6093      	str	r3, [r2, #8]
   83b16:	f850 2f08 	ldr.w	r2, [r0, #8]!
   83b1a:	68eb      	ldr	r3, [r5, #12]
   83b1c:	60d3      	str	r3, [r2, #12]
   83b1e:	609a      	str	r2, [r3, #8]
   83b20:	1f32      	subs	r2, r6, #4
   83b22:	2a24      	cmp	r2, #36	; 0x24
   83b24:	d823      	bhi.n	83b6e <_realloc_r+0x1e6>
   83b26:	2a13      	cmp	r2, #19
   83b28:	d91a      	bls.n	83b60 <_realloc_r+0x1d8>
   83b2a:	6823      	ldr	r3, [r4, #0]
   83b2c:	2a1b      	cmp	r2, #27
   83b2e:	60ab      	str	r3, [r5, #8]
   83b30:	6863      	ldr	r3, [r4, #4]
   83b32:	60eb      	str	r3, [r5, #12]
   83b34:	d803      	bhi.n	83b3e <_realloc_r+0x1b6>
   83b36:	f105 0010 	add.w	r0, r5, #16
   83b3a:	3408      	adds	r4, #8
   83b3c:	e010      	b.n	83b60 <_realloc_r+0x1d8>
   83b3e:	68a3      	ldr	r3, [r4, #8]
   83b40:	2a24      	cmp	r2, #36	; 0x24
   83b42:	612b      	str	r3, [r5, #16]
   83b44:	68e3      	ldr	r3, [r4, #12]
   83b46:	616b      	str	r3, [r5, #20]
   83b48:	d003      	beq.n	83b52 <_realloc_r+0x1ca>
   83b4a:	f105 0018 	add.w	r0, r5, #24
   83b4e:	3410      	adds	r4, #16
   83b50:	e006      	b.n	83b60 <_realloc_r+0x1d8>
   83b52:	6923      	ldr	r3, [r4, #16]
   83b54:	f105 0020 	add.w	r0, r5, #32
   83b58:	61ab      	str	r3, [r5, #24]
   83b5a:	6963      	ldr	r3, [r4, #20]
   83b5c:	3418      	adds	r4, #24
   83b5e:	61eb      	str	r3, [r5, #28]
   83b60:	6823      	ldr	r3, [r4, #0]
   83b62:	6003      	str	r3, [r0, #0]
   83b64:	6863      	ldr	r3, [r4, #4]
   83b66:	6043      	str	r3, [r0, #4]
   83b68:	68a3      	ldr	r3, [r4, #8]
   83b6a:	6083      	str	r3, [r0, #8]
   83b6c:	e002      	b.n	83b74 <_realloc_r+0x1ec>
   83b6e:	4621      	mov	r1, r4
   83b70:	f7ff feec 	bl	8394c <memmove>
   83b74:	465e      	mov	r6, fp
   83b76:	e02e      	b.n	83bd6 <_realloc_r+0x24e>
   83b78:	45ba      	cmp	sl, r7
   83b7a:	db32      	blt.n	83be2 <_realloc_r+0x25a>
   83b7c:	4628      	mov	r0, r5
   83b7e:	f850 2f08 	ldr.w	r2, [r0, #8]!
   83b82:	68eb      	ldr	r3, [r5, #12]
   83b84:	60d3      	str	r3, [r2, #12]
   83b86:	609a      	str	r2, [r3, #8]
   83b88:	1f32      	subs	r2, r6, #4
   83b8a:	2a24      	cmp	r2, #36	; 0x24
   83b8c:	d825      	bhi.n	83bda <_realloc_r+0x252>
   83b8e:	2a13      	cmp	r2, #19
   83b90:	d91a      	bls.n	83bc8 <_realloc_r+0x240>
   83b92:	6823      	ldr	r3, [r4, #0]
   83b94:	2a1b      	cmp	r2, #27
   83b96:	60ab      	str	r3, [r5, #8]
   83b98:	6863      	ldr	r3, [r4, #4]
   83b9a:	60eb      	str	r3, [r5, #12]
   83b9c:	d803      	bhi.n	83ba6 <_realloc_r+0x21e>
   83b9e:	f105 0010 	add.w	r0, r5, #16
   83ba2:	3408      	adds	r4, #8
   83ba4:	e010      	b.n	83bc8 <_realloc_r+0x240>
   83ba6:	68a3      	ldr	r3, [r4, #8]
   83ba8:	2a24      	cmp	r2, #36	; 0x24
   83baa:	612b      	str	r3, [r5, #16]
   83bac:	68e3      	ldr	r3, [r4, #12]
   83bae:	616b      	str	r3, [r5, #20]
   83bb0:	d003      	beq.n	83bba <_realloc_r+0x232>
   83bb2:	f105 0018 	add.w	r0, r5, #24
   83bb6:	3410      	adds	r4, #16
   83bb8:	e006      	b.n	83bc8 <_realloc_r+0x240>
   83bba:	6923      	ldr	r3, [r4, #16]
   83bbc:	f105 0020 	add.w	r0, r5, #32
   83bc0:	61ab      	str	r3, [r5, #24]
   83bc2:	6963      	ldr	r3, [r4, #20]
   83bc4:	3418      	adds	r4, #24
   83bc6:	61eb      	str	r3, [r5, #28]
   83bc8:	6823      	ldr	r3, [r4, #0]
   83bca:	6003      	str	r3, [r0, #0]
   83bcc:	6863      	ldr	r3, [r4, #4]
   83bce:	6043      	str	r3, [r0, #4]
   83bd0:	68a3      	ldr	r3, [r4, #8]
   83bd2:	6083      	str	r3, [r0, #8]
   83bd4:	4656      	mov	r6, sl
   83bd6:	46a8      	mov	r8, r5
   83bd8:	e054      	b.n	83c84 <_realloc_r+0x2fc>
   83bda:	4621      	mov	r1, r4
   83bdc:	f7ff feb6 	bl	8394c <memmove>
   83be0:	e7f8      	b.n	83bd4 <_realloc_r+0x24c>
   83be2:	4648      	mov	r0, r9
   83be4:	4611      	mov	r1, r2
   83be6:	f7ff fc9b 	bl	83520 <_malloc_r>
   83bea:	4605      	mov	r5, r0
   83bec:	2800      	cmp	r0, #0
   83bee:	d044      	beq.n	83c7a <_realloc_r+0x2f2>
   83bf0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83bf4:	f1a0 0208 	sub.w	r2, r0, #8
   83bf8:	f023 0301 	bic.w	r3, r3, #1
   83bfc:	4443      	add	r3, r8
   83bfe:	429a      	cmp	r2, r3
   83c00:	d105      	bne.n	83c0e <_realloc_r+0x286>
   83c02:	f850 3c04 	ldr.w	r3, [r0, #-4]
   83c06:	f023 0303 	bic.w	r3, r3, #3
   83c0a:	441e      	add	r6, r3
   83c0c:	e03a      	b.n	83c84 <_realloc_r+0x2fc>
   83c0e:	1f32      	subs	r2, r6, #4
   83c10:	2a24      	cmp	r2, #36	; 0x24
   83c12:	d82b      	bhi.n	83c6c <_realloc_r+0x2e4>
   83c14:	2a13      	cmp	r2, #19
   83c16:	d91e      	bls.n	83c56 <_realloc_r+0x2ce>
   83c18:	6823      	ldr	r3, [r4, #0]
   83c1a:	2a1b      	cmp	r2, #27
   83c1c:	6003      	str	r3, [r0, #0]
   83c1e:	6863      	ldr	r3, [r4, #4]
   83c20:	6043      	str	r3, [r0, #4]
   83c22:	d804      	bhi.n	83c2e <_realloc_r+0x2a6>
   83c24:	f100 0308 	add.w	r3, r0, #8
   83c28:	f104 0208 	add.w	r2, r4, #8
   83c2c:	e015      	b.n	83c5a <_realloc_r+0x2d2>
   83c2e:	68a3      	ldr	r3, [r4, #8]
   83c30:	2a24      	cmp	r2, #36	; 0x24
   83c32:	6083      	str	r3, [r0, #8]
   83c34:	68e3      	ldr	r3, [r4, #12]
   83c36:	60c3      	str	r3, [r0, #12]
   83c38:	d004      	beq.n	83c44 <_realloc_r+0x2bc>
   83c3a:	f100 0310 	add.w	r3, r0, #16
   83c3e:	f104 0210 	add.w	r2, r4, #16
   83c42:	e00a      	b.n	83c5a <_realloc_r+0x2d2>
   83c44:	6923      	ldr	r3, [r4, #16]
   83c46:	f104 0218 	add.w	r2, r4, #24
   83c4a:	6103      	str	r3, [r0, #16]
   83c4c:	6961      	ldr	r1, [r4, #20]
   83c4e:	f100 0318 	add.w	r3, r0, #24
   83c52:	6141      	str	r1, [r0, #20]
   83c54:	e001      	b.n	83c5a <_realloc_r+0x2d2>
   83c56:	4603      	mov	r3, r0
   83c58:	4622      	mov	r2, r4
   83c5a:	6811      	ldr	r1, [r2, #0]
   83c5c:	6019      	str	r1, [r3, #0]
   83c5e:	6851      	ldr	r1, [r2, #4]
   83c60:	6059      	str	r1, [r3, #4]
   83c62:	6892      	ldr	r2, [r2, #8]
   83c64:	609a      	str	r2, [r3, #8]
   83c66:	e004      	b.n	83c72 <_realloc_r+0x2ea>
   83c68:	200704b4 	.word	0x200704b4
   83c6c:	4621      	mov	r1, r4
   83c6e:	f7ff fe6d 	bl	8394c <memmove>
   83c72:	4648      	mov	r0, r9
   83c74:	4621      	mov	r1, r4
   83c76:	f7ff f95f 	bl	82f38 <_free_r>
   83c7a:	4648      	mov	r0, r9
   83c7c:	f7ff fe82 	bl	83984 <__malloc_unlock>
   83c80:	4628      	mov	r0, r5
   83c82:	e027      	b.n	83cd4 <_realloc_r+0x34c>
   83c84:	1bf3      	subs	r3, r6, r7
   83c86:	2b0f      	cmp	r3, #15
   83c88:	f8d8 2004 	ldr.w	r2, [r8, #4]
   83c8c:	d913      	bls.n	83cb6 <_realloc_r+0x32e>
   83c8e:	f002 0201 	and.w	r2, r2, #1
   83c92:	eb08 0107 	add.w	r1, r8, r7
   83c96:	4317      	orrs	r7, r2
   83c98:	f043 0201 	orr.w	r2, r3, #1
   83c9c:	f8c8 7004 	str.w	r7, [r8, #4]
   83ca0:	440b      	add	r3, r1
   83ca2:	604a      	str	r2, [r1, #4]
   83ca4:	685a      	ldr	r2, [r3, #4]
   83ca6:	4648      	mov	r0, r9
   83ca8:	f042 0201 	orr.w	r2, r2, #1
   83cac:	605a      	str	r2, [r3, #4]
   83cae:	3108      	adds	r1, #8
   83cb0:	f7ff f942 	bl	82f38 <_free_r>
   83cb4:	e009      	b.n	83cca <_realloc_r+0x342>
   83cb6:	f002 0201 	and.w	r2, r2, #1
   83cba:	4332      	orrs	r2, r6
   83cbc:	f8c8 2004 	str.w	r2, [r8, #4]
   83cc0:	4446      	add	r6, r8
   83cc2:	6873      	ldr	r3, [r6, #4]
   83cc4:	f043 0301 	orr.w	r3, r3, #1
   83cc8:	6073      	str	r3, [r6, #4]
   83cca:	4648      	mov	r0, r9
   83ccc:	f7ff fe5a 	bl	83984 <__malloc_unlock>
   83cd0:	f108 0008 	add.w	r0, r8, #8
   83cd4:	b003      	add	sp, #12
   83cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83cda:	bf00      	nop

00083cdc <_sbrk_r>:
   83cdc:	b538      	push	{r3, r4, r5, lr}
   83cde:	4c06      	ldr	r4, [pc, #24]	; (83cf8 <_sbrk_r+0x1c>)
   83ce0:	2300      	movs	r3, #0
   83ce2:	4605      	mov	r5, r0
   83ce4:	4608      	mov	r0, r1
   83ce6:	6023      	str	r3, [r4, #0]
   83ce8:	f7fe f818 	bl	81d1c <_sbrk>
   83cec:	1c43      	adds	r3, r0, #1
   83cee:	d102      	bne.n	83cf6 <_sbrk_r+0x1a>
   83cf0:	6823      	ldr	r3, [r4, #0]
   83cf2:	b103      	cbz	r3, 83cf6 <_sbrk_r+0x1a>
   83cf4:	602b      	str	r3, [r5, #0]
   83cf6:	bd38      	pop	{r3, r4, r5, pc}
   83cf8:	20070a9c 	.word	0x20070a9c

00083cfc <__sread>:
   83cfc:	b510      	push	{r4, lr}
   83cfe:	460c      	mov	r4, r1
   83d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83d04:	f000 f93e 	bl	83f84 <_read_r>
   83d08:	2800      	cmp	r0, #0
   83d0a:	db03      	blt.n	83d14 <__sread+0x18>
   83d0c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83d0e:	4403      	add	r3, r0
   83d10:	6523      	str	r3, [r4, #80]	; 0x50
   83d12:	bd10      	pop	{r4, pc}
   83d14:	89a3      	ldrh	r3, [r4, #12]
   83d16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83d1a:	81a3      	strh	r3, [r4, #12]
   83d1c:	bd10      	pop	{r4, pc}

00083d1e <__seofread>:
   83d1e:	2000      	movs	r0, #0
   83d20:	4770      	bx	lr

00083d22 <__swrite>:
   83d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83d26:	461d      	mov	r5, r3
   83d28:	898b      	ldrh	r3, [r1, #12]
   83d2a:	4607      	mov	r7, r0
   83d2c:	05db      	lsls	r3, r3, #23
   83d2e:	460c      	mov	r4, r1
   83d30:	4616      	mov	r6, r2
   83d32:	d505      	bpl.n	83d40 <__swrite+0x1e>
   83d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83d38:	2200      	movs	r2, #0
   83d3a:	2302      	movs	r3, #2
   83d3c:	f000 f910 	bl	83f60 <_lseek_r>
   83d40:	89a3      	ldrh	r3, [r4, #12]
   83d42:	4638      	mov	r0, r7
   83d44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83d48:	81a3      	strh	r3, [r4, #12]
   83d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83d4e:	4632      	mov	r2, r6
   83d50:	462b      	mov	r3, r5
   83d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83d56:	f000 b879 	b.w	83e4c <_write_r>

00083d5a <__sseek>:
   83d5a:	b510      	push	{r4, lr}
   83d5c:	460c      	mov	r4, r1
   83d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83d62:	f000 f8fd 	bl	83f60 <_lseek_r>
   83d66:	1c43      	adds	r3, r0, #1
   83d68:	89a3      	ldrh	r3, [r4, #12]
   83d6a:	d103      	bne.n	83d74 <__sseek+0x1a>
   83d6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83d70:	81a3      	strh	r3, [r4, #12]
   83d72:	bd10      	pop	{r4, pc}
   83d74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   83d78:	81a3      	strh	r3, [r4, #12]
   83d7a:	6520      	str	r0, [r4, #80]	; 0x50
   83d7c:	bd10      	pop	{r4, pc}

00083d7e <__sclose>:
   83d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83d82:	f000 b875 	b.w	83e70 <_close_r>

00083d86 <strcmp>:
   83d86:	f810 2b01 	ldrb.w	r2, [r0], #1
   83d8a:	f811 3b01 	ldrb.w	r3, [r1], #1
   83d8e:	2a01      	cmp	r2, #1
   83d90:	bf28      	it	cs
   83d92:	429a      	cmpcs	r2, r3
   83d94:	d0f7      	beq.n	83d86 <strcmp>
   83d96:	1ad0      	subs	r0, r2, r3
   83d98:	4770      	bx	lr
	...

00083d9c <_wcrtomb_r>:
   83d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83da0:	461d      	mov	r5, r3
   83da2:	4b10      	ldr	r3, [pc, #64]	; (83de4 <_wcrtomb_r+0x48>)
   83da4:	b086      	sub	sp, #24
   83da6:	4604      	mov	r4, r0
   83da8:	4690      	mov	r8, r2
   83daa:	460e      	mov	r6, r1
   83dac:	681f      	ldr	r7, [r3, #0]
   83dae:	b939      	cbnz	r1, 83dc0 <_wcrtomb_r+0x24>
   83db0:	f7ff fb20 	bl	833f4 <__locale_charset>
   83db4:	9500      	str	r5, [sp, #0]
   83db6:	4603      	mov	r3, r0
   83db8:	a903      	add	r1, sp, #12
   83dba:	4620      	mov	r0, r4
   83dbc:	4632      	mov	r2, r6
   83dbe:	e006      	b.n	83dce <_wcrtomb_r+0x32>
   83dc0:	f7ff fb18 	bl	833f4 <__locale_charset>
   83dc4:	9500      	str	r5, [sp, #0]
   83dc6:	4603      	mov	r3, r0
   83dc8:	4631      	mov	r1, r6
   83dca:	4620      	mov	r0, r4
   83dcc:	4642      	mov	r2, r8
   83dce:	47b8      	blx	r7
   83dd0:	1c43      	adds	r3, r0, #1
   83dd2:	d103      	bne.n	83ddc <_wcrtomb_r+0x40>
   83dd4:	2300      	movs	r3, #0
   83dd6:	602b      	str	r3, [r5, #0]
   83dd8:	238a      	movs	r3, #138	; 0x8a
   83dda:	6023      	str	r3, [r4, #0]
   83ddc:	b006      	add	sp, #24
   83dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83de2:	bf00      	nop
   83de4:	200708c4 	.word	0x200708c4

00083de8 <wcrtomb>:
   83de8:	b530      	push	{r4, r5, lr}
   83dea:	4613      	mov	r3, r2
   83dec:	4a04      	ldr	r2, [pc, #16]	; (83e00 <wcrtomb+0x18>)
   83dee:	4605      	mov	r5, r0
   83df0:	460c      	mov	r4, r1
   83df2:	6810      	ldr	r0, [r2, #0]
   83df4:	4629      	mov	r1, r5
   83df6:	4622      	mov	r2, r4
   83df8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   83dfc:	f7ff bfce 	b.w	83d9c <_wcrtomb_r>
   83e00:	20070008 	.word	0x20070008

00083e04 <__ascii_wctomb>:
   83e04:	b149      	cbz	r1, 83e1a <__ascii_wctomb+0x16>
   83e06:	2aff      	cmp	r2, #255	; 0xff
   83e08:	d904      	bls.n	83e14 <__ascii_wctomb+0x10>
   83e0a:	238a      	movs	r3, #138	; 0x8a
   83e0c:	6003      	str	r3, [r0, #0]
   83e0e:	f04f 30ff 	mov.w	r0, #4294967295
   83e12:	4770      	bx	lr
   83e14:	700a      	strb	r2, [r1, #0]
   83e16:	2001      	movs	r0, #1
   83e18:	4770      	bx	lr
   83e1a:	4608      	mov	r0, r1
   83e1c:	4770      	bx	lr

00083e1e <_wctomb_r>:
   83e1e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   83e22:	4698      	mov	r8, r3
   83e24:	4b08      	ldr	r3, [pc, #32]	; (83e48 <_wctomb_r+0x2a>)
   83e26:	4605      	mov	r5, r0
   83e28:	681c      	ldr	r4, [r3, #0]
   83e2a:	460f      	mov	r7, r1
   83e2c:	4616      	mov	r6, r2
   83e2e:	f7ff fae1 	bl	833f4 <__locale_charset>
   83e32:	f8cd 8000 	str.w	r8, [sp]
   83e36:	4603      	mov	r3, r0
   83e38:	4639      	mov	r1, r7
   83e3a:	4628      	mov	r0, r5
   83e3c:	4632      	mov	r2, r6
   83e3e:	47a0      	blx	r4
   83e40:	b002      	add	sp, #8
   83e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83e46:	bf00      	nop
   83e48:	200708c4 	.word	0x200708c4

00083e4c <_write_r>:
   83e4c:	b538      	push	{r3, r4, r5, lr}
   83e4e:	4c07      	ldr	r4, [pc, #28]	; (83e6c <_write_r+0x20>)
   83e50:	4605      	mov	r5, r0
   83e52:	2000      	movs	r0, #0
   83e54:	6020      	str	r0, [r4, #0]
   83e56:	4608      	mov	r0, r1
   83e58:	4611      	mov	r1, r2
   83e5a:	461a      	mov	r2, r3
   83e5c:	f7fc fbde 	bl	8061c <_write>
   83e60:	1c43      	adds	r3, r0, #1
   83e62:	d102      	bne.n	83e6a <_write_r+0x1e>
   83e64:	6823      	ldr	r3, [r4, #0]
   83e66:	b103      	cbz	r3, 83e6a <_write_r+0x1e>
   83e68:	602b      	str	r3, [r5, #0]
   83e6a:	bd38      	pop	{r3, r4, r5, pc}
   83e6c:	20070a9c 	.word	0x20070a9c

00083e70 <_close_r>:
   83e70:	b538      	push	{r3, r4, r5, lr}
   83e72:	4c06      	ldr	r4, [pc, #24]	; (83e8c <_close_r+0x1c>)
   83e74:	2300      	movs	r3, #0
   83e76:	4605      	mov	r5, r0
   83e78:	4608      	mov	r0, r1
   83e7a:	6023      	str	r3, [r4, #0]
   83e7c:	f7fd ff68 	bl	81d50 <_close>
   83e80:	1c43      	adds	r3, r0, #1
   83e82:	d102      	bne.n	83e8a <_close_r+0x1a>
   83e84:	6823      	ldr	r3, [r4, #0]
   83e86:	b103      	cbz	r3, 83e8a <_close_r+0x1a>
   83e88:	602b      	str	r3, [r5, #0]
   83e8a:	bd38      	pop	{r3, r4, r5, pc}
   83e8c:	20070a9c 	.word	0x20070a9c

00083e90 <_fclose_r>:
   83e90:	b570      	push	{r4, r5, r6, lr}
   83e92:	4605      	mov	r5, r0
   83e94:	460c      	mov	r4, r1
   83e96:	b909      	cbnz	r1, 83e9c <_fclose_r+0xc>
   83e98:	2000      	movs	r0, #0
   83e9a:	bd70      	pop	{r4, r5, r6, pc}
   83e9c:	b118      	cbz	r0, 83ea6 <_fclose_r+0x16>
   83e9e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83ea0:	b90b      	cbnz	r3, 83ea6 <_fclose_r+0x16>
   83ea2:	f7fe fec5 	bl	82c30 <__sinit>
   83ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83eaa:	2b00      	cmp	r3, #0
   83eac:	d0f4      	beq.n	83e98 <_fclose_r+0x8>
   83eae:	4628      	mov	r0, r5
   83eb0:	4621      	mov	r1, r4
   83eb2:	f7fe fe74 	bl	82b9e <_fflush_r>
   83eb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83eb8:	4606      	mov	r6, r0
   83eba:	b133      	cbz	r3, 83eca <_fclose_r+0x3a>
   83ebc:	4628      	mov	r0, r5
   83ebe:	69e1      	ldr	r1, [r4, #28]
   83ec0:	4798      	blx	r3
   83ec2:	2800      	cmp	r0, #0
   83ec4:	bfb8      	it	lt
   83ec6:	f04f 36ff 	movlt.w	r6, #4294967295
   83eca:	89a3      	ldrh	r3, [r4, #12]
   83ecc:	061b      	lsls	r3, r3, #24
   83ece:	d503      	bpl.n	83ed8 <_fclose_r+0x48>
   83ed0:	4628      	mov	r0, r5
   83ed2:	6921      	ldr	r1, [r4, #16]
   83ed4:	f7ff f830 	bl	82f38 <_free_r>
   83ed8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83eda:	b141      	cbz	r1, 83eee <_fclose_r+0x5e>
   83edc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83ee0:	4299      	cmp	r1, r3
   83ee2:	d002      	beq.n	83eea <_fclose_r+0x5a>
   83ee4:	4628      	mov	r0, r5
   83ee6:	f7ff f827 	bl	82f38 <_free_r>
   83eea:	2300      	movs	r3, #0
   83eec:	6323      	str	r3, [r4, #48]	; 0x30
   83eee:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83ef0:	b121      	cbz	r1, 83efc <_fclose_r+0x6c>
   83ef2:	4628      	mov	r0, r5
   83ef4:	f7ff f820 	bl	82f38 <_free_r>
   83ef8:	2300      	movs	r3, #0
   83efa:	6463      	str	r3, [r4, #68]	; 0x44
   83efc:	f7fe ff4a 	bl	82d94 <__sfp_lock_acquire>
   83f00:	2300      	movs	r3, #0
   83f02:	81a3      	strh	r3, [r4, #12]
   83f04:	f7fe ff47 	bl	82d96 <__sfp_lock_release>
   83f08:	4630      	mov	r0, r6
   83f0a:	bd70      	pop	{r4, r5, r6, pc}

00083f0c <fclose>:
   83f0c:	4b02      	ldr	r3, [pc, #8]	; (83f18 <fclose+0xc>)
   83f0e:	4601      	mov	r1, r0
   83f10:	6818      	ldr	r0, [r3, #0]
   83f12:	f7ff bfbd 	b.w	83e90 <_fclose_r>
   83f16:	bf00      	nop
   83f18:	20070008 	.word	0x20070008

00083f1c <_fstat_r>:
   83f1c:	b538      	push	{r3, r4, r5, lr}
   83f1e:	4c07      	ldr	r4, [pc, #28]	; (83f3c <_fstat_r+0x20>)
   83f20:	2300      	movs	r3, #0
   83f22:	4605      	mov	r5, r0
   83f24:	4608      	mov	r0, r1
   83f26:	4611      	mov	r1, r2
   83f28:	6023      	str	r3, [r4, #0]
   83f2a:	f7fd ff15 	bl	81d58 <_fstat>
   83f2e:	1c43      	adds	r3, r0, #1
   83f30:	d102      	bne.n	83f38 <_fstat_r+0x1c>
   83f32:	6823      	ldr	r3, [r4, #0]
   83f34:	b103      	cbz	r3, 83f38 <_fstat_r+0x1c>
   83f36:	602b      	str	r3, [r5, #0]
   83f38:	bd38      	pop	{r3, r4, r5, pc}
   83f3a:	bf00      	nop
   83f3c:	20070a9c 	.word	0x20070a9c

00083f40 <_isatty_r>:
   83f40:	b538      	push	{r3, r4, r5, lr}
   83f42:	4c06      	ldr	r4, [pc, #24]	; (83f5c <_isatty_r+0x1c>)
   83f44:	2300      	movs	r3, #0
   83f46:	4605      	mov	r5, r0
   83f48:	4608      	mov	r0, r1
   83f4a:	6023      	str	r3, [r4, #0]
   83f4c:	f7fd ff0a 	bl	81d64 <_isatty>
   83f50:	1c43      	adds	r3, r0, #1
   83f52:	d102      	bne.n	83f5a <_isatty_r+0x1a>
   83f54:	6823      	ldr	r3, [r4, #0]
   83f56:	b103      	cbz	r3, 83f5a <_isatty_r+0x1a>
   83f58:	602b      	str	r3, [r5, #0]
   83f5a:	bd38      	pop	{r3, r4, r5, pc}
   83f5c:	20070a9c 	.word	0x20070a9c

00083f60 <_lseek_r>:
   83f60:	b538      	push	{r3, r4, r5, lr}
   83f62:	4c07      	ldr	r4, [pc, #28]	; (83f80 <_lseek_r+0x20>)
   83f64:	4605      	mov	r5, r0
   83f66:	2000      	movs	r0, #0
   83f68:	6020      	str	r0, [r4, #0]
   83f6a:	4608      	mov	r0, r1
   83f6c:	4611      	mov	r1, r2
   83f6e:	461a      	mov	r2, r3
   83f70:	f7fd fefa 	bl	81d68 <_lseek>
   83f74:	1c43      	adds	r3, r0, #1
   83f76:	d102      	bne.n	83f7e <_lseek_r+0x1e>
   83f78:	6823      	ldr	r3, [r4, #0]
   83f7a:	b103      	cbz	r3, 83f7e <_lseek_r+0x1e>
   83f7c:	602b      	str	r3, [r5, #0]
   83f7e:	bd38      	pop	{r3, r4, r5, pc}
   83f80:	20070a9c 	.word	0x20070a9c

00083f84 <_read_r>:
   83f84:	b538      	push	{r3, r4, r5, lr}
   83f86:	4c07      	ldr	r4, [pc, #28]	; (83fa4 <_read_r+0x20>)
   83f88:	4605      	mov	r5, r0
   83f8a:	2000      	movs	r0, #0
   83f8c:	6020      	str	r0, [r4, #0]
   83f8e:	4608      	mov	r0, r1
   83f90:	4611      	mov	r1, r2
   83f92:	461a      	mov	r2, r3
   83f94:	f7fc fb22 	bl	805dc <_read>
   83f98:	1c43      	adds	r3, r0, #1
   83f9a:	d102      	bne.n	83fa2 <_read_r+0x1e>
   83f9c:	6823      	ldr	r3, [r4, #0]
   83f9e:	b103      	cbz	r3, 83fa2 <_read_r+0x1e>
   83fa0:	602b      	str	r3, [r5, #0]
   83fa2:	bd38      	pop	{r3, r4, r5, pc}
   83fa4:	20070a9c 	.word	0x20070a9c

00083fa8 <__aeabi_uldivmod>:
   83fa8:	b94b      	cbnz	r3, 83fbe <__aeabi_uldivmod+0x16>
   83faa:	b942      	cbnz	r2, 83fbe <__aeabi_uldivmod+0x16>
   83fac:	2900      	cmp	r1, #0
   83fae:	bf08      	it	eq
   83fb0:	2800      	cmpeq	r0, #0
   83fb2:	d002      	beq.n	83fba <__aeabi_uldivmod+0x12>
   83fb4:	f04f 31ff 	mov.w	r1, #4294967295
   83fb8:	4608      	mov	r0, r1
   83fba:	f000 b83b 	b.w	84034 <__aeabi_idiv0>
   83fbe:	b082      	sub	sp, #8
   83fc0:	46ec      	mov	ip, sp
   83fc2:	e92d 5000 	stmdb	sp!, {ip, lr}
   83fc6:	f000 f81d 	bl	84004 <__gnu_uldivmod_helper>
   83fca:	f8dd e004 	ldr.w	lr, [sp, #4]
   83fce:	b002      	add	sp, #8
   83fd0:	bc0c      	pop	{r2, r3}
   83fd2:	4770      	bx	lr

00083fd4 <__gnu_ldivmod_helper>:
   83fd4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83fd8:	9e08      	ldr	r6, [sp, #32]
   83fda:	4614      	mov	r4, r2
   83fdc:	461d      	mov	r5, r3
   83fde:	4680      	mov	r8, r0
   83fe0:	4689      	mov	r9, r1
   83fe2:	f000 f829 	bl	84038 <__divdi3>
   83fe6:	fb04 f301 	mul.w	r3, r4, r1
   83fea:	fba4 ab00 	umull	sl, fp, r4, r0
   83fee:	fb00 3205 	mla	r2, r0, r5, r3
   83ff2:	4493      	add	fp, r2
   83ff4:	ebb8 080a 	subs.w	r8, r8, sl
   83ff8:	eb69 090b 	sbc.w	r9, r9, fp
   83ffc:	e9c6 8900 	strd	r8, r9, [r6]
   84000:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00084004 <__gnu_uldivmod_helper>:
   84004:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   84008:	9e08      	ldr	r6, [sp, #32]
   8400a:	4614      	mov	r4, r2
   8400c:	461d      	mov	r5, r3
   8400e:	4680      	mov	r8, r0
   84010:	4689      	mov	r9, r1
   84012:	f000 f961 	bl	842d8 <__udivdi3>
   84016:	fb00 f505 	mul.w	r5, r0, r5
   8401a:	fba0 ab04 	umull	sl, fp, r0, r4
   8401e:	fb04 5401 	mla	r4, r4, r1, r5
   84022:	44a3      	add	fp, r4
   84024:	ebb8 080a 	subs.w	r8, r8, sl
   84028:	eb69 090b 	sbc.w	r9, r9, fp
   8402c:	e9c6 8900 	strd	r8, r9, [r6]
   84030:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00084034 <__aeabi_idiv0>:
   84034:	4770      	bx	lr
   84036:	bf00      	nop

00084038 <__divdi3>:
   84038:	2900      	cmp	r1, #0
   8403a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8403e:	f2c0 80a1 	blt.w	84184 <__divdi3+0x14c>
   84042:	2400      	movs	r4, #0
   84044:	2b00      	cmp	r3, #0
   84046:	f2c0 8098 	blt.w	8417a <__divdi3+0x142>
   8404a:	4615      	mov	r5, r2
   8404c:	4606      	mov	r6, r0
   8404e:	460f      	mov	r7, r1
   84050:	2b00      	cmp	r3, #0
   84052:	d13f      	bne.n	840d4 <__divdi3+0x9c>
   84054:	428a      	cmp	r2, r1
   84056:	d958      	bls.n	8410a <__divdi3+0xd2>
   84058:	fab2 f382 	clz	r3, r2
   8405c:	b14b      	cbz	r3, 84072 <__divdi3+0x3a>
   8405e:	f1c3 0220 	rsb	r2, r3, #32
   84062:	fa01 f703 	lsl.w	r7, r1, r3
   84066:	fa20 f202 	lsr.w	r2, r0, r2
   8406a:	409d      	lsls	r5, r3
   8406c:	fa00 f603 	lsl.w	r6, r0, r3
   84070:	4317      	orrs	r7, r2
   84072:	0c29      	lsrs	r1, r5, #16
   84074:	fbb7 f2f1 	udiv	r2, r7, r1
   84078:	fb01 7712 	mls	r7, r1, r2, r7
   8407c:	b2a8      	uxth	r0, r5
   8407e:	fb00 f302 	mul.w	r3, r0, r2
   84082:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   84086:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   8408a:	42bb      	cmp	r3, r7
   8408c:	d909      	bls.n	840a2 <__divdi3+0x6a>
   8408e:	197f      	adds	r7, r7, r5
   84090:	f102 3cff 	add.w	ip, r2, #4294967295
   84094:	f080 8105 	bcs.w	842a2 <__divdi3+0x26a>
   84098:	42bb      	cmp	r3, r7
   8409a:	f240 8102 	bls.w	842a2 <__divdi3+0x26a>
   8409e:	3a02      	subs	r2, #2
   840a0:	442f      	add	r7, r5
   840a2:	1aff      	subs	r7, r7, r3
   840a4:	fbb7 f3f1 	udiv	r3, r7, r1
   840a8:	fb01 7113 	mls	r1, r1, r3, r7
   840ac:	fb00 f003 	mul.w	r0, r0, r3
   840b0:	b2b6      	uxth	r6, r6
   840b2:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   840b6:	4288      	cmp	r0, r1
   840b8:	d908      	bls.n	840cc <__divdi3+0x94>
   840ba:	1949      	adds	r1, r1, r5
   840bc:	f103 37ff 	add.w	r7, r3, #4294967295
   840c0:	f080 80f1 	bcs.w	842a6 <__divdi3+0x26e>
   840c4:	4288      	cmp	r0, r1
   840c6:	f240 80ee 	bls.w	842a6 <__divdi3+0x26e>
   840ca:	3b02      	subs	r3, #2
   840cc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   840d0:	2300      	movs	r3, #0
   840d2:	e003      	b.n	840dc <__divdi3+0xa4>
   840d4:	428b      	cmp	r3, r1
   840d6:	d90a      	bls.n	840ee <__divdi3+0xb6>
   840d8:	2300      	movs	r3, #0
   840da:	461a      	mov	r2, r3
   840dc:	4610      	mov	r0, r2
   840de:	4619      	mov	r1, r3
   840e0:	b114      	cbz	r4, 840e8 <__divdi3+0xb0>
   840e2:	4240      	negs	r0, r0
   840e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   840e8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   840ec:	4770      	bx	lr
   840ee:	fab3 f883 	clz	r8, r3
   840f2:	f1b8 0f00 	cmp.w	r8, #0
   840f6:	f040 8088 	bne.w	8420a <__divdi3+0x1d2>
   840fa:	428b      	cmp	r3, r1
   840fc:	d302      	bcc.n	84104 <__divdi3+0xcc>
   840fe:	4282      	cmp	r2, r0
   84100:	f200 80e2 	bhi.w	842c8 <__divdi3+0x290>
   84104:	2300      	movs	r3, #0
   84106:	2201      	movs	r2, #1
   84108:	e7e8      	b.n	840dc <__divdi3+0xa4>
   8410a:	b912      	cbnz	r2, 84112 <__divdi3+0xda>
   8410c:	2301      	movs	r3, #1
   8410e:	fbb3 f5f2 	udiv	r5, r3, r2
   84112:	fab5 f285 	clz	r2, r5
   84116:	2a00      	cmp	r2, #0
   84118:	d13a      	bne.n	84190 <__divdi3+0x158>
   8411a:	1b7f      	subs	r7, r7, r5
   8411c:	0c28      	lsrs	r0, r5, #16
   8411e:	fa1f fc85 	uxth.w	ip, r5
   84122:	2301      	movs	r3, #1
   84124:	fbb7 f1f0 	udiv	r1, r7, r0
   84128:	fb00 7711 	mls	r7, r0, r1, r7
   8412c:	fb0c f201 	mul.w	r2, ip, r1
   84130:	ea4f 4816 	mov.w	r8, r6, lsr #16
   84134:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   84138:	42ba      	cmp	r2, r7
   8413a:	d907      	bls.n	8414c <__divdi3+0x114>
   8413c:	197f      	adds	r7, r7, r5
   8413e:	f101 38ff 	add.w	r8, r1, #4294967295
   84142:	d202      	bcs.n	8414a <__divdi3+0x112>
   84144:	42ba      	cmp	r2, r7
   84146:	f200 80c4 	bhi.w	842d2 <__divdi3+0x29a>
   8414a:	4641      	mov	r1, r8
   8414c:	1abf      	subs	r7, r7, r2
   8414e:	fbb7 f2f0 	udiv	r2, r7, r0
   84152:	fb00 7012 	mls	r0, r0, r2, r7
   84156:	fb0c fc02 	mul.w	ip, ip, r2
   8415a:	b2b6      	uxth	r6, r6
   8415c:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   84160:	4584      	cmp	ip, r0
   84162:	d907      	bls.n	84174 <__divdi3+0x13c>
   84164:	1940      	adds	r0, r0, r5
   84166:	f102 37ff 	add.w	r7, r2, #4294967295
   8416a:	d202      	bcs.n	84172 <__divdi3+0x13a>
   8416c:	4584      	cmp	ip, r0
   8416e:	f200 80ae 	bhi.w	842ce <__divdi3+0x296>
   84172:	463a      	mov	r2, r7
   84174:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   84178:	e7b0      	b.n	840dc <__divdi3+0xa4>
   8417a:	43e4      	mvns	r4, r4
   8417c:	4252      	negs	r2, r2
   8417e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   84182:	e762      	b.n	8404a <__divdi3+0x12>
   84184:	4240      	negs	r0, r0
   84186:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8418a:	f04f 34ff 	mov.w	r4, #4294967295
   8418e:	e759      	b.n	84044 <__divdi3+0xc>
   84190:	4095      	lsls	r5, r2
   84192:	f1c2 0920 	rsb	r9, r2, #32
   84196:	fa27 f109 	lsr.w	r1, r7, r9
   8419a:	fa26 f909 	lsr.w	r9, r6, r9
   8419e:	4097      	lsls	r7, r2
   841a0:	0c28      	lsrs	r0, r5, #16
   841a2:	fbb1 f8f0 	udiv	r8, r1, r0
   841a6:	fb00 1118 	mls	r1, r0, r8, r1
   841aa:	fa1f fc85 	uxth.w	ip, r5
   841ae:	fb0c f308 	mul.w	r3, ip, r8
   841b2:	ea49 0907 	orr.w	r9, r9, r7
   841b6:	ea4f 4719 	mov.w	r7, r9, lsr #16
   841ba:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   841be:	428b      	cmp	r3, r1
   841c0:	fa06 f602 	lsl.w	r6, r6, r2
   841c4:	d908      	bls.n	841d8 <__divdi3+0x1a0>
   841c6:	1949      	adds	r1, r1, r5
   841c8:	f108 32ff 	add.w	r2, r8, #4294967295
   841cc:	d27a      	bcs.n	842c4 <__divdi3+0x28c>
   841ce:	428b      	cmp	r3, r1
   841d0:	d978      	bls.n	842c4 <__divdi3+0x28c>
   841d2:	f1a8 0802 	sub.w	r8, r8, #2
   841d6:	4429      	add	r1, r5
   841d8:	1ac9      	subs	r1, r1, r3
   841da:	fbb1 f3f0 	udiv	r3, r1, r0
   841de:	fb00 1713 	mls	r7, r0, r3, r1
   841e2:	fb0c f203 	mul.w	r2, ip, r3
   841e6:	fa1f f989 	uxth.w	r9, r9
   841ea:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   841ee:	42ba      	cmp	r2, r7
   841f0:	d907      	bls.n	84202 <__divdi3+0x1ca>
   841f2:	197f      	adds	r7, r7, r5
   841f4:	f103 31ff 	add.w	r1, r3, #4294967295
   841f8:	d260      	bcs.n	842bc <__divdi3+0x284>
   841fa:	42ba      	cmp	r2, r7
   841fc:	d95e      	bls.n	842bc <__divdi3+0x284>
   841fe:	3b02      	subs	r3, #2
   84200:	442f      	add	r7, r5
   84202:	1abf      	subs	r7, r7, r2
   84204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   84208:	e78c      	b.n	84124 <__divdi3+0xec>
   8420a:	f1c8 0220 	rsb	r2, r8, #32
   8420e:	fa25 f102 	lsr.w	r1, r5, r2
   84212:	fa03 fc08 	lsl.w	ip, r3, r8
   84216:	fa27 f302 	lsr.w	r3, r7, r2
   8421a:	fa20 f202 	lsr.w	r2, r0, r2
   8421e:	fa07 f708 	lsl.w	r7, r7, r8
   84222:	ea41 0c0c 	orr.w	ip, r1, ip
   84226:	ea4f 491c 	mov.w	r9, ip, lsr #16
   8422a:	fbb3 f1f9 	udiv	r1, r3, r9
   8422e:	fb09 3311 	mls	r3, r9, r1, r3
   84232:	fa1f fa8c 	uxth.w	sl, ip
   84236:	fb0a fb01 	mul.w	fp, sl, r1
   8423a:	4317      	orrs	r7, r2
   8423c:	0c3a      	lsrs	r2, r7, #16
   8423e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   84242:	459b      	cmp	fp, r3
   84244:	fa05 f008 	lsl.w	r0, r5, r8
   84248:	d908      	bls.n	8425c <__divdi3+0x224>
   8424a:	eb13 030c 	adds.w	r3, r3, ip
   8424e:	f101 32ff 	add.w	r2, r1, #4294967295
   84252:	d235      	bcs.n	842c0 <__divdi3+0x288>
   84254:	459b      	cmp	fp, r3
   84256:	d933      	bls.n	842c0 <__divdi3+0x288>
   84258:	3902      	subs	r1, #2
   8425a:	4463      	add	r3, ip
   8425c:	ebcb 0303 	rsb	r3, fp, r3
   84260:	fbb3 f2f9 	udiv	r2, r3, r9
   84264:	fb09 3312 	mls	r3, r9, r2, r3
   84268:	fb0a fa02 	mul.w	sl, sl, r2
   8426c:	b2bf      	uxth	r7, r7
   8426e:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   84272:	45ba      	cmp	sl, r7
   84274:	d908      	bls.n	84288 <__divdi3+0x250>
   84276:	eb17 070c 	adds.w	r7, r7, ip
   8427a:	f102 33ff 	add.w	r3, r2, #4294967295
   8427e:	d21b      	bcs.n	842b8 <__divdi3+0x280>
   84280:	45ba      	cmp	sl, r7
   84282:	d919      	bls.n	842b8 <__divdi3+0x280>
   84284:	3a02      	subs	r2, #2
   84286:	4467      	add	r7, ip
   84288:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   8428c:	fba5 0100 	umull	r0, r1, r5, r0
   84290:	ebca 0707 	rsb	r7, sl, r7
   84294:	428f      	cmp	r7, r1
   84296:	f04f 0300 	mov.w	r3, #0
   8429a:	d30a      	bcc.n	842b2 <__divdi3+0x27a>
   8429c:	d005      	beq.n	842aa <__divdi3+0x272>
   8429e:	462a      	mov	r2, r5
   842a0:	e71c      	b.n	840dc <__divdi3+0xa4>
   842a2:	4662      	mov	r2, ip
   842a4:	e6fd      	b.n	840a2 <__divdi3+0x6a>
   842a6:	463b      	mov	r3, r7
   842a8:	e710      	b.n	840cc <__divdi3+0x94>
   842aa:	fa06 f608 	lsl.w	r6, r6, r8
   842ae:	4286      	cmp	r6, r0
   842b0:	d2f5      	bcs.n	8429e <__divdi3+0x266>
   842b2:	1e6a      	subs	r2, r5, #1
   842b4:	2300      	movs	r3, #0
   842b6:	e711      	b.n	840dc <__divdi3+0xa4>
   842b8:	461a      	mov	r2, r3
   842ba:	e7e5      	b.n	84288 <__divdi3+0x250>
   842bc:	460b      	mov	r3, r1
   842be:	e7a0      	b.n	84202 <__divdi3+0x1ca>
   842c0:	4611      	mov	r1, r2
   842c2:	e7cb      	b.n	8425c <__divdi3+0x224>
   842c4:	4690      	mov	r8, r2
   842c6:	e787      	b.n	841d8 <__divdi3+0x1a0>
   842c8:	4643      	mov	r3, r8
   842ca:	4642      	mov	r2, r8
   842cc:	e706      	b.n	840dc <__divdi3+0xa4>
   842ce:	3a02      	subs	r2, #2
   842d0:	e750      	b.n	84174 <__divdi3+0x13c>
   842d2:	3902      	subs	r1, #2
   842d4:	442f      	add	r7, r5
   842d6:	e739      	b.n	8414c <__divdi3+0x114>

000842d8 <__udivdi3>:
   842d8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   842dc:	4614      	mov	r4, r2
   842de:	4605      	mov	r5, r0
   842e0:	460e      	mov	r6, r1
   842e2:	2b00      	cmp	r3, #0
   842e4:	d143      	bne.n	8436e <__udivdi3+0x96>
   842e6:	428a      	cmp	r2, r1
   842e8:	d953      	bls.n	84392 <__udivdi3+0xba>
   842ea:	fab2 f782 	clz	r7, r2
   842ee:	b157      	cbz	r7, 84306 <__udivdi3+0x2e>
   842f0:	f1c7 0620 	rsb	r6, r7, #32
   842f4:	fa20 f606 	lsr.w	r6, r0, r6
   842f8:	fa01 f307 	lsl.w	r3, r1, r7
   842fc:	fa02 f407 	lsl.w	r4, r2, r7
   84300:	fa00 f507 	lsl.w	r5, r0, r7
   84304:	431e      	orrs	r6, r3
   84306:	0c21      	lsrs	r1, r4, #16
   84308:	fbb6 f2f1 	udiv	r2, r6, r1
   8430c:	fb01 6612 	mls	r6, r1, r2, r6
   84310:	b2a0      	uxth	r0, r4
   84312:	fb00 f302 	mul.w	r3, r0, r2
   84316:	0c2f      	lsrs	r7, r5, #16
   84318:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   8431c:	42b3      	cmp	r3, r6
   8431e:	d909      	bls.n	84334 <__udivdi3+0x5c>
   84320:	1936      	adds	r6, r6, r4
   84322:	f102 37ff 	add.w	r7, r2, #4294967295
   84326:	f080 80fd 	bcs.w	84524 <__udivdi3+0x24c>
   8432a:	42b3      	cmp	r3, r6
   8432c:	f240 80fa 	bls.w	84524 <__udivdi3+0x24c>
   84330:	3a02      	subs	r2, #2
   84332:	4426      	add	r6, r4
   84334:	1af6      	subs	r6, r6, r3
   84336:	fbb6 f3f1 	udiv	r3, r6, r1
   8433a:	fb01 6113 	mls	r1, r1, r3, r6
   8433e:	fb00 f003 	mul.w	r0, r0, r3
   84342:	b2ad      	uxth	r5, r5
   84344:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   84348:	4288      	cmp	r0, r1
   8434a:	d908      	bls.n	8435e <__udivdi3+0x86>
   8434c:	1909      	adds	r1, r1, r4
   8434e:	f103 36ff 	add.w	r6, r3, #4294967295
   84352:	f080 80e9 	bcs.w	84528 <__udivdi3+0x250>
   84356:	4288      	cmp	r0, r1
   84358:	f240 80e6 	bls.w	84528 <__udivdi3+0x250>
   8435c:	3b02      	subs	r3, #2
   8435e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   84362:	2300      	movs	r3, #0
   84364:	4610      	mov	r0, r2
   84366:	4619      	mov	r1, r3
   84368:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8436c:	4770      	bx	lr
   8436e:	428b      	cmp	r3, r1
   84370:	d84c      	bhi.n	8440c <__udivdi3+0x134>
   84372:	fab3 f683 	clz	r6, r3
   84376:	2e00      	cmp	r6, #0
   84378:	d14f      	bne.n	8441a <__udivdi3+0x142>
   8437a:	428b      	cmp	r3, r1
   8437c:	d302      	bcc.n	84384 <__udivdi3+0xac>
   8437e:	4282      	cmp	r2, r0
   84380:	f200 80dd 	bhi.w	8453e <__udivdi3+0x266>
   84384:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84388:	2300      	movs	r3, #0
   8438a:	2201      	movs	r2, #1
   8438c:	4610      	mov	r0, r2
   8438e:	4619      	mov	r1, r3
   84390:	4770      	bx	lr
   84392:	b912      	cbnz	r2, 8439a <__udivdi3+0xc2>
   84394:	2401      	movs	r4, #1
   84396:	fbb4 f4f2 	udiv	r4, r4, r2
   8439a:	fab4 f284 	clz	r2, r4
   8439e:	2a00      	cmp	r2, #0
   843a0:	f040 8082 	bne.w	844a8 <__udivdi3+0x1d0>
   843a4:	1b09      	subs	r1, r1, r4
   843a6:	0c26      	lsrs	r6, r4, #16
   843a8:	b2a7      	uxth	r7, r4
   843aa:	2301      	movs	r3, #1
   843ac:	fbb1 f0f6 	udiv	r0, r1, r6
   843b0:	fb06 1110 	mls	r1, r6, r0, r1
   843b4:	fb07 f200 	mul.w	r2, r7, r0
   843b8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   843bc:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   843c0:	428a      	cmp	r2, r1
   843c2:	d907      	bls.n	843d4 <__udivdi3+0xfc>
   843c4:	1909      	adds	r1, r1, r4
   843c6:	f100 3cff 	add.w	ip, r0, #4294967295
   843ca:	d202      	bcs.n	843d2 <__udivdi3+0xfa>
   843cc:	428a      	cmp	r2, r1
   843ce:	f200 80c8 	bhi.w	84562 <__udivdi3+0x28a>
   843d2:	4660      	mov	r0, ip
   843d4:	1a89      	subs	r1, r1, r2
   843d6:	fbb1 f2f6 	udiv	r2, r1, r6
   843da:	fb06 1112 	mls	r1, r6, r2, r1
   843de:	fb07 f702 	mul.w	r7, r7, r2
   843e2:	b2ad      	uxth	r5, r5
   843e4:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   843e8:	42af      	cmp	r7, r5
   843ea:	d908      	bls.n	843fe <__udivdi3+0x126>
   843ec:	192c      	adds	r4, r5, r4
   843ee:	f102 31ff 	add.w	r1, r2, #4294967295
   843f2:	f080 809b 	bcs.w	8452c <__udivdi3+0x254>
   843f6:	42a7      	cmp	r7, r4
   843f8:	f240 8098 	bls.w	8452c <__udivdi3+0x254>
   843fc:	3a02      	subs	r2, #2
   843fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   84402:	4610      	mov	r0, r2
   84404:	4619      	mov	r1, r3
   84406:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8440a:	4770      	bx	lr
   8440c:	2300      	movs	r3, #0
   8440e:	461a      	mov	r2, r3
   84410:	4610      	mov	r0, r2
   84412:	4619      	mov	r1, r3
   84414:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84418:	4770      	bx	lr
   8441a:	f1c6 0520 	rsb	r5, r6, #32
   8441e:	fa22 f705 	lsr.w	r7, r2, r5
   84422:	fa03 f406 	lsl.w	r4, r3, r6
   84426:	fa21 f305 	lsr.w	r3, r1, r5
   8442a:	fa01 fb06 	lsl.w	fp, r1, r6
   8442e:	fa20 f505 	lsr.w	r5, r0, r5
   84432:	433c      	orrs	r4, r7
   84434:	ea4f 4814 	mov.w	r8, r4, lsr #16
   84438:	fbb3 fcf8 	udiv	ip, r3, r8
   8443c:	fb08 331c 	mls	r3, r8, ip, r3
   84440:	fa1f f984 	uxth.w	r9, r4
   84444:	fb09 fa0c 	mul.w	sl, r9, ip
   84448:	ea45 0b0b 	orr.w	fp, r5, fp
   8444c:	ea4f 451b 	mov.w	r5, fp, lsr #16
   84450:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   84454:	459a      	cmp	sl, r3
   84456:	fa02 f206 	lsl.w	r2, r2, r6
   8445a:	d904      	bls.n	84466 <__udivdi3+0x18e>
   8445c:	191b      	adds	r3, r3, r4
   8445e:	f10c 35ff 	add.w	r5, ip, #4294967295
   84462:	d36f      	bcc.n	84544 <__udivdi3+0x26c>
   84464:	46ac      	mov	ip, r5
   84466:	ebca 0303 	rsb	r3, sl, r3
   8446a:	fbb3 f5f8 	udiv	r5, r3, r8
   8446e:	fb08 3315 	mls	r3, r8, r5, r3
   84472:	fb09 f905 	mul.w	r9, r9, r5
   84476:	fa1f fb8b 	uxth.w	fp, fp
   8447a:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   8447e:	45b9      	cmp	r9, r7
   84480:	d904      	bls.n	8448c <__udivdi3+0x1b4>
   84482:	193f      	adds	r7, r7, r4
   84484:	f105 33ff 	add.w	r3, r5, #4294967295
   84488:	d362      	bcc.n	84550 <__udivdi3+0x278>
   8448a:	461d      	mov	r5, r3
   8448c:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   84490:	fbac 2302 	umull	r2, r3, ip, r2
   84494:	ebc9 0707 	rsb	r7, r9, r7
   84498:	429f      	cmp	r7, r3
   8449a:	f04f 0500 	mov.w	r5, #0
   8449e:	d34a      	bcc.n	84536 <__udivdi3+0x25e>
   844a0:	d046      	beq.n	84530 <__udivdi3+0x258>
   844a2:	4662      	mov	r2, ip
   844a4:	462b      	mov	r3, r5
   844a6:	e75d      	b.n	84364 <__udivdi3+0x8c>
   844a8:	4094      	lsls	r4, r2
   844aa:	f1c2 0920 	rsb	r9, r2, #32
   844ae:	fa21 fc09 	lsr.w	ip, r1, r9
   844b2:	4091      	lsls	r1, r2
   844b4:	fa20 f909 	lsr.w	r9, r0, r9
   844b8:	0c26      	lsrs	r6, r4, #16
   844ba:	fbbc f8f6 	udiv	r8, ip, r6
   844be:	fb06 cc18 	mls	ip, r6, r8, ip
   844c2:	b2a7      	uxth	r7, r4
   844c4:	fb07 f308 	mul.w	r3, r7, r8
   844c8:	ea49 0901 	orr.w	r9, r9, r1
   844cc:	ea4f 4119 	mov.w	r1, r9, lsr #16
   844d0:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   844d4:	4563      	cmp	r3, ip
   844d6:	fa00 f502 	lsl.w	r5, r0, r2
   844da:	d909      	bls.n	844f0 <__udivdi3+0x218>
   844dc:	eb1c 0c04 	adds.w	ip, ip, r4
   844e0:	f108 32ff 	add.w	r2, r8, #4294967295
   844e4:	d23b      	bcs.n	8455e <__udivdi3+0x286>
   844e6:	4563      	cmp	r3, ip
   844e8:	d939      	bls.n	8455e <__udivdi3+0x286>
   844ea:	f1a8 0802 	sub.w	r8, r8, #2
   844ee:	44a4      	add	ip, r4
   844f0:	ebc3 0c0c 	rsb	ip, r3, ip
   844f4:	fbbc f3f6 	udiv	r3, ip, r6
   844f8:	fb06 c113 	mls	r1, r6, r3, ip
   844fc:	fb07 f203 	mul.w	r2, r7, r3
   84500:	fa1f f989 	uxth.w	r9, r9
   84504:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   84508:	428a      	cmp	r2, r1
   8450a:	d907      	bls.n	8451c <__udivdi3+0x244>
   8450c:	1909      	adds	r1, r1, r4
   8450e:	f103 30ff 	add.w	r0, r3, #4294967295
   84512:	d222      	bcs.n	8455a <__udivdi3+0x282>
   84514:	428a      	cmp	r2, r1
   84516:	d920      	bls.n	8455a <__udivdi3+0x282>
   84518:	3b02      	subs	r3, #2
   8451a:	4421      	add	r1, r4
   8451c:	1a89      	subs	r1, r1, r2
   8451e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   84522:	e743      	b.n	843ac <__udivdi3+0xd4>
   84524:	463a      	mov	r2, r7
   84526:	e705      	b.n	84334 <__udivdi3+0x5c>
   84528:	4633      	mov	r3, r6
   8452a:	e718      	b.n	8435e <__udivdi3+0x86>
   8452c:	460a      	mov	r2, r1
   8452e:	e766      	b.n	843fe <__udivdi3+0x126>
   84530:	40b0      	lsls	r0, r6
   84532:	4290      	cmp	r0, r2
   84534:	d2b5      	bcs.n	844a2 <__udivdi3+0x1ca>
   84536:	f10c 32ff 	add.w	r2, ip, #4294967295
   8453a:	2300      	movs	r3, #0
   8453c:	e712      	b.n	84364 <__udivdi3+0x8c>
   8453e:	4633      	mov	r3, r6
   84540:	4632      	mov	r2, r6
   84542:	e70f      	b.n	84364 <__udivdi3+0x8c>
   84544:	459a      	cmp	sl, r3
   84546:	d98d      	bls.n	84464 <__udivdi3+0x18c>
   84548:	f1ac 0c02 	sub.w	ip, ip, #2
   8454c:	4423      	add	r3, r4
   8454e:	e78a      	b.n	84466 <__udivdi3+0x18e>
   84550:	45b9      	cmp	r9, r7
   84552:	d99a      	bls.n	8448a <__udivdi3+0x1b2>
   84554:	3d02      	subs	r5, #2
   84556:	4427      	add	r7, r4
   84558:	e798      	b.n	8448c <__udivdi3+0x1b4>
   8455a:	4603      	mov	r3, r0
   8455c:	e7de      	b.n	8451c <__udivdi3+0x244>
   8455e:	4690      	mov	r8, r2
   84560:	e7c6      	b.n	844f0 <__udivdi3+0x218>
   84562:	3802      	subs	r0, #2
   84564:	4421      	add	r1, r4
   84566:	e735      	b.n	843d4 <__udivdi3+0xfc>
   84568:	20434441 	.word	0x20434441
   8456c:	31207369 	.word	0x31207369
   84570:	74696230 	.word	0x74696230
   84574:	00000000 	.word	0x00000000
   84578:	6e616843 	.word	0x6e616843
   8457c:	206c656e 	.word	0x206c656e
   84580:	69642033 	.word	0x69642033
   84584:	6c626173 	.word	0x6c626173
   84588:	00006465 	.word	0x00006465
   8458c:	206e6950 	.word	0x206e6950
   84590:	73692033 	.word	0x73692033
   84594:	73696420 	.word	0x73696420
   84598:	656c6261 	.word	0x656c6261
   8459c:	00000064 	.word	0x00000064
   845a0:	206e6950 	.word	0x206e6950
   845a4:	73692033 	.word	0x73692033
   845a8:	74756f20 	.word	0x74756f20
   845ac:	00747570 	.word	0x00747570
   845b0:	206e6950 	.word	0x206e6950
   845b4:	6f6d2033 	.word	0x6f6d2033
   845b8:	69206564 	.word	0x69206564
   845bc:	6f6e2073 	.word	0x6f6e2073
   845c0:	75702074 	.word	0x75702074
   845c4:	70756c6c 	.word	0x70756c6c
   845c8:	00000000 	.word	0x00000000
   845cc:	74736574 	.word	0x74736574
   845d0:	7365742f 	.word	0x7365742f
   845d4:	64615f74 	.word	0x64615f74
   845d8:	00632e63 	.word	0x00632e63
   845dc:	74736574 	.word	0x74736574
   845e0:	6364615f 	.word	0x6364615f
   845e4:	6232315f 	.word	0x6232315f
   845e8:	00007469 	.word	0x00007469
   845ec:	74736574 	.word	0x74736574
   845f0:	6168635f 	.word	0x6168635f
   845f4:	6c656e6e 	.word	0x6c656e6e
   845f8:	655f335f 	.word	0x655f335f
   845fc:	6c62616e 	.word	0x6c62616e
   84600:	00006465 	.word	0x00006465
   84604:	74736574 	.word	0x74736574
   84608:	6364615f 	.word	0x6364615f
   8460c:	6e69705f 	.word	0x6e69705f
   84610:	616e655f 	.word	0x616e655f
   84614:	64656c62 	.word	0x64656c62
   84618:	00000000 	.word	0x00000000
   8461c:	74736574 	.word	0x74736574
   84620:	6364615f 	.word	0x6364615f
   84624:	6e69705f 	.word	0x6e69705f
   84628:	706e695f 	.word	0x706e695f
   8462c:	00007475 	.word	0x00007475
   84630:	74736574 	.word	0x74736574
   84634:	6364615f 	.word	0x6364615f
   84638:	6e69705f 	.word	0x6e69705f
   8463c:	6c75705f 	.word	0x6c75705f
   84640:	0070756c 	.word	0x0070756c
   84644:	25203323 	.word	0x25203323
   84648:	000d0a64 	.word	0x000d0a64
   8464c:	25203423 	.word	0x25203423
   84650:	000d0a64 	.word	0x000d0a64

00084654 <UnityStrOk>:
   84654:	00004b4f                                OK..

00084658 <UnityStrSpacer>:
   84658:	0000202e                                . ..

0008465c <UnityStrWas>:
   8465c:	73615720 00000020                        Was ...

00084664 <UnityStrFail>:
   84664:	4c494146 00000000                       FAIL....

0008466c <UnityStrExpected>:
   8466c:	70784520 65746365 00002064               Expected ..

00084678 <UnityStrBreaker>:
   84678:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   84688:	2d2d2d2d 002d2d2d                       -------.

00084690 <UnityStrResultsFailures>:
   84690:	69614620 6572756c 00002073               Failures ..

0008469c <UnityStrResultsIgnored>:
   8469c:	6e674920 6465726f 00000020               Ignored ...

000846a8 <UnityStrResultsTests>:
   846a8:	73655420 00207374                        Tests .

000846b0 <UnityStrPass>:
   846b0:	53534150 00000000                       PASS....

000846b8 <_global_impure_ptr>:
   846b8:	20070010 20200043                                ... C.

000846be <blanks.6701>:
   846be:	20202020 20202020 20202020 20202020                     

000846ce <zeroes.6702>:
   846ce:	30303030 30303030 30303030 30303030     0000000000000000
   846de:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   846ee:	32313000 36353433 61393837 65646362     .0123456789abcde
   846fe:	4f500066 00584953 b5f8002e                       f.POSIX...

00084708 <_init>:
   84708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8470a:	bf00      	nop
   8470c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8470e:	bc08      	pop	{r3}
   84710:	469e      	mov	lr, r3
   84712:	4770      	bx	lr

00084714 <__init_array_start>:
   84714:	00082a75 	.word	0x00082a75

00084718 <__frame_dummy_init_array_entry>:
   84718:	0008016d                                m...

0008471c <_fini>:
   8471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8471e:	bf00      	nop
   84720:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84722:	bc08      	pop	{r3}
   84724:	469e      	mov	lr, r3
   84726:	4770      	bx	lr

00084728 <__fini_array_start>:
   84728:	00080145 	.word	0x00080145
