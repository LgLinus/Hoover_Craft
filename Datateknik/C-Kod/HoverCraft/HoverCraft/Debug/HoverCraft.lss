
HoverCraft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cf0  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000848  20070000  00081cf0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000015c  20070848  00082538  00010848  2**2
                  ALLOC
  3 .stack        00002004  200709a4  00082694  00010848  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010848  2**0
                  CONTENTS, READONLY
  5 .comment      00000071  00000000  00000000  00010871  2**0
                  CONTENTS, READONLY
  6 .debug_info   000187d9  00000000  00000000  000108e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004a8c  00000000  00000000  000290bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006f2b  00000000  00000000  0002db47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000da8  00000000  00000000  00034a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a28  00000000  00000000  0003581a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017863  00000000  00000000  00036242  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f50e  00000000  00000000  0004daa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006fe8e  00000000  00000000  0005cfb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001c94  00000000  00000000  000cce44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200729a8 	.word	0x200729a8
   80004:	00080c45 	.word	0x00080c45
   80008:	00080c41 	.word	0x00080c41
   8000c:	00080c41 	.word	0x00080c41
   80010:	00080c41 	.word	0x00080c41
   80014:	00080c41 	.word	0x00080c41
   80018:	00080c41 	.word	0x00080c41
	...
   8002c:	0008050d 	.word	0x0008050d
   80030:	00080c41 	.word	0x00080c41
   80034:	00000000 	.word	0x00000000
   80038:	00080545 	.word	0x00080545
   8003c:	00080581 	.word	0x00080581
   80040:	00080c41 	.word	0x00080c41
   80044:	00080c41 	.word	0x00080c41
   80048:	00080c41 	.word	0x00080c41
   8004c:	00080c41 	.word	0x00080c41
   80050:	00080c41 	.word	0x00080c41
   80054:	00080c41 	.word	0x00080c41
   80058:	00080c41 	.word	0x00080c41
   8005c:	00080c41 	.word	0x00080c41
   80060:	00080c41 	.word	0x00080c41
   80064:	00080c41 	.word	0x00080c41
   80068:	00000000 	.word	0x00000000
   8006c:	00080ab1 	.word	0x00080ab1
   80070:	00080ac5 	.word	0x00080ac5
   80074:	00080ad9 	.word	0x00080ad9
   80078:	00080aed 	.word	0x00080aed
	...
   80084:	00080c41 	.word	0x00080c41
   80088:	00080c41 	.word	0x00080c41
   8008c:	00080c41 	.word	0x00080c41
   80090:	00080c41 	.word	0x00080c41
   80094:	00080c41 	.word	0x00080c41
   80098:	00080c41 	.word	0x00080c41
   8009c:	00080c41 	.word	0x00080c41
   800a0:	00080c41 	.word	0x00080c41
   800a4:	00000000 	.word	0x00000000
   800a8:	00080c41 	.word	0x00080c41
   800ac:	00080c41 	.word	0x00080c41
   800b0:	00080c41 	.word	0x00080c41
   800b4:	00080c41 	.word	0x00080c41
   800b8:	00080c41 	.word	0x00080c41
   800bc:	00080c41 	.word	0x00080c41
   800c0:	00080c41 	.word	0x00080c41
   800c4:	00080c41 	.word	0x00080c41
   800c8:	00080c41 	.word	0x00080c41
   800cc:	00080c41 	.word	0x00080c41
   800d0:	00080c41 	.word	0x00080c41
   800d4:	00080c41 	.word	0x00080c41
   800d8:	00080c41 	.word	0x00080c41
   800dc:	00080c41 	.word	0x00080c41
   800e0:	00080c41 	.word	0x00080c41
   800e4:	00080c41 	.word	0x00080c41
   800e8:	00080c41 	.word	0x00080c41
   800ec:	00080c41 	.word	0x00080c41
   800f0:	00080c41 	.word	0x00080c41

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a1b      	subs	r3, r3, r0
   800fc:	2b06      	cmp	r3, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4b04      	ldr	r3, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2b00      	cmp	r3, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4798      	blx	r3
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	00081cf0 	.word	0x00081cf0
   80110:	00081cf3 	.word	0x00081cf3
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a1b      	subs	r3, r3, r0
   80120:	109b      	asrs	r3, r3, #2
   80122:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	00081cf0 	.word	0x00081cf0
   8013c:	00081cf0 	.word	0x00081cf0
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4b04      	ldr	r3, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b113      	cbz	r3, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2301      	movs	r3, #1
   8015c:	7023      	strb	r3, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070848 	.word	0x20070848
   80164:	00000000 	.word	0x00000000
   80168:	00081cf0 	.word	0x00081cf0

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6803      	ldr	r3, [r0, #0]
   8017e:	b113      	cbz	r3, 80186 <frame_dummy+0x1a>
   80180:	4b07      	ldr	r3, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b103      	cbz	r3, 80186 <frame_dummy+0x1a>
   80184:	4798      	blx	r3
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	00081cf0 	.word	0x00081cf0
   80198:	2007084c 	.word	0x2007084c
   8019c:	00081cf0 	.word	0x00081cf0
   801a0:	00000000 	.word	0x00000000

000801a4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   801a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   801a6:	b083      	sub	sp, #12
   801a8:	4604      	mov	r4, r0
   801aa:	460d      	mov	r5, r1
	uint32_t val;

#ifdef UART
	if (UART == (Uart*)p_usart) {
   801ac:	4b1f      	ldr	r3, [pc, #124]	; (8022c <usart_serial_getchar+0x88>)
   801ae:	4298      	cmp	r0, r3
   801b0:	d107      	bne.n	801c2 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
   801b2:	461f      	mov	r7, r3
   801b4:	4e1e      	ldr	r6, [pc, #120]	; (80230 <usart_serial_getchar+0x8c>)
   801b6:	4638      	mov	r0, r7
   801b8:	4629      	mov	r1, r5
   801ba:	47b0      	blx	r6
   801bc:	2800      	cmp	r0, #0
   801be:	d1fa      	bne.n	801b6 <usart_serial_getchar+0x12>
   801c0:	e019      	b.n	801f6 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   801c2:	4b1c      	ldr	r3, [pc, #112]	; (80234 <usart_serial_getchar+0x90>)
   801c4:	4298      	cmp	r0, r3
   801c6:	d109      	bne.n	801dc <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
   801c8:	461f      	mov	r7, r3
   801ca:	4e1b      	ldr	r6, [pc, #108]	; (80238 <usart_serial_getchar+0x94>)
   801cc:	4638      	mov	r0, r7
   801ce:	a901      	add	r1, sp, #4
   801d0:	47b0      	blx	r6
   801d2:	2800      	cmp	r0, #0
   801d4:	d1fa      	bne.n	801cc <usart_serial_getchar+0x28>
		*data = (uint8_t)(val & 0xFF);
   801d6:	9b01      	ldr	r3, [sp, #4]
   801d8:	702b      	strb	r3, [r5, #0]
   801da:	e019      	b.n	80210 <usart_serial_getchar+0x6c>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   801dc:	4b17      	ldr	r3, [pc, #92]	; (8023c <usart_serial_getchar+0x98>)
   801de:	4298      	cmp	r0, r3
   801e0:	d109      	bne.n	801f6 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
   801e2:	461e      	mov	r6, r3
   801e4:	4c14      	ldr	r4, [pc, #80]	; (80238 <usart_serial_getchar+0x94>)
   801e6:	4630      	mov	r0, r6
   801e8:	a901      	add	r1, sp, #4
   801ea:	47a0      	blx	r4
   801ec:	2800      	cmp	r0, #0
   801ee:	d1fa      	bne.n	801e6 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   801f0:	9b01      	ldr	r3, [sp, #4]
   801f2:	702b      	strb	r3, [r5, #0]
   801f4:	e018      	b.n	80228 <usart_serial_getchar+0x84>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   801f6:	4b12      	ldr	r3, [pc, #72]	; (80240 <usart_serial_getchar+0x9c>)
   801f8:	429c      	cmp	r4, r3
   801fa:	d109      	bne.n	80210 <usart_serial_getchar+0x6c>
		while (usart_read(p_usart, &val));
   801fc:	461e      	mov	r6, r3
   801fe:	4c0e      	ldr	r4, [pc, #56]	; (80238 <usart_serial_getchar+0x94>)
   80200:	4630      	mov	r0, r6
   80202:	a901      	add	r1, sp, #4
   80204:	47a0      	blx	r4
   80206:	2800      	cmp	r0, #0
   80208:	d1fa      	bne.n	80200 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
   8020a:	9b01      	ldr	r3, [sp, #4]
   8020c:	702b      	strb	r3, [r5, #0]
   8020e:	e00b      	b.n	80228 <usart_serial_getchar+0x84>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80210:	4b0c      	ldr	r3, [pc, #48]	; (80244 <usart_serial_getchar+0xa0>)
   80212:	429c      	cmp	r4, r3
   80214:	d108      	bne.n	80228 <usart_serial_getchar+0x84>
		while (usart_read(p_usart, &val));
   80216:	461e      	mov	r6, r3
   80218:	4c07      	ldr	r4, [pc, #28]	; (80238 <usart_serial_getchar+0x94>)
   8021a:	4630      	mov	r0, r6
   8021c:	a901      	add	r1, sp, #4
   8021e:	47a0      	blx	r4
   80220:	2800      	cmp	r0, #0
   80222:	d1fa      	bne.n	8021a <usart_serial_getchar+0x76>
		*data = (uint8_t)(val & 0xFF);
   80224:	9b01      	ldr	r3, [sp, #4]
   80226:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80228:	b003      	add	sp, #12
   8022a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8022c:	400e0800 	.word	0x400e0800
   80230:	00080485 	.word	0x00080485
   80234:	40098000 	.word	0x40098000
   80238:	000804b1 	.word	0x000804b1
   8023c:	4009c000 	.word	0x4009c000
   80240:	400a0000 	.word	0x400a0000
   80244:	400a4000 	.word	0x400a4000

00080248 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80248:	b570      	push	{r4, r5, r6, lr}
   8024a:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   8024c:	4b21      	ldr	r3, [pc, #132]	; (802d4 <usart_serial_putchar+0x8c>)
   8024e:	4298      	cmp	r0, r3
   80250:	d107      	bne.n	80262 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   80252:	461e      	mov	r6, r3
   80254:	4d20      	ldr	r5, [pc, #128]	; (802d8 <usart_serial_putchar+0x90>)
   80256:	4630      	mov	r0, r6
   80258:	4621      	mov	r1, r4
   8025a:	47a8      	blx	r5
   8025c:	2800      	cmp	r0, #0
   8025e:	d1fa      	bne.n	80256 <usart_serial_putchar+0xe>
   80260:	e02b      	b.n	802ba <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80262:	4b1e      	ldr	r3, [pc, #120]	; (802dc <usart_serial_putchar+0x94>)
   80264:	4298      	cmp	r0, r3
   80266:	d107      	bne.n	80278 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80268:	461e      	mov	r6, r3
   8026a:	4d1d      	ldr	r5, [pc, #116]	; (802e0 <usart_serial_putchar+0x98>)
   8026c:	4630      	mov	r0, r6
   8026e:	4621      	mov	r1, r4
   80270:	47a8      	blx	r5
   80272:	2800      	cmp	r0, #0
   80274:	d1fa      	bne.n	8026c <usart_serial_putchar+0x24>
   80276:	e022      	b.n	802be <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80278:	4b1a      	ldr	r3, [pc, #104]	; (802e4 <usart_serial_putchar+0x9c>)
   8027a:	4298      	cmp	r0, r3
   8027c:	d107      	bne.n	8028e <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   8027e:	461e      	mov	r6, r3
   80280:	4d17      	ldr	r5, [pc, #92]	; (802e0 <usart_serial_putchar+0x98>)
   80282:	4630      	mov	r0, r6
   80284:	4621      	mov	r1, r4
   80286:	47a8      	blx	r5
   80288:	2800      	cmp	r0, #0
   8028a:	d1fa      	bne.n	80282 <usart_serial_putchar+0x3a>
   8028c:	e019      	b.n	802c2 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8028e:	4b16      	ldr	r3, [pc, #88]	; (802e8 <usart_serial_putchar+0xa0>)
   80290:	4298      	cmp	r0, r3
   80292:	d107      	bne.n	802a4 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80294:	461e      	mov	r6, r3
   80296:	4d12      	ldr	r5, [pc, #72]	; (802e0 <usart_serial_putchar+0x98>)
   80298:	4630      	mov	r0, r6
   8029a:	4621      	mov	r1, r4
   8029c:	47a8      	blx	r5
   8029e:	2800      	cmp	r0, #0
   802a0:	d1fa      	bne.n	80298 <usart_serial_putchar+0x50>
   802a2:	e010      	b.n	802c6 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   802a4:	4b11      	ldr	r3, [pc, #68]	; (802ec <usart_serial_putchar+0xa4>)
   802a6:	4298      	cmp	r0, r3
   802a8:	d10f      	bne.n	802ca <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   802aa:	461e      	mov	r6, r3
   802ac:	4d0c      	ldr	r5, [pc, #48]	; (802e0 <usart_serial_putchar+0x98>)
   802ae:	4630      	mov	r0, r6
   802b0:	4621      	mov	r1, r4
   802b2:	47a8      	blx	r5
   802b4:	2800      	cmp	r0, #0
   802b6:	d1fa      	bne.n	802ae <usart_serial_putchar+0x66>
   802b8:	e009      	b.n	802ce <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   802ba:	2001      	movs	r0, #1
   802bc:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   802be:	2001      	movs	r0, #1
   802c0:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   802c2:	2001      	movs	r0, #1
   802c4:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   802c6:	2001      	movs	r0, #1
   802c8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   802ca:	2000      	movs	r0, #0
   802cc:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   802ce:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   802d0:	bd70      	pop	{r4, r5, r6, pc}
   802d2:	bf00      	nop
   802d4:	400e0800 	.word	0x400e0800
   802d8:	00080471 	.word	0x00080471
   802dc:	40098000 	.word	0x40098000
   802e0:	00080499 	.word	0x00080499
   802e4:	4009c000 	.word	0x4009c000
   802e8:	400a0000 	.word	0x400a0000
   802ec:	400a4000 	.word	0x400a4000

000802f0 <main>:
	
	#endif
}

int main(void)
{
   802f0:	b530      	push	{r4, r5, lr}
   802f2:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   802f4:	2008      	movs	r0, #8
   802f6:	4d1d      	ldr	r5, [pc, #116]	; (8036c <main+0x7c>)
   802f8:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   802fa:	4c1d      	ldr	r4, [pc, #116]	; (80370 <main+0x80>)
   802fc:	4b1d      	ldr	r3, [pc, #116]	; (80374 <main+0x84>)
   802fe:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80300:	4a1d      	ldr	r2, [pc, #116]	; (80378 <main+0x88>)
   80302:	4b1e      	ldr	r3, [pc, #120]	; (8037c <main+0x8c>)
   80304:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80306:	4a1e      	ldr	r2, [pc, #120]	; (80380 <main+0x90>)
   80308:	4b1e      	ldr	r3, [pc, #120]	; (80384 <main+0x94>)
   8030a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8030c:	4b1e      	ldr	r3, [pc, #120]	; (80388 <main+0x98>)
   8030e:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   80310:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80314:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   80316:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8031a:	9302      	str	r3, [sp, #8]
   8031c:	2008      	movs	r0, #8
   8031e:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80320:	4620      	mov	r0, r4
   80322:	4669      	mov	r1, sp
   80324:	4b19      	ldr	r3, [pc, #100]	; (8038c <main+0x9c>)
   80326:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80328:	4d19      	ldr	r5, [pc, #100]	; (80390 <main+0xa0>)
   8032a:	682b      	ldr	r3, [r5, #0]
   8032c:	6898      	ldr	r0, [r3, #8]
   8032e:	2100      	movs	r1, #0
   80330:	4c18      	ldr	r4, [pc, #96]	; (80394 <main+0xa4>)
   80332:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80334:	682b      	ldr	r3, [r5, #0]
   80336:	6858      	ldr	r0, [r3, #4]
   80338:	2100      	movs	r1, #0
   8033a:	47a0      	blx	r4
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   8033c:	4b16      	ldr	r3, [pc, #88]	; (80398 <main+0xa8>)
   8033e:	f44f 7280 	mov.w	r2, #256	; 0x100
   80342:	665a      	str	r2, [r3, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80344:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80346:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   8034c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8034e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   80352:	671a      	str	r2, [r3, #112]	; 0x70
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	/* Specifiera att stdout inte ska buffras */
	ioport_set_pin_mode(PIO_PA8_IDX,IOPORT_MODE_PULLUP);
	#if defined(__GNUC__)
	setbuf(stdout, NULL);
   80354:	682b      	ldr	r3, [r5, #0]
   80356:	6898      	ldr	r0, [r3, #8]
   80358:	2100      	movs	r1, #0
   8035a:	47a0      	blx	r4
}

int main(void)
{
	configure_console();
	board_init();
   8035c:	4b0f      	ldr	r3, [pc, #60]	; (8039c <main+0xac>)
   8035e:	4798      	blx	r3
	sysclk_init();
   80360:	4b0f      	ldr	r3, [pc, #60]	; (803a0 <main+0xb0>)
   80362:	4798      	blx	r3

	return 0;
   80364:	2000      	movs	r0, #0
   80366:	b005      	add	sp, #20
   80368:	bd30      	pop	{r4, r5, pc}
   8036a:	bf00      	nop
   8036c:	00080be9 	.word	0x00080be9
   80370:	400e0800 	.word	0x400e0800
   80374:	2007099c 	.word	0x2007099c
   80378:	00080249 	.word	0x00080249
   8037c:	20070998 	.word	0x20070998
   80380:	000801a5 	.word	0x000801a5
   80384:	20070994 	.word	0x20070994
   80388:	0501bd00 	.word	0x0501bd00
   8038c:	00080439 	.word	0x00080439
   80390:	20070008 	.word	0x20070008
   80394:	00080f6d 	.word	0x00080f6d
   80398:	400e0e00 	.word	0x400e0e00
   8039c:	000807c1 	.word	0x000807c1
   803a0:	0008075d 	.word	0x0008075d

000803a4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   803a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803a8:	460c      	mov	r4, r1
   803aa:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   803ac:	b960      	cbnz	r0, 803c8 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   803ae:	2a00      	cmp	r2, #0
   803b0:	dd0e      	ble.n	803d0 <_read+0x2c>
   803b2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   803b4:	4e09      	ldr	r6, [pc, #36]	; (803dc <_read+0x38>)
   803b6:	4d0a      	ldr	r5, [pc, #40]	; (803e0 <_read+0x3c>)
   803b8:	6830      	ldr	r0, [r6, #0]
   803ba:	4621      	mov	r1, r4
   803bc:	682b      	ldr	r3, [r5, #0]
   803be:	4798      	blx	r3
		ptr++;
   803c0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   803c2:	42bc      	cmp	r4, r7
   803c4:	d1f8      	bne.n	803b8 <_read+0x14>
   803c6:	e006      	b.n	803d6 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   803c8:	f04f 30ff 	mov.w	r0, #4294967295
   803cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   803d0:	2000      	movs	r0, #0
   803d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   803d6:	4640      	mov	r0, r8
	}
	return nChars;
}
   803d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   803dc:	2007099c 	.word	0x2007099c
   803e0:	20070994 	.word	0x20070994

000803e4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   803e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803e8:	460e      	mov	r6, r1
   803ea:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   803ec:	3801      	subs	r0, #1
   803ee:	2802      	cmp	r0, #2
   803f0:	d80f      	bhi.n	80412 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   803f2:	b192      	cbz	r2, 8041a <_write+0x36>
   803f4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   803f6:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80434 <_write+0x50>
   803fa:	4f0d      	ldr	r7, [pc, #52]	; (80430 <_write+0x4c>)
   803fc:	f8d8 0000 	ldr.w	r0, [r8]
   80400:	5d31      	ldrb	r1, [r6, r4]
   80402:	683b      	ldr	r3, [r7, #0]
   80404:	4798      	blx	r3
   80406:	2800      	cmp	r0, #0
   80408:	db0a      	blt.n	80420 <_write+0x3c>
			return -1;
		}
		++nChars;
   8040a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8040c:	42a5      	cmp	r5, r4
   8040e:	d1f5      	bne.n	803fc <_write+0x18>
   80410:	e00a      	b.n	80428 <_write+0x44>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80412:	f04f 30ff 	mov.w	r0, #4294967295
   80416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   8041a:	2000      	movs	r0, #0
   8041c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80420:	f04f 30ff 	mov.w	r0, #4294967295
   80424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80428:	4620      	mov	r0, r4
	}
	return nChars;
}
   8042a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8042e:	bf00      	nop
   80430:	20070998 	.word	0x20070998
   80434:	2007099c 	.word	0x2007099c

00080438 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80438:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8043a:	23ac      	movs	r3, #172	; 0xac
   8043c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8043e:	680a      	ldr	r2, [r1, #0]
   80440:	684b      	ldr	r3, [r1, #4]
   80442:	fbb2 f3f3 	udiv	r3, r2, r3
   80446:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80448:	1e5c      	subs	r4, r3, #1
   8044a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8044e:	4294      	cmp	r4, r2
   80450:	d80a      	bhi.n	80468 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80452:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80454:	688b      	ldr	r3, [r1, #8]
   80456:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80458:	f240 2302 	movw	r3, #514	; 0x202
   8045c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80460:	2350      	movs	r3, #80	; 0x50
   80462:	6003      	str	r3, [r0, #0]

	return 0;
   80464:	2000      	movs	r0, #0
   80466:	e000      	b.n	8046a <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80468:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8046a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8046e:	4770      	bx	lr

00080470 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80470:	6943      	ldr	r3, [r0, #20]
   80472:	f013 0f02 	tst.w	r3, #2
   80476:	d002      	beq.n	8047e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80478:	61c1      	str	r1, [r0, #28]
	return 0;
   8047a:	2000      	movs	r0, #0
   8047c:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   8047e:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80480:	4770      	bx	lr
   80482:	bf00      	nop

00080484 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80484:	6943      	ldr	r3, [r0, #20]
   80486:	f013 0f01 	tst.w	r3, #1
   8048a:	d003      	beq.n	80494 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8048c:	6983      	ldr	r3, [r0, #24]
   8048e:	700b      	strb	r3, [r1, #0]
	return 0;
   80490:	2000      	movs	r0, #0
   80492:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80494:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80496:	4770      	bx	lr

00080498 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80498:	6943      	ldr	r3, [r0, #20]
   8049a:	f013 0f02 	tst.w	r3, #2
   8049e:	d004      	beq.n	804aa <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   804a0:	f3c1 0108 	ubfx	r1, r1, #0, #9
   804a4:	61c1      	str	r1, [r0, #28]
	return 0;
   804a6:	2000      	movs	r0, #0
   804a8:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   804aa:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   804ac:	4770      	bx	lr
   804ae:	bf00      	nop

000804b0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   804b0:	6943      	ldr	r3, [r0, #20]
   804b2:	f013 0f01 	tst.w	r3, #1
   804b6:	d005      	beq.n	804c4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   804b8:	6983      	ldr	r3, [r0, #24]
   804ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
   804be:	600b      	str	r3, [r1, #0]

	return 0;
   804c0:	2000      	movs	r0, #0
   804c2:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   804c4:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   804c6:	4770      	bx	lr

000804c8 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   804c8:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   804ca:	685a      	ldr	r2, [r3, #4]
   804cc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   804ce:	6842      	ldr	r2, [r0, #4]
   804d0:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   804d2:	685a      	ldr	r2, [r3, #4]
   804d4:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   804d6:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   804d8:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   804da:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   804dc:	6803      	ldr	r3, [r0, #0]
   804de:	3301      	adds	r3, #1
   804e0:	6003      	str	r3, [r0, #0]
   804e2:	4770      	bx	lr

000804e4 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   804e4:	6843      	ldr	r3, [r0, #4]
   804e6:	6882      	ldr	r2, [r0, #8]
   804e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   804ea:	6883      	ldr	r3, [r0, #8]
   804ec:	6842      	ldr	r2, [r0, #4]
   804ee:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   804f0:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   804f2:	685a      	ldr	r2, [r3, #4]
   804f4:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   804f6:	bf04      	itt	eq
   804f8:	6882      	ldreq	r2, [r0, #8]
   804fa:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   804fc:	2200      	movs	r2, #0
   804fe:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80500:	681a      	ldr	r2, [r3, #0]
   80502:	3a01      	subs	r2, #1
   80504:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80506:	6818      	ldr	r0, [r3, #0]
}
   80508:	4770      	bx	lr
   8050a:	bf00      	nop

0008050c <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   8050c:	4b06      	ldr	r3, [pc, #24]	; (80528 <pxCurrentTCBConst2>)
   8050e:	6819      	ldr	r1, [r3, #0]
   80510:	6808      	ldr	r0, [r1, #0]
   80512:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80516:	f380 8809 	msr	PSP, r0
   8051a:	f04f 0000 	mov.w	r0, #0
   8051e:	f380 8811 	msr	BASEPRI, r0
   80522:	f04e 0e0d 	orr.w	lr, lr, #13
   80526:	4770      	bx	lr

00080528 <pxCurrentTCBConst2>:
   80528:	200708d8 	.word	0x200708d8

0008052c <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   8052c:	f3ef 8011 	mrs	r0, BASEPRI
   80530:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80534:	f381 8811 	msr	BASEPRI, r1
   80538:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   8053a:	2000      	movs	r0, #0

0008053c <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   8053c:	f380 8811 	msr	BASEPRI, r0
   80540:	4770      	bx	lr
   80542:	bf00      	nop

00080544 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80544:	f3ef 8009 	mrs	r0, PSP
   80548:	4b0c      	ldr	r3, [pc, #48]	; (8057c <pxCurrentTCBConst>)
   8054a:	681a      	ldr	r2, [r3, #0]
   8054c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80550:	6010      	str	r0, [r2, #0]
   80552:	e92d 4008 	stmdb	sp!, {r3, lr}
   80556:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   8055a:	f380 8811 	msr	BASEPRI, r0
   8055e:	f000 f8b5 	bl	806cc <vTaskSwitchContext>
   80562:	f04f 0000 	mov.w	r0, #0
   80566:	f380 8811 	msr	BASEPRI, r0
   8056a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8056e:	6819      	ldr	r1, [r3, #0]
   80570:	6808      	ldr	r0, [r1, #0]
   80572:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80576:	f380 8809 	msr	PSP, r0
   8057a:	4770      	bx	lr

0008057c <pxCurrentTCBConst>:
   8057c:	200708d8 	.word	0x200708d8

00080580 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80580:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80586:	4b05      	ldr	r3, [pc, #20]	; (8059c <SysTick_Handler+0x1c>)
   80588:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   8058a:	4b05      	ldr	r3, [pc, #20]	; (805a0 <SysTick_Handler+0x20>)
   8058c:	4798      	blx	r3
	{
		vTaskIncrementTick();
   8058e:	4b05      	ldr	r3, [pc, #20]	; (805a4 <SysTick_Handler+0x24>)
   80590:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80592:	2000      	movs	r0, #0
   80594:	4b04      	ldr	r3, [pc, #16]	; (805a8 <SysTick_Handler+0x28>)
   80596:	4798      	blx	r3
   80598:	bd08      	pop	{r3, pc}
   8059a:	bf00      	nop
   8059c:	e000ed04 	.word	0xe000ed04
   805a0:	0008052d 	.word	0x0008052d
   805a4:	000805ad 	.word	0x000805ad
   805a8:	0008053d 	.word	0x0008053d

000805ac <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   805ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   805b0:	4b3a      	ldr	r3, [pc, #232]	; (8069c <vTaskIncrementTick+0xf0>)
   805b2:	681b      	ldr	r3, [r3, #0]
   805b4:	2b00      	cmp	r3, #0
   805b6:	d16b      	bne.n	80690 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   805b8:	4b39      	ldr	r3, [pc, #228]	; (806a0 <vTaskIncrementTick+0xf4>)
   805ba:	681a      	ldr	r2, [r3, #0]
   805bc:	3201      	adds	r2, #1
   805be:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   805c0:	681b      	ldr	r3, [r3, #0]
   805c2:	bb03      	cbnz	r3, 80606 <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   805c4:	4b37      	ldr	r3, [pc, #220]	; (806a4 <vTaskIncrementTick+0xf8>)
   805c6:	681b      	ldr	r3, [r3, #0]
   805c8:	681b      	ldr	r3, [r3, #0]
   805ca:	b11b      	cbz	r3, 805d4 <vTaskIncrementTick+0x28>
   805cc:	4b36      	ldr	r3, [pc, #216]	; (806a8 <vTaskIncrementTick+0xfc>)
   805ce:	4798      	blx	r3
   805d0:	bf00      	nop
   805d2:	e7fd      	b.n	805d0 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   805d4:	4b33      	ldr	r3, [pc, #204]	; (806a4 <vTaskIncrementTick+0xf8>)
   805d6:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   805d8:	4a34      	ldr	r2, [pc, #208]	; (806ac <vTaskIncrementTick+0x100>)
   805da:	6810      	ldr	r0, [r2, #0]
   805dc:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   805de:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   805e0:	4a33      	ldr	r2, [pc, #204]	; (806b0 <vTaskIncrementTick+0x104>)
   805e2:	6811      	ldr	r1, [r2, #0]
   805e4:	3101      	adds	r1, #1
   805e6:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   805e8:	681b      	ldr	r3, [r3, #0]
   805ea:	681b      	ldr	r3, [r3, #0]
   805ec:	b923      	cbnz	r3, 805f8 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   805ee:	f04f 32ff 	mov.w	r2, #4294967295
   805f2:	4b30      	ldr	r3, [pc, #192]	; (806b4 <vTaskIncrementTick+0x108>)
   805f4:	601a      	str	r2, [r3, #0]
   805f6:	e006      	b.n	80606 <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   805f8:	4b2a      	ldr	r3, [pc, #168]	; (806a4 <vTaskIncrementTick+0xf8>)
   805fa:	681b      	ldr	r3, [r3, #0]
   805fc:	68db      	ldr	r3, [r3, #12]
   805fe:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   80600:	685a      	ldr	r2, [r3, #4]
   80602:	4b2c      	ldr	r3, [pc, #176]	; (806b4 <vTaskIncrementTick+0x108>)
   80604:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   80606:	4b26      	ldr	r3, [pc, #152]	; (806a0 <vTaskIncrementTick+0xf4>)
   80608:	681a      	ldr	r2, [r3, #0]
   8060a:	4b2a      	ldr	r3, [pc, #168]	; (806b4 <vTaskIncrementTick+0x108>)
   8060c:	681b      	ldr	r3, [r3, #0]
   8060e:	429a      	cmp	r2, r3
   80610:	d342      	bcc.n	80698 <vTaskIncrementTick+0xec>
   80612:	4b24      	ldr	r3, [pc, #144]	; (806a4 <vTaskIncrementTick+0xf8>)
   80614:	681b      	ldr	r3, [r3, #0]
   80616:	681b      	ldr	r3, [r3, #0]
   80618:	b14b      	cbz	r3, 8062e <vTaskIncrementTick+0x82>
   8061a:	4b22      	ldr	r3, [pc, #136]	; (806a4 <vTaskIncrementTick+0xf8>)
   8061c:	681b      	ldr	r3, [r3, #0]
   8061e:	68db      	ldr	r3, [r3, #12]
   80620:	68dc      	ldr	r4, [r3, #12]
   80622:	6863      	ldr	r3, [r4, #4]
   80624:	4a1e      	ldr	r2, [pc, #120]	; (806a0 <vTaskIncrementTick+0xf4>)
   80626:	6812      	ldr	r2, [r2, #0]
   80628:	4293      	cmp	r3, r2
   8062a:	d913      	bls.n	80654 <vTaskIncrementTick+0xa8>
   8062c:	e00e      	b.n	8064c <vTaskIncrementTick+0xa0>
   8062e:	f04f 32ff 	mov.w	r2, #4294967295
   80632:	4b20      	ldr	r3, [pc, #128]	; (806b4 <vTaskIncrementTick+0x108>)
   80634:	601a      	str	r2, [r3, #0]
   80636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8063a:	4b1a      	ldr	r3, [pc, #104]	; (806a4 <vTaskIncrementTick+0xf8>)
   8063c:	681b      	ldr	r3, [r3, #0]
   8063e:	68db      	ldr	r3, [r3, #12]
   80640:	68dc      	ldr	r4, [r3, #12]
   80642:	6863      	ldr	r3, [r4, #4]
   80644:	4a16      	ldr	r2, [pc, #88]	; (806a0 <vTaskIncrementTick+0xf4>)
   80646:	6812      	ldr	r2, [r2, #0]
   80648:	4293      	cmp	r3, r2
   8064a:	d907      	bls.n	8065c <vTaskIncrementTick+0xb0>
   8064c:	4a19      	ldr	r2, [pc, #100]	; (806b4 <vTaskIncrementTick+0x108>)
   8064e:	6013      	str	r3, [r2, #0]
   80650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80654:	4e18      	ldr	r6, [pc, #96]	; (806b8 <vTaskIncrementTick+0x10c>)
   80656:	4f19      	ldr	r7, [pc, #100]	; (806bc <vTaskIncrementTick+0x110>)
   80658:	f8df 806c 	ldr.w	r8, [pc, #108]	; 806c8 <vTaskIncrementTick+0x11c>
   8065c:	1d25      	adds	r5, r4, #4
   8065e:	4628      	mov	r0, r5
   80660:	47b0      	blx	r6
   80662:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   80664:	b113      	cbz	r3, 8066c <vTaskIncrementTick+0xc0>
   80666:	f104 0018 	add.w	r0, r4, #24
   8066a:	47b0      	blx	r6
   8066c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8066e:	683a      	ldr	r2, [r7, #0]
   80670:	4293      	cmp	r3, r2
   80672:	bf88      	it	hi
   80674:	603b      	strhi	r3, [r7, #0]
   80676:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   8067a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   8067e:	4629      	mov	r1, r5
   80680:	4b0f      	ldr	r3, [pc, #60]	; (806c0 <vTaskIncrementTick+0x114>)
   80682:	4798      	blx	r3
   80684:	4b07      	ldr	r3, [pc, #28]	; (806a4 <vTaskIncrementTick+0xf8>)
   80686:	681b      	ldr	r3, [r3, #0]
   80688:	681b      	ldr	r3, [r3, #0]
   8068a:	2b00      	cmp	r3, #0
   8068c:	d1d5      	bne.n	8063a <vTaskIncrementTick+0x8e>
   8068e:	e7ce      	b.n	8062e <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
   80690:	4b0c      	ldr	r3, [pc, #48]	; (806c4 <vTaskIncrementTick+0x118>)
   80692:	681a      	ldr	r2, [r3, #0]
   80694:	3201      	adds	r2, #1
   80696:	601a      	str	r2, [r3, #0]
   80698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8069c:	200708dc 	.word	0x200708dc
   806a0:	200708e0 	.word	0x200708e0
   806a4:	20070868 	.word	0x20070868
   806a8:	0008052d 	.word	0x0008052d
   806ac:	200708e4 	.word	0x200708e4
   806b0:	200708d4 	.word	0x200708d4
   806b4:	20070000 	.word	0x20070000
   806b8:	000804e5 	.word	0x000804e5
   806bc:	2007086c 	.word	0x2007086c
   806c0:	000804c9 	.word	0x000804c9
   806c4:	20070864 	.word	0x20070864
   806c8:	20070870 	.word	0x20070870

000806cc <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   806cc:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   806ce:	4b1d      	ldr	r3, [pc, #116]	; (80744 <vTaskSwitchContext+0x78>)
   806d0:	681b      	ldr	r3, [r3, #0]
   806d2:	b95b      	cbnz	r3, 806ec <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   806d4:	4b1c      	ldr	r3, [pc, #112]	; (80748 <vTaskSwitchContext+0x7c>)
   806d6:	681b      	ldr	r3, [r3, #0]
   806d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   806dc:	009b      	lsls	r3, r3, #2
   806de:	4a1b      	ldr	r2, [pc, #108]	; (8074c <vTaskSwitchContext+0x80>)
   806e0:	58d3      	ldr	r3, [r2, r3]
   806e2:	b9cb      	cbnz	r3, 80718 <vTaskSwitchContext+0x4c>
   806e4:	4b18      	ldr	r3, [pc, #96]	; (80748 <vTaskSwitchContext+0x7c>)
   806e6:	681b      	ldr	r3, [r3, #0]
   806e8:	b953      	cbnz	r3, 80700 <vTaskSwitchContext+0x34>
   806ea:	e005      	b.n	806f8 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   806ec:	2201      	movs	r2, #1
   806ee:	4b18      	ldr	r3, [pc, #96]	; (80750 <vTaskSwitchContext+0x84>)
   806f0:	601a      	str	r2, [r3, #0]
   806f2:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   806f4:	681a      	ldr	r2, [r3, #0]
   806f6:	b92a      	cbnz	r2, 80704 <vTaskSwitchContext+0x38>
   806f8:	4b16      	ldr	r3, [pc, #88]	; (80754 <vTaskSwitchContext+0x88>)
   806fa:	4798      	blx	r3
   806fc:	bf00      	nop
   806fe:	e7fd      	b.n	806fc <vTaskSwitchContext+0x30>
   80700:	4b11      	ldr	r3, [pc, #68]	; (80748 <vTaskSwitchContext+0x7c>)
   80702:	4912      	ldr	r1, [pc, #72]	; (8074c <vTaskSwitchContext+0x80>)
   80704:	681a      	ldr	r2, [r3, #0]
   80706:	3a01      	subs	r2, #1
   80708:	601a      	str	r2, [r3, #0]
   8070a:	681a      	ldr	r2, [r3, #0]
   8070c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80710:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   80714:	2a00      	cmp	r2, #0
   80716:	d0ed      	beq.n	806f4 <vTaskSwitchContext+0x28>
   80718:	4b0b      	ldr	r3, [pc, #44]	; (80748 <vTaskSwitchContext+0x7c>)
   8071a:	681b      	ldr	r3, [r3, #0]
   8071c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80720:	4a0a      	ldr	r2, [pc, #40]	; (8074c <vTaskSwitchContext+0x80>)
   80722:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   80726:	685a      	ldr	r2, [r3, #4]
   80728:	6852      	ldr	r2, [r2, #4]
   8072a:	605a      	str	r2, [r3, #4]
   8072c:	f103 0108 	add.w	r1, r3, #8
   80730:	428a      	cmp	r2, r1
   80732:	bf04      	itt	eq
   80734:	6852      	ldreq	r2, [r2, #4]
   80736:	605a      	streq	r2, [r3, #4]
   80738:	685b      	ldr	r3, [r3, #4]
   8073a:	68da      	ldr	r2, [r3, #12]
   8073c:	4b06      	ldr	r3, [pc, #24]	; (80758 <vTaskSwitchContext+0x8c>)
   8073e:	601a      	str	r2, [r3, #0]
   80740:	bd08      	pop	{r3, pc}
   80742:	bf00      	nop
   80744:	200708dc 	.word	0x200708dc
   80748:	2007086c 	.word	0x2007086c
   8074c:	20070870 	.word	0x20070870
   80750:	200708e8 	.word	0x200708e8
   80754:	0008052d 	.word	0x0008052d
   80758:	200708d8 	.word	0x200708d8

0008075c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8075c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8075e:	480e      	ldr	r0, [pc, #56]	; (80798 <sysclk_init+0x3c>)
   80760:	4b0e      	ldr	r3, [pc, #56]	; (8079c <sysclk_init+0x40>)
   80762:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80764:	2000      	movs	r0, #0
   80766:	213e      	movs	r1, #62	; 0x3e
   80768:	4b0d      	ldr	r3, [pc, #52]	; (807a0 <sysclk_init+0x44>)
   8076a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8076c:	4c0d      	ldr	r4, [pc, #52]	; (807a4 <sysclk_init+0x48>)
   8076e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80770:	2800      	cmp	r0, #0
   80772:	d0fc      	beq.n	8076e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80774:	4b0c      	ldr	r3, [pc, #48]	; (807a8 <sysclk_init+0x4c>)
   80776:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80778:	4a0c      	ldr	r2, [pc, #48]	; (807ac <sysclk_init+0x50>)
   8077a:	4b0d      	ldr	r3, [pc, #52]	; (807b0 <sysclk_init+0x54>)
   8077c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8077e:	4c0d      	ldr	r4, [pc, #52]	; (807b4 <sysclk_init+0x58>)
   80780:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80782:	2800      	cmp	r0, #0
   80784:	d0fc      	beq.n	80780 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80786:	2010      	movs	r0, #16
   80788:	4b0b      	ldr	r3, [pc, #44]	; (807b8 <sysclk_init+0x5c>)
   8078a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8078c:	4b0b      	ldr	r3, [pc, #44]	; (807bc <sysclk_init+0x60>)
   8078e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80790:	4801      	ldr	r0, [pc, #4]	; (80798 <sysclk_init+0x3c>)
   80792:	4b02      	ldr	r3, [pc, #8]	; (8079c <sysclk_init+0x40>)
   80794:	4798      	blx	r3
   80796:	bd10      	pop	{r4, pc}
   80798:	0501bd00 	.word	0x0501bd00
   8079c:	00080e11 	.word	0x00080e11
   807a0:	00080b65 	.word	0x00080b65
   807a4:	00080bb9 	.word	0x00080bb9
   807a8:	00080bc9 	.word	0x00080bc9
   807ac:	200d3f01 	.word	0x200d3f01
   807b0:	400e0600 	.word	0x400e0600
   807b4:	00080bd9 	.word	0x00080bd9
   807b8:	00080b01 	.word	0x00080b01
   807bc:	00080cf5 	.word	0x00080cf5

000807c0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   807c0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   807c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   807c6:	4b17      	ldr	r3, [pc, #92]	; (80824 <board_init+0x64>)
   807c8:	605a      	str	r2, [r3, #4]
   807ca:	200b      	movs	r0, #11
   807cc:	4c16      	ldr	r4, [pc, #88]	; (80828 <board_init+0x68>)
   807ce:	47a0      	blx	r4
   807d0:	200c      	movs	r0, #12
   807d2:	47a0      	blx	r4
   807d4:	200d      	movs	r0, #13
   807d6:	47a0      	blx	r4
   807d8:	200e      	movs	r0, #14
   807da:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   807dc:	203b      	movs	r0, #59	; 0x3b
   807de:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   807e2:	4c12      	ldr	r4, [pc, #72]	; (8082c <board_init+0x6c>)
   807e4:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   807e6:	2055      	movs	r0, #85	; 0x55
   807e8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   807ec:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   807ee:	2056      	movs	r0, #86	; 0x56
   807f0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   807f4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   807f6:	2068      	movs	r0, #104	; 0x68
   807f8:	490d      	ldr	r1, [pc, #52]	; (80830 <board_init+0x70>)
   807fa:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   807fc:	205c      	movs	r0, #92	; 0x5c
   807fe:	490d      	ldr	r1, [pc, #52]	; (80834 <board_init+0x74>)
   80800:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80802:	480d      	ldr	r0, [pc, #52]	; (80838 <board_init+0x78>)
   80804:	f44f 7140 	mov.w	r1, #768	; 0x300
   80808:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8080c:	4b0b      	ldr	r3, [pc, #44]	; (8083c <board_init+0x7c>)
   8080e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80810:	202b      	movs	r0, #43	; 0x2b
   80812:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80816:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80818:	202a      	movs	r0, #42	; 0x2a
   8081a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8081e:	47a0      	blx	r4
   80820:	bd10      	pop	{r4, pc}
   80822:	bf00      	nop
   80824:	400e1a50 	.word	0x400e1a50
   80828:	00080be9 	.word	0x00080be9
   8082c:	000808e5 	.word	0x000808e5
   80830:	28000079 	.word	0x28000079
   80834:	28000001 	.word	0x28000001
   80838:	400e0e00 	.word	0x400e0e00
   8083c:	000809b9 	.word	0x000809b9

00080840 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80840:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80842:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80846:	d016      	beq.n	80876 <pio_set_peripheral+0x36>
   80848:	d804      	bhi.n	80854 <pio_set_peripheral+0x14>
   8084a:	b1c1      	cbz	r1, 8087e <pio_set_peripheral+0x3e>
   8084c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80850:	d00a      	beq.n	80868 <pio_set_peripheral+0x28>
   80852:	e013      	b.n	8087c <pio_set_peripheral+0x3c>
   80854:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80858:	d011      	beq.n	8087e <pio_set_peripheral+0x3e>
   8085a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8085e:	d00e      	beq.n	8087e <pio_set_peripheral+0x3e>
   80860:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80864:	d10a      	bne.n	8087c <pio_set_peripheral+0x3c>
   80866:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80868:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8086a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8086c:	400b      	ands	r3, r1
   8086e:	ea23 0302 	bic.w	r3, r3, r2
   80872:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80874:	e002      	b.n	8087c <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80876:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80878:	4313      	orrs	r3, r2
   8087a:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8087c:	6042      	str	r2, [r0, #4]
   8087e:	4770      	bx	lr

00080880 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80880:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80882:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80886:	bf14      	ite	ne
   80888:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8088a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8088c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80890:	bf14      	ite	ne
   80892:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80894:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80896:	f012 0f02 	tst.w	r2, #2
   8089a:	d002      	beq.n	808a2 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   8089c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   808a0:	e004      	b.n	808ac <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   808a2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   808a6:	bf18      	it	ne
   808a8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   808ac:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   808ae:	6001      	str	r1, [r0, #0]
   808b0:	4770      	bx	lr
   808b2:	bf00      	nop

000808b4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   808b4:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   808b6:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   808b8:	9c01      	ldr	r4, [sp, #4]
   808ba:	b10c      	cbz	r4, 808c0 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   808bc:	6641      	str	r1, [r0, #100]	; 0x64
   808be:	e000      	b.n	808c2 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   808c0:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   808c2:	b10b      	cbz	r3, 808c8 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   808c4:	6501      	str	r1, [r0, #80]	; 0x50
   808c6:	e000      	b.n	808ca <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   808c8:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   808ca:	b10a      	cbz	r2, 808d0 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   808cc:	6301      	str	r1, [r0, #48]	; 0x30
   808ce:	e000      	b.n	808d2 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   808d0:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   808d2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   808d4:	6001      	str	r1, [r0, #0]
}
   808d6:	f85d 4b04 	ldr.w	r4, [sp], #4
   808da:	4770      	bx	lr

000808dc <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   808dc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   808de:	4770      	bx	lr

000808e0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   808e0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   808e2:	4770      	bx	lr

000808e4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   808e4:	b570      	push	{r4, r5, r6, lr}
   808e6:	b082      	sub	sp, #8
   808e8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   808ea:	0944      	lsrs	r4, r0, #5
   808ec:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   808f0:	f204 7407 	addw	r4, r4, #1799	; 0x707
   808f4:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   808f6:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   808fa:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   808fe:	d030      	beq.n	80962 <pio_configure_pin+0x7e>
   80900:	d806      	bhi.n	80910 <pio_configure_pin+0x2c>
   80902:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80906:	d00a      	beq.n	8091e <pio_configure_pin+0x3a>
   80908:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   8090c:	d018      	beq.n	80940 <pio_configure_pin+0x5c>
   8090e:	e049      	b.n	809a4 <pio_configure_pin+0xc0>
   80910:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80914:	d030      	beq.n	80978 <pio_configure_pin+0x94>
   80916:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8091a:	d02d      	beq.n	80978 <pio_configure_pin+0x94>
   8091c:	e042      	b.n	809a4 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8091e:	f000 001f 	and.w	r0, r0, #31
   80922:	2401      	movs	r4, #1
   80924:	4084      	lsls	r4, r0
   80926:	4630      	mov	r0, r6
   80928:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8092c:	4622      	mov	r2, r4
   8092e:	4b1f      	ldr	r3, [pc, #124]	; (809ac <pio_configure_pin+0xc8>)
   80930:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80932:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80936:	bf14      	ite	ne
   80938:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8093a:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8093c:	2001      	movs	r0, #1
   8093e:	e032      	b.n	809a6 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80940:	f000 001f 	and.w	r0, r0, #31
   80944:	2401      	movs	r4, #1
   80946:	4084      	lsls	r4, r0
   80948:	4630      	mov	r0, r6
   8094a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8094e:	4622      	mov	r2, r4
   80950:	4b16      	ldr	r3, [pc, #88]	; (809ac <pio_configure_pin+0xc8>)
   80952:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80954:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80958:	bf14      	ite	ne
   8095a:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8095c:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8095e:	2001      	movs	r0, #1
   80960:	e021      	b.n	809a6 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80962:	f000 011f 	and.w	r1, r0, #31
   80966:	2401      	movs	r4, #1
   80968:	4630      	mov	r0, r6
   8096a:	fa04 f101 	lsl.w	r1, r4, r1
   8096e:	462a      	mov	r2, r5
   80970:	4b0f      	ldr	r3, [pc, #60]	; (809b0 <pio_configure_pin+0xcc>)
   80972:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80974:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80976:	e016      	b.n	809a6 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80978:	f000 011f 	and.w	r1, r0, #31
   8097c:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8097e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80982:	ea05 0304 	and.w	r3, r5, r4
   80986:	9300      	str	r3, [sp, #0]
   80988:	4630      	mov	r0, r6
   8098a:	fa04 f101 	lsl.w	r1, r4, r1
   8098e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80992:	bf14      	ite	ne
   80994:	2200      	movne	r2, #0
   80996:	2201      	moveq	r2, #1
   80998:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8099c:	4d05      	ldr	r5, [pc, #20]	; (809b4 <pio_configure_pin+0xd0>)
   8099e:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   809a0:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   809a2:	e000      	b.n	809a6 <pio_configure_pin+0xc2>

	default:
		return 0;
   809a4:	2000      	movs	r0, #0
	}

	return 1;
}
   809a6:	b002      	add	sp, #8
   809a8:	bd70      	pop	{r4, r5, r6, pc}
   809aa:	bf00      	nop
   809ac:	00080841 	.word	0x00080841
   809b0:	00080881 	.word	0x00080881
   809b4:	000808b5 	.word	0x000808b5

000809b8 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   809b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   809ba:	b083      	sub	sp, #12
   809bc:	4607      	mov	r7, r0
   809be:	460e      	mov	r6, r1
   809c0:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   809c2:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   809c6:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   809ca:	d026      	beq.n	80a1a <pio_configure_pin_group+0x62>
   809cc:	d806      	bhi.n	809dc <pio_configure_pin_group+0x24>
   809ce:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   809d2:	d00a      	beq.n	809ea <pio_configure_pin_group+0x32>
   809d4:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   809d8:	d013      	beq.n	80a02 <pio_configure_pin_group+0x4a>
   809da:	e034      	b.n	80a46 <pio_configure_pin_group+0x8e>
   809dc:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   809e0:	d01f      	beq.n	80a22 <pio_configure_pin_group+0x6a>
   809e2:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   809e6:	d01c      	beq.n	80a22 <pio_configure_pin_group+0x6a>
   809e8:	e02d      	b.n	80a46 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   809ea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809ee:	4632      	mov	r2, r6
   809f0:	4b16      	ldr	r3, [pc, #88]	; (80a4c <pio_configure_pin_group+0x94>)
   809f2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   809f4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   809f8:	bf14      	ite	ne
   809fa:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   809fc:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   809fe:	2001      	movs	r0, #1
   80a00:	e022      	b.n	80a48 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80a02:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80a06:	4632      	mov	r2, r6
   80a08:	4b10      	ldr	r3, [pc, #64]	; (80a4c <pio_configure_pin_group+0x94>)
   80a0a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a0c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a10:	bf14      	ite	ne
   80a12:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a14:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80a16:	2001      	movs	r0, #1
   80a18:	e016      	b.n	80a48 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80a1a:	4b0d      	ldr	r3, [pc, #52]	; (80a50 <pio_configure_pin_group+0x98>)
   80a1c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a1e:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80a20:	e012      	b.n	80a48 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80a22:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80a26:	f005 0301 	and.w	r3, r5, #1
   80a2a:	9300      	str	r3, [sp, #0]
   80a2c:	4638      	mov	r0, r7
   80a2e:	4631      	mov	r1, r6
   80a30:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80a34:	bf14      	ite	ne
   80a36:	2200      	movne	r2, #0
   80a38:	2201      	moveq	r2, #1
   80a3a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80a3e:	4c05      	ldr	r4, [pc, #20]	; (80a54 <pio_configure_pin_group+0x9c>)
   80a40:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80a42:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80a44:	e000      	b.n	80a48 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80a46:	2000      	movs	r0, #0
	}

	return 1;
}
   80a48:	b003      	add	sp, #12
   80a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80a4c:	00080841 	.word	0x00080841
   80a50:	00080881 	.word	0x00080881
   80a54:	000808b5 	.word	0x000808b5

00080a58 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80a5c:	4604      	mov	r4, r0
   80a5e:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80a60:	4b10      	ldr	r3, [pc, #64]	; (80aa4 <pio_handler_process+0x4c>)
   80a62:	4798      	blx	r3
   80a64:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80a66:	4620      	mov	r0, r4
   80a68:	4b0f      	ldr	r3, [pc, #60]	; (80aa8 <pio_handler_process+0x50>)
   80a6a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80a6c:	4005      	ands	r5, r0
   80a6e:	d017      	beq.n	80aa0 <pio_handler_process+0x48>
   80a70:	4f0e      	ldr	r7, [pc, #56]	; (80aac <pio_handler_process+0x54>)
   80a72:	f107 040c 	add.w	r4, r7, #12
   80a76:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80a78:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80a7c:	42b3      	cmp	r3, r6
   80a7e:	d10a      	bne.n	80a96 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80a80:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80a84:	4229      	tst	r1, r5
   80a86:	d006      	beq.n	80a96 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80a88:	6823      	ldr	r3, [r4, #0]
   80a8a:	4630      	mov	r0, r6
   80a8c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80a8e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80a92:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80a96:	42bc      	cmp	r4, r7
   80a98:	d002      	beq.n	80aa0 <pio_handler_process+0x48>
   80a9a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80a9c:	2d00      	cmp	r5, #0
   80a9e:	d1eb      	bne.n	80a78 <pio_handler_process+0x20>
   80aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80aa4:	000808dd 	.word	0x000808dd
   80aa8:	000808e1 	.word	0x000808e1
   80aac:	200708ec 	.word	0x200708ec

00080ab0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80ab0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80ab2:	4802      	ldr	r0, [pc, #8]	; (80abc <PIOA_Handler+0xc>)
   80ab4:	210b      	movs	r1, #11
   80ab6:	4b02      	ldr	r3, [pc, #8]	; (80ac0 <PIOA_Handler+0x10>)
   80ab8:	4798      	blx	r3
   80aba:	bd08      	pop	{r3, pc}
   80abc:	400e0e00 	.word	0x400e0e00
   80ac0:	00080a59 	.word	0x00080a59

00080ac4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80ac4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80ac6:	4802      	ldr	r0, [pc, #8]	; (80ad0 <PIOB_Handler+0xc>)
   80ac8:	210c      	movs	r1, #12
   80aca:	4b02      	ldr	r3, [pc, #8]	; (80ad4 <PIOB_Handler+0x10>)
   80acc:	4798      	blx	r3
   80ace:	bd08      	pop	{r3, pc}
   80ad0:	400e1000 	.word	0x400e1000
   80ad4:	00080a59 	.word	0x00080a59

00080ad8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80ad8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80ada:	4802      	ldr	r0, [pc, #8]	; (80ae4 <PIOC_Handler+0xc>)
   80adc:	210d      	movs	r1, #13
   80ade:	4b02      	ldr	r3, [pc, #8]	; (80ae8 <PIOC_Handler+0x10>)
   80ae0:	4798      	blx	r3
   80ae2:	bd08      	pop	{r3, pc}
   80ae4:	400e1200 	.word	0x400e1200
   80ae8:	00080a59 	.word	0x00080a59

00080aec <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80aec:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80aee:	4802      	ldr	r0, [pc, #8]	; (80af8 <PIOD_Handler+0xc>)
   80af0:	210e      	movs	r1, #14
   80af2:	4b02      	ldr	r3, [pc, #8]	; (80afc <PIOD_Handler+0x10>)
   80af4:	4798      	blx	r3
   80af6:	bd08      	pop	{r3, pc}
   80af8:	400e1400 	.word	0x400e1400
   80afc:	00080a59 	.word	0x00080a59

00080b00 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80b00:	4b17      	ldr	r3, [pc, #92]	; (80b60 <pmc_switch_mck_to_pllack+0x60>)
   80b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80b04:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   80b08:	4310      	orrs	r0, r2
   80b0a:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80b0e:	f013 0f08 	tst.w	r3, #8
   80b12:	d109      	bne.n	80b28 <pmc_switch_mck_to_pllack+0x28>
   80b14:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b18:	4911      	ldr	r1, [pc, #68]	; (80b60 <pmc_switch_mck_to_pllack+0x60>)
   80b1a:	e001      	b.n	80b20 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80b1c:	3b01      	subs	r3, #1
   80b1e:	d019      	beq.n	80b54 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b20:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80b22:	f012 0f08 	tst.w	r2, #8
   80b26:	d0f9      	beq.n	80b1c <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80b28:	4b0d      	ldr	r3, [pc, #52]	; (80b60 <pmc_switch_mck_to_pllack+0x60>)
   80b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80b2c:	f022 0203 	bic.w	r2, r2, #3
   80b30:	f042 0202 	orr.w	r2, r2, #2
   80b34:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b36:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80b38:	f010 0008 	ands.w	r0, r0, #8
   80b3c:	d10c      	bne.n	80b58 <pmc_switch_mck_to_pllack+0x58>
   80b3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b42:	4907      	ldr	r1, [pc, #28]	; (80b60 <pmc_switch_mck_to_pllack+0x60>)
   80b44:	e001      	b.n	80b4a <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80b46:	3b01      	subs	r3, #1
   80b48:	d008      	beq.n	80b5c <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b4a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80b4c:	f012 0f08 	tst.w	r2, #8
   80b50:	d0f9      	beq.n	80b46 <pmc_switch_mck_to_pllack+0x46>
   80b52:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80b54:	2001      	movs	r0, #1
   80b56:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80b58:	2000      	movs	r0, #0
   80b5a:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80b5c:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80b5e:	4770      	bx	lr
   80b60:	400e0600 	.word	0x400e0600

00080b64 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80b64:	b138      	cbz	r0, 80b76 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80b66:	4911      	ldr	r1, [pc, #68]	; (80bac <pmc_switch_mainck_to_xtal+0x48>)
   80b68:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80b6a:	4a11      	ldr	r2, [pc, #68]	; (80bb0 <pmc_switch_mainck_to_xtal+0x4c>)
   80b6c:	401a      	ands	r2, r3
   80b6e:	4b11      	ldr	r3, [pc, #68]	; (80bb4 <pmc_switch_mainck_to_xtal+0x50>)
   80b70:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80b72:	620b      	str	r3, [r1, #32]
   80b74:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80b76:	4a0d      	ldr	r2, [pc, #52]	; (80bac <pmc_switch_mainck_to_xtal+0x48>)
   80b78:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80b7a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80b7e:	f023 0303 	bic.w	r3, r3, #3
   80b82:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80b86:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80b8a:	0209      	lsls	r1, r1, #8
   80b8c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80b8e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80b90:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80b92:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80b94:	f013 0f01 	tst.w	r3, #1
   80b98:	d0fb      	beq.n	80b92 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80b9a:	4a04      	ldr	r2, [pc, #16]	; (80bac <pmc_switch_mainck_to_xtal+0x48>)
   80b9c:	6a13      	ldr	r3, [r2, #32]
   80b9e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80ba6:	6213      	str	r3, [r2, #32]
   80ba8:	4770      	bx	lr
   80baa:	bf00      	nop
   80bac:	400e0600 	.word	0x400e0600
   80bb0:	fec8fffc 	.word	0xfec8fffc
   80bb4:	01370002 	.word	0x01370002

00080bb8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80bb8:	4b02      	ldr	r3, [pc, #8]	; (80bc4 <pmc_osc_is_ready_mainck+0xc>)
   80bba:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80bbc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80bc0:	4770      	bx	lr
   80bc2:	bf00      	nop
   80bc4:	400e0600 	.word	0x400e0600

00080bc8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80bc8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80bcc:	4b01      	ldr	r3, [pc, #4]	; (80bd4 <pmc_disable_pllack+0xc>)
   80bce:	629a      	str	r2, [r3, #40]	; 0x28
   80bd0:	4770      	bx	lr
   80bd2:	bf00      	nop
   80bd4:	400e0600 	.word	0x400e0600

00080bd8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80bd8:	4b02      	ldr	r3, [pc, #8]	; (80be4 <pmc_is_locked_pllack+0xc>)
   80bda:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80bdc:	f000 0002 	and.w	r0, r0, #2
   80be0:	4770      	bx	lr
   80be2:	bf00      	nop
   80be4:	400e0600 	.word	0x400e0600

00080be8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80be8:	282c      	cmp	r0, #44	; 0x2c
   80bea:	d820      	bhi.n	80c2e <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80bec:	281f      	cmp	r0, #31
   80bee:	d80d      	bhi.n	80c0c <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80bf0:	4b12      	ldr	r3, [pc, #72]	; (80c3c <pmc_enable_periph_clk+0x54>)
   80bf2:	699a      	ldr	r2, [r3, #24]
   80bf4:	2301      	movs	r3, #1
   80bf6:	4083      	lsls	r3, r0
   80bf8:	401a      	ands	r2, r3
   80bfa:	4293      	cmp	r3, r2
   80bfc:	d019      	beq.n	80c32 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80bfe:	2301      	movs	r3, #1
   80c00:	fa03 f000 	lsl.w	r0, r3, r0
   80c04:	4b0d      	ldr	r3, [pc, #52]	; (80c3c <pmc_enable_periph_clk+0x54>)
   80c06:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80c08:	2000      	movs	r0, #0
   80c0a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c0c:	4b0b      	ldr	r3, [pc, #44]	; (80c3c <pmc_enable_periph_clk+0x54>)
   80c0e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
   80c12:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c14:	2301      	movs	r3, #1
   80c16:	4083      	lsls	r3, r0
   80c18:	401a      	ands	r2, r3
   80c1a:	4293      	cmp	r3, r2
   80c1c:	d00b      	beq.n	80c36 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80c1e:	2301      	movs	r3, #1
   80c20:	fa03 f000 	lsl.w	r0, r3, r0
   80c24:	4b05      	ldr	r3, [pc, #20]	; (80c3c <pmc_enable_periph_clk+0x54>)
   80c26:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80c2a:	2000      	movs	r0, #0
   80c2c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80c2e:	2001      	movs	r0, #1
   80c30:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80c32:	2000      	movs	r0, #0
   80c34:	4770      	bx	lr
   80c36:	2000      	movs	r0, #0
}
   80c38:	4770      	bx	lr
   80c3a:	bf00      	nop
   80c3c:	400e0600 	.word	0x400e0600

00080c40 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80c40:	e7fe      	b.n	80c40 <Dummy_Handler>
   80c42:	bf00      	nop

00080c44 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80c44:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80c46:	4b1e      	ldr	r3, [pc, #120]	; (80cc0 <Reset_Handler+0x7c>)
   80c48:	4a1e      	ldr	r2, [pc, #120]	; (80cc4 <Reset_Handler+0x80>)
   80c4a:	429a      	cmp	r2, r3
   80c4c:	d003      	beq.n	80c56 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80c4e:	4b1e      	ldr	r3, [pc, #120]	; (80cc8 <Reset_Handler+0x84>)
   80c50:	4a1b      	ldr	r2, [pc, #108]	; (80cc0 <Reset_Handler+0x7c>)
   80c52:	429a      	cmp	r2, r3
   80c54:	d304      	bcc.n	80c60 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80c56:	4b1d      	ldr	r3, [pc, #116]	; (80ccc <Reset_Handler+0x88>)
   80c58:	4a1d      	ldr	r2, [pc, #116]	; (80cd0 <Reset_Handler+0x8c>)
   80c5a:	429a      	cmp	r2, r3
   80c5c:	d30f      	bcc.n	80c7e <Reset_Handler+0x3a>
   80c5e:	e01a      	b.n	80c96 <Reset_Handler+0x52>
   80c60:	4b1c      	ldr	r3, [pc, #112]	; (80cd4 <Reset_Handler+0x90>)
   80c62:	4c1d      	ldr	r4, [pc, #116]	; (80cd8 <Reset_Handler+0x94>)
   80c64:	1ae4      	subs	r4, r4, r3
   80c66:	f024 0403 	bic.w	r4, r4, #3
   80c6a:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80c6c:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80c6e:	4814      	ldr	r0, [pc, #80]	; (80cc0 <Reset_Handler+0x7c>)
   80c70:	4914      	ldr	r1, [pc, #80]	; (80cc4 <Reset_Handler+0x80>)
   80c72:	585a      	ldr	r2, [r3, r1]
   80c74:	501a      	str	r2, [r3, r0]
   80c76:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80c78:	42a3      	cmp	r3, r4
   80c7a:	d1fa      	bne.n	80c72 <Reset_Handler+0x2e>
   80c7c:	e7eb      	b.n	80c56 <Reset_Handler+0x12>
   80c7e:	4b17      	ldr	r3, [pc, #92]	; (80cdc <Reset_Handler+0x98>)
   80c80:	4917      	ldr	r1, [pc, #92]	; (80ce0 <Reset_Handler+0x9c>)
   80c82:	1ac9      	subs	r1, r1, r3
   80c84:	f021 0103 	bic.w	r1, r1, #3
   80c88:	1d1a      	adds	r2, r3, #4
   80c8a:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80c8c:	2200      	movs	r2, #0
   80c8e:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80c92:	428b      	cmp	r3, r1
   80c94:	d1fb      	bne.n	80c8e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80c96:	4a13      	ldr	r2, [pc, #76]	; (80ce4 <Reset_Handler+0xa0>)
   80c98:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80c9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80ca0:	4911      	ldr	r1, [pc, #68]	; (80ce8 <Reset_Handler+0xa4>)
   80ca2:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80ca4:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80ca8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80cac:	d203      	bcs.n	80cb6 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80cae:	688a      	ldr	r2, [r1, #8]
   80cb0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80cb4:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80cb6:	4b0d      	ldr	r3, [pc, #52]	; (80cec <Reset_Handler+0xa8>)
   80cb8:	4798      	blx	r3

	/* Branch to main function */
	main();
   80cba:	4b0d      	ldr	r3, [pc, #52]	; (80cf0 <Reset_Handler+0xac>)
   80cbc:	4798      	blx	r3
   80cbe:	e7fe      	b.n	80cbe <Reset_Handler+0x7a>
   80cc0:	20070000 	.word	0x20070000
   80cc4:	00081cf0 	.word	0x00081cf0
   80cc8:	20070848 	.word	0x20070848
   80ccc:	200709a4 	.word	0x200709a4
   80cd0:	20070848 	.word	0x20070848
   80cd4:	20070004 	.word	0x20070004
   80cd8:	2007084b 	.word	0x2007084b
   80cdc:	20070844 	.word	0x20070844
   80ce0:	2007099f 	.word	0x2007099f
   80ce4:	00080000 	.word	0x00080000
   80ce8:	e000ed00 	.word	0xe000ed00
   80cec:	00080f11 	.word	0x00080f11
   80cf0:	000802f1 	.word	0x000802f1

00080cf4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80cf4:	4b3e      	ldr	r3, [pc, #248]	; (80df0 <SystemCoreClockUpdate+0xfc>)
   80cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80cf8:	f003 0303 	and.w	r3, r3, #3
   80cfc:	2b03      	cmp	r3, #3
   80cfe:	d85f      	bhi.n	80dc0 <SystemCoreClockUpdate+0xcc>
   80d00:	e8df f003 	tbb	[pc, r3]
   80d04:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80d08:	4b3a      	ldr	r3, [pc, #232]	; (80df4 <SystemCoreClockUpdate+0x100>)
   80d0a:	695b      	ldr	r3, [r3, #20]
   80d0c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80d10:	bf14      	ite	ne
   80d12:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80d16:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80d1a:	4b37      	ldr	r3, [pc, #220]	; (80df8 <SystemCoreClockUpdate+0x104>)
   80d1c:	601a      	str	r2, [r3, #0]
   80d1e:	e04f      	b.n	80dc0 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80d20:	4b33      	ldr	r3, [pc, #204]	; (80df0 <SystemCoreClockUpdate+0xfc>)
   80d22:	6a1b      	ldr	r3, [r3, #32]
   80d24:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80d28:	d003      	beq.n	80d32 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80d2a:	4a34      	ldr	r2, [pc, #208]	; (80dfc <SystemCoreClockUpdate+0x108>)
   80d2c:	4b32      	ldr	r3, [pc, #200]	; (80df8 <SystemCoreClockUpdate+0x104>)
   80d2e:	601a      	str	r2, [r3, #0]
   80d30:	e046      	b.n	80dc0 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80d32:	4a33      	ldr	r2, [pc, #204]	; (80e00 <SystemCoreClockUpdate+0x10c>)
   80d34:	4b30      	ldr	r3, [pc, #192]	; (80df8 <SystemCoreClockUpdate+0x104>)
   80d36:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80d38:	4b2d      	ldr	r3, [pc, #180]	; (80df0 <SystemCoreClockUpdate+0xfc>)
   80d3a:	6a1b      	ldr	r3, [r3, #32]
   80d3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80d40:	2b10      	cmp	r3, #16
   80d42:	d002      	beq.n	80d4a <SystemCoreClockUpdate+0x56>
   80d44:	2b20      	cmp	r3, #32
   80d46:	d004      	beq.n	80d52 <SystemCoreClockUpdate+0x5e>
   80d48:	e03a      	b.n	80dc0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80d4a:	4a2e      	ldr	r2, [pc, #184]	; (80e04 <SystemCoreClockUpdate+0x110>)
   80d4c:	4b2a      	ldr	r3, [pc, #168]	; (80df8 <SystemCoreClockUpdate+0x104>)
   80d4e:	601a      	str	r2, [r3, #0]
				break;
   80d50:	e036      	b.n	80dc0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80d52:	4a2a      	ldr	r2, [pc, #168]	; (80dfc <SystemCoreClockUpdate+0x108>)
   80d54:	4b28      	ldr	r3, [pc, #160]	; (80df8 <SystemCoreClockUpdate+0x104>)
   80d56:	601a      	str	r2, [r3, #0]
				break;
   80d58:	e032      	b.n	80dc0 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80d5a:	4b25      	ldr	r3, [pc, #148]	; (80df0 <SystemCoreClockUpdate+0xfc>)
   80d5c:	6a1b      	ldr	r3, [r3, #32]
   80d5e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80d62:	d003      	beq.n	80d6c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80d64:	4a25      	ldr	r2, [pc, #148]	; (80dfc <SystemCoreClockUpdate+0x108>)
   80d66:	4b24      	ldr	r3, [pc, #144]	; (80df8 <SystemCoreClockUpdate+0x104>)
   80d68:	601a      	str	r2, [r3, #0]
   80d6a:	e012      	b.n	80d92 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80d6c:	4a24      	ldr	r2, [pc, #144]	; (80e00 <SystemCoreClockUpdate+0x10c>)
   80d6e:	4b22      	ldr	r3, [pc, #136]	; (80df8 <SystemCoreClockUpdate+0x104>)
   80d70:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80d72:	4b1f      	ldr	r3, [pc, #124]	; (80df0 <SystemCoreClockUpdate+0xfc>)
   80d74:	6a1b      	ldr	r3, [r3, #32]
   80d76:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80d7a:	2b10      	cmp	r3, #16
   80d7c:	d002      	beq.n	80d84 <SystemCoreClockUpdate+0x90>
   80d7e:	2b20      	cmp	r3, #32
   80d80:	d004      	beq.n	80d8c <SystemCoreClockUpdate+0x98>
   80d82:	e006      	b.n	80d92 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80d84:	4a1f      	ldr	r2, [pc, #124]	; (80e04 <SystemCoreClockUpdate+0x110>)
   80d86:	4b1c      	ldr	r3, [pc, #112]	; (80df8 <SystemCoreClockUpdate+0x104>)
   80d88:	601a      	str	r2, [r3, #0]
				break;
   80d8a:	e002      	b.n	80d92 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80d8c:	4a1b      	ldr	r2, [pc, #108]	; (80dfc <SystemCoreClockUpdate+0x108>)
   80d8e:	4b1a      	ldr	r3, [pc, #104]	; (80df8 <SystemCoreClockUpdate+0x104>)
   80d90:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80d92:	4b17      	ldr	r3, [pc, #92]	; (80df0 <SystemCoreClockUpdate+0xfc>)
   80d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80d96:	f003 0303 	and.w	r3, r3, #3
   80d9a:	2b02      	cmp	r3, #2
   80d9c:	d10d      	bne.n	80dba <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80d9e:	4b14      	ldr	r3, [pc, #80]	; (80df0 <SystemCoreClockUpdate+0xfc>)
   80da0:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80da2:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80da4:	4b14      	ldr	r3, [pc, #80]	; (80df8 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80da6:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80daa:	681a      	ldr	r2, [r3, #0]
   80dac:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80db0:	b2c9      	uxtb	r1, r1
   80db2:	fbb2 f2f1 	udiv	r2, r2, r1
   80db6:	601a      	str	r2, [r3, #0]
   80db8:	e002      	b.n	80dc0 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80dba:	4a13      	ldr	r2, [pc, #76]	; (80e08 <SystemCoreClockUpdate+0x114>)
   80dbc:	4b0e      	ldr	r3, [pc, #56]	; (80df8 <SystemCoreClockUpdate+0x104>)
   80dbe:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80dc0:	4b0b      	ldr	r3, [pc, #44]	; (80df0 <SystemCoreClockUpdate+0xfc>)
   80dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80dc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80dc8:	2b70      	cmp	r3, #112	; 0x70
   80dca:	d107      	bne.n	80ddc <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80dcc:	4b0a      	ldr	r3, [pc, #40]	; (80df8 <SystemCoreClockUpdate+0x104>)
   80dce:	681a      	ldr	r2, [r3, #0]
   80dd0:	490e      	ldr	r1, [pc, #56]	; (80e0c <SystemCoreClockUpdate+0x118>)
   80dd2:	fba1 0202 	umull	r0, r2, r1, r2
   80dd6:	0852      	lsrs	r2, r2, #1
   80dd8:	601a      	str	r2, [r3, #0]
   80dda:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80ddc:	4b04      	ldr	r3, [pc, #16]	; (80df0 <SystemCoreClockUpdate+0xfc>)
   80dde:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80de0:	4b05      	ldr	r3, [pc, #20]	; (80df8 <SystemCoreClockUpdate+0x104>)
   80de2:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80de6:	681a      	ldr	r2, [r3, #0]
   80de8:	40ca      	lsrs	r2, r1
   80dea:	601a      	str	r2, [r3, #0]
   80dec:	4770      	bx	lr
   80dee:	bf00      	nop
   80df0:	400e0600 	.word	0x400e0600
   80df4:	400e1a10 	.word	0x400e1a10
   80df8:	20070004 	.word	0x20070004
   80dfc:	00b71b00 	.word	0x00b71b00
   80e00:	003d0900 	.word	0x003d0900
   80e04:	007a1200 	.word	0x007a1200
   80e08:	0e4e1c00 	.word	0x0e4e1c00
   80e0c:	aaaaaaab 	.word	0xaaaaaaab

00080e10 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   80e10:	4b1b      	ldr	r3, [pc, #108]	; (80e80 <system_init_flash+0x70>)
   80e12:	4298      	cmp	r0, r3
   80e14:	d806      	bhi.n	80e24 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   80e16:	2300      	movs	r3, #0
   80e18:	4a1a      	ldr	r2, [pc, #104]	; (80e84 <system_init_flash+0x74>)
   80e1a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   80e1c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80e20:	6013      	str	r3, [r2, #0]
   80e22:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   80e24:	4b18      	ldr	r3, [pc, #96]	; (80e88 <system_init_flash+0x78>)
   80e26:	4298      	cmp	r0, r3
   80e28:	d807      	bhi.n	80e3a <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   80e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
   80e2e:	4a15      	ldr	r2, [pc, #84]	; (80e84 <system_init_flash+0x74>)
   80e30:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   80e32:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80e36:	6013      	str	r3, [r2, #0]
   80e38:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   80e3a:	4b14      	ldr	r3, [pc, #80]	; (80e8c <system_init_flash+0x7c>)
   80e3c:	4298      	cmp	r0, r3
   80e3e:	d807      	bhi.n	80e50 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   80e40:	f44f 7300 	mov.w	r3, #512	; 0x200
   80e44:	4a0f      	ldr	r2, [pc, #60]	; (80e84 <system_init_flash+0x74>)
   80e46:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   80e48:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80e4c:	6013      	str	r3, [r2, #0]
   80e4e:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   80e50:	4b0f      	ldr	r3, [pc, #60]	; (80e90 <system_init_flash+0x80>)
   80e52:	4298      	cmp	r0, r3
   80e54:	d807      	bhi.n	80e66 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   80e56:	f44f 7340 	mov.w	r3, #768	; 0x300
   80e5a:	4a0a      	ldr	r2, [pc, #40]	; (80e84 <system_init_flash+0x74>)
   80e5c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   80e5e:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80e62:	6013      	str	r3, [r2, #0]
   80e64:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   80e66:	4b0b      	ldr	r3, [pc, #44]	; (80e94 <system_init_flash+0x84>)
   80e68:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80e6a:	bf94      	ite	ls
   80e6c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   80e70:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
   80e74:	4a03      	ldr	r2, [pc, #12]	; (80e84 <system_init_flash+0x74>)
   80e76:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   80e78:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80e7c:	6013      	str	r3, [r2, #0]
   80e7e:	4770      	bx	lr
   80e80:	0121eabf 	.word	0x0121eabf
   80e84:	400e0a00 	.word	0x400e0a00
   80e88:	02faf07f 	.word	0x02faf07f
   80e8c:	03d08fff 	.word	0x03d08fff
   80e90:	04c4b3ff 	.word	0x04c4b3ff
   80e94:	055d4a7f 	.word	0x055d4a7f

00080e98 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80e98:	4b09      	ldr	r3, [pc, #36]	; (80ec0 <_sbrk+0x28>)
   80e9a:	681b      	ldr	r3, [r3, #0]
   80e9c:	b913      	cbnz	r3, 80ea4 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80e9e:	4a09      	ldr	r2, [pc, #36]	; (80ec4 <_sbrk+0x2c>)
   80ea0:	4b07      	ldr	r3, [pc, #28]	; (80ec0 <_sbrk+0x28>)
   80ea2:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80ea4:	4b06      	ldr	r3, [pc, #24]	; (80ec0 <_sbrk+0x28>)
   80ea6:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80ea8:	181a      	adds	r2, r3, r0
   80eaa:	4907      	ldr	r1, [pc, #28]	; (80ec8 <_sbrk+0x30>)
   80eac:	4291      	cmp	r1, r2
   80eae:	db04      	blt.n	80eba <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80eb0:	4610      	mov	r0, r2
   80eb2:	4a03      	ldr	r2, [pc, #12]	; (80ec0 <_sbrk+0x28>)
   80eb4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80eb6:	4618      	mov	r0, r3
   80eb8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80eba:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80ebe:	4770      	bx	lr
   80ec0:	2007095c 	.word	0x2007095c
   80ec4:	200729a8 	.word	0x200729a8
   80ec8:	20087ffc 	.word	0x20087ffc

00080ecc <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80ecc:	f04f 30ff 	mov.w	r0, #4294967295
   80ed0:	4770      	bx	lr
   80ed2:	bf00      	nop

00080ed4 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80ed4:	2000      	movs	r0, #0
   80ed6:	4770      	bx	lr

00080ed8 <atexit>:
   80ed8:	4601      	mov	r1, r0
   80eda:	2000      	movs	r0, #0
   80edc:	4602      	mov	r2, r0
   80ede:	4603      	mov	r3, r0
   80ee0:	f000 b8c0 	b.w	81064 <__register_exitproc>

00080ee4 <__libc_fini_array>:
   80ee4:	b538      	push	{r3, r4, r5, lr}
   80ee6:	4d08      	ldr	r5, [pc, #32]	; (80f08 <__libc_fini_array+0x24>)
   80ee8:	4c08      	ldr	r4, [pc, #32]	; (80f0c <__libc_fini_array+0x28>)
   80eea:	1b64      	subs	r4, r4, r5
   80eec:	10a4      	asrs	r4, r4, #2
   80eee:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   80ef2:	b124      	cbz	r4, 80efe <__libc_fini_array+0x1a>
   80ef4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   80ef8:	3c01      	subs	r4, #1
   80efa:	4798      	blx	r3
   80efc:	e7f9      	b.n	80ef2 <__libc_fini_array+0xe>
   80efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80f02:	f000 beed 	b.w	81ce0 <_fini>
   80f06:	bf00      	nop
   80f08:	00081cec 	.word	0x00081cec
   80f0c:	00081cf0 	.word	0x00081cf0

00080f10 <__libc_init_array>:
   80f10:	b570      	push	{r4, r5, r6, lr}
   80f12:	4b0e      	ldr	r3, [pc, #56]	; (80f4c <__libc_init_array+0x3c>)
   80f14:	4d0e      	ldr	r5, [pc, #56]	; (80f50 <__libc_init_array+0x40>)
   80f16:	2400      	movs	r4, #0
   80f18:	1aed      	subs	r5, r5, r3
   80f1a:	10ad      	asrs	r5, r5, #2
   80f1c:	461e      	mov	r6, r3
   80f1e:	42ac      	cmp	r4, r5
   80f20:	d004      	beq.n	80f2c <__libc_init_array+0x1c>
   80f22:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   80f26:	4790      	blx	r2
   80f28:	3401      	adds	r4, #1
   80f2a:	e7f8      	b.n	80f1e <__libc_init_array+0xe>
   80f2c:	f000 fece 	bl	81ccc <_init>
   80f30:	4d08      	ldr	r5, [pc, #32]	; (80f54 <__libc_init_array+0x44>)
   80f32:	4b09      	ldr	r3, [pc, #36]	; (80f58 <__libc_init_array+0x48>)
   80f34:	2400      	movs	r4, #0
   80f36:	1aed      	subs	r5, r5, r3
   80f38:	10ad      	asrs	r5, r5, #2
   80f3a:	461e      	mov	r6, r3
   80f3c:	42ac      	cmp	r4, r5
   80f3e:	d004      	beq.n	80f4a <__libc_init_array+0x3a>
   80f40:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   80f44:	4790      	blx	r2
   80f46:	3401      	adds	r4, #1
   80f48:	e7f8      	b.n	80f3c <__libc_init_array+0x2c>
   80f4a:	bd70      	pop	{r4, r5, r6, pc}
   80f4c:	00081cd8 	.word	0x00081cd8
   80f50:	00081cd8 	.word	0x00081cd8
   80f54:	00081ce0 	.word	0x00081ce0
   80f58:	00081cd8 	.word	0x00081cd8

00080f5c <memset>:
   80f5c:	4402      	add	r2, r0
   80f5e:	4603      	mov	r3, r0
   80f60:	4293      	cmp	r3, r2
   80f62:	d002      	beq.n	80f6a <memset+0xe>
   80f64:	f803 1b01 	strb.w	r1, [r3], #1
   80f68:	e7fa      	b.n	80f60 <memset+0x4>
   80f6a:	4770      	bx	lr

00080f6c <setbuf>:
   80f6c:	2900      	cmp	r1, #0
   80f6e:	bf0c      	ite	eq
   80f70:	2202      	moveq	r2, #2
   80f72:	2200      	movne	r2, #0
   80f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80f78:	f000 b800 	b.w	80f7c <setvbuf>

00080f7c <setvbuf>:
   80f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80f80:	461d      	mov	r5, r3
   80f82:	4b36      	ldr	r3, [pc, #216]	; (8105c <setvbuf+0xe0>)
   80f84:	4604      	mov	r4, r0
   80f86:	681f      	ldr	r7, [r3, #0]
   80f88:	460e      	mov	r6, r1
   80f8a:	4690      	mov	r8, r2
   80f8c:	b127      	cbz	r7, 80f98 <setvbuf+0x1c>
   80f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   80f90:	b913      	cbnz	r3, 80f98 <setvbuf+0x1c>
   80f92:	4638      	mov	r0, r7
   80f94:	f000 f990 	bl	812b8 <__sinit>
   80f98:	f1b8 0f02 	cmp.w	r8, #2
   80f9c:	d859      	bhi.n	81052 <setvbuf+0xd6>
   80f9e:	2d00      	cmp	r5, #0
   80fa0:	db57      	blt.n	81052 <setvbuf+0xd6>
   80fa2:	4638      	mov	r0, r7
   80fa4:	4621      	mov	r1, r4
   80fa6:	f000 f93e 	bl	81226 <_fflush_r>
   80faa:	2300      	movs	r3, #0
   80fac:	6063      	str	r3, [r4, #4]
   80fae:	61a3      	str	r3, [r4, #24]
   80fb0:	89a3      	ldrh	r3, [r4, #12]
   80fb2:	061b      	lsls	r3, r3, #24
   80fb4:	d503      	bpl.n	80fbe <setvbuf+0x42>
   80fb6:	4638      	mov	r0, r7
   80fb8:	6921      	ldr	r1, [r4, #16]
   80fba:	f000 fa95 	bl	814e8 <_free_r>
   80fbe:	89a3      	ldrh	r3, [r4, #12]
   80fc0:	f1b8 0f02 	cmp.w	r8, #2
   80fc4:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   80fc8:	81a3      	strh	r3, [r4, #12]
   80fca:	d012      	beq.n	80ff2 <setvbuf+0x76>
   80fcc:	bb36      	cbnz	r6, 8101c <setvbuf+0xa0>
   80fce:	2d00      	cmp	r5, #0
   80fd0:	bf08      	it	eq
   80fd2:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   80fd6:	4628      	mov	r0, r5
   80fd8:	f000 fb78 	bl	816cc <malloc>
   80fdc:	4606      	mov	r6, r0
   80fde:	b9c8      	cbnz	r0, 81014 <setvbuf+0x98>
   80fe0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   80fe4:	f000 fb72 	bl	816cc <malloc>
   80fe8:	4606      	mov	r6, r0
   80fea:	b988      	cbnz	r0, 81010 <setvbuf+0x94>
   80fec:	f04f 30ff 	mov.w	r0, #4294967295
   80ff0:	e000      	b.n	80ff4 <setvbuf+0x78>
   80ff2:	2000      	movs	r0, #0
   80ff4:	89a3      	ldrh	r3, [r4, #12]
   80ff6:	f043 0302 	orr.w	r3, r3, #2
   80ffa:	81a3      	strh	r3, [r4, #12]
   80ffc:	2300      	movs	r3, #0
   80ffe:	60a3      	str	r3, [r4, #8]
   81000:	f104 0343 	add.w	r3, r4, #67	; 0x43
   81004:	6023      	str	r3, [r4, #0]
   81006:	6123      	str	r3, [r4, #16]
   81008:	2301      	movs	r3, #1
   8100a:	6163      	str	r3, [r4, #20]
   8100c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81010:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81014:	89a3      	ldrh	r3, [r4, #12]
   81016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8101a:	81a3      	strh	r3, [r4, #12]
   8101c:	f1b8 0f01 	cmp.w	r8, #1
   81020:	d105      	bne.n	8102e <setvbuf+0xb2>
   81022:	89a3      	ldrh	r3, [r4, #12]
   81024:	f043 0301 	orr.w	r3, r3, #1
   81028:	81a3      	strh	r3, [r4, #12]
   8102a:	426b      	negs	r3, r5
   8102c:	61a3      	str	r3, [r4, #24]
   8102e:	4b0c      	ldr	r3, [pc, #48]	; (81060 <setvbuf+0xe4>)
   81030:	63fb      	str	r3, [r7, #60]	; 0x3c
   81032:	89a3      	ldrh	r3, [r4, #12]
   81034:	6026      	str	r6, [r4, #0]
   81036:	f003 0008 	and.w	r0, r3, #8
   8103a:	b280      	uxth	r0, r0
   8103c:	6126      	str	r6, [r4, #16]
   8103e:	6165      	str	r5, [r4, #20]
   81040:	b148      	cbz	r0, 81056 <setvbuf+0xda>
   81042:	f013 0f03 	tst.w	r3, #3
   81046:	bf18      	it	ne
   81048:	2500      	movne	r5, #0
   8104a:	60a5      	str	r5, [r4, #8]
   8104c:	2000      	movs	r0, #0
   8104e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81052:	f04f 30ff 	mov.w	r0, #4294967295
   81056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8105a:	bf00      	nop
   8105c:	20070008 	.word	0x20070008
   81060:	00081275 	.word	0x00081275

00081064 <__register_exitproc>:
   81064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81068:	4698      	mov	r8, r3
   8106a:	4b22      	ldr	r3, [pc, #136]	; (810f4 <__register_exitproc+0x90>)
   8106c:	4606      	mov	r6, r0
   8106e:	681c      	ldr	r4, [r3, #0]
   81070:	460f      	mov	r7, r1
   81072:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   81076:	4691      	mov	r9, r2
   81078:	b918      	cbnz	r0, 81082 <__register_exitproc+0x1e>
   8107a:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   8107e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   81082:	6843      	ldr	r3, [r0, #4]
   81084:	2b1f      	cmp	r3, #31
   81086:	dd16      	ble.n	810b6 <__register_exitproc+0x52>
   81088:	4b1b      	ldr	r3, [pc, #108]	; (810f8 <__register_exitproc+0x94>)
   8108a:	b91b      	cbnz	r3, 81094 <__register_exitproc+0x30>
   8108c:	f04f 30ff 	mov.w	r0, #4294967295
   81090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81094:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81098:	f000 fb18 	bl	816cc <malloc>
   8109c:	2800      	cmp	r0, #0
   8109e:	d0f5      	beq.n	8108c <__register_exitproc+0x28>
   810a0:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   810a4:	2500      	movs	r5, #0
   810a6:	6045      	str	r5, [r0, #4]
   810a8:	6001      	str	r1, [r0, #0]
   810aa:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   810ae:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   810b2:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   810b6:	6844      	ldr	r4, [r0, #4]
   810b8:	b1a6      	cbz	r6, 810e4 <__register_exitproc+0x80>
   810ba:	2201      	movs	r2, #1
   810bc:	40a2      	lsls	r2, r4
   810be:	eb00 0584 	add.w	r5, r0, r4, lsl #2
   810c2:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
   810c6:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   810ca:	2e02      	cmp	r6, #2
   810cc:	ea41 0102 	orr.w	r1, r1, r2
   810d0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   810d4:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
   810d8:	d104      	bne.n	810e4 <__register_exitproc+0x80>
   810da:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   810de:	431a      	orrs	r2, r3
   810e0:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   810e4:	1c63      	adds	r3, r4, #1
   810e6:	3402      	adds	r4, #2
   810e8:	6043      	str	r3, [r0, #4]
   810ea:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
   810ee:	2000      	movs	r0, #0
   810f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   810f4:	00081cc4 	.word	0x00081cc4
   810f8:	000816cd 	.word	0x000816cd

000810fc <register_fini>:
   810fc:	4b02      	ldr	r3, [pc, #8]	; (81108 <register_fini+0xc>)
   810fe:	b113      	cbz	r3, 81106 <register_fini+0xa>
   81100:	4802      	ldr	r0, [pc, #8]	; (8110c <register_fini+0x10>)
   81102:	f7ff bee9 	b.w	80ed8 <atexit>
   81106:	4770      	bx	lr
   81108:	00000000 	.word	0x00000000
   8110c:	00080ee5 	.word	0x00080ee5

00081110 <__sflush_r>:
   81110:	898a      	ldrh	r2, [r1, #12]
   81112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81116:	b293      	uxth	r3, r2
   81118:	4605      	mov	r5, r0
   8111a:	0718      	lsls	r0, r3, #28
   8111c:	460c      	mov	r4, r1
   8111e:	d45e      	bmi.n	811de <__sflush_r+0xce>
   81120:	684b      	ldr	r3, [r1, #4]
   81122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   81126:	2b00      	cmp	r3, #0
   81128:	818a      	strh	r2, [r1, #12]
   8112a:	dc02      	bgt.n	81132 <__sflush_r+0x22>
   8112c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8112e:	2b00      	cmp	r3, #0
   81130:	dd18      	ble.n	81164 <__sflush_r+0x54>
   81132:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   81134:	b1b6      	cbz	r6, 81164 <__sflush_r+0x54>
   81136:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   8113a:	2300      	movs	r3, #0
   8113c:	b292      	uxth	r2, r2
   8113e:	682f      	ldr	r7, [r5, #0]
   81140:	602b      	str	r3, [r5, #0]
   81142:	b10a      	cbz	r2, 81148 <__sflush_r+0x38>
   81144:	6d22      	ldr	r2, [r4, #80]	; 0x50
   81146:	e010      	b.n	8116a <__sflush_r+0x5a>
   81148:	69e1      	ldr	r1, [r4, #28]
   8114a:	4628      	mov	r0, r5
   8114c:	2301      	movs	r3, #1
   8114e:	47b0      	blx	r6
   81150:	1c41      	adds	r1, r0, #1
   81152:	4602      	mov	r2, r0
   81154:	d109      	bne.n	8116a <__sflush_r+0x5a>
   81156:	682b      	ldr	r3, [r5, #0]
   81158:	b13b      	cbz	r3, 8116a <__sflush_r+0x5a>
   8115a:	2b1d      	cmp	r3, #29
   8115c:	d001      	beq.n	81162 <__sflush_r+0x52>
   8115e:	2b16      	cmp	r3, #22
   81160:	d14a      	bne.n	811f8 <__sflush_r+0xe8>
   81162:	602f      	str	r7, [r5, #0]
   81164:	2000      	movs	r0, #0
   81166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8116a:	89a3      	ldrh	r3, [r4, #12]
   8116c:	075b      	lsls	r3, r3, #29
   8116e:	d505      	bpl.n	8117c <__sflush_r+0x6c>
   81170:	6863      	ldr	r3, [r4, #4]
   81172:	1ad2      	subs	r2, r2, r3
   81174:	6b23      	ldr	r3, [r4, #48]	; 0x30
   81176:	b10b      	cbz	r3, 8117c <__sflush_r+0x6c>
   81178:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8117a:	1ad2      	subs	r2, r2, r3
   8117c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   8117e:	4628      	mov	r0, r5
   81180:	69e1      	ldr	r1, [r4, #28]
   81182:	2300      	movs	r3, #0
   81184:	47b0      	blx	r6
   81186:	1c46      	adds	r6, r0, #1
   81188:	89a2      	ldrh	r2, [r4, #12]
   8118a:	d105      	bne.n	81198 <__sflush_r+0x88>
   8118c:	682b      	ldr	r3, [r5, #0]
   8118e:	b11b      	cbz	r3, 81198 <__sflush_r+0x88>
   81190:	2b1d      	cmp	r3, #29
   81192:	d001      	beq.n	81198 <__sflush_r+0x88>
   81194:	2b16      	cmp	r3, #22
   81196:	d11d      	bne.n	811d4 <__sflush_r+0xc4>
   81198:	2300      	movs	r3, #0
   8119a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8119e:	b292      	uxth	r2, r2
   811a0:	6063      	str	r3, [r4, #4]
   811a2:	6923      	ldr	r3, [r4, #16]
   811a4:	04d1      	lsls	r1, r2, #19
   811a6:	81a2      	strh	r2, [r4, #12]
   811a8:	6023      	str	r3, [r4, #0]
   811aa:	d504      	bpl.n	811b6 <__sflush_r+0xa6>
   811ac:	1c42      	adds	r2, r0, #1
   811ae:	d101      	bne.n	811b4 <__sflush_r+0xa4>
   811b0:	682b      	ldr	r3, [r5, #0]
   811b2:	b903      	cbnz	r3, 811b6 <__sflush_r+0xa6>
   811b4:	6520      	str	r0, [r4, #80]	; 0x50
   811b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   811b8:	602f      	str	r7, [r5, #0]
   811ba:	2900      	cmp	r1, #0
   811bc:	d0d2      	beq.n	81164 <__sflush_r+0x54>
   811be:	f104 0340 	add.w	r3, r4, #64	; 0x40
   811c2:	4299      	cmp	r1, r3
   811c4:	d002      	beq.n	811cc <__sflush_r+0xbc>
   811c6:	4628      	mov	r0, r5
   811c8:	f000 f98e 	bl	814e8 <_free_r>
   811cc:	2000      	movs	r0, #0
   811ce:	6320      	str	r0, [r4, #48]	; 0x30
   811d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   811d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   811d8:	81a2      	strh	r2, [r4, #12]
   811da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   811de:	690e      	ldr	r6, [r1, #16]
   811e0:	2e00      	cmp	r6, #0
   811e2:	d0bf      	beq.n	81164 <__sflush_r+0x54>
   811e4:	079b      	lsls	r3, r3, #30
   811e6:	680a      	ldr	r2, [r1, #0]
   811e8:	bf0c      	ite	eq
   811ea:	694b      	ldreq	r3, [r1, #20]
   811ec:	2300      	movne	r3, #0
   811ee:	ebc6 0802 	rsb	r8, r6, r2
   811f2:	600e      	str	r6, [r1, #0]
   811f4:	608b      	str	r3, [r1, #8]
   811f6:	e012      	b.n	8121e <__sflush_r+0x10e>
   811f8:	89a3      	ldrh	r3, [r4, #12]
   811fa:	f04f 30ff 	mov.w	r0, #4294967295
   811fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81202:	81a3      	strh	r3, [r4, #12]
   81204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81208:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8120a:	4628      	mov	r0, r5
   8120c:	69e1      	ldr	r1, [r4, #28]
   8120e:	4632      	mov	r2, r6
   81210:	4643      	mov	r3, r8
   81212:	47b8      	blx	r7
   81214:	2800      	cmp	r0, #0
   81216:	ddef      	ble.n	811f8 <__sflush_r+0xe8>
   81218:	4406      	add	r6, r0
   8121a:	ebc0 0808 	rsb	r8, r0, r8
   8121e:	f1b8 0f00 	cmp.w	r8, #0
   81222:	dcf1      	bgt.n	81208 <__sflush_r+0xf8>
   81224:	e79e      	b.n	81164 <__sflush_r+0x54>

00081226 <_fflush_r>:
   81226:	b538      	push	{r3, r4, r5, lr}
   81228:	460c      	mov	r4, r1
   8122a:	4605      	mov	r5, r0
   8122c:	b118      	cbz	r0, 81236 <_fflush_r+0x10>
   8122e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81230:	b90b      	cbnz	r3, 81236 <_fflush_r+0x10>
   81232:	f000 f841 	bl	812b8 <__sinit>
   81236:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8123a:	b128      	cbz	r0, 81248 <_fflush_r+0x22>
   8123c:	4628      	mov	r0, r5
   8123e:	4621      	mov	r1, r4
   81240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81244:	f7ff bf64 	b.w	81110 <__sflush_r>
   81248:	bd38      	pop	{r3, r4, r5, pc}

0008124a <fflush>:
   8124a:	4601      	mov	r1, r0
   8124c:	b920      	cbnz	r0, 81258 <fflush+0xe>
   8124e:	4b04      	ldr	r3, [pc, #16]	; (81260 <fflush+0x16>)
   81250:	4904      	ldr	r1, [pc, #16]	; (81264 <fflush+0x1a>)
   81252:	6818      	ldr	r0, [r3, #0]
   81254:	f000 ba1c 	b.w	81690 <_fwalk_reent>
   81258:	4b03      	ldr	r3, [pc, #12]	; (81268 <fflush+0x1e>)
   8125a:	6818      	ldr	r0, [r3, #0]
   8125c:	f7ff bfe3 	b.w	81226 <_fflush_r>
   81260:	00081cc4 	.word	0x00081cc4
   81264:	00081227 	.word	0x00081227
   81268:	20070008 	.word	0x20070008

0008126c <__fp_lock>:
   8126c:	2000      	movs	r0, #0
   8126e:	4770      	bx	lr

00081270 <__fp_unlock>:
   81270:	2000      	movs	r0, #0
   81272:	4770      	bx	lr

00081274 <_cleanup_r>:
   81274:	4901      	ldr	r1, [pc, #4]	; (8127c <_cleanup_r+0x8>)
   81276:	f000 b9ef 	b.w	81658 <_fwalk>
   8127a:	bf00      	nop
   8127c:	00081c6d 	.word	0x00081c6d

00081280 <__sfmoreglue>:
   81280:	b570      	push	{r4, r5, r6, lr}
   81282:	1e4b      	subs	r3, r1, #1
   81284:	2568      	movs	r5, #104	; 0x68
   81286:	435d      	muls	r5, r3
   81288:	460e      	mov	r6, r1
   8128a:	f105 0174 	add.w	r1, r5, #116	; 0x74
   8128e:	f000 fa2d 	bl	816ec <_malloc_r>
   81292:	4604      	mov	r4, r0
   81294:	b140      	cbz	r0, 812a8 <__sfmoreglue+0x28>
   81296:	2100      	movs	r1, #0
   81298:	e880 0042 	stmia.w	r0, {r1, r6}
   8129c:	300c      	adds	r0, #12
   8129e:	60a0      	str	r0, [r4, #8]
   812a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
   812a4:	f7ff fe5a 	bl	80f5c <memset>
   812a8:	4620      	mov	r0, r4
   812aa:	bd70      	pop	{r4, r5, r6, pc}

000812ac <_cleanup>:
   812ac:	4b01      	ldr	r3, [pc, #4]	; (812b4 <_cleanup+0x8>)
   812ae:	6818      	ldr	r0, [r3, #0]
   812b0:	f7ff bfe0 	b.w	81274 <_cleanup_r>
   812b4:	00081cc4 	.word	0x00081cc4

000812b8 <__sinit>:
   812b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   812bc:	6b84      	ldr	r4, [r0, #56]	; 0x38
   812be:	4606      	mov	r6, r0
   812c0:	2c00      	cmp	r4, #0
   812c2:	d162      	bne.n	8138a <__sinit+0xd2>
   812c4:	4b32      	ldr	r3, [pc, #200]	; (81390 <__sinit+0xd8>)
   812c6:	6845      	ldr	r5, [r0, #4]
   812c8:	63c3      	str	r3, [r0, #60]	; 0x3c
   812ca:	2303      	movs	r3, #3
   812cc:	f8c0 32e4 	str.w	r3, [r0, #740]	; 0x2e4
   812d0:	f500 733b 	add.w	r3, r0, #748	; 0x2ec
   812d4:	f8c0 32e8 	str.w	r3, [r0, #744]	; 0x2e8
   812d8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 81398 <__sinit+0xe0>
   812dc:	2304      	movs	r3, #4
   812de:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8139c <__sinit+0xe4>
   812e2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 813a0 <__sinit+0xe8>
   812e6:	4f2b      	ldr	r7, [pc, #172]	; (81394 <__sinit+0xdc>)
   812e8:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
   812ec:	4621      	mov	r1, r4
   812ee:	81ab      	strh	r3, [r5, #12]
   812f0:	602c      	str	r4, [r5, #0]
   812f2:	606c      	str	r4, [r5, #4]
   812f4:	60ac      	str	r4, [r5, #8]
   812f6:	666c      	str	r4, [r5, #100]	; 0x64
   812f8:	81ec      	strh	r4, [r5, #14]
   812fa:	612c      	str	r4, [r5, #16]
   812fc:	616c      	str	r4, [r5, #20]
   812fe:	61ac      	str	r4, [r5, #24]
   81300:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   81304:	2208      	movs	r2, #8
   81306:	f7ff fe29 	bl	80f5c <memset>
   8130a:	61ed      	str	r5, [r5, #28]
   8130c:	f8c5 a020 	str.w	sl, [r5, #32]
   81310:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   81314:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   81318:	62ef      	str	r7, [r5, #44]	; 0x2c
   8131a:	68b5      	ldr	r5, [r6, #8]
   8131c:	2309      	movs	r3, #9
   8131e:	f04f 0b01 	mov.w	fp, #1
   81322:	81ab      	strh	r3, [r5, #12]
   81324:	602c      	str	r4, [r5, #0]
   81326:	606c      	str	r4, [r5, #4]
   81328:	60ac      	str	r4, [r5, #8]
   8132a:	666c      	str	r4, [r5, #100]	; 0x64
   8132c:	f8a5 b00e 	strh.w	fp, [r5, #14]
   81330:	612c      	str	r4, [r5, #16]
   81332:	616c      	str	r4, [r5, #20]
   81334:	61ac      	str	r4, [r5, #24]
   81336:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8133a:	4621      	mov	r1, r4
   8133c:	2208      	movs	r2, #8
   8133e:	f7ff fe0d 	bl	80f5c <memset>
   81342:	61ed      	str	r5, [r5, #28]
   81344:	f8c5 a020 	str.w	sl, [r5, #32]
   81348:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   8134c:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   81350:	62ef      	str	r7, [r5, #44]	; 0x2c
   81352:	68f5      	ldr	r5, [r6, #12]
   81354:	2312      	movs	r3, #18
   81356:	81ab      	strh	r3, [r5, #12]
   81358:	2302      	movs	r3, #2
   8135a:	602c      	str	r4, [r5, #0]
   8135c:	606c      	str	r4, [r5, #4]
   8135e:	60ac      	str	r4, [r5, #8]
   81360:	666c      	str	r4, [r5, #100]	; 0x64
   81362:	81eb      	strh	r3, [r5, #14]
   81364:	612c      	str	r4, [r5, #16]
   81366:	616c      	str	r4, [r5, #20]
   81368:	61ac      	str	r4, [r5, #24]
   8136a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8136e:	4621      	mov	r1, r4
   81370:	2208      	movs	r2, #8
   81372:	f7ff fdf3 	bl	80f5c <memset>
   81376:	61ed      	str	r5, [r5, #28]
   81378:	f8c5 a020 	str.w	sl, [r5, #32]
   8137c:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   81380:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   81384:	62ef      	str	r7, [r5, #44]	; 0x2c
   81386:	f8c6 b038 	str.w	fp, [r6, #56]	; 0x38
   8138a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8138e:	bf00      	nop
   81390:	00081275 	.word	0x00081275
   81394:	00081ba3 	.word	0x00081ba3
   81398:	00081b21 	.word	0x00081b21
   8139c:	00081b47 	.word	0x00081b47
   813a0:	00081b7f 	.word	0x00081b7f

000813a4 <__sfp>:
   813a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   813a6:	4b1c      	ldr	r3, [pc, #112]	; (81418 <__sfp+0x74>)
   813a8:	4607      	mov	r7, r0
   813aa:	681e      	ldr	r6, [r3, #0]
   813ac:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   813ae:	b913      	cbnz	r3, 813b6 <__sfp+0x12>
   813b0:	4630      	mov	r0, r6
   813b2:	f7ff ff81 	bl	812b8 <__sinit>
   813b6:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
   813ba:	68b4      	ldr	r4, [r6, #8]
   813bc:	6873      	ldr	r3, [r6, #4]
   813be:	3b01      	subs	r3, #1
   813c0:	d404      	bmi.n	813cc <__sfp+0x28>
   813c2:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   813c6:	b175      	cbz	r5, 813e6 <__sfp+0x42>
   813c8:	3468      	adds	r4, #104	; 0x68
   813ca:	e7f8      	b.n	813be <__sfp+0x1a>
   813cc:	6833      	ldr	r3, [r6, #0]
   813ce:	b92b      	cbnz	r3, 813dc <__sfp+0x38>
   813d0:	4638      	mov	r0, r7
   813d2:	2104      	movs	r1, #4
   813d4:	f7ff ff54 	bl	81280 <__sfmoreglue>
   813d8:	6030      	str	r0, [r6, #0]
   813da:	b108      	cbz	r0, 813e0 <__sfp+0x3c>
   813dc:	6836      	ldr	r6, [r6, #0]
   813de:	e7ec      	b.n	813ba <__sfp+0x16>
   813e0:	230c      	movs	r3, #12
   813e2:	603b      	str	r3, [r7, #0]
   813e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   813e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   813ea:	81e3      	strh	r3, [r4, #14]
   813ec:	2301      	movs	r3, #1
   813ee:	81a3      	strh	r3, [r4, #12]
   813f0:	6665      	str	r5, [r4, #100]	; 0x64
   813f2:	6025      	str	r5, [r4, #0]
   813f4:	60a5      	str	r5, [r4, #8]
   813f6:	6065      	str	r5, [r4, #4]
   813f8:	6125      	str	r5, [r4, #16]
   813fa:	6165      	str	r5, [r4, #20]
   813fc:	61a5      	str	r5, [r4, #24]
   813fe:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   81402:	4629      	mov	r1, r5
   81404:	2208      	movs	r2, #8
   81406:	f7ff fda9 	bl	80f5c <memset>
   8140a:	6325      	str	r5, [r4, #48]	; 0x30
   8140c:	6365      	str	r5, [r4, #52]	; 0x34
   8140e:	6465      	str	r5, [r4, #68]	; 0x44
   81410:	64a5      	str	r5, [r4, #72]	; 0x48
   81412:	4620      	mov	r0, r4
   81414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81416:	bf00      	nop
   81418:	00081cc4 	.word	0x00081cc4

0008141c <__sfp_lock_acquire>:
   8141c:	4770      	bx	lr

0008141e <__sfp_lock_release>:
   8141e:	4770      	bx	lr

00081420 <__sinit_lock_acquire>:
   81420:	4770      	bx	lr

00081422 <__sinit_lock_release>:
   81422:	4770      	bx	lr

00081424 <__fp_lock_all>:
   81424:	4b02      	ldr	r3, [pc, #8]	; (81430 <__fp_lock_all+0xc>)
   81426:	4903      	ldr	r1, [pc, #12]	; (81434 <__fp_lock_all+0x10>)
   81428:	6818      	ldr	r0, [r3, #0]
   8142a:	f000 b915 	b.w	81658 <_fwalk>
   8142e:	bf00      	nop
   81430:	20070008 	.word	0x20070008
   81434:	0008126d 	.word	0x0008126d

00081438 <__fp_unlock_all>:
   81438:	4b02      	ldr	r3, [pc, #8]	; (81444 <__fp_unlock_all+0xc>)
   8143a:	4903      	ldr	r1, [pc, #12]	; (81448 <__fp_unlock_all+0x10>)
   8143c:	6818      	ldr	r0, [r3, #0]
   8143e:	f000 b90b 	b.w	81658 <_fwalk>
   81442:	bf00      	nop
   81444:	20070008 	.word	0x20070008
   81448:	00081271 	.word	0x00081271

0008144c <_malloc_trim_r>:
   8144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8144e:	4d23      	ldr	r5, [pc, #140]	; (814dc <_malloc_trim_r+0x90>)
   81450:	460e      	mov	r6, r1
   81452:	4604      	mov	r4, r0
   81454:	f000 fb52 	bl	81afc <__malloc_lock>
   81458:	68ab      	ldr	r3, [r5, #8]
   8145a:	685f      	ldr	r7, [r3, #4]
   8145c:	f027 0703 	bic.w	r7, r7, #3
   81460:	1bbe      	subs	r6, r7, r6
   81462:	f606 76ef 	addw	r6, r6, #4079	; 0xfef
   81466:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
   8146a:	f026 060f 	bic.w	r6, r6, #15
   8146e:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   81472:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   81476:	da04      	bge.n	81482 <_malloc_trim_r+0x36>
   81478:	4620      	mov	r0, r4
   8147a:	f000 fb40 	bl	81afe <__malloc_unlock>
   8147e:	2000      	movs	r0, #0
   81480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81482:	4620      	mov	r0, r4
   81484:	2100      	movs	r1, #0
   81486:	f000 fb3b 	bl	81b00 <_sbrk_r>
   8148a:	68ab      	ldr	r3, [r5, #8]
   8148c:	443b      	add	r3, r7
   8148e:	4298      	cmp	r0, r3
   81490:	d1f2      	bne.n	81478 <_malloc_trim_r+0x2c>
   81492:	4620      	mov	r0, r4
   81494:	4271      	negs	r1, r6
   81496:	f000 fb33 	bl	81b00 <_sbrk_r>
   8149a:	3001      	adds	r0, #1
   8149c:	d110      	bne.n	814c0 <_malloc_trim_r+0x74>
   8149e:	4620      	mov	r0, r4
   814a0:	2100      	movs	r1, #0
   814a2:	f000 fb2d 	bl	81b00 <_sbrk_r>
   814a6:	68ab      	ldr	r3, [r5, #8]
   814a8:	1ac2      	subs	r2, r0, r3
   814aa:	2a0f      	cmp	r2, #15
   814ac:	dde4      	ble.n	81478 <_malloc_trim_r+0x2c>
   814ae:	490c      	ldr	r1, [pc, #48]	; (814e0 <_malloc_trim_r+0x94>)
   814b0:	f042 0201 	orr.w	r2, r2, #1
   814b4:	6809      	ldr	r1, [r1, #0]
   814b6:	605a      	str	r2, [r3, #4]
   814b8:	1a40      	subs	r0, r0, r1
   814ba:	490a      	ldr	r1, [pc, #40]	; (814e4 <_malloc_trim_r+0x98>)
   814bc:	6008      	str	r0, [r1, #0]
   814be:	e7db      	b.n	81478 <_malloc_trim_r+0x2c>
   814c0:	68ab      	ldr	r3, [r5, #8]
   814c2:	1bbf      	subs	r7, r7, r6
   814c4:	f047 0701 	orr.w	r7, r7, #1
   814c8:	605f      	str	r7, [r3, #4]
   814ca:	4b06      	ldr	r3, [pc, #24]	; (814e4 <_malloc_trim_r+0x98>)
   814cc:	4620      	mov	r0, r4
   814ce:	681a      	ldr	r2, [r3, #0]
   814d0:	1b96      	subs	r6, r2, r6
   814d2:	601e      	str	r6, [r3, #0]
   814d4:	f000 fb13 	bl	81afe <__malloc_unlock>
   814d8:	2001      	movs	r0, #1
   814da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   814dc:	20070438 	.word	0x20070438
   814e0:	20070840 	.word	0x20070840
   814e4:	20070964 	.word	0x20070964

000814e8 <_free_r>:
   814e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   814ea:	4606      	mov	r6, r0
   814ec:	460d      	mov	r5, r1
   814ee:	2900      	cmp	r1, #0
   814f0:	f000 80a9 	beq.w	81646 <_free_r+0x15e>
   814f4:	f000 fb02 	bl	81afc <__malloc_lock>
   814f8:	f855 cc04 	ldr.w	ip, [r5, #-4]
   814fc:	4c52      	ldr	r4, [pc, #328]	; (81648 <_free_r+0x160>)
   814fe:	f1a5 0308 	sub.w	r3, r5, #8
   81502:	f02c 0201 	bic.w	r2, ip, #1
   81506:	1898      	adds	r0, r3, r2
   81508:	68a1      	ldr	r1, [r4, #8]
   8150a:	6847      	ldr	r7, [r0, #4]
   8150c:	4288      	cmp	r0, r1
   8150e:	f027 0703 	bic.w	r7, r7, #3
   81512:	f00c 0101 	and.w	r1, ip, #1
   81516:	d11b      	bne.n	81550 <_free_r+0x68>
   81518:	443a      	add	r2, r7
   8151a:	b939      	cbnz	r1, 8152c <_free_r+0x44>
   8151c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   81520:	1a5b      	subs	r3, r3, r1
   81522:	6898      	ldr	r0, [r3, #8]
   81524:	440a      	add	r2, r1
   81526:	68d9      	ldr	r1, [r3, #12]
   81528:	60c1      	str	r1, [r0, #12]
   8152a:	6088      	str	r0, [r1, #8]
   8152c:	f042 0101 	orr.w	r1, r2, #1
   81530:	6059      	str	r1, [r3, #4]
   81532:	60a3      	str	r3, [r4, #8]
   81534:	4b45      	ldr	r3, [pc, #276]	; (8164c <_free_r+0x164>)
   81536:	681b      	ldr	r3, [r3, #0]
   81538:	429a      	cmp	r2, r3
   8153a:	d304      	bcc.n	81546 <_free_r+0x5e>
   8153c:	4b44      	ldr	r3, [pc, #272]	; (81650 <_free_r+0x168>)
   8153e:	4630      	mov	r0, r6
   81540:	6819      	ldr	r1, [r3, #0]
   81542:	f7ff ff83 	bl	8144c <_malloc_trim_r>
   81546:	4630      	mov	r0, r6
   81548:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8154c:	f000 bad7 	b.w	81afe <__malloc_unlock>
   81550:	6047      	str	r7, [r0, #4]
   81552:	b979      	cbnz	r1, 81574 <_free_r+0x8c>
   81554:	f855 5c08 	ldr.w	r5, [r5, #-8]
   81558:	f104 0c08 	add.w	ip, r4, #8
   8155c:	1b5b      	subs	r3, r3, r5
   8155e:	442a      	add	r2, r5
   81560:	689d      	ldr	r5, [r3, #8]
   81562:	4565      	cmp	r5, ip
   81564:	d008      	beq.n	81578 <_free_r+0x90>
   81566:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   8156a:	f8c5 c00c 	str.w	ip, [r5, #12]
   8156e:	f8cc 5008 	str.w	r5, [ip, #8]
   81572:	e002      	b.n	8157a <_free_r+0x92>
   81574:	2100      	movs	r1, #0
   81576:	e000      	b.n	8157a <_free_r+0x92>
   81578:	2101      	movs	r1, #1
   8157a:	19c5      	adds	r5, r0, r7
   8157c:	686d      	ldr	r5, [r5, #4]
   8157e:	07ed      	lsls	r5, r5, #31
   81580:	d40e      	bmi.n	815a0 <_free_r+0xb8>
   81582:	443a      	add	r2, r7
   81584:	6885      	ldr	r5, [r0, #8]
   81586:	b941      	cbnz	r1, 8159a <_free_r+0xb2>
   81588:	4f32      	ldr	r7, [pc, #200]	; (81654 <_free_r+0x16c>)
   8158a:	42bd      	cmp	r5, r7
   8158c:	d105      	bne.n	8159a <_free_r+0xb2>
   8158e:	6163      	str	r3, [r4, #20]
   81590:	6123      	str	r3, [r4, #16]
   81592:	2101      	movs	r1, #1
   81594:	60dd      	str	r5, [r3, #12]
   81596:	609d      	str	r5, [r3, #8]
   81598:	e002      	b.n	815a0 <_free_r+0xb8>
   8159a:	68c0      	ldr	r0, [r0, #12]
   8159c:	60e8      	str	r0, [r5, #12]
   8159e:	6085      	str	r5, [r0, #8]
   815a0:	f042 0001 	orr.w	r0, r2, #1
   815a4:	6058      	str	r0, [r3, #4]
   815a6:	509a      	str	r2, [r3, r2]
   815a8:	2900      	cmp	r1, #0
   815aa:	d1cc      	bne.n	81546 <_free_r+0x5e>
   815ac:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   815b0:	d20e      	bcs.n	815d0 <_free_r+0xe8>
   815b2:	08d2      	lsrs	r2, r2, #3
   815b4:	1091      	asrs	r1, r2, #2
   815b6:	2001      	movs	r0, #1
   815b8:	4088      	lsls	r0, r1
   815ba:	6861      	ldr	r1, [r4, #4]
   815bc:	4301      	orrs	r1, r0
   815be:	6061      	str	r1, [r4, #4]
   815c0:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
   815c4:	68a2      	ldr	r2, [r4, #8]
   815c6:	60dc      	str	r4, [r3, #12]
   815c8:	609a      	str	r2, [r3, #8]
   815ca:	60a3      	str	r3, [r4, #8]
   815cc:	60d3      	str	r3, [r2, #12]
   815ce:	e7ba      	b.n	81546 <_free_r+0x5e>
   815d0:	0a51      	lsrs	r1, r2, #9
   815d2:	2904      	cmp	r1, #4
   815d4:	d802      	bhi.n	815dc <_free_r+0xf4>
   815d6:	0991      	lsrs	r1, r2, #6
   815d8:	3138      	adds	r1, #56	; 0x38
   815da:	e015      	b.n	81608 <_free_r+0x120>
   815dc:	2914      	cmp	r1, #20
   815de:	d801      	bhi.n	815e4 <_free_r+0xfc>
   815e0:	315b      	adds	r1, #91	; 0x5b
   815e2:	e011      	b.n	81608 <_free_r+0x120>
   815e4:	2954      	cmp	r1, #84	; 0x54
   815e6:	d802      	bhi.n	815ee <_free_r+0x106>
   815e8:	0b11      	lsrs	r1, r2, #12
   815ea:	316e      	adds	r1, #110	; 0x6e
   815ec:	e00c      	b.n	81608 <_free_r+0x120>
   815ee:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
   815f2:	d802      	bhi.n	815fa <_free_r+0x112>
   815f4:	0bd1      	lsrs	r1, r2, #15
   815f6:	3177      	adds	r1, #119	; 0x77
   815f8:	e006      	b.n	81608 <_free_r+0x120>
   815fa:	f240 5054 	movw	r0, #1364	; 0x554
   815fe:	4281      	cmp	r1, r0
   81600:	bf9a      	itte	ls
   81602:	0c91      	lsrls	r1, r2, #18
   81604:	317c      	addls	r1, #124	; 0x7c
   81606:	217e      	movhi	r1, #126	; 0x7e
   81608:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
   8160c:	68a5      	ldr	r5, [r4, #8]
   8160e:	480e      	ldr	r0, [pc, #56]	; (81648 <_free_r+0x160>)
   81610:	42a5      	cmp	r5, r4
   81612:	d001      	beq.n	81618 <_free_r+0x130>
   81614:	4629      	mov	r1, r5
   81616:	e00b      	b.n	81630 <_free_r+0x148>
   81618:	2201      	movs	r2, #1
   8161a:	1089      	asrs	r1, r1, #2
   8161c:	fa02 f101 	lsl.w	r1, r2, r1
   81620:	6842      	ldr	r2, [r0, #4]
   81622:	430a      	orrs	r2, r1
   81624:	6042      	str	r2, [r0, #4]
   81626:	4629      	mov	r1, r5
   81628:	e008      	b.n	8163c <_free_r+0x154>
   8162a:	6889      	ldr	r1, [r1, #8]
   8162c:	42a1      	cmp	r1, r4
   8162e:	d004      	beq.n	8163a <_free_r+0x152>
   81630:	6848      	ldr	r0, [r1, #4]
   81632:	f020 0003 	bic.w	r0, r0, #3
   81636:	4282      	cmp	r2, r0
   81638:	d3f7      	bcc.n	8162a <_free_r+0x142>
   8163a:	68cd      	ldr	r5, [r1, #12]
   8163c:	60dd      	str	r5, [r3, #12]
   8163e:	6099      	str	r1, [r3, #8]
   81640:	60ab      	str	r3, [r5, #8]
   81642:	60cb      	str	r3, [r1, #12]
   81644:	e77f      	b.n	81546 <_free_r+0x5e>
   81646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81648:	20070438 	.word	0x20070438
   8164c:	20070844 	.word	0x20070844
   81650:	20070960 	.word	0x20070960
   81654:	20070440 	.word	0x20070440

00081658 <_fwalk>:
   81658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8165c:	4688      	mov	r8, r1
   8165e:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
   81662:	2600      	movs	r6, #0
   81664:	b18c      	cbz	r4, 8168a <_fwalk+0x32>
   81666:	68a5      	ldr	r5, [r4, #8]
   81668:	6867      	ldr	r7, [r4, #4]
   8166a:	3f01      	subs	r7, #1
   8166c:	d40b      	bmi.n	81686 <_fwalk+0x2e>
   8166e:	89ab      	ldrh	r3, [r5, #12]
   81670:	2b01      	cmp	r3, #1
   81672:	d906      	bls.n	81682 <_fwalk+0x2a>
   81674:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   81678:	3301      	adds	r3, #1
   8167a:	d002      	beq.n	81682 <_fwalk+0x2a>
   8167c:	4628      	mov	r0, r5
   8167e:	47c0      	blx	r8
   81680:	4306      	orrs	r6, r0
   81682:	3568      	adds	r5, #104	; 0x68
   81684:	e7f1      	b.n	8166a <_fwalk+0x12>
   81686:	6824      	ldr	r4, [r4, #0]
   81688:	e7ec      	b.n	81664 <_fwalk+0xc>
   8168a:	4630      	mov	r0, r6
   8168c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00081690 <_fwalk_reent>:
   81690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81694:	4680      	mov	r8, r0
   81696:	4689      	mov	r9, r1
   81698:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
   8169c:	2600      	movs	r6, #0
   8169e:	b194      	cbz	r4, 816c6 <_fwalk_reent+0x36>
   816a0:	68a5      	ldr	r5, [r4, #8]
   816a2:	6867      	ldr	r7, [r4, #4]
   816a4:	3f01      	subs	r7, #1
   816a6:	d40c      	bmi.n	816c2 <_fwalk_reent+0x32>
   816a8:	89ab      	ldrh	r3, [r5, #12]
   816aa:	2b01      	cmp	r3, #1
   816ac:	d907      	bls.n	816be <_fwalk_reent+0x2e>
   816ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   816b2:	3301      	adds	r3, #1
   816b4:	d003      	beq.n	816be <_fwalk_reent+0x2e>
   816b6:	4640      	mov	r0, r8
   816b8:	4629      	mov	r1, r5
   816ba:	47c8      	blx	r9
   816bc:	4306      	orrs	r6, r0
   816be:	3568      	adds	r5, #104	; 0x68
   816c0:	e7f0      	b.n	816a4 <_fwalk_reent+0x14>
   816c2:	6824      	ldr	r4, [r4, #0]
   816c4:	e7eb      	b.n	8169e <_fwalk_reent+0xe>
   816c6:	4630      	mov	r0, r6
   816c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000816cc <malloc>:
   816cc:	4b02      	ldr	r3, [pc, #8]	; (816d8 <malloc+0xc>)
   816ce:	4601      	mov	r1, r0
   816d0:	6818      	ldr	r0, [r3, #0]
   816d2:	f000 b80b 	b.w	816ec <_malloc_r>
   816d6:	bf00      	nop
   816d8:	20070008 	.word	0x20070008

000816dc <free>:
   816dc:	4b02      	ldr	r3, [pc, #8]	; (816e8 <free+0xc>)
   816de:	4601      	mov	r1, r0
   816e0:	6818      	ldr	r0, [r3, #0]
   816e2:	f7ff bf01 	b.w	814e8 <_free_r>
   816e6:	bf00      	nop
   816e8:	20070008 	.word	0x20070008

000816ec <_malloc_r>:
   816ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   816f0:	f101 040b 	add.w	r4, r1, #11
   816f4:	2c16      	cmp	r4, #22
   816f6:	4607      	mov	r7, r0
   816f8:	d903      	bls.n	81702 <_malloc_r+0x16>
   816fa:	f034 0407 	bics.w	r4, r4, #7
   816fe:	d501      	bpl.n	81704 <_malloc_r+0x18>
   81700:	e002      	b.n	81708 <_malloc_r+0x1c>
   81702:	2410      	movs	r4, #16
   81704:	428c      	cmp	r4, r1
   81706:	d202      	bcs.n	8170e <_malloc_r+0x22>
   81708:	230c      	movs	r3, #12
   8170a:	603b      	str	r3, [r7, #0]
   8170c:	e1de      	b.n	81acc <_malloc_r+0x3e0>
   8170e:	4638      	mov	r0, r7
   81710:	f000 f9f4 	bl	81afc <__malloc_lock>
   81714:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   81718:	4da3      	ldr	r5, [pc, #652]	; (819a8 <_malloc_r+0x2bc>)
   8171a:	d214      	bcs.n	81746 <_malloc_r+0x5a>
   8171c:	08e2      	lsrs	r2, r4, #3
   8171e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   81722:	68de      	ldr	r6, [r3, #12]
   81724:	429e      	cmp	r6, r3
   81726:	d106      	bne.n	81736 <_malloc_r+0x4a>
   81728:	f106 0308 	add.w	r3, r6, #8
   8172c:	6976      	ldr	r6, [r6, #20]
   8172e:	429e      	cmp	r6, r3
   81730:	bf08      	it	eq
   81732:	3202      	addeq	r2, #2
   81734:	d043      	beq.n	817be <_malloc_r+0xd2>
   81736:	6873      	ldr	r3, [r6, #4]
   81738:	68f2      	ldr	r2, [r6, #12]
   8173a:	68b1      	ldr	r1, [r6, #8]
   8173c:	f023 0303 	bic.w	r3, r3, #3
   81740:	60ca      	str	r2, [r1, #12]
   81742:	6091      	str	r1, [r2, #8]
   81744:	e05d      	b.n	81802 <_malloc_r+0x116>
   81746:	0a62      	lsrs	r2, r4, #9
   81748:	d01a      	beq.n	81780 <_malloc_r+0x94>
   8174a:	2a04      	cmp	r2, #4
   8174c:	d802      	bhi.n	81754 <_malloc_r+0x68>
   8174e:	09a2      	lsrs	r2, r4, #6
   81750:	3238      	adds	r2, #56	; 0x38
   81752:	e018      	b.n	81786 <_malloc_r+0x9a>
   81754:	2a14      	cmp	r2, #20
   81756:	d801      	bhi.n	8175c <_malloc_r+0x70>
   81758:	325b      	adds	r2, #91	; 0x5b
   8175a:	e014      	b.n	81786 <_malloc_r+0x9a>
   8175c:	2a54      	cmp	r2, #84	; 0x54
   8175e:	d802      	bhi.n	81766 <_malloc_r+0x7a>
   81760:	0b22      	lsrs	r2, r4, #12
   81762:	326e      	adds	r2, #110	; 0x6e
   81764:	e00f      	b.n	81786 <_malloc_r+0x9a>
   81766:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8176a:	d802      	bhi.n	81772 <_malloc_r+0x86>
   8176c:	0be2      	lsrs	r2, r4, #15
   8176e:	3277      	adds	r2, #119	; 0x77
   81770:	e009      	b.n	81786 <_malloc_r+0x9a>
   81772:	f240 5354 	movw	r3, #1364	; 0x554
   81776:	429a      	cmp	r2, r3
   81778:	d804      	bhi.n	81784 <_malloc_r+0x98>
   8177a:	0ca2      	lsrs	r2, r4, #18
   8177c:	327c      	adds	r2, #124	; 0x7c
   8177e:	e002      	b.n	81786 <_malloc_r+0x9a>
   81780:	223f      	movs	r2, #63	; 0x3f
   81782:	e000      	b.n	81786 <_malloc_r+0x9a>
   81784:	227e      	movs	r2, #126	; 0x7e
   81786:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   8178a:	68de      	ldr	r6, [r3, #12]
   8178c:	429e      	cmp	r6, r3
   8178e:	d015      	beq.n	817bc <_malloc_r+0xd0>
   81790:	6871      	ldr	r1, [r6, #4]
   81792:	f021 0103 	bic.w	r1, r1, #3
   81796:	1b08      	subs	r0, r1, r4
   81798:	280f      	cmp	r0, #15
   8179a:	dd01      	ble.n	817a0 <_malloc_r+0xb4>
   8179c:	3a01      	subs	r2, #1
   8179e:	e00d      	b.n	817bc <_malloc_r+0xd0>
   817a0:	2800      	cmp	r0, #0
   817a2:	db09      	blt.n	817b8 <_malloc_r+0xcc>
   817a4:	68f3      	ldr	r3, [r6, #12]
   817a6:	68b2      	ldr	r2, [r6, #8]
   817a8:	60d3      	str	r3, [r2, #12]
   817aa:	609a      	str	r2, [r3, #8]
   817ac:	1873      	adds	r3, r6, r1
   817ae:	685a      	ldr	r2, [r3, #4]
   817b0:	f042 0201 	orr.w	r2, r2, #1
   817b4:	605a      	str	r2, [r3, #4]
   817b6:	e194      	b.n	81ae2 <_malloc_r+0x3f6>
   817b8:	68f6      	ldr	r6, [r6, #12]
   817ba:	e7e7      	b.n	8178c <_malloc_r+0xa0>
   817bc:	3201      	adds	r2, #1
   817be:	497a      	ldr	r1, [pc, #488]	; (819a8 <_malloc_r+0x2bc>)
   817c0:	692e      	ldr	r6, [r5, #16]
   817c2:	f101 0008 	add.w	r0, r1, #8
   817c6:	4286      	cmp	r6, r0
   817c8:	4686      	mov	lr, r0
   817ca:	d06d      	beq.n	818a8 <_malloc_r+0x1bc>
   817cc:	6873      	ldr	r3, [r6, #4]
   817ce:	f023 0303 	bic.w	r3, r3, #3
   817d2:	ebc4 0c03 	rsb	ip, r4, r3
   817d6:	f1bc 0f0f 	cmp.w	ip, #15
   817da:	dd0d      	ble.n	817f8 <_malloc_r+0x10c>
   817dc:	1933      	adds	r3, r6, r4
   817de:	f04c 0201 	orr.w	r2, ip, #1
   817e2:	f044 0401 	orr.w	r4, r4, #1
   817e6:	6074      	str	r4, [r6, #4]
   817e8:	614b      	str	r3, [r1, #20]
   817ea:	610b      	str	r3, [r1, #16]
   817ec:	60d8      	str	r0, [r3, #12]
   817ee:	6098      	str	r0, [r3, #8]
   817f0:	605a      	str	r2, [r3, #4]
   817f2:	f843 c00c 	str.w	ip, [r3, ip]
   817f6:	e174      	b.n	81ae2 <_malloc_r+0x3f6>
   817f8:	f1bc 0f00 	cmp.w	ip, #0
   817fc:	6148      	str	r0, [r1, #20]
   817fe:	6108      	str	r0, [r1, #16]
   81800:	db01      	blt.n	81806 <_malloc_r+0x11a>
   81802:	4433      	add	r3, r6
   81804:	e7d3      	b.n	817ae <_malloc_r+0xc2>
   81806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8180a:	d211      	bcs.n	81830 <_malloc_r+0x144>
   8180c:	08db      	lsrs	r3, r3, #3
   8180e:	1098      	asrs	r0, r3, #2
   81810:	f04f 0c01 	mov.w	ip, #1
   81814:	fa0c fc00 	lsl.w	ip, ip, r0
   81818:	6848      	ldr	r0, [r1, #4]
   8181a:	ea4c 0000 	orr.w	r0, ip, r0
   8181e:	6048      	str	r0, [r1, #4]
   81820:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   81824:	688b      	ldr	r3, [r1, #8]
   81826:	60f1      	str	r1, [r6, #12]
   81828:	60b3      	str	r3, [r6, #8]
   8182a:	608e      	str	r6, [r1, #8]
   8182c:	60de      	str	r6, [r3, #12]
   8182e:	e03b      	b.n	818a8 <_malloc_r+0x1bc>
   81830:	0a58      	lsrs	r0, r3, #9
   81832:	2804      	cmp	r0, #4
   81834:	d802      	bhi.n	8183c <_malloc_r+0x150>
   81836:	0998      	lsrs	r0, r3, #6
   81838:	3038      	adds	r0, #56	; 0x38
   8183a:	e015      	b.n	81868 <_malloc_r+0x17c>
   8183c:	2814      	cmp	r0, #20
   8183e:	d801      	bhi.n	81844 <_malloc_r+0x158>
   81840:	305b      	adds	r0, #91	; 0x5b
   81842:	e011      	b.n	81868 <_malloc_r+0x17c>
   81844:	2854      	cmp	r0, #84	; 0x54
   81846:	d802      	bhi.n	8184e <_malloc_r+0x162>
   81848:	0b18      	lsrs	r0, r3, #12
   8184a:	306e      	adds	r0, #110	; 0x6e
   8184c:	e00c      	b.n	81868 <_malloc_r+0x17c>
   8184e:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   81852:	d802      	bhi.n	8185a <_malloc_r+0x16e>
   81854:	0bd8      	lsrs	r0, r3, #15
   81856:	3077      	adds	r0, #119	; 0x77
   81858:	e006      	b.n	81868 <_malloc_r+0x17c>
   8185a:	f240 5154 	movw	r1, #1364	; 0x554
   8185e:	4288      	cmp	r0, r1
   81860:	bf9a      	itte	ls
   81862:	0c98      	lsrls	r0, r3, #18
   81864:	307c      	addls	r0, #124	; 0x7c
   81866:	207e      	movhi	r0, #126	; 0x7e
   81868:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
   8186c:	f8dc 1008 	ldr.w	r1, [ip, #8]
   81870:	f8df 8134 	ldr.w	r8, [pc, #308]	; 819a8 <_malloc_r+0x2bc>
   81874:	4561      	cmp	r1, ip
   81876:	d10d      	bne.n	81894 <_malloc_r+0x1a8>
   81878:	2301      	movs	r3, #1
   8187a:	1080      	asrs	r0, r0, #2
   8187c:	fa03 f000 	lsl.w	r0, r3, r0
   81880:	f8d8 3004 	ldr.w	r3, [r8, #4]
   81884:	4303      	orrs	r3, r0
   81886:	f8c8 3004 	str.w	r3, [r8, #4]
   8188a:	460b      	mov	r3, r1
   8188c:	e008      	b.n	818a0 <_malloc_r+0x1b4>
   8188e:	6889      	ldr	r1, [r1, #8]
   81890:	4561      	cmp	r1, ip
   81892:	d004      	beq.n	8189e <_malloc_r+0x1b2>
   81894:	6848      	ldr	r0, [r1, #4]
   81896:	f020 0003 	bic.w	r0, r0, #3
   8189a:	4283      	cmp	r3, r0
   8189c:	d3f7      	bcc.n	8188e <_malloc_r+0x1a2>
   8189e:	68cb      	ldr	r3, [r1, #12]
   818a0:	60f3      	str	r3, [r6, #12]
   818a2:	60b1      	str	r1, [r6, #8]
   818a4:	609e      	str	r6, [r3, #8]
   818a6:	60ce      	str	r6, [r1, #12]
   818a8:	2101      	movs	r1, #1
   818aa:	1093      	asrs	r3, r2, #2
   818ac:	fa01 f303 	lsl.w	r3, r1, r3
   818b0:	6869      	ldr	r1, [r5, #4]
   818b2:	428b      	cmp	r3, r1
   818b4:	d85d      	bhi.n	81972 <_malloc_r+0x286>
   818b6:	420b      	tst	r3, r1
   818b8:	d106      	bne.n	818c8 <_malloc_r+0x1dc>
   818ba:	f022 0203 	bic.w	r2, r2, #3
   818be:	005b      	lsls	r3, r3, #1
   818c0:	420b      	tst	r3, r1
   818c2:	f102 0204 	add.w	r2, r2, #4
   818c6:	d0fa      	beq.n	818be <_malloc_r+0x1d2>
   818c8:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
   818cc:	4680      	mov	r8, r0
   818ce:	4694      	mov	ip, r2
   818d0:	f8d8 600c 	ldr.w	r6, [r8, #12]
   818d4:	4546      	cmp	r6, r8
   818d6:	d02d      	beq.n	81934 <_malloc_r+0x248>
   818d8:	6871      	ldr	r1, [r6, #4]
   818da:	f021 0903 	bic.w	r9, r1, #3
   818de:	ebc4 0109 	rsb	r1, r4, r9
   818e2:	290f      	cmp	r1, #15
   818e4:	dd13      	ble.n	8190e <_malloc_r+0x222>
   818e6:	1933      	adds	r3, r6, r4
   818e8:	f044 0401 	orr.w	r4, r4, #1
   818ec:	68f2      	ldr	r2, [r6, #12]
   818ee:	6074      	str	r4, [r6, #4]
   818f0:	f856 0f08 	ldr.w	r0, [r6, #8]!
   818f4:	60c2      	str	r2, [r0, #12]
   818f6:	6090      	str	r0, [r2, #8]
   818f8:	f041 0201 	orr.w	r2, r1, #1
   818fc:	616b      	str	r3, [r5, #20]
   818fe:	612b      	str	r3, [r5, #16]
   81900:	f8c3 e00c 	str.w	lr, [r3, #12]
   81904:	f8c3 e008 	str.w	lr, [r3, #8]
   81908:	605a      	str	r2, [r3, #4]
   8190a:	5059      	str	r1, [r3, r1]
   8190c:	e00c      	b.n	81928 <_malloc_r+0x23c>
   8190e:	2900      	cmp	r1, #0
   81910:	db0e      	blt.n	81930 <_malloc_r+0x244>
   81912:	eb06 0109 	add.w	r1, r6, r9
   81916:	684b      	ldr	r3, [r1, #4]
   81918:	f043 0301 	orr.w	r3, r3, #1
   8191c:	604b      	str	r3, [r1, #4]
   8191e:	68f3      	ldr	r3, [r6, #12]
   81920:	f856 2f08 	ldr.w	r2, [r6, #8]!
   81924:	60d3      	str	r3, [r2, #12]
   81926:	609a      	str	r2, [r3, #8]
   81928:	4638      	mov	r0, r7
   8192a:	f000 f8e8 	bl	81afe <__malloc_unlock>
   8192e:	e0dc      	b.n	81aea <_malloc_r+0x3fe>
   81930:	68f6      	ldr	r6, [r6, #12]
   81932:	e7cf      	b.n	818d4 <_malloc_r+0x1e8>
   81934:	f10c 0c01 	add.w	ip, ip, #1
   81938:	f01c 0f03 	tst.w	ip, #3
   8193c:	f108 0808 	add.w	r8, r8, #8
   81940:	d1c6      	bne.n	818d0 <_malloc_r+0x1e4>
   81942:	0791      	lsls	r1, r2, #30
   81944:	d104      	bne.n	81950 <_malloc_r+0x264>
   81946:	686a      	ldr	r2, [r5, #4]
   81948:	ea22 0203 	bic.w	r2, r2, r3
   8194c:	606a      	str	r2, [r5, #4]
   8194e:	e005      	b.n	8195c <_malloc_r+0x270>
   81950:	f1a0 0108 	sub.w	r1, r0, #8
   81954:	6800      	ldr	r0, [r0, #0]
   81956:	3a01      	subs	r2, #1
   81958:	4288      	cmp	r0, r1
   8195a:	d0f2      	beq.n	81942 <_malloc_r+0x256>
   8195c:	6869      	ldr	r1, [r5, #4]
   8195e:	005b      	lsls	r3, r3, #1
   81960:	428b      	cmp	r3, r1
   81962:	d806      	bhi.n	81972 <_malloc_r+0x286>
   81964:	b12b      	cbz	r3, 81972 <_malloc_r+0x286>
   81966:	4662      	mov	r2, ip
   81968:	420b      	tst	r3, r1
   8196a:	d1ad      	bne.n	818c8 <_malloc_r+0x1dc>
   8196c:	3204      	adds	r2, #4
   8196e:	005b      	lsls	r3, r3, #1
   81970:	e7fa      	b.n	81968 <_malloc_r+0x27c>
   81972:	f8d5 9008 	ldr.w	r9, [r5, #8]
   81976:	f8d9 3004 	ldr.w	r3, [r9, #4]
   8197a:	f023 0b03 	bic.w	fp, r3, #3
   8197e:	45a3      	cmp	fp, r4
   81980:	d304      	bcc.n	8198c <_malloc_r+0x2a0>
   81982:	ebc4 030b 	rsb	r3, r4, fp
   81986:	2b0f      	cmp	r3, #15
   81988:	f300 80a2 	bgt.w	81ad0 <_malloc_r+0x3e4>
   8198c:	4907      	ldr	r1, [pc, #28]	; (819ac <_malloc_r+0x2c0>)
   8198e:	eb09 030b 	add.w	r3, r9, fp
   81992:	680a      	ldr	r2, [r1, #0]
   81994:	4688      	mov	r8, r1
   81996:	eb04 0a02 	add.w	sl, r4, r2
   8199a:	f8d5 2408 	ldr.w	r2, [r5, #1032]	; 0x408
   8199e:	3201      	adds	r2, #1
   819a0:	d106      	bne.n	819b0 <_malloc_r+0x2c4>
   819a2:	f10a 0a10 	add.w	sl, sl, #16
   819a6:	e00b      	b.n	819c0 <_malloc_r+0x2d4>
   819a8:	20070438 	.word	0x20070438
   819ac:	20070960 	.word	0x20070960
   819b0:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   819b4:	f10a 0a0f 	add.w	sl, sl, #15
   819b8:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   819bc:	f02a 0a0f 	bic.w	sl, sl, #15
   819c0:	4638      	mov	r0, r7
   819c2:	4651      	mov	r1, sl
   819c4:	9301      	str	r3, [sp, #4]
   819c6:	f000 f89b 	bl	81b00 <_sbrk_r>
   819ca:	1c42      	adds	r2, r0, #1
   819cc:	4606      	mov	r6, r0
   819ce:	9b01      	ldr	r3, [sp, #4]
   819d0:	d06f      	beq.n	81ab2 <_malloc_r+0x3c6>
   819d2:	4298      	cmp	r0, r3
   819d4:	d201      	bcs.n	819da <_malloc_r+0x2ee>
   819d6:	45a9      	cmp	r9, r5
   819d8:	d16b      	bne.n	81ab2 <_malloc_r+0x3c6>
   819da:	f8d8 2004 	ldr.w	r2, [r8, #4]
   819de:	429e      	cmp	r6, r3
   819e0:	4452      	add	r2, sl
   819e2:	f8c8 2004 	str.w	r2, [r8, #4]
   819e6:	d108      	bne.n	819fa <_malloc_r+0x30e>
   819e8:	f3c6 010b 	ubfx	r1, r6, #0, #12
   819ec:	b929      	cbnz	r1, 819fa <_malloc_r+0x30e>
   819ee:	68ab      	ldr	r3, [r5, #8]
   819f0:	44da      	add	sl, fp
   819f2:	f04a 0201 	orr.w	r2, sl, #1
   819f6:	605a      	str	r2, [r3, #4]
   819f8:	e04d      	b.n	81a96 <_malloc_r+0x3aa>
   819fa:	f8d5 1408 	ldr.w	r1, [r5, #1032]	; 0x408
   819fe:	3101      	adds	r1, #1
   81a00:	d103      	bne.n	81a0a <_malloc_r+0x31e>
   81a02:	4b3c      	ldr	r3, [pc, #240]	; (81af4 <_malloc_r+0x408>)
   81a04:	f8c3 6408 	str.w	r6, [r3, #1032]	; 0x408
   81a08:	e003      	b.n	81a12 <_malloc_r+0x326>
   81a0a:	1af3      	subs	r3, r6, r3
   81a0c:	441a      	add	r2, r3
   81a0e:	f8c8 2004 	str.w	r2, [r8, #4]
   81a12:	f016 0307 	ands.w	r3, r6, #7
   81a16:	bf1c      	itt	ne
   81a18:	f1c3 0308 	rsbne	r3, r3, #8
   81a1c:	18f6      	addne	r6, r6, r3
   81a1e:	44b2      	add	sl, r6
   81a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   81a24:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   81a28:	ebca 0a03 	rsb	sl, sl, r3
   81a2c:	4651      	mov	r1, sl
   81a2e:	4638      	mov	r0, r7
   81a30:	f000 f866 	bl	81b00 <_sbrk_r>
   81a34:	1c43      	adds	r3, r0, #1
   81a36:	bf04      	itt	eq
   81a38:	4630      	moveq	r0, r6
   81a3a:	f04f 0a00 	moveq.w	sl, #0
   81a3e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   81a42:	1b80      	subs	r0, r0, r6
   81a44:	4450      	add	r0, sl
   81a46:	4453      	add	r3, sl
   81a48:	f040 0001 	orr.w	r0, r0, #1
   81a4c:	45a9      	cmp	r9, r5
   81a4e:	60ae      	str	r6, [r5, #8]
   81a50:	f8c8 3004 	str.w	r3, [r8, #4]
   81a54:	6070      	str	r0, [r6, #4]
   81a56:	d01e      	beq.n	81a96 <_malloc_r+0x3aa>
   81a58:	f1bb 0f0f 	cmp.w	fp, #15
   81a5c:	d802      	bhi.n	81a64 <_malloc_r+0x378>
   81a5e:	2301      	movs	r3, #1
   81a60:	6073      	str	r3, [r6, #4]
   81a62:	e026      	b.n	81ab2 <_malloc_r+0x3c6>
   81a64:	f8d9 3004 	ldr.w	r3, [r9, #4]
   81a68:	f1ab 0b0c 	sub.w	fp, fp, #12
   81a6c:	f02b 0b07 	bic.w	fp, fp, #7
   81a70:	f003 0301 	and.w	r3, r3, #1
   81a74:	ea4b 0303 	orr.w	r3, fp, r3
   81a78:	f8c9 3004 	str.w	r3, [r9, #4]
   81a7c:	2205      	movs	r2, #5
   81a7e:	eb09 030b 	add.w	r3, r9, fp
   81a82:	f1bb 0f0f 	cmp.w	fp, #15
   81a86:	605a      	str	r2, [r3, #4]
   81a88:	609a      	str	r2, [r3, #8]
   81a8a:	d904      	bls.n	81a96 <_malloc_r+0x3aa>
   81a8c:	4638      	mov	r0, r7
   81a8e:	f109 0108 	add.w	r1, r9, #8
   81a92:	f7ff fd29 	bl	814e8 <_free_r>
   81a96:	f8d8 3004 	ldr.w	r3, [r8, #4]
   81a9a:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
   81a9e:	4293      	cmp	r3, r2
   81aa0:	bf84      	itt	hi
   81aa2:	4a15      	ldrhi	r2, [pc, #84]	; (81af8 <_malloc_r+0x40c>)
   81aa4:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   81aa6:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
   81aaa:	4293      	cmp	r3, r2
   81aac:	bf84      	itt	hi
   81aae:	4a12      	ldrhi	r2, [pc, #72]	; (81af8 <_malloc_r+0x40c>)
   81ab0:	6313      	strhi	r3, [r2, #48]	; 0x30
   81ab2:	68ab      	ldr	r3, [r5, #8]
   81ab4:	685a      	ldr	r2, [r3, #4]
   81ab6:	f022 0203 	bic.w	r2, r2, #3
   81aba:	42a2      	cmp	r2, r4
   81abc:	ebc4 0302 	rsb	r3, r4, r2
   81ac0:	d301      	bcc.n	81ac6 <_malloc_r+0x3da>
   81ac2:	2b0f      	cmp	r3, #15
   81ac4:	dc04      	bgt.n	81ad0 <_malloc_r+0x3e4>
   81ac6:	4638      	mov	r0, r7
   81ac8:	f000 f819 	bl	81afe <__malloc_unlock>
   81acc:	2600      	movs	r6, #0
   81ace:	e00c      	b.n	81aea <_malloc_r+0x3fe>
   81ad0:	68ae      	ldr	r6, [r5, #8]
   81ad2:	f044 0201 	orr.w	r2, r4, #1
   81ad6:	f043 0301 	orr.w	r3, r3, #1
   81ada:	4434      	add	r4, r6
   81adc:	6072      	str	r2, [r6, #4]
   81ade:	60ac      	str	r4, [r5, #8]
   81ae0:	6063      	str	r3, [r4, #4]
   81ae2:	4638      	mov	r0, r7
   81ae4:	f000 f80b 	bl	81afe <__malloc_unlock>
   81ae8:	3608      	adds	r6, #8
   81aea:	4630      	mov	r0, r6
   81aec:	b003      	add	sp, #12
   81aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81af2:	bf00      	nop
   81af4:	20070438 	.word	0x20070438
   81af8:	20070960 	.word	0x20070960

00081afc <__malloc_lock>:
   81afc:	4770      	bx	lr

00081afe <__malloc_unlock>:
   81afe:	4770      	bx	lr

00081b00 <_sbrk_r>:
   81b00:	b538      	push	{r3, r4, r5, lr}
   81b02:	4c06      	ldr	r4, [pc, #24]	; (81b1c <_sbrk_r+0x1c>)
   81b04:	2300      	movs	r3, #0
   81b06:	4605      	mov	r5, r0
   81b08:	4608      	mov	r0, r1
   81b0a:	6023      	str	r3, [r4, #0]
   81b0c:	f7ff f9c4 	bl	80e98 <_sbrk>
   81b10:	1c43      	adds	r3, r0, #1
   81b12:	d102      	bne.n	81b1a <_sbrk_r+0x1a>
   81b14:	6823      	ldr	r3, [r4, #0]
   81b16:	b103      	cbz	r3, 81b1a <_sbrk_r+0x1a>
   81b18:	602b      	str	r3, [r5, #0]
   81b1a:	bd38      	pop	{r3, r4, r5, pc}
   81b1c:	200709a0 	.word	0x200709a0

00081b20 <__sread>:
   81b20:	b510      	push	{r4, lr}
   81b22:	460c      	mov	r4, r1
   81b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81b28:	f000 f8ba 	bl	81ca0 <_read_r>
   81b2c:	2800      	cmp	r0, #0
   81b2e:	db03      	blt.n	81b38 <__sread+0x18>
   81b30:	6d23      	ldr	r3, [r4, #80]	; 0x50
   81b32:	4403      	add	r3, r0
   81b34:	6523      	str	r3, [r4, #80]	; 0x50
   81b36:	bd10      	pop	{r4, pc}
   81b38:	89a3      	ldrh	r3, [r4, #12]
   81b3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   81b3e:	81a3      	strh	r3, [r4, #12]
   81b40:	bd10      	pop	{r4, pc}

00081b42 <__seofread>:
   81b42:	2000      	movs	r0, #0
   81b44:	4770      	bx	lr

00081b46 <__swrite>:
   81b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81b4a:	461d      	mov	r5, r3
   81b4c:	898b      	ldrh	r3, [r1, #12]
   81b4e:	4607      	mov	r7, r0
   81b50:	05db      	lsls	r3, r3, #23
   81b52:	460c      	mov	r4, r1
   81b54:	4616      	mov	r6, r2
   81b56:	d505      	bpl.n	81b64 <__swrite+0x1e>
   81b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81b5c:	2200      	movs	r2, #0
   81b5e:	2302      	movs	r3, #2
   81b60:	f000 f88c 	bl	81c7c <_lseek_r>
   81b64:	89a3      	ldrh	r3, [r4, #12]
   81b66:	4638      	mov	r0, r7
   81b68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   81b6c:	81a3      	strh	r3, [r4, #12]
   81b6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   81b72:	4632      	mov	r2, r6
   81b74:	462b      	mov	r3, r5
   81b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   81b7a:	f000 b817 	b.w	81bac <_write_r>

00081b7e <__sseek>:
   81b7e:	b510      	push	{r4, lr}
   81b80:	460c      	mov	r4, r1
   81b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81b86:	f000 f879 	bl	81c7c <_lseek_r>
   81b8a:	1c43      	adds	r3, r0, #1
   81b8c:	89a3      	ldrh	r3, [r4, #12]
   81b8e:	d103      	bne.n	81b98 <__sseek+0x1a>
   81b90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   81b94:	81a3      	strh	r3, [r4, #12]
   81b96:	bd10      	pop	{r4, pc}
   81b98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   81b9c:	81a3      	strh	r3, [r4, #12]
   81b9e:	6520      	str	r0, [r4, #80]	; 0x50
   81ba0:	bd10      	pop	{r4, pc}

00081ba2 <__sclose>:
   81ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81ba6:	f000 b813 	b.w	81bd0 <_close_r>
	...

00081bac <_write_r>:
   81bac:	b538      	push	{r3, r4, r5, lr}
   81bae:	4c07      	ldr	r4, [pc, #28]	; (81bcc <_write_r+0x20>)
   81bb0:	4605      	mov	r5, r0
   81bb2:	2000      	movs	r0, #0
   81bb4:	6020      	str	r0, [r4, #0]
   81bb6:	4608      	mov	r0, r1
   81bb8:	4611      	mov	r1, r2
   81bba:	461a      	mov	r2, r3
   81bbc:	f7fe fc12 	bl	803e4 <_write>
   81bc0:	1c43      	adds	r3, r0, #1
   81bc2:	d102      	bne.n	81bca <_write_r+0x1e>
   81bc4:	6823      	ldr	r3, [r4, #0]
   81bc6:	b103      	cbz	r3, 81bca <_write_r+0x1e>
   81bc8:	602b      	str	r3, [r5, #0]
   81bca:	bd38      	pop	{r3, r4, r5, pc}
   81bcc:	200709a0 	.word	0x200709a0

00081bd0 <_close_r>:
   81bd0:	b538      	push	{r3, r4, r5, lr}
   81bd2:	4c06      	ldr	r4, [pc, #24]	; (81bec <_close_r+0x1c>)
   81bd4:	2300      	movs	r3, #0
   81bd6:	4605      	mov	r5, r0
   81bd8:	4608      	mov	r0, r1
   81bda:	6023      	str	r3, [r4, #0]
   81bdc:	f7ff f976 	bl	80ecc <_close>
   81be0:	1c43      	adds	r3, r0, #1
   81be2:	d102      	bne.n	81bea <_close_r+0x1a>
   81be4:	6823      	ldr	r3, [r4, #0]
   81be6:	b103      	cbz	r3, 81bea <_close_r+0x1a>
   81be8:	602b      	str	r3, [r5, #0]
   81bea:	bd38      	pop	{r3, r4, r5, pc}
   81bec:	200709a0 	.word	0x200709a0

00081bf0 <_fclose_r>:
   81bf0:	b570      	push	{r4, r5, r6, lr}
   81bf2:	4605      	mov	r5, r0
   81bf4:	460c      	mov	r4, r1
   81bf6:	b909      	cbnz	r1, 81bfc <_fclose_r+0xc>
   81bf8:	2000      	movs	r0, #0
   81bfa:	bd70      	pop	{r4, r5, r6, pc}
   81bfc:	b118      	cbz	r0, 81c06 <_fclose_r+0x16>
   81bfe:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81c00:	b90b      	cbnz	r3, 81c06 <_fclose_r+0x16>
   81c02:	f7ff fb59 	bl	812b8 <__sinit>
   81c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81c0a:	2b00      	cmp	r3, #0
   81c0c:	d0f4      	beq.n	81bf8 <_fclose_r+0x8>
   81c0e:	4628      	mov	r0, r5
   81c10:	4621      	mov	r1, r4
   81c12:	f7ff fb08 	bl	81226 <_fflush_r>
   81c16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81c18:	4606      	mov	r6, r0
   81c1a:	b133      	cbz	r3, 81c2a <_fclose_r+0x3a>
   81c1c:	4628      	mov	r0, r5
   81c1e:	69e1      	ldr	r1, [r4, #28]
   81c20:	4798      	blx	r3
   81c22:	2800      	cmp	r0, #0
   81c24:	bfb8      	it	lt
   81c26:	f04f 36ff 	movlt.w	r6, #4294967295
   81c2a:	89a3      	ldrh	r3, [r4, #12]
   81c2c:	061b      	lsls	r3, r3, #24
   81c2e:	d503      	bpl.n	81c38 <_fclose_r+0x48>
   81c30:	4628      	mov	r0, r5
   81c32:	6921      	ldr	r1, [r4, #16]
   81c34:	f7ff fc58 	bl	814e8 <_free_r>
   81c38:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81c3a:	b141      	cbz	r1, 81c4e <_fclose_r+0x5e>
   81c3c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81c40:	4299      	cmp	r1, r3
   81c42:	d002      	beq.n	81c4a <_fclose_r+0x5a>
   81c44:	4628      	mov	r0, r5
   81c46:	f7ff fc4f 	bl	814e8 <_free_r>
   81c4a:	2300      	movs	r3, #0
   81c4c:	6323      	str	r3, [r4, #48]	; 0x30
   81c4e:	6c61      	ldr	r1, [r4, #68]	; 0x44
   81c50:	b121      	cbz	r1, 81c5c <_fclose_r+0x6c>
   81c52:	4628      	mov	r0, r5
   81c54:	f7ff fc48 	bl	814e8 <_free_r>
   81c58:	2300      	movs	r3, #0
   81c5a:	6463      	str	r3, [r4, #68]	; 0x44
   81c5c:	f7ff fbde 	bl	8141c <__sfp_lock_acquire>
   81c60:	2300      	movs	r3, #0
   81c62:	81a3      	strh	r3, [r4, #12]
   81c64:	f7ff fbdb 	bl	8141e <__sfp_lock_release>
   81c68:	4630      	mov	r0, r6
   81c6a:	bd70      	pop	{r4, r5, r6, pc}

00081c6c <fclose>:
   81c6c:	4b02      	ldr	r3, [pc, #8]	; (81c78 <fclose+0xc>)
   81c6e:	4601      	mov	r1, r0
   81c70:	6818      	ldr	r0, [r3, #0]
   81c72:	f7ff bfbd 	b.w	81bf0 <_fclose_r>
   81c76:	bf00      	nop
   81c78:	20070008 	.word	0x20070008

00081c7c <_lseek_r>:
   81c7c:	b538      	push	{r3, r4, r5, lr}
   81c7e:	4c07      	ldr	r4, [pc, #28]	; (81c9c <_lseek_r+0x20>)
   81c80:	4605      	mov	r5, r0
   81c82:	2000      	movs	r0, #0
   81c84:	6020      	str	r0, [r4, #0]
   81c86:	4608      	mov	r0, r1
   81c88:	4611      	mov	r1, r2
   81c8a:	461a      	mov	r2, r3
   81c8c:	f7ff f922 	bl	80ed4 <_lseek>
   81c90:	1c43      	adds	r3, r0, #1
   81c92:	d102      	bne.n	81c9a <_lseek_r+0x1e>
   81c94:	6823      	ldr	r3, [r4, #0]
   81c96:	b103      	cbz	r3, 81c9a <_lseek_r+0x1e>
   81c98:	602b      	str	r3, [r5, #0]
   81c9a:	bd38      	pop	{r3, r4, r5, pc}
   81c9c:	200709a0 	.word	0x200709a0

00081ca0 <_read_r>:
   81ca0:	b538      	push	{r3, r4, r5, lr}
   81ca2:	4c07      	ldr	r4, [pc, #28]	; (81cc0 <_read_r+0x20>)
   81ca4:	4605      	mov	r5, r0
   81ca6:	2000      	movs	r0, #0
   81ca8:	6020      	str	r0, [r4, #0]
   81caa:	4608      	mov	r0, r1
   81cac:	4611      	mov	r1, r2
   81cae:	461a      	mov	r2, r3
   81cb0:	f7fe fb78 	bl	803a4 <_read>
   81cb4:	1c43      	adds	r3, r0, #1
   81cb6:	d102      	bne.n	81cbe <_read_r+0x1e>
   81cb8:	6823      	ldr	r3, [r4, #0]
   81cba:	b103      	cbz	r3, 81cbe <_read_r+0x1e>
   81cbc:	602b      	str	r3, [r5, #0]
   81cbe:	bd38      	pop	{r3, r4, r5, pc}
   81cc0:	200709a0 	.word	0x200709a0

00081cc4 <_global_impure_ptr>:
   81cc4:	20070010 00000043                       ... C...

00081ccc <_init>:
   81ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81cce:	bf00      	nop
   81cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81cd2:	bc08      	pop	{r3}
   81cd4:	469e      	mov	lr, r3
   81cd6:	4770      	bx	lr

00081cd8 <__init_array_start>:
   81cd8:	000810fd 	.word	0x000810fd

00081cdc <__frame_dummy_init_array_entry>:
   81cdc:	0008016d                                m...

00081ce0 <_fini>:
   81ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81ce2:	bf00      	nop
   81ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81ce6:	bc08      	pop	{r3}
   81ce8:	469e      	mov	lr, r3
   81cea:	4770      	bx	lr

00081cec <__fini_array_start>:
   81cec:	00080145 	.word	0x00080145
