
HoverCraft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .text         00002d78  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000844  20070000  00082d78  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001d8  20070844  000835bc  00010844  2**2
                  ALLOC
  3 .stack        00002004  20070a1c  00083794  00010844  2**0
=======
  0 .text         00002f28  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000844  20070000  00082f28  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001d8  20070844  0008376c  00010844  2**2
                  ALLOC
  3 .stack        00002004  20070a1c  00083944  00010844  2**0
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010844  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001086d  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
  6 .debug_info   0001157f  00000000  00000000  000108c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002a69  00000000  00000000  00021e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007c29  00000000  00000000  000248b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d98  00000000  00000000  0002c4d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c80  00000000  00000000  0002d271  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00008d72  00000000  00000000  0002def1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010e38  00000000  00000000  00036c63  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000709b0  00000000  00000000  00047a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000024fc  00000000  00000000  000b844c  2**2
=======
  6 .debug_info   000116c8  00000000  00000000  000108c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002a4e  00000000  00000000  00021f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007cd9  00000000  00000000  000249de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000db8  00000000  00000000  0002c6b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ca0  00000000  00000000  0002d46f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00008d7d  00000000  00000000  0002e10f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010e93  00000000  00000000  00036e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000709f6  00000000  00000000  00047d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000256c  00000000  00000000  000b8718  2**2
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072a20 	.word	0x20072a20
<<<<<<< HEAD
   80004:	00081841 	.word	0x00081841
   80008:	0008183d 	.word	0x0008183d
   8000c:	0008183d 	.word	0x0008183d
   80010:	0008183d 	.word	0x0008183d
   80014:	0008183d 	.word	0x0008183d
   80018:	0008183d 	.word	0x0008183d
	...
   8002c:	000810fd 	.word	0x000810fd
   80030:	0008183d 	.word	0x0008183d
   80034:	00000000 	.word	0x00000000
   80038:	00081135 	.word	0x00081135
   8003c:	00081171 	.word	0x00081171
   80040:	0008183d 	.word	0x0008183d
   80044:	0008183d 	.word	0x0008183d
   80048:	0008183d 	.word	0x0008183d
   8004c:	0008183d 	.word	0x0008183d
   80050:	0008183d 	.word	0x0008183d
   80054:	0008183d 	.word	0x0008183d
   80058:	0008183d 	.word	0x0008183d
   8005c:	0008183d 	.word	0x0008183d
   80060:	0008183d 	.word	0x0008183d
   80064:	0008183d 	.word	0x0008183d
   80068:	00000000 	.word	0x00000000
   8006c:	000816ad 	.word	0x000816ad
   80070:	000816c1 	.word	0x000816c1
   80074:	000816d5 	.word	0x000816d5
   80078:	000816e9 	.word	0x000816e9
	...
   80084:	0008183d 	.word	0x0008183d
   80088:	0008183d 	.word	0x0008183d
   8008c:	0008183d 	.word	0x0008183d
   80090:	0008183d 	.word	0x0008183d
   80094:	0008183d 	.word	0x0008183d
   80098:	0008183d 	.word	0x0008183d
   8009c:	0008183d 	.word	0x0008183d
   800a0:	0008183d 	.word	0x0008183d
   800a4:	00000000 	.word	0x00000000
   800a8:	0008183d 	.word	0x0008183d
   800ac:	0008183d 	.word	0x0008183d
   800b0:	0008183d 	.word	0x0008183d
   800b4:	0008183d 	.word	0x0008183d
   800b8:	0008183d 	.word	0x0008183d
   800bc:	0008183d 	.word	0x0008183d
   800c0:	0008183d 	.word	0x0008183d
   800c4:	0008183d 	.word	0x0008183d
   800c8:	0008183d 	.word	0x0008183d
   800cc:	0008183d 	.word	0x0008183d
   800d0:	0008183d 	.word	0x0008183d
   800d4:	0008183d 	.word	0x0008183d
   800d8:	0008183d 	.word	0x0008183d
   800dc:	0008183d 	.word	0x0008183d
   800e0:	0008183d 	.word	0x0008183d
   800e4:	0008183d 	.word	0x0008183d
   800e8:	0008183d 	.word	0x0008183d
   800ec:	0008183d 	.word	0x0008183d
   800f0:	0008183d 	.word	0x0008183d
=======
   80004:	0008198d 	.word	0x0008198d
   80008:	00081989 	.word	0x00081989
   8000c:	00081989 	.word	0x00081989
   80010:	00081989 	.word	0x00081989
   80014:	00081989 	.word	0x00081989
   80018:	00081989 	.word	0x00081989
	...
   8002c:	00081249 	.word	0x00081249
   80030:	00081989 	.word	0x00081989
   80034:	00000000 	.word	0x00000000
   80038:	00081281 	.word	0x00081281
   8003c:	000812bd 	.word	0x000812bd
   80040:	00081989 	.word	0x00081989
   80044:	00081989 	.word	0x00081989
   80048:	00081989 	.word	0x00081989
   8004c:	00081989 	.word	0x00081989
   80050:	00081989 	.word	0x00081989
   80054:	00081989 	.word	0x00081989
   80058:	00081989 	.word	0x00081989
   8005c:	00081989 	.word	0x00081989
   80060:	00081989 	.word	0x00081989
   80064:	00081989 	.word	0x00081989
   80068:	00000000 	.word	0x00000000
   8006c:	000817f9 	.word	0x000817f9
   80070:	0008180d 	.word	0x0008180d
   80074:	00081821 	.word	0x00081821
   80078:	00081835 	.word	0x00081835
	...
   80084:	00081989 	.word	0x00081989
   80088:	00081989 	.word	0x00081989
   8008c:	00081989 	.word	0x00081989
   80090:	00081989 	.word	0x00081989
   80094:	00081989 	.word	0x00081989
   80098:	00081989 	.word	0x00081989
   8009c:	00081989 	.word	0x00081989
   800a0:	00081989 	.word	0x00081989
   800a4:	00000000 	.word	0x00000000
   800a8:	00081989 	.word	0x00081989
   800ac:	00081989 	.word	0x00081989
   800b0:	00081989 	.word	0x00081989
   800b4:	00081989 	.word	0x00081989
   800b8:	00081989 	.word	0x00081989
   800bc:	00081989 	.word	0x00081989
   800c0:	00081989 	.word	0x00081989
   800c4:	00081989 	.word	0x00081989
   800c8:	00081989 	.word	0x00081989
   800cc:	00081989 	.word	0x00081989
   800d0:	00081989 	.word	0x00081989
   800d4:	00081989 	.word	0x00081989
   800d8:	00081989 	.word	0x00081989
   800dc:	00081989 	.word	0x00081989
   800e0:	00081989 	.word	0x00081989
   800e4:	00081989 	.word	0x00081989
   800e8:	00081989 	.word	0x00081989
   800ec:	00081989 	.word	0x00081989
   800f0:	00081989 	.word	0x00081989
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070844 	.word	0x20070844
   80110:	00000000 	.word	0x00000000
<<<<<<< HEAD
   80114:	00082d78 	.word	0x00082d78
=======
   80114:	00082f28 	.word	0x00082f28
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
<<<<<<< HEAD
   80138:	00082d78 	.word	0x00082d78
   8013c:	20070848 	.word	0x20070848
   80140:	00082d78 	.word	0x00082d78
=======
   80138:	00082f28 	.word	0x00082f28
   8013c:	20070848 	.word	0x20070848
   80140:	00082f28 	.word	0x00082f28
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
   80144:	00000000 	.word	0x00000000

00080148 <main>:
#include "Util/analogDigitalConverter.h"
#include "Util/pwmInit.h"
#include "test_runner.h"

int main (void)
{
   80148:	b508      	push	{r3, lr}
	board_init();
   8014a:	4b04      	ldr	r3, [pc, #16]	; (8015c <main+0x14>)
   8014c:	4798      	blx	r3
	sysclk_init();
   8014e:	4b04      	ldr	r3, [pc, #16]	; (80160 <main+0x18>)
   80150:	4798      	blx	r3
	//initialize_pwm();
	test_function();
   80152:	4b04      	ldr	r3, [pc, #16]	; (80164 <main+0x1c>)
   80154:	4798      	blx	r3
	//update_dutyCycle_DAC1(999);		// 999 is the highest duty cycle
	//update_dutyCycle_36(600);
	//update_dutyCycle_38(600);
	//update_dutyCycle_40(500);
	//update_dutyCycle_9(700);
}
   80156:	2000      	movs	r0, #0
   80158:	bd08      	pop	{r3, pc}
   8015a:	bf00      	nop
<<<<<<< HEAD
   8015c:	000813bd 	.word	0x000813bd
   80160:	00081359 	.word	0x00081359
   80164:	000803ad 	.word	0x000803ad
=======
   8015c:	00081509 	.word	0x00081509
   80160:	000814a5 	.word	0x000814a5
   80164:	0008049d 	.word	0x0008049d
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

00080168 <setUp>:
#include <asf.h>
#include "unity.h"

Adc* adc;

void setUp(){
   80168:	4770      	bx	lr
   8016a:	bf00      	nop

0008016c <tearDown>:
}

void tearDown(){
   8016c:	4770      	bx	lr
   8016e:	bf00      	nop

<<<<<<< HEAD
00080170 <test_pwm_channel_enabled>:
#include "unity.h"
#include "asf.h"

/* Method testing DAC1 is enabled */
void test_pwm_channel_enabled(void)
{
   80170:	b530      	push	{r4, r5, lr}
   80172:	b083      	sub	sp, #12
	pmc_enable_periph_clk(ID_PWM);
   80174:	2024      	movs	r0, #36	; 0x24
   80176:	4b0e      	ldr	r3, [pc, #56]	; (801b0 <test_pwm_channel_enabled+0x40>)
   80178:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL_0);
   8017a:	4c0e      	ldr	r4, [pc, #56]	; (801b4 <test_pwm_channel_enabled+0x44>)
   8017c:	4620      	mov	r0, r4
   8017e:	2100      	movs	r1, #0
   80180:	4d0d      	ldr	r5, [pc, #52]	; (801b8 <test_pwm_channel_enabled+0x48>)
   80182:	47a8      	blx	r5
	pwm_channel_enable(PWM, PWM_CHANNEL_1);
   80184:	4620      	mov	r0, r4
   80186:	2101      	movs	r1, #1
   80188:	47a8      	blx	r5
	pwm_channel_enable(PWM, PWM_CHANNEL_2);
   8018a:	4620      	mov	r0, r4
   8018c:	2102      	movs	r1, #2
   8018e:	47a8      	blx	r5
	pwm_channel_enable(PWM, PWM_CHANNEL_3);
   80190:	4620      	mov	r0, r4
   80192:	2103      	movs	r1, #3
   80194:	47a8      	blx	r5
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   80196:	4620      	mov	r0, r4
   80198:	2104      	movs	r1, #4
   8019a:	47a8      	blx	r5
	TEST_ASSERT_EQUAL_HEX32(0x0000001F, PWM->PWM_SR);	
   8019c:	68e1      	ldr	r1, [r4, #12]
   8019e:	2344      	movs	r3, #68	; 0x44
   801a0:	9300      	str	r3, [sp, #0]
   801a2:	201f      	movs	r0, #31
   801a4:	2200      	movs	r2, #0
   801a6:	2314      	movs	r3, #20
   801a8:	4c04      	ldr	r4, [pc, #16]	; (801bc <test_pwm_channel_enabled+0x4c>)
   801aa:	47a0      	blx	r4
   801ac:	b003      	add	sp, #12
   801ae:	bd30      	pop	{r4, r5, pc}
   801b0:	000817e5 	.word	0x000817e5
   801b4:	40094000 	.word	0x40094000
   801b8:	0008134d 	.word	0x0008134d
   801bc:	00080e09 	.word	0x00080e09

000801c0 <usart_serial_getchar>:
=======
00080170 <test_pwm_channel_0>:
#include "asf.h"
#include "test_pwm.h"

/* Method testing channel 0 is enabled */
void test_pwm_channel_0(void)
{
   80170:	b510      	push	{r4, lr}
   80172:	b082      	sub	sp, #8
	pmc_enable_periph_clk(ID_PWM);
   80174:	2024      	movs	r0, #36	; 0x24
   80176:	4b09      	ldr	r3, [pc, #36]	; (8019c <test_pwm_channel_0+0x2c>)
   80178:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL_0);
   8017a:	4c09      	ldr	r4, [pc, #36]	; (801a0 <test_pwm_channel_0+0x30>)
   8017c:	4620      	mov	r0, r4
   8017e:	2100      	movs	r1, #0
   80180:	4b08      	ldr	r3, [pc, #32]	; (801a4 <test_pwm_channel_0+0x34>)
   80182:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH_MESSAGE(0, PWM->PWM_SR,"Wrong channel in enabled");
   80184:	68e2      	ldr	r2, [r4, #12]
   80186:	2311      	movs	r3, #17
   80188:	9300      	str	r3, [sp, #0]
   8018a:	2001      	movs	r0, #1
   8018c:	f04f 31ff 	mov.w	r1, #4294967295
   80190:	4b05      	ldr	r3, [pc, #20]	; (801a8 <test_pwm_channel_0+0x38>)
   80192:	4c06      	ldr	r4, [pc, #24]	; (801ac <test_pwm_channel_0+0x3c>)
   80194:	47a0      	blx	r4
}
   80196:	b002      	add	sp, #8
   80198:	bd10      	pop	{r4, pc}
   8019a:	bf00      	nop
   8019c:	00081931 	.word	0x00081931
   801a0:	40094000 	.word	0x40094000
   801a4:	00081499 	.word	0x00081499
   801a8:	00082dec 	.word	0x00082dec
   801ac:	00080f51 	.word	0x00080f51

000801b0 <test_pwm_channel_1>:

/* Method for testing channel 1 is enabled */
void test_pwm_channel_1(void)
{
   801b0:	b510      	push	{r4, lr}
   801b2:	b082      	sub	sp, #8
	pmc_enable_periph_clk(ID_PWM);
   801b4:	2024      	movs	r0, #36	; 0x24
   801b6:	4b09      	ldr	r3, [pc, #36]	; (801dc <test_pwm_channel_1+0x2c>)
   801b8:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL_1);
   801ba:	4c09      	ldr	r4, [pc, #36]	; (801e0 <test_pwm_channel_1+0x30>)
   801bc:	4620      	mov	r0, r4
   801be:	2101      	movs	r1, #1
   801c0:	4b08      	ldr	r3, [pc, #32]	; (801e4 <test_pwm_channel_1+0x34>)
   801c2:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH_MESSAGE(1, PWM->PWM_SR, "Wrong channel is enabled");
   801c4:	68e2      	ldr	r2, [r4, #12]
   801c6:	2319      	movs	r3, #25
   801c8:	9300      	str	r3, [sp, #0]
   801ca:	2002      	movs	r0, #2
   801cc:	f04f 31ff 	mov.w	r1, #4294967295
   801d0:	4b05      	ldr	r3, [pc, #20]	; (801e8 <test_pwm_channel_1+0x38>)
   801d2:	4c06      	ldr	r4, [pc, #24]	; (801ec <test_pwm_channel_1+0x3c>)
   801d4:	47a0      	blx	r4
}
   801d6:	b002      	add	sp, #8
   801d8:	bd10      	pop	{r4, pc}
   801da:	bf00      	nop
   801dc:	00081931 	.word	0x00081931
   801e0:	40094000 	.word	0x40094000
   801e4:	00081499 	.word	0x00081499
   801e8:	00082e08 	.word	0x00082e08
   801ec:	00080f51 	.word	0x00080f51

000801f0 <test_pwm_channel_2>:

/* Method for testing channel 2 is enabled */
void test_pwm_channel_2(void)
{
   801f0:	b510      	push	{r4, lr}
   801f2:	b082      	sub	sp, #8
	pmc_enable_periph_clk(ID_PWM);
   801f4:	2024      	movs	r0, #36	; 0x24
   801f6:	4b09      	ldr	r3, [pc, #36]	; (8021c <test_pwm_channel_2+0x2c>)
   801f8:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL_2);
   801fa:	4c09      	ldr	r4, [pc, #36]	; (80220 <test_pwm_channel_2+0x30>)
   801fc:	4620      	mov	r0, r4
   801fe:	2102      	movs	r1, #2
   80200:	4b08      	ldr	r3, [pc, #32]	; (80224 <test_pwm_channel_2+0x34>)
   80202:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH_MESSAGE(2, PWM->PWM_SR, "Wrong channel is enabled");
   80204:	68e2      	ldr	r2, [r4, #12]
   80206:	2321      	movs	r3, #33	; 0x21
   80208:	9300      	str	r3, [sp, #0]
   8020a:	2004      	movs	r0, #4
   8020c:	f04f 31ff 	mov.w	r1, #4294967295
   80210:	4b05      	ldr	r3, [pc, #20]	; (80228 <test_pwm_channel_2+0x38>)
   80212:	4c06      	ldr	r4, [pc, #24]	; (8022c <test_pwm_channel_2+0x3c>)
   80214:	47a0      	blx	r4
}
   80216:	b002      	add	sp, #8
   80218:	bd10      	pop	{r4, pc}
   8021a:	bf00      	nop
   8021c:	00081931 	.word	0x00081931
   80220:	40094000 	.word	0x40094000
   80224:	00081499 	.word	0x00081499
   80228:	00082e08 	.word	0x00082e08
   8022c:	00080f51 	.word	0x00080f51

00080230 <test_pwm_channel_3>:

/* Method for testing channel 3 is enabled */
void test_pwm_channel_3(void)
{
   80230:	b510      	push	{r4, lr}
   80232:	b082      	sub	sp, #8
	pmc_enable_periph_clk(ID_PWM);
   80234:	2024      	movs	r0, #36	; 0x24
   80236:	4b09      	ldr	r3, [pc, #36]	; (8025c <test_pwm_channel_3+0x2c>)
   80238:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL_3);
   8023a:	4c09      	ldr	r4, [pc, #36]	; (80260 <test_pwm_channel_3+0x30>)
   8023c:	4620      	mov	r0, r4
   8023e:	2103      	movs	r1, #3
   80240:	4b08      	ldr	r3, [pc, #32]	; (80264 <test_pwm_channel_3+0x34>)
   80242:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH_MESSAGE(3, PWM->PWM_SR, "Wrong channel is enabled");
   80244:	68e2      	ldr	r2, [r4, #12]
   80246:	2329      	movs	r3, #41	; 0x29
   80248:	9300      	str	r3, [sp, #0]
   8024a:	2008      	movs	r0, #8
   8024c:	f04f 31ff 	mov.w	r1, #4294967295
   80250:	4b05      	ldr	r3, [pc, #20]	; (80268 <test_pwm_channel_3+0x38>)
   80252:	4c06      	ldr	r4, [pc, #24]	; (8026c <test_pwm_channel_3+0x3c>)
   80254:	47a0      	blx	r4
}
   80256:	b002      	add	sp, #8
   80258:	bd10      	pop	{r4, pc}
   8025a:	bf00      	nop
   8025c:	00081931 	.word	0x00081931
   80260:	40094000 	.word	0x40094000
   80264:	00081499 	.word	0x00081499
   80268:	00082e08 	.word	0x00082e08
   8026c:	00080f51 	.word	0x00080f51

00080270 <test_pwm_channel_4>:

/* Method for testing channel 4 is enabled */
void test_pwm_channel_4(void)
{
   80270:	b510      	push	{r4, lr}
   80272:	b082      	sub	sp, #8
	pmc_enable_periph_clk(ID_PWM);
   80274:	2024      	movs	r0, #36	; 0x24
   80276:	4b09      	ldr	r3, [pc, #36]	; (8029c <test_pwm_channel_4+0x2c>)
   80278:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   8027a:	4c09      	ldr	r4, [pc, #36]	; (802a0 <test_pwm_channel_4+0x30>)
   8027c:	4620      	mov	r0, r4
   8027e:	2104      	movs	r1, #4
   80280:	4b08      	ldr	r3, [pc, #32]	; (802a4 <test_pwm_channel_4+0x34>)
   80282:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH_MESSAGE(4, PWM->PWM_SR, "Wrong channel is enabled");
   80284:	68e2      	ldr	r2, [r4, #12]
   80286:	2331      	movs	r3, #49	; 0x31
   80288:	9300      	str	r3, [sp, #0]
   8028a:	2010      	movs	r0, #16
   8028c:	f04f 31ff 	mov.w	r1, #4294967295
   80290:	4b05      	ldr	r3, [pc, #20]	; (802a8 <test_pwm_channel_4+0x38>)
   80292:	4c06      	ldr	r4, [pc, #24]	; (802ac <test_pwm_channel_4+0x3c>)
   80294:	47a0      	blx	r4
   80296:	b002      	add	sp, #8
   80298:	bd10      	pop	{r4, pc}
   8029a:	bf00      	nop
   8029c:	00081931 	.word	0x00081931
   802a0:	40094000 	.word	0x40094000
   802a4:	00081499 	.word	0x00081499
   802a8:	00082e08 	.word	0x00082e08
   802ac:	00080f51 	.word	0x00080f51

000802b0 <usart_serial_getchar>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
<<<<<<< HEAD
   801c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   801c2:	b083      	sub	sp, #12
   801c4:	4604      	mov	r4, r0
   801c6:	460d      	mov	r5, r1
=======
   802b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   802b2:	b083      	sub	sp, #12
   802b4:	4604      	mov	r4, r0
   802b6:	460d      	mov	r5, r1
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	uint32_t val;

#ifdef UART
	if (UART == (Uart*)p_usart) {
<<<<<<< HEAD
   801c8:	4b1f      	ldr	r3, [pc, #124]	; (80248 <usart_serial_getchar+0x88>)
   801ca:	4298      	cmp	r0, r3
   801cc:	d107      	bne.n	801de <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
   801ce:	461f      	mov	r7, r3
   801d0:	4e1e      	ldr	r6, [pc, #120]	; (8024c <usart_serial_getchar+0x8c>)
   801d2:	4638      	mov	r0, r7
   801d4:	4629      	mov	r1, r5
   801d6:	47b0      	blx	r6
   801d8:	2800      	cmp	r0, #0
   801da:	d1fa      	bne.n	801d2 <usart_serial_getchar+0x12>
   801dc:	e019      	b.n	80212 <usart_serial_getchar+0x52>
=======
   802b8:	4b1f      	ldr	r3, [pc, #124]	; (80338 <usart_serial_getchar+0x88>)
   802ba:	4298      	cmp	r0, r3
   802bc:	d107      	bne.n	802ce <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
   802be:	461f      	mov	r7, r3
   802c0:	4e1e      	ldr	r6, [pc, #120]	; (8033c <usart_serial_getchar+0x8c>)
   802c2:	4638      	mov	r0, r7
   802c4:	4629      	mov	r1, r5
   802c6:	47b0      	blx	r6
   802c8:	2800      	cmp	r0, #0
   802ca:	d1fa      	bne.n	802c2 <usart_serial_getchar+0x12>
   802cc:	e019      	b.n	80302 <usart_serial_getchar+0x52>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
<<<<<<< HEAD
   801de:	4b1c      	ldr	r3, [pc, #112]	; (80250 <usart_serial_getchar+0x90>)
   801e0:	4298      	cmp	r0, r3
   801e2:	d109      	bne.n	801f8 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
   801e4:	461f      	mov	r7, r3
   801e6:	4e1b      	ldr	r6, [pc, #108]	; (80254 <usart_serial_getchar+0x94>)
   801e8:	4638      	mov	r0, r7
   801ea:	a901      	add	r1, sp, #4
   801ec:	47b0      	blx	r6
   801ee:	2800      	cmp	r0, #0
   801f0:	d1fa      	bne.n	801e8 <usart_serial_getchar+0x28>
		*data = (uint8_t)(val & 0xFF);
   801f2:	9b01      	ldr	r3, [sp, #4]
   801f4:	702b      	strb	r3, [r5, #0]
   801f6:	e019      	b.n	8022c <usart_serial_getchar+0x6c>
=======
   802ce:	4b1c      	ldr	r3, [pc, #112]	; (80340 <usart_serial_getchar+0x90>)
   802d0:	4298      	cmp	r0, r3
   802d2:	d109      	bne.n	802e8 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
   802d4:	461f      	mov	r7, r3
   802d6:	4e1b      	ldr	r6, [pc, #108]	; (80344 <usart_serial_getchar+0x94>)
   802d8:	4638      	mov	r0, r7
   802da:	a901      	add	r1, sp, #4
   802dc:	47b0      	blx	r6
   802de:	2800      	cmp	r0, #0
   802e0:	d1fa      	bne.n	802d8 <usart_serial_getchar+0x28>
		*data = (uint8_t)(val & 0xFF);
   802e2:	9b01      	ldr	r3, [sp, #4]
   802e4:	702b      	strb	r3, [r5, #0]
   802e6:	e019      	b.n	8031c <usart_serial_getchar+0x6c>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
<<<<<<< HEAD
   801f8:	4b17      	ldr	r3, [pc, #92]	; (80258 <usart_serial_getchar+0x98>)
   801fa:	4298      	cmp	r0, r3
   801fc:	d109      	bne.n	80212 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
   801fe:	461e      	mov	r6, r3
   80200:	4c14      	ldr	r4, [pc, #80]	; (80254 <usart_serial_getchar+0x94>)
   80202:	4630      	mov	r0, r6
   80204:	a901      	add	r1, sp, #4
   80206:	47a0      	blx	r4
   80208:	2800      	cmp	r0, #0
   8020a:	d1fa      	bne.n	80202 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   8020c:	9b01      	ldr	r3, [sp, #4]
   8020e:	702b      	strb	r3, [r5, #0]
   80210:	e018      	b.n	80244 <usart_serial_getchar+0x84>
=======
   802e8:	4b17      	ldr	r3, [pc, #92]	; (80348 <usart_serial_getchar+0x98>)
   802ea:	4298      	cmp	r0, r3
   802ec:	d109      	bne.n	80302 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
   802ee:	461e      	mov	r6, r3
   802f0:	4c14      	ldr	r4, [pc, #80]	; (80344 <usart_serial_getchar+0x94>)
   802f2:	4630      	mov	r0, r6
   802f4:	a901      	add	r1, sp, #4
   802f6:	47a0      	blx	r4
   802f8:	2800      	cmp	r0, #0
   802fa:	d1fa      	bne.n	802f2 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   802fc:	9b01      	ldr	r3, [sp, #4]
   802fe:	702b      	strb	r3, [r5, #0]
   80300:	e018      	b.n	80334 <usart_serial_getchar+0x84>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
<<<<<<< HEAD
   80212:	4b12      	ldr	r3, [pc, #72]	; (8025c <usart_serial_getchar+0x9c>)
   80214:	429c      	cmp	r4, r3
   80216:	d109      	bne.n	8022c <usart_serial_getchar+0x6c>
		while (usart_read(p_usart, &val));
   80218:	461e      	mov	r6, r3
   8021a:	4c0e      	ldr	r4, [pc, #56]	; (80254 <usart_serial_getchar+0x94>)
   8021c:	4630      	mov	r0, r6
   8021e:	a901      	add	r1, sp, #4
   80220:	47a0      	blx	r4
   80222:	2800      	cmp	r0, #0
   80224:	d1fa      	bne.n	8021c <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
   80226:	9b01      	ldr	r3, [sp, #4]
   80228:	702b      	strb	r3, [r5, #0]
   8022a:	e00b      	b.n	80244 <usart_serial_getchar+0x84>
=======
   80302:	4b12      	ldr	r3, [pc, #72]	; (8034c <usart_serial_getchar+0x9c>)
   80304:	429c      	cmp	r4, r3
   80306:	d109      	bne.n	8031c <usart_serial_getchar+0x6c>
		while (usart_read(p_usart, &val));
   80308:	461e      	mov	r6, r3
   8030a:	4c0e      	ldr	r4, [pc, #56]	; (80344 <usart_serial_getchar+0x94>)
   8030c:	4630      	mov	r0, r6
   8030e:	a901      	add	r1, sp, #4
   80310:	47a0      	blx	r4
   80312:	2800      	cmp	r0, #0
   80314:	d1fa      	bne.n	8030c <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
   80316:	9b01      	ldr	r3, [sp, #4]
   80318:	702b      	strb	r3, [r5, #0]
   8031a:	e00b      	b.n	80334 <usart_serial_getchar+0x84>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
<<<<<<< HEAD
   8022c:	4b0c      	ldr	r3, [pc, #48]	; (80260 <usart_serial_getchar+0xa0>)
   8022e:	429c      	cmp	r4, r3
   80230:	d108      	bne.n	80244 <usart_serial_getchar+0x84>
		while (usart_read(p_usart, &val));
   80232:	461e      	mov	r6, r3
   80234:	4c07      	ldr	r4, [pc, #28]	; (80254 <usart_serial_getchar+0x94>)
   80236:	4630      	mov	r0, r6
   80238:	a901      	add	r1, sp, #4
   8023a:	47a0      	blx	r4
   8023c:	2800      	cmp	r0, #0
   8023e:	d1fa      	bne.n	80236 <usart_serial_getchar+0x76>
		*data = (uint8_t)(val & 0xFF);
   80240:	9b01      	ldr	r3, [sp, #4]
   80242:	702b      	strb	r3, [r5, #0]
=======
   8031c:	4b0c      	ldr	r3, [pc, #48]	; (80350 <usart_serial_getchar+0xa0>)
   8031e:	429c      	cmp	r4, r3
   80320:	d108      	bne.n	80334 <usart_serial_getchar+0x84>
		while (usart_read(p_usart, &val));
   80322:	461e      	mov	r6, r3
   80324:	4c07      	ldr	r4, [pc, #28]	; (80344 <usart_serial_getchar+0x94>)
   80326:	4630      	mov	r0, r6
   80328:	a901      	add	r1, sp, #4
   8032a:	47a0      	blx	r4
   8032c:	2800      	cmp	r0, #0
   8032e:	d1fa      	bne.n	80326 <usart_serial_getchar+0x76>
		*data = (uint8_t)(val & 0xFF);
   80330:	9b01      	ldr	r3, [sp, #4]
   80332:	702b      	strb	r3, [r5, #0]
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
<<<<<<< HEAD
   80244:	b003      	add	sp, #12
   80246:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80248:	400e0800 	.word	0x400e0800
   8024c:	000804c1 	.word	0x000804c1
   80250:	40098000 	.word	0x40098000
   80254:	000804e9 	.word	0x000804e9
   80258:	4009c000 	.word	0x4009c000
   8025c:	400a0000 	.word	0x400a0000
   80260:	400a4000 	.word	0x400a4000

00080264 <usart_serial_putchar>:
=======
   80334:	b003      	add	sp, #12
   80336:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80338:	400e0800 	.word	0x400e0800
   8033c:	000805f1 	.word	0x000805f1
   80340:	40098000 	.word	0x40098000
   80344:	00080619 	.word	0x00080619
   80348:	4009c000 	.word	0x4009c000
   8034c:	400a0000 	.word	0x400a0000
   80350:	400a4000 	.word	0x400a4000

00080354 <usart_serial_putchar>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
<<<<<<< HEAD
   80264:	b570      	push	{r4, r5, r6, lr}
   80266:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80268:	4b21      	ldr	r3, [pc, #132]	; (802f0 <usart_serial_putchar+0x8c>)
   8026a:	4298      	cmp	r0, r3
   8026c:	d107      	bne.n	8027e <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   8026e:	461e      	mov	r6, r3
   80270:	4d20      	ldr	r5, [pc, #128]	; (802f4 <usart_serial_putchar+0x90>)
   80272:	4630      	mov	r0, r6
   80274:	4621      	mov	r1, r4
   80276:	47a8      	blx	r5
   80278:	2800      	cmp	r0, #0
   8027a:	d1fa      	bne.n	80272 <usart_serial_putchar+0xe>
   8027c:	e02b      	b.n	802d6 <usart_serial_putchar+0x72>
=======
   80354:	b570      	push	{r4, r5, r6, lr}
   80356:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80358:	4b21      	ldr	r3, [pc, #132]	; (803e0 <usart_serial_putchar+0x8c>)
   8035a:	4298      	cmp	r0, r3
   8035c:	d107      	bne.n	8036e <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   8035e:	461e      	mov	r6, r3
   80360:	4d20      	ldr	r5, [pc, #128]	; (803e4 <usart_serial_putchar+0x90>)
   80362:	4630      	mov	r0, r6
   80364:	4621      	mov	r1, r4
   80366:	47a8      	blx	r5
   80368:	2800      	cmp	r0, #0
   8036a:	d1fa      	bne.n	80362 <usart_serial_putchar+0xe>
   8036c:	e02b      	b.n	803c6 <usart_serial_putchar+0x72>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
<<<<<<< HEAD
   8027e:	4b1e      	ldr	r3, [pc, #120]	; (802f8 <usart_serial_putchar+0x94>)
   80280:	4298      	cmp	r0, r3
   80282:	d107      	bne.n	80294 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80284:	461e      	mov	r6, r3
   80286:	4d1d      	ldr	r5, [pc, #116]	; (802fc <usart_serial_putchar+0x98>)
   80288:	4630      	mov	r0, r6
   8028a:	4621      	mov	r1, r4
   8028c:	47a8      	blx	r5
   8028e:	2800      	cmp	r0, #0
   80290:	d1fa      	bne.n	80288 <usart_serial_putchar+0x24>
   80292:	e022      	b.n	802da <usart_serial_putchar+0x76>
=======
   8036e:	4b1e      	ldr	r3, [pc, #120]	; (803e8 <usart_serial_putchar+0x94>)
   80370:	4298      	cmp	r0, r3
   80372:	d107      	bne.n	80384 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80374:	461e      	mov	r6, r3
   80376:	4d1d      	ldr	r5, [pc, #116]	; (803ec <usart_serial_putchar+0x98>)
   80378:	4630      	mov	r0, r6
   8037a:	4621      	mov	r1, r4
   8037c:	47a8      	blx	r5
   8037e:	2800      	cmp	r0, #0
   80380:	d1fa      	bne.n	80378 <usart_serial_putchar+0x24>
   80382:	e022      	b.n	803ca <usart_serial_putchar+0x76>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
<<<<<<< HEAD
   80294:	4b1a      	ldr	r3, [pc, #104]	; (80300 <usart_serial_putchar+0x9c>)
   80296:	4298      	cmp	r0, r3
   80298:	d107      	bne.n	802aa <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   8029a:	461e      	mov	r6, r3
   8029c:	4d17      	ldr	r5, [pc, #92]	; (802fc <usart_serial_putchar+0x98>)
   8029e:	4630      	mov	r0, r6
   802a0:	4621      	mov	r1, r4
   802a2:	47a8      	blx	r5
   802a4:	2800      	cmp	r0, #0
   802a6:	d1fa      	bne.n	8029e <usart_serial_putchar+0x3a>
   802a8:	e019      	b.n	802de <usart_serial_putchar+0x7a>
=======
   80384:	4b1a      	ldr	r3, [pc, #104]	; (803f0 <usart_serial_putchar+0x9c>)
   80386:	4298      	cmp	r0, r3
   80388:	d107      	bne.n	8039a <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   8038a:	461e      	mov	r6, r3
   8038c:	4d17      	ldr	r5, [pc, #92]	; (803ec <usart_serial_putchar+0x98>)
   8038e:	4630      	mov	r0, r6
   80390:	4621      	mov	r1, r4
   80392:	47a8      	blx	r5
   80394:	2800      	cmp	r0, #0
   80396:	d1fa      	bne.n	8038e <usart_serial_putchar+0x3a>
   80398:	e019      	b.n	803ce <usart_serial_putchar+0x7a>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
<<<<<<< HEAD
   802aa:	4b16      	ldr	r3, [pc, #88]	; (80304 <usart_serial_putchar+0xa0>)
   802ac:	4298      	cmp	r0, r3
   802ae:	d107      	bne.n	802c0 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   802b0:	461e      	mov	r6, r3
   802b2:	4d12      	ldr	r5, [pc, #72]	; (802fc <usart_serial_putchar+0x98>)
   802b4:	4630      	mov	r0, r6
   802b6:	4621      	mov	r1, r4
   802b8:	47a8      	blx	r5
   802ba:	2800      	cmp	r0, #0
   802bc:	d1fa      	bne.n	802b4 <usart_serial_putchar+0x50>
   802be:	e010      	b.n	802e2 <usart_serial_putchar+0x7e>
=======
   8039a:	4b16      	ldr	r3, [pc, #88]	; (803f4 <usart_serial_putchar+0xa0>)
   8039c:	4298      	cmp	r0, r3
   8039e:	d107      	bne.n	803b0 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   803a0:	461e      	mov	r6, r3
   803a2:	4d12      	ldr	r5, [pc, #72]	; (803ec <usart_serial_putchar+0x98>)
   803a4:	4630      	mov	r0, r6
   803a6:	4621      	mov	r1, r4
   803a8:	47a8      	blx	r5
   803aa:	2800      	cmp	r0, #0
   803ac:	d1fa      	bne.n	803a4 <usart_serial_putchar+0x50>
   803ae:	e010      	b.n	803d2 <usart_serial_putchar+0x7e>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
<<<<<<< HEAD
   802c0:	4b11      	ldr	r3, [pc, #68]	; (80308 <usart_serial_putchar+0xa4>)
   802c2:	4298      	cmp	r0, r3
   802c4:	d10f      	bne.n	802e6 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   802c6:	461e      	mov	r6, r3
   802c8:	4d0c      	ldr	r5, [pc, #48]	; (802fc <usart_serial_putchar+0x98>)
   802ca:	4630      	mov	r0, r6
   802cc:	4621      	mov	r1, r4
   802ce:	47a8      	blx	r5
   802d0:	2800      	cmp	r0, #0
   802d2:	d1fa      	bne.n	802ca <usart_serial_putchar+0x66>
   802d4:	e009      	b.n	802ea <usart_serial_putchar+0x86>
=======
   803b0:	4b11      	ldr	r3, [pc, #68]	; (803f8 <usart_serial_putchar+0xa4>)
   803b2:	4298      	cmp	r0, r3
   803b4:	d10f      	bne.n	803d6 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   803b6:	461e      	mov	r6, r3
   803b8:	4d0c      	ldr	r5, [pc, #48]	; (803ec <usart_serial_putchar+0x98>)
   803ba:	4630      	mov	r0, r6
   803bc:	4621      	mov	r1, r4
   803be:	47a8      	blx	r5
   803c0:	2800      	cmp	r0, #0
   803c2:	d1fa      	bne.n	803ba <usart_serial_putchar+0x66>
   803c4:	e009      	b.n	803da <usart_serial_putchar+0x86>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
<<<<<<< HEAD
   802d6:	2001      	movs	r0, #1
   802d8:	bd70      	pop	{r4, r5, r6, pc}
=======
   803c6:	2001      	movs	r0, #1
   803c8:	bd70      	pop	{r4, r5, r6, pc}
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
<<<<<<< HEAD
   802da:	2001      	movs	r0, #1
   802dc:	bd70      	pop	{r4, r5, r6, pc}
=======
   803ca:	2001      	movs	r0, #1
   803cc:	bd70      	pop	{r4, r5, r6, pc}
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
<<<<<<< HEAD
   802de:	2001      	movs	r0, #1
   802e0:	bd70      	pop	{r4, r5, r6, pc}
=======
   803ce:	2001      	movs	r0, #1
   803d0:	bd70      	pop	{r4, r5, r6, pc}
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
<<<<<<< HEAD
   802e2:	2001      	movs	r0, #1
   802e4:	bd70      	pop	{r4, r5, r6, pc}
=======
   803d2:	2001      	movs	r0, #1
   803d4:	bd70      	pop	{r4, r5, r6, pc}
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
<<<<<<< HEAD
   802e6:	2000      	movs	r0, #0
   802e8:	bd70      	pop	{r4, r5, r6, pc}
=======
   803d6:	2000      	movs	r0, #0
   803d8:	bd70      	pop	{r4, r5, r6, pc}
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
<<<<<<< HEAD
   802ea:	2001      	movs	r0, #1
=======
   803da:	2001      	movs	r0, #1
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	}
# endif
#endif /* ifdef USART */

	return 0;
}
<<<<<<< HEAD
   802ec:	bd70      	pop	{r4, r5, r6, pc}
   802ee:	bf00      	nop
   802f0:	400e0800 	.word	0x400e0800
   802f4:	000804b1 	.word	0x000804b1
   802f8:	40098000 	.word	0x40098000
   802fc:	000804d5 	.word	0x000804d5
   80300:	4009c000 	.word	0x4009c000
   80304:	400a0000 	.word	0x400a0000
   80308:	400a4000 	.word	0x400a4000

0008030c <configure_console>:
extern void test_adc_12bit(void);
extern void test_channel_3_enabled(void);
=======
   803dc:	bd70      	pop	{r4, r5, r6, pc}
   803de:	bf00      	nop
   803e0:	400e0800 	.word	0x400e0800
   803e4:	000805e1 	.word	0x000805e1
   803e8:	40098000 	.word	0x40098000
   803ec:	00080605 	.word	0x00080605
   803f0:	4009c000 	.word	0x4009c000
   803f4:	400a0000 	.word	0x400a0000
   803f8:	400a4000 	.word	0x400a4000

000803fc <configure_console>:
#include <setjmp.h>
#include "test/test_pwm.h"
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

/* Configure console UART. */
void configure_console(void)
{
<<<<<<< HEAD
   8030c:	b530      	push	{r4, r5, lr}
   8030e:	b085      	sub	sp, #20
=======
   803fc:	b530      	push	{r4, r5, lr}
   803fe:	b085      	sub	sp, #20
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
<<<<<<< HEAD
   80310:	2008      	movs	r0, #8
   80312:	4d1a      	ldr	r5, [pc, #104]	; (8037c <configure_console+0x70>)
   80314:	47a8      	blx	r5
=======
   80400:	2008      	movs	r0, #8
   80402:	4d1a      	ldr	r5, [pc, #104]	; (8046c <configure_console+0x70>)
   80404:	47a8      	blx	r5
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
<<<<<<< HEAD
   80316:	4c1a      	ldr	r4, [pc, #104]	; (80380 <configure_console+0x74>)
   80318:	4b1a      	ldr	r3, [pc, #104]	; (80384 <configure_console+0x78>)
   8031a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8031c:	4a1a      	ldr	r2, [pc, #104]	; (80388 <configure_console+0x7c>)
   8031e:	4b1b      	ldr	r3, [pc, #108]	; (8038c <configure_console+0x80>)
   80320:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80322:	4a1b      	ldr	r2, [pc, #108]	; (80390 <configure_console+0x84>)
   80324:	4b1b      	ldr	r3, [pc, #108]	; (80394 <configure_console+0x88>)
   80326:	601a      	str	r2, [r3, #0]
=======
   80406:	4c1a      	ldr	r4, [pc, #104]	; (80470 <configure_console+0x74>)
   80408:	4b1a      	ldr	r3, [pc, #104]	; (80474 <configure_console+0x78>)
   8040a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8040c:	4a1a      	ldr	r2, [pc, #104]	; (80478 <configure_console+0x7c>)
   8040e:	4b1b      	ldr	r3, [pc, #108]	; (8047c <configure_console+0x80>)
   80410:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80412:	4a1b      	ldr	r2, [pc, #108]	; (80480 <configure_console+0x84>)
   80414:	4b1b      	ldr	r3, [pc, #108]	; (80484 <configure_console+0x88>)
   80416:	601a      	str	r2, [r3, #0]
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
<<<<<<< HEAD
   80328:	4b1b      	ldr	r3, [pc, #108]	; (80398 <configure_console+0x8c>)
   8032a:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   8032c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80330:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   80332:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80336:	9302      	str	r3, [sp, #8]
   80338:	2008      	movs	r0, #8
   8033a:	47a8      	blx	r5
=======
   80418:	4b1b      	ldr	r3, [pc, #108]	; (80488 <configure_console+0x8c>)
   8041a:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   8041c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80420:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   80422:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80426:	9302      	str	r3, [sp, #8]
   80428:	2008      	movs	r0, #8
   8042a:	47a8      	blx	r5
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
<<<<<<< HEAD
   8033c:	4620      	mov	r0, r4
   8033e:	4669      	mov	r1, sp
   80340:	4b16      	ldr	r3, [pc, #88]	; (8039c <configure_console+0x90>)
   80342:	4798      	blx	r3
=======
   8042c:	4620      	mov	r0, r4
   8042e:	4669      	mov	r1, sp
   80430:	4b16      	ldr	r3, [pc, #88]	; (8048c <configure_console+0x90>)
   80432:	4798      	blx	r3
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
<<<<<<< HEAD
   80344:	4d16      	ldr	r5, [pc, #88]	; (803a0 <configure_console+0x94>)
   80346:	682b      	ldr	r3, [r5, #0]
   80348:	6898      	ldr	r0, [r3, #8]
   8034a:	2100      	movs	r1, #0
   8034c:	4c15      	ldr	r4, [pc, #84]	; (803a4 <configure_console+0x98>)
   8034e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80350:	682b      	ldr	r3, [r5, #0]
   80352:	6858      	ldr	r0, [r3, #4]
   80354:	2100      	movs	r1, #0
   80356:	47a0      	blx	r4
=======
   80434:	4d16      	ldr	r5, [pc, #88]	; (80490 <configure_console+0x94>)
   80436:	682b      	ldr	r3, [r5, #0]
   80438:	6898      	ldr	r0, [r3, #8]
   8043a:	2100      	movs	r1, #0
   8043c:	4c15      	ldr	r4, [pc, #84]	; (80494 <configure_console+0x98>)
   8043e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80440:	682b      	ldr	r3, [r5, #0]
   80442:	6858      	ldr	r0, [r3, #4]
   80444:	2100      	movs	r1, #0
   80446:	47a0      	blx	r4
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
<<<<<<< HEAD
   80358:	4b13      	ldr	r3, [pc, #76]	; (803a8 <configure_console+0x9c>)
   8035a:	f44f 7280 	mov.w	r2, #256	; 0x100
   8035e:	665a      	str	r2, [r3, #100]	; 0x64
=======
   80448:	4b13      	ldr	r3, [pc, #76]	; (80498 <configure_console+0x9c>)
   8044a:	f44f 7280 	mov.w	r2, #256	; 0x100
   8044e:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
<<<<<<< HEAD
   80360:	655a      	str	r2, [r3, #84]	; 0x54
=======
   80450:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
<<<<<<< HEAD
   80362:	625a      	str	r2, [r3, #36]	; 0x24
=======
   80452:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
<<<<<<< HEAD
   80364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
   80454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
<<<<<<< HEAD
   80368:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8036a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   8036e:	671a      	str	r2, [r3, #112]	; 0x70
=======
   80458:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8045a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   8045e:	671a      	str	r2, [r3, #112]	; 0x70
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	stdio_serial_init(CONF_UART, &uart_serial_options);
	

	ioport_set_pin_mode(PIO_PA8_IDX,IOPORT_MODE_PULLUP); // Specify that sdout will not buffer 
	#if defined(__GNUC__)
	setbuf(stdout, NULL);
<<<<<<< HEAD
   80370:	682b      	ldr	r3, [r5, #0]
   80372:	6898      	ldr	r0, [r3, #8]
   80374:	2100      	movs	r1, #0
   80376:	47a0      	blx	r4
	
	#endif
}
   80378:	b005      	add	sp, #20
   8037a:	bd30      	pop	{r4, r5, pc}
   8037c:	000817e5 	.word	0x000817e5
   80380:	400e0800 	.word	0x400e0800
   80384:	20070998 	.word	0x20070998
   80388:	00080265 	.word	0x00080265
   8038c:	20070994 	.word	0x20070994
   80390:	000801c1 	.word	0x000801c1
   80394:	20070990 	.word	0x20070990
   80398:	0501bd00 	.word	0x0501bd00
   8039c:	00080479 	.word	0x00080479
   803a0:	20070430 	.word	0x20070430
   803a4:	00081bc9 	.word	0x00081bc9
   803a8:	400e0e00 	.word	0x400e0e00

000803ac <test_function>:

int test_function(void)
{
   803ac:	b508      	push	{r3, lr}
	configure_console();
   803ae:	4b06      	ldr	r3, [pc, #24]	; (803c8 <test_function+0x1c>)
   803b0:	4798      	blx	r3
	
	UnityBegin("test/test_adc.c"); // Begin unity on the test protocol for test_math, run setUp() in test_math.c
   803b2:	4806      	ldr	r0, [pc, #24]	; (803cc <test_function+0x20>)
   803b4:	4b06      	ldr	r3, [pc, #24]	; (803d0 <test_function+0x24>)
   803b6:	4798      	blx	r3
	RUN_TEST(test_pwm_channel_enabled,12);
   803b8:	4806      	ldr	r0, [pc, #24]	; (803d4 <test_function+0x28>)
   803ba:	4907      	ldr	r1, [pc, #28]	; (803d8 <test_function+0x2c>)
   803bc:	220c      	movs	r2, #12
   803be:	4b07      	ldr	r3, [pc, #28]	; (803dc <test_function+0x30>)
   803c0:	4798      	blx	r3
	UnityEnd(); // End test protocol, print information
   803c2:	4b07      	ldr	r3, [pc, #28]	; (803e0 <test_function+0x34>)
   803c4:	4798      	blx	r3
   803c6:	e7fe      	b.n	803c6 <test_function+0x1a>
   803c8:	0008030d 	.word	0x0008030d
   803cc:	00082ca0 	.word	0x00082ca0
   803d0:	00080ed5 	.word	0x00080ed5
   803d4:	00080171 	.word	0x00080171
   803d8:	00082cb0 	.word	0x00082cb0
   803dc:	00080e7d 	.word	0x00080e7d
   803e0:	00080ef1 	.word	0x00080ef1

000803e4 <_read>:
=======
   80460:	682b      	ldr	r3, [r5, #0]
   80462:	6898      	ldr	r0, [r3, #8]
   80464:	2100      	movs	r1, #0
   80466:	47a0      	blx	r4
	
	#endif
}
   80468:	b005      	add	sp, #20
   8046a:	bd30      	pop	{r4, r5, pc}
   8046c:	00081931 	.word	0x00081931
   80470:	400e0800 	.word	0x400e0800
   80474:	20070998 	.word	0x20070998
   80478:	00080355 	.word	0x00080355
   8047c:	20070994 	.word	0x20070994
   80480:	000802b1 	.word	0x000802b1
   80484:	20070990 	.word	0x20070990
   80488:	0501bd00 	.word	0x0501bd00
   8048c:	000805a9 	.word	0x000805a9
   80490:	20070430 	.word	0x20070430
   80494:	00081d15 	.word	0x00081d15
   80498:	400e0e00 	.word	0x400e0e00

0008049c <test_function>:

int test_function(void)
{
   8049c:	b508      	push	{r3, lr}
	configure_console();
   8049e:	4b0e      	ldr	r3, [pc, #56]	; (804d8 <test_function+0x3c>)
   804a0:	4798      	blx	r3
	
	UnityBegin("test/test_pwm.c"); // Begin unity on the test protocol for test_math, run setUp() in test_math.c
   804a2:	480e      	ldr	r0, [pc, #56]	; (804dc <test_function+0x40>)
   804a4:	4b0e      	ldr	r3, [pc, #56]	; (804e0 <test_function+0x44>)
   804a6:	4798      	blx	r3
	RUN_TEST(test_pwm_channel_0,13);
   804a8:	480e      	ldr	r0, [pc, #56]	; (804e4 <test_function+0x48>)
   804aa:	490f      	ldr	r1, [pc, #60]	; (804e8 <test_function+0x4c>)
   804ac:	220d      	movs	r2, #13
   804ae:	4c0f      	ldr	r4, [pc, #60]	; (804ec <test_function+0x50>)
   804b0:	47a0      	blx	r4
	RUN_TEST(test_pwm_channel_1,21);
   804b2:	480f      	ldr	r0, [pc, #60]	; (804f0 <test_function+0x54>)
   804b4:	490f      	ldr	r1, [pc, #60]	; (804f4 <test_function+0x58>)
   804b6:	2215      	movs	r2, #21
   804b8:	47a0      	blx	r4
	RUN_TEST(test_pwm_channel_2,29);
   804ba:	480f      	ldr	r0, [pc, #60]	; (804f8 <test_function+0x5c>)
   804bc:	490f      	ldr	r1, [pc, #60]	; (804fc <test_function+0x60>)
   804be:	221d      	movs	r2, #29
   804c0:	47a0      	blx	r4
	RUN_TEST(test_pwm_channel_3,37);
   804c2:	480f      	ldr	r0, [pc, #60]	; (80500 <test_function+0x64>)
   804c4:	490f      	ldr	r1, [pc, #60]	; (80504 <test_function+0x68>)
   804c6:	2225      	movs	r2, #37	; 0x25
   804c8:	47a0      	blx	r4
	RUN_TEST(test_pwm_channel_4,45);
   804ca:	480f      	ldr	r0, [pc, #60]	; (80508 <test_function+0x6c>)
   804cc:	490f      	ldr	r1, [pc, #60]	; (8050c <test_function+0x70>)
   804ce:	222d      	movs	r2, #45	; 0x2d
   804d0:	47a0      	blx	r4
	UnityEnd(); // End test protocol, print information
   804d2:	4b0f      	ldr	r3, [pc, #60]	; (80510 <test_function+0x74>)
   804d4:	4798      	blx	r3
   804d6:	e7fe      	b.n	804d6 <test_function+0x3a>
   804d8:	000803fd 	.word	0x000803fd
   804dc:	00082e24 	.word	0x00082e24
   804e0:	00081021 	.word	0x00081021
   804e4:	00080171 	.word	0x00080171
   804e8:	00082e34 	.word	0x00082e34
   804ec:	00080fc9 	.word	0x00080fc9
   804f0:	000801b1 	.word	0x000801b1
   804f4:	00082e48 	.word	0x00082e48
   804f8:	000801f1 	.word	0x000801f1
   804fc:	00082e5c 	.word	0x00082e5c
   80500:	00080231 	.word	0x00080231
   80504:	00082e70 	.word	0x00082e70
   80508:	00080271 	.word	0x00080271
   8050c:	00082e84 	.word	0x00082e84
   80510:	0008103d 	.word	0x0008103d

00080514 <_read>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
<<<<<<< HEAD
   803e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803e8:	460c      	mov	r4, r1
   803ea:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   803ec:	b960      	cbnz	r0, 80408 <_read+0x24>
=======
   80514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80518:	460c      	mov	r4, r1
   8051a:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   8051c:	b960      	cbnz	r0, 80538 <_read+0x24>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		return -1;
	}

	for (; len > 0; --len) {
<<<<<<< HEAD
   803ee:	2a00      	cmp	r2, #0
   803f0:	dd0e      	ble.n	80410 <_read+0x2c>
   803f2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   803f4:	4e09      	ldr	r6, [pc, #36]	; (8041c <_read+0x38>)
   803f6:	4d0a      	ldr	r5, [pc, #40]	; (80420 <_read+0x3c>)
   803f8:	6830      	ldr	r0, [r6, #0]
   803fa:	4621      	mov	r1, r4
   803fc:	682b      	ldr	r3, [r5, #0]
   803fe:	4798      	blx	r3
		ptr++;
   80400:	3401      	adds	r4, #1
=======
   8051e:	2a00      	cmp	r2, #0
   80520:	dd0e      	ble.n	80540 <_read+0x2c>
   80522:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80524:	4e09      	ldr	r6, [pc, #36]	; (8054c <_read+0x38>)
   80526:	4d0a      	ldr	r5, [pc, #40]	; (80550 <_read+0x3c>)
   80528:	6830      	ldr	r0, [r6, #0]
   8052a:	4621      	mov	r1, r4
   8052c:	682b      	ldr	r3, [r5, #0]
   8052e:	4798      	blx	r3
		ptr++;
   80530:	3401      	adds	r4, #1
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
<<<<<<< HEAD
   80402:	42bc      	cmp	r4, r7
   80404:	d1f8      	bne.n	803f8 <_read+0x14>
   80406:	e006      	b.n	80416 <_read+0x32>
=======
   80532:	42bc      	cmp	r4, r7
   80534:	d1f8      	bne.n	80528 <_read+0x14>
   80536:	e006      	b.n	80546 <_read+0x32>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
<<<<<<< HEAD
   80408:	f04f 30ff 	mov.w	r0, #4294967295
   8040c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80410:	2000      	movs	r0, #0
   80412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80416:	4640      	mov	r0, r8
	}
	return nChars;
}
   80418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8041c:	20070998 	.word	0x20070998
   80420:	20070990 	.word	0x20070990

00080424 <_write>:
=======
   80538:	f04f 30ff 	mov.w	r0, #4294967295
   8053c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80540:	2000      	movs	r0, #0
   80542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80546:	4640      	mov	r0, r8
	}
	return nChars;
}
   80548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8054c:	20070998 	.word	0x20070998
   80550:	20070990 	.word	0x20070990

00080554 <_write>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
<<<<<<< HEAD
   80424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80428:	460e      	mov	r6, r1
   8042a:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8042c:	3801      	subs	r0, #1
   8042e:	2802      	cmp	r0, #2
   80430:	d80f      	bhi.n	80452 <_write+0x2e>
=======
   80554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80558:	460e      	mov	r6, r1
   8055a:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8055c:	3801      	subs	r0, #1
   8055e:	2802      	cmp	r0, #2
   80560:	d80f      	bhi.n	80582 <_write+0x2e>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		return -1;
	}

	for (; len != 0; --len) {
<<<<<<< HEAD
   80432:	b192      	cbz	r2, 8045a <_write+0x36>
   80434:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80436:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80474 <_write+0x50>
   8043a:	4f0d      	ldr	r7, [pc, #52]	; (80470 <_write+0x4c>)
   8043c:	f8d8 0000 	ldr.w	r0, [r8]
   80440:	5d31      	ldrb	r1, [r6, r4]
   80442:	683b      	ldr	r3, [r7, #0]
   80444:	4798      	blx	r3
   80446:	2800      	cmp	r0, #0
   80448:	db0a      	blt.n	80460 <_write+0x3c>
			return -1;
		}
		++nChars;
   8044a:	3401      	adds	r4, #1
=======
   80562:	b192      	cbz	r2, 8058a <_write+0x36>
   80564:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80566:	f8df 803c 	ldr.w	r8, [pc, #60]	; 805a4 <_write+0x50>
   8056a:	4f0d      	ldr	r7, [pc, #52]	; (805a0 <_write+0x4c>)
   8056c:	f8d8 0000 	ldr.w	r0, [r8]
   80570:	5d31      	ldrb	r1, [r6, r4]
   80572:	683b      	ldr	r3, [r7, #0]
   80574:	4798      	blx	r3
   80576:	2800      	cmp	r0, #0
   80578:	db0a      	blt.n	80590 <_write+0x3c>
			return -1;
		}
		++nChars;
   8057a:	3401      	adds	r4, #1
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
<<<<<<< HEAD
   8044c:	42a5      	cmp	r5, r4
   8044e:	d1f5      	bne.n	8043c <_write+0x18>
   80450:	e00a      	b.n	80468 <_write+0x44>
=======
   8057c:	42a5      	cmp	r5, r4
   8057e:	d1f5      	bne.n	8056c <_write+0x18>
   80580:	e00a      	b.n	80598 <_write+0x44>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
<<<<<<< HEAD
   80452:	f04f 30ff 	mov.w	r0, #4294967295
   80456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   8045a:	2000      	movs	r0, #0
   8045c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80460:	f04f 30ff 	mov.w	r0, #4294967295
   80464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80468:	4620      	mov	r0, r4
	}
	return nChars;
}
   8046a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8046e:	bf00      	nop
   80470:	20070994 	.word	0x20070994
   80474:	20070998 	.word	0x20070998

00080478 <uart_init>:
=======
   80582:	f04f 30ff 	mov.w	r0, #4294967295
   80586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   8058a:	2000      	movs	r0, #0
   8058c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80590:	f04f 30ff 	mov.w	r0, #4294967295
   80594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80598:	4620      	mov	r0, r4
	}
	return nChars;
}
   8059a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8059e:	bf00      	nop
   805a0:	20070994 	.word	0x20070994
   805a4:	20070998 	.word	0x20070998

000805a8 <uart_init>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
<<<<<<< HEAD
   80478:	b410      	push	{r4}
=======
   805a8:	b410      	push	{r4}
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
<<<<<<< HEAD
   8047a:	23ac      	movs	r3, #172	; 0xac
   8047c:	6003      	str	r3, [r0, #0]
=======
   805aa:	23ac      	movs	r3, #172	; 0xac
   805ac:	6003      	str	r3, [r0, #0]
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
<<<<<<< HEAD
   8047e:	680a      	ldr	r2, [r1, #0]
   80480:	684b      	ldr	r3, [r1, #4]
   80482:	fbb2 f3f3 	udiv	r3, r2, r3
   80486:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80488:	1e5c      	subs	r4, r3, #1
   8048a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8048e:	4294      	cmp	r4, r2
   80490:	d80a      	bhi.n	804a8 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80492:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80494:	688b      	ldr	r3, [r1, #8]
   80496:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80498:	f240 2302 	movw	r3, #514	; 0x202
   8049c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   804a0:	2350      	movs	r3, #80	; 0x50
   804a2:	6003      	str	r3, [r0, #0]

	return 0;
   804a4:	2000      	movs	r0, #0
   804a6:	e000      	b.n	804aa <uart_init+0x32>
=======
   805ae:	680a      	ldr	r2, [r1, #0]
   805b0:	684b      	ldr	r3, [r1, #4]
   805b2:	fbb2 f3f3 	udiv	r3, r2, r3
   805b6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   805b8:	1e5c      	subs	r4, r3, #1
   805ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   805be:	4294      	cmp	r4, r2
   805c0:	d80a      	bhi.n	805d8 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   805c2:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   805c4:	688b      	ldr	r3, [r1, #8]
   805c6:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   805c8:	f240 2302 	movw	r3, #514	; 0x202
   805cc:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   805d0:	2350      	movs	r3, #80	; 0x50
   805d2:	6003      	str	r3, [r0, #0]

	return 0;
   805d4:	2000      	movs	r0, #0
   805d6:	e000      	b.n	805da <uart_init+0x32>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
<<<<<<< HEAD
   804a8:	2001      	movs	r0, #1
=======
   805d8:	2001      	movs	r0, #1
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
<<<<<<< HEAD
   804aa:	f85d 4b04 	ldr.w	r4, [sp], #4
   804ae:	4770      	bx	lr

000804b0 <uart_write>:
=======
   805da:	f85d 4b04 	ldr.w	r4, [sp], #4
   805de:	4770      	bx	lr

000805e0 <uart_write>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
<<<<<<< HEAD
   804b0:	6943      	ldr	r3, [r0, #20]
   804b2:	f013 0f02 	tst.w	r3, #2
=======
   805e0:	6943      	ldr	r3, [r0, #20]
   805e2:	f013 0f02 	tst.w	r3, #2
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
<<<<<<< HEAD
   804b6:	bf1a      	itte	ne
   804b8:	61c1      	strne	r1, [r0, #28]
	return 0;
   804ba:	2000      	movne	r0, #0
=======
   805e6:	bf1a      	itte	ne
   805e8:	61c1      	strne	r1, [r0, #28]
	return 0;
   805ea:	2000      	movne	r0, #0
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
<<<<<<< HEAD
   804bc:	2001      	moveq	r0, #1
=======
   805ec:	2001      	moveq	r0, #1
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
<<<<<<< HEAD
   804be:	4770      	bx	lr

000804c0 <uart_read>:
=======
   805ee:	4770      	bx	lr

000805f0 <uart_read>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
<<<<<<< HEAD
   804c0:	6943      	ldr	r3, [r0, #20]
   804c2:	f013 0f01 	tst.w	r3, #1
=======
   805f0:	6943      	ldr	r3, [r0, #20]
   805f2:	f013 0f01 	tst.w	r3, #1
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
<<<<<<< HEAD
   804c6:	bf1d      	ittte	ne
   804c8:	6983      	ldrne	r3, [r0, #24]
   804ca:	700b      	strbne	r3, [r1, #0]
	return 0;
   804cc:	2000      	movne	r0, #0
=======
   805f6:	bf1d      	ittte	ne
   805f8:	6983      	ldrne	r3, [r0, #24]
   805fa:	700b      	strbne	r3, [r1, #0]
	return 0;
   805fc:	2000      	movne	r0, #0
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
<<<<<<< HEAD
   804ce:	2001      	moveq	r0, #1
=======
   805fe:	2001      	moveq	r0, #1
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
<<<<<<< HEAD
   804d0:	4770      	bx	lr
   804d2:	bf00      	nop

000804d4 <usart_write>:
=======
   80600:	4770      	bx	lr
   80602:	bf00      	nop

00080604 <usart_write>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
<<<<<<< HEAD
   804d4:	6943      	ldr	r3, [r0, #20]
   804d6:	f013 0f02 	tst.w	r3, #2
=======
   80604:	6943      	ldr	r3, [r0, #20]
   80606:	f013 0f02 	tst.w	r3, #2
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
<<<<<<< HEAD
   804da:	bf1d      	ittte	ne
   804dc:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   804e0:	61c1      	strne	r1, [r0, #28]
	return 0;
   804e2:	2000      	movne	r0, #0
=======
   8060a:	bf1d      	ittte	ne
   8060c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80610:	61c1      	strne	r1, [r0, #28]
	return 0;
   80612:	2000      	movne	r0, #0
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
<<<<<<< HEAD
   804e4:	2001      	moveq	r0, #1
=======
   80614:	2001      	moveq	r0, #1
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
<<<<<<< HEAD
}
   804e6:	4770      	bx	lr

000804e8 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   804e8:	6943      	ldr	r3, [r0, #20]
   804ea:	f013 0f01 	tst.w	r3, #1
   804ee:	d005      	beq.n	804fc <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   804f0:	6983      	ldr	r3, [r0, #24]
   804f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   804f6:	600b      	str	r3, [r1, #0]

	return 0;
   804f8:	2000      	movs	r0, #0
   804fa:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   804fc:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   804fe:	4770      	bx	lr

00080500 <UnityPrintNumber>:
}

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumber(const _U_SINT number_to_print)
{
   80500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80504:	4605      	mov	r5, r0
    _U_SINT divisor = 1;
    _U_SINT next_divisor;
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
   80506:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   8050a:	d132      	bne.n	80572 <UnityPrintNumber+0x72>
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   8050c:	4b5f      	ldr	r3, [pc, #380]	; (8068c <UnityPrintNumber+0x18c>)
   8050e:	6818      	ldr	r0, [r3, #0]
   80510:	6882      	ldr	r2, [r0, #8]
   80512:	6893      	ldr	r3, [r2, #8]
   80514:	3b01      	subs	r3, #1
   80516:	6093      	str	r3, [r2, #8]
   80518:	2b00      	cmp	r3, #0
   8051a:	da1d      	bge.n	80558 <UnityPrintNumber+0x58>
   8051c:	6882      	ldr	r2, [r0, #8]
   8051e:	6891      	ldr	r1, [r2, #8]
   80520:	6993      	ldr	r3, [r2, #24]
   80522:	4299      	cmp	r1, r3
   80524:	db12      	blt.n	8054c <UnityPrintNumber+0x4c>
   80526:	6813      	ldr	r3, [r2, #0]
   80528:	222d      	movs	r2, #45	; 0x2d
   8052a:	701a      	strb	r2, [r3, #0]
   8052c:	4b57      	ldr	r3, [pc, #348]	; (8068c <UnityPrintNumber+0x18c>)
   8052e:	6818      	ldr	r0, [r3, #0]
   80530:	6882      	ldr	r2, [r0, #8]
   80532:	6813      	ldr	r3, [r2, #0]
   80534:	7819      	ldrb	r1, [r3, #0]
   80536:	290a      	cmp	r1, #10
   80538:	d002      	beq.n	80540 <UnityPrintNumber+0x40>
   8053a:	3301      	adds	r3, #1
   8053c:	6013      	str	r3, [r2, #0]
   8053e:	e04f      	b.n	805e0 <UnityPrintNumber+0xe0>
   80540:	210a      	movs	r1, #10
   80542:	4b53      	ldr	r3, [pc, #332]	; (80690 <UnityPrintNumber+0x190>)
   80544:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80546:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   8054a:	e049      	b.n	805e0 <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   8054c:	212d      	movs	r1, #45	; 0x2d
   8054e:	4b50      	ldr	r3, [pc, #320]	; (80690 <UnityPrintNumber+0x190>)
   80550:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80552:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   80556:	e043      	b.n	805e0 <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80558:	6883      	ldr	r3, [r0, #8]
   8055a:	681b      	ldr	r3, [r3, #0]
   8055c:	222d      	movs	r2, #45	; 0x2d
   8055e:	701a      	strb	r2, [r3, #0]
   80560:	4b4a      	ldr	r3, [pc, #296]	; (8068c <UnityPrintNumber+0x18c>)
   80562:	681b      	ldr	r3, [r3, #0]
   80564:	689b      	ldr	r3, [r3, #8]
   80566:	681a      	ldr	r2, [r3, #0]
   80568:	3201      	adds	r2, #1
   8056a:	601a      	str	r2, [r3, #0]
        number = (1ul << (UNITY_LONG_WIDTH-1));
   8056c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   80570:	e036      	b.n	805e0 <UnityPrintNumber+0xe0>
    }
    else if (number_to_print < 0)
   80572:	2800      	cmp	r0, #0
   80574:	da34      	bge.n	805e0 <UnityPrintNumber+0xe0>
    {
        //Some other negative number
        UNITY_OUTPUT_CHAR('-');
   80576:	4b45      	ldr	r3, [pc, #276]	; (8068c <UnityPrintNumber+0x18c>)
   80578:	6818      	ldr	r0, [r3, #0]
   8057a:	6882      	ldr	r2, [r0, #8]
   8057c:	6893      	ldr	r3, [r2, #8]
   8057e:	3b01      	subs	r3, #1
   80580:	6093      	str	r3, [r2, #8]
   80582:	2b00      	cmp	r3, #0
   80584:	da19      	bge.n	805ba <UnityPrintNumber+0xba>
   80586:	6882      	ldr	r2, [r0, #8]
   80588:	6891      	ldr	r1, [r2, #8]
   8058a:	6993      	ldr	r3, [r2, #24]
   8058c:	4299      	cmp	r1, r3
   8058e:	db10      	blt.n	805b2 <UnityPrintNumber+0xb2>
   80590:	6813      	ldr	r3, [r2, #0]
   80592:	222d      	movs	r2, #45	; 0x2d
   80594:	701a      	strb	r2, [r3, #0]
   80596:	4b3d      	ldr	r3, [pc, #244]	; (8068c <UnityPrintNumber+0x18c>)
   80598:	6818      	ldr	r0, [r3, #0]
   8059a:	6882      	ldr	r2, [r0, #8]
   8059c:	6813      	ldr	r3, [r2, #0]
   8059e:	7819      	ldrb	r1, [r3, #0]
   805a0:	290a      	cmp	r1, #10
   805a2:	d002      	beq.n	805aa <UnityPrintNumber+0xaa>
   805a4:	3301      	adds	r3, #1
   805a6:	6013      	str	r3, [r2, #0]
   805a8:	e011      	b.n	805ce <UnityPrintNumber+0xce>
   805aa:	210a      	movs	r1, #10
   805ac:	4b38      	ldr	r3, [pc, #224]	; (80690 <UnityPrintNumber+0x190>)
   805ae:	4798      	blx	r3
   805b0:	e00d      	b.n	805ce <UnityPrintNumber+0xce>
   805b2:	212d      	movs	r1, #45	; 0x2d
   805b4:	4b36      	ldr	r3, [pc, #216]	; (80690 <UnityPrintNumber+0x190>)
   805b6:	4798      	blx	r3
   805b8:	e009      	b.n	805ce <UnityPrintNumber+0xce>
   805ba:	6883      	ldr	r3, [r0, #8]
   805bc:	681b      	ldr	r3, [r3, #0]
   805be:	222d      	movs	r2, #45	; 0x2d
   805c0:	701a      	strb	r2, [r3, #0]
   805c2:	4b32      	ldr	r3, [pc, #200]	; (8068c <UnityPrintNumber+0x18c>)
   805c4:	681b      	ldr	r3, [r3, #0]
   805c6:	689b      	ldr	r3, [r3, #8]
   805c8:	681a      	ldr	r2, [r3, #0]
   805ca:	3201      	adds	r2, #1
   805cc:	601a      	str	r2, [r3, #0]
        number = (_U_UINT)(-number_to_print);
   805ce:	426d      	negs	r5, r5
   805d0:	e006      	b.n	805e0 <UnityPrintNumber+0xe0>
    }

    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
   805d2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   805d6:	005b      	lsls	r3, r3, #1
        if (next_divisor > divisor)
   805d8:	429c      	cmp	r4, r3
   805da:	da06      	bge.n	805ea <UnityPrintNumber+0xea>
            divisor = next_divisor;
   805dc:	461c      	mov	r4, r3
   805de:	e000      	b.n	805e2 <UnityPrintNumber+0xe2>

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
        number = (1ul << (UNITY_LONG_WIDTH-1));
   805e0:	2401      	movs	r4, #1
        //Positive number
        number = (_U_UINT)number_to_print;
    }

    // figure out initial divisor
    while (number / divisor > 9)
   805e2:	fbb5 f3f4 	udiv	r3, r5, r4
   805e6:	2b09      	cmp	r3, #9
   805e8:	d8f3      	bhi.n	805d2 <UnityPrintNumber+0xd2>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   805ea:	4e28      	ldr	r6, [pc, #160]	; (8068c <UnityPrintNumber+0x18c>)
   805ec:	4f29      	ldr	r7, [pc, #164]	; (80694 <UnityPrintNumber+0x194>)
   805ee:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80690 <UnityPrintNumber+0x190>
   805f2:	6830      	ldr	r0, [r6, #0]
   805f4:	6882      	ldr	r2, [r0, #8]
   805f6:	6893      	ldr	r3, [r2, #8]
   805f8:	3b01      	subs	r3, #1
   805fa:	6093      	str	r3, [r2, #8]
   805fc:	2b00      	cmp	r3, #0
   805fe:	da29      	bge.n	80654 <UnityPrintNumber+0x154>
   80600:	6882      	ldr	r2, [r0, #8]
   80602:	6891      	ldr	r1, [r2, #8]
   80604:	6993      	ldr	r3, [r2, #24]
   80606:	4299      	cmp	r1, r3
   80608:	db17      	blt.n	8063a <UnityPrintNumber+0x13a>
   8060a:	6811      	ldr	r1, [r2, #0]
   8060c:	fbb5 f3f4 	udiv	r3, r5, r4
   80610:	fba7 0203 	umull	r0, r2, r7, r3
   80614:	08d2      	lsrs	r2, r2, #3
   80616:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8061a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   8061e:	3330      	adds	r3, #48	; 0x30
   80620:	700b      	strb	r3, [r1, #0]
   80622:	6830      	ldr	r0, [r6, #0]
   80624:	6882      	ldr	r2, [r0, #8]
   80626:	6813      	ldr	r3, [r2, #0]
   80628:	7819      	ldrb	r1, [r3, #0]
   8062a:	290a      	cmp	r1, #10
   8062c:	d002      	beq.n	80634 <UnityPrintNumber+0x134>
   8062e:	3301      	adds	r3, #1
   80630:	6013      	str	r3, [r2, #0]
   80632:	e021      	b.n	80678 <UnityPrintNumber+0x178>
   80634:	210a      	movs	r1, #10
   80636:	47c0      	blx	r8
   80638:	e01e      	b.n	80678 <UnityPrintNumber+0x178>
   8063a:	fbb5 f3f4 	udiv	r3, r5, r4
   8063e:	fba7 e103 	umull	lr, r1, r7, r3
   80642:	08c9      	lsrs	r1, r1, #3
   80644:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   80648:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   8064c:	3130      	adds	r1, #48	; 0x30
   8064e:	b2c9      	uxtb	r1, r1
   80650:	47c0      	blx	r8
   80652:	e011      	b.n	80678 <UnityPrintNumber+0x178>
   80654:	6883      	ldr	r3, [r0, #8]
   80656:	6819      	ldr	r1, [r3, #0]
   80658:	fbb5 f3f4 	udiv	r3, r5, r4
   8065c:	fba7 0203 	umull	r0, r2, r7, r3
   80660:	08d2      	lsrs	r2, r2, #3
   80662:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80666:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   8066a:	3330      	adds	r3, #48	; 0x30
   8066c:	700b      	strb	r3, [r1, #0]
   8066e:	6833      	ldr	r3, [r6, #0]
   80670:	689b      	ldr	r3, [r3, #8]
   80672:	681a      	ldr	r2, [r3, #0]
   80674:	3201      	adds	r2, #1
   80676:	601a      	str	r2, [r3, #0]
        divisor /= 10;
   80678:	4b07      	ldr	r3, [pc, #28]	; (80698 <UnityPrintNumber+0x198>)
   8067a:	fb83 2304 	smull	r2, r3, r3, r4
   8067e:	17e4      	asrs	r4, r4, #31
   80680:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
    }
    while (divisor > 0);
   80684:	2c00      	cmp	r4, #0
   80686:	dcb4      	bgt.n	805f2 <UnityPrintNumber+0xf2>
}
   80688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8068c:	20070430 	.word	0x20070430
   80690:	00081cf5 	.word	0x00081cf5
   80694:	cccccccd 	.word	0xcccccccd
   80698:	66666667 	.word	0x66666667

0008069c <UnityPrintNumberUnsigned>:

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumberUnsigned(const _U_UINT number)
{
   8069c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   806a0:	4607      	mov	r7, r0
    _U_UINT divisor = 1;
   806a2:	2401      	movs	r4, #1
    _U_UINT next_divisor;

    // figure out initial divisor
    while (number / divisor > 9)
   806a4:	e005      	b.n	806b2 <UnityPrintNumberUnsigned+0x16>
    {
        next_divisor = divisor * 10;
   806a6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   806aa:	005b      	lsls	r3, r3, #1
        if (next_divisor > divisor)
   806ac:	429c      	cmp	r4, r3
   806ae:	d204      	bcs.n	806ba <UnityPrintNumberUnsigned+0x1e>
            divisor = next_divisor;
   806b0:	461c      	mov	r4, r3
{
    _U_UINT divisor = 1;
    _U_UINT next_divisor;

    // figure out initial divisor
    while (number / divisor > 9)
   806b2:	fbb7 f3f4 	udiv	r3, r7, r4
   806b6:	2b09      	cmp	r3, #9
   806b8:	d8f5      	bhi.n	806a6 <UnityPrintNumberUnsigned+0xa>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   806ba:	4e27      	ldr	r6, [pc, #156]	; (80758 <UnityPrintNumberUnsigned+0xbc>)
   806bc:	4d27      	ldr	r5, [pc, #156]	; (8075c <UnityPrintNumberUnsigned+0xc0>)
   806be:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80760 <UnityPrintNumberUnsigned+0xc4>
   806c2:	6833      	ldr	r3, [r6, #0]
   806c4:	6899      	ldr	r1, [r3, #8]
   806c6:	688a      	ldr	r2, [r1, #8]
   806c8:	3a01      	subs	r2, #1
   806ca:	608a      	str	r2, [r1, #8]
   806cc:	2a00      	cmp	r2, #0
   806ce:	da2a      	bge.n	80726 <UnityPrintNumberUnsigned+0x8a>
   806d0:	689a      	ldr	r2, [r3, #8]
   806d2:	6890      	ldr	r0, [r2, #8]
   806d4:	6991      	ldr	r1, [r2, #24]
   806d6:	4288      	cmp	r0, r1
   806d8:	db17      	blt.n	8070a <UnityPrintNumberUnsigned+0x6e>
   806da:	6811      	ldr	r1, [r2, #0]
   806dc:	fbb7 f3f4 	udiv	r3, r7, r4
   806e0:	fba5 0203 	umull	r0, r2, r5, r3
   806e4:	08d2      	lsrs	r2, r2, #3
   806e6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   806ea:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   806ee:	3330      	adds	r3, #48	; 0x30
   806f0:	700b      	strb	r3, [r1, #0]
   806f2:	6830      	ldr	r0, [r6, #0]
   806f4:	6882      	ldr	r2, [r0, #8]
   806f6:	6813      	ldr	r3, [r2, #0]
   806f8:	7819      	ldrb	r1, [r3, #0]
   806fa:	290a      	cmp	r1, #10
   806fc:	d002      	beq.n	80704 <UnityPrintNumberUnsigned+0x68>
   806fe:	3301      	adds	r3, #1
   80700:	6013      	str	r3, [r2, #0]
   80702:	e022      	b.n	8074a <UnityPrintNumberUnsigned+0xae>
   80704:	210a      	movs	r1, #10
   80706:	47c0      	blx	r8
   80708:	e01f      	b.n	8074a <UnityPrintNumberUnsigned+0xae>
   8070a:	fbb7 f1f4 	udiv	r1, r7, r4
   8070e:	fba5 e001 	umull	lr, r0, r5, r1
   80712:	08c0      	lsrs	r0, r0, #3
   80714:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80718:	eba1 0140 	sub.w	r1, r1, r0, lsl #1
   8071c:	3130      	adds	r1, #48	; 0x30
   8071e:	4618      	mov	r0, r3
   80720:	b2c9      	uxtb	r1, r1
   80722:	47c0      	blx	r8
   80724:	e011      	b.n	8074a <UnityPrintNumberUnsigned+0xae>
   80726:	689b      	ldr	r3, [r3, #8]
   80728:	6819      	ldr	r1, [r3, #0]
   8072a:	fbb7 f3f4 	udiv	r3, r7, r4
   8072e:	fba5 0203 	umull	r0, r2, r5, r3
   80732:	08d2      	lsrs	r2, r2, #3
   80734:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80738:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   8073c:	3330      	adds	r3, #48	; 0x30
   8073e:	700b      	strb	r3, [r1, #0]
   80740:	6833      	ldr	r3, [r6, #0]
   80742:	689b      	ldr	r3, [r3, #8]
   80744:	681a      	ldr	r2, [r3, #0]
   80746:	3201      	adds	r2, #1
   80748:	601a      	str	r2, [r3, #0]
        divisor /= 10;
   8074a:	fba5 3404 	umull	r3, r4, r5, r4
    }
    while (divisor > 0);
   8074e:	08e4      	lsrs	r4, r4, #3
   80750:	d1b7      	bne.n	806c2 <UnityPrintNumberUnsigned+0x26>
=======
}
   80616:	4770      	bx	lr

00080618 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80618:	6943      	ldr	r3, [r0, #20]
   8061a:	f013 0f01 	tst.w	r3, #1
   8061e:	d005      	beq.n	8062c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80620:	6983      	ldr	r3, [r0, #24]
   80622:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80626:	600b      	str	r3, [r1, #0]

	return 0;
   80628:	2000      	movs	r0, #0
   8062a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8062c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8062e:	4770      	bx	lr

00080630 <UnityPrintNumber>:
}

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumber(const _U_SINT number_to_print)
{
   80630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80634:	4605      	mov	r5, r0
    _U_SINT divisor = 1;
    _U_SINT next_divisor;
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
   80636:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   8063a:	d132      	bne.n	806a2 <UnityPrintNumber+0x72>
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   8063c:	4b5f      	ldr	r3, [pc, #380]	; (807bc <UnityPrintNumber+0x18c>)
   8063e:	6818      	ldr	r0, [r3, #0]
   80640:	6882      	ldr	r2, [r0, #8]
   80642:	6893      	ldr	r3, [r2, #8]
   80644:	3b01      	subs	r3, #1
   80646:	6093      	str	r3, [r2, #8]
   80648:	2b00      	cmp	r3, #0
   8064a:	da1d      	bge.n	80688 <UnityPrintNumber+0x58>
   8064c:	6882      	ldr	r2, [r0, #8]
   8064e:	6891      	ldr	r1, [r2, #8]
   80650:	6993      	ldr	r3, [r2, #24]
   80652:	4299      	cmp	r1, r3
   80654:	db12      	blt.n	8067c <UnityPrintNumber+0x4c>
   80656:	6813      	ldr	r3, [r2, #0]
   80658:	222d      	movs	r2, #45	; 0x2d
   8065a:	701a      	strb	r2, [r3, #0]
   8065c:	4b57      	ldr	r3, [pc, #348]	; (807bc <UnityPrintNumber+0x18c>)
   8065e:	6818      	ldr	r0, [r3, #0]
   80660:	6882      	ldr	r2, [r0, #8]
   80662:	6813      	ldr	r3, [r2, #0]
   80664:	7819      	ldrb	r1, [r3, #0]
   80666:	290a      	cmp	r1, #10
   80668:	d002      	beq.n	80670 <UnityPrintNumber+0x40>
   8066a:	3301      	adds	r3, #1
   8066c:	6013      	str	r3, [r2, #0]
   8066e:	e04f      	b.n	80710 <UnityPrintNumber+0xe0>
   80670:	210a      	movs	r1, #10
   80672:	4b53      	ldr	r3, [pc, #332]	; (807c0 <UnityPrintNumber+0x190>)
   80674:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80676:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   8067a:	e049      	b.n	80710 <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   8067c:	212d      	movs	r1, #45	; 0x2d
   8067e:	4b50      	ldr	r3, [pc, #320]	; (807c0 <UnityPrintNumber+0x190>)
   80680:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80682:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   80686:	e043      	b.n	80710 <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80688:	6883      	ldr	r3, [r0, #8]
   8068a:	681b      	ldr	r3, [r3, #0]
   8068c:	222d      	movs	r2, #45	; 0x2d
   8068e:	701a      	strb	r2, [r3, #0]
   80690:	4b4a      	ldr	r3, [pc, #296]	; (807bc <UnityPrintNumber+0x18c>)
   80692:	681b      	ldr	r3, [r3, #0]
   80694:	689b      	ldr	r3, [r3, #8]
   80696:	681a      	ldr	r2, [r3, #0]
   80698:	3201      	adds	r2, #1
   8069a:	601a      	str	r2, [r3, #0]
        number = (1ul << (UNITY_LONG_WIDTH-1));
   8069c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   806a0:	e036      	b.n	80710 <UnityPrintNumber+0xe0>
    }
    else if (number_to_print < 0)
   806a2:	2800      	cmp	r0, #0
   806a4:	da34      	bge.n	80710 <UnityPrintNumber+0xe0>
    {
        //Some other negative number
        UNITY_OUTPUT_CHAR('-');
   806a6:	4b45      	ldr	r3, [pc, #276]	; (807bc <UnityPrintNumber+0x18c>)
   806a8:	6818      	ldr	r0, [r3, #0]
   806aa:	6882      	ldr	r2, [r0, #8]
   806ac:	6893      	ldr	r3, [r2, #8]
   806ae:	3b01      	subs	r3, #1
   806b0:	6093      	str	r3, [r2, #8]
   806b2:	2b00      	cmp	r3, #0
   806b4:	da19      	bge.n	806ea <UnityPrintNumber+0xba>
   806b6:	6882      	ldr	r2, [r0, #8]
   806b8:	6891      	ldr	r1, [r2, #8]
   806ba:	6993      	ldr	r3, [r2, #24]
   806bc:	4299      	cmp	r1, r3
   806be:	db10      	blt.n	806e2 <UnityPrintNumber+0xb2>
   806c0:	6813      	ldr	r3, [r2, #0]
   806c2:	222d      	movs	r2, #45	; 0x2d
   806c4:	701a      	strb	r2, [r3, #0]
   806c6:	4b3d      	ldr	r3, [pc, #244]	; (807bc <UnityPrintNumber+0x18c>)
   806c8:	6818      	ldr	r0, [r3, #0]
   806ca:	6882      	ldr	r2, [r0, #8]
   806cc:	6813      	ldr	r3, [r2, #0]
   806ce:	7819      	ldrb	r1, [r3, #0]
   806d0:	290a      	cmp	r1, #10
   806d2:	d002      	beq.n	806da <UnityPrintNumber+0xaa>
   806d4:	3301      	adds	r3, #1
   806d6:	6013      	str	r3, [r2, #0]
   806d8:	e011      	b.n	806fe <UnityPrintNumber+0xce>
   806da:	210a      	movs	r1, #10
   806dc:	4b38      	ldr	r3, [pc, #224]	; (807c0 <UnityPrintNumber+0x190>)
   806de:	4798      	blx	r3
   806e0:	e00d      	b.n	806fe <UnityPrintNumber+0xce>
   806e2:	212d      	movs	r1, #45	; 0x2d
   806e4:	4b36      	ldr	r3, [pc, #216]	; (807c0 <UnityPrintNumber+0x190>)
   806e6:	4798      	blx	r3
   806e8:	e009      	b.n	806fe <UnityPrintNumber+0xce>
   806ea:	6883      	ldr	r3, [r0, #8]
   806ec:	681b      	ldr	r3, [r3, #0]
   806ee:	222d      	movs	r2, #45	; 0x2d
   806f0:	701a      	strb	r2, [r3, #0]
   806f2:	4b32      	ldr	r3, [pc, #200]	; (807bc <UnityPrintNumber+0x18c>)
   806f4:	681b      	ldr	r3, [r3, #0]
   806f6:	689b      	ldr	r3, [r3, #8]
   806f8:	681a      	ldr	r2, [r3, #0]
   806fa:	3201      	adds	r2, #1
   806fc:	601a      	str	r2, [r3, #0]
        number = (_U_UINT)(-number_to_print);
   806fe:	426d      	negs	r5, r5
   80700:	e006      	b.n	80710 <UnityPrintNumber+0xe0>
    }

    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
   80702:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   80706:	005b      	lsls	r3, r3, #1
        if (next_divisor > divisor)
   80708:	429c      	cmp	r4, r3
   8070a:	da06      	bge.n	8071a <UnityPrintNumber+0xea>
            divisor = next_divisor;
   8070c:	461c      	mov	r4, r3
   8070e:	e000      	b.n	80712 <UnityPrintNumber+0xe2>

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80710:	2401      	movs	r4, #1
        //Positive number
        number = (_U_UINT)number_to_print;
    }

    // figure out initial divisor
    while (number / divisor > 9)
   80712:	fbb5 f3f4 	udiv	r3, r5, r4
   80716:	2b09      	cmp	r3, #9
   80718:	d8f3      	bhi.n	80702 <UnityPrintNumber+0xd2>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   8071a:	4e28      	ldr	r6, [pc, #160]	; (807bc <UnityPrintNumber+0x18c>)
   8071c:	4f29      	ldr	r7, [pc, #164]	; (807c4 <UnityPrintNumber+0x194>)
   8071e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 807c0 <UnityPrintNumber+0x190>
   80722:	6830      	ldr	r0, [r6, #0]
   80724:	6882      	ldr	r2, [r0, #8]
   80726:	6893      	ldr	r3, [r2, #8]
   80728:	3b01      	subs	r3, #1
   8072a:	6093      	str	r3, [r2, #8]
   8072c:	2b00      	cmp	r3, #0
   8072e:	da29      	bge.n	80784 <UnityPrintNumber+0x154>
   80730:	6882      	ldr	r2, [r0, #8]
   80732:	6891      	ldr	r1, [r2, #8]
   80734:	6993      	ldr	r3, [r2, #24]
   80736:	4299      	cmp	r1, r3
   80738:	db17      	blt.n	8076a <UnityPrintNumber+0x13a>
   8073a:	6811      	ldr	r1, [r2, #0]
   8073c:	fbb5 f3f4 	udiv	r3, r5, r4
   80740:	fba7 0203 	umull	r0, r2, r7, r3
   80744:	08d2      	lsrs	r2, r2, #3
   80746:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8074a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   8074e:	3330      	adds	r3, #48	; 0x30
   80750:	700b      	strb	r3, [r1, #0]
   80752:	6830      	ldr	r0, [r6, #0]
   80754:	6882      	ldr	r2, [r0, #8]
   80756:	6813      	ldr	r3, [r2, #0]
   80758:	7819      	ldrb	r1, [r3, #0]
   8075a:	290a      	cmp	r1, #10
   8075c:	d002      	beq.n	80764 <UnityPrintNumber+0x134>
   8075e:	3301      	adds	r3, #1
   80760:	6013      	str	r3, [r2, #0]
   80762:	e021      	b.n	807a8 <UnityPrintNumber+0x178>
   80764:	210a      	movs	r1, #10
   80766:	47c0      	blx	r8
   80768:	e01e      	b.n	807a8 <UnityPrintNumber+0x178>
   8076a:	fbb5 f3f4 	udiv	r3, r5, r4
   8076e:	fba7 e103 	umull	lr, r1, r7, r3
   80772:	08c9      	lsrs	r1, r1, #3
   80774:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   80778:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   8077c:	3130      	adds	r1, #48	; 0x30
   8077e:	b2c9      	uxtb	r1, r1
   80780:	47c0      	blx	r8
   80782:	e011      	b.n	807a8 <UnityPrintNumber+0x178>
   80784:	6883      	ldr	r3, [r0, #8]
   80786:	6819      	ldr	r1, [r3, #0]
   80788:	fbb5 f3f4 	udiv	r3, r5, r4
   8078c:	fba7 0203 	umull	r0, r2, r7, r3
   80790:	08d2      	lsrs	r2, r2, #3
   80792:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80796:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   8079a:	3330      	adds	r3, #48	; 0x30
   8079c:	700b      	strb	r3, [r1, #0]
   8079e:	6833      	ldr	r3, [r6, #0]
   807a0:	689b      	ldr	r3, [r3, #8]
   807a2:	681a      	ldr	r2, [r3, #0]
   807a4:	3201      	adds	r2, #1
   807a6:	601a      	str	r2, [r3, #0]
        divisor /= 10;
   807a8:	4b07      	ldr	r3, [pc, #28]	; (807c8 <UnityPrintNumber+0x198>)
   807aa:	fb83 2304 	smull	r2, r3, r3, r4
   807ae:	17e4      	asrs	r4, r4, #31
   807b0:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
    }
    while (divisor > 0);
   807b4:	2c00      	cmp	r4, #0
   807b6:	dcb4      	bgt.n	80722 <UnityPrintNumber+0xf2>
}
   807b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   807bc:	20070430 	.word	0x20070430
   807c0:	00081e41 	.word	0x00081e41
   807c4:	cccccccd 	.word	0xcccccccd
   807c8:	66666667 	.word	0x66666667

000807cc <UnityPrintNumberHex>:
    while (divisor > 0);
}

//-----------------------------------------------
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
   807cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   807d0:	4606      	mov	r6, r0
   807d2:	460c      	mov	r4, r1
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
   807d4:	4b5e      	ldr	r3, [pc, #376]	; (80950 <UnityPrintNumberHex+0x184>)
   807d6:	6818      	ldr	r0, [r3, #0]
   807d8:	6882      	ldr	r2, [r0, #8]
   807da:	6893      	ldr	r3, [r2, #8]
   807dc:	3b01      	subs	r3, #1
   807de:	6093      	str	r3, [r2, #8]
   807e0:	2b00      	cmp	r3, #0
   807e2:	da19      	bge.n	80818 <UnityPrintNumberHex+0x4c>
   807e4:	6882      	ldr	r2, [r0, #8]
   807e6:	6891      	ldr	r1, [r2, #8]
   807e8:	6993      	ldr	r3, [r2, #24]
   807ea:	4299      	cmp	r1, r3
   807ec:	db10      	blt.n	80810 <UnityPrintNumberHex+0x44>
   807ee:	6813      	ldr	r3, [r2, #0]
   807f0:	2230      	movs	r2, #48	; 0x30
   807f2:	701a      	strb	r2, [r3, #0]
   807f4:	4b56      	ldr	r3, [pc, #344]	; (80950 <UnityPrintNumberHex+0x184>)
   807f6:	6818      	ldr	r0, [r3, #0]
   807f8:	6882      	ldr	r2, [r0, #8]
   807fa:	6813      	ldr	r3, [r2, #0]
   807fc:	7819      	ldrb	r1, [r3, #0]
   807fe:	290a      	cmp	r1, #10
   80800:	d002      	beq.n	80808 <UnityPrintNumberHex+0x3c>
   80802:	3301      	adds	r3, #1
   80804:	6013      	str	r3, [r2, #0]
   80806:	e011      	b.n	8082c <UnityPrintNumberHex+0x60>
   80808:	210a      	movs	r1, #10
   8080a:	4b52      	ldr	r3, [pc, #328]	; (80954 <UnityPrintNumberHex+0x188>)
   8080c:	4798      	blx	r3
   8080e:	e00d      	b.n	8082c <UnityPrintNumberHex+0x60>
   80810:	2130      	movs	r1, #48	; 0x30
   80812:	4b50      	ldr	r3, [pc, #320]	; (80954 <UnityPrintNumberHex+0x188>)
   80814:	4798      	blx	r3
   80816:	e009      	b.n	8082c <UnityPrintNumberHex+0x60>
   80818:	6883      	ldr	r3, [r0, #8]
   8081a:	681b      	ldr	r3, [r3, #0]
   8081c:	2230      	movs	r2, #48	; 0x30
   8081e:	701a      	strb	r2, [r3, #0]
   80820:	4b4b      	ldr	r3, [pc, #300]	; (80950 <UnityPrintNumberHex+0x184>)
   80822:	681b      	ldr	r3, [r3, #0]
   80824:	689b      	ldr	r3, [r3, #8]
   80826:	681a      	ldr	r2, [r3, #0]
   80828:	3201      	adds	r2, #1
   8082a:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_CHAR('x');
   8082c:	4b48      	ldr	r3, [pc, #288]	; (80950 <UnityPrintNumberHex+0x184>)
   8082e:	6818      	ldr	r0, [r3, #0]
   80830:	6882      	ldr	r2, [r0, #8]
   80832:	6893      	ldr	r3, [r2, #8]
   80834:	3b01      	subs	r3, #1
   80836:	6093      	str	r3, [r2, #8]
   80838:	2b00      	cmp	r3, #0
   8083a:	da1b      	bge.n	80874 <UnityPrintNumberHex+0xa8>
   8083c:	6882      	ldr	r2, [r0, #8]
   8083e:	6891      	ldr	r1, [r2, #8]
   80840:	6993      	ldr	r3, [r2, #24]
   80842:	4299      	cmp	r1, r3
   80844:	db10      	blt.n	80868 <UnityPrintNumberHex+0x9c>
   80846:	6813      	ldr	r3, [r2, #0]
   80848:	2278      	movs	r2, #120	; 0x78
   8084a:	701a      	strb	r2, [r3, #0]
   8084c:	4b40      	ldr	r3, [pc, #256]	; (80950 <UnityPrintNumberHex+0x184>)
   8084e:	6818      	ldr	r0, [r3, #0]
   80850:	6882      	ldr	r2, [r0, #8]
   80852:	6813      	ldr	r3, [r2, #0]
   80854:	7819      	ldrb	r1, [r3, #0]
   80856:	290a      	cmp	r1, #10
   80858:	d002      	beq.n	80860 <UnityPrintNumberHex+0x94>
   8085a:	3301      	adds	r3, #1
   8085c:	6013      	str	r3, [r2, #0]
   8085e:	e006      	b.n	8086e <UnityPrintNumberHex+0xa2>
   80860:	210a      	movs	r1, #10
   80862:	4b3c      	ldr	r3, [pc, #240]	; (80954 <UnityPrintNumberHex+0x188>)
   80864:	4798      	blx	r3
   80866:	e002      	b.n	8086e <UnityPrintNumberHex+0xa2>
   80868:	2178      	movs	r1, #120	; 0x78
   8086a:	4b3a      	ldr	r3, [pc, #232]	; (80954 <UnityPrintNumberHex+0x188>)
   8086c:	4798      	blx	r3

    while (nibbles > 0)
   8086e:	b964      	cbnz	r4, 8088a <UnityPrintNumberHex+0xbe>
   80870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');
   80874:	6883      	ldr	r3, [r0, #8]
   80876:	681b      	ldr	r3, [r3, #0]
   80878:	2278      	movs	r2, #120	; 0x78
   8087a:	701a      	strb	r2, [r3, #0]
   8087c:	4b34      	ldr	r3, [pc, #208]	; (80950 <UnityPrintNumberHex+0x184>)
   8087e:	681b      	ldr	r3, [r3, #0]
   80880:	689b      	ldr	r3, [r3, #8]
   80882:	681a      	ldr	r2, [r3, #0]
   80884:	3201      	adds	r2, #1
   80886:	601a      	str	r2, [r3, #0]
   80888:	e7f1      	b.n	8086e <UnityPrintNumberHex+0xa2>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   8088a:	4d31      	ldr	r5, [pc, #196]	; (80950 <UnityPrintNumberHex+0x184>)
   8088c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80954 <UnityPrintNumberHex+0x188>
   80890:	f04f 080a 	mov.w	r8, #10
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
    {
        nibble = (number >> (--nibbles << 2)) & 0x0000000F;
   80894:	3c01      	subs	r4, #1
   80896:	b2e4      	uxtb	r4, r4
   80898:	00a3      	lsls	r3, r4, #2
   8089a:	fa26 f303 	lsr.w	r3, r6, r3
   8089e:	f003 030f 	and.w	r3, r3, #15
        if (nibble <= 9)
   808a2:	2b09      	cmp	r3, #9
   808a4:	d828      	bhi.n	808f8 <UnityPrintNumberHex+0x12c>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
   808a6:	6828      	ldr	r0, [r5, #0]
   808a8:	6881      	ldr	r1, [r0, #8]
   808aa:	688a      	ldr	r2, [r1, #8]
   808ac:	3a01      	subs	r2, #1
   808ae:	608a      	str	r2, [r1, #8]
   808b0:	2a00      	cmp	r2, #0
   808b2:	da17      	bge.n	808e4 <UnityPrintNumberHex+0x118>
   808b4:	6882      	ldr	r2, [r0, #8]
   808b6:	6891      	ldr	r1, [r2, #8]
   808b8:	6997      	ldr	r7, [r2, #24]
   808ba:	42b9      	cmp	r1, r7
   808bc:	db0e      	blt.n	808dc <UnityPrintNumberHex+0x110>
   808be:	6812      	ldr	r2, [r2, #0]
   808c0:	3330      	adds	r3, #48	; 0x30
   808c2:	7013      	strb	r3, [r2, #0]
   808c4:	6828      	ldr	r0, [r5, #0]
   808c6:	6882      	ldr	r2, [r0, #8]
   808c8:	6813      	ldr	r3, [r2, #0]
   808ca:	7819      	ldrb	r1, [r3, #0]
   808cc:	290a      	cmp	r1, #10
   808ce:	d002      	beq.n	808d6 <UnityPrintNumberHex+0x10a>
   808d0:	3301      	adds	r3, #1
   808d2:	6013      	str	r3, [r2, #0]
   808d4:	e038      	b.n	80948 <UnityPrintNumberHex+0x17c>
   808d6:	4641      	mov	r1, r8
   808d8:	47c8      	blx	r9
   808da:	e035      	b.n	80948 <UnityPrintNumberHex+0x17c>
   808dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
   808e0:	47c8      	blx	r9
   808e2:	e031      	b.n	80948 <UnityPrintNumberHex+0x17c>
   808e4:	6882      	ldr	r2, [r0, #8]
   808e6:	6812      	ldr	r2, [r2, #0]
   808e8:	3330      	adds	r3, #48	; 0x30
   808ea:	7013      	strb	r3, [r2, #0]
   808ec:	682b      	ldr	r3, [r5, #0]
   808ee:	689b      	ldr	r3, [r3, #8]
   808f0:	681a      	ldr	r2, [r3, #0]
   808f2:	3201      	adds	r2, #1
   808f4:	601a      	str	r2, [r3, #0]
   808f6:	e027      	b.n	80948 <UnityPrintNumberHex+0x17c>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   808f8:	6828      	ldr	r0, [r5, #0]
   808fa:	6881      	ldr	r1, [r0, #8]
   808fc:	688a      	ldr	r2, [r1, #8]
   808fe:	3a01      	subs	r2, #1
   80900:	608a      	str	r2, [r1, #8]
   80902:	2a00      	cmp	r2, #0
   80904:	da17      	bge.n	80936 <UnityPrintNumberHex+0x16a>
   80906:	6882      	ldr	r2, [r0, #8]
   80908:	6891      	ldr	r1, [r2, #8]
   8090a:	6997      	ldr	r7, [r2, #24]
   8090c:	42b9      	cmp	r1, r7
   8090e:	db0e      	blt.n	8092e <UnityPrintNumberHex+0x162>
   80910:	6812      	ldr	r2, [r2, #0]
   80912:	3337      	adds	r3, #55	; 0x37
   80914:	7013      	strb	r3, [r2, #0]
   80916:	6828      	ldr	r0, [r5, #0]
   80918:	6882      	ldr	r2, [r0, #8]
   8091a:	6813      	ldr	r3, [r2, #0]
   8091c:	7819      	ldrb	r1, [r3, #0]
   8091e:	290a      	cmp	r1, #10
   80920:	d002      	beq.n	80928 <UnityPrintNumberHex+0x15c>
   80922:	3301      	adds	r3, #1
   80924:	6013      	str	r3, [r2, #0]
   80926:	e00f      	b.n	80948 <UnityPrintNumberHex+0x17c>
   80928:	4641      	mov	r1, r8
   8092a:	47c8      	blx	r9
   8092c:	e00c      	b.n	80948 <UnityPrintNumberHex+0x17c>
   8092e:	f103 0137 	add.w	r1, r3, #55	; 0x37
   80932:	47c8      	blx	r9
   80934:	e008      	b.n	80948 <UnityPrintNumberHex+0x17c>
   80936:	6882      	ldr	r2, [r0, #8]
   80938:	6812      	ldr	r2, [r2, #0]
   8093a:	3337      	adds	r3, #55	; 0x37
   8093c:	7013      	strb	r3, [r2, #0]
   8093e:	682b      	ldr	r3, [r5, #0]
   80940:	689b      	ldr	r3, [r3, #8]
   80942:	681a      	ldr	r2, [r3, #0]
   80944:	3201      	adds	r2, #1
   80946:	601a      	str	r2, [r3, #0]
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
   80948:	2c00      	cmp	r4, #0
   8094a:	d1a3      	bne.n	80894 <UnityPrintNumberHex+0xc8>
   8094c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80950:	20070430 	.word	0x20070430
   80954:	00081e41 	.word	0x00081e41

00080958 <UnityPrint>:
//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
{
   80958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const char* pch = string;

    if (pch != NULL)
   8095a:	2800      	cmp	r0, #0
   8095c:	f000 810a 	beq.w	80b74 <UnityPrint+0x21c>
    {
        while (*pch)
   80960:	7803      	ldrb	r3, [r0, #0]
   80962:	2b00      	cmp	r3, #0
   80964:	f000 8106 	beq.w	80b74 <UnityPrint+0x21c>
   80968:	1c44      	adds	r4, r0, #1
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   8096a:	4d83      	ldr	r5, [pc, #524]	; (80b78 <UnityPrint+0x220>)
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   8096c:	4e83      	ldr	r6, [pc, #524]	; (80b7c <UnityPrint+0x224>)
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   8096e:	4f84      	ldr	r7, [pc, #528]	; (80b80 <UnityPrint+0x228>)
    if (pch != NULL)
    {
        while (*pch)
        {
            // printable characters plus CR & LF are printed
            if ((*pch <= 126) && (*pch >= 32))
   80970:	f1a3 0220 	sub.w	r2, r3, #32
   80974:	b2d2      	uxtb	r2, r2
   80976:	2a5e      	cmp	r2, #94	; 0x5e
   80978:	d82a      	bhi.n	809d0 <UnityPrint+0x78>
            {
                UNITY_OUTPUT_CHAR(*pch);
   8097a:	6828      	ldr	r0, [r5, #0]
   8097c:	6882      	ldr	r2, [r0, #8]
   8097e:	6893      	ldr	r3, [r2, #8]
   80980:	3b01      	subs	r3, #1
   80982:	6093      	str	r3, [r2, #8]
   80984:	2b00      	cmp	r3, #0
   80986:	da18      	bge.n	809ba <UnityPrint+0x62>
   80988:	6882      	ldr	r2, [r0, #8]
   8098a:	6891      	ldr	r1, [r2, #8]
   8098c:	6993      	ldr	r3, [r2, #24]
   8098e:	4299      	cmp	r1, r3
   80990:	db0f      	blt.n	809b2 <UnityPrint+0x5a>
   80992:	6813      	ldr	r3, [r2, #0]
   80994:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   80998:	701a      	strb	r2, [r3, #0]
   8099a:	6828      	ldr	r0, [r5, #0]
   8099c:	6882      	ldr	r2, [r0, #8]
   8099e:	6813      	ldr	r3, [r2, #0]
   809a0:	7819      	ldrb	r1, [r3, #0]
   809a2:	290a      	cmp	r1, #10
   809a4:	d002      	beq.n	809ac <UnityPrint+0x54>
   809a6:	3301      	adds	r3, #1
   809a8:	6013      	str	r3, [r2, #0]
   809aa:	e0de      	b.n	80b6a <UnityPrint+0x212>
   809ac:	210a      	movs	r1, #10
   809ae:	47b8      	blx	r7
   809b0:	e0db      	b.n	80b6a <UnityPrint+0x212>
   809b2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   809b6:	47b8      	blx	r7
   809b8:	e0d7      	b.n	80b6a <UnityPrint+0x212>
   809ba:	6883      	ldr	r3, [r0, #8]
   809bc:	681b      	ldr	r3, [r3, #0]
   809be:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   809c2:	701a      	strb	r2, [r3, #0]
   809c4:	682b      	ldr	r3, [r5, #0]
   809c6:	689b      	ldr	r3, [r3, #8]
   809c8:	681a      	ldr	r2, [r3, #0]
   809ca:	3201      	adds	r2, #1
   809cc:	601a      	str	r2, [r3, #0]
   809ce:	e0cc      	b.n	80b6a <UnityPrint+0x212>
            }
            //write escaped carriage returns
            else if (*pch == 13)
   809d0:	2b0d      	cmp	r3, #13
   809d2:	d14e      	bne.n	80a72 <UnityPrint+0x11a>
            {
                UNITY_OUTPUT_CHAR('\\');
   809d4:	6828      	ldr	r0, [r5, #0]
   809d6:	6882      	ldr	r2, [r0, #8]
   809d8:	6893      	ldr	r3, [r2, #8]
   809da:	3b01      	subs	r3, #1
   809dc:	6093      	str	r3, [r2, #8]
   809de:	2b00      	cmp	r3, #0
   809e0:	da16      	bge.n	80a10 <UnityPrint+0xb8>
   809e2:	6882      	ldr	r2, [r0, #8]
   809e4:	6891      	ldr	r1, [r2, #8]
   809e6:	6993      	ldr	r3, [r2, #24]
   809e8:	4299      	cmp	r1, r3
   809ea:	db0e      	blt.n	80a0a <UnityPrint+0xb2>
   809ec:	6813      	ldr	r3, [r2, #0]
   809ee:	225c      	movs	r2, #92	; 0x5c
   809f0:	701a      	strb	r2, [r3, #0]
   809f2:	6828      	ldr	r0, [r5, #0]
   809f4:	6882      	ldr	r2, [r0, #8]
   809f6:	6813      	ldr	r3, [r2, #0]
   809f8:	7819      	ldrb	r1, [r3, #0]
   809fa:	290a      	cmp	r1, #10
   809fc:	d002      	beq.n	80a04 <UnityPrint+0xac>
   809fe:	3301      	adds	r3, #1
   80a00:	6013      	str	r3, [r2, #0]
   80a02:	e00e      	b.n	80a22 <UnityPrint+0xca>
   80a04:	210a      	movs	r1, #10
   80a06:	47b8      	blx	r7
   80a08:	e00b      	b.n	80a22 <UnityPrint+0xca>
   80a0a:	215c      	movs	r1, #92	; 0x5c
   80a0c:	47b8      	blx	r7
   80a0e:	e008      	b.n	80a22 <UnityPrint+0xca>
   80a10:	6883      	ldr	r3, [r0, #8]
   80a12:	681b      	ldr	r3, [r3, #0]
   80a14:	225c      	movs	r2, #92	; 0x5c
   80a16:	701a      	strb	r2, [r3, #0]
   80a18:	682b      	ldr	r3, [r5, #0]
   80a1a:	689b      	ldr	r3, [r3, #8]
   80a1c:	681a      	ldr	r2, [r3, #0]
   80a1e:	3201      	adds	r2, #1
   80a20:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('r');
   80a22:	6828      	ldr	r0, [r5, #0]
   80a24:	6882      	ldr	r2, [r0, #8]
   80a26:	6893      	ldr	r3, [r2, #8]
   80a28:	3b01      	subs	r3, #1
   80a2a:	6093      	str	r3, [r2, #8]
   80a2c:	2b00      	cmp	r3, #0
   80a2e:	da16      	bge.n	80a5e <UnityPrint+0x106>
   80a30:	6882      	ldr	r2, [r0, #8]
   80a32:	6891      	ldr	r1, [r2, #8]
   80a34:	6993      	ldr	r3, [r2, #24]
   80a36:	4299      	cmp	r1, r3
   80a38:	db0e      	blt.n	80a58 <UnityPrint+0x100>
   80a3a:	6813      	ldr	r3, [r2, #0]
   80a3c:	2272      	movs	r2, #114	; 0x72
   80a3e:	701a      	strb	r2, [r3, #0]
   80a40:	6828      	ldr	r0, [r5, #0]
   80a42:	6882      	ldr	r2, [r0, #8]
   80a44:	6813      	ldr	r3, [r2, #0]
   80a46:	7819      	ldrb	r1, [r3, #0]
   80a48:	290a      	cmp	r1, #10
   80a4a:	d002      	beq.n	80a52 <UnityPrint+0xfa>
   80a4c:	3301      	adds	r3, #1
   80a4e:	6013      	str	r3, [r2, #0]
   80a50:	e08b      	b.n	80b6a <UnityPrint+0x212>
   80a52:	210a      	movs	r1, #10
   80a54:	47b8      	blx	r7
   80a56:	e088      	b.n	80b6a <UnityPrint+0x212>
   80a58:	2172      	movs	r1, #114	; 0x72
   80a5a:	47b8      	blx	r7
   80a5c:	e085      	b.n	80b6a <UnityPrint+0x212>
   80a5e:	6883      	ldr	r3, [r0, #8]
   80a60:	681b      	ldr	r3, [r3, #0]
   80a62:	2272      	movs	r2, #114	; 0x72
   80a64:	701a      	strb	r2, [r3, #0]
   80a66:	682b      	ldr	r3, [r5, #0]
   80a68:	689b      	ldr	r3, [r3, #8]
   80a6a:	681a      	ldr	r2, [r3, #0]
   80a6c:	3201      	adds	r2, #1
   80a6e:	601a      	str	r2, [r3, #0]
   80a70:	e07b      	b.n	80b6a <UnityPrint+0x212>
            }
            //write escaped line feeds
            else if (*pch == 10)
   80a72:	2b0a      	cmp	r3, #10
   80a74:	d14e      	bne.n	80b14 <UnityPrint+0x1bc>
            {
                UNITY_OUTPUT_CHAR('\\');
   80a76:	6828      	ldr	r0, [r5, #0]
   80a78:	6882      	ldr	r2, [r0, #8]
   80a7a:	6893      	ldr	r3, [r2, #8]
   80a7c:	3b01      	subs	r3, #1
   80a7e:	6093      	str	r3, [r2, #8]
   80a80:	2b00      	cmp	r3, #0
   80a82:	da16      	bge.n	80ab2 <UnityPrint+0x15a>
   80a84:	6882      	ldr	r2, [r0, #8]
   80a86:	6891      	ldr	r1, [r2, #8]
   80a88:	6993      	ldr	r3, [r2, #24]
   80a8a:	4299      	cmp	r1, r3
   80a8c:	db0e      	blt.n	80aac <UnityPrint+0x154>
   80a8e:	6813      	ldr	r3, [r2, #0]
   80a90:	225c      	movs	r2, #92	; 0x5c
   80a92:	701a      	strb	r2, [r3, #0]
   80a94:	6828      	ldr	r0, [r5, #0]
   80a96:	6882      	ldr	r2, [r0, #8]
   80a98:	6813      	ldr	r3, [r2, #0]
   80a9a:	7819      	ldrb	r1, [r3, #0]
   80a9c:	290a      	cmp	r1, #10
   80a9e:	d002      	beq.n	80aa6 <UnityPrint+0x14e>
   80aa0:	3301      	adds	r3, #1
   80aa2:	6013      	str	r3, [r2, #0]
   80aa4:	e00e      	b.n	80ac4 <UnityPrint+0x16c>
   80aa6:	210a      	movs	r1, #10
   80aa8:	47b8      	blx	r7
   80aaa:	e00b      	b.n	80ac4 <UnityPrint+0x16c>
   80aac:	215c      	movs	r1, #92	; 0x5c
   80aae:	47b8      	blx	r7
   80ab0:	e008      	b.n	80ac4 <UnityPrint+0x16c>
   80ab2:	6883      	ldr	r3, [r0, #8]
   80ab4:	681b      	ldr	r3, [r3, #0]
   80ab6:	225c      	movs	r2, #92	; 0x5c
   80ab8:	701a      	strb	r2, [r3, #0]
   80aba:	682b      	ldr	r3, [r5, #0]
   80abc:	689b      	ldr	r3, [r3, #8]
   80abe:	681a      	ldr	r2, [r3, #0]
   80ac0:	3201      	adds	r2, #1
   80ac2:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('n');
   80ac4:	6828      	ldr	r0, [r5, #0]
   80ac6:	6882      	ldr	r2, [r0, #8]
   80ac8:	6893      	ldr	r3, [r2, #8]
   80aca:	3b01      	subs	r3, #1
   80acc:	6093      	str	r3, [r2, #8]
   80ace:	2b00      	cmp	r3, #0
   80ad0:	da16      	bge.n	80b00 <UnityPrint+0x1a8>
   80ad2:	6882      	ldr	r2, [r0, #8]
   80ad4:	6891      	ldr	r1, [r2, #8]
   80ad6:	6993      	ldr	r3, [r2, #24]
   80ad8:	4299      	cmp	r1, r3
   80ada:	db0e      	blt.n	80afa <UnityPrint+0x1a2>
   80adc:	6813      	ldr	r3, [r2, #0]
   80ade:	226e      	movs	r2, #110	; 0x6e
   80ae0:	701a      	strb	r2, [r3, #0]
   80ae2:	6828      	ldr	r0, [r5, #0]
   80ae4:	6882      	ldr	r2, [r0, #8]
   80ae6:	6813      	ldr	r3, [r2, #0]
   80ae8:	7819      	ldrb	r1, [r3, #0]
   80aea:	290a      	cmp	r1, #10
   80aec:	d002      	beq.n	80af4 <UnityPrint+0x19c>
   80aee:	3301      	adds	r3, #1
   80af0:	6013      	str	r3, [r2, #0]
   80af2:	e03a      	b.n	80b6a <UnityPrint+0x212>
   80af4:	210a      	movs	r1, #10
   80af6:	47b8      	blx	r7
   80af8:	e037      	b.n	80b6a <UnityPrint+0x212>
   80afa:	216e      	movs	r1, #110	; 0x6e
   80afc:	47b8      	blx	r7
   80afe:	e034      	b.n	80b6a <UnityPrint+0x212>
   80b00:	6883      	ldr	r3, [r0, #8]
   80b02:	681b      	ldr	r3, [r3, #0]
   80b04:	226e      	movs	r2, #110	; 0x6e
   80b06:	701a      	strb	r2, [r3, #0]
   80b08:	682b      	ldr	r3, [r5, #0]
   80b0a:	689b      	ldr	r3, [r3, #8]
   80b0c:	681a      	ldr	r2, [r3, #0]
   80b0e:	3201      	adds	r2, #1
   80b10:	601a      	str	r2, [r3, #0]
   80b12:	e02a      	b.n	80b6a <UnityPrint+0x212>
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80b14:	6828      	ldr	r0, [r5, #0]
   80b16:	6882      	ldr	r2, [r0, #8]
   80b18:	6893      	ldr	r3, [r2, #8]
   80b1a:	3b01      	subs	r3, #1
   80b1c:	6093      	str	r3, [r2, #8]
   80b1e:	2b00      	cmp	r3, #0
   80b20:	da16      	bge.n	80b50 <UnityPrint+0x1f8>
   80b22:	6882      	ldr	r2, [r0, #8]
   80b24:	6891      	ldr	r1, [r2, #8]
   80b26:	6993      	ldr	r3, [r2, #24]
   80b28:	4299      	cmp	r1, r3
   80b2a:	db0e      	blt.n	80b4a <UnityPrint+0x1f2>
   80b2c:	6813      	ldr	r3, [r2, #0]
   80b2e:	225c      	movs	r2, #92	; 0x5c
   80b30:	701a      	strb	r2, [r3, #0]
   80b32:	6828      	ldr	r0, [r5, #0]
   80b34:	6882      	ldr	r2, [r0, #8]
   80b36:	6813      	ldr	r3, [r2, #0]
   80b38:	7819      	ldrb	r1, [r3, #0]
   80b3a:	290a      	cmp	r1, #10
   80b3c:	d002      	beq.n	80b44 <UnityPrint+0x1ec>
   80b3e:	3301      	adds	r3, #1
   80b40:	6013      	str	r3, [r2, #0]
   80b42:	e00e      	b.n	80b62 <UnityPrint+0x20a>
   80b44:	210a      	movs	r1, #10
   80b46:	47b8      	blx	r7
   80b48:	e00b      	b.n	80b62 <UnityPrint+0x20a>
   80b4a:	215c      	movs	r1, #92	; 0x5c
   80b4c:	47b8      	blx	r7
   80b4e:	e008      	b.n	80b62 <UnityPrint+0x20a>
   80b50:	6883      	ldr	r3, [r0, #8]
   80b52:	681b      	ldr	r3, [r3, #0]
   80b54:	225c      	movs	r2, #92	; 0x5c
   80b56:	701a      	strb	r2, [r3, #0]
   80b58:	682b      	ldr	r3, [r5, #0]
   80b5a:	689b      	ldr	r3, [r3, #8]
   80b5c:	681a      	ldr	r2, [r3, #0]
   80b5e:	3201      	adds	r2, #1
   80b60:	601a      	str	r2, [r3, #0]
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   80b62:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   80b66:	2102      	movs	r1, #2
   80b68:	47b0      	blx	r6
{
    const char* pch = string;

    if (pch != NULL)
    {
        while (*pch)
   80b6a:	f814 3b01 	ldrb.w	r3, [r4], #1
   80b6e:	2b00      	cmp	r3, #0
   80b70:	f47f aefe 	bne.w	80970 <UnityPrint+0x18>
   80b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80b76:	bf00      	nop
   80b78:	20070430 	.word	0x20070430
   80b7c:	000807cd 	.word	0x000807cd
   80b80:	00081e41 	.word	0x00081e41

00080b84 <UnityTestResultsBegin>:
    UnityPrint(UnityStrOk);
}

//-----------------------------------------------
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
   80b84:	b538      	push	{r3, r4, r5, lr}
   80b86:	460d      	mov	r5, r1
    UnityPrint(file);
   80b88:	4b46      	ldr	r3, [pc, #280]	; (80ca4 <UnityTestResultsBegin+0x120>)
   80b8a:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80b8c:	4b46      	ldr	r3, [pc, #280]	; (80ca8 <UnityTestResultsBegin+0x124>)
   80b8e:	6818      	ldr	r0, [r3, #0]
   80b90:	6884      	ldr	r4, [r0, #8]
   80b92:	68a2      	ldr	r2, [r4, #8]
   80b94:	3a01      	subs	r2, #1
   80b96:	60a2      	str	r2, [r4, #8]
   80b98:	2a00      	cmp	r2, #0
   80b9a:	da19      	bge.n	80bd0 <UnityTestResultsBegin+0x4c>
   80b9c:	6882      	ldr	r2, [r0, #8]
   80b9e:	6893      	ldr	r3, [r2, #8]
   80ba0:	6991      	ldr	r1, [r2, #24]
   80ba2:	428b      	cmp	r3, r1
   80ba4:	db10      	blt.n	80bc8 <UnityTestResultsBegin+0x44>
   80ba6:	6813      	ldr	r3, [r2, #0]
   80ba8:	223a      	movs	r2, #58	; 0x3a
   80baa:	701a      	strb	r2, [r3, #0]
   80bac:	4b3e      	ldr	r3, [pc, #248]	; (80ca8 <UnityTestResultsBegin+0x124>)
   80bae:	6818      	ldr	r0, [r3, #0]
   80bb0:	6882      	ldr	r2, [r0, #8]
   80bb2:	6813      	ldr	r3, [r2, #0]
   80bb4:	7819      	ldrb	r1, [r3, #0]
   80bb6:	290a      	cmp	r1, #10
   80bb8:	d002      	beq.n	80bc0 <UnityTestResultsBegin+0x3c>
   80bba:	3301      	adds	r3, #1
   80bbc:	6013      	str	r3, [r2, #0]
   80bbe:	e011      	b.n	80be4 <UnityTestResultsBegin+0x60>
   80bc0:	210a      	movs	r1, #10
   80bc2:	4b3a      	ldr	r3, [pc, #232]	; (80cac <UnityTestResultsBegin+0x128>)
   80bc4:	4798      	blx	r3
   80bc6:	e00d      	b.n	80be4 <UnityTestResultsBegin+0x60>
   80bc8:	213a      	movs	r1, #58	; 0x3a
   80bca:	4b38      	ldr	r3, [pc, #224]	; (80cac <UnityTestResultsBegin+0x128>)
   80bcc:	4798      	blx	r3
   80bce:	e009      	b.n	80be4 <UnityTestResultsBegin+0x60>
   80bd0:	6883      	ldr	r3, [r0, #8]
   80bd2:	681b      	ldr	r3, [r3, #0]
   80bd4:	223a      	movs	r2, #58	; 0x3a
   80bd6:	701a      	strb	r2, [r3, #0]
   80bd8:	4b33      	ldr	r3, [pc, #204]	; (80ca8 <UnityTestResultsBegin+0x124>)
   80bda:	681b      	ldr	r3, [r3, #0]
   80bdc:	689b      	ldr	r3, [r3, #8]
   80bde:	681a      	ldr	r2, [r3, #0]
   80be0:	3201      	adds	r2, #1
   80be2:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)line);
   80be4:	4628      	mov	r0, r5
   80be6:	4b32      	ldr	r3, [pc, #200]	; (80cb0 <UnityTestResultsBegin+0x12c>)
   80be8:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80bea:	4b2f      	ldr	r3, [pc, #188]	; (80ca8 <UnityTestResultsBegin+0x124>)
   80bec:	6818      	ldr	r0, [r3, #0]
   80bee:	6882      	ldr	r2, [r0, #8]
   80bf0:	6893      	ldr	r3, [r2, #8]
   80bf2:	3b01      	subs	r3, #1
   80bf4:	6093      	str	r3, [r2, #8]
   80bf6:	2b00      	cmp	r3, #0
   80bf8:	da19      	bge.n	80c2e <UnityTestResultsBegin+0xaa>
   80bfa:	6882      	ldr	r2, [r0, #8]
   80bfc:	6891      	ldr	r1, [r2, #8]
   80bfe:	6993      	ldr	r3, [r2, #24]
   80c00:	4299      	cmp	r1, r3
   80c02:	db10      	blt.n	80c26 <UnityTestResultsBegin+0xa2>
   80c04:	6813      	ldr	r3, [r2, #0]
   80c06:	223a      	movs	r2, #58	; 0x3a
   80c08:	701a      	strb	r2, [r3, #0]
   80c0a:	4b27      	ldr	r3, [pc, #156]	; (80ca8 <UnityTestResultsBegin+0x124>)
   80c0c:	6818      	ldr	r0, [r3, #0]
   80c0e:	6882      	ldr	r2, [r0, #8]
   80c10:	6813      	ldr	r3, [r2, #0]
   80c12:	7819      	ldrb	r1, [r3, #0]
   80c14:	290a      	cmp	r1, #10
   80c16:	d002      	beq.n	80c1e <UnityTestResultsBegin+0x9a>
   80c18:	3301      	adds	r3, #1
   80c1a:	6013      	str	r3, [r2, #0]
   80c1c:	e011      	b.n	80c42 <UnityTestResultsBegin+0xbe>
   80c1e:	210a      	movs	r1, #10
   80c20:	4b22      	ldr	r3, [pc, #136]	; (80cac <UnityTestResultsBegin+0x128>)
   80c22:	4798      	blx	r3
   80c24:	e00d      	b.n	80c42 <UnityTestResultsBegin+0xbe>
   80c26:	213a      	movs	r1, #58	; 0x3a
   80c28:	4b20      	ldr	r3, [pc, #128]	; (80cac <UnityTestResultsBegin+0x128>)
   80c2a:	4798      	blx	r3
   80c2c:	e009      	b.n	80c42 <UnityTestResultsBegin+0xbe>
   80c2e:	6883      	ldr	r3, [r0, #8]
   80c30:	681b      	ldr	r3, [r3, #0]
   80c32:	223a      	movs	r2, #58	; 0x3a
   80c34:	701a      	strb	r2, [r3, #0]
   80c36:	4b1c      	ldr	r3, [pc, #112]	; (80ca8 <UnityTestResultsBegin+0x124>)
   80c38:	681b      	ldr	r3, [r3, #0]
   80c3a:	689b      	ldr	r3, [r3, #8]
   80c3c:	681a      	ldr	r2, [r3, #0]
   80c3e:	3201      	adds	r2, #1
   80c40:	601a      	str	r2, [r3, #0]
    UnityPrint(Unity.CurrentTestName);
   80c42:	4b1c      	ldr	r3, [pc, #112]	; (80cb4 <UnityTestResultsBegin+0x130>)
   80c44:	6858      	ldr	r0, [r3, #4]
   80c46:	4b17      	ldr	r3, [pc, #92]	; (80ca4 <UnityTestResultsBegin+0x120>)
   80c48:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80c4a:	4b17      	ldr	r3, [pc, #92]	; (80ca8 <UnityTestResultsBegin+0x124>)
   80c4c:	6818      	ldr	r0, [r3, #0]
   80c4e:	6882      	ldr	r2, [r0, #8]
   80c50:	6893      	ldr	r3, [r2, #8]
   80c52:	3b01      	subs	r3, #1
   80c54:	6093      	str	r3, [r2, #8]
   80c56:	2b00      	cmp	r3, #0
   80c58:	da19      	bge.n	80c8e <UnityTestResultsBegin+0x10a>
   80c5a:	6882      	ldr	r2, [r0, #8]
   80c5c:	6891      	ldr	r1, [r2, #8]
   80c5e:	6993      	ldr	r3, [r2, #24]
   80c60:	4299      	cmp	r1, r3
   80c62:	db10      	blt.n	80c86 <UnityTestResultsBegin+0x102>
   80c64:	6813      	ldr	r3, [r2, #0]
   80c66:	223a      	movs	r2, #58	; 0x3a
   80c68:	701a      	strb	r2, [r3, #0]
   80c6a:	4b0f      	ldr	r3, [pc, #60]	; (80ca8 <UnityTestResultsBegin+0x124>)
   80c6c:	6818      	ldr	r0, [r3, #0]
   80c6e:	6882      	ldr	r2, [r0, #8]
   80c70:	6813      	ldr	r3, [r2, #0]
   80c72:	7819      	ldrb	r1, [r3, #0]
   80c74:	290a      	cmp	r1, #10
   80c76:	d002      	beq.n	80c7e <UnityTestResultsBegin+0xfa>
   80c78:	3301      	adds	r3, #1
   80c7a:	6013      	str	r3, [r2, #0]
   80c7c:	bd38      	pop	{r3, r4, r5, pc}
   80c7e:	210a      	movs	r1, #10
   80c80:	4b0a      	ldr	r3, [pc, #40]	; (80cac <UnityTestResultsBegin+0x128>)
   80c82:	4798      	blx	r3
   80c84:	bd38      	pop	{r3, r4, r5, pc}
   80c86:	213a      	movs	r1, #58	; 0x3a
   80c88:	4b08      	ldr	r3, [pc, #32]	; (80cac <UnityTestResultsBegin+0x128>)
   80c8a:	4798      	blx	r3
   80c8c:	bd38      	pop	{r3, r4, r5, pc}
   80c8e:	6883      	ldr	r3, [r0, #8]
   80c90:	681b      	ldr	r3, [r3, #0]
   80c92:	223a      	movs	r2, #58	; 0x3a
   80c94:	701a      	strb	r2, [r3, #0]
   80c96:	4b04      	ldr	r3, [pc, #16]	; (80ca8 <UnityTestResultsBegin+0x124>)
   80c98:	681b      	ldr	r3, [r3, #0]
   80c9a:	689b      	ldr	r3, [r3, #8]
   80c9c:	681a      	ldr	r2, [r3, #0]
   80c9e:	3201      	adds	r2, #1
   80ca0:	601a      	str	r2, [r3, #0]
   80ca2:	bd38      	pop	{r3, r4, r5, pc}
   80ca4:	00080959 	.word	0x00080959
   80ca8:	20070430 	.word	0x20070430
   80cac:	00081e41 	.word	0x00081e41
   80cb0:	00080631 	.word	0x00080631
   80cb4:	2007099c 	.word	0x2007099c

00080cb8 <UnityTestResultsFailBegin>:
}

//-----------------------------------------------
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
   80cb8:	b508      	push	{r3, lr}
   80cba:	4601      	mov	r1, r0
    UnityTestResultsBegin(Unity.TestFile, line);
   80cbc:	4b19      	ldr	r3, [pc, #100]	; (80d24 <UnityTestResultsFailBegin+0x6c>)
   80cbe:	6818      	ldr	r0, [r3, #0]
   80cc0:	4b19      	ldr	r3, [pc, #100]	; (80d28 <UnityTestResultsFailBegin+0x70>)
   80cc2:	4798      	blx	r3
    UnityPrint(UnityStrFail);
   80cc4:	4819      	ldr	r0, [pc, #100]	; (80d2c <UnityTestResultsFailBegin+0x74>)
   80cc6:	4b1a      	ldr	r3, [pc, #104]	; (80d30 <UnityTestResultsFailBegin+0x78>)
   80cc8:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80cca:	4b1a      	ldr	r3, [pc, #104]	; (80d34 <UnityTestResultsFailBegin+0x7c>)
   80ccc:	6818      	ldr	r0, [r3, #0]
   80cce:	6882      	ldr	r2, [r0, #8]
   80cd0:	6893      	ldr	r3, [r2, #8]
   80cd2:	3b01      	subs	r3, #1
   80cd4:	6093      	str	r3, [r2, #8]
   80cd6:	2b00      	cmp	r3, #0
   80cd8:	da19      	bge.n	80d0e <UnityTestResultsFailBegin+0x56>
   80cda:	6882      	ldr	r2, [r0, #8]
   80cdc:	6891      	ldr	r1, [r2, #8]
   80cde:	6993      	ldr	r3, [r2, #24]
   80ce0:	4299      	cmp	r1, r3
   80ce2:	db10      	blt.n	80d06 <UnityTestResultsFailBegin+0x4e>
   80ce4:	6813      	ldr	r3, [r2, #0]
   80ce6:	223a      	movs	r2, #58	; 0x3a
   80ce8:	701a      	strb	r2, [r3, #0]
   80cea:	4b12      	ldr	r3, [pc, #72]	; (80d34 <UnityTestResultsFailBegin+0x7c>)
   80cec:	6818      	ldr	r0, [r3, #0]
   80cee:	6882      	ldr	r2, [r0, #8]
   80cf0:	6813      	ldr	r3, [r2, #0]
   80cf2:	7819      	ldrb	r1, [r3, #0]
   80cf4:	290a      	cmp	r1, #10
   80cf6:	d002      	beq.n	80cfe <UnityTestResultsFailBegin+0x46>
   80cf8:	3301      	adds	r3, #1
   80cfa:	6013      	str	r3, [r2, #0]
   80cfc:	bd08      	pop	{r3, pc}
   80cfe:	210a      	movs	r1, #10
   80d00:	4b0d      	ldr	r3, [pc, #52]	; (80d38 <UnityTestResultsFailBegin+0x80>)
   80d02:	4798      	blx	r3
   80d04:	bd08      	pop	{r3, pc}
   80d06:	213a      	movs	r1, #58	; 0x3a
   80d08:	4b0b      	ldr	r3, [pc, #44]	; (80d38 <UnityTestResultsFailBegin+0x80>)
   80d0a:	4798      	blx	r3
   80d0c:	bd08      	pop	{r3, pc}
   80d0e:	6883      	ldr	r3, [r0, #8]
   80d10:	681b      	ldr	r3, [r3, #0]
   80d12:	223a      	movs	r2, #58	; 0x3a
   80d14:	701a      	strb	r2, [r3, #0]
   80d16:	4b07      	ldr	r3, [pc, #28]	; (80d34 <UnityTestResultsFailBegin+0x7c>)
   80d18:	681b      	ldr	r3, [r3, #0]
   80d1a:	689b      	ldr	r3, [r3, #8]
   80d1c:	681a      	ldr	r2, [r3, #0]
   80d1e:	3201      	adds	r2, #1
   80d20:	601a      	str	r2, [r3, #0]
   80d22:	bd08      	pop	{r3, pc}
   80d24:	2007099c 	.word	0x2007099c
   80d28:	00080b85 	.word	0x00080b85
   80d2c:	00082ea8 	.word	0x00082ea8
   80d30:	00080959 	.word	0x00080959
   80d34:	20070430 	.word	0x20070430
   80d38:	00081e41 	.word	0x00081e41

00080d3c <UnityAddMsgIfSpecified>:
    UNITY_PRINT_EOL;
}

//-----------------------------------------------
static void UnityAddMsgIfSpecified(const char* msg)
{
   80d3c:	b538      	push	{r3, r4, r5, lr}
    if (msg)
   80d3e:	4605      	mov	r5, r0
   80d40:	b120      	cbz	r0, 80d4c <UnityAddMsgIfSpecified+0x10>
    {
        UnityPrint(UnityStrSpacer);
   80d42:	4803      	ldr	r0, [pc, #12]	; (80d50 <UnityAddMsgIfSpecified+0x14>)
   80d44:	4c03      	ldr	r4, [pc, #12]	; (80d54 <UnityAddMsgIfSpecified+0x18>)
   80d46:	47a0      	blx	r4
        UnityPrint(msg);
   80d48:	4628      	mov	r0, r5
   80d4a:	47a0      	blx	r4
   80d4c:	bd38      	pop	{r3, r4, r5, pc}
   80d4e:	bf00      	nop
   80d50:	00082e9c 	.word	0x00082e9c
   80d54:	00080959 	.word	0x00080959

00080d58 <UnityPrintMask>:
    }
}

//-----------------------------------------------
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
   80d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80d5c:	4607      	mov	r7, r0
   80d5e:	4688      	mov	r8, r1
   80d60:	2520      	movs	r5, #32
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
   80d62:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
                UNITY_OUTPUT_CHAR('0');
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   80d66:	4e43      	ldr	r6, [pc, #268]	; (80e74 <UnityPrintMask+0x11c>)
   80d68:	f04f 0958 	mov.w	r9, #88	; 0x58
   80d6c:	f8df a108 	ldr.w	sl, [pc, #264]	; 80e78 <UnityPrintMask+0x120>
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
    {
        if (current_bit & mask)
   80d70:	423c      	tst	r4, r7
   80d72:	d052      	beq.n	80e1a <UnityPrintMask+0xc2>
        {
            if (current_bit & number)
   80d74:	ea14 0f08 	tst.w	r4, r8
   80d78:	d027      	beq.n	80dca <UnityPrintMask+0x72>
            {
                UNITY_OUTPUT_CHAR('1');
   80d7a:	6830      	ldr	r0, [r6, #0]
   80d7c:	6882      	ldr	r2, [r0, #8]
   80d7e:	6893      	ldr	r3, [r2, #8]
   80d80:	3b01      	subs	r3, #1
   80d82:	6093      	str	r3, [r2, #8]
   80d84:	2b00      	cmp	r3, #0
   80d86:	da16      	bge.n	80db6 <UnityPrintMask+0x5e>
   80d88:	6882      	ldr	r2, [r0, #8]
   80d8a:	6891      	ldr	r1, [r2, #8]
   80d8c:	6993      	ldr	r3, [r2, #24]
   80d8e:	4299      	cmp	r1, r3
   80d90:	db0e      	blt.n	80db0 <UnityPrintMask+0x58>
   80d92:	6813      	ldr	r3, [r2, #0]
   80d94:	2231      	movs	r2, #49	; 0x31
   80d96:	701a      	strb	r2, [r3, #0]
   80d98:	6830      	ldr	r0, [r6, #0]
   80d9a:	6882      	ldr	r2, [r0, #8]
   80d9c:	6813      	ldr	r3, [r2, #0]
   80d9e:	7819      	ldrb	r1, [r3, #0]
   80da0:	290a      	cmp	r1, #10
   80da2:	d002      	beq.n	80daa <UnityPrintMask+0x52>
   80da4:	3301      	adds	r3, #1
   80da6:	6013      	str	r3, [r2, #0]
   80da8:	e05e      	b.n	80e68 <UnityPrintMask+0x110>
   80daa:	210a      	movs	r1, #10
   80dac:	47d0      	blx	sl
   80dae:	e05b      	b.n	80e68 <UnityPrintMask+0x110>
   80db0:	2131      	movs	r1, #49	; 0x31
   80db2:	47d0      	blx	sl
   80db4:	e058      	b.n	80e68 <UnityPrintMask+0x110>
   80db6:	6883      	ldr	r3, [r0, #8]
   80db8:	681b      	ldr	r3, [r3, #0]
   80dba:	2231      	movs	r2, #49	; 0x31
   80dbc:	701a      	strb	r2, [r3, #0]
   80dbe:	6833      	ldr	r3, [r6, #0]
   80dc0:	689b      	ldr	r3, [r3, #8]
   80dc2:	681a      	ldr	r2, [r3, #0]
   80dc4:	3201      	adds	r2, #1
   80dc6:	601a      	str	r2, [r3, #0]
   80dc8:	e04e      	b.n	80e68 <UnityPrintMask+0x110>
            }
            else
            {
                UNITY_OUTPUT_CHAR('0');
   80dca:	6830      	ldr	r0, [r6, #0]
   80dcc:	6882      	ldr	r2, [r0, #8]
   80dce:	6893      	ldr	r3, [r2, #8]
   80dd0:	3b01      	subs	r3, #1
   80dd2:	6093      	str	r3, [r2, #8]
   80dd4:	2b00      	cmp	r3, #0
   80dd6:	da16      	bge.n	80e06 <UnityPrintMask+0xae>
   80dd8:	6882      	ldr	r2, [r0, #8]
   80dda:	6891      	ldr	r1, [r2, #8]
   80ddc:	6993      	ldr	r3, [r2, #24]
   80dde:	4299      	cmp	r1, r3
   80de0:	db0e      	blt.n	80e00 <UnityPrintMask+0xa8>
   80de2:	6813      	ldr	r3, [r2, #0]
   80de4:	2230      	movs	r2, #48	; 0x30
   80de6:	701a      	strb	r2, [r3, #0]
   80de8:	6830      	ldr	r0, [r6, #0]
   80dea:	6882      	ldr	r2, [r0, #8]
   80dec:	6813      	ldr	r3, [r2, #0]
   80dee:	7819      	ldrb	r1, [r3, #0]
   80df0:	290a      	cmp	r1, #10
   80df2:	d002      	beq.n	80dfa <UnityPrintMask+0xa2>
   80df4:	3301      	adds	r3, #1
   80df6:	6013      	str	r3, [r2, #0]
   80df8:	e036      	b.n	80e68 <UnityPrintMask+0x110>
   80dfa:	210a      	movs	r1, #10
   80dfc:	47d0      	blx	sl
   80dfe:	e033      	b.n	80e68 <UnityPrintMask+0x110>
   80e00:	2130      	movs	r1, #48	; 0x30
   80e02:	47d0      	blx	sl
   80e04:	e030      	b.n	80e68 <UnityPrintMask+0x110>
   80e06:	6883      	ldr	r3, [r0, #8]
   80e08:	681b      	ldr	r3, [r3, #0]
   80e0a:	2230      	movs	r2, #48	; 0x30
   80e0c:	701a      	strb	r2, [r3, #0]
   80e0e:	6833      	ldr	r3, [r6, #0]
   80e10:	689b      	ldr	r3, [r3, #8]
   80e12:	681a      	ldr	r2, [r3, #0]
   80e14:	3201      	adds	r2, #1
   80e16:	601a      	str	r2, [r3, #0]
   80e18:	e026      	b.n	80e68 <UnityPrintMask+0x110>
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   80e1a:	6830      	ldr	r0, [r6, #0]
   80e1c:	6882      	ldr	r2, [r0, #8]
   80e1e:	6893      	ldr	r3, [r2, #8]
   80e20:	3b01      	subs	r3, #1
   80e22:	6093      	str	r3, [r2, #8]
   80e24:	2b00      	cmp	r3, #0
   80e26:	da16      	bge.n	80e56 <UnityPrintMask+0xfe>
   80e28:	6882      	ldr	r2, [r0, #8]
   80e2a:	6891      	ldr	r1, [r2, #8]
   80e2c:	6993      	ldr	r3, [r2, #24]
   80e2e:	4299      	cmp	r1, r3
   80e30:	db0e      	blt.n	80e50 <UnityPrintMask+0xf8>
   80e32:	6813      	ldr	r3, [r2, #0]
   80e34:	f883 9000 	strb.w	r9, [r3]
   80e38:	6830      	ldr	r0, [r6, #0]
   80e3a:	6882      	ldr	r2, [r0, #8]
   80e3c:	6813      	ldr	r3, [r2, #0]
   80e3e:	7819      	ldrb	r1, [r3, #0]
   80e40:	290a      	cmp	r1, #10
   80e42:	d002      	beq.n	80e4a <UnityPrintMask+0xf2>
   80e44:	3301      	adds	r3, #1
   80e46:	6013      	str	r3, [r2, #0]
   80e48:	e00e      	b.n	80e68 <UnityPrintMask+0x110>
   80e4a:	210a      	movs	r1, #10
   80e4c:	47d0      	blx	sl
   80e4e:	e00b      	b.n	80e68 <UnityPrintMask+0x110>
   80e50:	4649      	mov	r1, r9
   80e52:	47d0      	blx	sl
   80e54:	e008      	b.n	80e68 <UnityPrintMask+0x110>
   80e56:	6883      	ldr	r3, [r0, #8]
   80e58:	681b      	ldr	r3, [r3, #0]
   80e5a:	f883 9000 	strb.w	r9, [r3]
   80e5e:	6833      	ldr	r3, [r6, #0]
   80e60:	689b      	ldr	r3, [r3, #8]
   80e62:	681a      	ldr	r2, [r3, #0]
   80e64:	3201      	adds	r2, #1
   80e66:	601a      	str	r2, [r3, #0]
        }
        current_bit = current_bit >> 1;
   80e68:	0864      	lsrs	r4, r4, #1
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
   80e6a:	3d01      	subs	r5, #1
   80e6c:	d180      	bne.n	80d70 <UnityPrintMask+0x18>
        {
            UNITY_OUTPUT_CHAR('X');
        }
        current_bit = current_bit >> 1;
    }
}
   80e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80e72:	bf00      	nop
   80e74:	20070430 	.word	0x20070430
   80e78:	00081e41 	.word	0x00081e41

00080e7c <UnityPrintFail>:
#endif

//-----------------------------------------------

void UnityPrintFail(void)
{
   80e7c:	b508      	push	{r3, lr}
    UnityPrint(UnityStrFail);
   80e7e:	4802      	ldr	r0, [pc, #8]	; (80e88 <UnityPrintFail+0xc>)
   80e80:	4b02      	ldr	r3, [pc, #8]	; (80e8c <UnityPrintFail+0x10>)
   80e82:	4798      	blx	r3
   80e84:	bd08      	pop	{r3, pc}
   80e86:	bf00      	nop
   80e88:	00082ea8 	.word	0x00082ea8
   80e8c:	00080959 	.word	0x00080959

00080e90 <UnityPrintOk>:
}

void UnityPrintOk(void)
{
   80e90:	b508      	push	{r3, lr}
    UnityPrint(UnityStrOk);
   80e92:	4802      	ldr	r0, [pc, #8]	; (80e9c <UnityPrintOk+0xc>)
   80e94:	4b02      	ldr	r3, [pc, #8]	; (80ea0 <UnityPrintOk+0x10>)
   80e96:	4798      	blx	r3
   80e98:	bd08      	pop	{r3, pc}
   80e9a:	bf00      	nop
   80e9c:	00082e98 	.word	0x00082e98
   80ea0:	00080959 	.word	0x00080959

00080ea4 <UnityConcludeTest>:
    UNITY_OUTPUT_CHAR(':');
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
}
   80752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80756:	bf00      	nop
   80758:	20070430 	.word	0x20070430
   8075c:	cccccccd 	.word	0xcccccccd
   80760:	00081cf5 	.word	0x00081cf5

00080764 <UnityPrintNumberHex>:

//-----------------------------------------------
<<<<<<< HEAD
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
   80764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80768:	4606      	mov	r6, r0
   8076a:	460c      	mov	r4, r1
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
   8076c:	4b5e      	ldr	r3, [pc, #376]	; (808e8 <UnityPrintNumberHex+0x184>)
   8076e:	6818      	ldr	r0, [r3, #0]
   80770:	6882      	ldr	r2, [r0, #8]
   80772:	6893      	ldr	r3, [r2, #8]
   80774:	3b01      	subs	r3, #1
   80776:	6093      	str	r3, [r2, #8]
   80778:	2b00      	cmp	r3, #0
   8077a:	da19      	bge.n	807b0 <UnityPrintNumberHex+0x4c>
   8077c:	6882      	ldr	r2, [r0, #8]
   8077e:	6891      	ldr	r1, [r2, #8]
   80780:	6993      	ldr	r3, [r2, #24]
   80782:	4299      	cmp	r1, r3
   80784:	db10      	blt.n	807a8 <UnityPrintNumberHex+0x44>
   80786:	6813      	ldr	r3, [r2, #0]
   80788:	2230      	movs	r2, #48	; 0x30
   8078a:	701a      	strb	r2, [r3, #0]
   8078c:	4b56      	ldr	r3, [pc, #344]	; (808e8 <UnityPrintNumberHex+0x184>)
   8078e:	6818      	ldr	r0, [r3, #0]
   80790:	6882      	ldr	r2, [r0, #8]
   80792:	6813      	ldr	r3, [r2, #0]
   80794:	7819      	ldrb	r1, [r3, #0]
   80796:	290a      	cmp	r1, #10
   80798:	d002      	beq.n	807a0 <UnityPrintNumberHex+0x3c>
   8079a:	3301      	adds	r3, #1
   8079c:	6013      	str	r3, [r2, #0]
   8079e:	e011      	b.n	807c4 <UnityPrintNumberHex+0x60>
   807a0:	210a      	movs	r1, #10
   807a2:	4b52      	ldr	r3, [pc, #328]	; (808ec <UnityPrintNumberHex+0x188>)
   807a4:	4798      	blx	r3
   807a6:	e00d      	b.n	807c4 <UnityPrintNumberHex+0x60>
   807a8:	2130      	movs	r1, #48	; 0x30
   807aa:	4b50      	ldr	r3, [pc, #320]	; (808ec <UnityPrintNumberHex+0x188>)
   807ac:	4798      	blx	r3
   807ae:	e009      	b.n	807c4 <UnityPrintNumberHex+0x60>
   807b0:	6883      	ldr	r3, [r0, #8]
   807b2:	681b      	ldr	r3, [r3, #0]
   807b4:	2230      	movs	r2, #48	; 0x30
   807b6:	701a      	strb	r2, [r3, #0]
   807b8:	4b4b      	ldr	r3, [pc, #300]	; (808e8 <UnityPrintNumberHex+0x184>)
   807ba:	681b      	ldr	r3, [r3, #0]
   807bc:	689b      	ldr	r3, [r3, #8]
   807be:	681a      	ldr	r2, [r3, #0]
   807c0:	3201      	adds	r2, #1
   807c2:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_CHAR('x');
   807c4:	4b48      	ldr	r3, [pc, #288]	; (808e8 <UnityPrintNumberHex+0x184>)
   807c6:	6818      	ldr	r0, [r3, #0]
   807c8:	6882      	ldr	r2, [r0, #8]
   807ca:	6893      	ldr	r3, [r2, #8]
   807cc:	3b01      	subs	r3, #1
   807ce:	6093      	str	r3, [r2, #8]
   807d0:	2b00      	cmp	r3, #0
   807d2:	da1b      	bge.n	8080c <UnityPrintNumberHex+0xa8>
   807d4:	6882      	ldr	r2, [r0, #8]
   807d6:	6891      	ldr	r1, [r2, #8]
   807d8:	6993      	ldr	r3, [r2, #24]
   807da:	4299      	cmp	r1, r3
   807dc:	db10      	blt.n	80800 <UnityPrintNumberHex+0x9c>
   807de:	6813      	ldr	r3, [r2, #0]
   807e0:	2278      	movs	r2, #120	; 0x78
   807e2:	701a      	strb	r2, [r3, #0]
   807e4:	4b40      	ldr	r3, [pc, #256]	; (808e8 <UnityPrintNumberHex+0x184>)
   807e6:	6818      	ldr	r0, [r3, #0]
   807e8:	6882      	ldr	r2, [r0, #8]
   807ea:	6813      	ldr	r3, [r2, #0]
   807ec:	7819      	ldrb	r1, [r3, #0]
   807ee:	290a      	cmp	r1, #10
   807f0:	d002      	beq.n	807f8 <UnityPrintNumberHex+0x94>
   807f2:	3301      	adds	r3, #1
   807f4:	6013      	str	r3, [r2, #0]
   807f6:	e006      	b.n	80806 <UnityPrintNumberHex+0xa2>
   807f8:	210a      	movs	r1, #10
   807fa:	4b3c      	ldr	r3, [pc, #240]	; (808ec <UnityPrintNumberHex+0x188>)
   807fc:	4798      	blx	r3
   807fe:	e002      	b.n	80806 <UnityPrintNumberHex+0xa2>
   80800:	2178      	movs	r1, #120	; 0x78
   80802:	4b3a      	ldr	r3, [pc, #232]	; (808ec <UnityPrintNumberHex+0x188>)
   80804:	4798      	blx	r3

    while (nibbles > 0)
   80806:	b964      	cbnz	r4, 80822 <UnityPrintNumberHex+0xbe>
   80808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');
   8080c:	6883      	ldr	r3, [r0, #8]
   8080e:	681b      	ldr	r3, [r3, #0]
   80810:	2278      	movs	r2, #120	; 0x78
   80812:	701a      	strb	r2, [r3, #0]
   80814:	4b34      	ldr	r3, [pc, #208]	; (808e8 <UnityPrintNumberHex+0x184>)
   80816:	681b      	ldr	r3, [r3, #0]
   80818:	689b      	ldr	r3, [r3, #8]
   8081a:	681a      	ldr	r2, [r3, #0]
   8081c:	3201      	adds	r2, #1
   8081e:	601a      	str	r2, [r3, #0]
   80820:	e7f1      	b.n	80806 <UnityPrintNumberHex+0xa2>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   80822:	4d31      	ldr	r5, [pc, #196]	; (808e8 <UnityPrintNumberHex+0x184>)
   80824:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 808ec <UnityPrintNumberHex+0x188>
   80828:	f04f 080a 	mov.w	r8, #10
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
    {
        nibble = (number >> (--nibbles << 2)) & 0x0000000F;
   8082c:	3c01      	subs	r4, #1
   8082e:	b2e4      	uxtb	r4, r4
   80830:	00a3      	lsls	r3, r4, #2
   80832:	fa26 f303 	lsr.w	r3, r6, r3
   80836:	f003 030f 	and.w	r3, r3, #15
        if (nibble <= 9)
   8083a:	2b09      	cmp	r3, #9
   8083c:	d828      	bhi.n	80890 <UnityPrintNumberHex+0x12c>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
   8083e:	6828      	ldr	r0, [r5, #0]
   80840:	6881      	ldr	r1, [r0, #8]
   80842:	688a      	ldr	r2, [r1, #8]
   80844:	3a01      	subs	r2, #1
   80846:	608a      	str	r2, [r1, #8]
   80848:	2a00      	cmp	r2, #0
   8084a:	da17      	bge.n	8087c <UnityPrintNumberHex+0x118>
   8084c:	6882      	ldr	r2, [r0, #8]
   8084e:	6891      	ldr	r1, [r2, #8]
   80850:	6997      	ldr	r7, [r2, #24]
   80852:	42b9      	cmp	r1, r7
   80854:	db0e      	blt.n	80874 <UnityPrintNumberHex+0x110>
   80856:	6812      	ldr	r2, [r2, #0]
   80858:	3330      	adds	r3, #48	; 0x30
   8085a:	7013      	strb	r3, [r2, #0]
   8085c:	6828      	ldr	r0, [r5, #0]
   8085e:	6882      	ldr	r2, [r0, #8]
   80860:	6813      	ldr	r3, [r2, #0]
   80862:	7819      	ldrb	r1, [r3, #0]
   80864:	290a      	cmp	r1, #10
   80866:	d002      	beq.n	8086e <UnityPrintNumberHex+0x10a>
   80868:	3301      	adds	r3, #1
   8086a:	6013      	str	r3, [r2, #0]
   8086c:	e038      	b.n	808e0 <UnityPrintNumberHex+0x17c>
   8086e:	4641      	mov	r1, r8
   80870:	47c8      	blx	r9
   80872:	e035      	b.n	808e0 <UnityPrintNumberHex+0x17c>
   80874:	f103 0130 	add.w	r1, r3, #48	; 0x30
   80878:	47c8      	blx	r9
   8087a:	e031      	b.n	808e0 <UnityPrintNumberHex+0x17c>
   8087c:	6882      	ldr	r2, [r0, #8]
   8087e:	6812      	ldr	r2, [r2, #0]
   80880:	3330      	adds	r3, #48	; 0x30
   80882:	7013      	strb	r3, [r2, #0]
   80884:	682b      	ldr	r3, [r5, #0]
   80886:	689b      	ldr	r3, [r3, #8]
   80888:	681a      	ldr	r2, [r3, #0]
   8088a:	3201      	adds	r2, #1
   8088c:	601a      	str	r2, [r3, #0]
   8088e:	e027      	b.n	808e0 <UnityPrintNumberHex+0x17c>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   80890:	6828      	ldr	r0, [r5, #0]
   80892:	6881      	ldr	r1, [r0, #8]
   80894:	688a      	ldr	r2, [r1, #8]
   80896:	3a01      	subs	r2, #1
   80898:	608a      	str	r2, [r1, #8]
   8089a:	2a00      	cmp	r2, #0
   8089c:	da17      	bge.n	808ce <UnityPrintNumberHex+0x16a>
   8089e:	6882      	ldr	r2, [r0, #8]
   808a0:	6891      	ldr	r1, [r2, #8]
   808a2:	6997      	ldr	r7, [r2, #24]
   808a4:	42b9      	cmp	r1, r7
   808a6:	db0e      	blt.n	808c6 <UnityPrintNumberHex+0x162>
   808a8:	6812      	ldr	r2, [r2, #0]
   808aa:	3337      	adds	r3, #55	; 0x37
   808ac:	7013      	strb	r3, [r2, #0]
   808ae:	6828      	ldr	r0, [r5, #0]
   808b0:	6882      	ldr	r2, [r0, #8]
   808b2:	6813      	ldr	r3, [r2, #0]
   808b4:	7819      	ldrb	r1, [r3, #0]
   808b6:	290a      	cmp	r1, #10
   808b8:	d002      	beq.n	808c0 <UnityPrintNumberHex+0x15c>
   808ba:	3301      	adds	r3, #1
   808bc:	6013      	str	r3, [r2, #0]
   808be:	e00f      	b.n	808e0 <UnityPrintNumberHex+0x17c>
   808c0:	4641      	mov	r1, r8
   808c2:	47c8      	blx	r9
   808c4:	e00c      	b.n	808e0 <UnityPrintNumberHex+0x17c>
   808c6:	f103 0137 	add.w	r1, r3, #55	; 0x37
   808ca:	47c8      	blx	r9
   808cc:	e008      	b.n	808e0 <UnityPrintNumberHex+0x17c>
   808ce:	6882      	ldr	r2, [r0, #8]
   808d0:	6812      	ldr	r2, [r2, #0]
   808d2:	3337      	adds	r3, #55	; 0x37
   808d4:	7013      	strb	r3, [r2, #0]
   808d6:	682b      	ldr	r3, [r5, #0]
   808d8:	689b      	ldr	r3, [r3, #8]
   808da:	681a      	ldr	r2, [r3, #0]
   808dc:	3201      	adds	r2, #1
   808de:	601a      	str	r2, [r3, #0]
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
   808e0:	2c00      	cmp	r4, #0
   808e2:	d1a3      	bne.n	8082c <UnityPrintNumberHex+0xc8>
   808e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   808e8:	20070430 	.word	0x20070430
   808ec:	00081cf5 	.word	0x00081cf5

000808f0 <UnityPrint>:
//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
{
   808f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const char* pch = string;

    if (pch != NULL)
   808f2:	2800      	cmp	r0, #0
   808f4:	f000 810a 	beq.w	80b0c <UnityPrint+0x21c>
    {
        while (*pch)
   808f8:	7803      	ldrb	r3, [r0, #0]
   808fa:	2b00      	cmp	r3, #0
   808fc:	f000 8106 	beq.w	80b0c <UnityPrint+0x21c>
   80900:	1c44      	adds	r4, r0, #1
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80902:	4d83      	ldr	r5, [pc, #524]	; (80b10 <UnityPrint+0x220>)
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   80904:	4e83      	ldr	r6, [pc, #524]	; (80b14 <UnityPrint+0x224>)
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80906:	4f84      	ldr	r7, [pc, #528]	; (80b18 <UnityPrint+0x228>)
    if (pch != NULL)
    {
        while (*pch)
        {
            // printable characters plus CR & LF are printed
            if ((*pch <= 126) && (*pch >= 32))
   80908:	f1a3 0220 	sub.w	r2, r3, #32
   8090c:	b2d2      	uxtb	r2, r2
   8090e:	2a5e      	cmp	r2, #94	; 0x5e
   80910:	d82a      	bhi.n	80968 <UnityPrint+0x78>
            {
                UNITY_OUTPUT_CHAR(*pch);
   80912:	6828      	ldr	r0, [r5, #0]
   80914:	6882      	ldr	r2, [r0, #8]
   80916:	6893      	ldr	r3, [r2, #8]
   80918:	3b01      	subs	r3, #1
   8091a:	6093      	str	r3, [r2, #8]
   8091c:	2b00      	cmp	r3, #0
   8091e:	da18      	bge.n	80952 <UnityPrint+0x62>
   80920:	6882      	ldr	r2, [r0, #8]
   80922:	6891      	ldr	r1, [r2, #8]
   80924:	6993      	ldr	r3, [r2, #24]
   80926:	4299      	cmp	r1, r3
   80928:	db0f      	blt.n	8094a <UnityPrint+0x5a>
   8092a:	6813      	ldr	r3, [r2, #0]
   8092c:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   80930:	701a      	strb	r2, [r3, #0]
   80932:	6828      	ldr	r0, [r5, #0]
   80934:	6882      	ldr	r2, [r0, #8]
   80936:	6813      	ldr	r3, [r2, #0]
   80938:	7819      	ldrb	r1, [r3, #0]
   8093a:	290a      	cmp	r1, #10
   8093c:	d002      	beq.n	80944 <UnityPrint+0x54>
   8093e:	3301      	adds	r3, #1
   80940:	6013      	str	r3, [r2, #0]
   80942:	e0de      	b.n	80b02 <UnityPrint+0x212>
   80944:	210a      	movs	r1, #10
   80946:	47b8      	blx	r7
   80948:	e0db      	b.n	80b02 <UnityPrint+0x212>
   8094a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   8094e:	47b8      	blx	r7
   80950:	e0d7      	b.n	80b02 <UnityPrint+0x212>
   80952:	6883      	ldr	r3, [r0, #8]
   80954:	681b      	ldr	r3, [r3, #0]
   80956:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   8095a:	701a      	strb	r2, [r3, #0]
   8095c:	682b      	ldr	r3, [r5, #0]
   8095e:	689b      	ldr	r3, [r3, #8]
   80960:	681a      	ldr	r2, [r3, #0]
   80962:	3201      	adds	r2, #1
   80964:	601a      	str	r2, [r3, #0]
   80966:	e0cc      	b.n	80b02 <UnityPrint+0x212>
            }
            //write escaped carriage returns
            else if (*pch == 13)
   80968:	2b0d      	cmp	r3, #13
   8096a:	d14e      	bne.n	80a0a <UnityPrint+0x11a>
            {
                UNITY_OUTPUT_CHAR('\\');
   8096c:	6828      	ldr	r0, [r5, #0]
   8096e:	6882      	ldr	r2, [r0, #8]
   80970:	6893      	ldr	r3, [r2, #8]
   80972:	3b01      	subs	r3, #1
   80974:	6093      	str	r3, [r2, #8]
   80976:	2b00      	cmp	r3, #0
   80978:	da16      	bge.n	809a8 <UnityPrint+0xb8>
   8097a:	6882      	ldr	r2, [r0, #8]
   8097c:	6891      	ldr	r1, [r2, #8]
   8097e:	6993      	ldr	r3, [r2, #24]
   80980:	4299      	cmp	r1, r3
   80982:	db0e      	blt.n	809a2 <UnityPrint+0xb2>
   80984:	6813      	ldr	r3, [r2, #0]
   80986:	225c      	movs	r2, #92	; 0x5c
   80988:	701a      	strb	r2, [r3, #0]
   8098a:	6828      	ldr	r0, [r5, #0]
   8098c:	6882      	ldr	r2, [r0, #8]
   8098e:	6813      	ldr	r3, [r2, #0]
   80990:	7819      	ldrb	r1, [r3, #0]
   80992:	290a      	cmp	r1, #10
   80994:	d002      	beq.n	8099c <UnityPrint+0xac>
   80996:	3301      	adds	r3, #1
   80998:	6013      	str	r3, [r2, #0]
   8099a:	e00e      	b.n	809ba <UnityPrint+0xca>
   8099c:	210a      	movs	r1, #10
   8099e:	47b8      	blx	r7
   809a0:	e00b      	b.n	809ba <UnityPrint+0xca>
   809a2:	215c      	movs	r1, #92	; 0x5c
   809a4:	47b8      	blx	r7
   809a6:	e008      	b.n	809ba <UnityPrint+0xca>
   809a8:	6883      	ldr	r3, [r0, #8]
   809aa:	681b      	ldr	r3, [r3, #0]
   809ac:	225c      	movs	r2, #92	; 0x5c
   809ae:	701a      	strb	r2, [r3, #0]
   809b0:	682b      	ldr	r3, [r5, #0]
   809b2:	689b      	ldr	r3, [r3, #8]
   809b4:	681a      	ldr	r2, [r3, #0]
   809b6:	3201      	adds	r2, #1
   809b8:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('r');
   809ba:	6828      	ldr	r0, [r5, #0]
   809bc:	6882      	ldr	r2, [r0, #8]
   809be:	6893      	ldr	r3, [r2, #8]
   809c0:	3b01      	subs	r3, #1
   809c2:	6093      	str	r3, [r2, #8]
   809c4:	2b00      	cmp	r3, #0
   809c6:	da16      	bge.n	809f6 <UnityPrint+0x106>
   809c8:	6882      	ldr	r2, [r0, #8]
   809ca:	6891      	ldr	r1, [r2, #8]
   809cc:	6993      	ldr	r3, [r2, #24]
   809ce:	4299      	cmp	r1, r3
   809d0:	db0e      	blt.n	809f0 <UnityPrint+0x100>
   809d2:	6813      	ldr	r3, [r2, #0]
   809d4:	2272      	movs	r2, #114	; 0x72
   809d6:	701a      	strb	r2, [r3, #0]
   809d8:	6828      	ldr	r0, [r5, #0]
   809da:	6882      	ldr	r2, [r0, #8]
   809dc:	6813      	ldr	r3, [r2, #0]
   809de:	7819      	ldrb	r1, [r3, #0]
   809e0:	290a      	cmp	r1, #10
   809e2:	d002      	beq.n	809ea <UnityPrint+0xfa>
   809e4:	3301      	adds	r3, #1
   809e6:	6013      	str	r3, [r2, #0]
   809e8:	e08b      	b.n	80b02 <UnityPrint+0x212>
   809ea:	210a      	movs	r1, #10
   809ec:	47b8      	blx	r7
   809ee:	e088      	b.n	80b02 <UnityPrint+0x212>
   809f0:	2172      	movs	r1, #114	; 0x72
   809f2:	47b8      	blx	r7
   809f4:	e085      	b.n	80b02 <UnityPrint+0x212>
   809f6:	6883      	ldr	r3, [r0, #8]
   809f8:	681b      	ldr	r3, [r3, #0]
   809fa:	2272      	movs	r2, #114	; 0x72
   809fc:	701a      	strb	r2, [r3, #0]
   809fe:	682b      	ldr	r3, [r5, #0]
   80a00:	689b      	ldr	r3, [r3, #8]
   80a02:	681a      	ldr	r2, [r3, #0]
   80a04:	3201      	adds	r2, #1
   80a06:	601a      	str	r2, [r3, #0]
   80a08:	e07b      	b.n	80b02 <UnityPrint+0x212>
            }
            //write escaped line feeds
            else if (*pch == 10)
   80a0a:	2b0a      	cmp	r3, #10
   80a0c:	d14e      	bne.n	80aac <UnityPrint+0x1bc>
            {
                UNITY_OUTPUT_CHAR('\\');
   80a0e:	6828      	ldr	r0, [r5, #0]
   80a10:	6882      	ldr	r2, [r0, #8]
   80a12:	6893      	ldr	r3, [r2, #8]
   80a14:	3b01      	subs	r3, #1
   80a16:	6093      	str	r3, [r2, #8]
   80a18:	2b00      	cmp	r3, #0
   80a1a:	da16      	bge.n	80a4a <UnityPrint+0x15a>
   80a1c:	6882      	ldr	r2, [r0, #8]
   80a1e:	6891      	ldr	r1, [r2, #8]
   80a20:	6993      	ldr	r3, [r2, #24]
   80a22:	4299      	cmp	r1, r3
   80a24:	db0e      	blt.n	80a44 <UnityPrint+0x154>
   80a26:	6813      	ldr	r3, [r2, #0]
   80a28:	225c      	movs	r2, #92	; 0x5c
   80a2a:	701a      	strb	r2, [r3, #0]
   80a2c:	6828      	ldr	r0, [r5, #0]
   80a2e:	6882      	ldr	r2, [r0, #8]
   80a30:	6813      	ldr	r3, [r2, #0]
   80a32:	7819      	ldrb	r1, [r3, #0]
   80a34:	290a      	cmp	r1, #10
   80a36:	d002      	beq.n	80a3e <UnityPrint+0x14e>
   80a38:	3301      	adds	r3, #1
   80a3a:	6013      	str	r3, [r2, #0]
   80a3c:	e00e      	b.n	80a5c <UnityPrint+0x16c>
   80a3e:	210a      	movs	r1, #10
   80a40:	47b8      	blx	r7
   80a42:	e00b      	b.n	80a5c <UnityPrint+0x16c>
   80a44:	215c      	movs	r1, #92	; 0x5c
   80a46:	47b8      	blx	r7
   80a48:	e008      	b.n	80a5c <UnityPrint+0x16c>
   80a4a:	6883      	ldr	r3, [r0, #8]
   80a4c:	681b      	ldr	r3, [r3, #0]
   80a4e:	225c      	movs	r2, #92	; 0x5c
   80a50:	701a      	strb	r2, [r3, #0]
   80a52:	682b      	ldr	r3, [r5, #0]
   80a54:	689b      	ldr	r3, [r3, #8]
   80a56:	681a      	ldr	r2, [r3, #0]
   80a58:	3201      	adds	r2, #1
   80a5a:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('n');
   80a5c:	6828      	ldr	r0, [r5, #0]
   80a5e:	6882      	ldr	r2, [r0, #8]
   80a60:	6893      	ldr	r3, [r2, #8]
   80a62:	3b01      	subs	r3, #1
   80a64:	6093      	str	r3, [r2, #8]
   80a66:	2b00      	cmp	r3, #0
   80a68:	da16      	bge.n	80a98 <UnityPrint+0x1a8>
   80a6a:	6882      	ldr	r2, [r0, #8]
   80a6c:	6891      	ldr	r1, [r2, #8]
   80a6e:	6993      	ldr	r3, [r2, #24]
   80a70:	4299      	cmp	r1, r3
   80a72:	db0e      	blt.n	80a92 <UnityPrint+0x1a2>
   80a74:	6813      	ldr	r3, [r2, #0]
   80a76:	226e      	movs	r2, #110	; 0x6e
   80a78:	701a      	strb	r2, [r3, #0]
   80a7a:	6828      	ldr	r0, [r5, #0]
   80a7c:	6882      	ldr	r2, [r0, #8]
   80a7e:	6813      	ldr	r3, [r2, #0]
   80a80:	7819      	ldrb	r1, [r3, #0]
   80a82:	290a      	cmp	r1, #10
   80a84:	d002      	beq.n	80a8c <UnityPrint+0x19c>
   80a86:	3301      	adds	r3, #1
   80a88:	6013      	str	r3, [r2, #0]
   80a8a:	e03a      	b.n	80b02 <UnityPrint+0x212>
   80a8c:	210a      	movs	r1, #10
   80a8e:	47b8      	blx	r7
   80a90:	e037      	b.n	80b02 <UnityPrint+0x212>
   80a92:	216e      	movs	r1, #110	; 0x6e
   80a94:	47b8      	blx	r7
   80a96:	e034      	b.n	80b02 <UnityPrint+0x212>
   80a98:	6883      	ldr	r3, [r0, #8]
   80a9a:	681b      	ldr	r3, [r3, #0]
   80a9c:	226e      	movs	r2, #110	; 0x6e
   80a9e:	701a      	strb	r2, [r3, #0]
   80aa0:	682b      	ldr	r3, [r5, #0]
   80aa2:	689b      	ldr	r3, [r3, #8]
   80aa4:	681a      	ldr	r2, [r3, #0]
   80aa6:	3201      	adds	r2, #1
   80aa8:	601a      	str	r2, [r3, #0]
   80aaa:	e02a      	b.n	80b02 <UnityPrint+0x212>
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80aac:	6828      	ldr	r0, [r5, #0]
   80aae:	6882      	ldr	r2, [r0, #8]
   80ab0:	6893      	ldr	r3, [r2, #8]
   80ab2:	3b01      	subs	r3, #1
   80ab4:	6093      	str	r3, [r2, #8]
   80ab6:	2b00      	cmp	r3, #0
   80ab8:	da16      	bge.n	80ae8 <UnityPrint+0x1f8>
   80aba:	6882      	ldr	r2, [r0, #8]
   80abc:	6891      	ldr	r1, [r2, #8]
   80abe:	6993      	ldr	r3, [r2, #24]
   80ac0:	4299      	cmp	r1, r3
   80ac2:	db0e      	blt.n	80ae2 <UnityPrint+0x1f2>
   80ac4:	6813      	ldr	r3, [r2, #0]
   80ac6:	225c      	movs	r2, #92	; 0x5c
   80ac8:	701a      	strb	r2, [r3, #0]
   80aca:	6828      	ldr	r0, [r5, #0]
   80acc:	6882      	ldr	r2, [r0, #8]
   80ace:	6813      	ldr	r3, [r2, #0]
   80ad0:	7819      	ldrb	r1, [r3, #0]
   80ad2:	290a      	cmp	r1, #10
   80ad4:	d002      	beq.n	80adc <UnityPrint+0x1ec>
   80ad6:	3301      	adds	r3, #1
   80ad8:	6013      	str	r3, [r2, #0]
   80ada:	e00e      	b.n	80afa <UnityPrint+0x20a>
   80adc:	210a      	movs	r1, #10
   80ade:	47b8      	blx	r7
   80ae0:	e00b      	b.n	80afa <UnityPrint+0x20a>
   80ae2:	215c      	movs	r1, #92	; 0x5c
   80ae4:	47b8      	blx	r7
   80ae6:	e008      	b.n	80afa <UnityPrint+0x20a>
   80ae8:	6883      	ldr	r3, [r0, #8]
   80aea:	681b      	ldr	r3, [r3, #0]
   80aec:	225c      	movs	r2, #92	; 0x5c
   80aee:	701a      	strb	r2, [r3, #0]
   80af0:	682b      	ldr	r3, [r5, #0]
   80af2:	689b      	ldr	r3, [r3, #8]
   80af4:	681a      	ldr	r2, [r3, #0]
   80af6:	3201      	adds	r2, #1
   80af8:	601a      	str	r2, [r3, #0]
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   80afa:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   80afe:	2102      	movs	r1, #2
   80b00:	47b0      	blx	r6
{
    const char* pch = string;

    if (pch != NULL)
    {
        while (*pch)
   80b02:	f814 3b01 	ldrb.w	r3, [r4], #1
   80b06:	2b00      	cmp	r3, #0
   80b08:	f47f aefe 	bne.w	80908 <UnityPrint+0x18>
   80b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80b0e:	bf00      	nop
   80b10:	20070430 	.word	0x20070430
   80b14:	00080765 	.word	0x00080765
   80b18:	00081cf5 	.word	0x00081cf5

00080b1c <UnityTestResultsBegin>:
    UnityPrint(UnityStrOk);
}

//-----------------------------------------------
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
   80b1c:	b538      	push	{r3, r4, r5, lr}
   80b1e:	460d      	mov	r5, r1
    UnityPrint(file);
   80b20:	4b46      	ldr	r3, [pc, #280]	; (80c3c <UnityTestResultsBegin+0x120>)
   80b22:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80b24:	4b46      	ldr	r3, [pc, #280]	; (80c40 <UnityTestResultsBegin+0x124>)
   80b26:	6818      	ldr	r0, [r3, #0]
   80b28:	6884      	ldr	r4, [r0, #8]
   80b2a:	68a2      	ldr	r2, [r4, #8]
   80b2c:	3a01      	subs	r2, #1
   80b2e:	60a2      	str	r2, [r4, #8]
   80b30:	2a00      	cmp	r2, #0
   80b32:	da19      	bge.n	80b68 <UnityTestResultsBegin+0x4c>
   80b34:	6882      	ldr	r2, [r0, #8]
   80b36:	6893      	ldr	r3, [r2, #8]
   80b38:	6991      	ldr	r1, [r2, #24]
   80b3a:	428b      	cmp	r3, r1
   80b3c:	db10      	blt.n	80b60 <UnityTestResultsBegin+0x44>
   80b3e:	6813      	ldr	r3, [r2, #0]
   80b40:	223a      	movs	r2, #58	; 0x3a
   80b42:	701a      	strb	r2, [r3, #0]
   80b44:	4b3e      	ldr	r3, [pc, #248]	; (80c40 <UnityTestResultsBegin+0x124>)
   80b46:	6818      	ldr	r0, [r3, #0]
   80b48:	6882      	ldr	r2, [r0, #8]
   80b4a:	6813      	ldr	r3, [r2, #0]
   80b4c:	7819      	ldrb	r1, [r3, #0]
   80b4e:	290a      	cmp	r1, #10
   80b50:	d002      	beq.n	80b58 <UnityTestResultsBegin+0x3c>
   80b52:	3301      	adds	r3, #1
   80b54:	6013      	str	r3, [r2, #0]
   80b56:	e011      	b.n	80b7c <UnityTestResultsBegin+0x60>
   80b58:	210a      	movs	r1, #10
   80b5a:	4b3a      	ldr	r3, [pc, #232]	; (80c44 <UnityTestResultsBegin+0x128>)
   80b5c:	4798      	blx	r3
   80b5e:	e00d      	b.n	80b7c <UnityTestResultsBegin+0x60>
   80b60:	213a      	movs	r1, #58	; 0x3a
   80b62:	4b38      	ldr	r3, [pc, #224]	; (80c44 <UnityTestResultsBegin+0x128>)
   80b64:	4798      	blx	r3
   80b66:	e009      	b.n	80b7c <UnityTestResultsBegin+0x60>
   80b68:	6883      	ldr	r3, [r0, #8]
   80b6a:	681b      	ldr	r3, [r3, #0]
   80b6c:	223a      	movs	r2, #58	; 0x3a
   80b6e:	701a      	strb	r2, [r3, #0]
   80b70:	4b33      	ldr	r3, [pc, #204]	; (80c40 <UnityTestResultsBegin+0x124>)
   80b72:	681b      	ldr	r3, [r3, #0]
   80b74:	689b      	ldr	r3, [r3, #8]
   80b76:	681a      	ldr	r2, [r3, #0]
   80b78:	3201      	adds	r2, #1
   80b7a:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)line);
   80b7c:	4628      	mov	r0, r5
   80b7e:	4b32      	ldr	r3, [pc, #200]	; (80c48 <UnityTestResultsBegin+0x12c>)
   80b80:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80b82:	4b2f      	ldr	r3, [pc, #188]	; (80c40 <UnityTestResultsBegin+0x124>)
   80b84:	6818      	ldr	r0, [r3, #0]
   80b86:	6882      	ldr	r2, [r0, #8]
   80b88:	6893      	ldr	r3, [r2, #8]
   80b8a:	3b01      	subs	r3, #1
   80b8c:	6093      	str	r3, [r2, #8]
   80b8e:	2b00      	cmp	r3, #0
   80b90:	da19      	bge.n	80bc6 <UnityTestResultsBegin+0xaa>
   80b92:	6882      	ldr	r2, [r0, #8]
   80b94:	6891      	ldr	r1, [r2, #8]
   80b96:	6993      	ldr	r3, [r2, #24]
   80b98:	4299      	cmp	r1, r3
   80b9a:	db10      	blt.n	80bbe <UnityTestResultsBegin+0xa2>
   80b9c:	6813      	ldr	r3, [r2, #0]
   80b9e:	223a      	movs	r2, #58	; 0x3a
   80ba0:	701a      	strb	r2, [r3, #0]
   80ba2:	4b27      	ldr	r3, [pc, #156]	; (80c40 <UnityTestResultsBegin+0x124>)
   80ba4:	6818      	ldr	r0, [r3, #0]
   80ba6:	6882      	ldr	r2, [r0, #8]
   80ba8:	6813      	ldr	r3, [r2, #0]
   80baa:	7819      	ldrb	r1, [r3, #0]
   80bac:	290a      	cmp	r1, #10
   80bae:	d002      	beq.n	80bb6 <UnityTestResultsBegin+0x9a>
   80bb0:	3301      	adds	r3, #1
   80bb2:	6013      	str	r3, [r2, #0]
   80bb4:	e011      	b.n	80bda <UnityTestResultsBegin+0xbe>
   80bb6:	210a      	movs	r1, #10
   80bb8:	4b22      	ldr	r3, [pc, #136]	; (80c44 <UnityTestResultsBegin+0x128>)
   80bba:	4798      	blx	r3
   80bbc:	e00d      	b.n	80bda <UnityTestResultsBegin+0xbe>
   80bbe:	213a      	movs	r1, #58	; 0x3a
   80bc0:	4b20      	ldr	r3, [pc, #128]	; (80c44 <UnityTestResultsBegin+0x128>)
   80bc2:	4798      	blx	r3
   80bc4:	e009      	b.n	80bda <UnityTestResultsBegin+0xbe>
   80bc6:	6883      	ldr	r3, [r0, #8]
   80bc8:	681b      	ldr	r3, [r3, #0]
   80bca:	223a      	movs	r2, #58	; 0x3a
   80bcc:	701a      	strb	r2, [r3, #0]
   80bce:	4b1c      	ldr	r3, [pc, #112]	; (80c40 <UnityTestResultsBegin+0x124>)
   80bd0:	681b      	ldr	r3, [r3, #0]
   80bd2:	689b      	ldr	r3, [r3, #8]
   80bd4:	681a      	ldr	r2, [r3, #0]
   80bd6:	3201      	adds	r2, #1
   80bd8:	601a      	str	r2, [r3, #0]
    UnityPrint(Unity.CurrentTestName);
   80bda:	4b1c      	ldr	r3, [pc, #112]	; (80c4c <UnityTestResultsBegin+0x130>)
   80bdc:	6858      	ldr	r0, [r3, #4]
   80bde:	4b17      	ldr	r3, [pc, #92]	; (80c3c <UnityTestResultsBegin+0x120>)
   80be0:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80be2:	4b17      	ldr	r3, [pc, #92]	; (80c40 <UnityTestResultsBegin+0x124>)
   80be4:	6818      	ldr	r0, [r3, #0]
   80be6:	6882      	ldr	r2, [r0, #8]
   80be8:	6893      	ldr	r3, [r2, #8]
   80bea:	3b01      	subs	r3, #1
   80bec:	6093      	str	r3, [r2, #8]
   80bee:	2b00      	cmp	r3, #0
   80bf0:	da19      	bge.n	80c26 <UnityTestResultsBegin+0x10a>
   80bf2:	6882      	ldr	r2, [r0, #8]
   80bf4:	6891      	ldr	r1, [r2, #8]
   80bf6:	6993      	ldr	r3, [r2, #24]
   80bf8:	4299      	cmp	r1, r3
   80bfa:	db10      	blt.n	80c1e <UnityTestResultsBegin+0x102>
   80bfc:	6813      	ldr	r3, [r2, #0]
   80bfe:	223a      	movs	r2, #58	; 0x3a
   80c00:	701a      	strb	r2, [r3, #0]
   80c02:	4b0f      	ldr	r3, [pc, #60]	; (80c40 <UnityTestResultsBegin+0x124>)
   80c04:	6818      	ldr	r0, [r3, #0]
   80c06:	6882      	ldr	r2, [r0, #8]
   80c08:	6813      	ldr	r3, [r2, #0]
   80c0a:	7819      	ldrb	r1, [r3, #0]
   80c0c:	290a      	cmp	r1, #10
   80c0e:	d002      	beq.n	80c16 <UnityTestResultsBegin+0xfa>
   80c10:	3301      	adds	r3, #1
   80c12:	6013      	str	r3, [r2, #0]
   80c14:	bd38      	pop	{r3, r4, r5, pc}
   80c16:	210a      	movs	r1, #10
   80c18:	4b0a      	ldr	r3, [pc, #40]	; (80c44 <UnityTestResultsBegin+0x128>)
   80c1a:	4798      	blx	r3
   80c1c:	bd38      	pop	{r3, r4, r5, pc}
   80c1e:	213a      	movs	r1, #58	; 0x3a
   80c20:	4b08      	ldr	r3, [pc, #32]	; (80c44 <UnityTestResultsBegin+0x128>)
   80c22:	4798      	blx	r3
   80c24:	bd38      	pop	{r3, r4, r5, pc}
   80c26:	6883      	ldr	r3, [r0, #8]
   80c28:	681b      	ldr	r3, [r3, #0]
   80c2a:	223a      	movs	r2, #58	; 0x3a
   80c2c:	701a      	strb	r2, [r3, #0]
   80c2e:	4b04      	ldr	r3, [pc, #16]	; (80c40 <UnityTestResultsBegin+0x124>)
   80c30:	681b      	ldr	r3, [r3, #0]
   80c32:	689b      	ldr	r3, [r3, #8]
   80c34:	681a      	ldr	r2, [r3, #0]
   80c36:	3201      	adds	r2, #1
   80c38:	601a      	str	r2, [r3, #0]
   80c3a:	bd38      	pop	{r3, r4, r5, pc}
   80c3c:	000808f1 	.word	0x000808f1
   80c40:	20070430 	.word	0x20070430
   80c44:	00081cf5 	.word	0x00081cf5
   80c48:	00080501 	.word	0x00080501
   80c4c:	2007099c 	.word	0x2007099c

00080c50 <UnityTestResultsFailBegin>:
}

//-----------------------------------------------
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
   80c50:	b508      	push	{r3, lr}
   80c52:	4601      	mov	r1, r0
    UnityTestResultsBegin(Unity.TestFile, line);
   80c54:	4b19      	ldr	r3, [pc, #100]	; (80cbc <UnityTestResultsFailBegin+0x6c>)
   80c56:	6818      	ldr	r0, [r3, #0]
   80c58:	4b19      	ldr	r3, [pc, #100]	; (80cc0 <UnityTestResultsFailBegin+0x70>)
   80c5a:	4798      	blx	r3
    UnityPrint(UnityStrFail);
   80c5c:	4819      	ldr	r0, [pc, #100]	; (80cc4 <UnityTestResultsFailBegin+0x74>)
   80c5e:	4b1a      	ldr	r3, [pc, #104]	; (80cc8 <UnityTestResultsFailBegin+0x78>)
   80c60:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80c62:	4b1a      	ldr	r3, [pc, #104]	; (80ccc <UnityTestResultsFailBegin+0x7c>)
   80c64:	6818      	ldr	r0, [r3, #0]
   80c66:	6882      	ldr	r2, [r0, #8]
   80c68:	6893      	ldr	r3, [r2, #8]
   80c6a:	3b01      	subs	r3, #1
   80c6c:	6093      	str	r3, [r2, #8]
   80c6e:	2b00      	cmp	r3, #0
   80c70:	da19      	bge.n	80ca6 <UnityTestResultsFailBegin+0x56>
   80c72:	6882      	ldr	r2, [r0, #8]
   80c74:	6891      	ldr	r1, [r2, #8]
   80c76:	6993      	ldr	r3, [r2, #24]
   80c78:	4299      	cmp	r1, r3
   80c7a:	db10      	blt.n	80c9e <UnityTestResultsFailBegin+0x4e>
   80c7c:	6813      	ldr	r3, [r2, #0]
   80c7e:	223a      	movs	r2, #58	; 0x3a
   80c80:	701a      	strb	r2, [r3, #0]
   80c82:	4b12      	ldr	r3, [pc, #72]	; (80ccc <UnityTestResultsFailBegin+0x7c>)
   80c84:	6818      	ldr	r0, [r3, #0]
   80c86:	6882      	ldr	r2, [r0, #8]
   80c88:	6813      	ldr	r3, [r2, #0]
   80c8a:	7819      	ldrb	r1, [r3, #0]
   80c8c:	290a      	cmp	r1, #10
   80c8e:	d002      	beq.n	80c96 <UnityTestResultsFailBegin+0x46>
   80c90:	3301      	adds	r3, #1
   80c92:	6013      	str	r3, [r2, #0]
   80c94:	bd08      	pop	{r3, pc}
   80c96:	210a      	movs	r1, #10
   80c98:	4b0d      	ldr	r3, [pc, #52]	; (80cd0 <UnityTestResultsFailBegin+0x80>)
   80c9a:	4798      	blx	r3
   80c9c:	bd08      	pop	{r3, pc}
   80c9e:	213a      	movs	r1, #58	; 0x3a
   80ca0:	4b0b      	ldr	r3, [pc, #44]	; (80cd0 <UnityTestResultsFailBegin+0x80>)
   80ca2:	4798      	blx	r3
   80ca4:	bd08      	pop	{r3, pc}
   80ca6:	6883      	ldr	r3, [r0, #8]
   80ca8:	681b      	ldr	r3, [r3, #0]
   80caa:	223a      	movs	r2, #58	; 0x3a
   80cac:	701a      	strb	r2, [r3, #0]
   80cae:	4b07      	ldr	r3, [pc, #28]	; (80ccc <UnityTestResultsFailBegin+0x7c>)
   80cb0:	681b      	ldr	r3, [r3, #0]
   80cb2:	689b      	ldr	r3, [r3, #8]
   80cb4:	681a      	ldr	r2, [r3, #0]
   80cb6:	3201      	adds	r2, #1
   80cb8:	601a      	str	r2, [r3, #0]
   80cba:	bd08      	pop	{r3, pc}
   80cbc:	2007099c 	.word	0x2007099c
   80cc0:	00080b1d 	.word	0x00080b1d
   80cc4:	00082cf8 	.word	0x00082cf8
   80cc8:	000808f1 	.word	0x000808f1
   80ccc:	20070430 	.word	0x20070430
   80cd0:	00081cf5 	.word	0x00081cf5

00080cd4 <UnityAddMsgIfSpecified>:
    UNITY_PRINT_EOL;
}

//-----------------------------------------------
static void UnityAddMsgIfSpecified(const char* msg)
{
   80cd4:	b538      	push	{r3, r4, r5, lr}
    if (msg)
   80cd6:	4605      	mov	r5, r0
   80cd8:	b120      	cbz	r0, 80ce4 <UnityAddMsgIfSpecified+0x10>
    {
        UnityPrint(UnityStrSpacer);
   80cda:	4803      	ldr	r0, [pc, #12]	; (80ce8 <UnityAddMsgIfSpecified+0x14>)
   80cdc:	4c03      	ldr	r4, [pc, #12]	; (80cec <UnityAddMsgIfSpecified+0x18>)
   80cde:	47a0      	blx	r4
        UnityPrint(msg);
   80ce0:	4628      	mov	r0, r5
   80ce2:	47a0      	blx	r4
   80ce4:	bd38      	pop	{r3, r4, r5, pc}
   80ce6:	bf00      	nop
   80ce8:	00082cec 	.word	0x00082cec
   80cec:	000808f1 	.word	0x000808f1

00080cf0 <UnityPrintNumberByStyle>:
    }
}

//-----------------------------------------------
void UnityPrintNumberByStyle(const _U_SINT number, const UNITY_DISPLAY_STYLE_T style)
{
   80cf0:	b508      	push	{r3, lr}
    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
   80cf2:	f011 0f10 	tst.w	r1, #16
   80cf6:	d002      	beq.n	80cfe <UnityPrintNumberByStyle+0xe>
    {
        UnityPrintNumber(number);
   80cf8:	4b0a      	ldr	r3, [pc, #40]	; (80d24 <UnityPrintNumberByStyle+0x34>)
   80cfa:	4798      	blx	r3
   80cfc:	bd08      	pop	{r3, pc}
    }
    else if ((style & UNITY_DISPLAY_RANGE_UINT) == UNITY_DISPLAY_RANGE_UINT)
   80cfe:	f011 0f20 	tst.w	r1, #32
   80d02:	d009      	beq.n	80d18 <UnityPrintNumberByStyle+0x28>
    {
        UnityPrintNumberUnsigned(  (_U_UINT)number  &  UnitySizeMask[((_U_UINT)style & (_U_UINT)0x0F) - 1]  );
   80d04:	f001 010f 	and.w	r1, r1, #15
   80d08:	3901      	subs	r1, #1
   80d0a:	4b07      	ldr	r3, [pc, #28]	; (80d28 <UnityPrintNumberByStyle+0x38>)
   80d0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   80d10:	4018      	ands	r0, r3
   80d12:	4b06      	ldr	r3, [pc, #24]	; (80d2c <UnityPrintNumberByStyle+0x3c>)
   80d14:	4798      	blx	r3
   80d16:	bd08      	pop	{r3, pc}
    }
    else
    {
        UnityPrintNumberHex((_U_UINT)number, (char)((style & 0x000F) << 1));
   80d18:	f001 010f 	and.w	r1, r1, #15
   80d1c:	0049      	lsls	r1, r1, #1
   80d1e:	4b04      	ldr	r3, [pc, #16]	; (80d30 <UnityPrintNumberByStyle+0x40>)
   80d20:	4798      	blx	r3
   80d22:	bd08      	pop	{r3, pc}
   80d24:	00080501 	.word	0x00080501
   80d28:	00082ccc 	.word	0x00082ccc
   80d2c:	0008069d 	.word	0x0008069d
   80d30:	00080765 	.word	0x00080765

00080d34 <UnityPrintFail>:
#endif

//-----------------------------------------------

void UnityPrintFail(void)
{
   80d34:	b508      	push	{r3, lr}
    UnityPrint(UnityStrFail);
   80d36:	4802      	ldr	r0, [pc, #8]	; (80d40 <UnityPrintFail+0xc>)
   80d38:	4b02      	ldr	r3, [pc, #8]	; (80d44 <UnityPrintFail+0x10>)
   80d3a:	4798      	blx	r3
   80d3c:	bd08      	pop	{r3, pc}
   80d3e:	bf00      	nop
   80d40:	00082cf8 	.word	0x00082cf8
   80d44:	000808f1 	.word	0x000808f1

00080d48 <UnityPrintOk>:
}

void UnityPrintOk(void)
{
   80d48:	b508      	push	{r3, lr}
    UnityPrint(UnityStrOk);
   80d4a:	4802      	ldr	r0, [pc, #8]	; (80d54 <UnityPrintOk+0xc>)
   80d4c:	4b02      	ldr	r3, [pc, #8]	; (80d58 <UnityPrintOk+0x10>)
   80d4e:	4798      	blx	r3
   80d50:	bd08      	pop	{r3, pc}
   80d52:	bf00      	nop
   80d54:	00082ce8 	.word	0x00082ce8
   80d58:	000808f1 	.word	0x000808f1

00080d5c <UnityConcludeTest>:
    UNITY_OUTPUT_CHAR(':');
}

//-----------------------------------------------
void UnityConcludeTest(void)
{
   80d5c:	b508      	push	{r3, lr}
    if (Unity.CurrentTestIgnored)
   80d5e:	4b24      	ldr	r3, [pc, #144]	; (80df0 <UnityConcludeTest+0x94>)
   80d60:	69db      	ldr	r3, [r3, #28]
   80d62:	b123      	cbz	r3, 80d6e <UnityConcludeTest+0x12>
    {
        Unity.TestIgnores++;
   80d64:	4b22      	ldr	r3, [pc, #136]	; (80df0 <UnityConcludeTest+0x94>)
   80d66:	695a      	ldr	r2, [r3, #20]
   80d68:	3201      	adds	r2, #1
   80d6a:	615a      	str	r2, [r3, #20]
   80d6c:	e00f      	b.n	80d8e <UnityConcludeTest+0x32>
    }
    else if (!Unity.CurrentTestFailed)
   80d6e:	4b20      	ldr	r3, [pc, #128]	; (80df0 <UnityConcludeTest+0x94>)
   80d70:	699b      	ldr	r3, [r3, #24]
   80d72:	b943      	cbnz	r3, 80d86 <UnityConcludeTest+0x2a>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
   80d74:	4b1e      	ldr	r3, [pc, #120]	; (80df0 <UnityConcludeTest+0x94>)
   80d76:	6818      	ldr	r0, [r3, #0]
   80d78:	6899      	ldr	r1, [r3, #8]
   80d7a:	4b1e      	ldr	r3, [pc, #120]	; (80df4 <UnityConcludeTest+0x98>)
   80d7c:	4798      	blx	r3
        UnityPrint(UnityStrPass);
   80d7e:	481e      	ldr	r0, [pc, #120]	; (80df8 <UnityConcludeTest+0x9c>)
   80d80:	4b1e      	ldr	r3, [pc, #120]	; (80dfc <UnityConcludeTest+0xa0>)
   80d82:	4798      	blx	r3
   80d84:	e003      	b.n	80d8e <UnityConcludeTest+0x32>
    }
    else
    {
        Unity.TestFailures++;
   80d86:	4b1a      	ldr	r3, [pc, #104]	; (80df0 <UnityConcludeTest+0x94>)
   80d88:	691a      	ldr	r2, [r3, #16]
   80d8a:	3201      	adds	r2, #1
   80d8c:	611a      	str	r2, [r3, #16]
    }

    Unity.CurrentTestFailed = 0;
   80d8e:	4b18      	ldr	r3, [pc, #96]	; (80df0 <UnityConcludeTest+0x94>)
   80d90:	2200      	movs	r2, #0
   80d92:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   80d94:	61da      	str	r2, [r3, #28]
    UNITY_PRINT_EOL;
   80d96:	4b1a      	ldr	r3, [pc, #104]	; (80e00 <UnityConcludeTest+0xa4>)
   80d98:	6818      	ldr	r0, [r3, #0]
   80d9a:	6882      	ldr	r2, [r0, #8]
   80d9c:	6893      	ldr	r3, [r2, #8]
   80d9e:	3b01      	subs	r3, #1
   80da0:	6093      	str	r3, [r2, #8]
   80da2:	2b00      	cmp	r3, #0
   80da4:	da19      	bge.n	80dda <UnityConcludeTest+0x7e>
   80da6:	6882      	ldr	r2, [r0, #8]
   80da8:	6891      	ldr	r1, [r2, #8]
   80daa:	6993      	ldr	r3, [r2, #24]
   80dac:	4299      	cmp	r1, r3
   80dae:	db10      	blt.n	80dd2 <UnityConcludeTest+0x76>
   80db0:	6813      	ldr	r3, [r2, #0]
   80db2:	220a      	movs	r2, #10
   80db4:	701a      	strb	r2, [r3, #0]
   80db6:	4b12      	ldr	r3, [pc, #72]	; (80e00 <UnityConcludeTest+0xa4>)
   80db8:	6818      	ldr	r0, [r3, #0]
   80dba:	6882      	ldr	r2, [r0, #8]
   80dbc:	6813      	ldr	r3, [r2, #0]
   80dbe:	7819      	ldrb	r1, [r3, #0]
   80dc0:	290a      	cmp	r1, #10
   80dc2:	d002      	beq.n	80dca <UnityConcludeTest+0x6e>
   80dc4:	3301      	adds	r3, #1
   80dc6:	6013      	str	r3, [r2, #0]
   80dc8:	bd08      	pop	{r3, pc}
   80dca:	210a      	movs	r1, #10
   80dcc:	4b0d      	ldr	r3, [pc, #52]	; (80e04 <UnityConcludeTest+0xa8>)
   80dce:	4798      	blx	r3
   80dd0:	bd08      	pop	{r3, pc}
   80dd2:	210a      	movs	r1, #10
   80dd4:	4b0b      	ldr	r3, [pc, #44]	; (80e04 <UnityConcludeTest+0xa8>)
   80dd6:	4798      	blx	r3
   80dd8:	bd08      	pop	{r3, pc}
   80dda:	6883      	ldr	r3, [r0, #8]
   80ddc:	681b      	ldr	r3, [r3, #0]
   80dde:	220a      	movs	r2, #10
   80de0:	701a      	strb	r2, [r3, #0]
   80de2:	4b07      	ldr	r3, [pc, #28]	; (80e00 <UnityConcludeTest+0xa4>)
   80de4:	681b      	ldr	r3, [r3, #0]
   80de6:	689b      	ldr	r3, [r3, #8]
   80de8:	681a      	ldr	r2, [r3, #0]
   80dea:	3201      	adds	r2, #1
   80dec:	601a      	str	r2, [r3, #0]
   80dee:	bd08      	pop	{r3, pc}
   80df0:	2007099c 	.word	0x2007099c
   80df4:	00080b1d 	.word	0x00080b1d
   80df8:	00082d44 	.word	0x00082d44
   80dfc:	000808f1 	.word	0x000808f1
   80e00:	20070430 	.word	0x20070430
   80e04:	00081cf5 	.word	0x00081cf5

00080e08 <UnityAssertEqualNumber>:
void UnityAssertEqualNumber(const _U_SINT expected,
                            const _U_SINT actual,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber,
                            const UNITY_DISPLAY_STYLE_T style)
{
   80e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80e0c:	4606      	mov	r6, r0
   80e0e:	460d      	mov	r5, r1
   80e10:	4690      	mov	r8, r2
   80e12:	f89d 7020 	ldrb.w	r7, [sp, #32]
    UNITY_SKIP_EXECUTION;
   80e16:	4c11      	ldr	r4, [pc, #68]	; (80e5c <UnityAssertEqualNumber+0x54>)
   80e18:	69a4      	ldr	r4, [r4, #24]
   80e1a:	b9ec      	cbnz	r4, 80e58 <UnityAssertEqualNumber+0x50>
   80e1c:	4c0f      	ldr	r4, [pc, #60]	; (80e5c <UnityAssertEqualNumber+0x54>)
   80e1e:	69e4      	ldr	r4, [r4, #28]
   80e20:	b9d4      	cbnz	r4, 80e58 <UnityAssertEqualNumber+0x50>

    if (expected != actual)
   80e22:	4288      	cmp	r0, r1
   80e24:	d018      	beq.n	80e58 <UnityAssertEqualNumber+0x50>
    {
        UnityTestResultsFailBegin(lineNumber);
   80e26:	4618      	mov	r0, r3
   80e28:	4b0d      	ldr	r3, [pc, #52]	; (80e60 <UnityAssertEqualNumber+0x58>)
   80e2a:	4798      	blx	r3
        UnityPrint(UnityStrExpected);
   80e2c:	480d      	ldr	r0, [pc, #52]	; (80e64 <UnityAssertEqualNumber+0x5c>)
   80e2e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80e78 <UnityAssertEqualNumber+0x70>
   80e32:	47c8      	blx	r9
        UnityPrintNumberByStyle(expected, style);
   80e34:	4630      	mov	r0, r6
   80e36:	4639      	mov	r1, r7
   80e38:	4c0b      	ldr	r4, [pc, #44]	; (80e68 <UnityAssertEqualNumber+0x60>)
   80e3a:	47a0      	blx	r4
        UnityPrint(UnityStrWas);
   80e3c:	480b      	ldr	r0, [pc, #44]	; (80e6c <UnityAssertEqualNumber+0x64>)
   80e3e:	47c8      	blx	r9
        UnityPrintNumberByStyle(actual, style);
   80e40:	4628      	mov	r0, r5
   80e42:	4639      	mov	r1, r7
   80e44:	47a0      	blx	r4
        UnityAddMsgIfSpecified(msg);
   80e46:	4640      	mov	r0, r8
   80e48:	4b09      	ldr	r3, [pc, #36]	; (80e70 <UnityAssertEqualNumber+0x68>)
   80e4a:	4798      	blx	r3
        UNITY_FAIL_AND_BAIL;
   80e4c:	4803      	ldr	r0, [pc, #12]	; (80e5c <UnityAssertEqualNumber+0x54>)
   80e4e:	2101      	movs	r1, #1
   80e50:	6181      	str	r1, [r0, #24]
   80e52:	3020      	adds	r0, #32
   80e54:	4b07      	ldr	r3, [pc, #28]	; (80e74 <UnityAssertEqualNumber+0x6c>)
   80e56:	4798      	blx	r3
   80e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80e5c:	2007099c 	.word	0x2007099c
   80e60:	00080c51 	.word	0x00080c51
   80e64:	00082d00 	.word	0x00082d00
   80e68:	00080cf1 	.word	0x00080cf1
   80e6c:	00082cf0 	.word	0x00082cf0
   80e70:	00080cd5 	.word	0x00080cd5
   80e74:	00081be5 	.word	0x00081be5
   80e78:	000808f1 	.word	0x000808f1

00080e7c <UnityDefaultTestRun>:
    void setUp(void);
    void tearDown(void);
#endif
//-----------------------------------------------
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
   80e7c:	b500      	push	{lr}
   80e7e:	b083      	sub	sp, #12
   80e80:	9001      	str	r0, [sp, #4]
    Unity.CurrentTestName = FuncName;
   80e82:	480e      	ldr	r0, [pc, #56]	; (80ebc <UnityDefaultTestRun+0x40>)
   80e84:	6041      	str	r1, [r0, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
   80e86:	6082      	str	r2, [r0, #8]
    Unity.NumberOfTests++;
   80e88:	68c3      	ldr	r3, [r0, #12]
   80e8a:	3301      	adds	r3, #1
   80e8c:	60c3      	str	r3, [r0, #12]
    if (TEST_PROTECT())
   80e8e:	3020      	adds	r0, #32
   80e90:	4b0b      	ldr	r3, [pc, #44]	; (80ec0 <UnityDefaultTestRun+0x44>)
   80e92:	4798      	blx	r3
   80e94:	b918      	cbnz	r0, 80e9e <UnityDefaultTestRun+0x22>
    {
        setUp();
   80e96:	4b0b      	ldr	r3, [pc, #44]	; (80ec4 <UnityDefaultTestRun+0x48>)
   80e98:	4798      	blx	r3
        Func();
   80e9a:	9b01      	ldr	r3, [sp, #4]
   80e9c:	4798      	blx	r3
    }
    if (TEST_PROTECT() && !(Unity.CurrentTestIgnored))
   80e9e:	480a      	ldr	r0, [pc, #40]	; (80ec8 <UnityDefaultTestRun+0x4c>)
   80ea0:	4b07      	ldr	r3, [pc, #28]	; (80ec0 <UnityDefaultTestRun+0x44>)
   80ea2:	4798      	blx	r3
   80ea4:	b920      	cbnz	r0, 80eb0 <UnityDefaultTestRun+0x34>
   80ea6:	4b05      	ldr	r3, [pc, #20]	; (80ebc <UnityDefaultTestRun+0x40>)
   80ea8:	69db      	ldr	r3, [r3, #28]
   80eaa:	b90b      	cbnz	r3, 80eb0 <UnityDefaultTestRun+0x34>
    {
        tearDown();
   80eac:	4b07      	ldr	r3, [pc, #28]	; (80ecc <UnityDefaultTestRun+0x50>)
   80eae:	4798      	blx	r3
    }
    UnityConcludeTest();
   80eb0:	4b07      	ldr	r3, [pc, #28]	; (80ed0 <UnityDefaultTestRun+0x54>)
   80eb2:	4798      	blx	r3
}
   80eb4:	b003      	add	sp, #12
   80eb6:	f85d fb04 	ldr.w	pc, [sp], #4
   80eba:	bf00      	nop
   80ebc:	2007099c 	.word	0x2007099c
   80ec0:	00081bd9 	.word	0x00081bd9
   80ec4:	00080169 	.word	0x00080169
   80ec8:	200709bc 	.word	0x200709bc
   80ecc:	0008016d 	.word	0x0008016d
   80ed0:	00080d5d 	.word	0x00080d5d

00080ed4 <UnityBegin>:

//-----------------------------------------------
void UnityBegin(const char* filename)
{
    Unity.TestFile = filename;
   80ed4:	4b05      	ldr	r3, [pc, #20]	; (80eec <UnityBegin+0x18>)
   80ed6:	6018      	str	r0, [r3, #0]
    Unity.CurrentTestName = NULL;
   80ed8:	2200      	movs	r2, #0
   80eda:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
   80edc:	609a      	str	r2, [r3, #8]
    Unity.NumberOfTests = 0;
   80ede:	60da      	str	r2, [r3, #12]
    Unity.TestFailures = 0;
   80ee0:	611a      	str	r2, [r3, #16]
    Unity.TestIgnores = 0;
   80ee2:	615a      	str	r2, [r3, #20]
    Unity.CurrentTestFailed = 0;
   80ee4:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   80ee6:	61da      	str	r2, [r3, #28]
   80ee8:	4770      	bx	lr
   80eea:	bf00      	nop
   80eec:	2007099c 	.word	0x2007099c

00080ef0 <UnityEnd>:
    UNITY_OUTPUT_START();
}

//-----------------------------------------------
int UnityEnd(void)
{
   80ef0:	b570      	push	{r4, r5, r6, lr}
    UNITY_PRINT_EOL;
   80ef2:	4b66      	ldr	r3, [pc, #408]	; (8108c <UnityEnd+0x19c>)
   80ef4:	6818      	ldr	r0, [r3, #0]
   80ef6:	6882      	ldr	r2, [r0, #8]
   80ef8:	6893      	ldr	r3, [r2, #8]
   80efa:	3b01      	subs	r3, #1
   80efc:	6093      	str	r3, [r2, #8]
   80efe:	2b00      	cmp	r3, #0
   80f00:	da19      	bge.n	80f36 <UnityEnd+0x46>
   80f02:	6882      	ldr	r2, [r0, #8]
   80f04:	6891      	ldr	r1, [r2, #8]
   80f06:	6993      	ldr	r3, [r2, #24]
   80f08:	4299      	cmp	r1, r3
   80f0a:	db10      	blt.n	80f2e <UnityEnd+0x3e>
   80f0c:	6813      	ldr	r3, [r2, #0]
   80f0e:	220a      	movs	r2, #10
   80f10:	701a      	strb	r2, [r3, #0]
   80f12:	4b5e      	ldr	r3, [pc, #376]	; (8108c <UnityEnd+0x19c>)
   80f14:	6818      	ldr	r0, [r3, #0]
   80f16:	6882      	ldr	r2, [r0, #8]
   80f18:	6813      	ldr	r3, [r2, #0]
   80f1a:	7819      	ldrb	r1, [r3, #0]
   80f1c:	290a      	cmp	r1, #10
   80f1e:	d002      	beq.n	80f26 <UnityEnd+0x36>
   80f20:	3301      	adds	r3, #1
   80f22:	6013      	str	r3, [r2, #0]
   80f24:	e011      	b.n	80f4a <UnityEnd+0x5a>
   80f26:	210a      	movs	r1, #10
   80f28:	4b59      	ldr	r3, [pc, #356]	; (81090 <UnityEnd+0x1a0>)
   80f2a:	4798      	blx	r3
   80f2c:	e00d      	b.n	80f4a <UnityEnd+0x5a>
   80f2e:	210a      	movs	r1, #10
   80f30:	4b57      	ldr	r3, [pc, #348]	; (81090 <UnityEnd+0x1a0>)
   80f32:	4798      	blx	r3
   80f34:	e009      	b.n	80f4a <UnityEnd+0x5a>
   80f36:	6883      	ldr	r3, [r0, #8]
   80f38:	681b      	ldr	r3, [r3, #0]
   80f3a:	220a      	movs	r2, #10
   80f3c:	701a      	strb	r2, [r3, #0]
   80f3e:	4b53      	ldr	r3, [pc, #332]	; (8108c <UnityEnd+0x19c>)
   80f40:	681b      	ldr	r3, [r3, #0]
   80f42:	689b      	ldr	r3, [r3, #8]
   80f44:	681a      	ldr	r2, [r3, #0]
   80f46:	3201      	adds	r2, #1
   80f48:	601a      	str	r2, [r3, #0]
    UnityPrint(UnityStrBreaker);
   80f4a:	4852      	ldr	r0, [pc, #328]	; (81094 <UnityEnd+0x1a4>)
   80f4c:	4b52      	ldr	r3, [pc, #328]	; (81098 <UnityEnd+0x1a8>)
   80f4e:	4798      	blx	r3
    UNITY_PRINT_EOL;
   80f50:	4b4e      	ldr	r3, [pc, #312]	; (8108c <UnityEnd+0x19c>)
   80f52:	6818      	ldr	r0, [r3, #0]
   80f54:	6882      	ldr	r2, [r0, #8]
   80f56:	6893      	ldr	r3, [r2, #8]
   80f58:	3b01      	subs	r3, #1
   80f5a:	6093      	str	r3, [r2, #8]
   80f5c:	2b00      	cmp	r3, #0
   80f5e:	da19      	bge.n	80f94 <UnityEnd+0xa4>
   80f60:	6882      	ldr	r2, [r0, #8]
   80f62:	6891      	ldr	r1, [r2, #8]
   80f64:	6993      	ldr	r3, [r2, #24]
   80f66:	4299      	cmp	r1, r3
   80f68:	db10      	blt.n	80f8c <UnityEnd+0x9c>
   80f6a:	6813      	ldr	r3, [r2, #0]
   80f6c:	220a      	movs	r2, #10
   80f6e:	701a      	strb	r2, [r3, #0]
   80f70:	4b46      	ldr	r3, [pc, #280]	; (8108c <UnityEnd+0x19c>)
   80f72:	6818      	ldr	r0, [r3, #0]
   80f74:	6882      	ldr	r2, [r0, #8]
   80f76:	6813      	ldr	r3, [r2, #0]
   80f78:	7819      	ldrb	r1, [r3, #0]
   80f7a:	290a      	cmp	r1, #10
   80f7c:	d002      	beq.n	80f84 <UnityEnd+0x94>
   80f7e:	3301      	adds	r3, #1
   80f80:	6013      	str	r3, [r2, #0]
   80f82:	e011      	b.n	80fa8 <UnityEnd+0xb8>
   80f84:	210a      	movs	r1, #10
   80f86:	4b42      	ldr	r3, [pc, #264]	; (81090 <UnityEnd+0x1a0>)
   80f88:	4798      	blx	r3
   80f8a:	e00d      	b.n	80fa8 <UnityEnd+0xb8>
   80f8c:	210a      	movs	r1, #10
   80f8e:	4b40      	ldr	r3, [pc, #256]	; (81090 <UnityEnd+0x1a0>)
   80f90:	4798      	blx	r3
   80f92:	e009      	b.n	80fa8 <UnityEnd+0xb8>
   80f94:	6883      	ldr	r3, [r0, #8]
   80f96:	681b      	ldr	r3, [r3, #0]
   80f98:	220a      	movs	r2, #10
   80f9a:	701a      	strb	r2, [r3, #0]
   80f9c:	4b3b      	ldr	r3, [pc, #236]	; (8108c <UnityEnd+0x19c>)
   80f9e:	681b      	ldr	r3, [r3, #0]
   80fa0:	689b      	ldr	r3, [r3, #8]
   80fa2:	681a      	ldr	r2, [r3, #0]
   80fa4:	3201      	adds	r2, #1
   80fa6:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)(Unity.NumberOfTests));
   80fa8:	4e3c      	ldr	r6, [pc, #240]	; (8109c <UnityEnd+0x1ac>)
   80faa:	68f0      	ldr	r0, [r6, #12]
   80fac:	4d3c      	ldr	r5, [pc, #240]	; (810a0 <UnityEnd+0x1b0>)
   80fae:	47a8      	blx	r5
    UnityPrint(UnityStrResultsTests);
   80fb0:	483c      	ldr	r0, [pc, #240]	; (810a4 <UnityEnd+0x1b4>)
   80fb2:	4c39      	ldr	r4, [pc, #228]	; (81098 <UnityEnd+0x1a8>)
   80fb4:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestFailures));
   80fb6:	6930      	ldr	r0, [r6, #16]
   80fb8:	47a8      	blx	r5
    UnityPrint(UnityStrResultsFailures);
   80fba:	483b      	ldr	r0, [pc, #236]	; (810a8 <UnityEnd+0x1b8>)
   80fbc:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestIgnores));
   80fbe:	6970      	ldr	r0, [r6, #20]
   80fc0:	47a8      	blx	r5
    UnityPrint(UnityStrResultsIgnored);
   80fc2:	483a      	ldr	r0, [pc, #232]	; (810ac <UnityEnd+0x1bc>)
   80fc4:	47a0      	blx	r4
    UNITY_PRINT_EOL;
   80fc6:	4b31      	ldr	r3, [pc, #196]	; (8108c <UnityEnd+0x19c>)
   80fc8:	6818      	ldr	r0, [r3, #0]
   80fca:	6882      	ldr	r2, [r0, #8]
   80fcc:	6893      	ldr	r3, [r2, #8]
   80fce:	3b01      	subs	r3, #1
   80fd0:	6093      	str	r3, [r2, #8]
   80fd2:	2b00      	cmp	r3, #0
   80fd4:	da19      	bge.n	8100a <UnityEnd+0x11a>
   80fd6:	6882      	ldr	r2, [r0, #8]
   80fd8:	6891      	ldr	r1, [r2, #8]
   80fda:	6993      	ldr	r3, [r2, #24]
   80fdc:	4299      	cmp	r1, r3
   80fde:	db10      	blt.n	81002 <UnityEnd+0x112>
   80fe0:	6813      	ldr	r3, [r2, #0]
   80fe2:	220a      	movs	r2, #10
   80fe4:	701a      	strb	r2, [r3, #0]
   80fe6:	4b29      	ldr	r3, [pc, #164]	; (8108c <UnityEnd+0x19c>)
   80fe8:	6818      	ldr	r0, [r3, #0]
   80fea:	6882      	ldr	r2, [r0, #8]
   80fec:	6813      	ldr	r3, [r2, #0]
   80fee:	7819      	ldrb	r1, [r3, #0]
   80ff0:	290a      	cmp	r1, #10
   80ff2:	d002      	beq.n	80ffa <UnityEnd+0x10a>
   80ff4:	3301      	adds	r3, #1
   80ff6:	6013      	str	r3, [r2, #0]
   80ff8:	e011      	b.n	8101e <UnityEnd+0x12e>
   80ffa:	210a      	movs	r1, #10
   80ffc:	4b24      	ldr	r3, [pc, #144]	; (81090 <UnityEnd+0x1a0>)
   80ffe:	4798      	blx	r3
   81000:	e00d      	b.n	8101e <UnityEnd+0x12e>
   81002:	210a      	movs	r1, #10
   81004:	4b22      	ldr	r3, [pc, #136]	; (81090 <UnityEnd+0x1a0>)
   81006:	4798      	blx	r3
   81008:	e009      	b.n	8101e <UnityEnd+0x12e>
   8100a:	6883      	ldr	r3, [r0, #8]
   8100c:	681b      	ldr	r3, [r3, #0]
   8100e:	220a      	movs	r2, #10
   81010:	701a      	strb	r2, [r3, #0]
   81012:	4b1e      	ldr	r3, [pc, #120]	; (8108c <UnityEnd+0x19c>)
   81014:	681b      	ldr	r3, [r3, #0]
   81016:	689b      	ldr	r3, [r3, #8]
   81018:	681a      	ldr	r2, [r3, #0]
   8101a:	3201      	adds	r2, #1
   8101c:	601a      	str	r2, [r3, #0]
    if (Unity.TestFailures == 0U)
   8101e:	4b1f      	ldr	r3, [pc, #124]	; (8109c <UnityEnd+0x1ac>)
   81020:	691b      	ldr	r3, [r3, #16]
   81022:	b913      	cbnz	r3, 8102a <UnityEnd+0x13a>
    {
        UnityPrintOk();
   81024:	4b22      	ldr	r3, [pc, #136]	; (810b0 <UnityEnd+0x1c0>)
   81026:	4798      	blx	r3
   81028:	e001      	b.n	8102e <UnityEnd+0x13e>
=======
void UnityConcludeTest(void)
{
   80ea4:	b508      	push	{r3, lr}
    if (Unity.CurrentTestIgnored)
   80ea6:	4b24      	ldr	r3, [pc, #144]	; (80f38 <UnityConcludeTest+0x94>)
   80ea8:	69db      	ldr	r3, [r3, #28]
   80eaa:	b123      	cbz	r3, 80eb6 <UnityConcludeTest+0x12>
    {
        Unity.TestIgnores++;
   80eac:	4b22      	ldr	r3, [pc, #136]	; (80f38 <UnityConcludeTest+0x94>)
   80eae:	695a      	ldr	r2, [r3, #20]
   80eb0:	3201      	adds	r2, #1
   80eb2:	615a      	str	r2, [r3, #20]
   80eb4:	e00f      	b.n	80ed6 <UnityConcludeTest+0x32>
    }
    else if (!Unity.CurrentTestFailed)
   80eb6:	4b20      	ldr	r3, [pc, #128]	; (80f38 <UnityConcludeTest+0x94>)
   80eb8:	699b      	ldr	r3, [r3, #24]
   80eba:	b943      	cbnz	r3, 80ece <UnityConcludeTest+0x2a>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
   80ebc:	4b1e      	ldr	r3, [pc, #120]	; (80f38 <UnityConcludeTest+0x94>)
   80ebe:	6818      	ldr	r0, [r3, #0]
   80ec0:	6899      	ldr	r1, [r3, #8]
   80ec2:	4b1e      	ldr	r3, [pc, #120]	; (80f3c <UnityConcludeTest+0x98>)
   80ec4:	4798      	blx	r3
        UnityPrint(UnityStrPass);
   80ec6:	481e      	ldr	r0, [pc, #120]	; (80f40 <UnityConcludeTest+0x9c>)
   80ec8:	4b1e      	ldr	r3, [pc, #120]	; (80f44 <UnityConcludeTest+0xa0>)
   80eca:	4798      	blx	r3
   80ecc:	e003      	b.n	80ed6 <UnityConcludeTest+0x32>
    }
    else
    {
        Unity.TestFailures++;
   80ece:	4b1a      	ldr	r3, [pc, #104]	; (80f38 <UnityConcludeTest+0x94>)
   80ed0:	691a      	ldr	r2, [r3, #16]
   80ed2:	3201      	adds	r2, #1
   80ed4:	611a      	str	r2, [r3, #16]
    }

    Unity.CurrentTestFailed = 0;
   80ed6:	4b18      	ldr	r3, [pc, #96]	; (80f38 <UnityConcludeTest+0x94>)
   80ed8:	2200      	movs	r2, #0
   80eda:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   80edc:	61da      	str	r2, [r3, #28]
    UNITY_PRINT_EOL;
   80ede:	4b1a      	ldr	r3, [pc, #104]	; (80f48 <UnityConcludeTest+0xa4>)
   80ee0:	6818      	ldr	r0, [r3, #0]
   80ee2:	6882      	ldr	r2, [r0, #8]
   80ee4:	6893      	ldr	r3, [r2, #8]
   80ee6:	3b01      	subs	r3, #1
   80ee8:	6093      	str	r3, [r2, #8]
   80eea:	2b00      	cmp	r3, #0
   80eec:	da19      	bge.n	80f22 <UnityConcludeTest+0x7e>
   80eee:	6882      	ldr	r2, [r0, #8]
   80ef0:	6891      	ldr	r1, [r2, #8]
   80ef2:	6993      	ldr	r3, [r2, #24]
   80ef4:	4299      	cmp	r1, r3
   80ef6:	db10      	blt.n	80f1a <UnityConcludeTest+0x76>
   80ef8:	6813      	ldr	r3, [r2, #0]
   80efa:	220a      	movs	r2, #10
   80efc:	701a      	strb	r2, [r3, #0]
   80efe:	4b12      	ldr	r3, [pc, #72]	; (80f48 <UnityConcludeTest+0xa4>)
   80f00:	6818      	ldr	r0, [r3, #0]
   80f02:	6882      	ldr	r2, [r0, #8]
   80f04:	6813      	ldr	r3, [r2, #0]
   80f06:	7819      	ldrb	r1, [r3, #0]
   80f08:	290a      	cmp	r1, #10
   80f0a:	d002      	beq.n	80f12 <UnityConcludeTest+0x6e>
   80f0c:	3301      	adds	r3, #1
   80f0e:	6013      	str	r3, [r2, #0]
   80f10:	bd08      	pop	{r3, pc}
   80f12:	210a      	movs	r1, #10
   80f14:	4b0d      	ldr	r3, [pc, #52]	; (80f4c <UnityConcludeTest+0xa8>)
   80f16:	4798      	blx	r3
   80f18:	bd08      	pop	{r3, pc}
   80f1a:	210a      	movs	r1, #10
   80f1c:	4b0b      	ldr	r3, [pc, #44]	; (80f4c <UnityConcludeTest+0xa8>)
   80f1e:	4798      	blx	r3
   80f20:	bd08      	pop	{r3, pc}
   80f22:	6883      	ldr	r3, [r0, #8]
   80f24:	681b      	ldr	r3, [r3, #0]
   80f26:	220a      	movs	r2, #10
   80f28:	701a      	strb	r2, [r3, #0]
   80f2a:	4b07      	ldr	r3, [pc, #28]	; (80f48 <UnityConcludeTest+0xa4>)
   80f2c:	681b      	ldr	r3, [r3, #0]
   80f2e:	689b      	ldr	r3, [r3, #8]
   80f30:	681a      	ldr	r2, [r3, #0]
   80f32:	3201      	adds	r2, #1
   80f34:	601a      	str	r2, [r3, #0]
   80f36:	bd08      	pop	{r3, pc}
   80f38:	2007099c 	.word	0x2007099c
   80f3c:	00080b85 	.word	0x00080b85
   80f40:	00082ef4 	.word	0x00082ef4
   80f44:	00080959 	.word	0x00080959
   80f48:	20070430 	.word	0x20070430
   80f4c:	00081e41 	.word	0x00081e41

00080f50 <UnityAssertBits>:
void UnityAssertBits(const _U_SINT mask,
                     const _U_SINT expected,
                     const _U_SINT actual,
                     const char* msg,
                     const UNITY_LINE_TYPE lineNumber)
{
   80f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80f54:	4605      	mov	r5, r0
   80f56:	460f      	mov	r7, r1
   80f58:	4616      	mov	r6, r2
   80f5a:	4698      	mov	r8, r3
    UNITY_SKIP_EXECUTION;
   80f5c:	4c12      	ldr	r4, [pc, #72]	; (80fa8 <UnityAssertBits+0x58>)
   80f5e:	69a4      	ldr	r4, [r4, #24]
   80f60:	b9fc      	cbnz	r4, 80fa2 <UnityAssertBits+0x52>
   80f62:	4a11      	ldr	r2, [pc, #68]	; (80fa8 <UnityAssertBits+0x58>)
   80f64:	69d2      	ldr	r2, [r2, #28]
   80f66:	b9e2      	cbnz	r2, 80fa2 <UnityAssertBits+0x52>

    if ((mask & expected) != (mask & actual))
   80f68:	ea81 0306 	eor.w	r3, r1, r6
   80f6c:	4203      	tst	r3, r0
   80f6e:	d018      	beq.n	80fa2 <UnityAssertBits+0x52>
    {
        UnityTestResultsFailBegin(lineNumber);
   80f70:	9808      	ldr	r0, [sp, #32]
   80f72:	4b0e      	ldr	r3, [pc, #56]	; (80fac <UnityAssertBits+0x5c>)
   80f74:	4798      	blx	r3
        UnityPrint(UnityStrExpected);
   80f76:	480e      	ldr	r0, [pc, #56]	; (80fb0 <UnityAssertBits+0x60>)
   80f78:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80fc4 <UnityAssertBits+0x74>
   80f7c:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)expected);
   80f7e:	4628      	mov	r0, r5
   80f80:	4639      	mov	r1, r7
   80f82:	4c0c      	ldr	r4, [pc, #48]	; (80fb4 <UnityAssertBits+0x64>)
   80f84:	47a0      	blx	r4
        UnityPrint(UnityStrWas);
   80f86:	480c      	ldr	r0, [pc, #48]	; (80fb8 <UnityAssertBits+0x68>)
   80f88:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)actual);
   80f8a:	4628      	mov	r0, r5
   80f8c:	4631      	mov	r1, r6
   80f8e:	47a0      	blx	r4
        UnityAddMsgIfSpecified(msg);
   80f90:	4640      	mov	r0, r8
   80f92:	4b0a      	ldr	r3, [pc, #40]	; (80fbc <UnityAssertBits+0x6c>)
   80f94:	4798      	blx	r3
        UNITY_FAIL_AND_BAIL;
   80f96:	4804      	ldr	r0, [pc, #16]	; (80fa8 <UnityAssertBits+0x58>)
   80f98:	2101      	movs	r1, #1
   80f9a:	6181      	str	r1, [r0, #24]
   80f9c:	3020      	adds	r0, #32
   80f9e:	4b08      	ldr	r3, [pc, #32]	; (80fc0 <UnityAssertBits+0x70>)
   80fa0:	4798      	blx	r3
   80fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80fa6:	bf00      	nop
   80fa8:	2007099c 	.word	0x2007099c
   80fac:	00080cb9 	.word	0x00080cb9
   80fb0:	00082eb0 	.word	0x00082eb0
   80fb4:	00080d59 	.word	0x00080d59
   80fb8:	00082ea0 	.word	0x00082ea0
   80fbc:	00080d3d 	.word	0x00080d3d
   80fc0:	00081d31 	.word	0x00081d31
   80fc4:	00080959 	.word	0x00080959

00080fc8 <UnityDefaultTestRun>:
    void setUp(void);
    void tearDown(void);
#endif
//-----------------------------------------------
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
   80fc8:	b500      	push	{lr}
   80fca:	b083      	sub	sp, #12
   80fcc:	9001      	str	r0, [sp, #4]
    Unity.CurrentTestName = FuncName;
   80fce:	480e      	ldr	r0, [pc, #56]	; (81008 <UnityDefaultTestRun+0x40>)
   80fd0:	6041      	str	r1, [r0, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
   80fd2:	6082      	str	r2, [r0, #8]
    Unity.NumberOfTests++;
   80fd4:	68c3      	ldr	r3, [r0, #12]
   80fd6:	3301      	adds	r3, #1
   80fd8:	60c3      	str	r3, [r0, #12]
    if (TEST_PROTECT())
   80fda:	3020      	adds	r0, #32
   80fdc:	4b0b      	ldr	r3, [pc, #44]	; (8100c <UnityDefaultTestRun+0x44>)
   80fde:	4798      	blx	r3
   80fe0:	b918      	cbnz	r0, 80fea <UnityDefaultTestRun+0x22>
    {
        setUp();
   80fe2:	4b0b      	ldr	r3, [pc, #44]	; (81010 <UnityDefaultTestRun+0x48>)
   80fe4:	4798      	blx	r3
        Func();
   80fe6:	9b01      	ldr	r3, [sp, #4]
   80fe8:	4798      	blx	r3
    }
    if (TEST_PROTECT() && !(Unity.CurrentTestIgnored))
   80fea:	480a      	ldr	r0, [pc, #40]	; (81014 <UnityDefaultTestRun+0x4c>)
   80fec:	4b07      	ldr	r3, [pc, #28]	; (8100c <UnityDefaultTestRun+0x44>)
   80fee:	4798      	blx	r3
   80ff0:	b920      	cbnz	r0, 80ffc <UnityDefaultTestRun+0x34>
   80ff2:	4b05      	ldr	r3, [pc, #20]	; (81008 <UnityDefaultTestRun+0x40>)
   80ff4:	69db      	ldr	r3, [r3, #28]
   80ff6:	b90b      	cbnz	r3, 80ffc <UnityDefaultTestRun+0x34>
    {
        tearDown();
   80ff8:	4b07      	ldr	r3, [pc, #28]	; (81018 <UnityDefaultTestRun+0x50>)
   80ffa:	4798      	blx	r3
    }
    UnityConcludeTest();
   80ffc:	4b07      	ldr	r3, [pc, #28]	; (8101c <UnityDefaultTestRun+0x54>)
   80ffe:	4798      	blx	r3
}
   81000:	b003      	add	sp, #12
   81002:	f85d fb04 	ldr.w	pc, [sp], #4
   81006:	bf00      	nop
   81008:	2007099c 	.word	0x2007099c
   8100c:	00081d25 	.word	0x00081d25
   81010:	00080169 	.word	0x00080169
   81014:	200709bc 	.word	0x200709bc
   81018:	0008016d 	.word	0x0008016d
   8101c:	00080ea5 	.word	0x00080ea5

00081020 <UnityBegin>:

//-----------------------------------------------
void UnityBegin(const char* filename)
{
    Unity.TestFile = filename;
   81020:	4b05      	ldr	r3, [pc, #20]	; (81038 <UnityBegin+0x18>)
   81022:	6018      	str	r0, [r3, #0]
    Unity.CurrentTestName = NULL;
   81024:	2200      	movs	r2, #0
   81026:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
   81028:	609a      	str	r2, [r3, #8]
    Unity.NumberOfTests = 0;
   8102a:	60da      	str	r2, [r3, #12]
    Unity.TestFailures = 0;
   8102c:	611a      	str	r2, [r3, #16]
    Unity.TestIgnores = 0;
   8102e:	615a      	str	r2, [r3, #20]
    Unity.CurrentTestFailed = 0;
   81030:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   81032:	61da      	str	r2, [r3, #28]
   81034:	4770      	bx	lr
   81036:	bf00      	nop
   81038:	2007099c 	.word	0x2007099c

0008103c <UnityEnd>:
    UNITY_OUTPUT_START();
}

//-----------------------------------------------
int UnityEnd(void)
{
   8103c:	b570      	push	{r4, r5, r6, lr}
    UNITY_PRINT_EOL;
   8103e:	4b66      	ldr	r3, [pc, #408]	; (811d8 <UnityEnd+0x19c>)
   81040:	6818      	ldr	r0, [r3, #0]
   81042:	6882      	ldr	r2, [r0, #8]
   81044:	6893      	ldr	r3, [r2, #8]
   81046:	3b01      	subs	r3, #1
   81048:	6093      	str	r3, [r2, #8]
   8104a:	2b00      	cmp	r3, #0
   8104c:	da19      	bge.n	81082 <UnityEnd+0x46>
   8104e:	6882      	ldr	r2, [r0, #8]
   81050:	6891      	ldr	r1, [r2, #8]
   81052:	6993      	ldr	r3, [r2, #24]
   81054:	4299      	cmp	r1, r3
   81056:	db10      	blt.n	8107a <UnityEnd+0x3e>
   81058:	6813      	ldr	r3, [r2, #0]
   8105a:	220a      	movs	r2, #10
   8105c:	701a      	strb	r2, [r3, #0]
   8105e:	4b5e      	ldr	r3, [pc, #376]	; (811d8 <UnityEnd+0x19c>)
   81060:	6818      	ldr	r0, [r3, #0]
   81062:	6882      	ldr	r2, [r0, #8]
   81064:	6813      	ldr	r3, [r2, #0]
   81066:	7819      	ldrb	r1, [r3, #0]
   81068:	290a      	cmp	r1, #10
   8106a:	d002      	beq.n	81072 <UnityEnd+0x36>
   8106c:	3301      	adds	r3, #1
   8106e:	6013      	str	r3, [r2, #0]
   81070:	e011      	b.n	81096 <UnityEnd+0x5a>
   81072:	210a      	movs	r1, #10
   81074:	4b59      	ldr	r3, [pc, #356]	; (811dc <UnityEnd+0x1a0>)
   81076:	4798      	blx	r3
   81078:	e00d      	b.n	81096 <UnityEnd+0x5a>
   8107a:	210a      	movs	r1, #10
   8107c:	4b57      	ldr	r3, [pc, #348]	; (811dc <UnityEnd+0x1a0>)
   8107e:	4798      	blx	r3
   81080:	e009      	b.n	81096 <UnityEnd+0x5a>
   81082:	6883      	ldr	r3, [r0, #8]
   81084:	681b      	ldr	r3, [r3, #0]
   81086:	220a      	movs	r2, #10
   81088:	701a      	strb	r2, [r3, #0]
   8108a:	4b53      	ldr	r3, [pc, #332]	; (811d8 <UnityEnd+0x19c>)
   8108c:	681b      	ldr	r3, [r3, #0]
   8108e:	689b      	ldr	r3, [r3, #8]
   81090:	681a      	ldr	r2, [r3, #0]
   81092:	3201      	adds	r2, #1
   81094:	601a      	str	r2, [r3, #0]
    UnityPrint(UnityStrBreaker);
   81096:	4852      	ldr	r0, [pc, #328]	; (811e0 <UnityEnd+0x1a4>)
   81098:	4b52      	ldr	r3, [pc, #328]	; (811e4 <UnityEnd+0x1a8>)
   8109a:	4798      	blx	r3
    UNITY_PRINT_EOL;
   8109c:	4b4e      	ldr	r3, [pc, #312]	; (811d8 <UnityEnd+0x19c>)
   8109e:	6818      	ldr	r0, [r3, #0]
   810a0:	6882      	ldr	r2, [r0, #8]
   810a2:	6893      	ldr	r3, [r2, #8]
   810a4:	3b01      	subs	r3, #1
   810a6:	6093      	str	r3, [r2, #8]
   810a8:	2b00      	cmp	r3, #0
   810aa:	da19      	bge.n	810e0 <UnityEnd+0xa4>
   810ac:	6882      	ldr	r2, [r0, #8]
   810ae:	6891      	ldr	r1, [r2, #8]
   810b0:	6993      	ldr	r3, [r2, #24]
   810b2:	4299      	cmp	r1, r3
   810b4:	db10      	blt.n	810d8 <UnityEnd+0x9c>
   810b6:	6813      	ldr	r3, [r2, #0]
   810b8:	220a      	movs	r2, #10
   810ba:	701a      	strb	r2, [r3, #0]
   810bc:	4b46      	ldr	r3, [pc, #280]	; (811d8 <UnityEnd+0x19c>)
   810be:	6818      	ldr	r0, [r3, #0]
   810c0:	6882      	ldr	r2, [r0, #8]
   810c2:	6813      	ldr	r3, [r2, #0]
   810c4:	7819      	ldrb	r1, [r3, #0]
   810c6:	290a      	cmp	r1, #10
   810c8:	d002      	beq.n	810d0 <UnityEnd+0x94>
   810ca:	3301      	adds	r3, #1
   810cc:	6013      	str	r3, [r2, #0]
   810ce:	e011      	b.n	810f4 <UnityEnd+0xb8>
   810d0:	210a      	movs	r1, #10
   810d2:	4b42      	ldr	r3, [pc, #264]	; (811dc <UnityEnd+0x1a0>)
   810d4:	4798      	blx	r3
   810d6:	e00d      	b.n	810f4 <UnityEnd+0xb8>
   810d8:	210a      	movs	r1, #10
   810da:	4b40      	ldr	r3, [pc, #256]	; (811dc <UnityEnd+0x1a0>)
   810dc:	4798      	blx	r3
   810de:	e009      	b.n	810f4 <UnityEnd+0xb8>
   810e0:	6883      	ldr	r3, [r0, #8]
   810e2:	681b      	ldr	r3, [r3, #0]
   810e4:	220a      	movs	r2, #10
   810e6:	701a      	strb	r2, [r3, #0]
   810e8:	4b3b      	ldr	r3, [pc, #236]	; (811d8 <UnityEnd+0x19c>)
   810ea:	681b      	ldr	r3, [r3, #0]
   810ec:	689b      	ldr	r3, [r3, #8]
   810ee:	681a      	ldr	r2, [r3, #0]
   810f0:	3201      	adds	r2, #1
   810f2:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)(Unity.NumberOfTests));
   810f4:	4e3c      	ldr	r6, [pc, #240]	; (811e8 <UnityEnd+0x1ac>)
   810f6:	68f0      	ldr	r0, [r6, #12]
   810f8:	4d3c      	ldr	r5, [pc, #240]	; (811ec <UnityEnd+0x1b0>)
   810fa:	47a8      	blx	r5
    UnityPrint(UnityStrResultsTests);
   810fc:	483c      	ldr	r0, [pc, #240]	; (811f0 <UnityEnd+0x1b4>)
   810fe:	4c39      	ldr	r4, [pc, #228]	; (811e4 <UnityEnd+0x1a8>)
   81100:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestFailures));
   81102:	6930      	ldr	r0, [r6, #16]
   81104:	47a8      	blx	r5
    UnityPrint(UnityStrResultsFailures);
   81106:	483b      	ldr	r0, [pc, #236]	; (811f4 <UnityEnd+0x1b8>)
   81108:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestIgnores));
   8110a:	6970      	ldr	r0, [r6, #20]
   8110c:	47a8      	blx	r5
    UnityPrint(UnityStrResultsIgnored);
   8110e:	483a      	ldr	r0, [pc, #232]	; (811f8 <UnityEnd+0x1bc>)
   81110:	47a0      	blx	r4
    UNITY_PRINT_EOL;
   81112:	4b31      	ldr	r3, [pc, #196]	; (811d8 <UnityEnd+0x19c>)
   81114:	6818      	ldr	r0, [r3, #0]
   81116:	6882      	ldr	r2, [r0, #8]
   81118:	6893      	ldr	r3, [r2, #8]
   8111a:	3b01      	subs	r3, #1
   8111c:	6093      	str	r3, [r2, #8]
   8111e:	2b00      	cmp	r3, #0
   81120:	da19      	bge.n	81156 <UnityEnd+0x11a>
   81122:	6882      	ldr	r2, [r0, #8]
   81124:	6891      	ldr	r1, [r2, #8]
   81126:	6993      	ldr	r3, [r2, #24]
   81128:	4299      	cmp	r1, r3
   8112a:	db10      	blt.n	8114e <UnityEnd+0x112>
   8112c:	6813      	ldr	r3, [r2, #0]
   8112e:	220a      	movs	r2, #10
   81130:	701a      	strb	r2, [r3, #0]
   81132:	4b29      	ldr	r3, [pc, #164]	; (811d8 <UnityEnd+0x19c>)
   81134:	6818      	ldr	r0, [r3, #0]
   81136:	6882      	ldr	r2, [r0, #8]
   81138:	6813      	ldr	r3, [r2, #0]
   8113a:	7819      	ldrb	r1, [r3, #0]
   8113c:	290a      	cmp	r1, #10
   8113e:	d002      	beq.n	81146 <UnityEnd+0x10a>
   81140:	3301      	adds	r3, #1
   81142:	6013      	str	r3, [r2, #0]
   81144:	e011      	b.n	8116a <UnityEnd+0x12e>
   81146:	210a      	movs	r1, #10
   81148:	4b24      	ldr	r3, [pc, #144]	; (811dc <UnityEnd+0x1a0>)
   8114a:	4798      	blx	r3
   8114c:	e00d      	b.n	8116a <UnityEnd+0x12e>
   8114e:	210a      	movs	r1, #10
   81150:	4b22      	ldr	r3, [pc, #136]	; (811dc <UnityEnd+0x1a0>)
   81152:	4798      	blx	r3
   81154:	e009      	b.n	8116a <UnityEnd+0x12e>
   81156:	6883      	ldr	r3, [r0, #8]
   81158:	681b      	ldr	r3, [r3, #0]
   8115a:	220a      	movs	r2, #10
   8115c:	701a      	strb	r2, [r3, #0]
   8115e:	4b1e      	ldr	r3, [pc, #120]	; (811d8 <UnityEnd+0x19c>)
   81160:	681b      	ldr	r3, [r3, #0]
   81162:	689b      	ldr	r3, [r3, #8]
   81164:	681a      	ldr	r2, [r3, #0]
   81166:	3201      	adds	r2, #1
   81168:	601a      	str	r2, [r3, #0]
    if (Unity.TestFailures == 0U)
   8116a:	4b1f      	ldr	r3, [pc, #124]	; (811e8 <UnityEnd+0x1ac>)
   8116c:	691b      	ldr	r3, [r3, #16]
   8116e:	b913      	cbnz	r3, 81176 <UnityEnd+0x13a>
    {
        UnityPrintOk();
   81170:	4b22      	ldr	r3, [pc, #136]	; (811fc <UnityEnd+0x1c0>)
   81172:	4798      	blx	r3
   81174:	e001      	b.n	8117a <UnityEnd+0x13e>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
    }
    else
    {
        UnityPrintFail();
<<<<<<< HEAD
   8102a:	4b22      	ldr	r3, [pc, #136]	; (810b4 <UnityEnd+0x1c4>)
   8102c:	4798      	blx	r3
    }
    UNITY_PRINT_EOL;
   8102e:	4b17      	ldr	r3, [pc, #92]	; (8108c <UnityEnd+0x19c>)
   81030:	6818      	ldr	r0, [r3, #0]
   81032:	6882      	ldr	r2, [r0, #8]
   81034:	6893      	ldr	r3, [r2, #8]
   81036:	3b01      	subs	r3, #1
   81038:	6093      	str	r3, [r2, #8]
   8103a:	2b00      	cmp	r3, #0
   8103c:	da19      	bge.n	81072 <UnityEnd+0x182>
   8103e:	6882      	ldr	r2, [r0, #8]
   81040:	6891      	ldr	r1, [r2, #8]
   81042:	6993      	ldr	r3, [r2, #24]
   81044:	4299      	cmp	r1, r3
   81046:	db10      	blt.n	8106a <UnityEnd+0x17a>
   81048:	6813      	ldr	r3, [r2, #0]
   8104a:	220a      	movs	r2, #10
   8104c:	701a      	strb	r2, [r3, #0]
   8104e:	4b0f      	ldr	r3, [pc, #60]	; (8108c <UnityEnd+0x19c>)
   81050:	6818      	ldr	r0, [r3, #0]
   81052:	6882      	ldr	r2, [r0, #8]
   81054:	6813      	ldr	r3, [r2, #0]
   81056:	7819      	ldrb	r1, [r3, #0]
   81058:	290a      	cmp	r1, #10
   8105a:	d002      	beq.n	81062 <UnityEnd+0x172>
   8105c:	3301      	adds	r3, #1
   8105e:	6013      	str	r3, [r2, #0]
   81060:	e011      	b.n	81086 <UnityEnd+0x196>
   81062:	210a      	movs	r1, #10
   81064:	4b0a      	ldr	r3, [pc, #40]	; (81090 <UnityEnd+0x1a0>)
   81066:	4798      	blx	r3
   81068:	e00d      	b.n	81086 <UnityEnd+0x196>
   8106a:	210a      	movs	r1, #10
   8106c:	4b08      	ldr	r3, [pc, #32]	; (81090 <UnityEnd+0x1a0>)
   8106e:	4798      	blx	r3
   81070:	e009      	b.n	81086 <UnityEnd+0x196>
   81072:	6883      	ldr	r3, [r0, #8]
   81074:	681b      	ldr	r3, [r3, #0]
   81076:	220a      	movs	r2, #10
   81078:	701a      	strb	r2, [r3, #0]
   8107a:	4b04      	ldr	r3, [pc, #16]	; (8108c <UnityEnd+0x19c>)
   8107c:	681b      	ldr	r3, [r3, #0]
   8107e:	689b      	ldr	r3, [r3, #8]
   81080:	681a      	ldr	r2, [r3, #0]
   81082:	3201      	adds	r2, #1
   81084:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
}
   81086:	4b05      	ldr	r3, [pc, #20]	; (8109c <UnityEnd+0x1ac>)
   81088:	6918      	ldr	r0, [r3, #16]
   8108a:	bd70      	pop	{r4, r5, r6, pc}
   8108c:	20070430 	.word	0x20070430
   81090:	00081cf5 	.word	0x00081cf5
   81094:	00082d0c 	.word	0x00082d0c
   81098:	000808f1 	.word	0x000808f1
   8109c:	2007099c 	.word	0x2007099c
   810a0:	00080501 	.word	0x00080501
   810a4:	00082d3c 	.word	0x00082d3c
   810a8:	00082d24 	.word	0x00082d24
   810ac:	00082d30 	.word	0x00082d30
   810b0:	00080d49 	.word	0x00080d49
   810b4:	00080d35 	.word	0x00080d35

000810b8 <vListInsertEnd>:
=======
   81176:	4b22      	ldr	r3, [pc, #136]	; (81200 <UnityEnd+0x1c4>)
   81178:	4798      	blx	r3
    }
    UNITY_PRINT_EOL;
   8117a:	4b17      	ldr	r3, [pc, #92]	; (811d8 <UnityEnd+0x19c>)
   8117c:	6818      	ldr	r0, [r3, #0]
   8117e:	6882      	ldr	r2, [r0, #8]
   81180:	6893      	ldr	r3, [r2, #8]
   81182:	3b01      	subs	r3, #1
   81184:	6093      	str	r3, [r2, #8]
   81186:	2b00      	cmp	r3, #0
   81188:	da19      	bge.n	811be <UnityEnd+0x182>
   8118a:	6882      	ldr	r2, [r0, #8]
   8118c:	6891      	ldr	r1, [r2, #8]
   8118e:	6993      	ldr	r3, [r2, #24]
   81190:	4299      	cmp	r1, r3
   81192:	db10      	blt.n	811b6 <UnityEnd+0x17a>
   81194:	6813      	ldr	r3, [r2, #0]
   81196:	220a      	movs	r2, #10
   81198:	701a      	strb	r2, [r3, #0]
   8119a:	4b0f      	ldr	r3, [pc, #60]	; (811d8 <UnityEnd+0x19c>)
   8119c:	6818      	ldr	r0, [r3, #0]
   8119e:	6882      	ldr	r2, [r0, #8]
   811a0:	6813      	ldr	r3, [r2, #0]
   811a2:	7819      	ldrb	r1, [r3, #0]
   811a4:	290a      	cmp	r1, #10
   811a6:	d002      	beq.n	811ae <UnityEnd+0x172>
   811a8:	3301      	adds	r3, #1
   811aa:	6013      	str	r3, [r2, #0]
   811ac:	e011      	b.n	811d2 <UnityEnd+0x196>
   811ae:	210a      	movs	r1, #10
   811b0:	4b0a      	ldr	r3, [pc, #40]	; (811dc <UnityEnd+0x1a0>)
   811b2:	4798      	blx	r3
   811b4:	e00d      	b.n	811d2 <UnityEnd+0x196>
   811b6:	210a      	movs	r1, #10
   811b8:	4b08      	ldr	r3, [pc, #32]	; (811dc <UnityEnd+0x1a0>)
   811ba:	4798      	blx	r3
   811bc:	e009      	b.n	811d2 <UnityEnd+0x196>
   811be:	6883      	ldr	r3, [r0, #8]
   811c0:	681b      	ldr	r3, [r3, #0]
   811c2:	220a      	movs	r2, #10
   811c4:	701a      	strb	r2, [r3, #0]
   811c6:	4b04      	ldr	r3, [pc, #16]	; (811d8 <UnityEnd+0x19c>)
   811c8:	681b      	ldr	r3, [r3, #0]
   811ca:	689b      	ldr	r3, [r3, #8]
   811cc:	681a      	ldr	r2, [r3, #0]
   811ce:	3201      	adds	r2, #1
   811d0:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
}
   811d2:	4b05      	ldr	r3, [pc, #20]	; (811e8 <UnityEnd+0x1ac>)
   811d4:	6918      	ldr	r0, [r3, #16]
   811d6:	bd70      	pop	{r4, r5, r6, pc}
   811d8:	20070430 	.word	0x20070430
   811dc:	00081e41 	.word	0x00081e41
   811e0:	00082ebc 	.word	0x00082ebc
   811e4:	00080959 	.word	0x00080959
   811e8:	2007099c 	.word	0x2007099c
   811ec:	00080631 	.word	0x00080631
   811f0:	00082eec 	.word	0x00082eec
   811f4:	00082ed4 	.word	0x00082ed4
   811f8:	00082ee0 	.word	0x00082ee0
   811fc:	00080e91 	.word	0x00080e91
   81200:	00080e7d 	.word	0x00080e7d

00081204 <vListInsertEnd>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
<<<<<<< HEAD
   810b8:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   810ba:	685a      	ldr	r2, [r3, #4]
   810bc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   810be:	6842      	ldr	r2, [r0, #4]
   810c0:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   810c2:	685a      	ldr	r2, [r3, #4]
   810c4:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   810c6:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   810c8:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   810ca:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   810cc:	6803      	ldr	r3, [r0, #0]
   810ce:	3301      	adds	r3, #1
   810d0:	6003      	str	r3, [r0, #0]
   810d2:	4770      	bx	lr

000810d4 <uxListRemove>:
=======
   81204:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   81206:	685a      	ldr	r2, [r3, #4]
   81208:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   8120a:	6842      	ldr	r2, [r0, #4]
   8120c:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8120e:	685a      	ldr	r2, [r3, #4]
   81210:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   81212:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   81214:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   81216:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81218:	6803      	ldr	r3, [r0, #0]
   8121a:	3301      	adds	r3, #1
   8121c:	6003      	str	r3, [r0, #0]
   8121e:	4770      	bx	lr

00081220 <uxListRemove>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
<<<<<<< HEAD
   810d4:	6843      	ldr	r3, [r0, #4]
   810d6:	6882      	ldr	r2, [r0, #8]
   810d8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   810da:	6883      	ldr	r3, [r0, #8]
   810dc:	6842      	ldr	r2, [r0, #4]
   810de:	605a      	str	r2, [r3, #4]
=======
   81220:	6843      	ldr	r3, [r0, #4]
   81222:	6882      	ldr	r2, [r0, #8]
   81224:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   81226:	6883      	ldr	r3, [r0, #8]
   81228:	6842      	ldr	r2, [r0, #4]
   8122a:	605a      	str	r2, [r3, #4]
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
<<<<<<< HEAD
   810e0:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   810e2:	685a      	ldr	r2, [r3, #4]
   810e4:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   810e6:	bf04      	itt	eq
   810e8:	6882      	ldreq	r2, [r0, #8]
   810ea:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   810ec:	2200      	movs	r2, #0
   810ee:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   810f0:	681a      	ldr	r2, [r3, #0]
   810f2:	3a01      	subs	r2, #1
   810f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   810f6:	6818      	ldr	r0, [r3, #0]
}
   810f8:	4770      	bx	lr
   810fa:	bf00      	nop

000810fc <SVC_Handler>:
=======
   8122c:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8122e:	685a      	ldr	r2, [r3, #4]
   81230:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   81232:	bf04      	itt	eq
   81234:	6882      	ldreq	r2, [r0, #8]
   81236:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   81238:	2200      	movs	r2, #0
   8123a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   8123c:	681a      	ldr	r2, [r3, #0]
   8123e:	3a01      	subs	r2, #1
   81240:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   81242:	6818      	ldr	r0, [r3, #0]
}
   81244:	4770      	bx	lr
   81246:	bf00      	nop

00081248 <SVC_Handler>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
<<<<<<< HEAD
   810fc:	4b06      	ldr	r3, [pc, #24]	; (81118 <pxCurrentTCBConst2>)
   810fe:	6819      	ldr	r1, [r3, #0]
   81100:	6808      	ldr	r0, [r1, #0]
   81102:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81106:	f380 8809 	msr	PSP, r0
   8110a:	f04f 0000 	mov.w	r0, #0
   8110e:	f380 8811 	msr	BASEPRI, r0
   81112:	f04e 0e0d 	orr.w	lr, lr, #13
   81116:	4770      	bx	lr

00081118 <pxCurrentTCBConst2>:
   81118:	200708d4 	.word	0x200708d4

0008111c <ulPortSetInterruptMask>:
=======
   81248:	4b06      	ldr	r3, [pc, #24]	; (81264 <pxCurrentTCBConst2>)
   8124a:	6819      	ldr	r1, [r3, #0]
   8124c:	6808      	ldr	r0, [r1, #0]
   8124e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81252:	f380 8809 	msr	PSP, r0
   81256:	f04f 0000 	mov.w	r0, #0
   8125a:	f380 8811 	msr	BASEPRI, r0
   8125e:	f04e 0e0d 	orr.w	lr, lr, #13
   81262:	4770      	bx	lr

00081264 <pxCurrentTCBConst2>:
   81264:	200708d4 	.word	0x200708d4

00081268 <ulPortSetInterruptMask>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
<<<<<<< HEAD
   8111c:	f3ef 8011 	mrs	r0, BASEPRI
   81120:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   81124:	f381 8811 	msr	BASEPRI, r1
   81128:	4770      	bx	lr
=======
   81268:	f3ef 8011 	mrs	r0, BASEPRI
   8126c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   81270:	f381 8811 	msr	BASEPRI, r1
   81274:	4770      	bx	lr
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
<<<<<<< HEAD
   8112a:	2000      	movs	r0, #0

0008112c <vPortClearInterruptMask>:
=======
   81276:	2000      	movs	r0, #0

00081278 <vPortClearInterruptMask>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
<<<<<<< HEAD
   8112c:	f380 8811 	msr	BASEPRI, r0
   81130:	4770      	bx	lr
   81132:	bf00      	nop

00081134 <PendSV_Handler>:
=======
   81278:	f380 8811 	msr	BASEPRI, r0
   8127c:	4770      	bx	lr
   8127e:	bf00      	nop

00081280 <PendSV_Handler>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< HEAD
   81134:	f3ef 8009 	mrs	r0, PSP
   81138:	4b0c      	ldr	r3, [pc, #48]	; (8116c <pxCurrentTCBConst>)
   8113a:	681a      	ldr	r2, [r3, #0]
   8113c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81140:	6010      	str	r0, [r2, #0]
   81142:	e92d 4008 	stmdb	sp!, {r3, lr}
   81146:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   8114a:	f380 8811 	msr	BASEPRI, r0
   8114e:	f000 f8b5 	bl	812bc <vTaskSwitchContext>
   81152:	f04f 0000 	mov.w	r0, #0
   81156:	f380 8811 	msr	BASEPRI, r0
   8115a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8115e:	6819      	ldr	r1, [r3, #0]
   81160:	6808      	ldr	r0, [r1, #0]
   81162:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81166:	f380 8809 	msr	PSP, r0
   8116a:	4770      	bx	lr

0008116c <pxCurrentTCBConst>:
   8116c:	200708d4 	.word	0x200708d4

00081170 <SysTick_Handler>:
=======
   81280:	f3ef 8009 	mrs	r0, PSP
   81284:	4b0c      	ldr	r3, [pc, #48]	; (812b8 <pxCurrentTCBConst>)
   81286:	681a      	ldr	r2, [r3, #0]
   81288:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8128c:	6010      	str	r0, [r2, #0]
   8128e:	e92d 4008 	stmdb	sp!, {r3, lr}
   81292:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   81296:	f380 8811 	msr	BASEPRI, r0
   8129a:	f000 f8b5 	bl	81408 <vTaskSwitchContext>
   8129e:	f04f 0000 	mov.w	r0, #0
   812a2:	f380 8811 	msr	BASEPRI, r0
   812a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   812aa:	6819      	ldr	r1, [r3, #0]
   812ac:	6808      	ldr	r0, [r1, #0]
   812ae:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   812b2:	f380 8809 	msr	PSP, r0
   812b6:	4770      	bx	lr

000812b8 <pxCurrentTCBConst>:
   812b8:	200708d4 	.word	0x200708d4

000812bc <SysTick_Handler>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
<<<<<<< HEAD
   81170:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81176:	4b05      	ldr	r3, [pc, #20]	; (8118c <SysTick_Handler+0x1c>)
   81178:	601a      	str	r2, [r3, #0]
=======
   812bc:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   812be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   812c2:	4b05      	ldr	r3, [pc, #20]	; (812d8 <SysTick_Handler+0x1c>)
   812c4:	601a      	str	r2, [r3, #0]
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
<<<<<<< HEAD
   8117a:	4b05      	ldr	r3, [pc, #20]	; (81190 <SysTick_Handler+0x20>)
   8117c:	4798      	blx	r3
	{
		vTaskIncrementTick();
   8117e:	4b05      	ldr	r3, [pc, #20]	; (81194 <SysTick_Handler+0x24>)
   81180:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   81182:	2000      	movs	r0, #0
   81184:	4b04      	ldr	r3, [pc, #16]	; (81198 <SysTick_Handler+0x28>)
   81186:	4798      	blx	r3
   81188:	bd08      	pop	{r3, pc}
   8118a:	bf00      	nop
   8118c:	e000ed04 	.word	0xe000ed04
   81190:	0008111d 	.word	0x0008111d
   81194:	0008119d 	.word	0x0008119d
   81198:	0008112d 	.word	0x0008112d

0008119c <vTaskIncrementTick>:
=======
   812c6:	4b05      	ldr	r3, [pc, #20]	; (812dc <SysTick_Handler+0x20>)
   812c8:	4798      	blx	r3
	{
		vTaskIncrementTick();
   812ca:	4b05      	ldr	r3, [pc, #20]	; (812e0 <SysTick_Handler+0x24>)
   812cc:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   812ce:	2000      	movs	r0, #0
   812d0:	4b04      	ldr	r3, [pc, #16]	; (812e4 <SysTick_Handler+0x28>)
   812d2:	4798      	blx	r3
   812d4:	bd08      	pop	{r3, pc}
   812d6:	bf00      	nop
   812d8:	e000ed04 	.word	0xe000ed04
   812dc:	00081269 	.word	0x00081269
   812e0:	000812e9 	.word	0x000812e9
   812e4:	00081279 	.word	0x00081279

000812e8 <vTaskIncrementTick>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
<<<<<<< HEAD
   8119c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
=======
   812e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
<<<<<<< HEAD
   811a0:	4b3a      	ldr	r3, [pc, #232]	; (8128c <vTaskIncrementTick+0xf0>)
   811a2:	681b      	ldr	r3, [r3, #0]
   811a4:	2b00      	cmp	r3, #0
   811a6:	d16b      	bne.n	81280 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   811a8:	4b39      	ldr	r3, [pc, #228]	; (81290 <vTaskIncrementTick+0xf4>)
   811aa:	681a      	ldr	r2, [r3, #0]
   811ac:	3201      	adds	r2, #1
   811ae:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   811b0:	681b      	ldr	r3, [r3, #0]
   811b2:	bb03      	cbnz	r3, 811f6 <vTaskIncrementTick+0x5a>
=======
   812ec:	4b3a      	ldr	r3, [pc, #232]	; (813d8 <vTaskIncrementTick+0xf0>)
   812ee:	681b      	ldr	r3, [r3, #0]
   812f0:	2b00      	cmp	r3, #0
   812f2:	d16b      	bne.n	813cc <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   812f4:	4b39      	ldr	r3, [pc, #228]	; (813dc <vTaskIncrementTick+0xf4>)
   812f6:	681a      	ldr	r2, [r3, #0]
   812f8:	3201      	adds	r2, #1
   812fa:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   812fc:	681b      	ldr	r3, [r3, #0]
   812fe:	bb03      	cbnz	r3, 81342 <vTaskIncrementTick+0x5a>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
<<<<<<< HEAD
   811b4:	4b37      	ldr	r3, [pc, #220]	; (81294 <vTaskIncrementTick+0xf8>)
   811b6:	681b      	ldr	r3, [r3, #0]
   811b8:	681b      	ldr	r3, [r3, #0]
   811ba:	b11b      	cbz	r3, 811c4 <vTaskIncrementTick+0x28>
   811bc:	4b36      	ldr	r3, [pc, #216]	; (81298 <vTaskIncrementTick+0xfc>)
   811be:	4798      	blx	r3
   811c0:	bf00      	nop
   811c2:	e7fd      	b.n	811c0 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   811c4:	4b33      	ldr	r3, [pc, #204]	; (81294 <vTaskIncrementTick+0xf8>)
   811c6:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   811c8:	4a34      	ldr	r2, [pc, #208]	; (8129c <vTaskIncrementTick+0x100>)
   811ca:	6810      	ldr	r0, [r2, #0]
   811cc:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   811ce:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   811d0:	4a33      	ldr	r2, [pc, #204]	; (812a0 <vTaskIncrementTick+0x104>)
   811d2:	6811      	ldr	r1, [r2, #0]
   811d4:	3101      	adds	r1, #1
   811d6:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   811d8:	681b      	ldr	r3, [r3, #0]
   811da:	681b      	ldr	r3, [r3, #0]
   811dc:	b923      	cbnz	r3, 811e8 <vTaskIncrementTick+0x4c>
=======
   81300:	4b37      	ldr	r3, [pc, #220]	; (813e0 <vTaskIncrementTick+0xf8>)
   81302:	681b      	ldr	r3, [r3, #0]
   81304:	681b      	ldr	r3, [r3, #0]
   81306:	b11b      	cbz	r3, 81310 <vTaskIncrementTick+0x28>
   81308:	4b36      	ldr	r3, [pc, #216]	; (813e4 <vTaskIncrementTick+0xfc>)
   8130a:	4798      	blx	r3
   8130c:	bf00      	nop
   8130e:	e7fd      	b.n	8130c <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   81310:	4b33      	ldr	r3, [pc, #204]	; (813e0 <vTaskIncrementTick+0xf8>)
   81312:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81314:	4a34      	ldr	r2, [pc, #208]	; (813e8 <vTaskIncrementTick+0x100>)
   81316:	6810      	ldr	r0, [r2, #0]
   81318:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   8131a:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   8131c:	4a33      	ldr	r2, [pc, #204]	; (813ec <vTaskIncrementTick+0x104>)
   8131e:	6811      	ldr	r1, [r2, #0]
   81320:	3101      	adds	r1, #1
   81322:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81324:	681b      	ldr	r3, [r3, #0]
   81326:	681b      	ldr	r3, [r3, #0]
   81328:	b923      	cbnz	r3, 81334 <vTaskIncrementTick+0x4c>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
   811de:	f04f 32ff 	mov.w	r2, #4294967295
   811e2:	4b30      	ldr	r3, [pc, #192]	; (812a4 <vTaskIncrementTick+0x108>)
   811e4:	601a      	str	r2, [r3, #0]
   811e6:	e006      	b.n	811f6 <vTaskIncrementTick+0x5a>
=======
   8132a:	f04f 32ff 	mov.w	r2, #4294967295
   8132e:	4b30      	ldr	r3, [pc, #192]	; (813f0 <vTaskIncrementTick+0x108>)
   81330:	601a      	str	r2, [r3, #0]
   81332:	e006      	b.n	81342 <vTaskIncrementTick+0x5a>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
<<<<<<< HEAD
   811e8:	4b2a      	ldr	r3, [pc, #168]	; (81294 <vTaskIncrementTick+0xf8>)
   811ea:	681b      	ldr	r3, [r3, #0]
   811ec:	68db      	ldr	r3, [r3, #12]
   811ee:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   811f0:	685a      	ldr	r2, [r3, #4]
   811f2:	4b2c      	ldr	r3, [pc, #176]	; (812a4 <vTaskIncrementTick+0x108>)
   811f4:	601a      	str	r2, [r3, #0]
=======
   81334:	4b2a      	ldr	r3, [pc, #168]	; (813e0 <vTaskIncrementTick+0xf8>)
   81336:	681b      	ldr	r3, [r3, #0]
   81338:	68db      	ldr	r3, [r3, #12]
   8133a:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   8133c:	685a      	ldr	r2, [r3, #4]
   8133e:	4b2c      	ldr	r3, [pc, #176]	; (813f0 <vTaskIncrementTick+0x108>)
   81340:	601a      	str	r2, [r3, #0]
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
<<<<<<< HEAD
   811f6:	4b26      	ldr	r3, [pc, #152]	; (81290 <vTaskIncrementTick+0xf4>)
   811f8:	681a      	ldr	r2, [r3, #0]
   811fa:	4b2a      	ldr	r3, [pc, #168]	; (812a4 <vTaskIncrementTick+0x108>)
   811fc:	681b      	ldr	r3, [r3, #0]
   811fe:	429a      	cmp	r2, r3
   81200:	d342      	bcc.n	81288 <vTaskIncrementTick+0xec>
   81202:	4b24      	ldr	r3, [pc, #144]	; (81294 <vTaskIncrementTick+0xf8>)
   81204:	681b      	ldr	r3, [r3, #0]
   81206:	681b      	ldr	r3, [r3, #0]
   81208:	b14b      	cbz	r3, 8121e <vTaskIncrementTick+0x82>
   8120a:	4b22      	ldr	r3, [pc, #136]	; (81294 <vTaskIncrementTick+0xf8>)
   8120c:	681b      	ldr	r3, [r3, #0]
   8120e:	68db      	ldr	r3, [r3, #12]
   81210:	68dc      	ldr	r4, [r3, #12]
   81212:	6863      	ldr	r3, [r4, #4]
   81214:	4a1e      	ldr	r2, [pc, #120]	; (81290 <vTaskIncrementTick+0xf4>)
   81216:	6812      	ldr	r2, [r2, #0]
   81218:	4293      	cmp	r3, r2
   8121a:	d913      	bls.n	81244 <vTaskIncrementTick+0xa8>
   8121c:	e00e      	b.n	8123c <vTaskIncrementTick+0xa0>
   8121e:	f04f 32ff 	mov.w	r2, #4294967295
   81222:	4b20      	ldr	r3, [pc, #128]	; (812a4 <vTaskIncrementTick+0x108>)
   81224:	601a      	str	r2, [r3, #0]
   81226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8122a:	4b1a      	ldr	r3, [pc, #104]	; (81294 <vTaskIncrementTick+0xf8>)
   8122c:	681b      	ldr	r3, [r3, #0]
   8122e:	68db      	ldr	r3, [r3, #12]
   81230:	68dc      	ldr	r4, [r3, #12]
   81232:	6863      	ldr	r3, [r4, #4]
   81234:	4a16      	ldr	r2, [pc, #88]	; (81290 <vTaskIncrementTick+0xf4>)
   81236:	6812      	ldr	r2, [r2, #0]
   81238:	4293      	cmp	r3, r2
   8123a:	d907      	bls.n	8124c <vTaskIncrementTick+0xb0>
   8123c:	4a19      	ldr	r2, [pc, #100]	; (812a4 <vTaskIncrementTick+0x108>)
   8123e:	6013      	str	r3, [r2, #0]
   81240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81244:	4e18      	ldr	r6, [pc, #96]	; (812a8 <vTaskIncrementTick+0x10c>)
   81246:	4f19      	ldr	r7, [pc, #100]	; (812ac <vTaskIncrementTick+0x110>)
   81248:	f8df 806c 	ldr.w	r8, [pc, #108]	; 812b8 <vTaskIncrementTick+0x11c>
   8124c:	1d25      	adds	r5, r4, #4
   8124e:	4628      	mov	r0, r5
   81250:	47b0      	blx	r6
   81252:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81254:	b113      	cbz	r3, 8125c <vTaskIncrementTick+0xc0>
   81256:	f104 0018 	add.w	r0, r4, #24
   8125a:	47b0      	blx	r6
   8125c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8125e:	683a      	ldr	r2, [r7, #0]
   81260:	4293      	cmp	r3, r2
   81262:	bf88      	it	hi
   81264:	603b      	strhi	r3, [r7, #0]
   81266:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   8126a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   8126e:	4629      	mov	r1, r5
   81270:	4b0f      	ldr	r3, [pc, #60]	; (812b0 <vTaskIncrementTick+0x114>)
   81272:	4798      	blx	r3
   81274:	4b07      	ldr	r3, [pc, #28]	; (81294 <vTaskIncrementTick+0xf8>)
   81276:	681b      	ldr	r3, [r3, #0]
   81278:	681b      	ldr	r3, [r3, #0]
   8127a:	2b00      	cmp	r3, #0
   8127c:	d1d5      	bne.n	8122a <vTaskIncrementTick+0x8e>
   8127e:	e7ce      	b.n	8121e <vTaskIncrementTick+0x82>
=======
   81342:	4b26      	ldr	r3, [pc, #152]	; (813dc <vTaskIncrementTick+0xf4>)
   81344:	681a      	ldr	r2, [r3, #0]
   81346:	4b2a      	ldr	r3, [pc, #168]	; (813f0 <vTaskIncrementTick+0x108>)
   81348:	681b      	ldr	r3, [r3, #0]
   8134a:	429a      	cmp	r2, r3
   8134c:	d342      	bcc.n	813d4 <vTaskIncrementTick+0xec>
   8134e:	4b24      	ldr	r3, [pc, #144]	; (813e0 <vTaskIncrementTick+0xf8>)
   81350:	681b      	ldr	r3, [r3, #0]
   81352:	681b      	ldr	r3, [r3, #0]
   81354:	b14b      	cbz	r3, 8136a <vTaskIncrementTick+0x82>
   81356:	4b22      	ldr	r3, [pc, #136]	; (813e0 <vTaskIncrementTick+0xf8>)
   81358:	681b      	ldr	r3, [r3, #0]
   8135a:	68db      	ldr	r3, [r3, #12]
   8135c:	68dc      	ldr	r4, [r3, #12]
   8135e:	6863      	ldr	r3, [r4, #4]
   81360:	4a1e      	ldr	r2, [pc, #120]	; (813dc <vTaskIncrementTick+0xf4>)
   81362:	6812      	ldr	r2, [r2, #0]
   81364:	4293      	cmp	r3, r2
   81366:	d913      	bls.n	81390 <vTaskIncrementTick+0xa8>
   81368:	e00e      	b.n	81388 <vTaskIncrementTick+0xa0>
   8136a:	f04f 32ff 	mov.w	r2, #4294967295
   8136e:	4b20      	ldr	r3, [pc, #128]	; (813f0 <vTaskIncrementTick+0x108>)
   81370:	601a      	str	r2, [r3, #0]
   81372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81376:	4b1a      	ldr	r3, [pc, #104]	; (813e0 <vTaskIncrementTick+0xf8>)
   81378:	681b      	ldr	r3, [r3, #0]
   8137a:	68db      	ldr	r3, [r3, #12]
   8137c:	68dc      	ldr	r4, [r3, #12]
   8137e:	6863      	ldr	r3, [r4, #4]
   81380:	4a16      	ldr	r2, [pc, #88]	; (813dc <vTaskIncrementTick+0xf4>)
   81382:	6812      	ldr	r2, [r2, #0]
   81384:	4293      	cmp	r3, r2
   81386:	d907      	bls.n	81398 <vTaskIncrementTick+0xb0>
   81388:	4a19      	ldr	r2, [pc, #100]	; (813f0 <vTaskIncrementTick+0x108>)
   8138a:	6013      	str	r3, [r2, #0]
   8138c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81390:	4e18      	ldr	r6, [pc, #96]	; (813f4 <vTaskIncrementTick+0x10c>)
   81392:	4f19      	ldr	r7, [pc, #100]	; (813f8 <vTaskIncrementTick+0x110>)
   81394:	f8df 806c 	ldr.w	r8, [pc, #108]	; 81404 <vTaskIncrementTick+0x11c>
   81398:	1d25      	adds	r5, r4, #4
   8139a:	4628      	mov	r0, r5
   8139c:	47b0      	blx	r6
   8139e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   813a0:	b113      	cbz	r3, 813a8 <vTaskIncrementTick+0xc0>
   813a2:	f104 0018 	add.w	r0, r4, #24
   813a6:	47b0      	blx	r6
   813a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   813aa:	683a      	ldr	r2, [r7, #0]
   813ac:	4293      	cmp	r3, r2
   813ae:	bf88      	it	hi
   813b0:	603b      	strhi	r3, [r7, #0]
   813b2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   813b6:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   813ba:	4629      	mov	r1, r5
   813bc:	4b0f      	ldr	r3, [pc, #60]	; (813fc <vTaskIncrementTick+0x114>)
   813be:	4798      	blx	r3
   813c0:	4b07      	ldr	r3, [pc, #28]	; (813e0 <vTaskIncrementTick+0xf8>)
   813c2:	681b      	ldr	r3, [r3, #0]
   813c4:	681b      	ldr	r3, [r3, #0]
   813c6:	2b00      	cmp	r3, #0
   813c8:	d1d5      	bne.n	81376 <vTaskIncrementTick+0x8e>
   813ca:	e7ce      	b.n	8136a <vTaskIncrementTick+0x82>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	}
	else
	{
		++uxMissedTicks;
<<<<<<< HEAD
   81280:	4b0c      	ldr	r3, [pc, #48]	; (812b4 <vTaskIncrementTick+0x118>)
   81282:	681a      	ldr	r2, [r3, #0]
   81284:	3201      	adds	r2, #1
   81286:	601a      	str	r2, [r3, #0]
   81288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8128c:	200708d0 	.word	0x200708d0
   81290:	200708dc 	.word	0x200708dc
   81294:	20070864 	.word	0x20070864
   81298:	0008111d 	.word	0x0008111d
   8129c:	200708e0 	.word	0x200708e0
   812a0:	200708d8 	.word	0x200708d8
   812a4:	20070000 	.word	0x20070000
   812a8:	000810d5 	.word	0x000810d5
   812ac:	20070868 	.word	0x20070868
   812b0:	000810b9 	.word	0x000810b9
   812b4:	20070860 	.word	0x20070860
   812b8:	2007086c 	.word	0x2007086c

000812bc <vTaskSwitchContext>:
=======
   813cc:	4b0c      	ldr	r3, [pc, #48]	; (81400 <vTaskIncrementTick+0x118>)
   813ce:	681a      	ldr	r2, [r3, #0]
   813d0:	3201      	adds	r2, #1
   813d2:	601a      	str	r2, [r3, #0]
   813d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   813d8:	200708d0 	.word	0x200708d0
   813dc:	200708dc 	.word	0x200708dc
   813e0:	20070864 	.word	0x20070864
   813e4:	00081269 	.word	0x00081269
   813e8:	200708e0 	.word	0x200708e0
   813ec:	200708d8 	.word	0x200708d8
   813f0:	20070000 	.word	0x20070000
   813f4:	00081221 	.word	0x00081221
   813f8:	20070868 	.word	0x20070868
   813fc:	00081205 	.word	0x00081205
   81400:	20070860 	.word	0x20070860
   81404:	2007086c 	.word	0x2007086c

00081408 <vTaskSwitchContext>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< HEAD
   812bc:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   812be:	4b1d      	ldr	r3, [pc, #116]	; (81334 <vTaskSwitchContext+0x78>)
   812c0:	681b      	ldr	r3, [r3, #0]
   812c2:	b95b      	cbnz	r3, 812dc <vTaskSwitchContext+0x20>
=======
   81408:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   8140a:	4b1d      	ldr	r3, [pc, #116]	; (81480 <vTaskSwitchContext+0x78>)
   8140c:	681b      	ldr	r3, [r3, #0]
   8140e:	b95b      	cbnz	r3, 81428 <vTaskSwitchContext+0x20>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
<<<<<<< HEAD
   812c4:	4b1c      	ldr	r3, [pc, #112]	; (81338 <vTaskSwitchContext+0x7c>)
   812c6:	681b      	ldr	r3, [r3, #0]
   812c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   812cc:	009b      	lsls	r3, r3, #2
   812ce:	4a1b      	ldr	r2, [pc, #108]	; (8133c <vTaskSwitchContext+0x80>)
   812d0:	58d3      	ldr	r3, [r2, r3]
   812d2:	b9cb      	cbnz	r3, 81308 <vTaskSwitchContext+0x4c>
   812d4:	4b18      	ldr	r3, [pc, #96]	; (81338 <vTaskSwitchContext+0x7c>)
   812d6:	681b      	ldr	r3, [r3, #0]
   812d8:	b953      	cbnz	r3, 812f0 <vTaskSwitchContext+0x34>
   812da:	e005      	b.n	812e8 <vTaskSwitchContext+0x2c>
=======
   81410:	4b1c      	ldr	r3, [pc, #112]	; (81484 <vTaskSwitchContext+0x7c>)
   81412:	681b      	ldr	r3, [r3, #0]
   81414:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81418:	009b      	lsls	r3, r3, #2
   8141a:	4a1b      	ldr	r2, [pc, #108]	; (81488 <vTaskSwitchContext+0x80>)
   8141c:	58d3      	ldr	r3, [r2, r3]
   8141e:	b9cb      	cbnz	r3, 81454 <vTaskSwitchContext+0x4c>
   81420:	4b18      	ldr	r3, [pc, #96]	; (81484 <vTaskSwitchContext+0x7c>)
   81422:	681b      	ldr	r3, [r3, #0]
   81424:	b953      	cbnz	r3, 8143c <vTaskSwitchContext+0x34>
   81426:	e005      	b.n	81434 <vTaskSwitchContext+0x2c>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
<<<<<<< HEAD
   812dc:	2201      	movs	r2, #1
   812de:	4b18      	ldr	r3, [pc, #96]	; (81340 <vTaskSwitchContext+0x84>)
   812e0:	601a      	str	r2, [r3, #0]
   812e2:	bd08      	pop	{r3, pc}
=======
   81428:	2201      	movs	r2, #1
   8142a:	4b18      	ldr	r3, [pc, #96]	; (8148c <vTaskSwitchContext+0x84>)
   8142c:	601a      	str	r2, [r3, #0]
   8142e:	bd08      	pop	{r3, pc}
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
<<<<<<< HEAD
   812e4:	681a      	ldr	r2, [r3, #0]
   812e6:	b92a      	cbnz	r2, 812f4 <vTaskSwitchContext+0x38>
   812e8:	4b16      	ldr	r3, [pc, #88]	; (81344 <vTaskSwitchContext+0x88>)
   812ea:	4798      	blx	r3
   812ec:	bf00      	nop
   812ee:	e7fd      	b.n	812ec <vTaskSwitchContext+0x30>
   812f0:	4b11      	ldr	r3, [pc, #68]	; (81338 <vTaskSwitchContext+0x7c>)
   812f2:	4912      	ldr	r1, [pc, #72]	; (8133c <vTaskSwitchContext+0x80>)
   812f4:	681a      	ldr	r2, [r3, #0]
   812f6:	3a01      	subs	r2, #1
   812f8:	601a      	str	r2, [r3, #0]
   812fa:	681a      	ldr	r2, [r3, #0]
   812fc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81300:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   81304:	2a00      	cmp	r2, #0
   81306:	d0ed      	beq.n	812e4 <vTaskSwitchContext+0x28>
   81308:	4b0b      	ldr	r3, [pc, #44]	; (81338 <vTaskSwitchContext+0x7c>)
   8130a:	681b      	ldr	r3, [r3, #0]
   8130c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81310:	4a0a      	ldr	r2, [pc, #40]	; (8133c <vTaskSwitchContext+0x80>)
   81312:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81316:	685a      	ldr	r2, [r3, #4]
   81318:	6852      	ldr	r2, [r2, #4]
   8131a:	605a      	str	r2, [r3, #4]
   8131c:	f103 0108 	add.w	r1, r3, #8
   81320:	428a      	cmp	r2, r1
   81322:	bf04      	itt	eq
   81324:	6852      	ldreq	r2, [r2, #4]
   81326:	605a      	streq	r2, [r3, #4]
   81328:	685b      	ldr	r3, [r3, #4]
   8132a:	68da      	ldr	r2, [r3, #12]
   8132c:	4b06      	ldr	r3, [pc, #24]	; (81348 <vTaskSwitchContext+0x8c>)
   8132e:	601a      	str	r2, [r3, #0]
   81330:	bd08      	pop	{r3, pc}
   81332:	bf00      	nop
   81334:	200708d0 	.word	0x200708d0
   81338:	20070868 	.word	0x20070868
   8133c:	2007086c 	.word	0x2007086c
   81340:	200708e4 	.word	0x200708e4
   81344:	0008111d 	.word	0x0008111d
   81348:	200708d4 	.word	0x200708d4

0008134c <pwm_channel_enable>:
=======
   81430:	681a      	ldr	r2, [r3, #0]
   81432:	b92a      	cbnz	r2, 81440 <vTaskSwitchContext+0x38>
   81434:	4b16      	ldr	r3, [pc, #88]	; (81490 <vTaskSwitchContext+0x88>)
   81436:	4798      	blx	r3
   81438:	bf00      	nop
   8143a:	e7fd      	b.n	81438 <vTaskSwitchContext+0x30>
   8143c:	4b11      	ldr	r3, [pc, #68]	; (81484 <vTaskSwitchContext+0x7c>)
   8143e:	4912      	ldr	r1, [pc, #72]	; (81488 <vTaskSwitchContext+0x80>)
   81440:	681a      	ldr	r2, [r3, #0]
   81442:	3a01      	subs	r2, #1
   81444:	601a      	str	r2, [r3, #0]
   81446:	681a      	ldr	r2, [r3, #0]
   81448:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8144c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   81450:	2a00      	cmp	r2, #0
   81452:	d0ed      	beq.n	81430 <vTaskSwitchContext+0x28>
   81454:	4b0b      	ldr	r3, [pc, #44]	; (81484 <vTaskSwitchContext+0x7c>)
   81456:	681b      	ldr	r3, [r3, #0]
   81458:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8145c:	4a0a      	ldr	r2, [pc, #40]	; (81488 <vTaskSwitchContext+0x80>)
   8145e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81462:	685a      	ldr	r2, [r3, #4]
   81464:	6852      	ldr	r2, [r2, #4]
   81466:	605a      	str	r2, [r3, #4]
   81468:	f103 0108 	add.w	r1, r3, #8
   8146c:	428a      	cmp	r2, r1
   8146e:	bf04      	itt	eq
   81470:	6852      	ldreq	r2, [r2, #4]
   81472:	605a      	streq	r2, [r3, #4]
   81474:	685b      	ldr	r3, [r3, #4]
   81476:	68da      	ldr	r2, [r3, #12]
   81478:	4b06      	ldr	r3, [pc, #24]	; (81494 <vTaskSwitchContext+0x8c>)
   8147a:	601a      	str	r2, [r3, #0]
   8147c:	bd08      	pop	{r3, pc}
   8147e:	bf00      	nop
   81480:	200708d0 	.word	0x200708d0
   81484:	20070868 	.word	0x20070868
   81488:	2007086c 	.word	0x2007086c
   8148c:	200708e4 	.word	0x200708e4
   81490:	00081269 	.word	0x00081269
   81494:	200708d4 	.word	0x200708d4

00081498 <pwm_channel_enable>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
<<<<<<< HEAD
   8134c:	2301      	movs	r3, #1
   8134e:	fa03 f101 	lsl.w	r1, r3, r1
   81352:	6041      	str	r1, [r0, #4]
   81354:	4770      	bx	lr
   81356:	bf00      	nop

00081358 <sysclk_init>:
=======
   81498:	2301      	movs	r3, #1
   8149a:	fa03 f101 	lsl.w	r1, r3, r1
   8149e:	6041      	str	r1, [r0, #4]
   814a0:	4770      	bx	lr
   814a2:	bf00      	nop

000814a4 <sysclk_init>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
<<<<<<< HEAD
   81358:	b510      	push	{r4, lr}
=======
   814a4:	b510      	push	{r4, lr}
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
<<<<<<< HEAD
   8135a:	480e      	ldr	r0, [pc, #56]	; (81394 <sysclk_init+0x3c>)
   8135c:	4b0e      	ldr	r3, [pc, #56]	; (81398 <sysclk_init+0x40>)
   8135e:	4798      	blx	r3
=======
   814a6:	480e      	ldr	r0, [pc, #56]	; (814e0 <sysclk_init+0x3c>)
   814a8:	4b0e      	ldr	r3, [pc, #56]	; (814e4 <sysclk_init+0x40>)
   814aa:	4798      	blx	r3
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
<<<<<<< HEAD
   81360:	2000      	movs	r0, #0
   81362:	213e      	movs	r1, #62	; 0x3e
   81364:	4b0d      	ldr	r3, [pc, #52]	; (8139c <sysclk_init+0x44>)
   81366:	4798      	blx	r3
=======
   814ac:	2000      	movs	r0, #0
   814ae:	213e      	movs	r1, #62	; 0x3e
   814b0:	4b0d      	ldr	r3, [pc, #52]	; (814e8 <sysclk_init+0x44>)
   814b2:	4798      	blx	r3
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
<<<<<<< HEAD
   81368:	4c0d      	ldr	r4, [pc, #52]	; (813a0 <sysclk_init+0x48>)
   8136a:	47a0      	blx	r4
=======
   814b4:	4c0d      	ldr	r4, [pc, #52]	; (814ec <sysclk_init+0x48>)
   814b6:	47a0      	blx	r4
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
<<<<<<< HEAD
   8136c:	2800      	cmp	r0, #0
   8136e:	d0fc      	beq.n	8136a <sysclk_init+0x12>
=======
   814b8:	2800      	cmp	r0, #0
   814ba:	d0fc      	beq.n	814b6 <sysclk_init+0x12>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
<<<<<<< HEAD
   81370:	4b0c      	ldr	r3, [pc, #48]	; (813a4 <sysclk_init+0x4c>)
   81372:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81374:	4a0c      	ldr	r2, [pc, #48]	; (813a8 <sysclk_init+0x50>)
   81376:	4b0d      	ldr	r3, [pc, #52]	; (813ac <sysclk_init+0x54>)
   81378:	629a      	str	r2, [r3, #40]	; 0x28
=======
   814bc:	4b0c      	ldr	r3, [pc, #48]	; (814f0 <sysclk_init+0x4c>)
   814be:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   814c0:	4a0c      	ldr	r2, [pc, #48]	; (814f4 <sysclk_init+0x50>)
   814c2:	4b0d      	ldr	r3, [pc, #52]	; (814f8 <sysclk_init+0x54>)
   814c4:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
<<<<<<< HEAD
   8137a:	4c0d      	ldr	r4, [pc, #52]	; (813b0 <sysclk_init+0x58>)
   8137c:	47a0      	blx	r4
=======
   814c6:	4c0d      	ldr	r4, [pc, #52]	; (814fc <sysclk_init+0x58>)
   814c8:	47a0      	blx	r4
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
<<<<<<< HEAD
   8137e:	2800      	cmp	r0, #0
   81380:	d0fc      	beq.n	8137c <sysclk_init+0x24>
=======
   814ca:	2800      	cmp	r0, #0
   814cc:	d0fc      	beq.n	814c8 <sysclk_init+0x24>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
<<<<<<< HEAD
   81382:	2010      	movs	r0, #16
   81384:	4b0b      	ldr	r3, [pc, #44]	; (813b4 <sysclk_init+0x5c>)
   81386:	4798      	blx	r3
=======
   814ce:	2010      	movs	r0, #16
   814d0:	4b0b      	ldr	r3, [pc, #44]	; (81500 <sysclk_init+0x5c>)
   814d2:	4798      	blx	r3
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
<<<<<<< HEAD
   81388:	4b0b      	ldr	r3, [pc, #44]	; (813b8 <sysclk_init+0x60>)
   8138a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8138c:	4801      	ldr	r0, [pc, #4]	; (81394 <sysclk_init+0x3c>)
   8138e:	4b02      	ldr	r3, [pc, #8]	; (81398 <sysclk_init+0x40>)
   81390:	4798      	blx	r3
   81392:	bd10      	pop	{r4, pc}
   81394:	0501bd00 	.word	0x0501bd00
   81398:	00081a0d 	.word	0x00081a0d
   8139c:	00081761 	.word	0x00081761
   813a0:	000817b5 	.word	0x000817b5
   813a4:	000817c5 	.word	0x000817c5
   813a8:	200d3f01 	.word	0x200d3f01
   813ac:	400e0600 	.word	0x400e0600
   813b0:	000817d5 	.word	0x000817d5
   813b4:	000816fd 	.word	0x000816fd
   813b8:	000818f1 	.word	0x000818f1

000813bc <board_init>:
=======
   814d4:	4b0b      	ldr	r3, [pc, #44]	; (81504 <sysclk_init+0x60>)
   814d6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   814d8:	4801      	ldr	r0, [pc, #4]	; (814e0 <sysclk_init+0x3c>)
   814da:	4b02      	ldr	r3, [pc, #8]	; (814e4 <sysclk_init+0x40>)
   814dc:	4798      	blx	r3
   814de:	bd10      	pop	{r4, pc}
   814e0:	0501bd00 	.word	0x0501bd00
   814e4:	00081b59 	.word	0x00081b59
   814e8:	000818ad 	.word	0x000818ad
   814ec:	00081901 	.word	0x00081901
   814f0:	00081911 	.word	0x00081911
   814f4:	200d3f01 	.word	0x200d3f01
   814f8:	400e0600 	.word	0x400e0600
   814fc:	00081921 	.word	0x00081921
   81500:	00081849 	.word	0x00081849
   81504:	00081a3d 	.word	0x00081a3d

00081508 <board_init>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
<<<<<<< HEAD
   813bc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   813be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   813c2:	4b17      	ldr	r3, [pc, #92]	; (81420 <board_init+0x64>)
   813c4:	605a      	str	r2, [r3, #4]
   813c6:	200b      	movs	r0, #11
   813c8:	4c16      	ldr	r4, [pc, #88]	; (81424 <board_init+0x68>)
   813ca:	47a0      	blx	r4
   813cc:	200c      	movs	r0, #12
   813ce:	47a0      	blx	r4
   813d0:	200d      	movs	r0, #13
   813d2:	47a0      	blx	r4
   813d4:	200e      	movs	r0, #14
   813d6:	47a0      	blx	r4
=======
   81508:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8150a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8150e:	4b17      	ldr	r3, [pc, #92]	; (8156c <board_init+0x64>)
   81510:	605a      	str	r2, [r3, #4]
   81512:	200b      	movs	r0, #11
   81514:	4c16      	ldr	r4, [pc, #88]	; (81570 <board_init+0x68>)
   81516:	47a0      	blx	r4
   81518:	200c      	movs	r0, #12
   8151a:	47a0      	blx	r4
   8151c:	200d      	movs	r0, #13
   8151e:	47a0      	blx	r4
   81520:	200e      	movs	r0, #14
   81522:	47a0      	blx	r4
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
<<<<<<< HEAD
   813d8:	203b      	movs	r0, #59	; 0x3b
   813da:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   813de:	4c12      	ldr	r4, [pc, #72]	; (81428 <board_init+0x6c>)
   813e0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   813e2:	2055      	movs	r0, #85	; 0x55
   813e4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   813e8:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   813ea:	2056      	movs	r0, #86	; 0x56
   813ec:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   813f0:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   813f2:	2068      	movs	r0, #104	; 0x68
   813f4:	490d      	ldr	r1, [pc, #52]	; (8142c <board_init+0x70>)
   813f6:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   813f8:	205c      	movs	r0, #92	; 0x5c
   813fa:	490d      	ldr	r1, [pc, #52]	; (81430 <board_init+0x74>)
   813fc:	47a0      	blx	r4
=======
   81524:	203b      	movs	r0, #59	; 0x3b
   81526:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8152a:	4c12      	ldr	r4, [pc, #72]	; (81574 <board_init+0x6c>)
   8152c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8152e:	2055      	movs	r0, #85	; 0x55
   81530:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81534:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81536:	2056      	movs	r0, #86	; 0x56
   81538:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8153c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8153e:	2068      	movs	r0, #104	; 0x68
   81540:	490d      	ldr	r1, [pc, #52]	; (81578 <board_init+0x70>)
   81542:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81544:	205c      	movs	r0, #92	; 0x5c
   81546:	490d      	ldr	r1, [pc, #52]	; (8157c <board_init+0x74>)
   81548:	47a0      	blx	r4
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
<<<<<<< HEAD
   813fe:	480d      	ldr	r0, [pc, #52]	; (81434 <board_init+0x78>)
   81400:	f44f 7140 	mov.w	r1, #768	; 0x300
   81404:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81408:	4b0b      	ldr	r3, [pc, #44]	; (81438 <board_init+0x7c>)
   8140a:	4798      	blx	r3
=======
   8154a:	480d      	ldr	r0, [pc, #52]	; (81580 <board_init+0x78>)
   8154c:	f44f 7140 	mov.w	r1, #768	; 0x300
   81550:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81554:	4b0b      	ldr	r3, [pc, #44]	; (81584 <board_init+0x7c>)
   81556:	4798      	blx	r3
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
<<<<<<< HEAD
   8140c:	202b      	movs	r0, #43	; 0x2b
   8140e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81412:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81414:	202a      	movs	r0, #42	; 0x2a
   81416:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8141a:	47a0      	blx	r4
   8141c:	bd10      	pop	{r4, pc}
   8141e:	bf00      	nop
   81420:	400e1a50 	.word	0x400e1a50
   81424:	000817e5 	.word	0x000817e5
   81428:	000814e1 	.word	0x000814e1
   8142c:	28000079 	.word	0x28000079
   81430:	28000001 	.word	0x28000001
   81434:	400e0e00 	.word	0x400e0e00
   81438:	000815b5 	.word	0x000815b5

0008143c <pio_set_peripheral>:
=======
   81558:	202b      	movs	r0, #43	; 0x2b
   8155a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8155e:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81560:	202a      	movs	r0, #42	; 0x2a
   81562:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81566:	47a0      	blx	r4
   81568:	bd10      	pop	{r4, pc}
   8156a:	bf00      	nop
   8156c:	400e1a50 	.word	0x400e1a50
   81570:	00081931 	.word	0x00081931
   81574:	0008162d 	.word	0x0008162d
   81578:	28000079 	.word	0x28000079
   8157c:	28000001 	.word	0x28000001
   81580:	400e0e00 	.word	0x400e0e00
   81584:	00081701 	.word	0x00081701

00081588 <pio_set_peripheral>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
<<<<<<< HEAD
   8143c:	6442      	str	r2, [r0, #68]	; 0x44
=======
   81588:	6442      	str	r2, [r0, #68]	; 0x44
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
<<<<<<< HEAD
   8143e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81442:	d016      	beq.n	81472 <pio_set_peripheral+0x36>
   81444:	d804      	bhi.n	81450 <pio_set_peripheral+0x14>
   81446:	b1c1      	cbz	r1, 8147a <pio_set_peripheral+0x3e>
   81448:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8144c:	d00a      	beq.n	81464 <pio_set_peripheral+0x28>
   8144e:	e013      	b.n	81478 <pio_set_peripheral+0x3c>
   81450:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81454:	d011      	beq.n	8147a <pio_set_peripheral+0x3e>
   81456:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8145a:	d00e      	beq.n	8147a <pio_set_peripheral+0x3e>
   8145c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81460:	d10a      	bne.n	81478 <pio_set_peripheral+0x3c>
   81462:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81464:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81466:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81468:	400b      	ands	r3, r1
   8146a:	ea23 0302 	bic.w	r3, r3, r2
   8146e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81470:	e002      	b.n	81478 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   81472:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81474:	4313      	orrs	r3, r2
   81476:	6703      	str	r3, [r0, #112]	; 0x70
=======
   8158a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8158e:	d016      	beq.n	815be <pio_set_peripheral+0x36>
   81590:	d804      	bhi.n	8159c <pio_set_peripheral+0x14>
   81592:	b1c1      	cbz	r1, 815c6 <pio_set_peripheral+0x3e>
   81594:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81598:	d00a      	beq.n	815b0 <pio_set_peripheral+0x28>
   8159a:	e013      	b.n	815c4 <pio_set_peripheral+0x3c>
   8159c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   815a0:	d011      	beq.n	815c6 <pio_set_peripheral+0x3e>
   815a2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   815a6:	d00e      	beq.n	815c6 <pio_set_peripheral+0x3e>
   815a8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   815ac:	d10a      	bne.n	815c4 <pio_set_peripheral+0x3c>
   815ae:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   815b0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   815b2:	6f01      	ldr	r1, [r0, #112]	; 0x70
   815b4:	400b      	ands	r3, r1
   815b6:	ea23 0302 	bic.w	r3, r3, r2
   815ba:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   815bc:	e002      	b.n	815c4 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   815be:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   815c0:	4313      	orrs	r3, r2
   815c2:	6703      	str	r3, [r0, #112]	; 0x70
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
<<<<<<< HEAD
   81478:	6042      	str	r2, [r0, #4]
   8147a:	4770      	bx	lr

0008147c <pio_set_input>:
=======
   815c4:	6042      	str	r2, [r0, #4]
   815c6:	4770      	bx	lr

000815c8 <pio_set_input>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
<<<<<<< HEAD
   8147c:	6441      	str	r1, [r0, #68]	; 0x44
=======
   815c8:	6441      	str	r1, [r0, #68]	; 0x44
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
<<<<<<< HEAD
   8147e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81482:	bf14      	ite	ne
   81484:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81486:	6601      	streq	r1, [r0, #96]	; 0x60
=======
   815ca:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   815ce:	bf14      	ite	ne
   815d0:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   815d2:	6601      	streq	r1, [r0, #96]	; 0x60
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
<<<<<<< HEAD
   81488:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8148c:	bf14      	ite	ne
   8148e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   81490:	6241      	streq	r1, [r0, #36]	; 0x24
=======
   815d4:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   815d8:	bf14      	ite	ne
   815da:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   815dc:	6241      	streq	r1, [r0, #36]	; 0x24
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
<<<<<<< HEAD
   81492:	f012 0f02 	tst.w	r2, #2
   81496:	d002      	beq.n	8149e <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   81498:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8149c:	e004      	b.n	814a8 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8149e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   814a2:	bf18      	it	ne
   814a4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
=======
   815de:	f012 0f02 	tst.w	r2, #2
   815e2:	d002      	beq.n	815ea <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   815e4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   815e8:	e004      	b.n	815f4 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   815ea:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   815ee:	bf18      	it	ne
   815f0:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
<<<<<<< HEAD
   814a8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   814aa:	6001      	str	r1, [r0, #0]
   814ac:	4770      	bx	lr
   814ae:	bf00      	nop

000814b0 <pio_set_output>:
=======
   815f4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   815f6:	6001      	str	r1, [r0, #0]
   815f8:	4770      	bx	lr
   815fa:	bf00      	nop

000815fc <pio_set_output>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
<<<<<<< HEAD
   814b0:	b410      	push	{r4}
=======
   815fc:	b410      	push	{r4}
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
<<<<<<< HEAD
   814b2:	6441      	str	r1, [r0, #68]	; 0x44
=======
   815fe:	6441      	str	r1, [r0, #68]	; 0x44
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
<<<<<<< HEAD
   814b4:	9c01      	ldr	r4, [sp, #4]
   814b6:	b10c      	cbz	r4, 814bc <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   814b8:	6641      	str	r1, [r0, #100]	; 0x64
   814ba:	e000      	b.n	814be <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   814bc:	6601      	str	r1, [r0, #96]	; 0x60
=======
   81600:	9c01      	ldr	r4, [sp, #4]
   81602:	b10c      	cbz	r4, 81608 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   81604:	6641      	str	r1, [r0, #100]	; 0x64
   81606:	e000      	b.n	8160a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81608:	6601      	str	r1, [r0, #96]	; 0x60
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
<<<<<<< HEAD
   814be:	b10b      	cbz	r3, 814c4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   814c0:	6501      	str	r1, [r0, #80]	; 0x50
   814c2:	e000      	b.n	814c6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   814c4:	6541      	str	r1, [r0, #84]	; 0x54
=======
   8160a:	b10b      	cbz	r3, 81610 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   8160c:	6501      	str	r1, [r0, #80]	; 0x50
   8160e:	e000      	b.n	81612 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   81610:	6541      	str	r1, [r0, #84]	; 0x54
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	}

	/* Set default value */
	if (ul_default_level) {
<<<<<<< HEAD
   814c6:	b10a      	cbz	r2, 814cc <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   814c8:	6301      	str	r1, [r0, #48]	; 0x30
   814ca:	e000      	b.n	814ce <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   814cc:	6341      	str	r1, [r0, #52]	; 0x34
=======
   81612:	b10a      	cbz	r2, 81618 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   81614:	6301      	str	r1, [r0, #48]	; 0x30
   81616:	e000      	b.n	8161a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81618:	6341      	str	r1, [r0, #52]	; 0x34
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
<<<<<<< HEAD
   814ce:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   814d0:	6001      	str	r1, [r0, #0]
}
   814d2:	f85d 4b04 	ldr.w	r4, [sp], #4
   814d6:	4770      	bx	lr

000814d8 <pio_get_interrupt_status>:
=======
   8161a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8161c:	6001      	str	r1, [r0, #0]
}
   8161e:	f85d 4b04 	ldr.w	r4, [sp], #4
   81622:	4770      	bx	lr

00081624 <pio_get_interrupt_status>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
<<<<<<< HEAD
   814d8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   814da:	4770      	bx	lr

000814dc <pio_get_interrupt_mask>:
=======
   81624:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81626:	4770      	bx	lr

00081628 <pio_get_interrupt_mask>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
<<<<<<< HEAD
   814dc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   814de:	4770      	bx	lr

000814e0 <pio_configure_pin>:
=======
   81628:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8162a:	4770      	bx	lr

0008162c <pio_configure_pin>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
<<<<<<< HEAD
   814e0:	b570      	push	{r4, r5, r6, lr}
   814e2:	b082      	sub	sp, #8
   814e4:	460d      	mov	r5, r1
=======
   8162c:	b570      	push	{r4, r5, r6, lr}
   8162e:	b082      	sub	sp, #8
   81630:	460d      	mov	r5, r1
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
<<<<<<< HEAD
   814e6:	0944      	lsrs	r4, r0, #5
   814e8:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   814ec:	f204 7407 	addw	r4, r4, #1799	; 0x707
   814f0:	0266      	lsls	r6, r4, #9
=======
   81632:	0944      	lsrs	r4, r0, #5
   81634:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   81638:	f204 7407 	addw	r4, r4, #1799	; 0x707
   8163c:	0266      	lsls	r6, r4, #9
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
<<<<<<< HEAD
   814f2:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   814f6:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   814fa:	d030      	beq.n	8155e <pio_configure_pin+0x7e>
   814fc:	d806      	bhi.n	8150c <pio_configure_pin+0x2c>
   814fe:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   81502:	d00a      	beq.n	8151a <pio_configure_pin+0x3a>
   81504:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81508:	d018      	beq.n	8153c <pio_configure_pin+0x5c>
   8150a:	e049      	b.n	815a0 <pio_configure_pin+0xc0>
   8150c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81510:	d030      	beq.n	81574 <pio_configure_pin+0x94>
   81512:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   81516:	d02d      	beq.n	81574 <pio_configure_pin+0x94>
   81518:	e042      	b.n	815a0 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8151a:	f000 001f 	and.w	r0, r0, #31
   8151e:	2401      	movs	r4, #1
   81520:	4084      	lsls	r4, r0
   81522:	4630      	mov	r0, r6
   81524:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81528:	4622      	mov	r2, r4
   8152a:	4b1f      	ldr	r3, [pc, #124]	; (815a8 <pio_configure_pin+0xc8>)
   8152c:	4798      	blx	r3
=======
   8163e:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   81642:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81646:	d030      	beq.n	816aa <pio_configure_pin+0x7e>
   81648:	d806      	bhi.n	81658 <pio_configure_pin+0x2c>
   8164a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8164e:	d00a      	beq.n	81666 <pio_configure_pin+0x3a>
   81650:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81654:	d018      	beq.n	81688 <pio_configure_pin+0x5c>
   81656:	e049      	b.n	816ec <pio_configure_pin+0xc0>
   81658:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   8165c:	d030      	beq.n	816c0 <pio_configure_pin+0x94>
   8165e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   81662:	d02d      	beq.n	816c0 <pio_configure_pin+0x94>
   81664:	e042      	b.n	816ec <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81666:	f000 001f 	and.w	r0, r0, #31
   8166a:	2401      	movs	r4, #1
   8166c:	4084      	lsls	r4, r0
   8166e:	4630      	mov	r0, r6
   81670:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81674:	4622      	mov	r2, r4
   81676:	4b1f      	ldr	r3, [pc, #124]	; (816f4 <pio_configure_pin+0xc8>)
   81678:	4798      	blx	r3
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
<<<<<<< HEAD
   8152e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81532:	bf14      	ite	ne
   81534:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81536:	6634      	streq	r4, [r6, #96]	; 0x60
=======
   8167a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8167e:	bf14      	ite	ne
   81680:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81682:	6634      	streq	r4, [r6, #96]	; 0x60
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	default:
		return 0;
	}

	return 1;
<<<<<<< HEAD
   81538:	2001      	movs	r0, #1
   8153a:	e032      	b.n	815a2 <pio_configure_pin+0xc2>
=======
   81684:	2001      	movs	r0, #1
   81686:	e032      	b.n	816ee <pio_configure_pin+0xc2>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
<<<<<<< HEAD
   8153c:	f000 001f 	and.w	r0, r0, #31
   81540:	2401      	movs	r4, #1
   81542:	4084      	lsls	r4, r0
   81544:	4630      	mov	r0, r6
   81546:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8154a:	4622      	mov	r2, r4
   8154c:	4b16      	ldr	r3, [pc, #88]	; (815a8 <pio_configure_pin+0xc8>)
   8154e:	4798      	blx	r3
=======
   81688:	f000 001f 	and.w	r0, r0, #31
   8168c:	2401      	movs	r4, #1
   8168e:	4084      	lsls	r4, r0
   81690:	4630      	mov	r0, r6
   81692:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81696:	4622      	mov	r2, r4
   81698:	4b16      	ldr	r3, [pc, #88]	; (816f4 <pio_configure_pin+0xc8>)
   8169a:	4798      	blx	r3
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
<<<<<<< HEAD
   81550:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81554:	bf14      	ite	ne
   81556:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81558:	6634      	streq	r4, [r6, #96]	; 0x60
=======
   8169c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   816a0:	bf14      	ite	ne
   816a2:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   816a4:	6634      	streq	r4, [r6, #96]	; 0x60
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	default:
		return 0;
	}

	return 1;
<<<<<<< HEAD
   8155a:	2001      	movs	r0, #1
   8155c:	e021      	b.n	815a2 <pio_configure_pin+0xc2>
=======
   816a6:	2001      	movs	r0, #1
   816a8:	e021      	b.n	816ee <pio_configure_pin+0xc2>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
<<<<<<< HEAD
   8155e:	f000 011f 	and.w	r1, r0, #31
   81562:	2401      	movs	r4, #1
   81564:	4630      	mov	r0, r6
   81566:	fa04 f101 	lsl.w	r1, r4, r1
   8156a:	462a      	mov	r2, r5
   8156c:	4b0f      	ldr	r3, [pc, #60]	; (815ac <pio_configure_pin+0xcc>)
   8156e:	4798      	blx	r3
=======
   816aa:	f000 011f 	and.w	r1, r0, #31
   816ae:	2401      	movs	r4, #1
   816b0:	4630      	mov	r0, r6
   816b2:	fa04 f101 	lsl.w	r1, r4, r1
   816b6:	462a      	mov	r2, r5
   816b8:	4b0f      	ldr	r3, [pc, #60]	; (816f8 <pio_configure_pin+0xcc>)
   816ba:	4798      	blx	r3
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	default:
		return 0;
	}

	return 1;
<<<<<<< HEAD
   81570:	4620      	mov	r0, r4
=======
   816bc:	4620      	mov	r0, r4
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
<<<<<<< HEAD
   81572:	e016      	b.n	815a2 <pio_configure_pin+0xc2>
=======
   816be:	e016      	b.n	816ee <pio_configure_pin+0xc2>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
<<<<<<< HEAD
   81574:	f000 011f 	and.w	r1, r0, #31
   81578:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8157a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
=======
   816c0:	f000 011f 	and.w	r1, r0, #31
   816c4:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   816c6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
<<<<<<< HEAD
   8157e:	ea05 0304 	and.w	r3, r5, r4
   81582:	9300      	str	r3, [sp, #0]
   81584:	4630      	mov	r0, r6
   81586:	fa04 f101 	lsl.w	r1, r4, r1
   8158a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8158e:	bf14      	ite	ne
   81590:	2200      	movne	r2, #0
   81592:	2201      	moveq	r2, #1
   81594:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81598:	4d05      	ldr	r5, [pc, #20]	; (815b0 <pio_configure_pin+0xd0>)
   8159a:	47a8      	blx	r5
=======
   816ca:	ea05 0304 	and.w	r3, r5, r4
   816ce:	9300      	str	r3, [sp, #0]
   816d0:	4630      	mov	r0, r6
   816d2:	fa04 f101 	lsl.w	r1, r4, r1
   816d6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   816da:	bf14      	ite	ne
   816dc:	2200      	movne	r2, #0
   816de:	2201      	moveq	r2, #1
   816e0:	f3c5 0380 	ubfx	r3, r5, #2, #1
   816e4:	4d05      	ldr	r5, [pc, #20]	; (816fc <pio_configure_pin+0xd0>)
   816e6:	47a8      	blx	r5
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	default:
		return 0;
	}

	return 1;
<<<<<<< HEAD
   8159c:	4620      	mov	r0, r4
=======
   816e8:	4620      	mov	r0, r4
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
<<<<<<< HEAD
   8159e:	e000      	b.n	815a2 <pio_configure_pin+0xc2>

	default:
		return 0;
   815a0:	2000      	movs	r0, #0
=======
   816ea:	e000      	b.n	816ee <pio_configure_pin+0xc2>

	default:
		return 0;
   816ec:	2000      	movs	r0, #0
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	}

	return 1;
}
<<<<<<< HEAD
   815a2:	b002      	add	sp, #8
   815a4:	bd70      	pop	{r4, r5, r6, pc}
   815a6:	bf00      	nop
   815a8:	0008143d 	.word	0x0008143d
   815ac:	0008147d 	.word	0x0008147d
   815b0:	000814b1 	.word	0x000814b1

000815b4 <pio_configure_pin_group>:
=======
   816ee:	b002      	add	sp, #8
   816f0:	bd70      	pop	{r4, r5, r6, pc}
   816f2:	bf00      	nop
   816f4:	00081589 	.word	0x00081589
   816f8:	000815c9 	.word	0x000815c9
   816fc:	000815fd 	.word	0x000815fd

00081700 <pio_configure_pin_group>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
<<<<<<< HEAD
   815b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   815b6:	b083      	sub	sp, #12
   815b8:	4607      	mov	r7, r0
   815ba:	460e      	mov	r6, r1
   815bc:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   815be:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   815c2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   815c6:	d026      	beq.n	81616 <pio_configure_pin_group+0x62>
   815c8:	d806      	bhi.n	815d8 <pio_configure_pin_group+0x24>
   815ca:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   815ce:	d00a      	beq.n	815e6 <pio_configure_pin_group+0x32>
   815d0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   815d4:	d013      	beq.n	815fe <pio_configure_pin_group+0x4a>
   815d6:	e034      	b.n	81642 <pio_configure_pin_group+0x8e>
   815d8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   815dc:	d01f      	beq.n	8161e <pio_configure_pin_group+0x6a>
   815de:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   815e2:	d01c      	beq.n	8161e <pio_configure_pin_group+0x6a>
   815e4:	e02d      	b.n	81642 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   815e6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   815ea:	4632      	mov	r2, r6
   815ec:	4b16      	ldr	r3, [pc, #88]	; (81648 <pio_configure_pin_group+0x94>)
   815ee:	4798      	blx	r3
=======
   81700:	b5f0      	push	{r4, r5, r6, r7, lr}
   81702:	b083      	sub	sp, #12
   81704:	4607      	mov	r7, r0
   81706:	460e      	mov	r6, r1
   81708:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8170a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8170e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81712:	d026      	beq.n	81762 <pio_configure_pin_group+0x62>
   81714:	d806      	bhi.n	81724 <pio_configure_pin_group+0x24>
   81716:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8171a:	d00a      	beq.n	81732 <pio_configure_pin_group+0x32>
   8171c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81720:	d013      	beq.n	8174a <pio_configure_pin_group+0x4a>
   81722:	e034      	b.n	8178e <pio_configure_pin_group+0x8e>
   81724:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81728:	d01f      	beq.n	8176a <pio_configure_pin_group+0x6a>
   8172a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8172e:	d01c      	beq.n	8176a <pio_configure_pin_group+0x6a>
   81730:	e02d      	b.n	8178e <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81732:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81736:	4632      	mov	r2, r6
   81738:	4b16      	ldr	r3, [pc, #88]	; (81794 <pio_configure_pin_group+0x94>)
   8173a:	4798      	blx	r3
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
<<<<<<< HEAD
   815f0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   815f4:	bf14      	ite	ne
   815f6:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   815f8:	663e      	streq	r6, [r7, #96]	; 0x60
=======
   8173c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81740:	bf14      	ite	ne
   81742:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81744:	663e      	streq	r6, [r7, #96]	; 0x60
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	default:
		return 0;
	}

	return 1;
<<<<<<< HEAD
   815fa:	2001      	movs	r0, #1
   815fc:	e022      	b.n	81644 <pio_configure_pin_group+0x90>
=======
   81746:	2001      	movs	r0, #1
   81748:	e022      	b.n	81790 <pio_configure_pin_group+0x90>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
<<<<<<< HEAD
   815fe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81602:	4632      	mov	r2, r6
   81604:	4b10      	ldr	r3, [pc, #64]	; (81648 <pio_configure_pin_group+0x94>)
   81606:	4798      	blx	r3
=======
   8174a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8174e:	4632      	mov	r2, r6
   81750:	4b10      	ldr	r3, [pc, #64]	; (81794 <pio_configure_pin_group+0x94>)
   81752:	4798      	blx	r3
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
<<<<<<< HEAD
   81608:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8160c:	bf14      	ite	ne
   8160e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81610:	663e      	streq	r6, [r7, #96]	; 0x60
=======
   81754:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81758:	bf14      	ite	ne
   8175a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8175c:	663e      	streq	r6, [r7, #96]	; 0x60
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	default:
		return 0;
	}

	return 1;
<<<<<<< HEAD
   81612:	2001      	movs	r0, #1
   81614:	e016      	b.n	81644 <pio_configure_pin_group+0x90>
=======
   8175e:	2001      	movs	r0, #1
   81760:	e016      	b.n	81790 <pio_configure_pin_group+0x90>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
<<<<<<< HEAD
   81616:	4b0d      	ldr	r3, [pc, #52]	; (8164c <pio_configure_pin_group+0x98>)
   81618:	4798      	blx	r3
=======
   81762:	4b0d      	ldr	r3, [pc, #52]	; (81798 <pio_configure_pin_group+0x98>)
   81764:	4798      	blx	r3
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	default:
		return 0;
	}

	return 1;
<<<<<<< HEAD
   8161a:	2001      	movs	r0, #1
=======
   81766:	2001      	movs	r0, #1
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
<<<<<<< HEAD
   8161c:	e012      	b.n	81644 <pio_configure_pin_group+0x90>
=======
   81768:	e012      	b.n	81790 <pio_configure_pin_group+0x90>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
<<<<<<< HEAD
   8161e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
=======
   8176a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
<<<<<<< HEAD
   81622:	f005 0301 	and.w	r3, r5, #1
   81626:	9300      	str	r3, [sp, #0]
   81628:	4638      	mov	r0, r7
   8162a:	4631      	mov	r1, r6
   8162c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81630:	bf14      	ite	ne
   81632:	2200      	movne	r2, #0
   81634:	2201      	moveq	r2, #1
   81636:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8163a:	4c05      	ldr	r4, [pc, #20]	; (81650 <pio_configure_pin_group+0x9c>)
   8163c:	47a0      	blx	r4
=======
   8176e:	f005 0301 	and.w	r3, r5, #1
   81772:	9300      	str	r3, [sp, #0]
   81774:	4638      	mov	r0, r7
   81776:	4631      	mov	r1, r6
   81778:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8177c:	bf14      	ite	ne
   8177e:	2200      	movne	r2, #0
   81780:	2201      	moveq	r2, #1
   81782:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81786:	4c05      	ldr	r4, [pc, #20]	; (8179c <pio_configure_pin_group+0x9c>)
   81788:	47a0      	blx	r4
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	default:
		return 0;
	}

	return 1;
<<<<<<< HEAD
   8163e:	2001      	movs	r0, #1
=======
   8178a:	2001      	movs	r0, #1
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
<<<<<<< HEAD
   81640:	e000      	b.n	81644 <pio_configure_pin_group+0x90>

	default:
		return 0;
   81642:	2000      	movs	r0, #0
=======
   8178c:	e000      	b.n	81790 <pio_configure_pin_group+0x90>

	default:
		return 0;
   8178e:	2000      	movs	r0, #0
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	}

	return 1;
}
<<<<<<< HEAD
   81644:	b003      	add	sp, #12
   81646:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81648:	0008143d 	.word	0x0008143d
   8164c:	0008147d 	.word	0x0008147d
   81650:	000814b1 	.word	0x000814b1

00081654 <pio_handler_process>:
=======
   81790:	b003      	add	sp, #12
   81792:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81794:	00081589 	.word	0x00081589
   81798:	000815c9 	.word	0x000815c9
   8179c:	000815fd 	.word	0x000815fd

000817a0 <pio_handler_process>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
<<<<<<< HEAD
   81654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81658:	4604      	mov	r4, r0
   8165a:	460e      	mov	r6, r1
=======
   817a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   817a4:	4604      	mov	r4, r0
   817a6:	460e      	mov	r6, r1
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
<<<<<<< HEAD
   8165c:	4b10      	ldr	r3, [pc, #64]	; (816a0 <pio_handler_process+0x4c>)
   8165e:	4798      	blx	r3
   81660:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81662:	4620      	mov	r0, r4
   81664:	4b0f      	ldr	r3, [pc, #60]	; (816a4 <pio_handler_process+0x50>)
   81666:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81668:	4005      	ands	r5, r0
   8166a:	d017      	beq.n	8169c <pio_handler_process+0x48>
   8166c:	4f0e      	ldr	r7, [pc, #56]	; (816a8 <pio_handler_process+0x54>)
   8166e:	f107 040c 	add.w	r4, r7, #12
   81672:	376c      	adds	r7, #108	; 0x6c
=======
   817a8:	4b10      	ldr	r3, [pc, #64]	; (817ec <pio_handler_process+0x4c>)
   817aa:	4798      	blx	r3
   817ac:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   817ae:	4620      	mov	r0, r4
   817b0:	4b0f      	ldr	r3, [pc, #60]	; (817f0 <pio_handler_process+0x50>)
   817b2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   817b4:	4005      	ands	r5, r0
   817b6:	d017      	beq.n	817e8 <pio_handler_process+0x48>
   817b8:	4f0e      	ldr	r7, [pc, #56]	; (817f4 <pio_handler_process+0x54>)
   817ba:	f107 040c 	add.w	r4, r7, #12
   817be:	376c      	adds	r7, #108	; 0x6c
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
<<<<<<< HEAD
   81674:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   81678:	42b3      	cmp	r3, r6
   8167a:	d10a      	bne.n	81692 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8167c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   81680:	4229      	tst	r1, r5
   81682:	d006      	beq.n	81692 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81684:	6823      	ldr	r3, [r4, #0]
   81686:	4630      	mov	r0, r6
   81688:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8168a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8168e:	ea25 0503 	bic.w	r5, r5, r3
=======
   817c0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   817c4:	42b3      	cmp	r3, r6
   817c6:	d10a      	bne.n	817de <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   817c8:	f854 1c08 	ldr.w	r1, [r4, #-8]
   817cc:	4229      	tst	r1, r5
   817ce:	d006      	beq.n	817de <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   817d0:	6823      	ldr	r3, [r4, #0]
   817d2:	4630      	mov	r0, r6
   817d4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   817d6:	f854 3c08 	ldr.w	r3, [r4, #-8]
   817da:	ea25 0503 	bic.w	r5, r5, r3
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
<<<<<<< HEAD
   81692:	42bc      	cmp	r4, r7
   81694:	d002      	beq.n	8169c <pio_handler_process+0x48>
   81696:	3410      	adds	r4, #16
=======
   817de:	42bc      	cmp	r4, r7
   817e0:	d002      	beq.n	817e8 <pio_handler_process+0x48>
   817e2:	3410      	adds	r4, #16
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
<<<<<<< HEAD
   81698:	2d00      	cmp	r5, #0
   8169a:	d1eb      	bne.n	81674 <pio_handler_process+0x20>
   8169c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   816a0:	000814d9 	.word	0x000814d9
   816a4:	000814dd 	.word	0x000814dd
   816a8:	200708e8 	.word	0x200708e8

000816ac <PIOA_Handler>:
=======
   817e4:	2d00      	cmp	r5, #0
   817e6:	d1eb      	bne.n	817c0 <pio_handler_process+0x20>
   817e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   817ec:	00081625 	.word	0x00081625
   817f0:	00081629 	.word	0x00081629
   817f4:	200708e8 	.word	0x200708e8

000817f8 <PIOA_Handler>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
<<<<<<< HEAD
   816ac:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   816ae:	4802      	ldr	r0, [pc, #8]	; (816b8 <PIOA_Handler+0xc>)
   816b0:	210b      	movs	r1, #11
   816b2:	4b02      	ldr	r3, [pc, #8]	; (816bc <PIOA_Handler+0x10>)
   816b4:	4798      	blx	r3
   816b6:	bd08      	pop	{r3, pc}
   816b8:	400e0e00 	.word	0x400e0e00
   816bc:	00081655 	.word	0x00081655

000816c0 <PIOB_Handler>:
=======
   817f8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   817fa:	4802      	ldr	r0, [pc, #8]	; (81804 <PIOA_Handler+0xc>)
   817fc:	210b      	movs	r1, #11
   817fe:	4b02      	ldr	r3, [pc, #8]	; (81808 <PIOA_Handler+0x10>)
   81800:	4798      	blx	r3
   81802:	bd08      	pop	{r3, pc}
   81804:	400e0e00 	.word	0x400e0e00
   81808:	000817a1 	.word	0x000817a1

0008180c <PIOB_Handler>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
<<<<<<< HEAD
   816c0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   816c2:	4802      	ldr	r0, [pc, #8]	; (816cc <PIOB_Handler+0xc>)
   816c4:	210c      	movs	r1, #12
   816c6:	4b02      	ldr	r3, [pc, #8]	; (816d0 <PIOB_Handler+0x10>)
   816c8:	4798      	blx	r3
   816ca:	bd08      	pop	{r3, pc}
   816cc:	400e1000 	.word	0x400e1000
   816d0:	00081655 	.word	0x00081655

000816d4 <PIOC_Handler>:
=======
   8180c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8180e:	4802      	ldr	r0, [pc, #8]	; (81818 <PIOB_Handler+0xc>)
   81810:	210c      	movs	r1, #12
   81812:	4b02      	ldr	r3, [pc, #8]	; (8181c <PIOB_Handler+0x10>)
   81814:	4798      	blx	r3
   81816:	bd08      	pop	{r3, pc}
   81818:	400e1000 	.word	0x400e1000
   8181c:	000817a1 	.word	0x000817a1

00081820 <PIOC_Handler>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
<<<<<<< HEAD
   816d4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   816d6:	4802      	ldr	r0, [pc, #8]	; (816e0 <PIOC_Handler+0xc>)
   816d8:	210d      	movs	r1, #13
   816da:	4b02      	ldr	r3, [pc, #8]	; (816e4 <PIOC_Handler+0x10>)
   816dc:	4798      	blx	r3
   816de:	bd08      	pop	{r3, pc}
   816e0:	400e1200 	.word	0x400e1200
   816e4:	00081655 	.word	0x00081655

000816e8 <PIOD_Handler>:
=======
   81820:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81822:	4802      	ldr	r0, [pc, #8]	; (8182c <PIOC_Handler+0xc>)
   81824:	210d      	movs	r1, #13
   81826:	4b02      	ldr	r3, [pc, #8]	; (81830 <PIOC_Handler+0x10>)
   81828:	4798      	blx	r3
   8182a:	bd08      	pop	{r3, pc}
   8182c:	400e1200 	.word	0x400e1200
   81830:	000817a1 	.word	0x000817a1

00081834 <PIOD_Handler>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
<<<<<<< HEAD
   816e8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   816ea:	4802      	ldr	r0, [pc, #8]	; (816f4 <PIOD_Handler+0xc>)
   816ec:	210e      	movs	r1, #14
   816ee:	4b02      	ldr	r3, [pc, #8]	; (816f8 <PIOD_Handler+0x10>)
   816f0:	4798      	blx	r3
   816f2:	bd08      	pop	{r3, pc}
   816f4:	400e1400 	.word	0x400e1400
   816f8:	00081655 	.word	0x00081655

000816fc <pmc_switch_mck_to_pllack>:
=======
   81834:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81836:	4802      	ldr	r0, [pc, #8]	; (81840 <PIOD_Handler+0xc>)
   81838:	210e      	movs	r1, #14
   8183a:	4b02      	ldr	r3, [pc, #8]	; (81844 <PIOD_Handler+0x10>)
   8183c:	4798      	blx	r3
   8183e:	bd08      	pop	{r3, pc}
   81840:	400e1400 	.word	0x400e1400
   81844:	000817a1 	.word	0x000817a1

00081848 <pmc_switch_mck_to_pllack>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
<<<<<<< HEAD
   816fc:	4b17      	ldr	r3, [pc, #92]	; (8175c <pmc_switch_mck_to_pllack+0x60>)
   816fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81700:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   81704:	4310      	orrs	r0, r2
   81706:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81708:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8170a:	f013 0f08 	tst.w	r3, #8
   8170e:	d109      	bne.n	81724 <pmc_switch_mck_to_pllack+0x28>
   81710:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81714:	4911      	ldr	r1, [pc, #68]	; (8175c <pmc_switch_mck_to_pllack+0x60>)
   81716:	e001      	b.n	8171c <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81718:	3b01      	subs	r3, #1
   8171a:	d019      	beq.n	81750 <pmc_switch_mck_to_pllack+0x54>
=======
   81848:	4b17      	ldr	r3, [pc, #92]	; (818a8 <pmc_switch_mck_to_pllack+0x60>)
   8184a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8184c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   81850:	4310      	orrs	r0, r2
   81852:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81854:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81856:	f013 0f08 	tst.w	r3, #8
   8185a:	d109      	bne.n	81870 <pmc_switch_mck_to_pllack+0x28>
   8185c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81860:	4911      	ldr	r1, [pc, #68]	; (818a8 <pmc_switch_mck_to_pllack+0x60>)
   81862:	e001      	b.n	81868 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81864:	3b01      	subs	r3, #1
   81866:	d019      	beq.n	8189c <pmc_switch_mck_to_pllack+0x54>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
<<<<<<< HEAD
   8171c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8171e:	f012 0f08 	tst.w	r2, #8
   81722:	d0f9      	beq.n	81718 <pmc_switch_mck_to_pllack+0x1c>
=======
   81868:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8186a:	f012 0f08 	tst.w	r2, #8
   8186e:	d0f9      	beq.n	81864 <pmc_switch_mck_to_pllack+0x1c>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
<<<<<<< HEAD
   81724:	4b0d      	ldr	r3, [pc, #52]	; (8175c <pmc_switch_mck_to_pllack+0x60>)
   81726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81728:	f022 0203 	bic.w	r2, r2, #3
   8172c:	f042 0202 	orr.w	r2, r2, #2
   81730:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81732:	6e98      	ldr	r0, [r3, #104]	; 0x68
   81734:	f010 0008 	ands.w	r0, r0, #8
   81738:	d10c      	bne.n	81754 <pmc_switch_mck_to_pllack+0x58>
   8173a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8173e:	4907      	ldr	r1, [pc, #28]	; (8175c <pmc_switch_mck_to_pllack+0x60>)
   81740:	e001      	b.n	81746 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81742:	3b01      	subs	r3, #1
   81744:	d008      	beq.n	81758 <pmc_switch_mck_to_pllack+0x5c>
=======
   81870:	4b0d      	ldr	r3, [pc, #52]	; (818a8 <pmc_switch_mck_to_pllack+0x60>)
   81872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81874:	f022 0203 	bic.w	r2, r2, #3
   81878:	f042 0202 	orr.w	r2, r2, #2
   8187c:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8187e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   81880:	f010 0008 	ands.w	r0, r0, #8
   81884:	d10c      	bne.n	818a0 <pmc_switch_mck_to_pllack+0x58>
   81886:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8188a:	4907      	ldr	r1, [pc, #28]	; (818a8 <pmc_switch_mck_to_pllack+0x60>)
   8188c:	e001      	b.n	81892 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8188e:	3b01      	subs	r3, #1
   81890:	d008      	beq.n	818a4 <pmc_switch_mck_to_pllack+0x5c>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
<<<<<<< HEAD
   81746:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81748:	f012 0f08 	tst.w	r2, #8
   8174c:	d0f9      	beq.n	81742 <pmc_switch_mck_to_pllack+0x46>
   8174e:	4770      	bx	lr
=======
   81892:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81894:	f012 0f08 	tst.w	r2, #8
   81898:	d0f9      	beq.n	8188e <pmc_switch_mck_to_pllack+0x46>
   8189a:	4770      	bx	lr
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
<<<<<<< HEAD
   81750:	2001      	movs	r0, #1
   81752:	4770      	bx	lr
=======
   8189c:	2001      	movs	r0, #1
   8189e:	4770      	bx	lr
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
<<<<<<< HEAD
   81754:	2000      	movs	r0, #0
   81756:	4770      	bx	lr
=======
   818a0:	2000      	movs	r0, #0
   818a2:	4770      	bx	lr
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
<<<<<<< HEAD
   81758:	2001      	movs	r0, #1
=======
   818a4:	2001      	movs	r0, #1
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		}
	}

	return 0;
}
<<<<<<< HEAD
   8175a:	4770      	bx	lr
   8175c:	400e0600 	.word	0x400e0600

00081760 <pmc_switch_mainck_to_xtal>:
=======
   818a6:	4770      	bx	lr
   818a8:	400e0600 	.word	0x400e0600

000818ac <pmc_switch_mainck_to_xtal>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
<<<<<<< HEAD
   81760:	b138      	cbz	r0, 81772 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81762:	4911      	ldr	r1, [pc, #68]	; (817a8 <pmc_switch_mainck_to_xtal+0x48>)
   81764:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81766:	4a11      	ldr	r2, [pc, #68]	; (817ac <pmc_switch_mainck_to_xtal+0x4c>)
   81768:	401a      	ands	r2, r3
   8176a:	4b11      	ldr	r3, [pc, #68]	; (817b0 <pmc_switch_mainck_to_xtal+0x50>)
   8176c:	4313      	orrs	r3, r2
=======
   818ac:	b138      	cbz	r0, 818be <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   818ae:	4911      	ldr	r1, [pc, #68]	; (818f4 <pmc_switch_mainck_to_xtal+0x48>)
   818b0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   818b2:	4a11      	ldr	r2, [pc, #68]	; (818f8 <pmc_switch_mainck_to_xtal+0x4c>)
   818b4:	401a      	ands	r2, r3
   818b6:	4b11      	ldr	r3, [pc, #68]	; (818fc <pmc_switch_mainck_to_xtal+0x50>)
   818b8:	4313      	orrs	r3, r2
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
<<<<<<< HEAD
   8176e:	620b      	str	r3, [r1, #32]
   81770:	4770      	bx	lr
=======
   818ba:	620b      	str	r3, [r1, #32]
   818bc:	4770      	bx	lr
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
<<<<<<< HEAD
   81772:	4a0d      	ldr	r2, [pc, #52]	; (817a8 <pmc_switch_mainck_to_xtal+0x48>)
   81774:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81776:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8177a:	f023 0303 	bic.w	r3, r3, #3
   8177e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81782:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81786:	0209      	lsls	r1, r1, #8
   81788:	b289      	uxth	r1, r1
=======
   818be:	4a0d      	ldr	r2, [pc, #52]	; (818f4 <pmc_switch_mainck_to_xtal+0x48>)
   818c0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   818c2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   818c6:	f023 0303 	bic.w	r3, r3, #3
   818ca:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   818ce:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   818d2:	0209      	lsls	r1, r1, #8
   818d4:	b289      	uxth	r1, r1
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
<<<<<<< HEAD
   8178a:	430b      	orrs	r3, r1
=======
   818d6:	430b      	orrs	r3, r1
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
<<<<<<< HEAD
   8178c:	6213      	str	r3, [r2, #32]
=======
   818d8:	6213      	str	r3, [r2, #32]
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
<<<<<<< HEAD
   8178e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81790:	f013 0f01 	tst.w	r3, #1
   81794:	d0fb      	beq.n	8178e <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81796:	4a04      	ldr	r2, [pc, #16]	; (817a8 <pmc_switch_mainck_to_xtal+0x48>)
   81798:	6a13      	ldr	r3, [r2, #32]
   8179a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8179e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   817a2:	6213      	str	r3, [r2, #32]
   817a4:	4770      	bx	lr
   817a6:	bf00      	nop
   817a8:	400e0600 	.word	0x400e0600
   817ac:	fec8fffc 	.word	0xfec8fffc
   817b0:	01370002 	.word	0x01370002

000817b4 <pmc_osc_is_ready_mainck>:
=======
   818da:	6e93      	ldr	r3, [r2, #104]	; 0x68
   818dc:	f013 0f01 	tst.w	r3, #1
   818e0:	d0fb      	beq.n	818da <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   818e2:	4a04      	ldr	r2, [pc, #16]	; (818f4 <pmc_switch_mainck_to_xtal+0x48>)
   818e4:	6a13      	ldr	r3, [r2, #32]
   818e6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   818ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   818ee:	6213      	str	r3, [r2, #32]
   818f0:	4770      	bx	lr
   818f2:	bf00      	nop
   818f4:	400e0600 	.word	0x400e0600
   818f8:	fec8fffc 	.word	0xfec8fffc
   818fc:	01370002 	.word	0x01370002

00081900 <pmc_osc_is_ready_mainck>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
<<<<<<< HEAD
   817b4:	4b02      	ldr	r3, [pc, #8]	; (817c0 <pmc_osc_is_ready_mainck+0xc>)
   817b6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   817b8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   817bc:	4770      	bx	lr
   817be:	bf00      	nop
   817c0:	400e0600 	.word	0x400e0600

000817c4 <pmc_disable_pllack>:
=======
   81900:	4b02      	ldr	r3, [pc, #8]	; (8190c <pmc_osc_is_ready_mainck+0xc>)
   81902:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81904:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81908:	4770      	bx	lr
   8190a:	bf00      	nop
   8190c:	400e0600 	.word	0x400e0600

00081910 <pmc_disable_pllack>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
<<<<<<< HEAD
   817c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   817c8:	4b01      	ldr	r3, [pc, #4]	; (817d0 <pmc_disable_pllack+0xc>)
   817ca:	629a      	str	r2, [r3, #40]	; 0x28
   817cc:	4770      	bx	lr
   817ce:	bf00      	nop
   817d0:	400e0600 	.word	0x400e0600

000817d4 <pmc_is_locked_pllack>:
=======
   81910:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81914:	4b01      	ldr	r3, [pc, #4]	; (8191c <pmc_disable_pllack+0xc>)
   81916:	629a      	str	r2, [r3, #40]	; 0x28
   81918:	4770      	bx	lr
   8191a:	bf00      	nop
   8191c:	400e0600 	.word	0x400e0600

00081920 <pmc_is_locked_pllack>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
<<<<<<< HEAD
   817d4:	4b02      	ldr	r3, [pc, #8]	; (817e0 <pmc_is_locked_pllack+0xc>)
   817d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   817d8:	f000 0002 	and.w	r0, r0, #2
   817dc:	4770      	bx	lr
   817de:	bf00      	nop
   817e0:	400e0600 	.word	0x400e0600

000817e4 <pmc_enable_periph_clk>:
=======
   81920:	4b02      	ldr	r3, [pc, #8]	; (8192c <pmc_is_locked_pllack+0xc>)
   81922:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81924:	f000 0002 	and.w	r0, r0, #2
   81928:	4770      	bx	lr
   8192a:	bf00      	nop
   8192c:	400e0600 	.word	0x400e0600

00081930 <pmc_enable_periph_clk>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
<<<<<<< HEAD
   817e4:	282c      	cmp	r0, #44	; 0x2c
   817e6:	d820      	bhi.n	8182a <pmc_enable_periph_clk+0x46>
=======
   81930:	282c      	cmp	r0, #44	; 0x2c
   81932:	d820      	bhi.n	81976 <pmc_enable_periph_clk+0x46>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		return 1;
	}

	if (ul_id < 32) {
<<<<<<< HEAD
   817e8:	281f      	cmp	r0, #31
   817ea:	d80d      	bhi.n	81808 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   817ec:	4b12      	ldr	r3, [pc, #72]	; (81838 <pmc_enable_periph_clk+0x54>)
   817ee:	699a      	ldr	r2, [r3, #24]
   817f0:	2301      	movs	r3, #1
   817f2:	4083      	lsls	r3, r0
   817f4:	401a      	ands	r2, r3
   817f6:	4293      	cmp	r3, r2
   817f8:	d019      	beq.n	8182e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   817fa:	2301      	movs	r3, #1
   817fc:	fa03 f000 	lsl.w	r0, r3, r0
   81800:	4b0d      	ldr	r3, [pc, #52]	; (81838 <pmc_enable_periph_clk+0x54>)
   81802:	6118      	str	r0, [r3, #16]
=======
   81934:	281f      	cmp	r0, #31
   81936:	d80d      	bhi.n	81954 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81938:	4b12      	ldr	r3, [pc, #72]	; (81984 <pmc_enable_periph_clk+0x54>)
   8193a:	699a      	ldr	r2, [r3, #24]
   8193c:	2301      	movs	r3, #1
   8193e:	4083      	lsls	r3, r0
   81940:	401a      	ands	r2, r3
   81942:	4293      	cmp	r3, r2
   81944:	d019      	beq.n	8197a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   81946:	2301      	movs	r3, #1
   81948:	fa03 f000 	lsl.w	r0, r3, r0
   8194c:	4b0d      	ldr	r3, [pc, #52]	; (81984 <pmc_enable_periph_clk+0x54>)
   8194e:	6118      	str	r0, [r3, #16]
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
<<<<<<< HEAD
   81804:	2000      	movs	r0, #0
   81806:	4770      	bx	lr
=======
   81950:	2000      	movs	r0, #0
   81952:	4770      	bx	lr
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
<<<<<<< HEAD
   81808:	4b0b      	ldr	r3, [pc, #44]	; (81838 <pmc_enable_periph_clk+0x54>)
   8180a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
=======
   81954:	4b0b      	ldr	r3, [pc, #44]	; (81984 <pmc_enable_periph_clk+0x54>)
   81956:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
<<<<<<< HEAD
   8180e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81810:	2301      	movs	r3, #1
   81812:	4083      	lsls	r3, r0
   81814:	401a      	ands	r2, r3
   81816:	4293      	cmp	r3, r2
   81818:	d00b      	beq.n	81832 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   8181a:	2301      	movs	r3, #1
   8181c:	fa03 f000 	lsl.w	r0, r3, r0
   81820:	4b05      	ldr	r3, [pc, #20]	; (81838 <pmc_enable_periph_clk+0x54>)
   81822:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
=======
   8195a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8195c:	2301      	movs	r3, #1
   8195e:	4083      	lsls	r3, r0
   81960:	401a      	ands	r2, r3
   81962:	4293      	cmp	r3, r2
   81964:	d00b      	beq.n	8197e <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   81966:	2301      	movs	r3, #1
   81968:	fa03 f000 	lsl.w	r0, r3, r0
   8196c:	4b05      	ldr	r3, [pc, #20]	; (81984 <pmc_enable_periph_clk+0x54>)
   8196e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		}
#endif
	}

	return 0;
<<<<<<< HEAD
   81826:	2000      	movs	r0, #0
   81828:	4770      	bx	lr
=======
   81972:	2000      	movs	r0, #0
   81974:	4770      	bx	lr
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
<<<<<<< HEAD
   8182a:	2001      	movs	r0, #1
   8182c:	4770      	bx	lr
=======
   81976:	2001      	movs	r0, #1
   81978:	4770      	bx	lr
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
<<<<<<< HEAD
   8182e:	2000      	movs	r0, #0
   81830:	4770      	bx	lr
   81832:	2000      	movs	r0, #0
}
   81834:	4770      	bx	lr
   81836:	bf00      	nop
   81838:	400e0600 	.word	0x400e0600

0008183c <Dummy_Handler>:
=======
   8197a:	2000      	movs	r0, #0
   8197c:	4770      	bx	lr
   8197e:	2000      	movs	r0, #0
}
   81980:	4770      	bx	lr
   81982:	bf00      	nop
   81984:	400e0600 	.word	0x400e0600

00081988 <Dummy_Handler>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
<<<<<<< HEAD
   8183c:	e7fe      	b.n	8183c <Dummy_Handler>
   8183e:	bf00      	nop

00081840 <Reset_Handler>:
=======
   81988:	e7fe      	b.n	81988 <Dummy_Handler>
   8198a:	bf00      	nop

0008198c <Reset_Handler>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
<<<<<<< HEAD
   81840:	b510      	push	{r4, lr}
=======
   8198c:	b510      	push	{r4, lr}
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
<<<<<<< HEAD
   81842:	4b1e      	ldr	r3, [pc, #120]	; (818bc <Reset_Handler+0x7c>)
   81844:	4a1e      	ldr	r2, [pc, #120]	; (818c0 <Reset_Handler+0x80>)
   81846:	429a      	cmp	r2, r3
   81848:	d003      	beq.n	81852 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8184a:	4b1e      	ldr	r3, [pc, #120]	; (818c4 <Reset_Handler+0x84>)
   8184c:	4a1b      	ldr	r2, [pc, #108]	; (818bc <Reset_Handler+0x7c>)
   8184e:	429a      	cmp	r2, r3
   81850:	d304      	bcc.n	8185c <Reset_Handler+0x1c>
=======
   8198e:	4b1e      	ldr	r3, [pc, #120]	; (81a08 <Reset_Handler+0x7c>)
   81990:	4a1e      	ldr	r2, [pc, #120]	; (81a0c <Reset_Handler+0x80>)
   81992:	429a      	cmp	r2, r3
   81994:	d003      	beq.n	8199e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   81996:	4b1e      	ldr	r3, [pc, #120]	; (81a10 <Reset_Handler+0x84>)
   81998:	4a1b      	ldr	r2, [pc, #108]	; (81a08 <Reset_Handler+0x7c>)
   8199a:	429a      	cmp	r2, r3
   8199c:	d304      	bcc.n	819a8 <Reset_Handler+0x1c>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
<<<<<<< HEAD
   81852:	4b1d      	ldr	r3, [pc, #116]	; (818c8 <Reset_Handler+0x88>)
   81854:	4a1d      	ldr	r2, [pc, #116]	; (818cc <Reset_Handler+0x8c>)
   81856:	429a      	cmp	r2, r3
   81858:	d30f      	bcc.n	8187a <Reset_Handler+0x3a>
   8185a:	e01a      	b.n	81892 <Reset_Handler+0x52>
   8185c:	4b1c      	ldr	r3, [pc, #112]	; (818d0 <Reset_Handler+0x90>)
   8185e:	4c1d      	ldr	r4, [pc, #116]	; (818d4 <Reset_Handler+0x94>)
   81860:	1ae4      	subs	r4, r4, r3
   81862:	f024 0403 	bic.w	r4, r4, #3
   81866:	3404      	adds	r4, #4
=======
   8199e:	4b1d      	ldr	r3, [pc, #116]	; (81a14 <Reset_Handler+0x88>)
   819a0:	4a1d      	ldr	r2, [pc, #116]	; (81a18 <Reset_Handler+0x8c>)
   819a2:	429a      	cmp	r2, r3
   819a4:	d30f      	bcc.n	819c6 <Reset_Handler+0x3a>
   819a6:	e01a      	b.n	819de <Reset_Handler+0x52>
   819a8:	4b1c      	ldr	r3, [pc, #112]	; (81a1c <Reset_Handler+0x90>)
   819aa:	4c1d      	ldr	r4, [pc, #116]	; (81a20 <Reset_Handler+0x94>)
   819ac:	1ae4      	subs	r4, r4, r3
   819ae:	f024 0403 	bic.w	r4, r4, #3
   819b2:	3404      	adds	r4, #4
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
<<<<<<< HEAD
   81868:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   8186a:	4814      	ldr	r0, [pc, #80]	; (818bc <Reset_Handler+0x7c>)
   8186c:	4914      	ldr	r1, [pc, #80]	; (818c0 <Reset_Handler+0x80>)
   8186e:	585a      	ldr	r2, [r3, r1]
   81870:	501a      	str	r2, [r3, r0]
   81872:	3304      	adds	r3, #4
=======
   819b4:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   819b6:	4814      	ldr	r0, [pc, #80]	; (81a08 <Reset_Handler+0x7c>)
   819b8:	4914      	ldr	r1, [pc, #80]	; (81a0c <Reset_Handler+0x80>)
   819ba:	585a      	ldr	r2, [r3, r1]
   819bc:	501a      	str	r2, [r3, r0]
   819be:	3304      	adds	r3, #4
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
<<<<<<< HEAD
   81874:	42a3      	cmp	r3, r4
   81876:	d1fa      	bne.n	8186e <Reset_Handler+0x2e>
   81878:	e7eb      	b.n	81852 <Reset_Handler+0x12>
   8187a:	4b17      	ldr	r3, [pc, #92]	; (818d8 <Reset_Handler+0x98>)
   8187c:	4917      	ldr	r1, [pc, #92]	; (818dc <Reset_Handler+0x9c>)
   8187e:	1ac9      	subs	r1, r1, r3
   81880:	f021 0103 	bic.w	r1, r1, #3
   81884:	1d1a      	adds	r2, r3, #4
   81886:	4411      	add	r1, r2
=======
   819c0:	42a3      	cmp	r3, r4
   819c2:	d1fa      	bne.n	819ba <Reset_Handler+0x2e>
   819c4:	e7eb      	b.n	8199e <Reset_Handler+0x12>
   819c6:	4b17      	ldr	r3, [pc, #92]	; (81a24 <Reset_Handler+0x98>)
   819c8:	4917      	ldr	r1, [pc, #92]	; (81a28 <Reset_Handler+0x9c>)
   819ca:	1ac9      	subs	r1, r1, r3
   819cc:	f021 0103 	bic.w	r1, r1, #3
   819d0:	1d1a      	adds	r2, r3, #4
   819d2:	4411      	add	r1, r2
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
<<<<<<< HEAD
   81888:	2200      	movs	r2, #0
   8188a:	f843 2f04 	str.w	r2, [r3, #4]!
=======
   819d4:	2200      	movs	r2, #0
   819d6:	f843 2f04 	str.w	r2, [r3, #4]!
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
<<<<<<< HEAD
   8188e:	428b      	cmp	r3, r1
   81890:	d1fb      	bne.n	8188a <Reset_Handler+0x4a>
=======
   819da:	428b      	cmp	r3, r1
   819dc:	d1fb      	bne.n	819d6 <Reset_Handler+0x4a>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
<<<<<<< HEAD
   81892:	4a13      	ldr	r2, [pc, #76]	; (818e0 <Reset_Handler+0xa0>)
   81894:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   81898:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8189c:	4911      	ldr	r1, [pc, #68]	; (818e4 <Reset_Handler+0xa4>)
   8189e:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   818a0:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   818a4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   818a8:	d203      	bcs.n	818b2 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   818aa:	688a      	ldr	r2, [r1, #8]
   818ac:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   818b0:	608a      	str	r2, [r1, #8]
=======
   819de:	4a13      	ldr	r2, [pc, #76]	; (81a2c <Reset_Handler+0xa0>)
   819e0:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   819e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   819e8:	4911      	ldr	r1, [pc, #68]	; (81a30 <Reset_Handler+0xa4>)
   819ea:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   819ec:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   819f0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   819f4:	d203      	bcs.n	819fe <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   819f6:	688a      	ldr	r2, [r1, #8]
   819f8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   819fc:	608a      	str	r2, [r1, #8]
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	}

	/* Initialize the C library */
	__libc_init_array();
<<<<<<< HEAD
   818b2:	4b0d      	ldr	r3, [pc, #52]	; (818e8 <Reset_Handler+0xa8>)
   818b4:	4798      	blx	r3

	/* Branch to main function */
	main();
   818b6:	4b0d      	ldr	r3, [pc, #52]	; (818ec <Reset_Handler+0xac>)
   818b8:	4798      	blx	r3
   818ba:	e7fe      	b.n	818ba <Reset_Handler+0x7a>
   818bc:	20070000 	.word	0x20070000
   818c0:	00082d78 	.word	0x00082d78
   818c4:	20070844 	.word	0x20070844
   818c8:	20070a1c 	.word	0x20070a1c
   818cc:	20070844 	.word	0x20070844
   818d0:	20070004 	.word	0x20070004
   818d4:	20070847 	.word	0x20070847
   818d8:	20070840 	.word	0x20070840
   818dc:	20070a17 	.word	0x20070a17
   818e0:	00080000 	.word	0x00080000
   818e4:	e000ed00 	.word	0xe000ed00
   818e8:	00081ae5 	.word	0x00081ae5
   818ec:	00080149 	.word	0x00080149

000818f0 <SystemCoreClockUpdate>:
=======
   819fe:	4b0d      	ldr	r3, [pc, #52]	; (81a34 <Reset_Handler+0xa8>)
   81a00:	4798      	blx	r3

	/* Branch to main function */
	main();
   81a02:	4b0d      	ldr	r3, [pc, #52]	; (81a38 <Reset_Handler+0xac>)
   81a04:	4798      	blx	r3
   81a06:	e7fe      	b.n	81a06 <Reset_Handler+0x7a>
   81a08:	20070000 	.word	0x20070000
   81a0c:	00082f28 	.word	0x00082f28
   81a10:	20070844 	.word	0x20070844
   81a14:	20070a1c 	.word	0x20070a1c
   81a18:	20070844 	.word	0x20070844
   81a1c:	20070004 	.word	0x20070004
   81a20:	20070847 	.word	0x20070847
   81a24:	20070840 	.word	0x20070840
   81a28:	20070a17 	.word	0x20070a17
   81a2c:	00080000 	.word	0x00080000
   81a30:	e000ed00 	.word	0xe000ed00
   81a34:	00081c31 	.word	0x00081c31
   81a38:	00080149 	.word	0x00080149

00081a3c <SystemCoreClockUpdate>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
<<<<<<< HEAD
   818f0:	4b3e      	ldr	r3, [pc, #248]	; (819ec <SystemCoreClockUpdate+0xfc>)
   818f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   818f4:	f003 0303 	and.w	r3, r3, #3
   818f8:	2b03      	cmp	r3, #3
   818fa:	d85f      	bhi.n	819bc <SystemCoreClockUpdate+0xcc>
   818fc:	e8df f003 	tbb	[pc, r3]
   81900:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81904:	4b3a      	ldr	r3, [pc, #232]	; (819f0 <SystemCoreClockUpdate+0x100>)
   81906:	695b      	ldr	r3, [r3, #20]
   81908:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8190c:	bf14      	ite	ne
   8190e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81912:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81916:	4b37      	ldr	r3, [pc, #220]	; (819f4 <SystemCoreClockUpdate+0x104>)
   81918:	601a      	str	r2, [r3, #0]
   8191a:	e04f      	b.n	819bc <SystemCoreClockUpdate+0xcc>
=======
   81a3c:	4b3e      	ldr	r3, [pc, #248]	; (81b38 <SystemCoreClockUpdate+0xfc>)
   81a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81a40:	f003 0303 	and.w	r3, r3, #3
   81a44:	2b03      	cmp	r3, #3
   81a46:	d85f      	bhi.n	81b08 <SystemCoreClockUpdate+0xcc>
   81a48:	e8df f003 	tbb	[pc, r3]
   81a4c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81a50:	4b3a      	ldr	r3, [pc, #232]	; (81b3c <SystemCoreClockUpdate+0x100>)
   81a52:	695b      	ldr	r3, [r3, #20]
   81a54:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81a58:	bf14      	ite	ne
   81a5a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81a5e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81a62:	4b37      	ldr	r3, [pc, #220]	; (81b40 <SystemCoreClockUpdate+0x104>)
   81a64:	601a      	str	r2, [r3, #0]
   81a66:	e04f      	b.n	81b08 <SystemCoreClockUpdate+0xcc>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
<<<<<<< HEAD
   8191c:	4b33      	ldr	r3, [pc, #204]	; (819ec <SystemCoreClockUpdate+0xfc>)
   8191e:	6a1b      	ldr	r3, [r3, #32]
   81920:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81924:	d003      	beq.n	8192e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81926:	4a34      	ldr	r2, [pc, #208]	; (819f8 <SystemCoreClockUpdate+0x108>)
   81928:	4b32      	ldr	r3, [pc, #200]	; (819f4 <SystemCoreClockUpdate+0x104>)
   8192a:	601a      	str	r2, [r3, #0]
   8192c:	e046      	b.n	819bc <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8192e:	4a33      	ldr	r2, [pc, #204]	; (819fc <SystemCoreClockUpdate+0x10c>)
   81930:	4b30      	ldr	r3, [pc, #192]	; (819f4 <SystemCoreClockUpdate+0x104>)
   81932:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81934:	4b2d      	ldr	r3, [pc, #180]	; (819ec <SystemCoreClockUpdate+0xfc>)
   81936:	6a1b      	ldr	r3, [r3, #32]
   81938:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8193c:	2b10      	cmp	r3, #16
   8193e:	d002      	beq.n	81946 <SystemCoreClockUpdate+0x56>
   81940:	2b20      	cmp	r3, #32
   81942:	d004      	beq.n	8194e <SystemCoreClockUpdate+0x5e>
   81944:	e03a      	b.n	819bc <SystemCoreClockUpdate+0xcc>
=======
   81a68:	4b33      	ldr	r3, [pc, #204]	; (81b38 <SystemCoreClockUpdate+0xfc>)
   81a6a:	6a1b      	ldr	r3, [r3, #32]
   81a6c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81a70:	d003      	beq.n	81a7a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81a72:	4a34      	ldr	r2, [pc, #208]	; (81b44 <SystemCoreClockUpdate+0x108>)
   81a74:	4b32      	ldr	r3, [pc, #200]	; (81b40 <SystemCoreClockUpdate+0x104>)
   81a76:	601a      	str	r2, [r3, #0]
   81a78:	e046      	b.n	81b08 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81a7a:	4a33      	ldr	r2, [pc, #204]	; (81b48 <SystemCoreClockUpdate+0x10c>)
   81a7c:	4b30      	ldr	r3, [pc, #192]	; (81b40 <SystemCoreClockUpdate+0x104>)
   81a7e:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81a80:	4b2d      	ldr	r3, [pc, #180]	; (81b38 <SystemCoreClockUpdate+0xfc>)
   81a82:	6a1b      	ldr	r3, [r3, #32]
   81a84:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81a88:	2b10      	cmp	r3, #16
   81a8a:	d002      	beq.n	81a92 <SystemCoreClockUpdate+0x56>
   81a8c:	2b20      	cmp	r3, #32
   81a8e:	d004      	beq.n	81a9a <SystemCoreClockUpdate+0x5e>
   81a90:	e03a      	b.n	81b08 <SystemCoreClockUpdate+0xcc>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
<<<<<<< HEAD
   81946:	4a2e      	ldr	r2, [pc, #184]	; (81a00 <SystemCoreClockUpdate+0x110>)
   81948:	4b2a      	ldr	r3, [pc, #168]	; (819f4 <SystemCoreClockUpdate+0x104>)
   8194a:	601a      	str	r2, [r3, #0]
				break;
   8194c:	e036      	b.n	819bc <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8194e:	4a2a      	ldr	r2, [pc, #168]	; (819f8 <SystemCoreClockUpdate+0x108>)
   81950:	4b28      	ldr	r3, [pc, #160]	; (819f4 <SystemCoreClockUpdate+0x104>)
   81952:	601a      	str	r2, [r3, #0]
				break;
   81954:	e032      	b.n	819bc <SystemCoreClockUpdate+0xcc>
=======
   81a92:	4a2e      	ldr	r2, [pc, #184]	; (81b4c <SystemCoreClockUpdate+0x110>)
   81a94:	4b2a      	ldr	r3, [pc, #168]	; (81b40 <SystemCoreClockUpdate+0x104>)
   81a96:	601a      	str	r2, [r3, #0]
				break;
   81a98:	e036      	b.n	81b08 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81a9a:	4a2a      	ldr	r2, [pc, #168]	; (81b44 <SystemCoreClockUpdate+0x108>)
   81a9c:	4b28      	ldr	r3, [pc, #160]	; (81b40 <SystemCoreClockUpdate+0x104>)
   81a9e:	601a      	str	r2, [r3, #0]
				break;
   81aa0:	e032      	b.n	81b08 <SystemCoreClockUpdate+0xcc>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
<<<<<<< HEAD
   81956:	4b25      	ldr	r3, [pc, #148]	; (819ec <SystemCoreClockUpdate+0xfc>)
   81958:	6a1b      	ldr	r3, [r3, #32]
   8195a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8195e:	d003      	beq.n	81968 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81960:	4a25      	ldr	r2, [pc, #148]	; (819f8 <SystemCoreClockUpdate+0x108>)
   81962:	4b24      	ldr	r3, [pc, #144]	; (819f4 <SystemCoreClockUpdate+0x104>)
   81964:	601a      	str	r2, [r3, #0]
   81966:	e012      	b.n	8198e <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81968:	4a24      	ldr	r2, [pc, #144]	; (819fc <SystemCoreClockUpdate+0x10c>)
   8196a:	4b22      	ldr	r3, [pc, #136]	; (819f4 <SystemCoreClockUpdate+0x104>)
   8196c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8196e:	4b1f      	ldr	r3, [pc, #124]	; (819ec <SystemCoreClockUpdate+0xfc>)
   81970:	6a1b      	ldr	r3, [r3, #32]
   81972:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81976:	2b10      	cmp	r3, #16
   81978:	d002      	beq.n	81980 <SystemCoreClockUpdate+0x90>
   8197a:	2b20      	cmp	r3, #32
   8197c:	d004      	beq.n	81988 <SystemCoreClockUpdate+0x98>
   8197e:	e006      	b.n	8198e <SystemCoreClockUpdate+0x9e>
=======
   81aa2:	4b25      	ldr	r3, [pc, #148]	; (81b38 <SystemCoreClockUpdate+0xfc>)
   81aa4:	6a1b      	ldr	r3, [r3, #32]
   81aa6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81aaa:	d003      	beq.n	81ab4 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81aac:	4a25      	ldr	r2, [pc, #148]	; (81b44 <SystemCoreClockUpdate+0x108>)
   81aae:	4b24      	ldr	r3, [pc, #144]	; (81b40 <SystemCoreClockUpdate+0x104>)
   81ab0:	601a      	str	r2, [r3, #0]
   81ab2:	e012      	b.n	81ada <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81ab4:	4a24      	ldr	r2, [pc, #144]	; (81b48 <SystemCoreClockUpdate+0x10c>)
   81ab6:	4b22      	ldr	r3, [pc, #136]	; (81b40 <SystemCoreClockUpdate+0x104>)
   81ab8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81aba:	4b1f      	ldr	r3, [pc, #124]	; (81b38 <SystemCoreClockUpdate+0xfc>)
   81abc:	6a1b      	ldr	r3, [r3, #32]
   81abe:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81ac2:	2b10      	cmp	r3, #16
   81ac4:	d002      	beq.n	81acc <SystemCoreClockUpdate+0x90>
   81ac6:	2b20      	cmp	r3, #32
   81ac8:	d004      	beq.n	81ad4 <SystemCoreClockUpdate+0x98>
   81aca:	e006      	b.n	81ada <SystemCoreClockUpdate+0x9e>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
<<<<<<< HEAD
   81980:	4a1f      	ldr	r2, [pc, #124]	; (81a00 <SystemCoreClockUpdate+0x110>)
   81982:	4b1c      	ldr	r3, [pc, #112]	; (819f4 <SystemCoreClockUpdate+0x104>)
   81984:	601a      	str	r2, [r3, #0]
				break;
   81986:	e002      	b.n	8198e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81988:	4a1b      	ldr	r2, [pc, #108]	; (819f8 <SystemCoreClockUpdate+0x108>)
   8198a:	4b1a      	ldr	r3, [pc, #104]	; (819f4 <SystemCoreClockUpdate+0x104>)
   8198c:	601a      	str	r2, [r3, #0]
=======
   81acc:	4a1f      	ldr	r2, [pc, #124]	; (81b4c <SystemCoreClockUpdate+0x110>)
   81ace:	4b1c      	ldr	r3, [pc, #112]	; (81b40 <SystemCoreClockUpdate+0x104>)
   81ad0:	601a      	str	r2, [r3, #0]
				break;
   81ad2:	e002      	b.n	81ada <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81ad4:	4a1b      	ldr	r2, [pc, #108]	; (81b44 <SystemCoreClockUpdate+0x108>)
   81ad6:	4b1a      	ldr	r3, [pc, #104]	; (81b40 <SystemCoreClockUpdate+0x104>)
   81ad8:	601a      	str	r2, [r3, #0]
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
<<<<<<< HEAD
   8198e:	4b17      	ldr	r3, [pc, #92]	; (819ec <SystemCoreClockUpdate+0xfc>)
   81990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81992:	f003 0303 	and.w	r3, r3, #3
   81996:	2b02      	cmp	r3, #2
   81998:	d10d      	bne.n	819b6 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8199a:	4b14      	ldr	r3, [pc, #80]	; (819ec <SystemCoreClockUpdate+0xfc>)
   8199c:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8199e:	6a99      	ldr	r1, [r3, #40]	; 0x28
   819a0:	4b14      	ldr	r3, [pc, #80]	; (819f4 <SystemCoreClockUpdate+0x104>)
=======
   81ada:	4b17      	ldr	r3, [pc, #92]	; (81b38 <SystemCoreClockUpdate+0xfc>)
   81adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81ade:	f003 0303 	and.w	r3, r3, #3
   81ae2:	2b02      	cmp	r3, #2
   81ae4:	d10d      	bne.n	81b02 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81ae6:	4b14      	ldr	r3, [pc, #80]	; (81b38 <SystemCoreClockUpdate+0xfc>)
   81ae8:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81aea:	6a99      	ldr	r1, [r3, #40]	; 0x28
   81aec:	4b14      	ldr	r3, [pc, #80]	; (81b40 <SystemCoreClockUpdate+0x104>)
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
<<<<<<< HEAD
   819a2:	f3c0 400a 	ubfx	r0, r0, #16, #11
   819a6:	681a      	ldr	r2, [r3, #0]
   819a8:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   819ac:	b2c9      	uxtb	r1, r1
   819ae:	fbb2 f2f1 	udiv	r2, r2, r1
   819b2:	601a      	str	r2, [r3, #0]
   819b4:	e002      	b.n	819bc <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   819b6:	4a13      	ldr	r2, [pc, #76]	; (81a04 <SystemCoreClockUpdate+0x114>)
   819b8:	4b0e      	ldr	r3, [pc, #56]	; (819f4 <SystemCoreClockUpdate+0x104>)
   819ba:	601a      	str	r2, [r3, #0]
=======
   81aee:	f3c0 400a 	ubfx	r0, r0, #16, #11
   81af2:	681a      	ldr	r2, [r3, #0]
   81af4:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81af8:	b2c9      	uxtb	r1, r1
   81afa:	fbb2 f2f1 	udiv	r2, r2, r1
   81afe:	601a      	str	r2, [r3, #0]
   81b00:	e002      	b.n	81b08 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81b02:	4a13      	ldr	r2, [pc, #76]	; (81b50 <SystemCoreClockUpdate+0x114>)
   81b04:	4b0e      	ldr	r3, [pc, #56]	; (81b40 <SystemCoreClockUpdate+0x104>)
   81b06:	601a      	str	r2, [r3, #0]
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
<<<<<<< HEAD
   819bc:	4b0b      	ldr	r3, [pc, #44]	; (819ec <SystemCoreClockUpdate+0xfc>)
   819be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   819c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   819c4:	2b70      	cmp	r3, #112	; 0x70
   819c6:	d107      	bne.n	819d8 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   819c8:	4b0a      	ldr	r3, [pc, #40]	; (819f4 <SystemCoreClockUpdate+0x104>)
   819ca:	681a      	ldr	r2, [r3, #0]
   819cc:	490e      	ldr	r1, [pc, #56]	; (81a08 <SystemCoreClockUpdate+0x118>)
   819ce:	fba1 0202 	umull	r0, r2, r1, r2
   819d2:	0852      	lsrs	r2, r2, #1
   819d4:	601a      	str	r2, [r3, #0]
   819d6:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   819d8:	4b04      	ldr	r3, [pc, #16]	; (819ec <SystemCoreClockUpdate+0xfc>)
   819da:	6b19      	ldr	r1, [r3, #48]	; 0x30
   819dc:	4b05      	ldr	r3, [pc, #20]	; (819f4 <SystemCoreClockUpdate+0x104>)
   819de:	f3c1 1102 	ubfx	r1, r1, #4, #3
   819e2:	681a      	ldr	r2, [r3, #0]
   819e4:	40ca      	lsrs	r2, r1
   819e6:	601a      	str	r2, [r3, #0]
   819e8:	4770      	bx	lr
   819ea:	bf00      	nop
   819ec:	400e0600 	.word	0x400e0600
   819f0:	400e1a10 	.word	0x400e1a10
   819f4:	20070004 	.word	0x20070004
   819f8:	00b71b00 	.word	0x00b71b00
   819fc:	003d0900 	.word	0x003d0900
   81a00:	007a1200 	.word	0x007a1200
   81a04:	0e4e1c00 	.word	0x0e4e1c00
   81a08:	aaaaaaab 	.word	0xaaaaaaab

00081a0c <system_init_flash>:
=======
   81b08:	4b0b      	ldr	r3, [pc, #44]	; (81b38 <SystemCoreClockUpdate+0xfc>)
   81b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81b0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81b10:	2b70      	cmp	r3, #112	; 0x70
   81b12:	d107      	bne.n	81b24 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   81b14:	4b0a      	ldr	r3, [pc, #40]	; (81b40 <SystemCoreClockUpdate+0x104>)
   81b16:	681a      	ldr	r2, [r3, #0]
   81b18:	490e      	ldr	r1, [pc, #56]	; (81b54 <SystemCoreClockUpdate+0x118>)
   81b1a:	fba1 0202 	umull	r0, r2, r1, r2
   81b1e:	0852      	lsrs	r2, r2, #1
   81b20:	601a      	str	r2, [r3, #0]
   81b22:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81b24:	4b04      	ldr	r3, [pc, #16]	; (81b38 <SystemCoreClockUpdate+0xfc>)
   81b26:	6b19      	ldr	r1, [r3, #48]	; 0x30
   81b28:	4b05      	ldr	r3, [pc, #20]	; (81b40 <SystemCoreClockUpdate+0x104>)
   81b2a:	f3c1 1102 	ubfx	r1, r1, #4, #3
   81b2e:	681a      	ldr	r2, [r3, #0]
   81b30:	40ca      	lsrs	r2, r1
   81b32:	601a      	str	r2, [r3, #0]
   81b34:	4770      	bx	lr
   81b36:	bf00      	nop
   81b38:	400e0600 	.word	0x400e0600
   81b3c:	400e1a10 	.word	0x400e1a10
   81b40:	20070004 	.word	0x20070004
   81b44:	00b71b00 	.word	0x00b71b00
   81b48:	003d0900 	.word	0x003d0900
   81b4c:	007a1200 	.word	0x007a1200
   81b50:	0e4e1c00 	.word	0x0e4e1c00
   81b54:	aaaaaaab 	.word	0xaaaaaaab

00081b58 <system_init_flash>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
<<<<<<< HEAD
   81a0c:	4b1b      	ldr	r3, [pc, #108]	; (81a7c <system_init_flash+0x70>)
   81a0e:	4298      	cmp	r0, r3
   81a10:	d806      	bhi.n	81a20 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   81a12:	2300      	movs	r3, #0
   81a14:	4a1a      	ldr	r2, [pc, #104]	; (81a80 <system_init_flash+0x74>)
   81a16:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   81a18:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81a1c:	6013      	str	r3, [r2, #0]
   81a1e:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   81a20:	4b18      	ldr	r3, [pc, #96]	; (81a84 <system_init_flash+0x78>)
   81a22:	4298      	cmp	r0, r3
   81a24:	d807      	bhi.n	81a36 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   81a26:	f44f 7380 	mov.w	r3, #256	; 0x100
   81a2a:	4a15      	ldr	r2, [pc, #84]	; (81a80 <system_init_flash+0x74>)
   81a2c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   81a2e:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81a32:	6013      	str	r3, [r2, #0]
   81a34:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   81a36:	4b14      	ldr	r3, [pc, #80]	; (81a88 <system_init_flash+0x7c>)
   81a38:	4298      	cmp	r0, r3
   81a3a:	d807      	bhi.n	81a4c <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   81a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
   81a40:	4a0f      	ldr	r2, [pc, #60]	; (81a80 <system_init_flash+0x74>)
   81a42:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   81a44:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81a48:	6013      	str	r3, [r2, #0]
   81a4a:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   81a4c:	4b0f      	ldr	r3, [pc, #60]	; (81a8c <system_init_flash+0x80>)
   81a4e:	4298      	cmp	r0, r3
   81a50:	d807      	bhi.n	81a62 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   81a52:	f44f 7340 	mov.w	r3, #768	; 0x300
   81a56:	4a0a      	ldr	r2, [pc, #40]	; (81a80 <system_init_flash+0x74>)
   81a58:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   81a5a:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81a5e:	6013      	str	r3, [r2, #0]
   81a60:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   81a62:	4b0b      	ldr	r3, [pc, #44]	; (81a90 <system_init_flash+0x84>)
   81a64:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   81a66:	bf94      	ite	ls
   81a68:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   81a6c:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
   81a70:	4a03      	ldr	r2, [pc, #12]	; (81a80 <system_init_flash+0x74>)
   81a72:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   81a74:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81a78:	6013      	str	r3, [r2, #0]
   81a7a:	4770      	bx	lr
   81a7c:	0121eabf 	.word	0x0121eabf
   81a80:	400e0a00 	.word	0x400e0a00
   81a84:	02faf07f 	.word	0x02faf07f
   81a88:	03d08fff 	.word	0x03d08fff
   81a8c:	04c4b3ff 	.word	0x04c4b3ff
   81a90:	055d4a7f 	.word	0x055d4a7f

00081a94 <_sbrk>:
=======
   81b58:	4b1b      	ldr	r3, [pc, #108]	; (81bc8 <system_init_flash+0x70>)
   81b5a:	4298      	cmp	r0, r3
   81b5c:	d806      	bhi.n	81b6c <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   81b5e:	2300      	movs	r3, #0
   81b60:	4a1a      	ldr	r2, [pc, #104]	; (81bcc <system_init_flash+0x74>)
   81b62:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   81b64:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81b68:	6013      	str	r3, [r2, #0]
   81b6a:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   81b6c:	4b18      	ldr	r3, [pc, #96]	; (81bd0 <system_init_flash+0x78>)
   81b6e:	4298      	cmp	r0, r3
   81b70:	d807      	bhi.n	81b82 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   81b72:	f44f 7380 	mov.w	r3, #256	; 0x100
   81b76:	4a15      	ldr	r2, [pc, #84]	; (81bcc <system_init_flash+0x74>)
   81b78:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   81b7a:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81b7e:	6013      	str	r3, [r2, #0]
   81b80:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   81b82:	4b14      	ldr	r3, [pc, #80]	; (81bd4 <system_init_flash+0x7c>)
   81b84:	4298      	cmp	r0, r3
   81b86:	d807      	bhi.n	81b98 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   81b88:	f44f 7300 	mov.w	r3, #512	; 0x200
   81b8c:	4a0f      	ldr	r2, [pc, #60]	; (81bcc <system_init_flash+0x74>)
   81b8e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   81b90:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81b94:	6013      	str	r3, [r2, #0]
   81b96:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   81b98:	4b0f      	ldr	r3, [pc, #60]	; (81bd8 <system_init_flash+0x80>)
   81b9a:	4298      	cmp	r0, r3
   81b9c:	d807      	bhi.n	81bae <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   81b9e:	f44f 7340 	mov.w	r3, #768	; 0x300
   81ba2:	4a0a      	ldr	r2, [pc, #40]	; (81bcc <system_init_flash+0x74>)
   81ba4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   81ba6:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81baa:	6013      	str	r3, [r2, #0]
   81bac:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   81bae:	4b0b      	ldr	r3, [pc, #44]	; (81bdc <system_init_flash+0x84>)
   81bb0:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   81bb2:	bf94      	ite	ls
   81bb4:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   81bb8:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
   81bbc:	4a03      	ldr	r2, [pc, #12]	; (81bcc <system_init_flash+0x74>)
   81bbe:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   81bc0:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81bc4:	6013      	str	r3, [r2, #0]
   81bc6:	4770      	bx	lr
   81bc8:	0121eabf 	.word	0x0121eabf
   81bcc:	400e0a00 	.word	0x400e0a00
   81bd0:	02faf07f 	.word	0x02faf07f
   81bd4:	03d08fff 	.word	0x03d08fff
   81bd8:	04c4b3ff 	.word	0x04c4b3ff
   81bdc:	055d4a7f 	.word	0x055d4a7f

00081be0 <_sbrk>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
<<<<<<< HEAD
   81a94:	4b09      	ldr	r3, [pc, #36]	; (81abc <_sbrk+0x28>)
   81a96:	681b      	ldr	r3, [r3, #0]
   81a98:	b913      	cbnz	r3, 81aa0 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   81a9a:	4a09      	ldr	r2, [pc, #36]	; (81ac0 <_sbrk+0x2c>)
   81a9c:	4b07      	ldr	r3, [pc, #28]	; (81abc <_sbrk+0x28>)
   81a9e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   81aa0:	4b06      	ldr	r3, [pc, #24]	; (81abc <_sbrk+0x28>)
   81aa2:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81aa4:	181a      	adds	r2, r3, r0
   81aa6:	4907      	ldr	r1, [pc, #28]	; (81ac4 <_sbrk+0x30>)
   81aa8:	4291      	cmp	r1, r2
   81aaa:	db04      	blt.n	81ab6 <_sbrk+0x22>
=======
   81be0:	4b09      	ldr	r3, [pc, #36]	; (81c08 <_sbrk+0x28>)
   81be2:	681b      	ldr	r3, [r3, #0]
   81be4:	b913      	cbnz	r3, 81bec <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   81be6:	4a09      	ldr	r2, [pc, #36]	; (81c0c <_sbrk+0x2c>)
   81be8:	4b07      	ldr	r3, [pc, #28]	; (81c08 <_sbrk+0x28>)
   81bea:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   81bec:	4b06      	ldr	r3, [pc, #24]	; (81c08 <_sbrk+0x28>)
   81bee:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81bf0:	181a      	adds	r2, r3, r0
   81bf2:	4907      	ldr	r1, [pc, #28]	; (81c10 <_sbrk+0x30>)
   81bf4:	4291      	cmp	r1, r2
   81bf6:	db04      	blt.n	81c02 <_sbrk+0x22>
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		return (caddr_t) -1;	
	}

	heap += incr;
<<<<<<< HEAD
   81aac:	4610      	mov	r0, r2
   81aae:	4a03      	ldr	r2, [pc, #12]	; (81abc <_sbrk+0x28>)
   81ab0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81ab2:	4618      	mov	r0, r3
   81ab4:	4770      	bx	lr
=======
   81bf8:	4610      	mov	r0, r2
   81bfa:	4a03      	ldr	r2, [pc, #12]	; (81c08 <_sbrk+0x28>)
   81bfc:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81bfe:	4618      	mov	r0, r3
   81c00:	4770      	bx	lr
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
<<<<<<< HEAD
   81ab6:	f04f 30ff 	mov.w	r0, #4294967295
=======
   81c02:	f04f 30ff 	mov.w	r0, #4294967295
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
<<<<<<< HEAD
   81aba:	4770      	bx	lr
   81abc:	20070958 	.word	0x20070958
   81ac0:	20072a20 	.word	0x20072a20
   81ac4:	20087ffc 	.word	0x20087ffc

00081ac8 <_close>:
=======
   81c06:	4770      	bx	lr
   81c08:	20070958 	.word	0x20070958
   81c0c:	20072a20 	.word	0x20072a20
   81c10:	20087ffc 	.word	0x20087ffc

00081c14 <_close>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
}

extern int _close(int file)
{
	return -1;
}
<<<<<<< HEAD
   81ac8:	f04f 30ff 	mov.w	r0, #4294967295
   81acc:	4770      	bx	lr
   81ace:	bf00      	nop

00081ad0 <_fstat>:
=======
   81c14:	f04f 30ff 	mov.w	r0, #4294967295
   81c18:	4770      	bx	lr
   81c1a:	bf00      	nop

00081c1c <_fstat>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
<<<<<<< HEAD
   81ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81ad4:	604b      	str	r3, [r1, #4]

	return 0;
}
   81ad6:	2000      	movs	r0, #0
   81ad8:	4770      	bx	lr
   81ada:	bf00      	nop

00081adc <_isatty>:
=======
   81c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81c20:	604b      	str	r3, [r1, #4]

	return 0;
}
   81c22:	2000      	movs	r0, #0
   81c24:	4770      	bx	lr
   81c26:	bf00      	nop

00081c28 <_isatty>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

extern int _isatty(int file)
{
	return 1;
}
<<<<<<< HEAD
   81adc:	2001      	movs	r0, #1
   81ade:	4770      	bx	lr

00081ae0 <_lseek>:
=======
   81c28:	2001      	movs	r0, #1
   81c2a:	4770      	bx	lr

00081c2c <_lseek>:
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
<<<<<<< HEAD
   81ae0:	2000      	movs	r0, #0
   81ae2:	4770      	bx	lr

00081ae4 <__libc_init_array>:
   81ae4:	b570      	push	{r4, r5, r6, lr}
   81ae6:	4e0f      	ldr	r6, [pc, #60]	; (81b24 <__libc_init_array+0x40>)
   81ae8:	4d0f      	ldr	r5, [pc, #60]	; (81b28 <__libc_init_array+0x44>)
   81aea:	1b76      	subs	r6, r6, r5
   81aec:	10b6      	asrs	r6, r6, #2
   81aee:	d007      	beq.n	81b00 <__libc_init_array+0x1c>
   81af0:	3d04      	subs	r5, #4
   81af2:	2400      	movs	r4, #0
   81af4:	3401      	adds	r4, #1
   81af6:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81afa:	4798      	blx	r3
   81afc:	42a6      	cmp	r6, r4
   81afe:	d1f9      	bne.n	81af4 <__libc_init_array+0x10>
   81b00:	4e0a      	ldr	r6, [pc, #40]	; (81b2c <__libc_init_array+0x48>)
   81b02:	4d0b      	ldr	r5, [pc, #44]	; (81b30 <__libc_init_array+0x4c>)
   81b04:	f001 f926 	bl	82d54 <_init>
   81b08:	1b76      	subs	r6, r6, r5
   81b0a:	10b6      	asrs	r6, r6, #2
   81b0c:	d008      	beq.n	81b20 <__libc_init_array+0x3c>
   81b0e:	3d04      	subs	r5, #4
   81b10:	2400      	movs	r4, #0
   81b12:	3401      	adds	r4, #1
   81b14:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81b18:	4798      	blx	r3
   81b1a:	42a6      	cmp	r6, r4
   81b1c:	d1f9      	bne.n	81b12 <__libc_init_array+0x2e>
   81b1e:	bd70      	pop	{r4, r5, r6, pc}
   81b20:	bd70      	pop	{r4, r5, r6, pc}
   81b22:	bf00      	nop
   81b24:	00082d60 	.word	0x00082d60
   81b28:	00082d60 	.word	0x00082d60
   81b2c:	00082d68 	.word	0x00082d68
   81b30:	00082d60 	.word	0x00082d60

00081b34 <memset>:
   81b34:	b4f0      	push	{r4, r5, r6, r7}
   81b36:	0784      	lsls	r4, r0, #30
   81b38:	d043      	beq.n	81bc2 <memset+0x8e>
   81b3a:	1e54      	subs	r4, r2, #1
   81b3c:	2a00      	cmp	r2, #0
   81b3e:	d03e      	beq.n	81bbe <memset+0x8a>
   81b40:	b2cd      	uxtb	r5, r1
   81b42:	4603      	mov	r3, r0
   81b44:	e003      	b.n	81b4e <memset+0x1a>
   81b46:	1e62      	subs	r2, r4, #1
   81b48:	2c00      	cmp	r4, #0
   81b4a:	d038      	beq.n	81bbe <memset+0x8a>
   81b4c:	4614      	mov	r4, r2
   81b4e:	f803 5b01 	strb.w	r5, [r3], #1
   81b52:	079a      	lsls	r2, r3, #30
   81b54:	d1f7      	bne.n	81b46 <memset+0x12>
   81b56:	2c03      	cmp	r4, #3
   81b58:	d92a      	bls.n	81bb0 <memset+0x7c>
   81b5a:	b2cd      	uxtb	r5, r1
   81b5c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81b60:	2c0f      	cmp	r4, #15
   81b62:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81b66:	d915      	bls.n	81b94 <memset+0x60>
   81b68:	f1a4 0710 	sub.w	r7, r4, #16
   81b6c:	093f      	lsrs	r7, r7, #4
   81b6e:	f103 0610 	add.w	r6, r3, #16
   81b72:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   81b76:	461a      	mov	r2, r3
   81b78:	6015      	str	r5, [r2, #0]
   81b7a:	6055      	str	r5, [r2, #4]
   81b7c:	6095      	str	r5, [r2, #8]
   81b7e:	60d5      	str	r5, [r2, #12]
   81b80:	3210      	adds	r2, #16
   81b82:	42b2      	cmp	r2, r6
   81b84:	d1f8      	bne.n	81b78 <memset+0x44>
   81b86:	f004 040f 	and.w	r4, r4, #15
   81b8a:	3701      	adds	r7, #1
   81b8c:	2c03      	cmp	r4, #3
   81b8e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   81b92:	d90d      	bls.n	81bb0 <memset+0x7c>
   81b94:	461e      	mov	r6, r3
   81b96:	4622      	mov	r2, r4
   81b98:	3a04      	subs	r2, #4
   81b9a:	2a03      	cmp	r2, #3
   81b9c:	f846 5b04 	str.w	r5, [r6], #4
   81ba0:	d8fa      	bhi.n	81b98 <memset+0x64>
   81ba2:	1f22      	subs	r2, r4, #4
   81ba4:	f022 0203 	bic.w	r2, r2, #3
   81ba8:	3204      	adds	r2, #4
   81baa:	4413      	add	r3, r2
   81bac:	f004 0403 	and.w	r4, r4, #3
   81bb0:	b12c      	cbz	r4, 81bbe <memset+0x8a>
   81bb2:	b2c9      	uxtb	r1, r1
   81bb4:	441c      	add	r4, r3
   81bb6:	f803 1b01 	strb.w	r1, [r3], #1
   81bba:	42a3      	cmp	r3, r4
   81bbc:	d1fb      	bne.n	81bb6 <memset+0x82>
   81bbe:	bcf0      	pop	{r4, r5, r6, r7}
   81bc0:	4770      	bx	lr
   81bc2:	4614      	mov	r4, r2
   81bc4:	4603      	mov	r3, r0
   81bc6:	e7c6      	b.n	81b56 <memset+0x22>

00081bc8 <setbuf>:
   81bc8:	2900      	cmp	r1, #0
   81bca:	bf0c      	ite	eq
   81bcc:	2202      	moveq	r2, #2
   81bce:	2200      	movne	r2, #0
   81bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81bd4:	f000 b80e 	b.w	81bf4 <setvbuf>

00081bd8 <setjmp>:
   81bd8:	46ec      	mov	ip, sp
   81bda:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81bde:	f04f 0000 	mov.w	r0, #0
   81be2:	4770      	bx	lr

00081be4 <longjmp>:
   81be4:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81be8:	46e5      	mov	sp, ip
   81bea:	0008      	movs	r0, r1
   81bec:	bf08      	it	eq
   81bee:	2001      	moveq	r0, #1
   81bf0:	4770      	bx	lr
   81bf2:	bf00      	nop

00081bf4 <setvbuf>:
   81bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81bf8:	4d3c      	ldr	r5, [pc, #240]	; (81cec <setvbuf+0xf8>)
   81bfa:	4604      	mov	r4, r0
   81bfc:	682d      	ldr	r5, [r5, #0]
   81bfe:	4688      	mov	r8, r1
   81c00:	4616      	mov	r6, r2
   81c02:	461f      	mov	r7, r3
   81c04:	b115      	cbz	r5, 81c0c <setvbuf+0x18>
   81c06:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81c08:	2b00      	cmp	r3, #0
   81c0a:	d04f      	beq.n	81cac <setvbuf+0xb8>
   81c0c:	2e02      	cmp	r6, #2
   81c0e:	d830      	bhi.n	81c72 <setvbuf+0x7e>
   81c10:	2f00      	cmp	r7, #0
   81c12:	db2e      	blt.n	81c72 <setvbuf+0x7e>
   81c14:	4628      	mov	r0, r5
   81c16:	4621      	mov	r1, r4
   81c18:	f000 f9d6 	bl	81fc8 <_fflush_r>
   81c1c:	89a3      	ldrh	r3, [r4, #12]
   81c1e:	2200      	movs	r2, #0
   81c20:	6062      	str	r2, [r4, #4]
   81c22:	61a2      	str	r2, [r4, #24]
   81c24:	061a      	lsls	r2, r3, #24
   81c26:	d428      	bmi.n	81c7a <setvbuf+0x86>
   81c28:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81c2c:	b29b      	uxth	r3, r3
   81c2e:	2e02      	cmp	r6, #2
   81c30:	81a3      	strh	r3, [r4, #12]
   81c32:	d02d      	beq.n	81c90 <setvbuf+0x9c>
   81c34:	f1b8 0f00 	cmp.w	r8, #0
   81c38:	d03c      	beq.n	81cb4 <setvbuf+0xc0>
   81c3a:	2e01      	cmp	r6, #1
   81c3c:	d013      	beq.n	81c66 <setvbuf+0x72>
   81c3e:	b29b      	uxth	r3, r3
   81c40:	f003 0008 	and.w	r0, r3, #8
   81c44:	4a2a      	ldr	r2, [pc, #168]	; (81cf0 <setvbuf+0xfc>)
   81c46:	b280      	uxth	r0, r0
   81c48:	63ea      	str	r2, [r5, #60]	; 0x3c
   81c4a:	f8c4 8000 	str.w	r8, [r4]
   81c4e:	f8c4 8010 	str.w	r8, [r4, #16]
   81c52:	6167      	str	r7, [r4, #20]
   81c54:	b178      	cbz	r0, 81c76 <setvbuf+0x82>
   81c56:	f013 0f03 	tst.w	r3, #3
   81c5a:	bf18      	it	ne
   81c5c:	2700      	movne	r7, #0
   81c5e:	60a7      	str	r7, [r4, #8]
   81c60:	2000      	movs	r0, #0
   81c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81c66:	f043 0301 	orr.w	r3, r3, #1
   81c6a:	427a      	negs	r2, r7
   81c6c:	81a3      	strh	r3, [r4, #12]
   81c6e:	61a2      	str	r2, [r4, #24]
   81c70:	e7e5      	b.n	81c3e <setvbuf+0x4a>
   81c72:	f04f 30ff 	mov.w	r0, #4294967295
   81c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81c7a:	4628      	mov	r0, r5
   81c7c:	6921      	ldr	r1, [r4, #16]
   81c7e:	f000 faa3 	bl	821c8 <_free_r>
   81c82:	89a3      	ldrh	r3, [r4, #12]
   81c84:	2e02      	cmp	r6, #2
   81c86:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81c8a:	b29b      	uxth	r3, r3
   81c8c:	81a3      	strh	r3, [r4, #12]
   81c8e:	d1d1      	bne.n	81c34 <setvbuf+0x40>
   81c90:	2000      	movs	r0, #0
   81c92:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81c96:	f043 0302 	orr.w	r3, r3, #2
   81c9a:	2500      	movs	r5, #0
   81c9c:	2101      	movs	r1, #1
   81c9e:	81a3      	strh	r3, [r4, #12]
   81ca0:	60a5      	str	r5, [r4, #8]
   81ca2:	6022      	str	r2, [r4, #0]
   81ca4:	6122      	str	r2, [r4, #16]
   81ca6:	6161      	str	r1, [r4, #20]
   81ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81cac:	4628      	mov	r0, r5
   81cae:	f000 f9a7 	bl	82000 <__sinit>
   81cb2:	e7ab      	b.n	81c0c <setvbuf+0x18>
   81cb4:	2f00      	cmp	r7, #0
   81cb6:	bf08      	it	eq
   81cb8:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   81cbc:	4638      	mov	r0, r7
   81cbe:	f000 fbe3 	bl	82488 <malloc>
   81cc2:	4680      	mov	r8, r0
   81cc4:	b128      	cbz	r0, 81cd2 <setvbuf+0xde>
   81cc6:	89a3      	ldrh	r3, [r4, #12]
   81cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81ccc:	b29b      	uxth	r3, r3
   81cce:	81a3      	strh	r3, [r4, #12]
   81cd0:	e7b3      	b.n	81c3a <setvbuf+0x46>
   81cd2:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81cd6:	f000 fbd7 	bl	82488 <malloc>
   81cda:	4680      	mov	r8, r0
   81cdc:	b918      	cbnz	r0, 81ce6 <setvbuf+0xf2>
   81cde:	89a3      	ldrh	r3, [r4, #12]
   81ce0:	f04f 30ff 	mov.w	r0, #4294967295
   81ce4:	e7d5      	b.n	81c92 <setvbuf+0x9e>
   81ce6:	f44f 6780 	mov.w	r7, #1024	; 0x400
   81cea:	e7ec      	b.n	81cc6 <setvbuf+0xd2>
   81cec:	20070430 	.word	0x20070430
   81cf0:	00081ff5 	.word	0x00081ff5

00081cf4 <__swbuf_r>:
   81cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81cf6:	460d      	mov	r5, r1
   81cf8:	4614      	mov	r4, r2
   81cfa:	4607      	mov	r7, r0
   81cfc:	b110      	cbz	r0, 81d04 <__swbuf_r+0x10>
   81cfe:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81d00:	2b00      	cmp	r3, #0
   81d02:	d048      	beq.n	81d96 <__swbuf_r+0xa2>
   81d04:	89a2      	ldrh	r2, [r4, #12]
   81d06:	69a0      	ldr	r0, [r4, #24]
   81d08:	b293      	uxth	r3, r2
   81d0a:	60a0      	str	r0, [r4, #8]
   81d0c:	0718      	lsls	r0, r3, #28
   81d0e:	d538      	bpl.n	81d82 <__swbuf_r+0x8e>
   81d10:	6926      	ldr	r6, [r4, #16]
   81d12:	2e00      	cmp	r6, #0
   81d14:	d035      	beq.n	81d82 <__swbuf_r+0x8e>
   81d16:	0499      	lsls	r1, r3, #18
   81d18:	b2ed      	uxtb	r5, r5
   81d1a:	d515      	bpl.n	81d48 <__swbuf_r+0x54>
   81d1c:	6823      	ldr	r3, [r4, #0]
   81d1e:	6962      	ldr	r2, [r4, #20]
   81d20:	1b9e      	subs	r6, r3, r6
   81d22:	4296      	cmp	r6, r2
   81d24:	da1c      	bge.n	81d60 <__swbuf_r+0x6c>
   81d26:	3601      	adds	r6, #1
   81d28:	68a2      	ldr	r2, [r4, #8]
   81d2a:	1c59      	adds	r1, r3, #1
   81d2c:	3a01      	subs	r2, #1
   81d2e:	60a2      	str	r2, [r4, #8]
   81d30:	6021      	str	r1, [r4, #0]
   81d32:	701d      	strb	r5, [r3, #0]
   81d34:	6963      	ldr	r3, [r4, #20]
   81d36:	42b3      	cmp	r3, r6
   81d38:	d01a      	beq.n	81d70 <__swbuf_r+0x7c>
   81d3a:	89a3      	ldrh	r3, [r4, #12]
   81d3c:	07db      	lsls	r3, r3, #31
   81d3e:	d501      	bpl.n	81d44 <__swbuf_r+0x50>
   81d40:	2d0a      	cmp	r5, #10
   81d42:	d015      	beq.n	81d70 <__swbuf_r+0x7c>
   81d44:	4628      	mov	r0, r5
   81d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81d48:	6e63      	ldr	r3, [r4, #100]	; 0x64
   81d4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   81d4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   81d52:	6663      	str	r3, [r4, #100]	; 0x64
   81d54:	6823      	ldr	r3, [r4, #0]
   81d56:	81a2      	strh	r2, [r4, #12]
   81d58:	6962      	ldr	r2, [r4, #20]
   81d5a:	1b9e      	subs	r6, r3, r6
   81d5c:	4296      	cmp	r6, r2
   81d5e:	dbe2      	blt.n	81d26 <__swbuf_r+0x32>
   81d60:	4638      	mov	r0, r7
   81d62:	4621      	mov	r1, r4
   81d64:	f000 f930 	bl	81fc8 <_fflush_r>
   81d68:	b940      	cbnz	r0, 81d7c <__swbuf_r+0x88>
   81d6a:	6823      	ldr	r3, [r4, #0]
   81d6c:	2601      	movs	r6, #1
   81d6e:	e7db      	b.n	81d28 <__swbuf_r+0x34>
   81d70:	4638      	mov	r0, r7
   81d72:	4621      	mov	r1, r4
   81d74:	f000 f928 	bl	81fc8 <_fflush_r>
   81d78:	2800      	cmp	r0, #0
   81d7a:	d0e3      	beq.n	81d44 <__swbuf_r+0x50>
   81d7c:	f04f 30ff 	mov.w	r0, #4294967295
   81d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81d82:	4638      	mov	r0, r7
   81d84:	4621      	mov	r1, r4
   81d86:	f000 f809 	bl	81d9c <__swsetup_r>
   81d8a:	2800      	cmp	r0, #0
   81d8c:	d1f6      	bne.n	81d7c <__swbuf_r+0x88>
   81d8e:	89a2      	ldrh	r2, [r4, #12]
   81d90:	6926      	ldr	r6, [r4, #16]
   81d92:	b293      	uxth	r3, r2
   81d94:	e7bf      	b.n	81d16 <__swbuf_r+0x22>
   81d96:	f000 f933 	bl	82000 <__sinit>
   81d9a:	e7b3      	b.n	81d04 <__swbuf_r+0x10>

00081d9c <__swsetup_r>:
   81d9c:	4b2f      	ldr	r3, [pc, #188]	; (81e5c <__swsetup_r+0xc0>)
   81d9e:	b570      	push	{r4, r5, r6, lr}
   81da0:	4606      	mov	r6, r0
   81da2:	6818      	ldr	r0, [r3, #0]
   81da4:	460c      	mov	r4, r1
   81da6:	b110      	cbz	r0, 81dae <__swsetup_r+0x12>
   81da8:	6b82      	ldr	r2, [r0, #56]	; 0x38
   81daa:	2a00      	cmp	r2, #0
   81dac:	d036      	beq.n	81e1c <__swsetup_r+0x80>
   81dae:	89a5      	ldrh	r5, [r4, #12]
   81db0:	b2ab      	uxth	r3, r5
   81db2:	0719      	lsls	r1, r3, #28
   81db4:	d50c      	bpl.n	81dd0 <__swsetup_r+0x34>
   81db6:	6922      	ldr	r2, [r4, #16]
   81db8:	b1aa      	cbz	r2, 81de6 <__swsetup_r+0x4a>
   81dba:	f013 0101 	ands.w	r1, r3, #1
   81dbe:	d01e      	beq.n	81dfe <__swsetup_r+0x62>
   81dc0:	6963      	ldr	r3, [r4, #20]
   81dc2:	2100      	movs	r1, #0
   81dc4:	425b      	negs	r3, r3
   81dc6:	61a3      	str	r3, [r4, #24]
   81dc8:	60a1      	str	r1, [r4, #8]
   81dca:	b1f2      	cbz	r2, 81e0a <__swsetup_r+0x6e>
   81dcc:	2000      	movs	r0, #0
   81dce:	bd70      	pop	{r4, r5, r6, pc}
   81dd0:	06da      	lsls	r2, r3, #27
   81dd2:	d53a      	bpl.n	81e4a <__swsetup_r+0xae>
   81dd4:	075b      	lsls	r3, r3, #29
   81dd6:	d424      	bmi.n	81e22 <__swsetup_r+0x86>
   81dd8:	6922      	ldr	r2, [r4, #16]
   81dda:	f045 0308 	orr.w	r3, r5, #8
   81dde:	81a3      	strh	r3, [r4, #12]
   81de0:	b29b      	uxth	r3, r3
   81de2:	2a00      	cmp	r2, #0
   81de4:	d1e9      	bne.n	81dba <__swsetup_r+0x1e>
   81de6:	f403 7120 	and.w	r1, r3, #640	; 0x280
   81dea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   81dee:	d0e4      	beq.n	81dba <__swsetup_r+0x1e>
   81df0:	4630      	mov	r0, r6
   81df2:	4621      	mov	r1, r4
   81df4:	f000 fad8 	bl	823a8 <__smakebuf_r>
   81df8:	89a3      	ldrh	r3, [r4, #12]
   81dfa:	6922      	ldr	r2, [r4, #16]
   81dfc:	e7dd      	b.n	81dba <__swsetup_r+0x1e>
   81dfe:	0798      	lsls	r0, r3, #30
   81e00:	bf58      	it	pl
   81e02:	6961      	ldrpl	r1, [r4, #20]
   81e04:	60a1      	str	r1, [r4, #8]
   81e06:	2a00      	cmp	r2, #0
   81e08:	d1e0      	bne.n	81dcc <__swsetup_r+0x30>
   81e0a:	89a3      	ldrh	r3, [r4, #12]
   81e0c:	061a      	lsls	r2, r3, #24
   81e0e:	d5dd      	bpl.n	81dcc <__swsetup_r+0x30>
   81e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81e14:	81a3      	strh	r3, [r4, #12]
   81e16:	f04f 30ff 	mov.w	r0, #4294967295
   81e1a:	bd70      	pop	{r4, r5, r6, pc}
   81e1c:	f000 f8f0 	bl	82000 <__sinit>
   81e20:	e7c5      	b.n	81dae <__swsetup_r+0x12>
   81e22:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81e24:	b149      	cbz	r1, 81e3a <__swsetup_r+0x9e>
   81e26:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81e2a:	4299      	cmp	r1, r3
   81e2c:	d003      	beq.n	81e36 <__swsetup_r+0x9a>
   81e2e:	4630      	mov	r0, r6
   81e30:	f000 f9ca 	bl	821c8 <_free_r>
   81e34:	89a5      	ldrh	r5, [r4, #12]
   81e36:	2300      	movs	r3, #0
   81e38:	6323      	str	r3, [r4, #48]	; 0x30
   81e3a:	6922      	ldr	r2, [r4, #16]
   81e3c:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   81e40:	2100      	movs	r1, #0
   81e42:	b2ad      	uxth	r5, r5
   81e44:	6022      	str	r2, [r4, #0]
   81e46:	6061      	str	r1, [r4, #4]
   81e48:	e7c7      	b.n	81dda <__swsetup_r+0x3e>
   81e4a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   81e4e:	2309      	movs	r3, #9
   81e50:	6033      	str	r3, [r6, #0]
   81e52:	f04f 30ff 	mov.w	r0, #4294967295
   81e56:	81a5      	strh	r5, [r4, #12]
   81e58:	bd70      	pop	{r4, r5, r6, pc}
   81e5a:	bf00      	nop
   81e5c:	20070430 	.word	0x20070430

00081e60 <register_fini>:
   81e60:	4b02      	ldr	r3, [pc, #8]	; (81e6c <register_fini+0xc>)
   81e62:	b113      	cbz	r3, 81e6a <register_fini+0xa>
   81e64:	4802      	ldr	r0, [pc, #8]	; (81e70 <register_fini+0x10>)
   81e66:	f000 b805 	b.w	81e74 <atexit>
   81e6a:	4770      	bx	lr
   81e6c:	00000000 	.word	0x00000000
   81e70:	000820fd 	.word	0x000820fd

00081e74 <atexit>:
   81e74:	4601      	mov	r1, r0
   81e76:	2000      	movs	r0, #0
   81e78:	4602      	mov	r2, r0
   81e7a:	4603      	mov	r3, r0
   81e7c:	f000 be14 	b.w	82aa8 <__register_exitproc>

00081e80 <__sflush_r>:
   81e80:	898b      	ldrh	r3, [r1, #12]
   81e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81e86:	b29a      	uxth	r2, r3
   81e88:	460d      	mov	r5, r1
   81e8a:	0711      	lsls	r1, r2, #28
   81e8c:	4680      	mov	r8, r0
   81e8e:	d43c      	bmi.n	81f0a <__sflush_r+0x8a>
   81e90:	686a      	ldr	r2, [r5, #4]
   81e92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81e96:	2a00      	cmp	r2, #0
   81e98:	81ab      	strh	r3, [r5, #12]
   81e9a:	dd59      	ble.n	81f50 <__sflush_r+0xd0>
   81e9c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81e9e:	2c00      	cmp	r4, #0
   81ea0:	d04b      	beq.n	81f3a <__sflush_r+0xba>
   81ea2:	b29b      	uxth	r3, r3
   81ea4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   81ea8:	2100      	movs	r1, #0
   81eaa:	b292      	uxth	r2, r2
   81eac:	f8d8 6000 	ldr.w	r6, [r8]
   81eb0:	f8c8 1000 	str.w	r1, [r8]
   81eb4:	2a00      	cmp	r2, #0
   81eb6:	d04f      	beq.n	81f58 <__sflush_r+0xd8>
   81eb8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   81eba:	075f      	lsls	r7, r3, #29
   81ebc:	d505      	bpl.n	81eca <__sflush_r+0x4a>
   81ebe:	6869      	ldr	r1, [r5, #4]
   81ec0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   81ec2:	1a52      	subs	r2, r2, r1
   81ec4:	b10b      	cbz	r3, 81eca <__sflush_r+0x4a>
   81ec6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   81ec8:	1ad2      	subs	r2, r2, r3
   81eca:	4640      	mov	r0, r8
   81ecc:	69e9      	ldr	r1, [r5, #28]
   81ece:	2300      	movs	r3, #0
   81ed0:	47a0      	blx	r4
   81ed2:	1c44      	adds	r4, r0, #1
   81ed4:	d04a      	beq.n	81f6c <__sflush_r+0xec>
   81ed6:	89ab      	ldrh	r3, [r5, #12]
   81ed8:	692a      	ldr	r2, [r5, #16]
   81eda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81ede:	b29b      	uxth	r3, r3
   81ee0:	2100      	movs	r1, #0
   81ee2:	602a      	str	r2, [r5, #0]
   81ee4:	04da      	lsls	r2, r3, #19
   81ee6:	81ab      	strh	r3, [r5, #12]
   81ee8:	6069      	str	r1, [r5, #4]
   81eea:	d44c      	bmi.n	81f86 <__sflush_r+0x106>
   81eec:	6b29      	ldr	r1, [r5, #48]	; 0x30
   81eee:	f8c8 6000 	str.w	r6, [r8]
   81ef2:	b311      	cbz	r1, 81f3a <__sflush_r+0xba>
   81ef4:	f105 0340 	add.w	r3, r5, #64	; 0x40
   81ef8:	4299      	cmp	r1, r3
   81efa:	d002      	beq.n	81f02 <__sflush_r+0x82>
   81efc:	4640      	mov	r0, r8
   81efe:	f000 f963 	bl	821c8 <_free_r>
   81f02:	2000      	movs	r0, #0
   81f04:	6328      	str	r0, [r5, #48]	; 0x30
   81f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f0a:	692e      	ldr	r6, [r5, #16]
   81f0c:	b1ae      	cbz	r6, 81f3a <__sflush_r+0xba>
   81f0e:	0791      	lsls	r1, r2, #30
   81f10:	682c      	ldr	r4, [r5, #0]
   81f12:	bf0c      	ite	eq
   81f14:	696b      	ldreq	r3, [r5, #20]
   81f16:	2300      	movne	r3, #0
   81f18:	602e      	str	r6, [r5, #0]
   81f1a:	1ba4      	subs	r4, r4, r6
   81f1c:	60ab      	str	r3, [r5, #8]
   81f1e:	e00a      	b.n	81f36 <__sflush_r+0xb6>
   81f20:	4632      	mov	r2, r6
   81f22:	4623      	mov	r3, r4
   81f24:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   81f26:	4640      	mov	r0, r8
   81f28:	69e9      	ldr	r1, [r5, #28]
   81f2a:	47b8      	blx	r7
   81f2c:	2800      	cmp	r0, #0
   81f2e:	ebc0 0404 	rsb	r4, r0, r4
   81f32:	4406      	add	r6, r0
   81f34:	dd04      	ble.n	81f40 <__sflush_r+0xc0>
   81f36:	2c00      	cmp	r4, #0
   81f38:	dcf2      	bgt.n	81f20 <__sflush_r+0xa0>
   81f3a:	2000      	movs	r0, #0
   81f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f40:	89ab      	ldrh	r3, [r5, #12]
   81f42:	f04f 30ff 	mov.w	r0, #4294967295
   81f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f4a:	81ab      	strh	r3, [r5, #12]
   81f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f50:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   81f52:	2a00      	cmp	r2, #0
   81f54:	dca2      	bgt.n	81e9c <__sflush_r+0x1c>
   81f56:	e7f0      	b.n	81f3a <__sflush_r+0xba>
   81f58:	2301      	movs	r3, #1
   81f5a:	4640      	mov	r0, r8
   81f5c:	69e9      	ldr	r1, [r5, #28]
   81f5e:	47a0      	blx	r4
   81f60:	1c43      	adds	r3, r0, #1
   81f62:	4602      	mov	r2, r0
   81f64:	d01e      	beq.n	81fa4 <__sflush_r+0x124>
   81f66:	89ab      	ldrh	r3, [r5, #12]
   81f68:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81f6a:	e7a6      	b.n	81eba <__sflush_r+0x3a>
   81f6c:	f8d8 3000 	ldr.w	r3, [r8]
   81f70:	b95b      	cbnz	r3, 81f8a <__sflush_r+0x10a>
   81f72:	89aa      	ldrh	r2, [r5, #12]
   81f74:	6929      	ldr	r1, [r5, #16]
   81f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   81f7a:	b292      	uxth	r2, r2
   81f7c:	606b      	str	r3, [r5, #4]
   81f7e:	04d3      	lsls	r3, r2, #19
   81f80:	81aa      	strh	r2, [r5, #12]
   81f82:	6029      	str	r1, [r5, #0]
   81f84:	d5b2      	bpl.n	81eec <__sflush_r+0x6c>
   81f86:	6528      	str	r0, [r5, #80]	; 0x50
   81f88:	e7b0      	b.n	81eec <__sflush_r+0x6c>
   81f8a:	2b1d      	cmp	r3, #29
   81f8c:	d001      	beq.n	81f92 <__sflush_r+0x112>
   81f8e:	2b16      	cmp	r3, #22
   81f90:	d113      	bne.n	81fba <__sflush_r+0x13a>
   81f92:	89a9      	ldrh	r1, [r5, #12]
   81f94:	692b      	ldr	r3, [r5, #16]
   81f96:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   81f9a:	2200      	movs	r2, #0
   81f9c:	81a9      	strh	r1, [r5, #12]
   81f9e:	602b      	str	r3, [r5, #0]
   81fa0:	606a      	str	r2, [r5, #4]
   81fa2:	e7a3      	b.n	81eec <__sflush_r+0x6c>
   81fa4:	f8d8 3000 	ldr.w	r3, [r8]
   81fa8:	2b00      	cmp	r3, #0
   81faa:	d0dc      	beq.n	81f66 <__sflush_r+0xe6>
   81fac:	2b1d      	cmp	r3, #29
   81fae:	d001      	beq.n	81fb4 <__sflush_r+0x134>
   81fb0:	2b16      	cmp	r3, #22
   81fb2:	d1c5      	bne.n	81f40 <__sflush_r+0xc0>
   81fb4:	f8c8 6000 	str.w	r6, [r8]
   81fb8:	e7bf      	b.n	81f3a <__sflush_r+0xba>
   81fba:	89ab      	ldrh	r3, [r5, #12]
   81fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81fc0:	81ab      	strh	r3, [r5, #12]
   81fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81fc6:	bf00      	nop

00081fc8 <_fflush_r>:
   81fc8:	b510      	push	{r4, lr}
   81fca:	4604      	mov	r4, r0
   81fcc:	b082      	sub	sp, #8
   81fce:	b108      	cbz	r0, 81fd4 <_fflush_r+0xc>
   81fd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81fd2:	b153      	cbz	r3, 81fea <_fflush_r+0x22>
   81fd4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   81fd8:	b908      	cbnz	r0, 81fde <_fflush_r+0x16>
   81fda:	b002      	add	sp, #8
   81fdc:	bd10      	pop	{r4, pc}
   81fde:	4620      	mov	r0, r4
   81fe0:	b002      	add	sp, #8
   81fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81fe6:	f7ff bf4b 	b.w	81e80 <__sflush_r>
   81fea:	9101      	str	r1, [sp, #4]
   81fec:	f000 f808 	bl	82000 <__sinit>
   81ff0:	9901      	ldr	r1, [sp, #4]
   81ff2:	e7ef      	b.n	81fd4 <_fflush_r+0xc>

00081ff4 <_cleanup_r>:
   81ff4:	4901      	ldr	r1, [pc, #4]	; (81ffc <_cleanup_r+0x8>)
   81ff6:	f000 b9b3 	b.w	82360 <_fwalk>
   81ffa:	bf00      	nop
   81ffc:	00082bf5 	.word	0x00082bf5

00082000 <__sinit>:
   82000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82004:	6b84      	ldr	r4, [r0, #56]	; 0x38
   82006:	b083      	sub	sp, #12
   82008:	4607      	mov	r7, r0
   8200a:	2c00      	cmp	r4, #0
   8200c:	d165      	bne.n	820da <__sinit+0xda>
   8200e:	687d      	ldr	r5, [r7, #4]
   82010:	4833      	ldr	r0, [pc, #204]	; (820e0 <__sinit+0xe0>)
   82012:	2304      	movs	r3, #4
   82014:	2103      	movs	r1, #3
   82016:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   8201a:	63f8      	str	r0, [r7, #60]	; 0x3c
   8201c:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82020:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82024:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82028:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8202c:	81ab      	strh	r3, [r5, #12]
   8202e:	602c      	str	r4, [r5, #0]
   82030:	606c      	str	r4, [r5, #4]
   82032:	60ac      	str	r4, [r5, #8]
   82034:	666c      	str	r4, [r5, #100]	; 0x64
   82036:	81ec      	strh	r4, [r5, #14]
   82038:	612c      	str	r4, [r5, #16]
   8203a:	616c      	str	r4, [r5, #20]
   8203c:	61ac      	str	r4, [r5, #24]
   8203e:	4621      	mov	r1, r4
   82040:	2208      	movs	r2, #8
   82042:	f7ff fd77 	bl	81b34 <memset>
   82046:	f8df b09c 	ldr.w	fp, [pc, #156]	; 820e4 <__sinit+0xe4>
   8204a:	68be      	ldr	r6, [r7, #8]
   8204c:	f8df a098 	ldr.w	sl, [pc, #152]	; 820e8 <__sinit+0xe8>
   82050:	f8df 9098 	ldr.w	r9, [pc, #152]	; 820ec <__sinit+0xec>
   82054:	f8df 8098 	ldr.w	r8, [pc, #152]	; 820f0 <__sinit+0xf0>
   82058:	2301      	movs	r3, #1
   8205a:	2209      	movs	r2, #9
   8205c:	61ed      	str	r5, [r5, #28]
   8205e:	f8c5 b020 	str.w	fp, [r5, #32]
   82062:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82066:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8206a:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8206e:	4621      	mov	r1, r4
   82070:	81f3      	strh	r3, [r6, #14]
   82072:	81b2      	strh	r2, [r6, #12]
   82074:	6034      	str	r4, [r6, #0]
   82076:	6074      	str	r4, [r6, #4]
   82078:	60b4      	str	r4, [r6, #8]
   8207a:	6674      	str	r4, [r6, #100]	; 0x64
   8207c:	6134      	str	r4, [r6, #16]
   8207e:	6174      	str	r4, [r6, #20]
   82080:	61b4      	str	r4, [r6, #24]
   82082:	2208      	movs	r2, #8
   82084:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82088:	9301      	str	r3, [sp, #4]
   8208a:	f7ff fd53 	bl	81b34 <memset>
   8208e:	68fd      	ldr	r5, [r7, #12]
   82090:	2012      	movs	r0, #18
   82092:	2202      	movs	r2, #2
   82094:	61f6      	str	r6, [r6, #28]
   82096:	f8c6 b020 	str.w	fp, [r6, #32]
   8209a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   8209e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   820a2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   820a6:	4621      	mov	r1, r4
   820a8:	81a8      	strh	r0, [r5, #12]
   820aa:	81ea      	strh	r2, [r5, #14]
   820ac:	602c      	str	r4, [r5, #0]
   820ae:	606c      	str	r4, [r5, #4]
   820b0:	60ac      	str	r4, [r5, #8]
   820b2:	666c      	str	r4, [r5, #100]	; 0x64
   820b4:	612c      	str	r4, [r5, #16]
   820b6:	616c      	str	r4, [r5, #20]
   820b8:	61ac      	str	r4, [r5, #24]
   820ba:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   820be:	2208      	movs	r2, #8
   820c0:	f7ff fd38 	bl	81b34 <memset>
   820c4:	9b01      	ldr	r3, [sp, #4]
   820c6:	61ed      	str	r5, [r5, #28]
   820c8:	f8c5 b020 	str.w	fp, [r5, #32]
   820cc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   820d0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   820d4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   820d8:	63bb      	str	r3, [r7, #56]	; 0x38
   820da:	b003      	add	sp, #12
   820dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   820e0:	00081ff5 	.word	0x00081ff5
   820e4:	000829fd 	.word	0x000829fd
   820e8:	00082a21 	.word	0x00082a21
   820ec:	00082a59 	.word	0x00082a59
   820f0:	00082a79 	.word	0x00082a79

000820f4 <__sfp_lock_acquire>:
   820f4:	4770      	bx	lr
   820f6:	bf00      	nop

000820f8 <__sfp_lock_release>:
   820f8:	4770      	bx	lr
   820fa:	bf00      	nop

000820fc <__libc_fini_array>:
   820fc:	b538      	push	{r3, r4, r5, lr}
   820fe:	4d09      	ldr	r5, [pc, #36]	; (82124 <__libc_fini_array+0x28>)
   82100:	4c09      	ldr	r4, [pc, #36]	; (82128 <__libc_fini_array+0x2c>)
   82102:	1b64      	subs	r4, r4, r5
   82104:	10a4      	asrs	r4, r4, #2
   82106:	bf18      	it	ne
   82108:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   8210c:	d005      	beq.n	8211a <__libc_fini_array+0x1e>
   8210e:	3c01      	subs	r4, #1
   82110:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82114:	4798      	blx	r3
   82116:	2c00      	cmp	r4, #0
   82118:	d1f9      	bne.n	8210e <__libc_fini_array+0x12>
   8211a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8211e:	f000 be23 	b.w	82d68 <_fini>
   82122:	bf00      	nop
   82124:	00082d74 	.word	0x00082d74
   82128:	00082d78 	.word	0x00082d78

0008212c <_malloc_trim_r>:
   8212c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8212e:	4d23      	ldr	r5, [pc, #140]	; (821bc <_malloc_trim_r+0x90>)
   82130:	460f      	mov	r7, r1
   82132:	4604      	mov	r4, r0
   82134:	f000 fc4c 	bl	829d0 <__malloc_lock>
   82138:	68ab      	ldr	r3, [r5, #8]
   8213a:	685e      	ldr	r6, [r3, #4]
   8213c:	f026 0603 	bic.w	r6, r6, #3
   82140:	1bf1      	subs	r1, r6, r7
   82142:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   82146:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8214a:	f021 010f 	bic.w	r1, r1, #15
   8214e:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   82152:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   82156:	db07      	blt.n	82168 <_malloc_trim_r+0x3c>
   82158:	4620      	mov	r0, r4
   8215a:	2100      	movs	r1, #0
   8215c:	f000 fc3c 	bl	829d8 <_sbrk_r>
   82160:	68ab      	ldr	r3, [r5, #8]
   82162:	4433      	add	r3, r6
   82164:	4298      	cmp	r0, r3
   82166:	d004      	beq.n	82172 <_malloc_trim_r+0x46>
   82168:	4620      	mov	r0, r4
   8216a:	f000 fc33 	bl	829d4 <__malloc_unlock>
   8216e:	2000      	movs	r0, #0
   82170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82172:	4620      	mov	r0, r4
   82174:	4279      	negs	r1, r7
   82176:	f000 fc2f 	bl	829d8 <_sbrk_r>
   8217a:	3001      	adds	r0, #1
   8217c:	d00d      	beq.n	8219a <_malloc_trim_r+0x6e>
   8217e:	4b10      	ldr	r3, [pc, #64]	; (821c0 <_malloc_trim_r+0x94>)
   82180:	68aa      	ldr	r2, [r5, #8]
   82182:	6819      	ldr	r1, [r3, #0]
   82184:	1bf6      	subs	r6, r6, r7
   82186:	f046 0601 	orr.w	r6, r6, #1
   8218a:	4620      	mov	r0, r4
   8218c:	1bc9      	subs	r1, r1, r7
   8218e:	6056      	str	r6, [r2, #4]
   82190:	6019      	str	r1, [r3, #0]
   82192:	f000 fc1f 	bl	829d4 <__malloc_unlock>
   82196:	2001      	movs	r0, #1
   82198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8219a:	4620      	mov	r0, r4
   8219c:	2100      	movs	r1, #0
   8219e:	f000 fc1b 	bl	829d8 <_sbrk_r>
   821a2:	68ab      	ldr	r3, [r5, #8]
   821a4:	1ac2      	subs	r2, r0, r3
   821a6:	2a0f      	cmp	r2, #15
   821a8:	ddde      	ble.n	82168 <_malloc_trim_r+0x3c>
   821aa:	4d06      	ldr	r5, [pc, #24]	; (821c4 <_malloc_trim_r+0x98>)
   821ac:	4904      	ldr	r1, [pc, #16]	; (821c0 <_malloc_trim_r+0x94>)
   821ae:	682d      	ldr	r5, [r5, #0]
   821b0:	f042 0201 	orr.w	r2, r2, #1
   821b4:	1b40      	subs	r0, r0, r5
   821b6:	605a      	str	r2, [r3, #4]
   821b8:	6008      	str	r0, [r1, #0]
   821ba:	e7d5      	b.n	82168 <_malloc_trim_r+0x3c>
   821bc:	20070434 	.word	0x20070434
   821c0:	20070968 	.word	0x20070968
   821c4:	20070840 	.word	0x20070840

000821c8 <_free_r>:
   821c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   821cc:	460d      	mov	r5, r1
   821ce:	4606      	mov	r6, r0
   821d0:	2900      	cmp	r1, #0
   821d2:	d055      	beq.n	82280 <_free_r+0xb8>
   821d4:	f000 fbfc 	bl	829d0 <__malloc_lock>
   821d8:	f855 1c04 	ldr.w	r1, [r5, #-4]
   821dc:	f8df c170 	ldr.w	ip, [pc, #368]	; 82350 <_free_r+0x188>
   821e0:	f1a5 0408 	sub.w	r4, r5, #8
   821e4:	f021 0301 	bic.w	r3, r1, #1
   821e8:	18e2      	adds	r2, r4, r3
   821ea:	f8dc 0008 	ldr.w	r0, [ip, #8]
   821ee:	6857      	ldr	r7, [r2, #4]
   821f0:	4290      	cmp	r0, r2
   821f2:	f027 0703 	bic.w	r7, r7, #3
   821f6:	d068      	beq.n	822ca <_free_r+0x102>
   821f8:	f011 0101 	ands.w	r1, r1, #1
   821fc:	6057      	str	r7, [r2, #4]
   821fe:	d032      	beq.n	82266 <_free_r+0x9e>
   82200:	2100      	movs	r1, #0
   82202:	19d0      	adds	r0, r2, r7
   82204:	6840      	ldr	r0, [r0, #4]
   82206:	07c0      	lsls	r0, r0, #31
   82208:	d406      	bmi.n	82218 <_free_r+0x50>
   8220a:	443b      	add	r3, r7
   8220c:	6890      	ldr	r0, [r2, #8]
   8220e:	2900      	cmp	r1, #0
   82210:	d04d      	beq.n	822ae <_free_r+0xe6>
   82212:	68d2      	ldr	r2, [r2, #12]
   82214:	60c2      	str	r2, [r0, #12]
   82216:	6090      	str	r0, [r2, #8]
   82218:	f043 0201 	orr.w	r2, r3, #1
   8221c:	6062      	str	r2, [r4, #4]
   8221e:	50e3      	str	r3, [r4, r3]
   82220:	b9e1      	cbnz	r1, 8225c <_free_r+0x94>
   82222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82226:	d32d      	bcc.n	82284 <_free_r+0xbc>
   82228:	0a5a      	lsrs	r2, r3, #9
   8222a:	2a04      	cmp	r2, #4
   8222c:	d869      	bhi.n	82302 <_free_r+0x13a>
   8222e:	0998      	lsrs	r0, r3, #6
   82230:	3038      	adds	r0, #56	; 0x38
   82232:	0041      	lsls	r1, r0, #1
   82234:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   82238:	f8dc 2008 	ldr.w	r2, [ip, #8]
   8223c:	4944      	ldr	r1, [pc, #272]	; (82350 <_free_r+0x188>)
   8223e:	4562      	cmp	r2, ip
   82240:	d065      	beq.n	8230e <_free_r+0x146>
   82242:	6851      	ldr	r1, [r2, #4]
   82244:	f021 0103 	bic.w	r1, r1, #3
   82248:	428b      	cmp	r3, r1
   8224a:	d202      	bcs.n	82252 <_free_r+0x8a>
   8224c:	6892      	ldr	r2, [r2, #8]
   8224e:	4594      	cmp	ip, r2
   82250:	d1f7      	bne.n	82242 <_free_r+0x7a>
   82252:	68d3      	ldr	r3, [r2, #12]
   82254:	60e3      	str	r3, [r4, #12]
   82256:	60a2      	str	r2, [r4, #8]
   82258:	609c      	str	r4, [r3, #8]
   8225a:	60d4      	str	r4, [r2, #12]
   8225c:	4630      	mov	r0, r6
   8225e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82262:	f000 bbb7 	b.w	829d4 <__malloc_unlock>
   82266:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8226a:	f10c 0808 	add.w	r8, ip, #8
   8226e:	1b64      	subs	r4, r4, r5
   82270:	68a0      	ldr	r0, [r4, #8]
   82272:	442b      	add	r3, r5
   82274:	4540      	cmp	r0, r8
   82276:	d042      	beq.n	822fe <_free_r+0x136>
   82278:	68e5      	ldr	r5, [r4, #12]
   8227a:	60c5      	str	r5, [r0, #12]
   8227c:	60a8      	str	r0, [r5, #8]
   8227e:	e7c0      	b.n	82202 <_free_r+0x3a>
   82280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82284:	08db      	lsrs	r3, r3, #3
   82286:	109a      	asrs	r2, r3, #2
   82288:	2001      	movs	r0, #1
   8228a:	4090      	lsls	r0, r2
   8228c:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82290:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82294:	689a      	ldr	r2, [r3, #8]
   82296:	4301      	orrs	r1, r0
   82298:	60a2      	str	r2, [r4, #8]
   8229a:	60e3      	str	r3, [r4, #12]
   8229c:	f8cc 1004 	str.w	r1, [ip, #4]
   822a0:	4630      	mov	r0, r6
   822a2:	609c      	str	r4, [r3, #8]
   822a4:	60d4      	str	r4, [r2, #12]
   822a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   822aa:	f000 bb93 	b.w	829d4 <__malloc_unlock>
   822ae:	4d29      	ldr	r5, [pc, #164]	; (82354 <_free_r+0x18c>)
   822b0:	42a8      	cmp	r0, r5
   822b2:	d1ae      	bne.n	82212 <_free_r+0x4a>
   822b4:	f043 0201 	orr.w	r2, r3, #1
   822b8:	f8cc 4014 	str.w	r4, [ip, #20]
   822bc:	f8cc 4010 	str.w	r4, [ip, #16]
   822c0:	60e0      	str	r0, [r4, #12]
   822c2:	60a0      	str	r0, [r4, #8]
   822c4:	6062      	str	r2, [r4, #4]
   822c6:	50e3      	str	r3, [r4, r3]
   822c8:	e7c8      	b.n	8225c <_free_r+0x94>
   822ca:	441f      	add	r7, r3
   822cc:	07cb      	lsls	r3, r1, #31
   822ce:	d407      	bmi.n	822e0 <_free_r+0x118>
   822d0:	f855 1c08 	ldr.w	r1, [r5, #-8]
   822d4:	1a64      	subs	r4, r4, r1
   822d6:	68e3      	ldr	r3, [r4, #12]
   822d8:	68a2      	ldr	r2, [r4, #8]
   822da:	440f      	add	r7, r1
   822dc:	60d3      	str	r3, [r2, #12]
   822de:	609a      	str	r2, [r3, #8]
   822e0:	4b1d      	ldr	r3, [pc, #116]	; (82358 <_free_r+0x190>)
   822e2:	f047 0201 	orr.w	r2, r7, #1
   822e6:	681b      	ldr	r3, [r3, #0]
   822e8:	6062      	str	r2, [r4, #4]
   822ea:	429f      	cmp	r7, r3
   822ec:	f8cc 4008 	str.w	r4, [ip, #8]
   822f0:	d3b4      	bcc.n	8225c <_free_r+0x94>
   822f2:	4b1a      	ldr	r3, [pc, #104]	; (8235c <_free_r+0x194>)
   822f4:	4630      	mov	r0, r6
   822f6:	6819      	ldr	r1, [r3, #0]
   822f8:	f7ff ff18 	bl	8212c <_malloc_trim_r>
   822fc:	e7ae      	b.n	8225c <_free_r+0x94>
   822fe:	2101      	movs	r1, #1
   82300:	e77f      	b.n	82202 <_free_r+0x3a>
   82302:	2a14      	cmp	r2, #20
   82304:	d80b      	bhi.n	8231e <_free_r+0x156>
   82306:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   8230a:	0041      	lsls	r1, r0, #1
   8230c:	e792      	b.n	82234 <_free_r+0x6c>
   8230e:	1080      	asrs	r0, r0, #2
   82310:	2501      	movs	r5, #1
   82312:	4085      	lsls	r5, r0
   82314:	6848      	ldr	r0, [r1, #4]
   82316:	4613      	mov	r3, r2
   82318:	4328      	orrs	r0, r5
   8231a:	6048      	str	r0, [r1, #4]
   8231c:	e79a      	b.n	82254 <_free_r+0x8c>
   8231e:	2a54      	cmp	r2, #84	; 0x54
   82320:	d803      	bhi.n	8232a <_free_r+0x162>
   82322:	0b18      	lsrs	r0, r3, #12
   82324:	306e      	adds	r0, #110	; 0x6e
   82326:	0041      	lsls	r1, r0, #1
   82328:	e784      	b.n	82234 <_free_r+0x6c>
   8232a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8232e:	d803      	bhi.n	82338 <_free_r+0x170>
   82330:	0bd8      	lsrs	r0, r3, #15
   82332:	3077      	adds	r0, #119	; 0x77
   82334:	0041      	lsls	r1, r0, #1
   82336:	e77d      	b.n	82234 <_free_r+0x6c>
   82338:	f240 5154 	movw	r1, #1364	; 0x554
   8233c:	428a      	cmp	r2, r1
   8233e:	d803      	bhi.n	82348 <_free_r+0x180>
   82340:	0c98      	lsrs	r0, r3, #18
   82342:	307c      	adds	r0, #124	; 0x7c
   82344:	0041      	lsls	r1, r0, #1
   82346:	e775      	b.n	82234 <_free_r+0x6c>
   82348:	21fc      	movs	r1, #252	; 0xfc
   8234a:	207e      	movs	r0, #126	; 0x7e
   8234c:	e772      	b.n	82234 <_free_r+0x6c>
   8234e:	bf00      	nop
   82350:	20070434 	.word	0x20070434
   82354:	2007043c 	.word	0x2007043c
   82358:	2007083c 	.word	0x2007083c
   8235c:	20070964 	.word	0x20070964

00082360 <_fwalk>:
   82360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82364:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   82368:	4688      	mov	r8, r1
   8236a:	d019      	beq.n	823a0 <_fwalk+0x40>
   8236c:	2600      	movs	r6, #0
   8236e:	687d      	ldr	r5, [r7, #4]
   82370:	68bc      	ldr	r4, [r7, #8]
   82372:	3d01      	subs	r5, #1
   82374:	d40e      	bmi.n	82394 <_fwalk+0x34>
   82376:	89a3      	ldrh	r3, [r4, #12]
   82378:	3d01      	subs	r5, #1
   8237a:	2b01      	cmp	r3, #1
   8237c:	d906      	bls.n	8238c <_fwalk+0x2c>
   8237e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82382:	4620      	mov	r0, r4
   82384:	3301      	adds	r3, #1
   82386:	d001      	beq.n	8238c <_fwalk+0x2c>
   82388:	47c0      	blx	r8
   8238a:	4306      	orrs	r6, r0
   8238c:	1c6b      	adds	r3, r5, #1
   8238e:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82392:	d1f0      	bne.n	82376 <_fwalk+0x16>
   82394:	683f      	ldr	r7, [r7, #0]
   82396:	2f00      	cmp	r7, #0
   82398:	d1e9      	bne.n	8236e <_fwalk+0xe>
   8239a:	4630      	mov	r0, r6
   8239c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823a0:	463e      	mov	r6, r7
   823a2:	4630      	mov	r0, r6
   823a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000823a8 <__smakebuf_r>:
   823a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   823aa:	898b      	ldrh	r3, [r1, #12]
   823ac:	b091      	sub	sp, #68	; 0x44
   823ae:	b29a      	uxth	r2, r3
   823b0:	0796      	lsls	r6, r2, #30
   823b2:	460c      	mov	r4, r1
   823b4:	4605      	mov	r5, r0
   823b6:	d437      	bmi.n	82428 <__smakebuf_r+0x80>
   823b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   823bc:	2900      	cmp	r1, #0
   823be:	db17      	blt.n	823f0 <__smakebuf_r+0x48>
   823c0:	aa01      	add	r2, sp, #4
   823c2:	f000 fc1f 	bl	82c04 <_fstat_r>
   823c6:	2800      	cmp	r0, #0
   823c8:	db10      	blt.n	823ec <__smakebuf_r+0x44>
   823ca:	9b02      	ldr	r3, [sp, #8]
   823cc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   823d0:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   823d4:	424f      	negs	r7, r1
   823d6:	414f      	adcs	r7, r1
   823d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   823dc:	d02c      	beq.n	82438 <__smakebuf_r+0x90>
   823de:	89a3      	ldrh	r3, [r4, #12]
   823e0:	f44f 6680 	mov.w	r6, #1024	; 0x400
   823e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   823e8:	81a3      	strh	r3, [r4, #12]
   823ea:	e00b      	b.n	82404 <__smakebuf_r+0x5c>
   823ec:	89a3      	ldrh	r3, [r4, #12]
   823ee:	b29a      	uxth	r2, r3
   823f0:	f012 0f80 	tst.w	r2, #128	; 0x80
   823f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   823f8:	81a3      	strh	r3, [r4, #12]
   823fa:	bf14      	ite	ne
   823fc:	2640      	movne	r6, #64	; 0x40
   823fe:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   82402:	2700      	movs	r7, #0
   82404:	4628      	mov	r0, r5
   82406:	4631      	mov	r1, r6
   82408:	f000 f846 	bl	82498 <_malloc_r>
   8240c:	89a3      	ldrh	r3, [r4, #12]
   8240e:	2800      	cmp	r0, #0
   82410:	d029      	beq.n	82466 <__smakebuf_r+0xbe>
   82412:	4a1b      	ldr	r2, [pc, #108]	; (82480 <__smakebuf_r+0xd8>)
   82414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82418:	63ea      	str	r2, [r5, #60]	; 0x3c
   8241a:	81a3      	strh	r3, [r4, #12]
   8241c:	6020      	str	r0, [r4, #0]
   8241e:	6120      	str	r0, [r4, #16]
   82420:	6166      	str	r6, [r4, #20]
   82422:	b9a7      	cbnz	r7, 8244e <__smakebuf_r+0xa6>
   82424:	b011      	add	sp, #68	; 0x44
   82426:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82428:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8242c:	2201      	movs	r2, #1
   8242e:	600b      	str	r3, [r1, #0]
   82430:	610b      	str	r3, [r1, #16]
   82432:	614a      	str	r2, [r1, #20]
   82434:	b011      	add	sp, #68	; 0x44
   82436:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82438:	4a12      	ldr	r2, [pc, #72]	; (82484 <__smakebuf_r+0xdc>)
   8243a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   8243c:	4293      	cmp	r3, r2
   8243e:	d1ce      	bne.n	823de <__smakebuf_r+0x36>
   82440:	89a3      	ldrh	r3, [r4, #12]
   82442:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82446:	4333      	orrs	r3, r6
   82448:	81a3      	strh	r3, [r4, #12]
   8244a:	64e6      	str	r6, [r4, #76]	; 0x4c
   8244c:	e7da      	b.n	82404 <__smakebuf_r+0x5c>
   8244e:	4628      	mov	r0, r5
   82450:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82454:	f000 fbea 	bl	82c2c <_isatty_r>
   82458:	2800      	cmp	r0, #0
   8245a:	d0e3      	beq.n	82424 <__smakebuf_r+0x7c>
   8245c:	89a3      	ldrh	r3, [r4, #12]
   8245e:	f043 0301 	orr.w	r3, r3, #1
   82462:	81a3      	strh	r3, [r4, #12]
   82464:	e7de      	b.n	82424 <__smakebuf_r+0x7c>
   82466:	059a      	lsls	r2, r3, #22
   82468:	d4dc      	bmi.n	82424 <__smakebuf_r+0x7c>
   8246a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8246e:	f043 0302 	orr.w	r3, r3, #2
   82472:	2101      	movs	r1, #1
   82474:	81a3      	strh	r3, [r4, #12]
   82476:	6022      	str	r2, [r4, #0]
   82478:	6122      	str	r2, [r4, #16]
   8247a:	6161      	str	r1, [r4, #20]
   8247c:	e7d2      	b.n	82424 <__smakebuf_r+0x7c>
   8247e:	bf00      	nop
   82480:	00081ff5 	.word	0x00081ff5
   82484:	00082a59 	.word	0x00082a59

00082488 <malloc>:
   82488:	4b02      	ldr	r3, [pc, #8]	; (82494 <malloc+0xc>)
   8248a:	4601      	mov	r1, r0
   8248c:	6818      	ldr	r0, [r3, #0]
   8248e:	f000 b803 	b.w	82498 <_malloc_r>
   82492:	bf00      	nop
   82494:	20070430 	.word	0x20070430

00082498 <_malloc_r>:
   82498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8249c:	f101 050b 	add.w	r5, r1, #11
   824a0:	2d16      	cmp	r5, #22
   824a2:	b083      	sub	sp, #12
   824a4:	4606      	mov	r6, r0
   824a6:	d927      	bls.n	824f8 <_malloc_r+0x60>
   824a8:	f035 0507 	bics.w	r5, r5, #7
   824ac:	d427      	bmi.n	824fe <_malloc_r+0x66>
   824ae:	42a9      	cmp	r1, r5
   824b0:	d825      	bhi.n	824fe <_malloc_r+0x66>
   824b2:	4630      	mov	r0, r6
   824b4:	f000 fa8c 	bl	829d0 <__malloc_lock>
   824b8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   824bc:	d226      	bcs.n	8250c <_malloc_r+0x74>
   824be:	4fc1      	ldr	r7, [pc, #772]	; (827c4 <_malloc_r+0x32c>)
   824c0:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   824c4:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   824c8:	68dc      	ldr	r4, [r3, #12]
   824ca:	429c      	cmp	r4, r3
   824cc:	f000 81d2 	beq.w	82874 <_malloc_r+0x3dc>
   824d0:	6863      	ldr	r3, [r4, #4]
   824d2:	68e2      	ldr	r2, [r4, #12]
   824d4:	f023 0303 	bic.w	r3, r3, #3
   824d8:	4423      	add	r3, r4
   824da:	6858      	ldr	r0, [r3, #4]
   824dc:	68a1      	ldr	r1, [r4, #8]
   824de:	f040 0501 	orr.w	r5, r0, #1
   824e2:	60ca      	str	r2, [r1, #12]
   824e4:	4630      	mov	r0, r6
   824e6:	6091      	str	r1, [r2, #8]
   824e8:	605d      	str	r5, [r3, #4]
   824ea:	f000 fa73 	bl	829d4 <__malloc_unlock>
   824ee:	3408      	adds	r4, #8
   824f0:	4620      	mov	r0, r4
   824f2:	b003      	add	sp, #12
   824f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   824f8:	2510      	movs	r5, #16
   824fa:	42a9      	cmp	r1, r5
   824fc:	d9d9      	bls.n	824b2 <_malloc_r+0x1a>
   824fe:	2400      	movs	r4, #0
   82500:	230c      	movs	r3, #12
   82502:	4620      	mov	r0, r4
   82504:	6033      	str	r3, [r6, #0]
   82506:	b003      	add	sp, #12
   82508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8250c:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   82510:	f000 8089 	beq.w	82626 <_malloc_r+0x18e>
   82514:	f1bc 0f04 	cmp.w	ip, #4
   82518:	f200 8160 	bhi.w	827dc <_malloc_r+0x344>
   8251c:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82520:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   82524:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82528:	4fa6      	ldr	r7, [pc, #664]	; (827c4 <_malloc_r+0x32c>)
   8252a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   8252e:	68cc      	ldr	r4, [r1, #12]
   82530:	42a1      	cmp	r1, r4
   82532:	d105      	bne.n	82540 <_malloc_r+0xa8>
   82534:	e00c      	b.n	82550 <_malloc_r+0xb8>
   82536:	2b00      	cmp	r3, #0
   82538:	da79      	bge.n	8262e <_malloc_r+0x196>
   8253a:	68e4      	ldr	r4, [r4, #12]
   8253c:	42a1      	cmp	r1, r4
   8253e:	d007      	beq.n	82550 <_malloc_r+0xb8>
   82540:	6862      	ldr	r2, [r4, #4]
   82542:	f022 0203 	bic.w	r2, r2, #3
   82546:	1b53      	subs	r3, r2, r5
   82548:	2b0f      	cmp	r3, #15
   8254a:	ddf4      	ble.n	82536 <_malloc_r+0x9e>
   8254c:	f10c 3cff 	add.w	ip, ip, #4294967295
   82550:	f10c 0c01 	add.w	ip, ip, #1
   82554:	4b9b      	ldr	r3, [pc, #620]	; (827c4 <_malloc_r+0x32c>)
   82556:	693c      	ldr	r4, [r7, #16]
   82558:	f103 0e08 	add.w	lr, r3, #8
   8255c:	4574      	cmp	r4, lr
   8255e:	f000 817e 	beq.w	8285e <_malloc_r+0x3c6>
   82562:	6861      	ldr	r1, [r4, #4]
   82564:	f021 0103 	bic.w	r1, r1, #3
   82568:	1b4a      	subs	r2, r1, r5
   8256a:	2a0f      	cmp	r2, #15
   8256c:	f300 8164 	bgt.w	82838 <_malloc_r+0x3a0>
   82570:	2a00      	cmp	r2, #0
   82572:	f8c3 e014 	str.w	lr, [r3, #20]
   82576:	f8c3 e010 	str.w	lr, [r3, #16]
   8257a:	da69      	bge.n	82650 <_malloc_r+0x1b8>
   8257c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82580:	f080 813a 	bcs.w	827f8 <_malloc_r+0x360>
   82584:	08c9      	lsrs	r1, r1, #3
   82586:	108a      	asrs	r2, r1, #2
   82588:	f04f 0801 	mov.w	r8, #1
   8258c:	fa08 f802 	lsl.w	r8, r8, r2
   82590:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   82594:	685a      	ldr	r2, [r3, #4]
   82596:	6888      	ldr	r0, [r1, #8]
   82598:	ea48 0202 	orr.w	r2, r8, r2
   8259c:	60a0      	str	r0, [r4, #8]
   8259e:	60e1      	str	r1, [r4, #12]
   825a0:	605a      	str	r2, [r3, #4]
   825a2:	608c      	str	r4, [r1, #8]
   825a4:	60c4      	str	r4, [r0, #12]
   825a6:	ea4f 03ac 	mov.w	r3, ip, asr #2
   825aa:	2001      	movs	r0, #1
   825ac:	4098      	lsls	r0, r3
   825ae:	4290      	cmp	r0, r2
   825b0:	d85b      	bhi.n	8266a <_malloc_r+0x1d2>
   825b2:	4202      	tst	r2, r0
   825b4:	d106      	bne.n	825c4 <_malloc_r+0x12c>
   825b6:	f02c 0c03 	bic.w	ip, ip, #3
   825ba:	0040      	lsls	r0, r0, #1
   825bc:	4202      	tst	r2, r0
   825be:	f10c 0c04 	add.w	ip, ip, #4
   825c2:	d0fa      	beq.n	825ba <_malloc_r+0x122>
   825c4:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   825c8:	4644      	mov	r4, r8
   825ca:	46e1      	mov	r9, ip
   825cc:	68e3      	ldr	r3, [r4, #12]
   825ce:	429c      	cmp	r4, r3
   825d0:	d107      	bne.n	825e2 <_malloc_r+0x14a>
   825d2:	e146      	b.n	82862 <_malloc_r+0x3ca>
   825d4:	2a00      	cmp	r2, #0
   825d6:	f280 8157 	bge.w	82888 <_malloc_r+0x3f0>
   825da:	68db      	ldr	r3, [r3, #12]
   825dc:	429c      	cmp	r4, r3
   825de:	f000 8140 	beq.w	82862 <_malloc_r+0x3ca>
   825e2:	6859      	ldr	r1, [r3, #4]
   825e4:	f021 0103 	bic.w	r1, r1, #3
   825e8:	1b4a      	subs	r2, r1, r5
   825ea:	2a0f      	cmp	r2, #15
   825ec:	ddf2      	ble.n	825d4 <_malloc_r+0x13c>
   825ee:	461c      	mov	r4, r3
   825f0:	f854 cf08 	ldr.w	ip, [r4, #8]!
   825f4:	68d9      	ldr	r1, [r3, #12]
   825f6:	f045 0901 	orr.w	r9, r5, #1
   825fa:	f042 0801 	orr.w	r8, r2, #1
   825fe:	441d      	add	r5, r3
   82600:	f8c3 9004 	str.w	r9, [r3, #4]
   82604:	4630      	mov	r0, r6
   82606:	f8cc 100c 	str.w	r1, [ip, #12]
   8260a:	f8c1 c008 	str.w	ip, [r1, #8]
   8260e:	617d      	str	r5, [r7, #20]
   82610:	613d      	str	r5, [r7, #16]
   82612:	f8c5 e00c 	str.w	lr, [r5, #12]
   82616:	f8c5 e008 	str.w	lr, [r5, #8]
   8261a:	f8c5 8004 	str.w	r8, [r5, #4]
   8261e:	50aa      	str	r2, [r5, r2]
   82620:	f000 f9d8 	bl	829d4 <__malloc_unlock>
   82624:	e764      	b.n	824f0 <_malloc_r+0x58>
   82626:	217e      	movs	r1, #126	; 0x7e
   82628:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   8262c:	e77c      	b.n	82528 <_malloc_r+0x90>
   8262e:	4422      	add	r2, r4
   82630:	6850      	ldr	r0, [r2, #4]
   82632:	68e3      	ldr	r3, [r4, #12]
   82634:	68a1      	ldr	r1, [r4, #8]
   82636:	f040 0501 	orr.w	r5, r0, #1
   8263a:	60cb      	str	r3, [r1, #12]
   8263c:	4630      	mov	r0, r6
   8263e:	6099      	str	r1, [r3, #8]
   82640:	6055      	str	r5, [r2, #4]
   82642:	f000 f9c7 	bl	829d4 <__malloc_unlock>
   82646:	3408      	adds	r4, #8
   82648:	4620      	mov	r0, r4
   8264a:	b003      	add	sp, #12
   8264c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82650:	4421      	add	r1, r4
   82652:	684b      	ldr	r3, [r1, #4]
   82654:	4630      	mov	r0, r6
   82656:	f043 0301 	orr.w	r3, r3, #1
   8265a:	604b      	str	r3, [r1, #4]
   8265c:	f000 f9ba 	bl	829d4 <__malloc_unlock>
   82660:	3408      	adds	r4, #8
   82662:	4620      	mov	r0, r4
   82664:	b003      	add	sp, #12
   82666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8266a:	68bc      	ldr	r4, [r7, #8]
   8266c:	6863      	ldr	r3, [r4, #4]
   8266e:	f023 0903 	bic.w	r9, r3, #3
   82672:	45a9      	cmp	r9, r5
   82674:	d304      	bcc.n	82680 <_malloc_r+0x1e8>
   82676:	ebc5 0309 	rsb	r3, r5, r9
   8267a:	2b0f      	cmp	r3, #15
   8267c:	f300 8091 	bgt.w	827a2 <_malloc_r+0x30a>
   82680:	4b51      	ldr	r3, [pc, #324]	; (827c8 <_malloc_r+0x330>)
   82682:	4a52      	ldr	r2, [pc, #328]	; (827cc <_malloc_r+0x334>)
   82684:	6819      	ldr	r1, [r3, #0]
   82686:	6813      	ldr	r3, [r2, #0]
   82688:	eb05 0a01 	add.w	sl, r5, r1
   8268c:	3301      	adds	r3, #1
   8268e:	eb04 0b09 	add.w	fp, r4, r9
   82692:	f000 8161 	beq.w	82958 <_malloc_r+0x4c0>
   82696:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   8269a:	f10a 0a0f 	add.w	sl, sl, #15
   8269e:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   826a2:	f02a 0a0f 	bic.w	sl, sl, #15
   826a6:	4630      	mov	r0, r6
   826a8:	4651      	mov	r1, sl
   826aa:	9201      	str	r2, [sp, #4]
   826ac:	f000 f994 	bl	829d8 <_sbrk_r>
   826b0:	f1b0 3fff 	cmp.w	r0, #4294967295
   826b4:	4680      	mov	r8, r0
   826b6:	9a01      	ldr	r2, [sp, #4]
   826b8:	f000 8101 	beq.w	828be <_malloc_r+0x426>
   826bc:	4583      	cmp	fp, r0
   826be:	f200 80fb 	bhi.w	828b8 <_malloc_r+0x420>
   826c2:	f8df c114 	ldr.w	ip, [pc, #276]	; 827d8 <_malloc_r+0x340>
   826c6:	45c3      	cmp	fp, r8
   826c8:	f8dc 3000 	ldr.w	r3, [ip]
   826cc:	4453      	add	r3, sl
   826ce:	f8cc 3000 	str.w	r3, [ip]
   826d2:	f000 814a 	beq.w	8296a <_malloc_r+0x4d2>
   826d6:	6812      	ldr	r2, [r2, #0]
   826d8:	493c      	ldr	r1, [pc, #240]	; (827cc <_malloc_r+0x334>)
   826da:	3201      	adds	r2, #1
   826dc:	bf1b      	ittet	ne
   826de:	ebcb 0b08 	rsbne	fp, fp, r8
   826e2:	445b      	addne	r3, fp
   826e4:	f8c1 8000 	streq.w	r8, [r1]
   826e8:	f8cc 3000 	strne.w	r3, [ip]
   826ec:	f018 0307 	ands.w	r3, r8, #7
   826f0:	f000 8114 	beq.w	8291c <_malloc_r+0x484>
   826f4:	f1c3 0208 	rsb	r2, r3, #8
   826f8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   826fc:	4490      	add	r8, r2
   826fe:	3308      	adds	r3, #8
   82700:	44c2      	add	sl, r8
   82702:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   82706:	ebca 0a03 	rsb	sl, sl, r3
   8270a:	4651      	mov	r1, sl
   8270c:	4630      	mov	r0, r6
   8270e:	f8cd c004 	str.w	ip, [sp, #4]
   82712:	f000 f961 	bl	829d8 <_sbrk_r>
   82716:	1c43      	adds	r3, r0, #1
   82718:	f8dd c004 	ldr.w	ip, [sp, #4]
   8271c:	f000 8135 	beq.w	8298a <_malloc_r+0x4f2>
   82720:	ebc8 0200 	rsb	r2, r8, r0
   82724:	4452      	add	r2, sl
   82726:	f042 0201 	orr.w	r2, r2, #1
   8272a:	f8dc 3000 	ldr.w	r3, [ip]
   8272e:	42bc      	cmp	r4, r7
   82730:	4453      	add	r3, sl
   82732:	f8c7 8008 	str.w	r8, [r7, #8]
   82736:	f8cc 3000 	str.w	r3, [ip]
   8273a:	f8c8 2004 	str.w	r2, [r8, #4]
   8273e:	f8df a098 	ldr.w	sl, [pc, #152]	; 827d8 <_malloc_r+0x340>
   82742:	d015      	beq.n	82770 <_malloc_r+0x2d8>
   82744:	f1b9 0f0f 	cmp.w	r9, #15
   82748:	f240 80eb 	bls.w	82922 <_malloc_r+0x48a>
   8274c:	6861      	ldr	r1, [r4, #4]
   8274e:	f1a9 020c 	sub.w	r2, r9, #12
   82752:	f022 0207 	bic.w	r2, r2, #7
   82756:	f001 0101 	and.w	r1, r1, #1
   8275a:	ea42 0e01 	orr.w	lr, r2, r1
   8275e:	2005      	movs	r0, #5
   82760:	18a1      	adds	r1, r4, r2
   82762:	2a0f      	cmp	r2, #15
   82764:	f8c4 e004 	str.w	lr, [r4, #4]
   82768:	6048      	str	r0, [r1, #4]
   8276a:	6088      	str	r0, [r1, #8]
   8276c:	f200 8111 	bhi.w	82992 <_malloc_r+0x4fa>
   82770:	4a17      	ldr	r2, [pc, #92]	; (827d0 <_malloc_r+0x338>)
   82772:	68bc      	ldr	r4, [r7, #8]
   82774:	6811      	ldr	r1, [r2, #0]
   82776:	428b      	cmp	r3, r1
   82778:	bf88      	it	hi
   8277a:	6013      	strhi	r3, [r2, #0]
   8277c:	4a15      	ldr	r2, [pc, #84]	; (827d4 <_malloc_r+0x33c>)
   8277e:	6811      	ldr	r1, [r2, #0]
   82780:	428b      	cmp	r3, r1
   82782:	bf88      	it	hi
   82784:	6013      	strhi	r3, [r2, #0]
   82786:	6862      	ldr	r2, [r4, #4]
   82788:	f022 0203 	bic.w	r2, r2, #3
   8278c:	4295      	cmp	r5, r2
   8278e:	ebc5 0302 	rsb	r3, r5, r2
   82792:	d801      	bhi.n	82798 <_malloc_r+0x300>
   82794:	2b0f      	cmp	r3, #15
   82796:	dc04      	bgt.n	827a2 <_malloc_r+0x30a>
   82798:	4630      	mov	r0, r6
   8279a:	f000 f91b 	bl	829d4 <__malloc_unlock>
   8279e:	2400      	movs	r4, #0
   827a0:	e6a6      	b.n	824f0 <_malloc_r+0x58>
   827a2:	f045 0201 	orr.w	r2, r5, #1
   827a6:	f043 0301 	orr.w	r3, r3, #1
   827aa:	4425      	add	r5, r4
   827ac:	6062      	str	r2, [r4, #4]
   827ae:	4630      	mov	r0, r6
   827b0:	60bd      	str	r5, [r7, #8]
   827b2:	606b      	str	r3, [r5, #4]
   827b4:	f000 f90e 	bl	829d4 <__malloc_unlock>
   827b8:	3408      	adds	r4, #8
   827ba:	4620      	mov	r0, r4
   827bc:	b003      	add	sp, #12
   827be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   827c2:	bf00      	nop
   827c4:	20070434 	.word	0x20070434
   827c8:	20070964 	.word	0x20070964
   827cc:	20070840 	.word	0x20070840
   827d0:	20070960 	.word	0x20070960
   827d4:	2007095c 	.word	0x2007095c
   827d8:	20070968 	.word	0x20070968
   827dc:	f1bc 0f14 	cmp.w	ip, #20
   827e0:	d961      	bls.n	828a6 <_malloc_r+0x40e>
   827e2:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   827e6:	f200 808f 	bhi.w	82908 <_malloc_r+0x470>
   827ea:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   827ee:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   827f2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   827f6:	e697      	b.n	82528 <_malloc_r+0x90>
   827f8:	0a4b      	lsrs	r3, r1, #9
   827fa:	2b04      	cmp	r3, #4
   827fc:	d958      	bls.n	828b0 <_malloc_r+0x418>
   827fe:	2b14      	cmp	r3, #20
   82800:	f200 80ad 	bhi.w	8295e <_malloc_r+0x4c6>
   82804:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   82808:	0050      	lsls	r0, r2, #1
   8280a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   8280e:	6883      	ldr	r3, [r0, #8]
   82810:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 829cc <_malloc_r+0x534>
   82814:	4283      	cmp	r3, r0
   82816:	f000 808a 	beq.w	8292e <_malloc_r+0x496>
   8281a:	685a      	ldr	r2, [r3, #4]
   8281c:	f022 0203 	bic.w	r2, r2, #3
   82820:	4291      	cmp	r1, r2
   82822:	d202      	bcs.n	8282a <_malloc_r+0x392>
   82824:	689b      	ldr	r3, [r3, #8]
   82826:	4298      	cmp	r0, r3
   82828:	d1f7      	bne.n	8281a <_malloc_r+0x382>
   8282a:	68d9      	ldr	r1, [r3, #12]
   8282c:	687a      	ldr	r2, [r7, #4]
   8282e:	60e1      	str	r1, [r4, #12]
   82830:	60a3      	str	r3, [r4, #8]
   82832:	608c      	str	r4, [r1, #8]
   82834:	60dc      	str	r4, [r3, #12]
   82836:	e6b6      	b.n	825a6 <_malloc_r+0x10e>
   82838:	f045 0701 	orr.w	r7, r5, #1
   8283c:	f042 0101 	orr.w	r1, r2, #1
   82840:	4425      	add	r5, r4
   82842:	6067      	str	r7, [r4, #4]
   82844:	4630      	mov	r0, r6
   82846:	615d      	str	r5, [r3, #20]
   82848:	611d      	str	r5, [r3, #16]
   8284a:	f8c5 e00c 	str.w	lr, [r5, #12]
   8284e:	f8c5 e008 	str.w	lr, [r5, #8]
   82852:	6069      	str	r1, [r5, #4]
   82854:	50aa      	str	r2, [r5, r2]
   82856:	3408      	adds	r4, #8
   82858:	f000 f8bc 	bl	829d4 <__malloc_unlock>
   8285c:	e648      	b.n	824f0 <_malloc_r+0x58>
   8285e:	685a      	ldr	r2, [r3, #4]
   82860:	e6a1      	b.n	825a6 <_malloc_r+0x10e>
   82862:	f109 0901 	add.w	r9, r9, #1
   82866:	f019 0f03 	tst.w	r9, #3
   8286a:	f104 0408 	add.w	r4, r4, #8
   8286e:	f47f aead 	bne.w	825cc <_malloc_r+0x134>
   82872:	e02d      	b.n	828d0 <_malloc_r+0x438>
   82874:	f104 0308 	add.w	r3, r4, #8
   82878:	6964      	ldr	r4, [r4, #20]
   8287a:	42a3      	cmp	r3, r4
   8287c:	bf08      	it	eq
   8287e:	f10c 0c02 	addeq.w	ip, ip, #2
   82882:	f43f ae67 	beq.w	82554 <_malloc_r+0xbc>
   82886:	e623      	b.n	824d0 <_malloc_r+0x38>
   82888:	4419      	add	r1, r3
   8288a:	6848      	ldr	r0, [r1, #4]
   8288c:	461c      	mov	r4, r3
   8288e:	f854 2f08 	ldr.w	r2, [r4, #8]!
   82892:	68db      	ldr	r3, [r3, #12]
   82894:	f040 0501 	orr.w	r5, r0, #1
   82898:	604d      	str	r5, [r1, #4]
   8289a:	4630      	mov	r0, r6
   8289c:	60d3      	str	r3, [r2, #12]
   8289e:	609a      	str	r2, [r3, #8]
   828a0:	f000 f898 	bl	829d4 <__malloc_unlock>
   828a4:	e624      	b.n	824f0 <_malloc_r+0x58>
   828a6:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   828aa:	ea4f 014c 	mov.w	r1, ip, lsl #1
   828ae:	e63b      	b.n	82528 <_malloc_r+0x90>
   828b0:	098a      	lsrs	r2, r1, #6
   828b2:	3238      	adds	r2, #56	; 0x38
   828b4:	0050      	lsls	r0, r2, #1
   828b6:	e7a8      	b.n	8280a <_malloc_r+0x372>
   828b8:	42bc      	cmp	r4, r7
   828ba:	f43f af02 	beq.w	826c2 <_malloc_r+0x22a>
   828be:	68bc      	ldr	r4, [r7, #8]
   828c0:	6862      	ldr	r2, [r4, #4]
   828c2:	f022 0203 	bic.w	r2, r2, #3
   828c6:	e761      	b.n	8278c <_malloc_r+0x2f4>
   828c8:	f8d8 8000 	ldr.w	r8, [r8]
   828cc:	4598      	cmp	r8, r3
   828ce:	d17a      	bne.n	829c6 <_malloc_r+0x52e>
   828d0:	f01c 0f03 	tst.w	ip, #3
   828d4:	f1a8 0308 	sub.w	r3, r8, #8
   828d8:	f10c 3cff 	add.w	ip, ip, #4294967295
   828dc:	d1f4      	bne.n	828c8 <_malloc_r+0x430>
   828de:	687b      	ldr	r3, [r7, #4]
   828e0:	ea23 0300 	bic.w	r3, r3, r0
   828e4:	607b      	str	r3, [r7, #4]
   828e6:	0040      	lsls	r0, r0, #1
   828e8:	4298      	cmp	r0, r3
   828ea:	f63f aebe 	bhi.w	8266a <_malloc_r+0x1d2>
   828ee:	2800      	cmp	r0, #0
   828f0:	f43f aebb 	beq.w	8266a <_malloc_r+0x1d2>
   828f4:	4203      	tst	r3, r0
   828f6:	46cc      	mov	ip, r9
   828f8:	f47f ae64 	bne.w	825c4 <_malloc_r+0x12c>
   828fc:	0040      	lsls	r0, r0, #1
   828fe:	4203      	tst	r3, r0
   82900:	f10c 0c04 	add.w	ip, ip, #4
   82904:	d0fa      	beq.n	828fc <_malloc_r+0x464>
   82906:	e65d      	b.n	825c4 <_malloc_r+0x12c>
   82908:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   8290c:	d819      	bhi.n	82942 <_malloc_r+0x4aa>
   8290e:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   82912:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   82916:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8291a:	e605      	b.n	82528 <_malloc_r+0x90>
   8291c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82920:	e6ee      	b.n	82700 <_malloc_r+0x268>
   82922:	2301      	movs	r3, #1
   82924:	f8c8 3004 	str.w	r3, [r8, #4]
   82928:	4644      	mov	r4, r8
   8292a:	2200      	movs	r2, #0
   8292c:	e72e      	b.n	8278c <_malloc_r+0x2f4>
   8292e:	1092      	asrs	r2, r2, #2
   82930:	2001      	movs	r0, #1
   82932:	4090      	lsls	r0, r2
   82934:	f8d8 2004 	ldr.w	r2, [r8, #4]
   82938:	4619      	mov	r1, r3
   8293a:	4302      	orrs	r2, r0
   8293c:	f8c8 2004 	str.w	r2, [r8, #4]
   82940:	e775      	b.n	8282e <_malloc_r+0x396>
   82942:	f240 5354 	movw	r3, #1364	; 0x554
   82946:	459c      	cmp	ip, r3
   82948:	d81b      	bhi.n	82982 <_malloc_r+0x4ea>
   8294a:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   8294e:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   82952:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82956:	e5e7      	b.n	82528 <_malloc_r+0x90>
   82958:	f10a 0a10 	add.w	sl, sl, #16
   8295c:	e6a3      	b.n	826a6 <_malloc_r+0x20e>
   8295e:	2b54      	cmp	r3, #84	; 0x54
   82960:	d81f      	bhi.n	829a2 <_malloc_r+0x50a>
   82962:	0b0a      	lsrs	r2, r1, #12
   82964:	326e      	adds	r2, #110	; 0x6e
   82966:	0050      	lsls	r0, r2, #1
   82968:	e74f      	b.n	8280a <_malloc_r+0x372>
   8296a:	f3cb 010b 	ubfx	r1, fp, #0, #12
   8296e:	2900      	cmp	r1, #0
   82970:	f47f aeb1 	bne.w	826d6 <_malloc_r+0x23e>
   82974:	eb0a 0109 	add.w	r1, sl, r9
   82978:	68ba      	ldr	r2, [r7, #8]
   8297a:	f041 0101 	orr.w	r1, r1, #1
   8297e:	6051      	str	r1, [r2, #4]
   82980:	e6f6      	b.n	82770 <_malloc_r+0x2d8>
   82982:	21fc      	movs	r1, #252	; 0xfc
   82984:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   82988:	e5ce      	b.n	82528 <_malloc_r+0x90>
   8298a:	2201      	movs	r2, #1
   8298c:	f04f 0a00 	mov.w	sl, #0
   82990:	e6cb      	b.n	8272a <_malloc_r+0x292>
   82992:	f104 0108 	add.w	r1, r4, #8
   82996:	4630      	mov	r0, r6
   82998:	f7ff fc16 	bl	821c8 <_free_r>
   8299c:	f8da 3000 	ldr.w	r3, [sl]
   829a0:	e6e6      	b.n	82770 <_malloc_r+0x2d8>
   829a2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   829a6:	d803      	bhi.n	829b0 <_malloc_r+0x518>
   829a8:	0bca      	lsrs	r2, r1, #15
   829aa:	3277      	adds	r2, #119	; 0x77
   829ac:	0050      	lsls	r0, r2, #1
   829ae:	e72c      	b.n	8280a <_malloc_r+0x372>
   829b0:	f240 5254 	movw	r2, #1364	; 0x554
   829b4:	4293      	cmp	r3, r2
   829b6:	d803      	bhi.n	829c0 <_malloc_r+0x528>
   829b8:	0c8a      	lsrs	r2, r1, #18
   829ba:	327c      	adds	r2, #124	; 0x7c
   829bc:	0050      	lsls	r0, r2, #1
   829be:	e724      	b.n	8280a <_malloc_r+0x372>
   829c0:	20fc      	movs	r0, #252	; 0xfc
   829c2:	227e      	movs	r2, #126	; 0x7e
   829c4:	e721      	b.n	8280a <_malloc_r+0x372>
   829c6:	687b      	ldr	r3, [r7, #4]
   829c8:	e78d      	b.n	828e6 <_malloc_r+0x44e>
   829ca:	bf00      	nop
   829cc:	20070434 	.word	0x20070434

000829d0 <__malloc_lock>:
   829d0:	4770      	bx	lr
   829d2:	bf00      	nop

000829d4 <__malloc_unlock>:
   829d4:	4770      	bx	lr
   829d6:	bf00      	nop

000829d8 <_sbrk_r>:
   829d8:	b538      	push	{r3, r4, r5, lr}
   829da:	4c07      	ldr	r4, [pc, #28]	; (829f8 <_sbrk_r+0x20>)
   829dc:	2300      	movs	r3, #0
   829de:	4605      	mov	r5, r0
   829e0:	4608      	mov	r0, r1
   829e2:	6023      	str	r3, [r4, #0]
   829e4:	f7ff f856 	bl	81a94 <_sbrk>
   829e8:	1c43      	adds	r3, r0, #1
   829ea:	d000      	beq.n	829ee <_sbrk_r+0x16>
   829ec:	bd38      	pop	{r3, r4, r5, pc}
   829ee:	6823      	ldr	r3, [r4, #0]
   829f0:	2b00      	cmp	r3, #0
   829f2:	d0fb      	beq.n	829ec <_sbrk_r+0x14>
   829f4:	602b      	str	r3, [r5, #0]
   829f6:	bd38      	pop	{r3, r4, r5, pc}
   829f8:	20070a18 	.word	0x20070a18

000829fc <__sread>:
   829fc:	b510      	push	{r4, lr}
   829fe:	460c      	mov	r4, r1
   82a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82a04:	f000 f938 	bl	82c78 <_read_r>
   82a08:	2800      	cmp	r0, #0
   82a0a:	db03      	blt.n	82a14 <__sread+0x18>
   82a0c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   82a0e:	4403      	add	r3, r0
   82a10:	6523      	str	r3, [r4, #80]	; 0x50
   82a12:	bd10      	pop	{r4, pc}
   82a14:	89a3      	ldrh	r3, [r4, #12]
   82a16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   82a1a:	81a3      	strh	r3, [r4, #12]
   82a1c:	bd10      	pop	{r4, pc}
   82a1e:	bf00      	nop

00082a20 <__swrite>:
   82a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82a24:	460c      	mov	r4, r1
   82a26:	8989      	ldrh	r1, [r1, #12]
   82a28:	461d      	mov	r5, r3
   82a2a:	05cb      	lsls	r3, r1, #23
   82a2c:	4616      	mov	r6, r2
   82a2e:	4607      	mov	r7, r0
   82a30:	d506      	bpl.n	82a40 <__swrite+0x20>
   82a32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82a36:	2200      	movs	r2, #0
   82a38:	2302      	movs	r3, #2
   82a3a:	f000 f909 	bl	82c50 <_lseek_r>
   82a3e:	89a1      	ldrh	r1, [r4, #12]
   82a40:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   82a44:	81a1      	strh	r1, [r4, #12]
   82a46:	4638      	mov	r0, r7
   82a48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82a4c:	4632      	mov	r2, r6
   82a4e:	462b      	mov	r3, r5
   82a50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82a54:	f000 b814 	b.w	82a80 <_write_r>

00082a58 <__sseek>:
   82a58:	b510      	push	{r4, lr}
   82a5a:	460c      	mov	r4, r1
   82a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82a60:	f000 f8f6 	bl	82c50 <_lseek_r>
   82a64:	89a3      	ldrh	r3, [r4, #12]
   82a66:	1c42      	adds	r2, r0, #1
   82a68:	bf0e      	itee	eq
   82a6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   82a6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   82a72:	6520      	strne	r0, [r4, #80]	; 0x50
   82a74:	81a3      	strh	r3, [r4, #12]
   82a76:	bd10      	pop	{r4, pc}

00082a78 <__sclose>:
   82a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82a7c:	f000 b868 	b.w	82b50 <_close_r>

00082a80 <_write_r>:
   82a80:	b570      	push	{r4, r5, r6, lr}
   82a82:	4c08      	ldr	r4, [pc, #32]	; (82aa4 <_write_r+0x24>)
   82a84:	4606      	mov	r6, r0
   82a86:	2500      	movs	r5, #0
   82a88:	4608      	mov	r0, r1
   82a8a:	4611      	mov	r1, r2
   82a8c:	461a      	mov	r2, r3
   82a8e:	6025      	str	r5, [r4, #0]
   82a90:	f7fd fcc8 	bl	80424 <_write>
   82a94:	1c43      	adds	r3, r0, #1
   82a96:	d000      	beq.n	82a9a <_write_r+0x1a>
   82a98:	bd70      	pop	{r4, r5, r6, pc}
   82a9a:	6823      	ldr	r3, [r4, #0]
   82a9c:	2b00      	cmp	r3, #0
   82a9e:	d0fb      	beq.n	82a98 <_write_r+0x18>
   82aa0:	6033      	str	r3, [r6, #0]
   82aa2:	bd70      	pop	{r4, r5, r6, pc}
   82aa4:	20070a18 	.word	0x20070a18

00082aa8 <__register_exitproc>:
   82aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   82aaa:	4c27      	ldr	r4, [pc, #156]	; (82b48 <__register_exitproc+0xa0>)
   82aac:	b085      	sub	sp, #20
   82aae:	6826      	ldr	r6, [r4, #0]
   82ab0:	4607      	mov	r7, r0
   82ab2:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   82ab6:	2c00      	cmp	r4, #0
   82ab8:	d040      	beq.n	82b3c <__register_exitproc+0x94>
   82aba:	6865      	ldr	r5, [r4, #4]
   82abc:	2d1f      	cmp	r5, #31
   82abe:	dd1e      	ble.n	82afe <__register_exitproc+0x56>
   82ac0:	4822      	ldr	r0, [pc, #136]	; (82b4c <__register_exitproc+0xa4>)
   82ac2:	b918      	cbnz	r0, 82acc <__register_exitproc+0x24>
   82ac4:	f04f 30ff 	mov.w	r0, #4294967295
   82ac8:	b005      	add	sp, #20
   82aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82acc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   82ad0:	9103      	str	r1, [sp, #12]
   82ad2:	9202      	str	r2, [sp, #8]
   82ad4:	9301      	str	r3, [sp, #4]
   82ad6:	f7ff fcd7 	bl	82488 <malloc>
   82ada:	9903      	ldr	r1, [sp, #12]
   82adc:	4604      	mov	r4, r0
   82ade:	9a02      	ldr	r2, [sp, #8]
   82ae0:	9b01      	ldr	r3, [sp, #4]
   82ae2:	2800      	cmp	r0, #0
   82ae4:	d0ee      	beq.n	82ac4 <__register_exitproc+0x1c>
   82ae6:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   82aea:	2000      	movs	r0, #0
   82aec:	6025      	str	r5, [r4, #0]
   82aee:	6060      	str	r0, [r4, #4]
   82af0:	4605      	mov	r5, r0
   82af2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   82af6:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   82afa:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   82afe:	b93f      	cbnz	r7, 82b10 <__register_exitproc+0x68>
   82b00:	1c6b      	adds	r3, r5, #1
   82b02:	2000      	movs	r0, #0
   82b04:	3502      	adds	r5, #2
   82b06:	6063      	str	r3, [r4, #4]
   82b08:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   82b0c:	b005      	add	sp, #20
   82b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82b10:	2601      	movs	r6, #1
   82b12:	40ae      	lsls	r6, r5
   82b14:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   82b18:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   82b1c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   82b20:	2f02      	cmp	r7, #2
   82b22:	ea42 0206 	orr.w	r2, r2, r6
   82b26:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   82b2a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   82b2e:	d1e7      	bne.n	82b00 <__register_exitproc+0x58>
   82b30:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   82b34:	431e      	orrs	r6, r3
   82b36:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   82b3a:	e7e1      	b.n	82b00 <__register_exitproc+0x58>
   82b3c:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   82b40:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   82b44:	e7b9      	b.n	82aba <__register_exitproc+0x12>
   82b46:	bf00      	nop
   82b48:	00082d50 	.word	0x00082d50
   82b4c:	00082489 	.word	0x00082489

00082b50 <_close_r>:
   82b50:	b538      	push	{r3, r4, r5, lr}
   82b52:	4c07      	ldr	r4, [pc, #28]	; (82b70 <_close_r+0x20>)
   82b54:	2300      	movs	r3, #0
   82b56:	4605      	mov	r5, r0
   82b58:	4608      	mov	r0, r1
   82b5a:	6023      	str	r3, [r4, #0]
   82b5c:	f7fe ffb4 	bl	81ac8 <_close>
   82b60:	1c43      	adds	r3, r0, #1
   82b62:	d000      	beq.n	82b66 <_close_r+0x16>
   82b64:	bd38      	pop	{r3, r4, r5, pc}
   82b66:	6823      	ldr	r3, [r4, #0]
   82b68:	2b00      	cmp	r3, #0
   82b6a:	d0fb      	beq.n	82b64 <_close_r+0x14>
   82b6c:	602b      	str	r3, [r5, #0]
   82b6e:	bd38      	pop	{r3, r4, r5, pc}
   82b70:	20070a18 	.word	0x20070a18

00082b74 <_fclose_r>:
   82b74:	b570      	push	{r4, r5, r6, lr}
   82b76:	460c      	mov	r4, r1
   82b78:	4605      	mov	r5, r0
   82b7a:	b131      	cbz	r1, 82b8a <_fclose_r+0x16>
   82b7c:	b110      	cbz	r0, 82b84 <_fclose_r+0x10>
   82b7e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82b80:	2b00      	cmp	r3, #0
   82b82:	d02f      	beq.n	82be4 <_fclose_r+0x70>
   82b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82b88:	b90b      	cbnz	r3, 82b8e <_fclose_r+0x1a>
   82b8a:	2000      	movs	r0, #0
   82b8c:	bd70      	pop	{r4, r5, r6, pc}
   82b8e:	4628      	mov	r0, r5
   82b90:	4621      	mov	r1, r4
   82b92:	f7ff fa19 	bl	81fc8 <_fflush_r>
   82b96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   82b98:	4606      	mov	r6, r0
   82b9a:	b133      	cbz	r3, 82baa <_fclose_r+0x36>
   82b9c:	4628      	mov	r0, r5
   82b9e:	69e1      	ldr	r1, [r4, #28]
   82ba0:	4798      	blx	r3
   82ba2:	2800      	cmp	r0, #0
   82ba4:	bfb8      	it	lt
   82ba6:	f04f 36ff 	movlt.w	r6, #4294967295
   82baa:	89a3      	ldrh	r3, [r4, #12]
   82bac:	061b      	lsls	r3, r3, #24
   82bae:	d41c      	bmi.n	82bea <_fclose_r+0x76>
   82bb0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82bb2:	b141      	cbz	r1, 82bc6 <_fclose_r+0x52>
   82bb4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82bb8:	4299      	cmp	r1, r3
   82bba:	d002      	beq.n	82bc2 <_fclose_r+0x4e>
   82bbc:	4628      	mov	r0, r5
   82bbe:	f7ff fb03 	bl	821c8 <_free_r>
   82bc2:	2300      	movs	r3, #0
   82bc4:	6323      	str	r3, [r4, #48]	; 0x30
   82bc6:	6c61      	ldr	r1, [r4, #68]	; 0x44
   82bc8:	b121      	cbz	r1, 82bd4 <_fclose_r+0x60>
   82bca:	4628      	mov	r0, r5
   82bcc:	f7ff fafc 	bl	821c8 <_free_r>
   82bd0:	2300      	movs	r3, #0
   82bd2:	6463      	str	r3, [r4, #68]	; 0x44
   82bd4:	f7ff fa8e 	bl	820f4 <__sfp_lock_acquire>
   82bd8:	2300      	movs	r3, #0
   82bda:	81a3      	strh	r3, [r4, #12]
   82bdc:	f7ff fa8c 	bl	820f8 <__sfp_lock_release>
   82be0:	4630      	mov	r0, r6
   82be2:	bd70      	pop	{r4, r5, r6, pc}
   82be4:	f7ff fa0c 	bl	82000 <__sinit>
   82be8:	e7cc      	b.n	82b84 <_fclose_r+0x10>
   82bea:	4628      	mov	r0, r5
   82bec:	6921      	ldr	r1, [r4, #16]
   82bee:	f7ff faeb 	bl	821c8 <_free_r>
   82bf2:	e7dd      	b.n	82bb0 <_fclose_r+0x3c>

00082bf4 <fclose>:
   82bf4:	4b02      	ldr	r3, [pc, #8]	; (82c00 <fclose+0xc>)
   82bf6:	4601      	mov	r1, r0
   82bf8:	6818      	ldr	r0, [r3, #0]
   82bfa:	f7ff bfbb 	b.w	82b74 <_fclose_r>
   82bfe:	bf00      	nop
   82c00:	20070430 	.word	0x20070430

00082c04 <_fstat_r>:
   82c04:	b538      	push	{r3, r4, r5, lr}
   82c06:	4c08      	ldr	r4, [pc, #32]	; (82c28 <_fstat_r+0x24>)
   82c08:	2300      	movs	r3, #0
   82c0a:	4605      	mov	r5, r0
   82c0c:	4608      	mov	r0, r1
   82c0e:	4611      	mov	r1, r2
   82c10:	6023      	str	r3, [r4, #0]
   82c12:	f7fe ff5d 	bl	81ad0 <_fstat>
   82c16:	1c43      	adds	r3, r0, #1
   82c18:	d000      	beq.n	82c1c <_fstat_r+0x18>
   82c1a:	bd38      	pop	{r3, r4, r5, pc}
   82c1c:	6823      	ldr	r3, [r4, #0]
   82c1e:	2b00      	cmp	r3, #0
   82c20:	d0fb      	beq.n	82c1a <_fstat_r+0x16>
   82c22:	602b      	str	r3, [r5, #0]
   82c24:	bd38      	pop	{r3, r4, r5, pc}
   82c26:	bf00      	nop
   82c28:	20070a18 	.word	0x20070a18

00082c2c <_isatty_r>:
   82c2c:	b538      	push	{r3, r4, r5, lr}
   82c2e:	4c07      	ldr	r4, [pc, #28]	; (82c4c <_isatty_r+0x20>)
   82c30:	2300      	movs	r3, #0
   82c32:	4605      	mov	r5, r0
   82c34:	4608      	mov	r0, r1
   82c36:	6023      	str	r3, [r4, #0]
   82c38:	f7fe ff50 	bl	81adc <_isatty>
   82c3c:	1c43      	adds	r3, r0, #1
   82c3e:	d000      	beq.n	82c42 <_isatty_r+0x16>
   82c40:	bd38      	pop	{r3, r4, r5, pc}
   82c42:	6823      	ldr	r3, [r4, #0]
   82c44:	2b00      	cmp	r3, #0
   82c46:	d0fb      	beq.n	82c40 <_isatty_r+0x14>
   82c48:	602b      	str	r3, [r5, #0]
   82c4a:	bd38      	pop	{r3, r4, r5, pc}
   82c4c:	20070a18 	.word	0x20070a18

00082c50 <_lseek_r>:
   82c50:	b570      	push	{r4, r5, r6, lr}
   82c52:	4c08      	ldr	r4, [pc, #32]	; (82c74 <_lseek_r+0x24>)
   82c54:	4606      	mov	r6, r0
   82c56:	2500      	movs	r5, #0
   82c58:	4608      	mov	r0, r1
   82c5a:	4611      	mov	r1, r2
   82c5c:	461a      	mov	r2, r3
   82c5e:	6025      	str	r5, [r4, #0]
   82c60:	f7fe ff3e 	bl	81ae0 <_lseek>
   82c64:	1c43      	adds	r3, r0, #1
   82c66:	d000      	beq.n	82c6a <_lseek_r+0x1a>
   82c68:	bd70      	pop	{r4, r5, r6, pc}
   82c6a:	6823      	ldr	r3, [r4, #0]
   82c6c:	2b00      	cmp	r3, #0
   82c6e:	d0fb      	beq.n	82c68 <_lseek_r+0x18>
   82c70:	6033      	str	r3, [r6, #0]
   82c72:	bd70      	pop	{r4, r5, r6, pc}
   82c74:	20070a18 	.word	0x20070a18

00082c78 <_read_r>:
   82c78:	b570      	push	{r4, r5, r6, lr}
   82c7a:	4c08      	ldr	r4, [pc, #32]	; (82c9c <_read_r+0x24>)
   82c7c:	4606      	mov	r6, r0
   82c7e:	2500      	movs	r5, #0
   82c80:	4608      	mov	r0, r1
   82c82:	4611      	mov	r1, r2
   82c84:	461a      	mov	r2, r3
   82c86:	6025      	str	r5, [r4, #0]
   82c88:	f7fd fbac 	bl	803e4 <_read>
   82c8c:	1c43      	adds	r3, r0, #1
   82c8e:	d000      	beq.n	82c92 <_read_r+0x1a>
   82c90:	bd70      	pop	{r4, r5, r6, pc}
   82c92:	6823      	ldr	r3, [r4, #0]
   82c94:	2b00      	cmp	r3, #0
   82c96:	d0fb      	beq.n	82c90 <_read_r+0x18>
   82c98:	6033      	str	r3, [r6, #0]
   82c9a:	bd70      	pop	{r4, r5, r6, pc}
   82c9c:	20070a18 	.word	0x20070a18
   82ca0:	74736574 	.word	0x74736574
   82ca4:	7365742f 	.word	0x7365742f
   82ca8:	64615f74 	.word	0x64615f74
   82cac:	00632e63 	.word	0x00632e63
   82cb0:	74736574 	.word	0x74736574
   82cb4:	6d77705f 	.word	0x6d77705f
   82cb8:	6168635f 	.word	0x6168635f
   82cbc:	6c656e6e 	.word	0x6c656e6e
   82cc0:	616e655f 	.word	0x616e655f
   82cc4:	64656c62 	.word	0x64656c62
   82cc8:	00000000 	.word	0x00000000

00082ccc <UnitySizeMask>:
   82ccc:	000000ff 0000ffff 0000ffff ffffffff     ................
   82cdc:	ffffffff ffffffff ffffffff              ............

00082ce8 <UnityStrOk>:
   82ce8:	00004b4f                                OK..

00082cec <UnityStrSpacer>:
   82cec:	0000202e                                . ..

00082cf0 <UnityStrWas>:
   82cf0:	73615720 00000020                        Was ...

00082cf8 <UnityStrFail>:
   82cf8:	4c494146 00000000                       FAIL....

00082d00 <UnityStrExpected>:
   82d00:	70784520 65746365 00002064               Expected ..

00082d0c <UnityStrBreaker>:
   82d0c:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   82d1c:	2d2d2d2d 002d2d2d                       -------.

00082d24 <UnityStrResultsFailures>:
   82d24:	69614620 6572756c 00002073               Failures ..

00082d30 <UnityStrResultsIgnored>:
   82d30:	6e674920 6465726f 00000020               Ignored ...

00082d3c <UnityStrResultsTests>:
   82d3c:	73655420 00207374                        Tests .

00082d44 <UnityStrPass>:
   82d44:	53534150 00000000 00000043              PASS....C...

00082d50 <_global_impure_ptr>:
   82d50:	20070008                                ... 

00082d54 <_init>:
   82d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82d56:	bf00      	nop
   82d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82d5a:	bc08      	pop	{r3}
   82d5c:	469e      	mov	lr, r3
   82d5e:	4770      	bx	lr

00082d60 <__init_array_start>:
   82d60:	00081e61 	.word	0x00081e61

00082d64 <__frame_dummy_init_array_entry>:
   82d64:	00080119                                ....

00082d68 <_fini>:
   82d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82d6a:	bf00      	nop
   82d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82d6e:	bc08      	pop	{r3}
   82d70:	469e      	mov	lr, r3
   82d72:	4770      	bx	lr

00082d74 <__fini_array_start>:
   82d74:	000800f5 	.word	0x000800f5
=======
   81c2c:	2000      	movs	r0, #0
   81c2e:	4770      	bx	lr

00081c30 <__libc_init_array>:
   81c30:	b570      	push	{r4, r5, r6, lr}
   81c32:	4e0f      	ldr	r6, [pc, #60]	; (81c70 <__libc_init_array+0x40>)
   81c34:	4d0f      	ldr	r5, [pc, #60]	; (81c74 <__libc_init_array+0x44>)
   81c36:	1b76      	subs	r6, r6, r5
   81c38:	10b6      	asrs	r6, r6, #2
   81c3a:	d007      	beq.n	81c4c <__libc_init_array+0x1c>
   81c3c:	3d04      	subs	r5, #4
   81c3e:	2400      	movs	r4, #0
   81c40:	3401      	adds	r4, #1
   81c42:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81c46:	4798      	blx	r3
   81c48:	42a6      	cmp	r6, r4
   81c4a:	d1f9      	bne.n	81c40 <__libc_init_array+0x10>
   81c4c:	4e0a      	ldr	r6, [pc, #40]	; (81c78 <__libc_init_array+0x48>)
   81c4e:	4d0b      	ldr	r5, [pc, #44]	; (81c7c <__libc_init_array+0x4c>)
   81c50:	f001 f958 	bl	82f04 <_init>
   81c54:	1b76      	subs	r6, r6, r5
   81c56:	10b6      	asrs	r6, r6, #2
   81c58:	d008      	beq.n	81c6c <__libc_init_array+0x3c>
   81c5a:	3d04      	subs	r5, #4
   81c5c:	2400      	movs	r4, #0
   81c5e:	3401      	adds	r4, #1
   81c60:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81c64:	4798      	blx	r3
   81c66:	42a6      	cmp	r6, r4
   81c68:	d1f9      	bne.n	81c5e <__libc_init_array+0x2e>
   81c6a:	bd70      	pop	{r4, r5, r6, pc}
   81c6c:	bd70      	pop	{r4, r5, r6, pc}
   81c6e:	bf00      	nop
   81c70:	00082f10 	.word	0x00082f10
   81c74:	00082f10 	.word	0x00082f10
   81c78:	00082f18 	.word	0x00082f18
   81c7c:	00082f10 	.word	0x00082f10

00081c80 <memset>:
   81c80:	b4f0      	push	{r4, r5, r6, r7}
   81c82:	0784      	lsls	r4, r0, #30
   81c84:	d043      	beq.n	81d0e <memset+0x8e>
   81c86:	1e54      	subs	r4, r2, #1
   81c88:	2a00      	cmp	r2, #0
   81c8a:	d03e      	beq.n	81d0a <memset+0x8a>
   81c8c:	b2cd      	uxtb	r5, r1
   81c8e:	4603      	mov	r3, r0
   81c90:	e003      	b.n	81c9a <memset+0x1a>
   81c92:	1e62      	subs	r2, r4, #1
   81c94:	2c00      	cmp	r4, #0
   81c96:	d038      	beq.n	81d0a <memset+0x8a>
   81c98:	4614      	mov	r4, r2
   81c9a:	f803 5b01 	strb.w	r5, [r3], #1
   81c9e:	079a      	lsls	r2, r3, #30
   81ca0:	d1f7      	bne.n	81c92 <memset+0x12>
   81ca2:	2c03      	cmp	r4, #3
   81ca4:	d92a      	bls.n	81cfc <memset+0x7c>
   81ca6:	b2cd      	uxtb	r5, r1
   81ca8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81cac:	2c0f      	cmp	r4, #15
   81cae:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81cb2:	d915      	bls.n	81ce0 <memset+0x60>
   81cb4:	f1a4 0710 	sub.w	r7, r4, #16
   81cb8:	093f      	lsrs	r7, r7, #4
   81cba:	f103 0610 	add.w	r6, r3, #16
   81cbe:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   81cc2:	461a      	mov	r2, r3
   81cc4:	6015      	str	r5, [r2, #0]
   81cc6:	6055      	str	r5, [r2, #4]
   81cc8:	6095      	str	r5, [r2, #8]
   81cca:	60d5      	str	r5, [r2, #12]
   81ccc:	3210      	adds	r2, #16
   81cce:	42b2      	cmp	r2, r6
   81cd0:	d1f8      	bne.n	81cc4 <memset+0x44>
   81cd2:	f004 040f 	and.w	r4, r4, #15
   81cd6:	3701      	adds	r7, #1
   81cd8:	2c03      	cmp	r4, #3
   81cda:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   81cde:	d90d      	bls.n	81cfc <memset+0x7c>
   81ce0:	461e      	mov	r6, r3
   81ce2:	4622      	mov	r2, r4
   81ce4:	3a04      	subs	r2, #4
   81ce6:	2a03      	cmp	r2, #3
   81ce8:	f846 5b04 	str.w	r5, [r6], #4
   81cec:	d8fa      	bhi.n	81ce4 <memset+0x64>
   81cee:	1f22      	subs	r2, r4, #4
   81cf0:	f022 0203 	bic.w	r2, r2, #3
   81cf4:	3204      	adds	r2, #4
   81cf6:	4413      	add	r3, r2
   81cf8:	f004 0403 	and.w	r4, r4, #3
   81cfc:	b12c      	cbz	r4, 81d0a <memset+0x8a>
   81cfe:	b2c9      	uxtb	r1, r1
   81d00:	441c      	add	r4, r3
   81d02:	f803 1b01 	strb.w	r1, [r3], #1
   81d06:	42a3      	cmp	r3, r4
   81d08:	d1fb      	bne.n	81d02 <memset+0x82>
   81d0a:	bcf0      	pop	{r4, r5, r6, r7}
   81d0c:	4770      	bx	lr
   81d0e:	4614      	mov	r4, r2
   81d10:	4603      	mov	r3, r0
   81d12:	e7c6      	b.n	81ca2 <memset+0x22>

00081d14 <setbuf>:
   81d14:	2900      	cmp	r1, #0
   81d16:	bf0c      	ite	eq
   81d18:	2202      	moveq	r2, #2
   81d1a:	2200      	movne	r2, #0
   81d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81d20:	f000 b80e 	b.w	81d40 <setvbuf>

00081d24 <setjmp>:
   81d24:	46ec      	mov	ip, sp
   81d26:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81d2a:	f04f 0000 	mov.w	r0, #0
   81d2e:	4770      	bx	lr

00081d30 <longjmp>:
   81d30:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81d34:	46e5      	mov	sp, ip
   81d36:	0008      	movs	r0, r1
   81d38:	bf08      	it	eq
   81d3a:	2001      	moveq	r0, #1
   81d3c:	4770      	bx	lr
   81d3e:	bf00      	nop

00081d40 <setvbuf>:
   81d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81d44:	4d3c      	ldr	r5, [pc, #240]	; (81e38 <setvbuf+0xf8>)
   81d46:	4604      	mov	r4, r0
   81d48:	682d      	ldr	r5, [r5, #0]
   81d4a:	4688      	mov	r8, r1
   81d4c:	4616      	mov	r6, r2
   81d4e:	461f      	mov	r7, r3
   81d50:	b115      	cbz	r5, 81d58 <setvbuf+0x18>
   81d52:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81d54:	2b00      	cmp	r3, #0
   81d56:	d04f      	beq.n	81df8 <setvbuf+0xb8>
   81d58:	2e02      	cmp	r6, #2
   81d5a:	d830      	bhi.n	81dbe <setvbuf+0x7e>
   81d5c:	2f00      	cmp	r7, #0
   81d5e:	db2e      	blt.n	81dbe <setvbuf+0x7e>
   81d60:	4628      	mov	r0, r5
   81d62:	4621      	mov	r1, r4
   81d64:	f000 f9d6 	bl	82114 <_fflush_r>
   81d68:	89a3      	ldrh	r3, [r4, #12]
   81d6a:	2200      	movs	r2, #0
   81d6c:	6062      	str	r2, [r4, #4]
   81d6e:	61a2      	str	r2, [r4, #24]
   81d70:	061a      	lsls	r2, r3, #24
   81d72:	d428      	bmi.n	81dc6 <setvbuf+0x86>
   81d74:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81d78:	b29b      	uxth	r3, r3
   81d7a:	2e02      	cmp	r6, #2
   81d7c:	81a3      	strh	r3, [r4, #12]
   81d7e:	d02d      	beq.n	81ddc <setvbuf+0x9c>
   81d80:	f1b8 0f00 	cmp.w	r8, #0
   81d84:	d03c      	beq.n	81e00 <setvbuf+0xc0>
   81d86:	2e01      	cmp	r6, #1
   81d88:	d013      	beq.n	81db2 <setvbuf+0x72>
   81d8a:	b29b      	uxth	r3, r3
   81d8c:	f003 0008 	and.w	r0, r3, #8
   81d90:	4a2a      	ldr	r2, [pc, #168]	; (81e3c <setvbuf+0xfc>)
   81d92:	b280      	uxth	r0, r0
   81d94:	63ea      	str	r2, [r5, #60]	; 0x3c
   81d96:	f8c4 8000 	str.w	r8, [r4]
   81d9a:	f8c4 8010 	str.w	r8, [r4, #16]
   81d9e:	6167      	str	r7, [r4, #20]
   81da0:	b178      	cbz	r0, 81dc2 <setvbuf+0x82>
   81da2:	f013 0f03 	tst.w	r3, #3
   81da6:	bf18      	it	ne
   81da8:	2700      	movne	r7, #0
   81daa:	60a7      	str	r7, [r4, #8]
   81dac:	2000      	movs	r0, #0
   81dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81db2:	f043 0301 	orr.w	r3, r3, #1
   81db6:	427a      	negs	r2, r7
   81db8:	81a3      	strh	r3, [r4, #12]
   81dba:	61a2      	str	r2, [r4, #24]
   81dbc:	e7e5      	b.n	81d8a <setvbuf+0x4a>
   81dbe:	f04f 30ff 	mov.w	r0, #4294967295
   81dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81dc6:	4628      	mov	r0, r5
   81dc8:	6921      	ldr	r1, [r4, #16]
   81dca:	f000 faa3 	bl	82314 <_free_r>
   81dce:	89a3      	ldrh	r3, [r4, #12]
   81dd0:	2e02      	cmp	r6, #2
   81dd2:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81dd6:	b29b      	uxth	r3, r3
   81dd8:	81a3      	strh	r3, [r4, #12]
   81dda:	d1d1      	bne.n	81d80 <setvbuf+0x40>
   81ddc:	2000      	movs	r0, #0
   81dde:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81de2:	f043 0302 	orr.w	r3, r3, #2
   81de6:	2500      	movs	r5, #0
   81de8:	2101      	movs	r1, #1
   81dea:	81a3      	strh	r3, [r4, #12]
   81dec:	60a5      	str	r5, [r4, #8]
   81dee:	6022      	str	r2, [r4, #0]
   81df0:	6122      	str	r2, [r4, #16]
   81df2:	6161      	str	r1, [r4, #20]
   81df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81df8:	4628      	mov	r0, r5
   81dfa:	f000 f9a7 	bl	8214c <__sinit>
   81dfe:	e7ab      	b.n	81d58 <setvbuf+0x18>
   81e00:	2f00      	cmp	r7, #0
   81e02:	bf08      	it	eq
   81e04:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   81e08:	4638      	mov	r0, r7
   81e0a:	f000 fbe3 	bl	825d4 <malloc>
   81e0e:	4680      	mov	r8, r0
   81e10:	b128      	cbz	r0, 81e1e <setvbuf+0xde>
   81e12:	89a3      	ldrh	r3, [r4, #12]
   81e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81e18:	b29b      	uxth	r3, r3
   81e1a:	81a3      	strh	r3, [r4, #12]
   81e1c:	e7b3      	b.n	81d86 <setvbuf+0x46>
   81e1e:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81e22:	f000 fbd7 	bl	825d4 <malloc>
   81e26:	4680      	mov	r8, r0
   81e28:	b918      	cbnz	r0, 81e32 <setvbuf+0xf2>
   81e2a:	89a3      	ldrh	r3, [r4, #12]
   81e2c:	f04f 30ff 	mov.w	r0, #4294967295
   81e30:	e7d5      	b.n	81dde <setvbuf+0x9e>
   81e32:	f44f 6780 	mov.w	r7, #1024	; 0x400
   81e36:	e7ec      	b.n	81e12 <setvbuf+0xd2>
   81e38:	20070430 	.word	0x20070430
   81e3c:	00082141 	.word	0x00082141

00081e40 <__swbuf_r>:
   81e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81e42:	460d      	mov	r5, r1
   81e44:	4614      	mov	r4, r2
   81e46:	4607      	mov	r7, r0
   81e48:	b110      	cbz	r0, 81e50 <__swbuf_r+0x10>
   81e4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81e4c:	2b00      	cmp	r3, #0
   81e4e:	d048      	beq.n	81ee2 <__swbuf_r+0xa2>
   81e50:	89a2      	ldrh	r2, [r4, #12]
   81e52:	69a0      	ldr	r0, [r4, #24]
   81e54:	b293      	uxth	r3, r2
   81e56:	60a0      	str	r0, [r4, #8]
   81e58:	0718      	lsls	r0, r3, #28
   81e5a:	d538      	bpl.n	81ece <__swbuf_r+0x8e>
   81e5c:	6926      	ldr	r6, [r4, #16]
   81e5e:	2e00      	cmp	r6, #0
   81e60:	d035      	beq.n	81ece <__swbuf_r+0x8e>
   81e62:	0499      	lsls	r1, r3, #18
   81e64:	b2ed      	uxtb	r5, r5
   81e66:	d515      	bpl.n	81e94 <__swbuf_r+0x54>
   81e68:	6823      	ldr	r3, [r4, #0]
   81e6a:	6962      	ldr	r2, [r4, #20]
   81e6c:	1b9e      	subs	r6, r3, r6
   81e6e:	4296      	cmp	r6, r2
   81e70:	da1c      	bge.n	81eac <__swbuf_r+0x6c>
   81e72:	3601      	adds	r6, #1
   81e74:	68a2      	ldr	r2, [r4, #8]
   81e76:	1c59      	adds	r1, r3, #1
   81e78:	3a01      	subs	r2, #1
   81e7a:	60a2      	str	r2, [r4, #8]
   81e7c:	6021      	str	r1, [r4, #0]
   81e7e:	701d      	strb	r5, [r3, #0]
   81e80:	6963      	ldr	r3, [r4, #20]
   81e82:	42b3      	cmp	r3, r6
   81e84:	d01a      	beq.n	81ebc <__swbuf_r+0x7c>
   81e86:	89a3      	ldrh	r3, [r4, #12]
   81e88:	07db      	lsls	r3, r3, #31
   81e8a:	d501      	bpl.n	81e90 <__swbuf_r+0x50>
   81e8c:	2d0a      	cmp	r5, #10
   81e8e:	d015      	beq.n	81ebc <__swbuf_r+0x7c>
   81e90:	4628      	mov	r0, r5
   81e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81e94:	6e63      	ldr	r3, [r4, #100]	; 0x64
   81e96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   81e9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   81e9e:	6663      	str	r3, [r4, #100]	; 0x64
   81ea0:	6823      	ldr	r3, [r4, #0]
   81ea2:	81a2      	strh	r2, [r4, #12]
   81ea4:	6962      	ldr	r2, [r4, #20]
   81ea6:	1b9e      	subs	r6, r3, r6
   81ea8:	4296      	cmp	r6, r2
   81eaa:	dbe2      	blt.n	81e72 <__swbuf_r+0x32>
   81eac:	4638      	mov	r0, r7
   81eae:	4621      	mov	r1, r4
   81eb0:	f000 f930 	bl	82114 <_fflush_r>
   81eb4:	b940      	cbnz	r0, 81ec8 <__swbuf_r+0x88>
   81eb6:	6823      	ldr	r3, [r4, #0]
   81eb8:	2601      	movs	r6, #1
   81eba:	e7db      	b.n	81e74 <__swbuf_r+0x34>
   81ebc:	4638      	mov	r0, r7
   81ebe:	4621      	mov	r1, r4
   81ec0:	f000 f928 	bl	82114 <_fflush_r>
   81ec4:	2800      	cmp	r0, #0
   81ec6:	d0e3      	beq.n	81e90 <__swbuf_r+0x50>
   81ec8:	f04f 30ff 	mov.w	r0, #4294967295
   81ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81ece:	4638      	mov	r0, r7
   81ed0:	4621      	mov	r1, r4
   81ed2:	f000 f809 	bl	81ee8 <__swsetup_r>
   81ed6:	2800      	cmp	r0, #0
   81ed8:	d1f6      	bne.n	81ec8 <__swbuf_r+0x88>
   81eda:	89a2      	ldrh	r2, [r4, #12]
   81edc:	6926      	ldr	r6, [r4, #16]
   81ede:	b293      	uxth	r3, r2
   81ee0:	e7bf      	b.n	81e62 <__swbuf_r+0x22>
   81ee2:	f000 f933 	bl	8214c <__sinit>
   81ee6:	e7b3      	b.n	81e50 <__swbuf_r+0x10>

00081ee8 <__swsetup_r>:
   81ee8:	4b2f      	ldr	r3, [pc, #188]	; (81fa8 <__swsetup_r+0xc0>)
   81eea:	b570      	push	{r4, r5, r6, lr}
   81eec:	4606      	mov	r6, r0
   81eee:	6818      	ldr	r0, [r3, #0]
   81ef0:	460c      	mov	r4, r1
   81ef2:	b110      	cbz	r0, 81efa <__swsetup_r+0x12>
   81ef4:	6b82      	ldr	r2, [r0, #56]	; 0x38
   81ef6:	2a00      	cmp	r2, #0
   81ef8:	d036      	beq.n	81f68 <__swsetup_r+0x80>
   81efa:	89a5      	ldrh	r5, [r4, #12]
   81efc:	b2ab      	uxth	r3, r5
   81efe:	0719      	lsls	r1, r3, #28
   81f00:	d50c      	bpl.n	81f1c <__swsetup_r+0x34>
   81f02:	6922      	ldr	r2, [r4, #16]
   81f04:	b1aa      	cbz	r2, 81f32 <__swsetup_r+0x4a>
   81f06:	f013 0101 	ands.w	r1, r3, #1
   81f0a:	d01e      	beq.n	81f4a <__swsetup_r+0x62>
   81f0c:	6963      	ldr	r3, [r4, #20]
   81f0e:	2100      	movs	r1, #0
   81f10:	425b      	negs	r3, r3
   81f12:	61a3      	str	r3, [r4, #24]
   81f14:	60a1      	str	r1, [r4, #8]
   81f16:	b1f2      	cbz	r2, 81f56 <__swsetup_r+0x6e>
   81f18:	2000      	movs	r0, #0
   81f1a:	bd70      	pop	{r4, r5, r6, pc}
   81f1c:	06da      	lsls	r2, r3, #27
   81f1e:	d53a      	bpl.n	81f96 <__swsetup_r+0xae>
   81f20:	075b      	lsls	r3, r3, #29
   81f22:	d424      	bmi.n	81f6e <__swsetup_r+0x86>
   81f24:	6922      	ldr	r2, [r4, #16]
   81f26:	f045 0308 	orr.w	r3, r5, #8
   81f2a:	81a3      	strh	r3, [r4, #12]
   81f2c:	b29b      	uxth	r3, r3
   81f2e:	2a00      	cmp	r2, #0
   81f30:	d1e9      	bne.n	81f06 <__swsetup_r+0x1e>
   81f32:	f403 7120 	and.w	r1, r3, #640	; 0x280
   81f36:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   81f3a:	d0e4      	beq.n	81f06 <__swsetup_r+0x1e>
   81f3c:	4630      	mov	r0, r6
   81f3e:	4621      	mov	r1, r4
   81f40:	f000 fad8 	bl	824f4 <__smakebuf_r>
   81f44:	89a3      	ldrh	r3, [r4, #12]
   81f46:	6922      	ldr	r2, [r4, #16]
   81f48:	e7dd      	b.n	81f06 <__swsetup_r+0x1e>
   81f4a:	0798      	lsls	r0, r3, #30
   81f4c:	bf58      	it	pl
   81f4e:	6961      	ldrpl	r1, [r4, #20]
   81f50:	60a1      	str	r1, [r4, #8]
   81f52:	2a00      	cmp	r2, #0
   81f54:	d1e0      	bne.n	81f18 <__swsetup_r+0x30>
   81f56:	89a3      	ldrh	r3, [r4, #12]
   81f58:	061a      	lsls	r2, r3, #24
   81f5a:	d5dd      	bpl.n	81f18 <__swsetup_r+0x30>
   81f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f60:	81a3      	strh	r3, [r4, #12]
   81f62:	f04f 30ff 	mov.w	r0, #4294967295
   81f66:	bd70      	pop	{r4, r5, r6, pc}
   81f68:	f000 f8f0 	bl	8214c <__sinit>
   81f6c:	e7c5      	b.n	81efa <__swsetup_r+0x12>
   81f6e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81f70:	b149      	cbz	r1, 81f86 <__swsetup_r+0x9e>
   81f72:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81f76:	4299      	cmp	r1, r3
   81f78:	d003      	beq.n	81f82 <__swsetup_r+0x9a>
   81f7a:	4630      	mov	r0, r6
   81f7c:	f000 f9ca 	bl	82314 <_free_r>
   81f80:	89a5      	ldrh	r5, [r4, #12]
   81f82:	2300      	movs	r3, #0
   81f84:	6323      	str	r3, [r4, #48]	; 0x30
   81f86:	6922      	ldr	r2, [r4, #16]
   81f88:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   81f8c:	2100      	movs	r1, #0
   81f8e:	b2ad      	uxth	r5, r5
   81f90:	6022      	str	r2, [r4, #0]
   81f92:	6061      	str	r1, [r4, #4]
   81f94:	e7c7      	b.n	81f26 <__swsetup_r+0x3e>
   81f96:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   81f9a:	2309      	movs	r3, #9
   81f9c:	6033      	str	r3, [r6, #0]
   81f9e:	f04f 30ff 	mov.w	r0, #4294967295
   81fa2:	81a5      	strh	r5, [r4, #12]
   81fa4:	bd70      	pop	{r4, r5, r6, pc}
   81fa6:	bf00      	nop
   81fa8:	20070430 	.word	0x20070430

00081fac <register_fini>:
   81fac:	4b02      	ldr	r3, [pc, #8]	; (81fb8 <register_fini+0xc>)
   81fae:	b113      	cbz	r3, 81fb6 <register_fini+0xa>
   81fb0:	4802      	ldr	r0, [pc, #8]	; (81fbc <register_fini+0x10>)
   81fb2:	f000 b805 	b.w	81fc0 <atexit>
   81fb6:	4770      	bx	lr
   81fb8:	00000000 	.word	0x00000000
   81fbc:	00082249 	.word	0x00082249

00081fc0 <atexit>:
   81fc0:	4601      	mov	r1, r0
   81fc2:	2000      	movs	r0, #0
   81fc4:	4602      	mov	r2, r0
   81fc6:	4603      	mov	r3, r0
   81fc8:	f000 be14 	b.w	82bf4 <__register_exitproc>

00081fcc <__sflush_r>:
   81fcc:	898b      	ldrh	r3, [r1, #12]
   81fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81fd2:	b29a      	uxth	r2, r3
   81fd4:	460d      	mov	r5, r1
   81fd6:	0711      	lsls	r1, r2, #28
   81fd8:	4680      	mov	r8, r0
   81fda:	d43c      	bmi.n	82056 <__sflush_r+0x8a>
   81fdc:	686a      	ldr	r2, [r5, #4]
   81fde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81fe2:	2a00      	cmp	r2, #0
   81fe4:	81ab      	strh	r3, [r5, #12]
   81fe6:	dd59      	ble.n	8209c <__sflush_r+0xd0>
   81fe8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81fea:	2c00      	cmp	r4, #0
   81fec:	d04b      	beq.n	82086 <__sflush_r+0xba>
   81fee:	b29b      	uxth	r3, r3
   81ff0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   81ff4:	2100      	movs	r1, #0
   81ff6:	b292      	uxth	r2, r2
   81ff8:	f8d8 6000 	ldr.w	r6, [r8]
   81ffc:	f8c8 1000 	str.w	r1, [r8]
   82000:	2a00      	cmp	r2, #0
   82002:	d04f      	beq.n	820a4 <__sflush_r+0xd8>
   82004:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82006:	075f      	lsls	r7, r3, #29
   82008:	d505      	bpl.n	82016 <__sflush_r+0x4a>
   8200a:	6869      	ldr	r1, [r5, #4]
   8200c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8200e:	1a52      	subs	r2, r2, r1
   82010:	b10b      	cbz	r3, 82016 <__sflush_r+0x4a>
   82012:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82014:	1ad2      	subs	r2, r2, r3
   82016:	4640      	mov	r0, r8
   82018:	69e9      	ldr	r1, [r5, #28]
   8201a:	2300      	movs	r3, #0
   8201c:	47a0      	blx	r4
   8201e:	1c44      	adds	r4, r0, #1
   82020:	d04a      	beq.n	820b8 <__sflush_r+0xec>
   82022:	89ab      	ldrh	r3, [r5, #12]
   82024:	692a      	ldr	r2, [r5, #16]
   82026:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8202a:	b29b      	uxth	r3, r3
   8202c:	2100      	movs	r1, #0
   8202e:	602a      	str	r2, [r5, #0]
   82030:	04da      	lsls	r2, r3, #19
   82032:	81ab      	strh	r3, [r5, #12]
   82034:	6069      	str	r1, [r5, #4]
   82036:	d44c      	bmi.n	820d2 <__sflush_r+0x106>
   82038:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8203a:	f8c8 6000 	str.w	r6, [r8]
   8203e:	b311      	cbz	r1, 82086 <__sflush_r+0xba>
   82040:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82044:	4299      	cmp	r1, r3
   82046:	d002      	beq.n	8204e <__sflush_r+0x82>
   82048:	4640      	mov	r0, r8
   8204a:	f000 f963 	bl	82314 <_free_r>
   8204e:	2000      	movs	r0, #0
   82050:	6328      	str	r0, [r5, #48]	; 0x30
   82052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82056:	692e      	ldr	r6, [r5, #16]
   82058:	b1ae      	cbz	r6, 82086 <__sflush_r+0xba>
   8205a:	0791      	lsls	r1, r2, #30
   8205c:	682c      	ldr	r4, [r5, #0]
   8205e:	bf0c      	ite	eq
   82060:	696b      	ldreq	r3, [r5, #20]
   82062:	2300      	movne	r3, #0
   82064:	602e      	str	r6, [r5, #0]
   82066:	1ba4      	subs	r4, r4, r6
   82068:	60ab      	str	r3, [r5, #8]
   8206a:	e00a      	b.n	82082 <__sflush_r+0xb6>
   8206c:	4632      	mov	r2, r6
   8206e:	4623      	mov	r3, r4
   82070:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82072:	4640      	mov	r0, r8
   82074:	69e9      	ldr	r1, [r5, #28]
   82076:	47b8      	blx	r7
   82078:	2800      	cmp	r0, #0
   8207a:	ebc0 0404 	rsb	r4, r0, r4
   8207e:	4406      	add	r6, r0
   82080:	dd04      	ble.n	8208c <__sflush_r+0xc0>
   82082:	2c00      	cmp	r4, #0
   82084:	dcf2      	bgt.n	8206c <__sflush_r+0xa0>
   82086:	2000      	movs	r0, #0
   82088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8208c:	89ab      	ldrh	r3, [r5, #12]
   8208e:	f04f 30ff 	mov.w	r0, #4294967295
   82092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82096:	81ab      	strh	r3, [r5, #12]
   82098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8209c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8209e:	2a00      	cmp	r2, #0
   820a0:	dca2      	bgt.n	81fe8 <__sflush_r+0x1c>
   820a2:	e7f0      	b.n	82086 <__sflush_r+0xba>
   820a4:	2301      	movs	r3, #1
   820a6:	4640      	mov	r0, r8
   820a8:	69e9      	ldr	r1, [r5, #28]
   820aa:	47a0      	blx	r4
   820ac:	1c43      	adds	r3, r0, #1
   820ae:	4602      	mov	r2, r0
   820b0:	d01e      	beq.n	820f0 <__sflush_r+0x124>
   820b2:	89ab      	ldrh	r3, [r5, #12]
   820b4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   820b6:	e7a6      	b.n	82006 <__sflush_r+0x3a>
   820b8:	f8d8 3000 	ldr.w	r3, [r8]
   820bc:	b95b      	cbnz	r3, 820d6 <__sflush_r+0x10a>
   820be:	89aa      	ldrh	r2, [r5, #12]
   820c0:	6929      	ldr	r1, [r5, #16]
   820c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   820c6:	b292      	uxth	r2, r2
   820c8:	606b      	str	r3, [r5, #4]
   820ca:	04d3      	lsls	r3, r2, #19
   820cc:	81aa      	strh	r2, [r5, #12]
   820ce:	6029      	str	r1, [r5, #0]
   820d0:	d5b2      	bpl.n	82038 <__sflush_r+0x6c>
   820d2:	6528      	str	r0, [r5, #80]	; 0x50
   820d4:	e7b0      	b.n	82038 <__sflush_r+0x6c>
   820d6:	2b1d      	cmp	r3, #29
   820d8:	d001      	beq.n	820de <__sflush_r+0x112>
   820da:	2b16      	cmp	r3, #22
   820dc:	d113      	bne.n	82106 <__sflush_r+0x13a>
   820de:	89a9      	ldrh	r1, [r5, #12]
   820e0:	692b      	ldr	r3, [r5, #16]
   820e2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   820e6:	2200      	movs	r2, #0
   820e8:	81a9      	strh	r1, [r5, #12]
   820ea:	602b      	str	r3, [r5, #0]
   820ec:	606a      	str	r2, [r5, #4]
   820ee:	e7a3      	b.n	82038 <__sflush_r+0x6c>
   820f0:	f8d8 3000 	ldr.w	r3, [r8]
   820f4:	2b00      	cmp	r3, #0
   820f6:	d0dc      	beq.n	820b2 <__sflush_r+0xe6>
   820f8:	2b1d      	cmp	r3, #29
   820fa:	d001      	beq.n	82100 <__sflush_r+0x134>
   820fc:	2b16      	cmp	r3, #22
   820fe:	d1c5      	bne.n	8208c <__sflush_r+0xc0>
   82100:	f8c8 6000 	str.w	r6, [r8]
   82104:	e7bf      	b.n	82086 <__sflush_r+0xba>
   82106:	89ab      	ldrh	r3, [r5, #12]
   82108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8210c:	81ab      	strh	r3, [r5, #12]
   8210e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82112:	bf00      	nop

00082114 <_fflush_r>:
   82114:	b510      	push	{r4, lr}
   82116:	4604      	mov	r4, r0
   82118:	b082      	sub	sp, #8
   8211a:	b108      	cbz	r0, 82120 <_fflush_r+0xc>
   8211c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8211e:	b153      	cbz	r3, 82136 <_fflush_r+0x22>
   82120:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   82124:	b908      	cbnz	r0, 8212a <_fflush_r+0x16>
   82126:	b002      	add	sp, #8
   82128:	bd10      	pop	{r4, pc}
   8212a:	4620      	mov	r0, r4
   8212c:	b002      	add	sp, #8
   8212e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82132:	f7ff bf4b 	b.w	81fcc <__sflush_r>
   82136:	9101      	str	r1, [sp, #4]
   82138:	f000 f808 	bl	8214c <__sinit>
   8213c:	9901      	ldr	r1, [sp, #4]
   8213e:	e7ef      	b.n	82120 <_fflush_r+0xc>

00082140 <_cleanup_r>:
   82140:	4901      	ldr	r1, [pc, #4]	; (82148 <_cleanup_r+0x8>)
   82142:	f000 b9b3 	b.w	824ac <_fwalk>
   82146:	bf00      	nop
   82148:	00082d41 	.word	0x00082d41

0008214c <__sinit>:
   8214c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82150:	6b84      	ldr	r4, [r0, #56]	; 0x38
   82152:	b083      	sub	sp, #12
   82154:	4607      	mov	r7, r0
   82156:	2c00      	cmp	r4, #0
   82158:	d165      	bne.n	82226 <__sinit+0xda>
   8215a:	687d      	ldr	r5, [r7, #4]
   8215c:	4833      	ldr	r0, [pc, #204]	; (8222c <__sinit+0xe0>)
   8215e:	2304      	movs	r3, #4
   82160:	2103      	movs	r1, #3
   82162:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   82166:	63f8      	str	r0, [r7, #60]	; 0x3c
   82168:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   8216c:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82170:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82174:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82178:	81ab      	strh	r3, [r5, #12]
   8217a:	602c      	str	r4, [r5, #0]
   8217c:	606c      	str	r4, [r5, #4]
   8217e:	60ac      	str	r4, [r5, #8]
   82180:	666c      	str	r4, [r5, #100]	; 0x64
   82182:	81ec      	strh	r4, [r5, #14]
   82184:	612c      	str	r4, [r5, #16]
   82186:	616c      	str	r4, [r5, #20]
   82188:	61ac      	str	r4, [r5, #24]
   8218a:	4621      	mov	r1, r4
   8218c:	2208      	movs	r2, #8
   8218e:	f7ff fd77 	bl	81c80 <memset>
   82192:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82230 <__sinit+0xe4>
   82196:	68be      	ldr	r6, [r7, #8]
   82198:	f8df a098 	ldr.w	sl, [pc, #152]	; 82234 <__sinit+0xe8>
   8219c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82238 <__sinit+0xec>
   821a0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8223c <__sinit+0xf0>
   821a4:	2301      	movs	r3, #1
   821a6:	2209      	movs	r2, #9
   821a8:	61ed      	str	r5, [r5, #28]
   821aa:	f8c5 b020 	str.w	fp, [r5, #32]
   821ae:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   821b2:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   821b6:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   821ba:	4621      	mov	r1, r4
   821bc:	81f3      	strh	r3, [r6, #14]
   821be:	81b2      	strh	r2, [r6, #12]
   821c0:	6034      	str	r4, [r6, #0]
   821c2:	6074      	str	r4, [r6, #4]
   821c4:	60b4      	str	r4, [r6, #8]
   821c6:	6674      	str	r4, [r6, #100]	; 0x64
   821c8:	6134      	str	r4, [r6, #16]
   821ca:	6174      	str	r4, [r6, #20]
   821cc:	61b4      	str	r4, [r6, #24]
   821ce:	2208      	movs	r2, #8
   821d0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   821d4:	9301      	str	r3, [sp, #4]
   821d6:	f7ff fd53 	bl	81c80 <memset>
   821da:	68fd      	ldr	r5, [r7, #12]
   821dc:	2012      	movs	r0, #18
   821de:	2202      	movs	r2, #2
   821e0:	61f6      	str	r6, [r6, #28]
   821e2:	f8c6 b020 	str.w	fp, [r6, #32]
   821e6:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   821ea:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   821ee:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   821f2:	4621      	mov	r1, r4
   821f4:	81a8      	strh	r0, [r5, #12]
   821f6:	81ea      	strh	r2, [r5, #14]
   821f8:	602c      	str	r4, [r5, #0]
   821fa:	606c      	str	r4, [r5, #4]
   821fc:	60ac      	str	r4, [r5, #8]
   821fe:	666c      	str	r4, [r5, #100]	; 0x64
   82200:	612c      	str	r4, [r5, #16]
   82202:	616c      	str	r4, [r5, #20]
   82204:	61ac      	str	r4, [r5, #24]
   82206:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8220a:	2208      	movs	r2, #8
   8220c:	f7ff fd38 	bl	81c80 <memset>
   82210:	9b01      	ldr	r3, [sp, #4]
   82212:	61ed      	str	r5, [r5, #28]
   82214:	f8c5 b020 	str.w	fp, [r5, #32]
   82218:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   8221c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82220:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82224:	63bb      	str	r3, [r7, #56]	; 0x38
   82226:	b003      	add	sp, #12
   82228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8222c:	00082141 	.word	0x00082141
   82230:	00082b49 	.word	0x00082b49
   82234:	00082b6d 	.word	0x00082b6d
   82238:	00082ba5 	.word	0x00082ba5
   8223c:	00082bc5 	.word	0x00082bc5

00082240 <__sfp_lock_acquire>:
   82240:	4770      	bx	lr
   82242:	bf00      	nop

00082244 <__sfp_lock_release>:
   82244:	4770      	bx	lr
   82246:	bf00      	nop

00082248 <__libc_fini_array>:
   82248:	b538      	push	{r3, r4, r5, lr}
   8224a:	4d09      	ldr	r5, [pc, #36]	; (82270 <__libc_fini_array+0x28>)
   8224c:	4c09      	ldr	r4, [pc, #36]	; (82274 <__libc_fini_array+0x2c>)
   8224e:	1b64      	subs	r4, r4, r5
   82250:	10a4      	asrs	r4, r4, #2
   82252:	bf18      	it	ne
   82254:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82258:	d005      	beq.n	82266 <__libc_fini_array+0x1e>
   8225a:	3c01      	subs	r4, #1
   8225c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82260:	4798      	blx	r3
   82262:	2c00      	cmp	r4, #0
   82264:	d1f9      	bne.n	8225a <__libc_fini_array+0x12>
   82266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8226a:	f000 be55 	b.w	82f18 <_fini>
   8226e:	bf00      	nop
   82270:	00082f24 	.word	0x00082f24
   82274:	00082f28 	.word	0x00082f28

00082278 <_malloc_trim_r>:
   82278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8227a:	4d23      	ldr	r5, [pc, #140]	; (82308 <_malloc_trim_r+0x90>)
   8227c:	460f      	mov	r7, r1
   8227e:	4604      	mov	r4, r0
   82280:	f000 fc4c 	bl	82b1c <__malloc_lock>
   82284:	68ab      	ldr	r3, [r5, #8]
   82286:	685e      	ldr	r6, [r3, #4]
   82288:	f026 0603 	bic.w	r6, r6, #3
   8228c:	1bf1      	subs	r1, r6, r7
   8228e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   82292:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82296:	f021 010f 	bic.w	r1, r1, #15
   8229a:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   8229e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   822a2:	db07      	blt.n	822b4 <_malloc_trim_r+0x3c>
   822a4:	4620      	mov	r0, r4
   822a6:	2100      	movs	r1, #0
   822a8:	f000 fc3c 	bl	82b24 <_sbrk_r>
   822ac:	68ab      	ldr	r3, [r5, #8]
   822ae:	4433      	add	r3, r6
   822b0:	4298      	cmp	r0, r3
   822b2:	d004      	beq.n	822be <_malloc_trim_r+0x46>
   822b4:	4620      	mov	r0, r4
   822b6:	f000 fc33 	bl	82b20 <__malloc_unlock>
   822ba:	2000      	movs	r0, #0
   822bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   822be:	4620      	mov	r0, r4
   822c0:	4279      	negs	r1, r7
   822c2:	f000 fc2f 	bl	82b24 <_sbrk_r>
   822c6:	3001      	adds	r0, #1
   822c8:	d00d      	beq.n	822e6 <_malloc_trim_r+0x6e>
   822ca:	4b10      	ldr	r3, [pc, #64]	; (8230c <_malloc_trim_r+0x94>)
   822cc:	68aa      	ldr	r2, [r5, #8]
   822ce:	6819      	ldr	r1, [r3, #0]
   822d0:	1bf6      	subs	r6, r6, r7
   822d2:	f046 0601 	orr.w	r6, r6, #1
   822d6:	4620      	mov	r0, r4
   822d8:	1bc9      	subs	r1, r1, r7
   822da:	6056      	str	r6, [r2, #4]
   822dc:	6019      	str	r1, [r3, #0]
   822de:	f000 fc1f 	bl	82b20 <__malloc_unlock>
   822e2:	2001      	movs	r0, #1
   822e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   822e6:	4620      	mov	r0, r4
   822e8:	2100      	movs	r1, #0
   822ea:	f000 fc1b 	bl	82b24 <_sbrk_r>
   822ee:	68ab      	ldr	r3, [r5, #8]
   822f0:	1ac2      	subs	r2, r0, r3
   822f2:	2a0f      	cmp	r2, #15
   822f4:	ddde      	ble.n	822b4 <_malloc_trim_r+0x3c>
   822f6:	4d06      	ldr	r5, [pc, #24]	; (82310 <_malloc_trim_r+0x98>)
   822f8:	4904      	ldr	r1, [pc, #16]	; (8230c <_malloc_trim_r+0x94>)
   822fa:	682d      	ldr	r5, [r5, #0]
   822fc:	f042 0201 	orr.w	r2, r2, #1
   82300:	1b40      	subs	r0, r0, r5
   82302:	605a      	str	r2, [r3, #4]
   82304:	6008      	str	r0, [r1, #0]
   82306:	e7d5      	b.n	822b4 <_malloc_trim_r+0x3c>
   82308:	20070434 	.word	0x20070434
   8230c:	20070968 	.word	0x20070968
   82310:	20070840 	.word	0x20070840

00082314 <_free_r>:
   82314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82318:	460d      	mov	r5, r1
   8231a:	4606      	mov	r6, r0
   8231c:	2900      	cmp	r1, #0
   8231e:	d055      	beq.n	823cc <_free_r+0xb8>
   82320:	f000 fbfc 	bl	82b1c <__malloc_lock>
   82324:	f855 1c04 	ldr.w	r1, [r5, #-4]
   82328:	f8df c170 	ldr.w	ip, [pc, #368]	; 8249c <_free_r+0x188>
   8232c:	f1a5 0408 	sub.w	r4, r5, #8
   82330:	f021 0301 	bic.w	r3, r1, #1
   82334:	18e2      	adds	r2, r4, r3
   82336:	f8dc 0008 	ldr.w	r0, [ip, #8]
   8233a:	6857      	ldr	r7, [r2, #4]
   8233c:	4290      	cmp	r0, r2
   8233e:	f027 0703 	bic.w	r7, r7, #3
   82342:	d068      	beq.n	82416 <_free_r+0x102>
   82344:	f011 0101 	ands.w	r1, r1, #1
   82348:	6057      	str	r7, [r2, #4]
   8234a:	d032      	beq.n	823b2 <_free_r+0x9e>
   8234c:	2100      	movs	r1, #0
   8234e:	19d0      	adds	r0, r2, r7
   82350:	6840      	ldr	r0, [r0, #4]
   82352:	07c0      	lsls	r0, r0, #31
   82354:	d406      	bmi.n	82364 <_free_r+0x50>
   82356:	443b      	add	r3, r7
   82358:	6890      	ldr	r0, [r2, #8]
   8235a:	2900      	cmp	r1, #0
   8235c:	d04d      	beq.n	823fa <_free_r+0xe6>
   8235e:	68d2      	ldr	r2, [r2, #12]
   82360:	60c2      	str	r2, [r0, #12]
   82362:	6090      	str	r0, [r2, #8]
   82364:	f043 0201 	orr.w	r2, r3, #1
   82368:	6062      	str	r2, [r4, #4]
   8236a:	50e3      	str	r3, [r4, r3]
   8236c:	b9e1      	cbnz	r1, 823a8 <_free_r+0x94>
   8236e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82372:	d32d      	bcc.n	823d0 <_free_r+0xbc>
   82374:	0a5a      	lsrs	r2, r3, #9
   82376:	2a04      	cmp	r2, #4
   82378:	d869      	bhi.n	8244e <_free_r+0x13a>
   8237a:	0998      	lsrs	r0, r3, #6
   8237c:	3038      	adds	r0, #56	; 0x38
   8237e:	0041      	lsls	r1, r0, #1
   82380:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   82384:	f8dc 2008 	ldr.w	r2, [ip, #8]
   82388:	4944      	ldr	r1, [pc, #272]	; (8249c <_free_r+0x188>)
   8238a:	4562      	cmp	r2, ip
   8238c:	d065      	beq.n	8245a <_free_r+0x146>
   8238e:	6851      	ldr	r1, [r2, #4]
   82390:	f021 0103 	bic.w	r1, r1, #3
   82394:	428b      	cmp	r3, r1
   82396:	d202      	bcs.n	8239e <_free_r+0x8a>
   82398:	6892      	ldr	r2, [r2, #8]
   8239a:	4594      	cmp	ip, r2
   8239c:	d1f7      	bne.n	8238e <_free_r+0x7a>
   8239e:	68d3      	ldr	r3, [r2, #12]
   823a0:	60e3      	str	r3, [r4, #12]
   823a2:	60a2      	str	r2, [r4, #8]
   823a4:	609c      	str	r4, [r3, #8]
   823a6:	60d4      	str	r4, [r2, #12]
   823a8:	4630      	mov	r0, r6
   823aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   823ae:	f000 bbb7 	b.w	82b20 <__malloc_unlock>
   823b2:	f855 5c08 	ldr.w	r5, [r5, #-8]
   823b6:	f10c 0808 	add.w	r8, ip, #8
   823ba:	1b64      	subs	r4, r4, r5
   823bc:	68a0      	ldr	r0, [r4, #8]
   823be:	442b      	add	r3, r5
   823c0:	4540      	cmp	r0, r8
   823c2:	d042      	beq.n	8244a <_free_r+0x136>
   823c4:	68e5      	ldr	r5, [r4, #12]
   823c6:	60c5      	str	r5, [r0, #12]
   823c8:	60a8      	str	r0, [r5, #8]
   823ca:	e7c0      	b.n	8234e <_free_r+0x3a>
   823cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823d0:	08db      	lsrs	r3, r3, #3
   823d2:	109a      	asrs	r2, r3, #2
   823d4:	2001      	movs	r0, #1
   823d6:	4090      	lsls	r0, r2
   823d8:	f8dc 1004 	ldr.w	r1, [ip, #4]
   823dc:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   823e0:	689a      	ldr	r2, [r3, #8]
   823e2:	4301      	orrs	r1, r0
   823e4:	60a2      	str	r2, [r4, #8]
   823e6:	60e3      	str	r3, [r4, #12]
   823e8:	f8cc 1004 	str.w	r1, [ip, #4]
   823ec:	4630      	mov	r0, r6
   823ee:	609c      	str	r4, [r3, #8]
   823f0:	60d4      	str	r4, [r2, #12]
   823f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   823f6:	f000 bb93 	b.w	82b20 <__malloc_unlock>
   823fa:	4d29      	ldr	r5, [pc, #164]	; (824a0 <_free_r+0x18c>)
   823fc:	42a8      	cmp	r0, r5
   823fe:	d1ae      	bne.n	8235e <_free_r+0x4a>
   82400:	f043 0201 	orr.w	r2, r3, #1
   82404:	f8cc 4014 	str.w	r4, [ip, #20]
   82408:	f8cc 4010 	str.w	r4, [ip, #16]
   8240c:	60e0      	str	r0, [r4, #12]
   8240e:	60a0      	str	r0, [r4, #8]
   82410:	6062      	str	r2, [r4, #4]
   82412:	50e3      	str	r3, [r4, r3]
   82414:	e7c8      	b.n	823a8 <_free_r+0x94>
   82416:	441f      	add	r7, r3
   82418:	07cb      	lsls	r3, r1, #31
   8241a:	d407      	bmi.n	8242c <_free_r+0x118>
   8241c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82420:	1a64      	subs	r4, r4, r1
   82422:	68e3      	ldr	r3, [r4, #12]
   82424:	68a2      	ldr	r2, [r4, #8]
   82426:	440f      	add	r7, r1
   82428:	60d3      	str	r3, [r2, #12]
   8242a:	609a      	str	r2, [r3, #8]
   8242c:	4b1d      	ldr	r3, [pc, #116]	; (824a4 <_free_r+0x190>)
   8242e:	f047 0201 	orr.w	r2, r7, #1
   82432:	681b      	ldr	r3, [r3, #0]
   82434:	6062      	str	r2, [r4, #4]
   82436:	429f      	cmp	r7, r3
   82438:	f8cc 4008 	str.w	r4, [ip, #8]
   8243c:	d3b4      	bcc.n	823a8 <_free_r+0x94>
   8243e:	4b1a      	ldr	r3, [pc, #104]	; (824a8 <_free_r+0x194>)
   82440:	4630      	mov	r0, r6
   82442:	6819      	ldr	r1, [r3, #0]
   82444:	f7ff ff18 	bl	82278 <_malloc_trim_r>
   82448:	e7ae      	b.n	823a8 <_free_r+0x94>
   8244a:	2101      	movs	r1, #1
   8244c:	e77f      	b.n	8234e <_free_r+0x3a>
   8244e:	2a14      	cmp	r2, #20
   82450:	d80b      	bhi.n	8246a <_free_r+0x156>
   82452:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   82456:	0041      	lsls	r1, r0, #1
   82458:	e792      	b.n	82380 <_free_r+0x6c>
   8245a:	1080      	asrs	r0, r0, #2
   8245c:	2501      	movs	r5, #1
   8245e:	4085      	lsls	r5, r0
   82460:	6848      	ldr	r0, [r1, #4]
   82462:	4613      	mov	r3, r2
   82464:	4328      	orrs	r0, r5
   82466:	6048      	str	r0, [r1, #4]
   82468:	e79a      	b.n	823a0 <_free_r+0x8c>
   8246a:	2a54      	cmp	r2, #84	; 0x54
   8246c:	d803      	bhi.n	82476 <_free_r+0x162>
   8246e:	0b18      	lsrs	r0, r3, #12
   82470:	306e      	adds	r0, #110	; 0x6e
   82472:	0041      	lsls	r1, r0, #1
   82474:	e784      	b.n	82380 <_free_r+0x6c>
   82476:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8247a:	d803      	bhi.n	82484 <_free_r+0x170>
   8247c:	0bd8      	lsrs	r0, r3, #15
   8247e:	3077      	adds	r0, #119	; 0x77
   82480:	0041      	lsls	r1, r0, #1
   82482:	e77d      	b.n	82380 <_free_r+0x6c>
   82484:	f240 5154 	movw	r1, #1364	; 0x554
   82488:	428a      	cmp	r2, r1
   8248a:	d803      	bhi.n	82494 <_free_r+0x180>
   8248c:	0c98      	lsrs	r0, r3, #18
   8248e:	307c      	adds	r0, #124	; 0x7c
   82490:	0041      	lsls	r1, r0, #1
   82492:	e775      	b.n	82380 <_free_r+0x6c>
   82494:	21fc      	movs	r1, #252	; 0xfc
   82496:	207e      	movs	r0, #126	; 0x7e
   82498:	e772      	b.n	82380 <_free_r+0x6c>
   8249a:	bf00      	nop
   8249c:	20070434 	.word	0x20070434
   824a0:	2007043c 	.word	0x2007043c
   824a4:	2007083c 	.word	0x2007083c
   824a8:	20070964 	.word	0x20070964

000824ac <_fwalk>:
   824ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   824b0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   824b4:	4688      	mov	r8, r1
   824b6:	d019      	beq.n	824ec <_fwalk+0x40>
   824b8:	2600      	movs	r6, #0
   824ba:	687d      	ldr	r5, [r7, #4]
   824bc:	68bc      	ldr	r4, [r7, #8]
   824be:	3d01      	subs	r5, #1
   824c0:	d40e      	bmi.n	824e0 <_fwalk+0x34>
   824c2:	89a3      	ldrh	r3, [r4, #12]
   824c4:	3d01      	subs	r5, #1
   824c6:	2b01      	cmp	r3, #1
   824c8:	d906      	bls.n	824d8 <_fwalk+0x2c>
   824ca:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   824ce:	4620      	mov	r0, r4
   824d0:	3301      	adds	r3, #1
   824d2:	d001      	beq.n	824d8 <_fwalk+0x2c>
   824d4:	47c0      	blx	r8
   824d6:	4306      	orrs	r6, r0
   824d8:	1c6b      	adds	r3, r5, #1
   824da:	f104 0468 	add.w	r4, r4, #104	; 0x68
   824de:	d1f0      	bne.n	824c2 <_fwalk+0x16>
   824e0:	683f      	ldr	r7, [r7, #0]
   824e2:	2f00      	cmp	r7, #0
   824e4:	d1e9      	bne.n	824ba <_fwalk+0xe>
   824e6:	4630      	mov	r0, r6
   824e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   824ec:	463e      	mov	r6, r7
   824ee:	4630      	mov	r0, r6
   824f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000824f4 <__smakebuf_r>:
   824f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   824f6:	898b      	ldrh	r3, [r1, #12]
   824f8:	b091      	sub	sp, #68	; 0x44
   824fa:	b29a      	uxth	r2, r3
   824fc:	0796      	lsls	r6, r2, #30
   824fe:	460c      	mov	r4, r1
   82500:	4605      	mov	r5, r0
   82502:	d437      	bmi.n	82574 <__smakebuf_r+0x80>
   82504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82508:	2900      	cmp	r1, #0
   8250a:	db17      	blt.n	8253c <__smakebuf_r+0x48>
   8250c:	aa01      	add	r2, sp, #4
   8250e:	f000 fc1f 	bl	82d50 <_fstat_r>
   82512:	2800      	cmp	r0, #0
   82514:	db10      	blt.n	82538 <__smakebuf_r+0x44>
   82516:	9b02      	ldr	r3, [sp, #8]
   82518:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   8251c:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   82520:	424f      	negs	r7, r1
   82522:	414f      	adcs	r7, r1
   82524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   82528:	d02c      	beq.n	82584 <__smakebuf_r+0x90>
   8252a:	89a3      	ldrh	r3, [r4, #12]
   8252c:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82530:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82534:	81a3      	strh	r3, [r4, #12]
   82536:	e00b      	b.n	82550 <__smakebuf_r+0x5c>
   82538:	89a3      	ldrh	r3, [r4, #12]
   8253a:	b29a      	uxth	r2, r3
   8253c:	f012 0f80 	tst.w	r2, #128	; 0x80
   82540:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82544:	81a3      	strh	r3, [r4, #12]
   82546:	bf14      	ite	ne
   82548:	2640      	movne	r6, #64	; 0x40
   8254a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   8254e:	2700      	movs	r7, #0
   82550:	4628      	mov	r0, r5
   82552:	4631      	mov	r1, r6
   82554:	f000 f846 	bl	825e4 <_malloc_r>
   82558:	89a3      	ldrh	r3, [r4, #12]
   8255a:	2800      	cmp	r0, #0
   8255c:	d029      	beq.n	825b2 <__smakebuf_r+0xbe>
   8255e:	4a1b      	ldr	r2, [pc, #108]	; (825cc <__smakebuf_r+0xd8>)
   82560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82564:	63ea      	str	r2, [r5, #60]	; 0x3c
   82566:	81a3      	strh	r3, [r4, #12]
   82568:	6020      	str	r0, [r4, #0]
   8256a:	6120      	str	r0, [r4, #16]
   8256c:	6166      	str	r6, [r4, #20]
   8256e:	b9a7      	cbnz	r7, 8259a <__smakebuf_r+0xa6>
   82570:	b011      	add	sp, #68	; 0x44
   82572:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82574:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82578:	2201      	movs	r2, #1
   8257a:	600b      	str	r3, [r1, #0]
   8257c:	610b      	str	r3, [r1, #16]
   8257e:	614a      	str	r2, [r1, #20]
   82580:	b011      	add	sp, #68	; 0x44
   82582:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82584:	4a12      	ldr	r2, [pc, #72]	; (825d0 <__smakebuf_r+0xdc>)
   82586:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82588:	4293      	cmp	r3, r2
   8258a:	d1ce      	bne.n	8252a <__smakebuf_r+0x36>
   8258c:	89a3      	ldrh	r3, [r4, #12]
   8258e:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82592:	4333      	orrs	r3, r6
   82594:	81a3      	strh	r3, [r4, #12]
   82596:	64e6      	str	r6, [r4, #76]	; 0x4c
   82598:	e7da      	b.n	82550 <__smakebuf_r+0x5c>
   8259a:	4628      	mov	r0, r5
   8259c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   825a0:	f000 fbea 	bl	82d78 <_isatty_r>
   825a4:	2800      	cmp	r0, #0
   825a6:	d0e3      	beq.n	82570 <__smakebuf_r+0x7c>
   825a8:	89a3      	ldrh	r3, [r4, #12]
   825aa:	f043 0301 	orr.w	r3, r3, #1
   825ae:	81a3      	strh	r3, [r4, #12]
   825b0:	e7de      	b.n	82570 <__smakebuf_r+0x7c>
   825b2:	059a      	lsls	r2, r3, #22
   825b4:	d4dc      	bmi.n	82570 <__smakebuf_r+0x7c>
   825b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   825ba:	f043 0302 	orr.w	r3, r3, #2
   825be:	2101      	movs	r1, #1
   825c0:	81a3      	strh	r3, [r4, #12]
   825c2:	6022      	str	r2, [r4, #0]
   825c4:	6122      	str	r2, [r4, #16]
   825c6:	6161      	str	r1, [r4, #20]
   825c8:	e7d2      	b.n	82570 <__smakebuf_r+0x7c>
   825ca:	bf00      	nop
   825cc:	00082141 	.word	0x00082141
   825d0:	00082ba5 	.word	0x00082ba5

000825d4 <malloc>:
   825d4:	4b02      	ldr	r3, [pc, #8]	; (825e0 <malloc+0xc>)
   825d6:	4601      	mov	r1, r0
   825d8:	6818      	ldr	r0, [r3, #0]
   825da:	f000 b803 	b.w	825e4 <_malloc_r>
   825de:	bf00      	nop
   825e0:	20070430 	.word	0x20070430

000825e4 <_malloc_r>:
   825e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   825e8:	f101 050b 	add.w	r5, r1, #11
   825ec:	2d16      	cmp	r5, #22
   825ee:	b083      	sub	sp, #12
   825f0:	4606      	mov	r6, r0
   825f2:	d927      	bls.n	82644 <_malloc_r+0x60>
   825f4:	f035 0507 	bics.w	r5, r5, #7
   825f8:	d427      	bmi.n	8264a <_malloc_r+0x66>
   825fa:	42a9      	cmp	r1, r5
   825fc:	d825      	bhi.n	8264a <_malloc_r+0x66>
   825fe:	4630      	mov	r0, r6
   82600:	f000 fa8c 	bl	82b1c <__malloc_lock>
   82604:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82608:	d226      	bcs.n	82658 <_malloc_r+0x74>
   8260a:	4fc1      	ldr	r7, [pc, #772]	; (82910 <_malloc_r+0x32c>)
   8260c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   82610:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   82614:	68dc      	ldr	r4, [r3, #12]
   82616:	429c      	cmp	r4, r3
   82618:	f000 81d2 	beq.w	829c0 <_malloc_r+0x3dc>
   8261c:	6863      	ldr	r3, [r4, #4]
   8261e:	68e2      	ldr	r2, [r4, #12]
   82620:	f023 0303 	bic.w	r3, r3, #3
   82624:	4423      	add	r3, r4
   82626:	6858      	ldr	r0, [r3, #4]
   82628:	68a1      	ldr	r1, [r4, #8]
   8262a:	f040 0501 	orr.w	r5, r0, #1
   8262e:	60ca      	str	r2, [r1, #12]
   82630:	4630      	mov	r0, r6
   82632:	6091      	str	r1, [r2, #8]
   82634:	605d      	str	r5, [r3, #4]
   82636:	f000 fa73 	bl	82b20 <__malloc_unlock>
   8263a:	3408      	adds	r4, #8
   8263c:	4620      	mov	r0, r4
   8263e:	b003      	add	sp, #12
   82640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82644:	2510      	movs	r5, #16
   82646:	42a9      	cmp	r1, r5
   82648:	d9d9      	bls.n	825fe <_malloc_r+0x1a>
   8264a:	2400      	movs	r4, #0
   8264c:	230c      	movs	r3, #12
   8264e:	4620      	mov	r0, r4
   82650:	6033      	str	r3, [r6, #0]
   82652:	b003      	add	sp, #12
   82654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82658:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   8265c:	f000 8089 	beq.w	82772 <_malloc_r+0x18e>
   82660:	f1bc 0f04 	cmp.w	ip, #4
   82664:	f200 8160 	bhi.w	82928 <_malloc_r+0x344>
   82668:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   8266c:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   82670:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82674:	4fa6      	ldr	r7, [pc, #664]	; (82910 <_malloc_r+0x32c>)
   82676:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   8267a:	68cc      	ldr	r4, [r1, #12]
   8267c:	42a1      	cmp	r1, r4
   8267e:	d105      	bne.n	8268c <_malloc_r+0xa8>
   82680:	e00c      	b.n	8269c <_malloc_r+0xb8>
   82682:	2b00      	cmp	r3, #0
   82684:	da79      	bge.n	8277a <_malloc_r+0x196>
   82686:	68e4      	ldr	r4, [r4, #12]
   82688:	42a1      	cmp	r1, r4
   8268a:	d007      	beq.n	8269c <_malloc_r+0xb8>
   8268c:	6862      	ldr	r2, [r4, #4]
   8268e:	f022 0203 	bic.w	r2, r2, #3
   82692:	1b53      	subs	r3, r2, r5
   82694:	2b0f      	cmp	r3, #15
   82696:	ddf4      	ble.n	82682 <_malloc_r+0x9e>
   82698:	f10c 3cff 	add.w	ip, ip, #4294967295
   8269c:	f10c 0c01 	add.w	ip, ip, #1
   826a0:	4b9b      	ldr	r3, [pc, #620]	; (82910 <_malloc_r+0x32c>)
   826a2:	693c      	ldr	r4, [r7, #16]
   826a4:	f103 0e08 	add.w	lr, r3, #8
   826a8:	4574      	cmp	r4, lr
   826aa:	f000 817e 	beq.w	829aa <_malloc_r+0x3c6>
   826ae:	6861      	ldr	r1, [r4, #4]
   826b0:	f021 0103 	bic.w	r1, r1, #3
   826b4:	1b4a      	subs	r2, r1, r5
   826b6:	2a0f      	cmp	r2, #15
   826b8:	f300 8164 	bgt.w	82984 <_malloc_r+0x3a0>
   826bc:	2a00      	cmp	r2, #0
   826be:	f8c3 e014 	str.w	lr, [r3, #20]
   826c2:	f8c3 e010 	str.w	lr, [r3, #16]
   826c6:	da69      	bge.n	8279c <_malloc_r+0x1b8>
   826c8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   826cc:	f080 813a 	bcs.w	82944 <_malloc_r+0x360>
   826d0:	08c9      	lsrs	r1, r1, #3
   826d2:	108a      	asrs	r2, r1, #2
   826d4:	f04f 0801 	mov.w	r8, #1
   826d8:	fa08 f802 	lsl.w	r8, r8, r2
   826dc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   826e0:	685a      	ldr	r2, [r3, #4]
   826e2:	6888      	ldr	r0, [r1, #8]
   826e4:	ea48 0202 	orr.w	r2, r8, r2
   826e8:	60a0      	str	r0, [r4, #8]
   826ea:	60e1      	str	r1, [r4, #12]
   826ec:	605a      	str	r2, [r3, #4]
   826ee:	608c      	str	r4, [r1, #8]
   826f0:	60c4      	str	r4, [r0, #12]
   826f2:	ea4f 03ac 	mov.w	r3, ip, asr #2
   826f6:	2001      	movs	r0, #1
   826f8:	4098      	lsls	r0, r3
   826fa:	4290      	cmp	r0, r2
   826fc:	d85b      	bhi.n	827b6 <_malloc_r+0x1d2>
   826fe:	4202      	tst	r2, r0
   82700:	d106      	bne.n	82710 <_malloc_r+0x12c>
   82702:	f02c 0c03 	bic.w	ip, ip, #3
   82706:	0040      	lsls	r0, r0, #1
   82708:	4202      	tst	r2, r0
   8270a:	f10c 0c04 	add.w	ip, ip, #4
   8270e:	d0fa      	beq.n	82706 <_malloc_r+0x122>
   82710:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   82714:	4644      	mov	r4, r8
   82716:	46e1      	mov	r9, ip
   82718:	68e3      	ldr	r3, [r4, #12]
   8271a:	429c      	cmp	r4, r3
   8271c:	d107      	bne.n	8272e <_malloc_r+0x14a>
   8271e:	e146      	b.n	829ae <_malloc_r+0x3ca>
   82720:	2a00      	cmp	r2, #0
   82722:	f280 8157 	bge.w	829d4 <_malloc_r+0x3f0>
   82726:	68db      	ldr	r3, [r3, #12]
   82728:	429c      	cmp	r4, r3
   8272a:	f000 8140 	beq.w	829ae <_malloc_r+0x3ca>
   8272e:	6859      	ldr	r1, [r3, #4]
   82730:	f021 0103 	bic.w	r1, r1, #3
   82734:	1b4a      	subs	r2, r1, r5
   82736:	2a0f      	cmp	r2, #15
   82738:	ddf2      	ble.n	82720 <_malloc_r+0x13c>
   8273a:	461c      	mov	r4, r3
   8273c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82740:	68d9      	ldr	r1, [r3, #12]
   82742:	f045 0901 	orr.w	r9, r5, #1
   82746:	f042 0801 	orr.w	r8, r2, #1
   8274a:	441d      	add	r5, r3
   8274c:	f8c3 9004 	str.w	r9, [r3, #4]
   82750:	4630      	mov	r0, r6
   82752:	f8cc 100c 	str.w	r1, [ip, #12]
   82756:	f8c1 c008 	str.w	ip, [r1, #8]
   8275a:	617d      	str	r5, [r7, #20]
   8275c:	613d      	str	r5, [r7, #16]
   8275e:	f8c5 e00c 	str.w	lr, [r5, #12]
   82762:	f8c5 e008 	str.w	lr, [r5, #8]
   82766:	f8c5 8004 	str.w	r8, [r5, #4]
   8276a:	50aa      	str	r2, [r5, r2]
   8276c:	f000 f9d8 	bl	82b20 <__malloc_unlock>
   82770:	e764      	b.n	8263c <_malloc_r+0x58>
   82772:	217e      	movs	r1, #126	; 0x7e
   82774:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   82778:	e77c      	b.n	82674 <_malloc_r+0x90>
   8277a:	4422      	add	r2, r4
   8277c:	6850      	ldr	r0, [r2, #4]
   8277e:	68e3      	ldr	r3, [r4, #12]
   82780:	68a1      	ldr	r1, [r4, #8]
   82782:	f040 0501 	orr.w	r5, r0, #1
   82786:	60cb      	str	r3, [r1, #12]
   82788:	4630      	mov	r0, r6
   8278a:	6099      	str	r1, [r3, #8]
   8278c:	6055      	str	r5, [r2, #4]
   8278e:	f000 f9c7 	bl	82b20 <__malloc_unlock>
   82792:	3408      	adds	r4, #8
   82794:	4620      	mov	r0, r4
   82796:	b003      	add	sp, #12
   82798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8279c:	4421      	add	r1, r4
   8279e:	684b      	ldr	r3, [r1, #4]
   827a0:	4630      	mov	r0, r6
   827a2:	f043 0301 	orr.w	r3, r3, #1
   827a6:	604b      	str	r3, [r1, #4]
   827a8:	f000 f9ba 	bl	82b20 <__malloc_unlock>
   827ac:	3408      	adds	r4, #8
   827ae:	4620      	mov	r0, r4
   827b0:	b003      	add	sp, #12
   827b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   827b6:	68bc      	ldr	r4, [r7, #8]
   827b8:	6863      	ldr	r3, [r4, #4]
   827ba:	f023 0903 	bic.w	r9, r3, #3
   827be:	45a9      	cmp	r9, r5
   827c0:	d304      	bcc.n	827cc <_malloc_r+0x1e8>
   827c2:	ebc5 0309 	rsb	r3, r5, r9
   827c6:	2b0f      	cmp	r3, #15
   827c8:	f300 8091 	bgt.w	828ee <_malloc_r+0x30a>
   827cc:	4b51      	ldr	r3, [pc, #324]	; (82914 <_malloc_r+0x330>)
   827ce:	4a52      	ldr	r2, [pc, #328]	; (82918 <_malloc_r+0x334>)
   827d0:	6819      	ldr	r1, [r3, #0]
   827d2:	6813      	ldr	r3, [r2, #0]
   827d4:	eb05 0a01 	add.w	sl, r5, r1
   827d8:	3301      	adds	r3, #1
   827da:	eb04 0b09 	add.w	fp, r4, r9
   827de:	f000 8161 	beq.w	82aa4 <_malloc_r+0x4c0>
   827e2:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   827e6:	f10a 0a0f 	add.w	sl, sl, #15
   827ea:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   827ee:	f02a 0a0f 	bic.w	sl, sl, #15
   827f2:	4630      	mov	r0, r6
   827f4:	4651      	mov	r1, sl
   827f6:	9201      	str	r2, [sp, #4]
   827f8:	f000 f994 	bl	82b24 <_sbrk_r>
   827fc:	f1b0 3fff 	cmp.w	r0, #4294967295
   82800:	4680      	mov	r8, r0
   82802:	9a01      	ldr	r2, [sp, #4]
   82804:	f000 8101 	beq.w	82a0a <_malloc_r+0x426>
   82808:	4583      	cmp	fp, r0
   8280a:	f200 80fb 	bhi.w	82a04 <_malloc_r+0x420>
   8280e:	f8df c114 	ldr.w	ip, [pc, #276]	; 82924 <_malloc_r+0x340>
   82812:	45c3      	cmp	fp, r8
   82814:	f8dc 3000 	ldr.w	r3, [ip]
   82818:	4453      	add	r3, sl
   8281a:	f8cc 3000 	str.w	r3, [ip]
   8281e:	f000 814a 	beq.w	82ab6 <_malloc_r+0x4d2>
   82822:	6812      	ldr	r2, [r2, #0]
   82824:	493c      	ldr	r1, [pc, #240]	; (82918 <_malloc_r+0x334>)
   82826:	3201      	adds	r2, #1
   82828:	bf1b      	ittet	ne
   8282a:	ebcb 0b08 	rsbne	fp, fp, r8
   8282e:	445b      	addne	r3, fp
   82830:	f8c1 8000 	streq.w	r8, [r1]
   82834:	f8cc 3000 	strne.w	r3, [ip]
   82838:	f018 0307 	ands.w	r3, r8, #7
   8283c:	f000 8114 	beq.w	82a68 <_malloc_r+0x484>
   82840:	f1c3 0208 	rsb	r2, r3, #8
   82844:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   82848:	4490      	add	r8, r2
   8284a:	3308      	adds	r3, #8
   8284c:	44c2      	add	sl, r8
   8284e:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   82852:	ebca 0a03 	rsb	sl, sl, r3
   82856:	4651      	mov	r1, sl
   82858:	4630      	mov	r0, r6
   8285a:	f8cd c004 	str.w	ip, [sp, #4]
   8285e:	f000 f961 	bl	82b24 <_sbrk_r>
   82862:	1c43      	adds	r3, r0, #1
   82864:	f8dd c004 	ldr.w	ip, [sp, #4]
   82868:	f000 8135 	beq.w	82ad6 <_malloc_r+0x4f2>
   8286c:	ebc8 0200 	rsb	r2, r8, r0
   82870:	4452      	add	r2, sl
   82872:	f042 0201 	orr.w	r2, r2, #1
   82876:	f8dc 3000 	ldr.w	r3, [ip]
   8287a:	42bc      	cmp	r4, r7
   8287c:	4453      	add	r3, sl
   8287e:	f8c7 8008 	str.w	r8, [r7, #8]
   82882:	f8cc 3000 	str.w	r3, [ip]
   82886:	f8c8 2004 	str.w	r2, [r8, #4]
   8288a:	f8df a098 	ldr.w	sl, [pc, #152]	; 82924 <_malloc_r+0x340>
   8288e:	d015      	beq.n	828bc <_malloc_r+0x2d8>
   82890:	f1b9 0f0f 	cmp.w	r9, #15
   82894:	f240 80eb 	bls.w	82a6e <_malloc_r+0x48a>
   82898:	6861      	ldr	r1, [r4, #4]
   8289a:	f1a9 020c 	sub.w	r2, r9, #12
   8289e:	f022 0207 	bic.w	r2, r2, #7
   828a2:	f001 0101 	and.w	r1, r1, #1
   828a6:	ea42 0e01 	orr.w	lr, r2, r1
   828aa:	2005      	movs	r0, #5
   828ac:	18a1      	adds	r1, r4, r2
   828ae:	2a0f      	cmp	r2, #15
   828b0:	f8c4 e004 	str.w	lr, [r4, #4]
   828b4:	6048      	str	r0, [r1, #4]
   828b6:	6088      	str	r0, [r1, #8]
   828b8:	f200 8111 	bhi.w	82ade <_malloc_r+0x4fa>
   828bc:	4a17      	ldr	r2, [pc, #92]	; (8291c <_malloc_r+0x338>)
   828be:	68bc      	ldr	r4, [r7, #8]
   828c0:	6811      	ldr	r1, [r2, #0]
   828c2:	428b      	cmp	r3, r1
   828c4:	bf88      	it	hi
   828c6:	6013      	strhi	r3, [r2, #0]
   828c8:	4a15      	ldr	r2, [pc, #84]	; (82920 <_malloc_r+0x33c>)
   828ca:	6811      	ldr	r1, [r2, #0]
   828cc:	428b      	cmp	r3, r1
   828ce:	bf88      	it	hi
   828d0:	6013      	strhi	r3, [r2, #0]
   828d2:	6862      	ldr	r2, [r4, #4]
   828d4:	f022 0203 	bic.w	r2, r2, #3
   828d8:	4295      	cmp	r5, r2
   828da:	ebc5 0302 	rsb	r3, r5, r2
   828de:	d801      	bhi.n	828e4 <_malloc_r+0x300>
   828e0:	2b0f      	cmp	r3, #15
   828e2:	dc04      	bgt.n	828ee <_malloc_r+0x30a>
   828e4:	4630      	mov	r0, r6
   828e6:	f000 f91b 	bl	82b20 <__malloc_unlock>
   828ea:	2400      	movs	r4, #0
   828ec:	e6a6      	b.n	8263c <_malloc_r+0x58>
   828ee:	f045 0201 	orr.w	r2, r5, #1
   828f2:	f043 0301 	orr.w	r3, r3, #1
   828f6:	4425      	add	r5, r4
   828f8:	6062      	str	r2, [r4, #4]
   828fa:	4630      	mov	r0, r6
   828fc:	60bd      	str	r5, [r7, #8]
   828fe:	606b      	str	r3, [r5, #4]
   82900:	f000 f90e 	bl	82b20 <__malloc_unlock>
   82904:	3408      	adds	r4, #8
   82906:	4620      	mov	r0, r4
   82908:	b003      	add	sp, #12
   8290a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8290e:	bf00      	nop
   82910:	20070434 	.word	0x20070434
   82914:	20070964 	.word	0x20070964
   82918:	20070840 	.word	0x20070840
   8291c:	20070960 	.word	0x20070960
   82920:	2007095c 	.word	0x2007095c
   82924:	20070968 	.word	0x20070968
   82928:	f1bc 0f14 	cmp.w	ip, #20
   8292c:	d961      	bls.n	829f2 <_malloc_r+0x40e>
   8292e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   82932:	f200 808f 	bhi.w	82a54 <_malloc_r+0x470>
   82936:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   8293a:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   8293e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82942:	e697      	b.n	82674 <_malloc_r+0x90>
   82944:	0a4b      	lsrs	r3, r1, #9
   82946:	2b04      	cmp	r3, #4
   82948:	d958      	bls.n	829fc <_malloc_r+0x418>
   8294a:	2b14      	cmp	r3, #20
   8294c:	f200 80ad 	bhi.w	82aaa <_malloc_r+0x4c6>
   82950:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   82954:	0050      	lsls	r0, r2, #1
   82956:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   8295a:	6883      	ldr	r3, [r0, #8]
   8295c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 82b18 <_malloc_r+0x534>
   82960:	4283      	cmp	r3, r0
   82962:	f000 808a 	beq.w	82a7a <_malloc_r+0x496>
   82966:	685a      	ldr	r2, [r3, #4]
   82968:	f022 0203 	bic.w	r2, r2, #3
   8296c:	4291      	cmp	r1, r2
   8296e:	d202      	bcs.n	82976 <_malloc_r+0x392>
   82970:	689b      	ldr	r3, [r3, #8]
   82972:	4298      	cmp	r0, r3
   82974:	d1f7      	bne.n	82966 <_malloc_r+0x382>
   82976:	68d9      	ldr	r1, [r3, #12]
   82978:	687a      	ldr	r2, [r7, #4]
   8297a:	60e1      	str	r1, [r4, #12]
   8297c:	60a3      	str	r3, [r4, #8]
   8297e:	608c      	str	r4, [r1, #8]
   82980:	60dc      	str	r4, [r3, #12]
   82982:	e6b6      	b.n	826f2 <_malloc_r+0x10e>
   82984:	f045 0701 	orr.w	r7, r5, #1
   82988:	f042 0101 	orr.w	r1, r2, #1
   8298c:	4425      	add	r5, r4
   8298e:	6067      	str	r7, [r4, #4]
   82990:	4630      	mov	r0, r6
   82992:	615d      	str	r5, [r3, #20]
   82994:	611d      	str	r5, [r3, #16]
   82996:	f8c5 e00c 	str.w	lr, [r5, #12]
   8299a:	f8c5 e008 	str.w	lr, [r5, #8]
   8299e:	6069      	str	r1, [r5, #4]
   829a0:	50aa      	str	r2, [r5, r2]
   829a2:	3408      	adds	r4, #8
   829a4:	f000 f8bc 	bl	82b20 <__malloc_unlock>
   829a8:	e648      	b.n	8263c <_malloc_r+0x58>
   829aa:	685a      	ldr	r2, [r3, #4]
   829ac:	e6a1      	b.n	826f2 <_malloc_r+0x10e>
   829ae:	f109 0901 	add.w	r9, r9, #1
   829b2:	f019 0f03 	tst.w	r9, #3
   829b6:	f104 0408 	add.w	r4, r4, #8
   829ba:	f47f aead 	bne.w	82718 <_malloc_r+0x134>
   829be:	e02d      	b.n	82a1c <_malloc_r+0x438>
   829c0:	f104 0308 	add.w	r3, r4, #8
   829c4:	6964      	ldr	r4, [r4, #20]
   829c6:	42a3      	cmp	r3, r4
   829c8:	bf08      	it	eq
   829ca:	f10c 0c02 	addeq.w	ip, ip, #2
   829ce:	f43f ae67 	beq.w	826a0 <_malloc_r+0xbc>
   829d2:	e623      	b.n	8261c <_malloc_r+0x38>
   829d4:	4419      	add	r1, r3
   829d6:	6848      	ldr	r0, [r1, #4]
   829d8:	461c      	mov	r4, r3
   829da:	f854 2f08 	ldr.w	r2, [r4, #8]!
   829de:	68db      	ldr	r3, [r3, #12]
   829e0:	f040 0501 	orr.w	r5, r0, #1
   829e4:	604d      	str	r5, [r1, #4]
   829e6:	4630      	mov	r0, r6
   829e8:	60d3      	str	r3, [r2, #12]
   829ea:	609a      	str	r2, [r3, #8]
   829ec:	f000 f898 	bl	82b20 <__malloc_unlock>
   829f0:	e624      	b.n	8263c <_malloc_r+0x58>
   829f2:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   829f6:	ea4f 014c 	mov.w	r1, ip, lsl #1
   829fa:	e63b      	b.n	82674 <_malloc_r+0x90>
   829fc:	098a      	lsrs	r2, r1, #6
   829fe:	3238      	adds	r2, #56	; 0x38
   82a00:	0050      	lsls	r0, r2, #1
   82a02:	e7a8      	b.n	82956 <_malloc_r+0x372>
   82a04:	42bc      	cmp	r4, r7
   82a06:	f43f af02 	beq.w	8280e <_malloc_r+0x22a>
   82a0a:	68bc      	ldr	r4, [r7, #8]
   82a0c:	6862      	ldr	r2, [r4, #4]
   82a0e:	f022 0203 	bic.w	r2, r2, #3
   82a12:	e761      	b.n	828d8 <_malloc_r+0x2f4>
   82a14:	f8d8 8000 	ldr.w	r8, [r8]
   82a18:	4598      	cmp	r8, r3
   82a1a:	d17a      	bne.n	82b12 <_malloc_r+0x52e>
   82a1c:	f01c 0f03 	tst.w	ip, #3
   82a20:	f1a8 0308 	sub.w	r3, r8, #8
   82a24:	f10c 3cff 	add.w	ip, ip, #4294967295
   82a28:	d1f4      	bne.n	82a14 <_malloc_r+0x430>
   82a2a:	687b      	ldr	r3, [r7, #4]
   82a2c:	ea23 0300 	bic.w	r3, r3, r0
   82a30:	607b      	str	r3, [r7, #4]
   82a32:	0040      	lsls	r0, r0, #1
   82a34:	4298      	cmp	r0, r3
   82a36:	f63f aebe 	bhi.w	827b6 <_malloc_r+0x1d2>
   82a3a:	2800      	cmp	r0, #0
   82a3c:	f43f aebb 	beq.w	827b6 <_malloc_r+0x1d2>
   82a40:	4203      	tst	r3, r0
   82a42:	46cc      	mov	ip, r9
   82a44:	f47f ae64 	bne.w	82710 <_malloc_r+0x12c>
   82a48:	0040      	lsls	r0, r0, #1
   82a4a:	4203      	tst	r3, r0
   82a4c:	f10c 0c04 	add.w	ip, ip, #4
   82a50:	d0fa      	beq.n	82a48 <_malloc_r+0x464>
   82a52:	e65d      	b.n	82710 <_malloc_r+0x12c>
   82a54:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   82a58:	d819      	bhi.n	82a8e <_malloc_r+0x4aa>
   82a5a:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   82a5e:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   82a62:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82a66:	e605      	b.n	82674 <_malloc_r+0x90>
   82a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82a6c:	e6ee      	b.n	8284c <_malloc_r+0x268>
   82a6e:	2301      	movs	r3, #1
   82a70:	f8c8 3004 	str.w	r3, [r8, #4]
   82a74:	4644      	mov	r4, r8
   82a76:	2200      	movs	r2, #0
   82a78:	e72e      	b.n	828d8 <_malloc_r+0x2f4>
   82a7a:	1092      	asrs	r2, r2, #2
   82a7c:	2001      	movs	r0, #1
   82a7e:	4090      	lsls	r0, r2
   82a80:	f8d8 2004 	ldr.w	r2, [r8, #4]
   82a84:	4619      	mov	r1, r3
   82a86:	4302      	orrs	r2, r0
   82a88:	f8c8 2004 	str.w	r2, [r8, #4]
   82a8c:	e775      	b.n	8297a <_malloc_r+0x396>
   82a8e:	f240 5354 	movw	r3, #1364	; 0x554
   82a92:	459c      	cmp	ip, r3
   82a94:	d81b      	bhi.n	82ace <_malloc_r+0x4ea>
   82a96:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   82a9a:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   82a9e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82aa2:	e5e7      	b.n	82674 <_malloc_r+0x90>
   82aa4:	f10a 0a10 	add.w	sl, sl, #16
   82aa8:	e6a3      	b.n	827f2 <_malloc_r+0x20e>
   82aaa:	2b54      	cmp	r3, #84	; 0x54
   82aac:	d81f      	bhi.n	82aee <_malloc_r+0x50a>
   82aae:	0b0a      	lsrs	r2, r1, #12
   82ab0:	326e      	adds	r2, #110	; 0x6e
   82ab2:	0050      	lsls	r0, r2, #1
   82ab4:	e74f      	b.n	82956 <_malloc_r+0x372>
   82ab6:	f3cb 010b 	ubfx	r1, fp, #0, #12
   82aba:	2900      	cmp	r1, #0
   82abc:	f47f aeb1 	bne.w	82822 <_malloc_r+0x23e>
   82ac0:	eb0a 0109 	add.w	r1, sl, r9
   82ac4:	68ba      	ldr	r2, [r7, #8]
   82ac6:	f041 0101 	orr.w	r1, r1, #1
   82aca:	6051      	str	r1, [r2, #4]
   82acc:	e6f6      	b.n	828bc <_malloc_r+0x2d8>
   82ace:	21fc      	movs	r1, #252	; 0xfc
   82ad0:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   82ad4:	e5ce      	b.n	82674 <_malloc_r+0x90>
   82ad6:	2201      	movs	r2, #1
   82ad8:	f04f 0a00 	mov.w	sl, #0
   82adc:	e6cb      	b.n	82876 <_malloc_r+0x292>
   82ade:	f104 0108 	add.w	r1, r4, #8
   82ae2:	4630      	mov	r0, r6
   82ae4:	f7ff fc16 	bl	82314 <_free_r>
   82ae8:	f8da 3000 	ldr.w	r3, [sl]
   82aec:	e6e6      	b.n	828bc <_malloc_r+0x2d8>
   82aee:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82af2:	d803      	bhi.n	82afc <_malloc_r+0x518>
   82af4:	0bca      	lsrs	r2, r1, #15
   82af6:	3277      	adds	r2, #119	; 0x77
   82af8:	0050      	lsls	r0, r2, #1
   82afa:	e72c      	b.n	82956 <_malloc_r+0x372>
   82afc:	f240 5254 	movw	r2, #1364	; 0x554
   82b00:	4293      	cmp	r3, r2
   82b02:	d803      	bhi.n	82b0c <_malloc_r+0x528>
   82b04:	0c8a      	lsrs	r2, r1, #18
   82b06:	327c      	adds	r2, #124	; 0x7c
   82b08:	0050      	lsls	r0, r2, #1
   82b0a:	e724      	b.n	82956 <_malloc_r+0x372>
   82b0c:	20fc      	movs	r0, #252	; 0xfc
   82b0e:	227e      	movs	r2, #126	; 0x7e
   82b10:	e721      	b.n	82956 <_malloc_r+0x372>
   82b12:	687b      	ldr	r3, [r7, #4]
   82b14:	e78d      	b.n	82a32 <_malloc_r+0x44e>
   82b16:	bf00      	nop
   82b18:	20070434 	.word	0x20070434

00082b1c <__malloc_lock>:
   82b1c:	4770      	bx	lr
   82b1e:	bf00      	nop

00082b20 <__malloc_unlock>:
   82b20:	4770      	bx	lr
   82b22:	bf00      	nop

00082b24 <_sbrk_r>:
   82b24:	b538      	push	{r3, r4, r5, lr}
   82b26:	4c07      	ldr	r4, [pc, #28]	; (82b44 <_sbrk_r+0x20>)
   82b28:	2300      	movs	r3, #0
   82b2a:	4605      	mov	r5, r0
   82b2c:	4608      	mov	r0, r1
   82b2e:	6023      	str	r3, [r4, #0]
   82b30:	f7ff f856 	bl	81be0 <_sbrk>
   82b34:	1c43      	adds	r3, r0, #1
   82b36:	d000      	beq.n	82b3a <_sbrk_r+0x16>
   82b38:	bd38      	pop	{r3, r4, r5, pc}
   82b3a:	6823      	ldr	r3, [r4, #0]
   82b3c:	2b00      	cmp	r3, #0
   82b3e:	d0fb      	beq.n	82b38 <_sbrk_r+0x14>
   82b40:	602b      	str	r3, [r5, #0]
   82b42:	bd38      	pop	{r3, r4, r5, pc}
   82b44:	20070a18 	.word	0x20070a18

00082b48 <__sread>:
   82b48:	b510      	push	{r4, lr}
   82b4a:	460c      	mov	r4, r1
   82b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82b50:	f000 f938 	bl	82dc4 <_read_r>
   82b54:	2800      	cmp	r0, #0
   82b56:	db03      	blt.n	82b60 <__sread+0x18>
   82b58:	6d23      	ldr	r3, [r4, #80]	; 0x50
   82b5a:	4403      	add	r3, r0
   82b5c:	6523      	str	r3, [r4, #80]	; 0x50
   82b5e:	bd10      	pop	{r4, pc}
   82b60:	89a3      	ldrh	r3, [r4, #12]
   82b62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   82b66:	81a3      	strh	r3, [r4, #12]
   82b68:	bd10      	pop	{r4, pc}
   82b6a:	bf00      	nop

00082b6c <__swrite>:
   82b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82b70:	460c      	mov	r4, r1
   82b72:	8989      	ldrh	r1, [r1, #12]
   82b74:	461d      	mov	r5, r3
   82b76:	05cb      	lsls	r3, r1, #23
   82b78:	4616      	mov	r6, r2
   82b7a:	4607      	mov	r7, r0
   82b7c:	d506      	bpl.n	82b8c <__swrite+0x20>
   82b7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82b82:	2200      	movs	r2, #0
   82b84:	2302      	movs	r3, #2
   82b86:	f000 f909 	bl	82d9c <_lseek_r>
   82b8a:	89a1      	ldrh	r1, [r4, #12]
   82b8c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   82b90:	81a1      	strh	r1, [r4, #12]
   82b92:	4638      	mov	r0, r7
   82b94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82b98:	4632      	mov	r2, r6
   82b9a:	462b      	mov	r3, r5
   82b9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82ba0:	f000 b814 	b.w	82bcc <_write_r>

00082ba4 <__sseek>:
   82ba4:	b510      	push	{r4, lr}
   82ba6:	460c      	mov	r4, r1
   82ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82bac:	f000 f8f6 	bl	82d9c <_lseek_r>
   82bb0:	89a3      	ldrh	r3, [r4, #12]
   82bb2:	1c42      	adds	r2, r0, #1
   82bb4:	bf0e      	itee	eq
   82bb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   82bba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   82bbe:	6520      	strne	r0, [r4, #80]	; 0x50
   82bc0:	81a3      	strh	r3, [r4, #12]
   82bc2:	bd10      	pop	{r4, pc}

00082bc4 <__sclose>:
   82bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82bc8:	f000 b868 	b.w	82c9c <_close_r>

00082bcc <_write_r>:
   82bcc:	b570      	push	{r4, r5, r6, lr}
   82bce:	4c08      	ldr	r4, [pc, #32]	; (82bf0 <_write_r+0x24>)
   82bd0:	4606      	mov	r6, r0
   82bd2:	2500      	movs	r5, #0
   82bd4:	4608      	mov	r0, r1
   82bd6:	4611      	mov	r1, r2
   82bd8:	461a      	mov	r2, r3
   82bda:	6025      	str	r5, [r4, #0]
   82bdc:	f7fd fcba 	bl	80554 <_write>
   82be0:	1c43      	adds	r3, r0, #1
   82be2:	d000      	beq.n	82be6 <_write_r+0x1a>
   82be4:	bd70      	pop	{r4, r5, r6, pc}
   82be6:	6823      	ldr	r3, [r4, #0]
   82be8:	2b00      	cmp	r3, #0
   82bea:	d0fb      	beq.n	82be4 <_write_r+0x18>
   82bec:	6033      	str	r3, [r6, #0]
   82bee:	bd70      	pop	{r4, r5, r6, pc}
   82bf0:	20070a18 	.word	0x20070a18

00082bf4 <__register_exitproc>:
   82bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   82bf6:	4c27      	ldr	r4, [pc, #156]	; (82c94 <__register_exitproc+0xa0>)
   82bf8:	b085      	sub	sp, #20
   82bfa:	6826      	ldr	r6, [r4, #0]
   82bfc:	4607      	mov	r7, r0
   82bfe:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   82c02:	2c00      	cmp	r4, #0
   82c04:	d040      	beq.n	82c88 <__register_exitproc+0x94>
   82c06:	6865      	ldr	r5, [r4, #4]
   82c08:	2d1f      	cmp	r5, #31
   82c0a:	dd1e      	ble.n	82c4a <__register_exitproc+0x56>
   82c0c:	4822      	ldr	r0, [pc, #136]	; (82c98 <__register_exitproc+0xa4>)
   82c0e:	b918      	cbnz	r0, 82c18 <__register_exitproc+0x24>
   82c10:	f04f 30ff 	mov.w	r0, #4294967295
   82c14:	b005      	add	sp, #20
   82c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82c18:	f44f 70c8 	mov.w	r0, #400	; 0x190
   82c1c:	9103      	str	r1, [sp, #12]
   82c1e:	9202      	str	r2, [sp, #8]
   82c20:	9301      	str	r3, [sp, #4]
   82c22:	f7ff fcd7 	bl	825d4 <malloc>
   82c26:	9903      	ldr	r1, [sp, #12]
   82c28:	4604      	mov	r4, r0
   82c2a:	9a02      	ldr	r2, [sp, #8]
   82c2c:	9b01      	ldr	r3, [sp, #4]
   82c2e:	2800      	cmp	r0, #0
   82c30:	d0ee      	beq.n	82c10 <__register_exitproc+0x1c>
   82c32:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   82c36:	2000      	movs	r0, #0
   82c38:	6025      	str	r5, [r4, #0]
   82c3a:	6060      	str	r0, [r4, #4]
   82c3c:	4605      	mov	r5, r0
   82c3e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   82c42:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   82c46:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   82c4a:	b93f      	cbnz	r7, 82c5c <__register_exitproc+0x68>
   82c4c:	1c6b      	adds	r3, r5, #1
   82c4e:	2000      	movs	r0, #0
   82c50:	3502      	adds	r5, #2
   82c52:	6063      	str	r3, [r4, #4]
   82c54:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   82c58:	b005      	add	sp, #20
   82c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82c5c:	2601      	movs	r6, #1
   82c5e:	40ae      	lsls	r6, r5
   82c60:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   82c64:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   82c68:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   82c6c:	2f02      	cmp	r7, #2
   82c6e:	ea42 0206 	orr.w	r2, r2, r6
   82c72:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   82c76:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   82c7a:	d1e7      	bne.n	82c4c <__register_exitproc+0x58>
   82c7c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   82c80:	431e      	orrs	r6, r3
   82c82:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   82c86:	e7e1      	b.n	82c4c <__register_exitproc+0x58>
   82c88:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   82c8c:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   82c90:	e7b9      	b.n	82c06 <__register_exitproc+0x12>
   82c92:	bf00      	nop
   82c94:	00082f00 	.word	0x00082f00
   82c98:	000825d5 	.word	0x000825d5

00082c9c <_close_r>:
   82c9c:	b538      	push	{r3, r4, r5, lr}
   82c9e:	4c07      	ldr	r4, [pc, #28]	; (82cbc <_close_r+0x20>)
   82ca0:	2300      	movs	r3, #0
   82ca2:	4605      	mov	r5, r0
   82ca4:	4608      	mov	r0, r1
   82ca6:	6023      	str	r3, [r4, #0]
   82ca8:	f7fe ffb4 	bl	81c14 <_close>
   82cac:	1c43      	adds	r3, r0, #1
   82cae:	d000      	beq.n	82cb2 <_close_r+0x16>
   82cb0:	bd38      	pop	{r3, r4, r5, pc}
   82cb2:	6823      	ldr	r3, [r4, #0]
   82cb4:	2b00      	cmp	r3, #0
   82cb6:	d0fb      	beq.n	82cb0 <_close_r+0x14>
   82cb8:	602b      	str	r3, [r5, #0]
   82cba:	bd38      	pop	{r3, r4, r5, pc}
   82cbc:	20070a18 	.word	0x20070a18

00082cc0 <_fclose_r>:
   82cc0:	b570      	push	{r4, r5, r6, lr}
   82cc2:	460c      	mov	r4, r1
   82cc4:	4605      	mov	r5, r0
   82cc6:	b131      	cbz	r1, 82cd6 <_fclose_r+0x16>
   82cc8:	b110      	cbz	r0, 82cd0 <_fclose_r+0x10>
   82cca:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82ccc:	2b00      	cmp	r3, #0
   82cce:	d02f      	beq.n	82d30 <_fclose_r+0x70>
   82cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82cd4:	b90b      	cbnz	r3, 82cda <_fclose_r+0x1a>
   82cd6:	2000      	movs	r0, #0
   82cd8:	bd70      	pop	{r4, r5, r6, pc}
   82cda:	4628      	mov	r0, r5
   82cdc:	4621      	mov	r1, r4
   82cde:	f7ff fa19 	bl	82114 <_fflush_r>
   82ce2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   82ce4:	4606      	mov	r6, r0
   82ce6:	b133      	cbz	r3, 82cf6 <_fclose_r+0x36>
   82ce8:	4628      	mov	r0, r5
   82cea:	69e1      	ldr	r1, [r4, #28]
   82cec:	4798      	blx	r3
   82cee:	2800      	cmp	r0, #0
   82cf0:	bfb8      	it	lt
   82cf2:	f04f 36ff 	movlt.w	r6, #4294967295
   82cf6:	89a3      	ldrh	r3, [r4, #12]
   82cf8:	061b      	lsls	r3, r3, #24
   82cfa:	d41c      	bmi.n	82d36 <_fclose_r+0x76>
   82cfc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82cfe:	b141      	cbz	r1, 82d12 <_fclose_r+0x52>
   82d00:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82d04:	4299      	cmp	r1, r3
   82d06:	d002      	beq.n	82d0e <_fclose_r+0x4e>
   82d08:	4628      	mov	r0, r5
   82d0a:	f7ff fb03 	bl	82314 <_free_r>
   82d0e:	2300      	movs	r3, #0
   82d10:	6323      	str	r3, [r4, #48]	; 0x30
   82d12:	6c61      	ldr	r1, [r4, #68]	; 0x44
   82d14:	b121      	cbz	r1, 82d20 <_fclose_r+0x60>
   82d16:	4628      	mov	r0, r5
   82d18:	f7ff fafc 	bl	82314 <_free_r>
   82d1c:	2300      	movs	r3, #0
   82d1e:	6463      	str	r3, [r4, #68]	; 0x44
   82d20:	f7ff fa8e 	bl	82240 <__sfp_lock_acquire>
   82d24:	2300      	movs	r3, #0
   82d26:	81a3      	strh	r3, [r4, #12]
   82d28:	f7ff fa8c 	bl	82244 <__sfp_lock_release>
   82d2c:	4630      	mov	r0, r6
   82d2e:	bd70      	pop	{r4, r5, r6, pc}
   82d30:	f7ff fa0c 	bl	8214c <__sinit>
   82d34:	e7cc      	b.n	82cd0 <_fclose_r+0x10>
   82d36:	4628      	mov	r0, r5
   82d38:	6921      	ldr	r1, [r4, #16]
   82d3a:	f7ff faeb 	bl	82314 <_free_r>
   82d3e:	e7dd      	b.n	82cfc <_fclose_r+0x3c>

00082d40 <fclose>:
   82d40:	4b02      	ldr	r3, [pc, #8]	; (82d4c <fclose+0xc>)
   82d42:	4601      	mov	r1, r0
   82d44:	6818      	ldr	r0, [r3, #0]
   82d46:	f7ff bfbb 	b.w	82cc0 <_fclose_r>
   82d4a:	bf00      	nop
   82d4c:	20070430 	.word	0x20070430

00082d50 <_fstat_r>:
   82d50:	b538      	push	{r3, r4, r5, lr}
   82d52:	4c08      	ldr	r4, [pc, #32]	; (82d74 <_fstat_r+0x24>)
   82d54:	2300      	movs	r3, #0
   82d56:	4605      	mov	r5, r0
   82d58:	4608      	mov	r0, r1
   82d5a:	4611      	mov	r1, r2
   82d5c:	6023      	str	r3, [r4, #0]
   82d5e:	f7fe ff5d 	bl	81c1c <_fstat>
   82d62:	1c43      	adds	r3, r0, #1
   82d64:	d000      	beq.n	82d68 <_fstat_r+0x18>
   82d66:	bd38      	pop	{r3, r4, r5, pc}
   82d68:	6823      	ldr	r3, [r4, #0]
   82d6a:	2b00      	cmp	r3, #0
   82d6c:	d0fb      	beq.n	82d66 <_fstat_r+0x16>
   82d6e:	602b      	str	r3, [r5, #0]
   82d70:	bd38      	pop	{r3, r4, r5, pc}
   82d72:	bf00      	nop
   82d74:	20070a18 	.word	0x20070a18

00082d78 <_isatty_r>:
   82d78:	b538      	push	{r3, r4, r5, lr}
   82d7a:	4c07      	ldr	r4, [pc, #28]	; (82d98 <_isatty_r+0x20>)
   82d7c:	2300      	movs	r3, #0
   82d7e:	4605      	mov	r5, r0
   82d80:	4608      	mov	r0, r1
   82d82:	6023      	str	r3, [r4, #0]
   82d84:	f7fe ff50 	bl	81c28 <_isatty>
   82d88:	1c43      	adds	r3, r0, #1
   82d8a:	d000      	beq.n	82d8e <_isatty_r+0x16>
   82d8c:	bd38      	pop	{r3, r4, r5, pc}
   82d8e:	6823      	ldr	r3, [r4, #0]
   82d90:	2b00      	cmp	r3, #0
   82d92:	d0fb      	beq.n	82d8c <_isatty_r+0x14>
   82d94:	602b      	str	r3, [r5, #0]
   82d96:	bd38      	pop	{r3, r4, r5, pc}
   82d98:	20070a18 	.word	0x20070a18

00082d9c <_lseek_r>:
   82d9c:	b570      	push	{r4, r5, r6, lr}
   82d9e:	4c08      	ldr	r4, [pc, #32]	; (82dc0 <_lseek_r+0x24>)
   82da0:	4606      	mov	r6, r0
   82da2:	2500      	movs	r5, #0
   82da4:	4608      	mov	r0, r1
   82da6:	4611      	mov	r1, r2
   82da8:	461a      	mov	r2, r3
   82daa:	6025      	str	r5, [r4, #0]
   82dac:	f7fe ff3e 	bl	81c2c <_lseek>
   82db0:	1c43      	adds	r3, r0, #1
   82db2:	d000      	beq.n	82db6 <_lseek_r+0x1a>
   82db4:	bd70      	pop	{r4, r5, r6, pc}
   82db6:	6823      	ldr	r3, [r4, #0]
   82db8:	2b00      	cmp	r3, #0
   82dba:	d0fb      	beq.n	82db4 <_lseek_r+0x18>
   82dbc:	6033      	str	r3, [r6, #0]
   82dbe:	bd70      	pop	{r4, r5, r6, pc}
   82dc0:	20070a18 	.word	0x20070a18

00082dc4 <_read_r>:
   82dc4:	b570      	push	{r4, r5, r6, lr}
   82dc6:	4c08      	ldr	r4, [pc, #32]	; (82de8 <_read_r+0x24>)
   82dc8:	4606      	mov	r6, r0
   82dca:	2500      	movs	r5, #0
   82dcc:	4608      	mov	r0, r1
   82dce:	4611      	mov	r1, r2
   82dd0:	461a      	mov	r2, r3
   82dd2:	6025      	str	r5, [r4, #0]
   82dd4:	f7fd fb9e 	bl	80514 <_read>
   82dd8:	1c43      	adds	r3, r0, #1
   82dda:	d000      	beq.n	82dde <_read_r+0x1a>
   82ddc:	bd70      	pop	{r4, r5, r6, pc}
   82dde:	6823      	ldr	r3, [r4, #0]
   82de0:	2b00      	cmp	r3, #0
   82de2:	d0fb      	beq.n	82ddc <_read_r+0x18>
   82de4:	6033      	str	r3, [r6, #0]
   82de6:	bd70      	pop	{r4, r5, r6, pc}
   82de8:	20070a18 	.word	0x20070a18
   82dec:	6e6f7257 	.word	0x6e6f7257
   82df0:	68632067 	.word	0x68632067
   82df4:	656e6e61 	.word	0x656e6e61
   82df8:	6e69206c 	.word	0x6e69206c
   82dfc:	616e6520 	.word	0x616e6520
   82e00:	64656c62 	.word	0x64656c62
   82e04:	00000000 	.word	0x00000000
   82e08:	6e6f7257 	.word	0x6e6f7257
   82e0c:	68632067 	.word	0x68632067
   82e10:	656e6e61 	.word	0x656e6e61
   82e14:	7369206c 	.word	0x7369206c
   82e18:	616e6520 	.word	0x616e6520
   82e1c:	64656c62 	.word	0x64656c62
   82e20:	00000000 	.word	0x00000000
   82e24:	74736574 	.word	0x74736574
   82e28:	7365742f 	.word	0x7365742f
   82e2c:	77705f74 	.word	0x77705f74
   82e30:	00632e6d 	.word	0x00632e6d
   82e34:	74736574 	.word	0x74736574
   82e38:	6d77705f 	.word	0x6d77705f
   82e3c:	6168635f 	.word	0x6168635f
   82e40:	6c656e6e 	.word	0x6c656e6e
   82e44:	0000305f 	.word	0x0000305f
   82e48:	74736574 	.word	0x74736574
   82e4c:	6d77705f 	.word	0x6d77705f
   82e50:	6168635f 	.word	0x6168635f
   82e54:	6c656e6e 	.word	0x6c656e6e
   82e58:	0000315f 	.word	0x0000315f
   82e5c:	74736574 	.word	0x74736574
   82e60:	6d77705f 	.word	0x6d77705f
   82e64:	6168635f 	.word	0x6168635f
   82e68:	6c656e6e 	.word	0x6c656e6e
   82e6c:	0000325f 	.word	0x0000325f
   82e70:	74736574 	.word	0x74736574
   82e74:	6d77705f 	.word	0x6d77705f
   82e78:	6168635f 	.word	0x6168635f
   82e7c:	6c656e6e 	.word	0x6c656e6e
   82e80:	0000335f 	.word	0x0000335f
   82e84:	74736574 	.word	0x74736574
   82e88:	6d77705f 	.word	0x6d77705f
   82e8c:	6168635f 	.word	0x6168635f
   82e90:	6c656e6e 	.word	0x6c656e6e
   82e94:	0000345f 	.word	0x0000345f

00082e98 <UnityStrOk>:
   82e98:	00004b4f                                OK..

00082e9c <UnityStrSpacer>:
   82e9c:	0000202e                                . ..

00082ea0 <UnityStrWas>:
   82ea0:	73615720 00000020                        Was ...

00082ea8 <UnityStrFail>:
   82ea8:	4c494146 00000000                       FAIL....

00082eb0 <UnityStrExpected>:
   82eb0:	70784520 65746365 00002064               Expected ..

00082ebc <UnityStrBreaker>:
   82ebc:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   82ecc:	2d2d2d2d 002d2d2d                       -------.

00082ed4 <UnityStrResultsFailures>:
   82ed4:	69614620 6572756c 00002073               Failures ..

00082ee0 <UnityStrResultsIgnored>:
   82ee0:	6e674920 6465726f 00000020               Ignored ...

00082eec <UnityStrResultsTests>:
   82eec:	73655420 00207374                        Tests .

00082ef4 <UnityStrPass>:
   82ef4:	53534150 00000000 00000043              PASS....C...

00082f00 <_global_impure_ptr>:
   82f00:	20070008                                ... 

00082f04 <_init>:
   82f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82f06:	bf00      	nop
   82f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82f0a:	bc08      	pop	{r3}
   82f0c:	469e      	mov	lr, r3
   82f0e:	4770      	bx	lr

00082f10 <__init_array_start>:
   82f10:	00081fad 	.word	0x00081fad

00082f14 <__frame_dummy_init_array_entry>:
   82f14:	00080119                                ....

00082f18 <_fini>:
   82f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82f1a:	bf00      	nop
   82f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82f1e:	bc08      	pop	{r3}
   82f20:	469e      	mov	lr, r3
   82f22:	4770      	bx	lr

00082f24 <__fini_array_start>:
   82f24:	000800f5 	.word	0x000800f5
>>>>>>> 922d6488929f892eaa570b3995759a188003cf84
