
HoverCraft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000614c  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008614c  0008614c  0000e14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000d90  20070000  00086154  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000843c  20070d90  00086ee8  00010d90  2**3
                  ALLOC
  4 .stack        00002004  200791cc  0008f324  00010d90  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010d90  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00010db9  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002dfdb  00000000  00000000  00010e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008499  00000000  00000000  0003ee05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000015c8  00000000  00000000  000472a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ff0  00000000  00000000  00048868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019d7c  00000000  00000000  00049858  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001bcda  00000000  00000000  000635d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00074526  00000000  00000000  0007f2ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002f54  00000000  00000000  000f37d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000e2c2  00000000  00000000  000f6728  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007b1d0 	.word	0x2007b1d0
   80004:	00082cb5 	.word	0x00082cb5
   80008:	00082cb1 	.word	0x00082cb1
   8000c:	00082cb1 	.word	0x00082cb1
   80010:	00082cb1 	.word	0x00082cb1
   80014:	00082cb1 	.word	0x00082cb1
   80018:	00082cb1 	.word	0x00082cb1
	...
   8002c:	000810c5 	.word	0x000810c5
   80030:	00082cb1 	.word	0x00082cb1
   80034:	00000000 	.word	0x00000000
   80038:	00081141 	.word	0x00081141
   8003c:	0008117d 	.word	0x0008117d
   80040:	00082cb1 	.word	0x00082cb1
   80044:	00082cb1 	.word	0x00082cb1
   80048:	00082cb1 	.word	0x00082cb1
   8004c:	00082cb1 	.word	0x00082cb1
   80050:	00082cb1 	.word	0x00082cb1
   80054:	00082cb1 	.word	0x00082cb1
   80058:	00082cb1 	.word	0x00082cb1
   8005c:	00082cb1 	.word	0x00082cb1
   80060:	00082cb1 	.word	0x00082cb1
   80064:	00082cb1 	.word	0x00082cb1
   80068:	00000000 	.word	0x00000000
   8006c:	00082b21 	.word	0x00082b21
   80070:	00082b35 	.word	0x00082b35
   80074:	00082b49 	.word	0x00082b49
   80078:	00082b5d 	.word	0x00082b5d
	...
   80084:	00082cb1 	.word	0x00082cb1
   80088:	00082cb1 	.word	0x00082cb1
   8008c:	00082cb1 	.word	0x00082cb1
   80090:	00082cb1 	.word	0x00082cb1
   80094:	00082cb1 	.word	0x00082cb1
   80098:	00082cb1 	.word	0x00082cb1
   8009c:	00082cb1 	.word	0x00082cb1
   800a0:	00082cb1 	.word	0x00082cb1
   800a4:	00000000 	.word	0x00000000
   800a8:	00082cb1 	.word	0x00082cb1
   800ac:	00082cb1 	.word	0x00082cb1
   800b0:	00082cb1 	.word	0x00082cb1
   800b4:	00082cb1 	.word	0x00082cb1
   800b8:	00082cb1 	.word	0x00082cb1
   800bc:	00082cb1 	.word	0x00082cb1
   800c0:	00082cb1 	.word	0x00082cb1
   800c4:	00082cb1 	.word	0x00082cb1
   800c8:	00082cb1 	.word	0x00082cb1
   800cc:	00082cb1 	.word	0x00082cb1
   800d0:	00082cb1 	.word	0x00082cb1
   800d4:	00082cb1 	.word	0x00082cb1
   800d8:	00082cb1 	.word	0x00082cb1
   800dc:	00082cb1 	.word	0x00082cb1
   800e0:	00082cb1 	.word	0x00082cb1
   800e4:	00082cb1 	.word	0x00082cb1
   800e8:	00082cb1 	.word	0x00082cb1
   800ec:	00082cb1 	.word	0x00082cb1
   800f0:	00082cb1 	.word	0x00082cb1

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a1b      	subs	r3, r3, r0
   800fc:	2b06      	cmp	r3, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4b04      	ldr	r3, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2b00      	cmp	r3, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4798      	blx	r3
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	00086154 	.word	0x00086154
   80110:	00086157 	.word	0x00086157
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a1b      	subs	r3, r3, r0
   80120:	109b      	asrs	r3, r3, #2
   80122:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	00086154 	.word	0x00086154
   8013c:	00086154 	.word	0x00086154
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4b04      	ldr	r3, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b113      	cbz	r3, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2301      	movs	r3, #1
   8015c:	7023      	strb	r3, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070d90 	.word	0x20070d90
   80164:	00000000 	.word	0x00000000
   80168:	00086154 	.word	0x00086154

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6803      	ldr	r3, [r0, #0]
   8017e:	b113      	cbz	r3, 80186 <frame_dummy+0x1a>
   80180:	4b07      	ldr	r3, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b103      	cbz	r3, 80186 <frame_dummy+0x1a>
   80184:	4798      	blx	r3
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	00086154 	.word	0x00086154
   80198:	20070d94 	.word	0x20070d94
   8019c:	00086154 	.word	0x00086154
   801a0:	00000000 	.word	0x00000000

000801a4 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const uint8_t uc_startup)
{
   801a4:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   801a6:	2401      	movs	r4, #1
   801a8:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   801aa:	2400      	movs	r4, #0
   801ac:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   801ae:	f240 2502 	movw	r5, #514	; 0x202
   801b2:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   801b6:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   801ba:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) |
   801be:	6845      	ldr	r5, [r0, #4]
			((uc_startup << ADC_MR_STARTUP_Pos) &
   801c0:	041b      	lsls	r3, r3, #16
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) |
   801c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   801c6:	431d      	orrs	r5, r3
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   801c8:	0052      	lsls	r2, r2, #1
   801ca:	fbb1 f1f2 	udiv	r1, r1, r2
   801ce:	1e4a      	subs	r2, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) |
   801d0:	0212      	lsls	r2, r2, #8
   801d2:	b292      	uxth	r2, r2
   801d4:	4315      	orrs	r5, r2
   801d6:	6045      	str	r5, [r0, #4]
			((uc_startup << ADC_MR_STARTUP_Pos) &
			ADC_MR_STARTUP_Msk);
	return 0;
}
   801d8:	4620      	mov	r0, r4
   801da:	bc30      	pop	{r4, r5}
   801dc:	4770      	bx	lr
   801de:	bf00      	nop

000801e0 <adc_set_resolution>:
 * \param resolution ADC resolution.
 *
 */
void adc_set_resolution(Adc *p_adc,const enum adc_resolution_t resolution)
{
	p_adc->ADC_MR |= (resolution << 4) & ADC_MR_LOWRES;
   801e0:	6843      	ldr	r3, [r0, #4]
   801e2:	0109      	lsls	r1, r1, #4
   801e4:	f001 0110 	and.w	r1, r1, #16
   801e8:	430b      	orrs	r3, r1
   801ea:	6043      	str	r3, [r0, #4]
   801ec:	4770      	bx	lr
   801ee:	bf00      	nop

000801f0 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   801f0:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   801f2:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   801f4:	4322      	orrs	r2, r4
   801f6:	0609      	lsls	r1, r1, #24
   801f8:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   801fc:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   801fe:	071b      	lsls	r3, r3, #28
   80200:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   80204:	431a      	orrs	r2, r3
   80206:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   80208:	f85d 4b04 	ldr.w	r4, [sp], #4
   8020c:	4770      	bx	lr
   8020e:	bf00      	nop

00080210 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80210:	2302      	movs	r3, #2
   80212:	6003      	str	r3, [r0, #0]
   80214:	4770      	bx	lr
   80216:	bf00      	nop

00080218 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80218:	2301      	movs	r3, #1
   8021a:	fa03 f101 	lsl.w	r1, r3, r1
   8021e:	6101      	str	r1, [r0, #16]
   80220:	4770      	bx	lr
   80222:	bf00      	nop

00080224 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   80224:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   80226:	4770      	bx	lr

00080228 <voltage_to_distance>:
float temp = 0;


/* Converts the voltage to distance from the wire to the sensor	*/
int voltage_to_distance(int current_voltage, int inductor)
{	
   80228:	b430      	push	{r4, r5}
			break;
		}
		/* Check if current voltage is closer to the current value in the table or the next one,		 *
		 * if it is closer to the current element [i] that one will be selected, otherwise keep on going *
		 * through the table																			 */
		else if(abs(current_voltage-voltage_to_distance_table[table][inductor][i])<abs(current_voltage-voltage_to_distance_table[table][inductor][i+1]))
   8022a:	4b1f      	ldr	r3, [pc, #124]	; (802a8 <voltage_to_distance+0x80>)
   8022c:	681c      	ldr	r4, [r3, #0]
   8022e:	4a1f      	ldr	r2, [pc, #124]	; (802ac <voltage_to_distance+0x84>)
   80230:	f44f 73c8 	mov.w	r3, #400	; 0x190
   80234:	fb03 f304 	mul.w	r3, r3, r4
   80238:	2564      	movs	r5, #100	; 0x64
   8023a:	fb05 3301 	mla	r3, r5, r1, r3
   8023e:	18d5      	adds	r5, r2, r3
   80240:	58d2      	ldr	r2, [r2, r3]
   80242:	1a82      	subs	r2, r0, r2
   80244:	2a00      	cmp	r2, #0
   80246:	bfb8      	it	lt
   80248:	4252      	neglt	r2, r2
   8024a:	686b      	ldr	r3, [r5, #4]
   8024c:	1ac3      	subs	r3, r0, r3
   8024e:	2b00      	cmp	r3, #0
   80250:	bfb8      	it	lt
   80252:	425b      	neglt	r3, r3
   80254:	429a      	cmp	r2, r3
   80256:	da17      	bge.n	80288 <voltage_to_distance+0x60>
   80258:	e012      	b.n	80280 <voltage_to_distance+0x58>
int voltage_to_distance(int current_voltage, int inductor)
{	
	int value = 0;
	for(int i = 0; i < 25;i++){
		if(i==24){
			value = i*5;
   8025a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
			break;
   8025e:	e021      	b.n	802a4 <voltage_to_distance+0x7c>
		}
		/* Check if current voltage is closer to the current value in the table or the next one,		 *
		 * if it is closer to the current element [i] that one will be selected, otherwise keep on going *
		 * through the table																			 */
		else if(abs(current_voltage-voltage_to_distance_table[table][inductor][i])<abs(current_voltage-voltage_to_distance_table[table][inductor][i+1]))
   80260:	461a      	mov	r2, r3
   80262:	f851 5f04 	ldr.w	r5, [r1, #4]!
   80266:	1c53      	adds	r3, r2, #1
   80268:	1b45      	subs	r5, r0, r5
   8026a:	2d00      	cmp	r5, #0
   8026c:	bfb8      	it	lt
   8026e:	426d      	neglt	r5, r5
   80270:	684c      	ldr	r4, [r1, #4]
   80272:	1b04      	subs	r4, r0, r4
   80274:	2c00      	cmp	r4, #0
   80276:	bfb8      	it	lt
   80278:	4264      	neglt	r4, r4
   8027a:	42a5      	cmp	r5, r4
   8027c:	da0f      	bge.n	8029e <voltage_to_distance+0x76>
   8027e:	e000      	b.n	80282 <voltage_to_distance+0x5a>

/* Converts the voltage to distance from the wire to the sensor	*/
int voltage_to_distance(int current_voltage, int inductor)
{	
	int value = 0;
	for(int i = 0; i < 25;i++){
   80280:	2200      	movs	r2, #0
		/* Check if current voltage is closer to the current value in the table or the next one,		 *
		 * if it is closer to the current element [i] that one will be selected, otherwise keep on going *
		 * through the table																			 */
		else if(abs(current_voltage-voltage_to_distance_table[table][inductor][i])<abs(current_voltage-voltage_to_distance_table[table][inductor][i+1]))
		{
			value = i*5; // Transform voltage to distance
   80282:	eb02 0082 	add.w	r0, r2, r2, lsl #2
			break;
   80286:	e00d      	b.n	802a4 <voltage_to_distance+0x7c>
   80288:	f44f 73c8 	mov.w	r3, #400	; 0x190
   8028c:	fb03 f404 	mul.w	r4, r3, r4
   80290:	2364      	movs	r3, #100	; 0x64
   80292:	fb03 4101 	mla	r1, r3, r1, r4
   80296:	4b05      	ldr	r3, [pc, #20]	; (802ac <voltage_to_distance+0x84>)
   80298:	4419      	add	r1, r3
			break;
		}
		/* Check if current voltage is closer to the current value in the table or the next one,		 *
		 * if it is closer to the current element [i] that one will be selected, otherwise keep on going *
		 * through the table																			 */
		else if(abs(current_voltage-voltage_to_distance_table[table][inductor][i])<abs(current_voltage-voltage_to_distance_table[table][inductor][i+1]))
   8029a:	2201      	movs	r2, #1
   8029c:	e7e1      	b.n	80262 <voltage_to_distance+0x3a>
/* Converts the voltage to distance from the wire to the sensor	*/
int voltage_to_distance(int current_voltage, int inductor)
{	
	int value = 0;
	for(int i = 0; i < 25;i++){
		if(i==24){
   8029e:	2b18      	cmp	r3, #24
   802a0:	d1de      	bne.n	80260 <voltage_to_distance+0x38>
   802a2:	e7da      	b.n	8025a <voltage_to_distance+0x32>
			value = i*5; // Transform voltage to distance
			break;
		}
	}
	return value;
}
   802a4:	bc30      	pop	{r4, r5}
   802a6:	4770      	bx	lr
   802a8:	20070db8 	.word	0x20070db8
   802ac:	2007000c 	.word	0x2007000c

000802b0 <filter>:

/* Moving average filter, inductor decides which row in the table to modify */
int filter(int invalue, int inductor)
{
   802b0:	b470      	push	{r4, r5, r6}
	/* Moving average filter */
	for(int i = buffert_size-1; i > 0;i--)
	{
		filter_table[inductor][i] = filter_table[inductor][i-1];
   802b2:	4a11      	ldr	r2, [pc, #68]	; (802f8 <filter+0x48>)
   802b4:	008d      	lsls	r5, r1, #2
   802b6:	186c      	adds	r4, r5, r1
   802b8:	00a4      	lsls	r4, r4, #2
   802ba:	1913      	adds	r3, r2, r4
   802bc:	68de      	ldr	r6, [r3, #12]
   802be:	611e      	str	r6, [r3, #16]
   802c0:	689e      	ldr	r6, [r3, #8]
   802c2:	60de      	str	r6, [r3, #12]
   802c4:	685e      	ldr	r6, [r3, #4]
   802c6:	609e      	str	r6, [r3, #8]
   802c8:	5916      	ldr	r6, [r2, r4]
   802ca:	605e      	str	r6, [r3, #4]
	}
	
	filter_table[inductor][0] = invalue;
   802cc:	5110      	str	r0, [r2, r4]
   802ce:	4429      	add	r1, r5
   802d0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   802d4:	2300      	movs	r3, #0
	
	int sum_current_median_front_left = 0;
   802d6:	461a      	mov	r2, r3
	
	/* Calculate median value */
	for(int i = 0; i < buffert_size;i++)
	{
		sum_current_median_front_left +=filter_table[inductor][i];
   802d8:	58c8      	ldr	r0, [r1, r3]
   802da:	4402      	add	r2, r0
   802dc:	3304      	adds	r3, #4
	filter_table[inductor][0] = invalue;
	
	int sum_current_median_front_left = 0;
	
	/* Calculate median value */
	for(int i = 0; i < buffert_size;i++)
   802de:	2b14      	cmp	r3, #20
   802e0:	d1fa      	bne.n	802d8 <filter+0x28>
	{
		sum_current_median_front_left +=filter_table[inductor][i];
	}
	
	filter_value = sum_current_median_front_left/buffert_size;
   802e2:	4806      	ldr	r0, [pc, #24]	; (802fc <filter+0x4c>)
   802e4:	fb80 3002 	smull	r3, r0, r0, r2
   802e8:	17d2      	asrs	r2, r2, #31
   802ea:	ebc2 0060 	rsb	r0, r2, r0, asr #1
   802ee:	4b04      	ldr	r3, [pc, #16]	; (80300 <filter+0x50>)
   802f0:	6018      	str	r0, [r3, #0]
	
	return filter_value;
}
   802f2:	bc70      	pop	{r4, r5, r6}
   802f4:	4770      	bx	lr
   802f6:	bf00      	nop
   802f8:	20079134 	.word	0x20079134
   802fc:	66666667 	.word	0x66666667
   80300:	20079130 	.word	0x20079130

00080304 <init_adc>:


#include <asf.h>

/* Initialize the A/D converter */
void init_adc(void){
   80304:	b538      	push	{r3, r4, r5, lr}

	pmc_enable_periph_clk(ID_ADC); // initialize A/D clock
   80306:	2025      	movs	r0, #37	; 0x25
   80308:	4b10      	ldr	r3, [pc, #64]	; (8034c <init_adc+0x48>)
   8030a:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), sysclk_get_main_hz()/2, 8);
   8030c:	4c10      	ldr	r4, [pc, #64]	; (80350 <init_adc+0x4c>)
   8030e:	4620      	mov	r0, r4
   80310:	4910      	ldr	r1, [pc, #64]	; (80354 <init_adc+0x50>)
   80312:	4a11      	ldr	r2, [pc, #68]	; (80358 <init_adc+0x54>)
   80314:	2308      	movs	r3, #8
   80316:	4d11      	ldr	r5, [pc, #68]	; (8035c <init_adc+0x58>)
   80318:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);
   8031a:	4620      	mov	r0, r4
   8031c:	2100      	movs	r1, #0
   8031e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   80322:	2301      	movs	r3, #1
   80324:	4d0e      	ldr	r5, [pc, #56]	; (80360 <init_adc+0x5c>)
   80326:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12); // Set the A/D resolution to 12 bit
   80328:	4620      	mov	r0, r4
   8032a:	2100      	movs	r1, #0
   8032c:	4b0d      	ldr	r3, [pc, #52]	; (80364 <init_adc+0x60>)
   8032e:	4798      	blx	r3
	
	/* Enable the A/D channels */
	adc_enable_channel(ADC, ADC_CHANNEL_3);
   80330:	4620      	mov	r0, r4
   80332:	2103      	movs	r1, #3
   80334:	4d0c      	ldr	r5, [pc, #48]	; (80368 <init_adc+0x64>)
   80336:	47a8      	blx	r5
	adc_enable_channel(ADC, ADC_CHANNEL_4);
   80338:	4620      	mov	r0, r4
   8033a:	2104      	movs	r1, #4
   8033c:	47a8      	blx	r5
	adc_enable_channel(ADC, ADC_CHANNEL_5);
   8033e:	4620      	mov	r0, r4
   80340:	2105      	movs	r1, #5
   80342:	47a8      	blx	r5
	adc_enable_channel(ADC, ADC_CHANNEL_6);
   80344:	4620      	mov	r0, r4
   80346:	2106      	movs	r1, #6
   80348:	47a8      	blx	r5
   8034a:	bd38      	pop	{r3, r4, r5, pc}
   8034c:	00082c59 	.word	0x00082c59
   80350:	400c0000 	.word	0x400c0000
   80354:	0a037a00 	.word	0x0a037a00
   80358:	0501bd00 	.word	0x0501bd00
   8035c:	000801a5 	.word	0x000801a5
   80360:	000801f1 	.word	0x000801f1
   80364:	000801e1 	.word	0x000801e1
   80368:	00080219 	.word	0x00080219

0008036c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8036c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80370:	460c      	mov	r4, r1
   80372:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80374:	b960      	cbnz	r0, 80390 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80376:	2a00      	cmp	r2, #0
   80378:	dd0e      	ble.n	80398 <_read+0x2c>
   8037a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   8037c:	4e09      	ldr	r6, [pc, #36]	; (803a4 <_read+0x38>)
   8037e:	4d0a      	ldr	r5, [pc, #40]	; (803a8 <_read+0x3c>)
   80380:	6830      	ldr	r0, [r6, #0]
   80382:	4621      	mov	r1, r4
   80384:	682b      	ldr	r3, [r5, #0]
   80386:	4798      	blx	r3
		ptr++;
   80388:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8038a:	42bc      	cmp	r4, r7
   8038c:	d1f8      	bne.n	80380 <_read+0x14>
   8038e:	e006      	b.n	8039e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80390:	f04f 30ff 	mov.w	r0, #4294967295
   80394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80398:	2000      	movs	r0, #0
   8039a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8039e:	4640      	mov	r0, r8
	}
	return nChars;
}
   803a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   803a4:	2007918c 	.word	0x2007918c
   803a8:	20079184 	.word	0x20079184

000803ac <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   803ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803b0:	460e      	mov	r6, r1
   803b2:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   803b4:	3801      	subs	r0, #1
   803b6:	2802      	cmp	r0, #2
   803b8:	d80f      	bhi.n	803da <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   803ba:	b192      	cbz	r2, 803e2 <_write+0x36>
   803bc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   803be:	f8df 803c 	ldr.w	r8, [pc, #60]	; 803fc <_write+0x50>
   803c2:	4f0d      	ldr	r7, [pc, #52]	; (803f8 <_write+0x4c>)
   803c4:	f8d8 0000 	ldr.w	r0, [r8]
   803c8:	5d31      	ldrb	r1, [r6, r4]
   803ca:	683b      	ldr	r3, [r7, #0]
   803cc:	4798      	blx	r3
   803ce:	2800      	cmp	r0, #0
   803d0:	db0a      	blt.n	803e8 <_write+0x3c>
			return -1;
		}
		++nChars;
   803d2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   803d4:	42a5      	cmp	r5, r4
   803d6:	d1f5      	bne.n	803c4 <_write+0x18>
   803d8:	e00a      	b.n	803f0 <_write+0x44>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   803da:	f04f 30ff 	mov.w	r0, #4294967295
   803de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   803e2:	2000      	movs	r0, #0
   803e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   803e8:	f04f 30ff 	mov.w	r0, #4294967295
   803ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   803f0:	4620      	mov	r0, r4
	}
	return nChars;
}
   803f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   803f6:	bf00      	nop
   803f8:	20079188 	.word	0x20079188
   803fc:	2007918c 	.word	0x2007918c

00080400 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80400:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80402:	23ac      	movs	r3, #172	; 0xac
   80404:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80406:	680a      	ldr	r2, [r1, #0]
   80408:	684b      	ldr	r3, [r1, #4]
   8040a:	fbb2 f3f3 	udiv	r3, r2, r3
   8040e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80410:	1e5c      	subs	r4, r3, #1
   80412:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80416:	4294      	cmp	r4, r2
   80418:	d80a      	bhi.n	80430 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   8041a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8041c:	688b      	ldr	r3, [r1, #8]
   8041e:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80420:	f240 2302 	movw	r3, #514	; 0x202
   80424:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80428:	2350      	movs	r3, #80	; 0x50
   8042a:	6003      	str	r3, [r0, #0]

	return 0;
   8042c:	2000      	movs	r0, #0
   8042e:	e000      	b.n	80432 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80430:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80432:	f85d 4b04 	ldr.w	r4, [sp], #4
   80436:	4770      	bx	lr

00080438 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80438:	6943      	ldr	r3, [r0, #20]
   8043a:	f013 0f02 	tst.w	r3, #2
   8043e:	d002      	beq.n	80446 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80440:	61c1      	str	r1, [r0, #28]
	return 0;
   80442:	2000      	movs	r0, #0
   80444:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80446:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80448:	4770      	bx	lr
   8044a:	bf00      	nop

0008044c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8044c:	6943      	ldr	r3, [r0, #20]
   8044e:	f013 0f01 	tst.w	r3, #1
   80452:	d003      	beq.n	8045c <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80454:	6983      	ldr	r3, [r0, #24]
   80456:	700b      	strb	r3, [r1, #0]
	return 0;
   80458:	2000      	movs	r0, #0
   8045a:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8045c:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   8045e:	4770      	bx	lr

00080460 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80460:	6943      	ldr	r3, [r0, #20]
   80462:	f013 0f02 	tst.w	r3, #2
   80466:	d004      	beq.n	80472 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80468:	f3c1 0108 	ubfx	r1, r1, #0, #9
   8046c:	61c1      	str	r1, [r0, #28]
	return 0;
   8046e:	2000      	movs	r0, #0
   80470:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80472:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80474:	4770      	bx	lr
   80476:	bf00      	nop

00080478 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80478:	6943      	ldr	r3, [r0, #20]
   8047a:	f013 0f01 	tst.w	r3, #1
   8047e:	d005      	beq.n	8048c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80480:	6983      	ldr	r3, [r0, #24]
   80482:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80486:	600b      	str	r3, [r1, #0]

	return 0;
   80488:	2000      	movs	r0, #0
   8048a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8048c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8048e:	4770      	bx	lr

00080490 <update_fan_cycle_back>:
	update_fan_cycle_back((int)u,activeFan);
	
} 
 /* Update the duty cycles for the fans. */
 void update_fan_cycle_back(int duty_cycle, int activeFan)
{
   80490:	b510      	push	{r4, lr}
   80492:	4604      	mov	r4, r0
	/* Activate the correct fan */
 	if(activeFan==rightFan)
   80494:	2901      	cmp	r1, #1
   80496:	d108      	bne.n	804aa <update_fan_cycle_back+0x1a>
 	{
 		update_duty_cycle_40(standby_cycle+duty_cycle);		// Back right
   80498:	f500 7096 	add.w	r0, r0, #300	; 0x12c
   8049c:	4b07      	ldr	r3, [pc, #28]	; (804bc <update_fan_cycle_back+0x2c>)
   8049e:	4798      	blx	r3
 		update_duty_cycle_38(standby_torque);				// Back left
   804a0:	f240 203a 	movw	r0, #570	; 0x23a
   804a4:	4b06      	ldr	r3, [pc, #24]	; (804c0 <update_fan_cycle_back+0x30>)
   804a6:	4798      	blx	r3
   804a8:	bd10      	pop	{r4, pc}
 	}
 	else
 	{
		update_duty_cycle_40(standby_cycle);
   804aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
   804ae:	4b03      	ldr	r3, [pc, #12]	; (804bc <update_fan_cycle_back+0x2c>)
   804b0:	4798      	blx	r3
		update_duty_cycle_38(standby_torque + duty_cycle);
   804b2:	f204 203a 	addw	r0, r4, #570	; 0x23a
   804b6:	4b02      	ldr	r3, [pc, #8]	; (804c0 <update_fan_cycle_back+0x30>)
   804b8:	4798      	blx	r3
   804ba:	bd10      	pop	{r4, pc}
   804bc:	00080e85 	.word	0x00080e85
   804c0:	00080e59 	.word	0x00080e59
   804c4:	00000000 	.word	0x00000000

000804c8 <controll_back_dead_beat>:
	}

}

/* Function responsible of controlling the back fans*/
void controll_back_dead_beat(int left, int right){
   804c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   804ca:	460e      	mov	r6, r1
	// Double pool
	d0 = 1/(koffs);
	d1 = -(0.75/(koffs));
	
	/* Filter the values from the sensor */
	filtered_back_left = filter(left,BACK_LEFT);
   804cc:	2102      	movs	r1, #2
   804ce:	4d2e      	ldr	r5, [pc, #184]	; (80588 <controll_back_dead_beat+0xc0>)
   804d0:	47a8      	blx	r5
   804d2:	4c2e      	ldr	r4, [pc, #184]	; (8058c <controll_back_dead_beat+0xc4>)
   804d4:	6020      	str	r0, [r4, #0]
	filtered_back_right = filter(right,BACK_RIGHT);
   804d6:	4630      	mov	r0, r6
   804d8:	2103      	movs	r1, #3
   804da:	47a8      	blx	r5
   804dc:	4e2c      	ldr	r6, [pc, #176]	; (80590 <controll_back_dead_beat+0xc8>)
   804de:	6030      	str	r0, [r6, #0]

	/* Convert from voltage to distance */
	distance_left = voltage_to_distance(filtered_back_left,BACK_LEFT);
   804e0:	6820      	ldr	r0, [r4, #0]
   804e2:	2102      	movs	r1, #2
   804e4:	4d2b      	ldr	r5, [pc, #172]	; (80594 <controll_back_dead_beat+0xcc>)
   804e6:	47a8      	blx	r5
   804e8:	4c2b      	ldr	r4, [pc, #172]	; (80598 <controll_back_dead_beat+0xd0>)
   804ea:	6020      	str	r0, [r4, #0]
	distance_right = voltage_to_distance(filtered_back_right,BACK_RIGHT);
   804ec:	6830      	ldr	r0, [r6, #0]
   804ee:	2103      	movs	r1, #3
   804f0:	47a8      	blx	r5
   804f2:	4b2a      	ldr	r3, [pc, #168]	; (8059c <controll_back_dead_beat+0xd4>)
   804f4:	6018      	str	r0, [r3, #0]
	
	/* Regulate from the differens between the sensor */
	invalue = distance_left-distance_right;
   804f6:	6823      	ldr	r3, [r4, #0]
   804f8:	1a18      	subs	r0, r3, r0
   804fa:	4b29      	ldr	r3, [pc, #164]	; (805a0 <controll_back_dead_beat+0xd8>)
   804fc:	6018      	str	r0, [r3, #0]
		
	/* Error */
	e = 0 - ((d0*invalue) + (d1*previous_value_back));
   804fe:	4f29      	ldr	r7, [pc, #164]	; (805a4 <controll_back_dead_beat+0xdc>)
   80500:	47b8      	blx	r7
   80502:	4e29      	ldr	r6, [pc, #164]	; (805a8 <controll_back_dead_beat+0xe0>)
   80504:	a31c      	add	r3, pc, #112	; (adr r3, 80578 <controll_back_dead_beat+0xb0>)
   80506:	e9d3 2300 	ldrd	r2, r3, [r3]
   8050a:	47b0      	blx	r6
   8050c:	4604      	mov	r4, r0
   8050e:	460d      	mov	r5, r1
   80510:	4b26      	ldr	r3, [pc, #152]	; (805ac <controll_back_dead_beat+0xe4>)
   80512:	6818      	ldr	r0, [r3, #0]
   80514:	47b8      	blx	r7
   80516:	a31a      	add	r3, pc, #104	; (adr r3, 80580 <controll_back_dead_beat+0xb8>)
   80518:	e9d3 2300 	ldrd	r2, r3, [r3]
   8051c:	47b0      	blx	r6
   8051e:	4602      	mov	r2, r0
   80520:	460b      	mov	r3, r1
   80522:	4620      	mov	r0, r4
   80524:	4629      	mov	r1, r5
   80526:	4c22      	ldr	r4, [pc, #136]	; (805b0 <controll_back_dead_beat+0xe8>)
   80528:	47a0      	blx	r4
   8052a:	4602      	mov	r2, r0
   8052c:	460b      	mov	r3, r1
   8052e:	2000      	movs	r0, #0
   80530:	2100      	movs	r1, #0
   80532:	4c20      	ldr	r4, [pc, #128]	; (805b4 <controll_back_dead_beat+0xec>)
   80534:	47a0      	blx	r4
   80536:	4b20      	ldr	r3, [pc, #128]	; (805b8 <controll_back_dead_beat+0xf0>)
   80538:	4798      	blx	r3
   8053a:	4b20      	ldr	r3, [pc, #128]	; (805bc <controll_back_dead_beat+0xf4>)
   8053c:	6018      	str	r0, [r3, #0]
	if(e < 0)
   8053e:	2800      	cmp	r0, #0
	{
		e=e*-1;
   80540:	bfbd      	ittte	lt
   80542:	4240      	neglt	r0, r0
   80544:	6018      	strlt	r0, [r3, #0]
		activeFan = leftFan;
   80546:	2200      	movlt	r2, #0
	}
	else
	{
		activeFan = rightFan;
   80548:	2201      	movge	r2, #1
   8054a:	4b1d      	ldr	r3, [pc, #116]	; (805c0 <controll_back_dead_beat+0xf8>)
   8054c:	601a      	str	r2, [r3, #0]
	}
		
	/* Moves the value one step */
	previous_value_back = invalue;
   8054e:	4b14      	ldr	r3, [pc, #80]	; (805a0 <controll_back_dead_beat+0xd8>)
   80550:	681a      	ldr	r2, [r3, #0]
   80552:	4b16      	ldr	r3, [pc, #88]	; (805ac <controll_back_dead_beat+0xe4>)
   80554:	601a      	str	r2, [r3, #0]
	
	u = e;
   80556:	4b19      	ldr	r3, [pc, #100]	; (805bc <controll_back_dead_beat+0xf4>)
   80558:	681c      	ldr	r4, [r3, #0]
   8055a:	4620      	mov	r0, r4
   8055c:	4b11      	ldr	r3, [pc, #68]	; (805a4 <controll_back_dead_beat+0xdc>)
   8055e:	4798      	blx	r3
   80560:	4b18      	ldr	r3, [pc, #96]	; (805c4 <controll_back_dead_beat+0xfc>)
   80562:	e9c3 0100 	strd	r0, r1, [r3]
	update_fan_cycle_back((int)u,activeFan);
   80566:	4620      	mov	r0, r4
   80568:	4b15      	ldr	r3, [pc, #84]	; (805c0 <controll_back_dead_beat+0xf8>)
   8056a:	6819      	ldr	r1, [r3, #0]
   8056c:	4b16      	ldr	r3, [pc, #88]	; (805c8 <controll_back_dead_beat+0x100>)
   8056e:	4798      	blx	r3
   80570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80572:	bf00      	nop
   80574:	f3af 8000 	nop.w
   80578:	75d75d76 	.word	0x75d75d76
   8057c:	4033d75d 	.word	0x4033d75d
   80580:	30c30c31 	.word	0x30c30c31
   80584:	c02dc30c 	.word	0xc02dc30c
   80588:	000802b1 	.word	0x000802b1
   8058c:	20079194 	.word	0x20079194
   80590:	200791a4 	.word	0x200791a4
   80594:	00080229 	.word	0x00080229
   80598:	2007919c 	.word	0x2007919c
   8059c:	20079198 	.word	0x20079198
   805a0:	20079190 	.word	0x20079190
   805a4:	000831fd 	.word	0x000831fd
   805a8:	000832c9 	.word	0x000832c9
   805ac:	20070dc0 	.word	0x20070dc0
   805b0:	00082f65 	.word	0x00082f65
   805b4:	00082f61 	.word	0x00082f61
   805b8:	000836ed 	.word	0x000836ed
   805bc:	200791a8 	.word	0x200791a8
   805c0:	200791a0 	.word	0x200791a0
   805c4:	200791b0 	.word	0x200791b0
   805c8:	00080491 	.word	0x00080491
   805cc:	f3af 8000 	nop.w

000805d0 <start_controller_back>:
int previous_value_back = 0;
int previous_control_signal = 0;

/* Start the communication task */
void start_controller_back(void *p)
{
   805d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   805d4:	b082      	sub	sp, #8
	
	portTickType xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount(); //Retrieve the startup tick timer
   805d6:	4b18      	ldr	r3, [pc, #96]	; (80638 <start_controller_back+0x68>)
   805d8:	4798      	blx	r3
   805da:	f8ad 0006 	strh.w	r0, [sp, #6]
	

	/* Simple infinite loop, printing text with a given delay */
	while(1)
	{
		adc_start(ADC);
   805de:	4c17      	ldr	r4, [pc, #92]	; (8063c <start_controller_back+0x6c>)
		
		// Wait for the end of conversion, check if data is ready
		while ((adc_get_status(ADC) & ADC_ISR_DRDY) != ADC_ISR_DRDY);
   805e0:	4d17      	ldr	r5, [pc, #92]	; (80640 <start_controller_back+0x70>)
	

	/* Simple infinite loop, printing text with a given delay */
	while(1)
	{
		adc_start(ADC);
   805e2:	4620      	mov	r0, r4
   805e4:	4b17      	ldr	r3, [pc, #92]	; (80644 <start_controller_back+0x74>)
   805e6:	4798      	blx	r3
		
		// Wait for the end of conversion, check if data is ready
		while ((adc_get_status(ADC) & ADC_ISR_DRDY) != ADC_ISR_DRDY);
   805e8:	4620      	mov	r0, r4
   805ea:	47a8      	blx	r5
   805ec:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   805f0:	d0fa      	beq.n	805e8 <start_controller_back+0x18>

		int back_left_inductor;
		back_left_inductor = ADC->ADC_CDR[6]; // Retrieve latest vaule from back left inductor
   805f2:	6ea7      	ldr	r7, [r4, #104]	; 0x68
		int back_right_inductor;
		back_right_inductor = ADC->ADC_CDR[5]; // Retrieve latest value from back right inductor
   805f4:	6e66      	ldr	r6, [r4, #100]	; 0x64
		
		xSemaphoreTake(semaphore_adc_values,portMAX_DELAY); // Take semaphore
   805f6:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80658 <start_controller_back+0x88>
   805fa:	f8d8 0000 	ldr.w	r0, [r8]
   805fe:	2100      	movs	r1, #0
   80600:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80604:	460b      	mov	r3, r1
   80606:	f8df c054 	ldr.w	ip, [pc, #84]	; 8065c <start_controller_back+0x8c>
   8060a:	47e0      	blx	ip
		adc_value_back_left = back_left_inductor;
   8060c:	4b0e      	ldr	r3, [pc, #56]	; (80648 <start_controller_back+0x78>)
   8060e:	601f      	str	r7, [r3, #0]
		adc_value_back_right = back_right_inductor;
   80610:	4b0e      	ldr	r3, [pc, #56]	; (8064c <start_controller_back+0x7c>)
   80612:	601e      	str	r6, [r3, #0]
		xSemaphoreGive(semaphore_adc_values); // Take semaphore
   80614:	f8d8 0000 	ldr.w	r0, [r8]
   80618:	2100      	movs	r1, #0
   8061a:	460a      	mov	r2, r1
   8061c:	460b      	mov	r3, r1
   8061e:	f8df c040 	ldr.w	ip, [pc, #64]	; 80660 <start_controller_back+0x90>
   80622:	47e0      	blx	ip
		
		controll_back_dead_beat(back_left_inductor,back_right_inductor);
   80624:	4638      	mov	r0, r7
   80626:	4631      	mov	r1, r6
   80628:	4b09      	ldr	r3, [pc, #36]	; (80650 <start_controller_back+0x80>)
   8062a:	4798      	blx	r3
		
		vTaskDelayUntil(&xLastWakeTime,CONTROLLER_SCHEDULE_TIME);
   8062c:	f10d 0006 	add.w	r0, sp, #6
   80630:	2132      	movs	r1, #50	; 0x32
   80632:	4b08      	ldr	r3, [pc, #32]	; (80654 <start_controller_back+0x84>)
   80634:	4798      	blx	r3
	}
   80636:	e7d4      	b.n	805e2 <start_controller_back+0x12>
   80638:	00081b79 	.word	0x00081b79
   8063c:	400c0000 	.word	0x400c0000
   80640:	00080225 	.word	0x00080225
   80644:	00080211 	.word	0x00080211
   80648:	20070db4 	.word	0x20070db4
   8064c:	20070db0 	.word	0x20070db0
   80650:	000804c9 	.word	0x000804c9
   80654:	00081dd1 	.word	0x00081dd1
   80658:	20070dd0 	.word	0x20070dd0
   8065c:	000816e9 	.word	0x000816e9
   80660:	00081535 	.word	0x00081535

00080664 <update_fan_cycle_front>:

	update_fan_cycle_front((int)u,activeFan);
	
}
/* Update the duty cycles for the fans. */
void update_fan_cycle_front(int duty_cycle, int active_Fan){
   80664:	b510      	push	{r4, lr}
   80666:	4604      	mov	r4, r0
	
	if(active_Fan==rightFan)
   80668:	2901      	cmp	r1, #1
   8066a:	d108      	bne.n	8067e <update_fan_cycle_front+0x1a>
	{
		update_duty_cycle_36(standby_torque + duty_cycle); // FRONT RIGHT
   8066c:	f200 203a 	addw	r0, r0, #570	; 0x23a
   80670:	4b07      	ldr	r3, [pc, #28]	; (80690 <update_fan_cycle_front+0x2c>)
   80672:	4798      	blx	r3
		update_duty_cycle_DAC1(standby_cycle); // FRONT LEFT
   80674:	f44f 7096 	mov.w	r0, #300	; 0x12c
   80678:	4b06      	ldr	r3, [pc, #24]	; (80694 <update_fan_cycle_front+0x30>)
   8067a:	4798      	blx	r3
   8067c:	bd10      	pop	{r4, pc}
	}
	else
	{
		update_duty_cycle_36(standby_torque);
   8067e:	f240 203a 	movw	r0, #570	; 0x23a
   80682:	4b03      	ldr	r3, [pc, #12]	; (80690 <update_fan_cycle_front+0x2c>)
   80684:	4798      	blx	r3
		update_duty_cycle_DAC1(standby_cycle + duty_cycle);
   80686:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   8068a:	4b02      	ldr	r3, [pc, #8]	; (80694 <update_fan_cycle_front+0x30>)
   8068c:	4798      	blx	r3
   8068e:	bd10      	pop	{r4, pc}
   80690:	00080e2d 	.word	0x00080e2d
   80694:	00080e01 	.word	0x00080e01

00080698 <controll_front_dead_beat>:
	
	update_fan_cycle_front(999,activeFan);
}

/* Function responsible of controlling the back fans*/
void controll_front_dead_beat(int left, int right){
   80698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8069c:	460e      	mov	r6, r1
		
	// Double pool
	d0 = 1/(koffs);
	d1 = -(0.75/(koffs));
	/* Filter the values from the sensor */
	filtered_front_left = filter(left,FRONT_LEFT);
   8069e:	2100      	movs	r1, #0
   806a0:	4d2f      	ldr	r5, [pc, #188]	; (80760 <controll_front_dead_beat+0xc8>)
   806a2:	47a8      	blx	r5
   806a4:	4c2f      	ldr	r4, [pc, #188]	; (80764 <controll_front_dead_beat+0xcc>)
   806a6:	6020      	str	r0, [r4, #0]
	filtered_front_right = filter(right,FRONT_RIGHT);
   806a8:	4630      	mov	r0, r6
   806aa:	2101      	movs	r1, #1
   806ac:	47a8      	blx	r5
   806ae:	4e2e      	ldr	r6, [pc, #184]	; (80768 <controll_front_dead_beat+0xd0>)
   806b0:	6030      	str	r0, [r6, #0]
	
	/* Convert from voltage to distance */
	left_in_distance = voltage_to_distance(filtered_front_left,FRONT_LEFT);
   806b2:	6820      	ldr	r0, [r4, #0]
   806b4:	2100      	movs	r1, #0
   806b6:	4d2d      	ldr	r5, [pc, #180]	; (8076c <controll_front_dead_beat+0xd4>)
   806b8:	47a8      	blx	r5
   806ba:	4c2d      	ldr	r4, [pc, #180]	; (80770 <controll_front_dead_beat+0xd8>)
   806bc:	6020      	str	r0, [r4, #0]
	distance_left_temp = left_in_distance;
   806be:	4b2d      	ldr	r3, [pc, #180]	; (80774 <controll_front_dead_beat+0xdc>)
   806c0:	6018      	str	r0, [r3, #0]
	right_in_distance = voltage_to_distance(filtered_front_right,FRONT_RIGHT);
   806c2:	6830      	ldr	r0, [r6, #0]
   806c4:	2101      	movs	r1, #1
   806c6:	47a8      	blx	r5
   806c8:	4b2b      	ldr	r3, [pc, #172]	; (80778 <controll_front_dead_beat+0xe0>)
   806ca:	6018      	str	r0, [r3, #0]
	distance_right_temp = right_in_distance;
   806cc:	4b2b      	ldr	r3, [pc, #172]	; (8077c <controll_front_dead_beat+0xe4>)
   806ce:	6018      	str	r0, [r3, #0]

	/* Calculate the difference from the sensor */
	invalue = left_in_distance-right_in_distance;
   806d0:	6826      	ldr	r6, [r4, #0]
   806d2:	1a36      	subs	r6, r6, r0
   806d4:	4b2a      	ldr	r3, [pc, #168]	; (80780 <controll_front_dead_beat+0xe8>)
   806d6:	601e      	str	r6, [r3, #0]

	/* Error */
	e = 0 - ((d0*invalue) + (d1*previous_value_front));
   806d8:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8079c <controll_front_dead_beat+0x104>
   806dc:	4630      	mov	r0, r6
   806de:	47c8      	blx	r9
   806e0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 807a8 <controll_front_dead_beat+0x110>
   806e4:	a31a      	add	r3, pc, #104	; (adr r3, 80750 <controll_front_dead_beat+0xb8>)
   806e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   806ea:	47c0      	blx	r8
   806ec:	4604      	mov	r4, r0
   806ee:	460d      	mov	r5, r1
   806f0:	4f24      	ldr	r7, [pc, #144]	; (80784 <controll_front_dead_beat+0xec>)
   806f2:	6838      	ldr	r0, [r7, #0]
   806f4:	47c8      	blx	r9
   806f6:	a318      	add	r3, pc, #96	; (adr r3, 80758 <controll_front_dead_beat+0xc0>)
   806f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   806fc:	47c0      	blx	r8
   806fe:	4602      	mov	r2, r0
   80700:	460b      	mov	r3, r1
   80702:	4620      	mov	r0, r4
   80704:	4629      	mov	r1, r5
   80706:	4c20      	ldr	r4, [pc, #128]	; (80788 <controll_front_dead_beat+0xf0>)
   80708:	47a0      	blx	r4
   8070a:	4602      	mov	r2, r0
   8070c:	460b      	mov	r3, r1
   8070e:	2000      	movs	r0, #0
   80710:	2100      	movs	r1, #0
   80712:	4c1e      	ldr	r4, [pc, #120]	; (8078c <controll_front_dead_beat+0xf4>)
   80714:	47a0      	blx	r4
   80716:	4b1e      	ldr	r3, [pc, #120]	; (80790 <controll_front_dead_beat+0xf8>)
   80718:	4798      	blx	r3
   8071a:	4b1e      	ldr	r3, [pc, #120]	; (80794 <controll_front_dead_beat+0xfc>)
   8071c:	6018      	str	r0, [r3, #0]
		
	/* Moves current value one step */
	previous_value_front = invalue;
   8071e:	603e      	str	r6, [r7, #0]
	
	if(e < 0){
   80720:	2800      	cmp	r0, #0
		e=e*-1;
   80722:	bfbd      	ittte	lt
   80724:	4240      	neglt	r0, r0
   80726:	6018      	strlt	r0, [r3, #0]
		activeFan = leftFan;
   80728:	2200      	movlt	r2, #0
	}
	else{
		activeFan = rightFan;
   8072a:	2201      	movge	r2, #1
   8072c:	4b1a      	ldr	r3, [pc, #104]	; (80798 <controll_front_dead_beat+0x100>)
   8072e:	701a      	strb	r2, [r3, #0]
	}
		
	
	/* Regulator-part */
	u = e;
   80730:	4b18      	ldr	r3, [pc, #96]	; (80794 <controll_front_dead_beat+0xfc>)
   80732:	681c      	ldr	r4, [r3, #0]
   80734:	4620      	mov	r0, r4
   80736:	4b19      	ldr	r3, [pc, #100]	; (8079c <controll_front_dead_beat+0x104>)
   80738:	4798      	blx	r3
   8073a:	4b19      	ldr	r3, [pc, #100]	; (807a0 <controll_front_dead_beat+0x108>)
   8073c:	e9c3 0100 	strd	r0, r1, [r3]

	update_fan_cycle_front((int)u,activeFan);
   80740:	4620      	mov	r0, r4
   80742:	4b15      	ldr	r3, [pc, #84]	; (80798 <controll_front_dead_beat+0x100>)
   80744:	f993 1000 	ldrsb.w	r1, [r3]
   80748:	4b16      	ldr	r3, [pc, #88]	; (807a4 <controll_front_dead_beat+0x10c>)
   8074a:	4798      	blx	r3
   8074c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80750:	75d75d76 	.word	0x75d75d76
   80754:	4033d75d 	.word	0x4033d75d
   80758:	30c30c31 	.word	0x30c30c31
   8075c:	c02dc30c 	.word	0xc02dc30c
   80760:	000802b1 	.word	0x000802b1
   80764:	200791b8 	.word	0x200791b8
   80768:	200791c4 	.word	0x200791c4
   8076c:	00080229 	.word	0x00080229
   80770:	200791bc 	.word	0x200791bc
   80774:	20070dc4 	.word	0x20070dc4
   80778:	200791c0 	.word	0x200791c0
   8077c:	20070dc8 	.word	0x20070dc8
   80780:	20079190 	.word	0x20079190
   80784:	20070dcc 	.word	0x20070dcc
   80788:	00082f65 	.word	0x00082f65
   8078c:	00082f61 	.word	0x00082f61
   80790:	000836ed 	.word	0x000836ed
   80794:	200791a8 	.word	0x200791a8
   80798:	200791a0 	.word	0x200791a0
   8079c:	000831fd 	.word	0x000831fd
   807a0:	200791b0 	.word	0x200791b0
   807a4:	00080665 	.word	0x00080665
   807a8:	000832c9 	.word	0x000832c9
   807ac:	f3af 8000 	nop.w

000807b0 <start_controller_front>:
int distance_left_temp = 0;
int distance_right_temp = 0;

/* Start the communication task */
void start_controller_front(void *p)
{
   807b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   807b4:	b082      	sub	sp, #8
	
 	portTickType xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount(); //Retrieve the startup tick timer
   807b6:	4b18      	ldr	r3, [pc, #96]	; (80818 <start_controller_front+0x68>)
   807b8:	4798      	blx	r3
   807ba:	f8ad 0006 	strh.w	r0, [sp, #6]
	
	/* Simple infinite loop, printing text with a given delay */
 	while(1)
	 {
		//ioport_set_pin_level(PIO_PD1_IDX,HIGH);
		adc_start(ADC);
   807be:	4c17      	ldr	r4, [pc, #92]	; (8081c <start_controller_front+0x6c>)

		// Wait for the end of conversion, check if data is ready
		while ((adc_get_status(ADC) & ADC_ISR_DRDY) != ADC_ISR_DRDY);
   807c0:	4d17      	ldr	r5, [pc, #92]	; (80820 <start_controller_front+0x70>)
	
	/* Simple infinite loop, printing text with a given delay */
 	while(1)
	 {
		//ioport_set_pin_level(PIO_PD1_IDX,HIGH);
		adc_start(ADC);
   807c2:	4620      	mov	r0, r4
   807c4:	4b17      	ldr	r3, [pc, #92]	; (80824 <start_controller_front+0x74>)
   807c6:	4798      	blx	r3

		// Wait for the end of conversion, check if data is ready
		while ((adc_get_status(ADC) & ADC_ISR_DRDY) != ADC_ISR_DRDY);
   807c8:	4620      	mov	r0, r4
   807ca:	47a8      	blx	r5
   807cc:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   807d0:	d0fa      	beq.n	807c8 <start_controller_front+0x18>
		
		int front_left_inductor;
		front_left_inductor = ADC->ADC_CDR[3];
   807d2:	6de7      	ldr	r7, [r4, #92]	; 0x5c
		int front_right_inductor;
		front_right_inductor = ADC->ADC_CDR[4];
   807d4:	6e26      	ldr	r6, [r4, #96]	; 0x60
			
		xSemaphoreTake(semaphore_adc_values,portMAX_DELAY); // Take semaphore
   807d6:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80838 <start_controller_front+0x88>
   807da:	f8d8 0000 	ldr.w	r0, [r8]
   807de:	2100      	movs	r1, #0
   807e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   807e4:	460b      	mov	r3, r1
   807e6:	f8df c054 	ldr.w	ip, [pc, #84]	; 8083c <start_controller_front+0x8c>
   807ea:	47e0      	blx	ip
		adc_value_front_left = front_left_inductor;
   807ec:	4b0e      	ldr	r3, [pc, #56]	; (80828 <start_controller_front+0x78>)
   807ee:	601f      	str	r7, [r3, #0]
		adc_value_front_right = front_right_inductor;
   807f0:	4b0e      	ldr	r3, [pc, #56]	; (8082c <start_controller_front+0x7c>)
   807f2:	601e      	str	r6, [r3, #0]
		xSemaphoreGive(semaphore_adc_values); // Take semaphore
   807f4:	f8d8 0000 	ldr.w	r0, [r8]
   807f8:	2100      	movs	r1, #0
   807fa:	460a      	mov	r2, r1
   807fc:	460b      	mov	r3, r1
   807fe:	f8df c040 	ldr.w	ip, [pc, #64]	; 80840 <start_controller_front+0x90>
   80802:	47e0      	blx	ip
		
		controll_front_dead_beat(front_left_inductor,front_right_inductor);
   80804:	4638      	mov	r0, r7
   80806:	4631      	mov	r1, r6
   80808:	4b09      	ldr	r3, [pc, #36]	; (80830 <start_controller_front+0x80>)
   8080a:	4798      	blx	r3
		
 		vTaskDelayUntil(&xLastWakeTime,CONTROLLER_SCHEDULE_TIME);
   8080c:	f10d 0006 	add.w	r0, sp, #6
   80810:	2132      	movs	r1, #50	; 0x32
   80812:	4b08      	ldr	r3, [pc, #32]	; (80834 <start_controller_front+0x84>)
   80814:	4798      	blx	r3
 	}
   80816:	e7d4      	b.n	807c2 <start_controller_front+0x12>
   80818:	00081b79 	.word	0x00081b79
   8081c:	400c0000 	.word	0x400c0000
   80820:	00080225 	.word	0x00080225
   80824:	00080211 	.word	0x00080211
   80828:	20070dbc 	.word	0x20070dbc
   8082c:	20070dac 	.word	0x20070dac
   80830:	00080699 	.word	0x00080699
   80834:	00081dd1 	.word	0x00081dd1
   80838:	20070dd0 	.word	0x20070dd0
   8083c:	000816e9 	.word	0x000816e9
   80840:	00081535 	.word	0x00081535

00080844 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80844:	b5f0      	push	{r4, r5, r6, r7, lr}
   80846:	b083      	sub	sp, #12
   80848:	4604      	mov	r4, r0
   8084a:	460d      	mov	r5, r1
	uint32_t val;

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8084c:	4b1f      	ldr	r3, [pc, #124]	; (808cc <usart_serial_getchar+0x88>)
   8084e:	4298      	cmp	r0, r3
   80850:	d107      	bne.n	80862 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
   80852:	461f      	mov	r7, r3
   80854:	4e1e      	ldr	r6, [pc, #120]	; (808d0 <usart_serial_getchar+0x8c>)
   80856:	4638      	mov	r0, r7
   80858:	4629      	mov	r1, r5
   8085a:	47b0      	blx	r6
   8085c:	2800      	cmp	r0, #0
   8085e:	d1fa      	bne.n	80856 <usart_serial_getchar+0x12>
   80860:	e019      	b.n	80896 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80862:	4b1c      	ldr	r3, [pc, #112]	; (808d4 <usart_serial_getchar+0x90>)
   80864:	4298      	cmp	r0, r3
   80866:	d109      	bne.n	8087c <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
   80868:	461f      	mov	r7, r3
   8086a:	4e1b      	ldr	r6, [pc, #108]	; (808d8 <usart_serial_getchar+0x94>)
   8086c:	4638      	mov	r0, r7
   8086e:	a901      	add	r1, sp, #4
   80870:	47b0      	blx	r6
   80872:	2800      	cmp	r0, #0
   80874:	d1fa      	bne.n	8086c <usart_serial_getchar+0x28>
		*data = (uint8_t)(val & 0xFF);
   80876:	9b01      	ldr	r3, [sp, #4]
   80878:	702b      	strb	r3, [r5, #0]
   8087a:	e019      	b.n	808b0 <usart_serial_getchar+0x6c>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8087c:	4b17      	ldr	r3, [pc, #92]	; (808dc <usart_serial_getchar+0x98>)
   8087e:	4298      	cmp	r0, r3
   80880:	d109      	bne.n	80896 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
   80882:	461e      	mov	r6, r3
   80884:	4c14      	ldr	r4, [pc, #80]	; (808d8 <usart_serial_getchar+0x94>)
   80886:	4630      	mov	r0, r6
   80888:	a901      	add	r1, sp, #4
   8088a:	47a0      	blx	r4
   8088c:	2800      	cmp	r0, #0
   8088e:	d1fa      	bne.n	80886 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   80890:	9b01      	ldr	r3, [sp, #4]
   80892:	702b      	strb	r3, [r5, #0]
   80894:	e018      	b.n	808c8 <usart_serial_getchar+0x84>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80896:	4b12      	ldr	r3, [pc, #72]	; (808e0 <usart_serial_getchar+0x9c>)
   80898:	429c      	cmp	r4, r3
   8089a:	d109      	bne.n	808b0 <usart_serial_getchar+0x6c>
		while (usart_read(p_usart, &val));
   8089c:	461e      	mov	r6, r3
   8089e:	4c0e      	ldr	r4, [pc, #56]	; (808d8 <usart_serial_getchar+0x94>)
   808a0:	4630      	mov	r0, r6
   808a2:	a901      	add	r1, sp, #4
   808a4:	47a0      	blx	r4
   808a6:	2800      	cmp	r0, #0
   808a8:	d1fa      	bne.n	808a0 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
   808aa:	9b01      	ldr	r3, [sp, #4]
   808ac:	702b      	strb	r3, [r5, #0]
   808ae:	e00b      	b.n	808c8 <usart_serial_getchar+0x84>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   808b0:	4b0c      	ldr	r3, [pc, #48]	; (808e4 <usart_serial_getchar+0xa0>)
   808b2:	429c      	cmp	r4, r3
   808b4:	d108      	bne.n	808c8 <usart_serial_getchar+0x84>
		while (usart_read(p_usart, &val));
   808b6:	461e      	mov	r6, r3
   808b8:	4c07      	ldr	r4, [pc, #28]	; (808d8 <usart_serial_getchar+0x94>)
   808ba:	4630      	mov	r0, r6
   808bc:	a901      	add	r1, sp, #4
   808be:	47a0      	blx	r4
   808c0:	2800      	cmp	r0, #0
   808c2:	d1fa      	bne.n	808ba <usart_serial_getchar+0x76>
		*data = (uint8_t)(val & 0xFF);
   808c4:	9b01      	ldr	r3, [sp, #4]
   808c6:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   808c8:	b003      	add	sp, #12
   808ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   808cc:	400e0800 	.word	0x400e0800
   808d0:	0008044d 	.word	0x0008044d
   808d4:	40098000 	.word	0x40098000
   808d8:	00080479 	.word	0x00080479
   808dc:	4009c000 	.word	0x4009c000
   808e0:	400a0000 	.word	0x400a0000
   808e4:	400a4000 	.word	0x400a4000

000808e8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   808e8:	b570      	push	{r4, r5, r6, lr}
   808ea:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   808ec:	4b21      	ldr	r3, [pc, #132]	; (80974 <usart_serial_putchar+0x8c>)
   808ee:	4298      	cmp	r0, r3
   808f0:	d107      	bne.n	80902 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   808f2:	461e      	mov	r6, r3
   808f4:	4d20      	ldr	r5, [pc, #128]	; (80978 <usart_serial_putchar+0x90>)
   808f6:	4630      	mov	r0, r6
   808f8:	4621      	mov	r1, r4
   808fa:	47a8      	blx	r5
   808fc:	2800      	cmp	r0, #0
   808fe:	d1fa      	bne.n	808f6 <usart_serial_putchar+0xe>
   80900:	e02b      	b.n	8095a <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80902:	4b1e      	ldr	r3, [pc, #120]	; (8097c <usart_serial_putchar+0x94>)
   80904:	4298      	cmp	r0, r3
   80906:	d107      	bne.n	80918 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80908:	461e      	mov	r6, r3
   8090a:	4d1d      	ldr	r5, [pc, #116]	; (80980 <usart_serial_putchar+0x98>)
   8090c:	4630      	mov	r0, r6
   8090e:	4621      	mov	r1, r4
   80910:	47a8      	blx	r5
   80912:	2800      	cmp	r0, #0
   80914:	d1fa      	bne.n	8090c <usart_serial_putchar+0x24>
   80916:	e022      	b.n	8095e <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80918:	4b1a      	ldr	r3, [pc, #104]	; (80984 <usart_serial_putchar+0x9c>)
   8091a:	4298      	cmp	r0, r3
   8091c:	d107      	bne.n	8092e <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   8091e:	461e      	mov	r6, r3
   80920:	4d17      	ldr	r5, [pc, #92]	; (80980 <usart_serial_putchar+0x98>)
   80922:	4630      	mov	r0, r6
   80924:	4621      	mov	r1, r4
   80926:	47a8      	blx	r5
   80928:	2800      	cmp	r0, #0
   8092a:	d1fa      	bne.n	80922 <usart_serial_putchar+0x3a>
   8092c:	e019      	b.n	80962 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8092e:	4b16      	ldr	r3, [pc, #88]	; (80988 <usart_serial_putchar+0xa0>)
   80930:	4298      	cmp	r0, r3
   80932:	d107      	bne.n	80944 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80934:	461e      	mov	r6, r3
   80936:	4d12      	ldr	r5, [pc, #72]	; (80980 <usart_serial_putchar+0x98>)
   80938:	4630      	mov	r0, r6
   8093a:	4621      	mov	r1, r4
   8093c:	47a8      	blx	r5
   8093e:	2800      	cmp	r0, #0
   80940:	d1fa      	bne.n	80938 <usart_serial_putchar+0x50>
   80942:	e010      	b.n	80966 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80944:	4b11      	ldr	r3, [pc, #68]	; (8098c <usart_serial_putchar+0xa4>)
   80946:	4298      	cmp	r0, r3
   80948:	d10f      	bne.n	8096a <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   8094a:	461e      	mov	r6, r3
   8094c:	4d0c      	ldr	r5, [pc, #48]	; (80980 <usart_serial_putchar+0x98>)
   8094e:	4630      	mov	r0, r6
   80950:	4621      	mov	r1, r4
   80952:	47a8      	blx	r5
   80954:	2800      	cmp	r0, #0
   80956:	d1fa      	bne.n	8094e <usart_serial_putchar+0x66>
   80958:	e009      	b.n	8096e <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   8095a:	2001      	movs	r0, #1
   8095c:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8095e:	2001      	movs	r0, #1
   80960:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80962:	2001      	movs	r0, #1
   80964:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80966:	2001      	movs	r0, #1
   80968:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8096a:	2000      	movs	r0, #0
   8096c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8096e:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80970:	bd70      	pop	{r4, r5, r6, pc}
   80972:	bf00      	nop
   80974:	400e0800 	.word	0x400e0800
   80978:	00080439 	.word	0x00080439
   8097c:	40098000 	.word	0x40098000
   80980:	00080461 	.word	0x00080461
   80984:	4009c000 	.word	0x4009c000
   80988:	400a0000 	.word	0x400a0000
   8098c:	400a4000 	.word	0x400a4000

00080990 <set_state>:

	init_tasks();
}

/* Set different states so we can get the step response for different translations and rotations*/
void set_state(int state){
   80990:	b508      	push	{r3, lr}
	
	/* Initialize the pwm signals with the given dutycycle (0-999) */
	switch(state){
   80992:	2804      	cmp	r0, #4
   80994:	d82e      	bhi.n	809f4 <set_state+0x64>
   80996:	e8df f000 	tbb	[pc, r0]
   8099a:	0c03      	.short	0x0c03
   8099c:	152d      	.short	0x152d
   8099e:	1a          	.byte	0x1a
   8099f:	00          	.byte	0x00
		case ROTATE_LEFT:
			update_duty_cycle_36(999);
   809a0:	f240 30e7 	movw	r0, #999	; 0x3e7
   809a4:	4b14      	ldr	r3, [pc, #80]	; (809f8 <set_state+0x68>)
   809a6:	4798      	blx	r3
			update_duty_cycle_38(999);
   809a8:	f240 30e7 	movw	r0, #999	; 0x3e7
   809ac:	4b13      	ldr	r3, [pc, #76]	; (809fc <set_state+0x6c>)
   809ae:	4798      	blx	r3
			break;
   809b0:	bd08      	pop	{r3, pc}
		case ROTATE_RIGHT:
			update_duty_cycle_40(999);
   809b2:	f240 30e7 	movw	r0, #999	; 0x3e7
   809b6:	4b12      	ldr	r3, [pc, #72]	; (80a00 <set_state+0x70>)
   809b8:	4798      	blx	r3
			update_duty_cycle_DAC1(999);
   809ba:	f240 30e7 	movw	r0, #999	; 0x3e7
   809be:	4b11      	ldr	r3, [pc, #68]	; (80a04 <set_state+0x74>)
   809c0:	4798      	blx	r3
			break;
   809c2:	bd08      	pop	{r3, pc}
		case GO_FORWARD:
			update_duty_cycle_8(999);
   809c4:	f240 30e7 	movw	r0, #999	; 0x3e7
   809c8:	4b0f      	ldr	r3, [pc, #60]	; (80a08 <set_state+0x78>)
   809ca:	4798      	blx	r3
			break;
   809cc:	bd08      	pop	{r3, pc}
		case STAND_STILL:
		update_duty_cycle_36(standby_torque);
   809ce:	f240 203a 	movw	r0, #570	; 0x23a
   809d2:	4b09      	ldr	r3, [pc, #36]	; (809f8 <set_state+0x68>)
   809d4:	4798      	blx	r3
		update_duty_cycle_38(standby_torque);
   809d6:	f240 203a 	movw	r0, #570	; 0x23a
   809da:	4b08      	ldr	r3, [pc, #32]	; (809fc <set_state+0x6c>)
   809dc:	4798      	blx	r3
		update_duty_cycle_40(standby_cycle);
   809de:	f44f 7096 	mov.w	r0, #300	; 0x12c
   809e2:	4b07      	ldr	r3, [pc, #28]	; (80a00 <set_state+0x70>)
   809e4:	4798      	blx	r3
		update_duty_cycle_DAC1(standby_cycle);
   809e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
   809ea:	4b06      	ldr	r3, [pc, #24]	; (80a04 <set_state+0x74>)
   809ec:	4798      	blx	r3
		delay_ms(5000);
   809ee:	4807      	ldr	r0, [pc, #28]	; (80a0c <set_state+0x7c>)
   809f0:	4b07      	ldr	r3, [pc, #28]	; (80a10 <set_state+0x80>)
   809f2:	4798      	blx	r3
   809f4:	bd08      	pop	{r3, pc}
   809f6:	bf00      	nop
   809f8:	00080e2d 	.word	0x00080e2d
   809fc:	00080e59 	.word	0x00080e59
   80a00:	00080e85 	.word	0x00080e85
   80a04:	00080e01 	.word	0x00080e01
   80a08:	00080edd 	.word	0x00080edd
   80a0c:	01c9c380 	.word	0x01c9c380
   80a10:	20070001 	.word	0x20070001

00080a14 <init_pwm>:
	i = 0;
}

/* Initialize pwm */
void init_pwm(void)
{
   80a14:	b508      	push	{r3, lr}
	initialize_pwm();
   80a16:	4b0b      	ldr	r3, [pc, #44]	; (80a44 <init_pwm+0x30>)
   80a18:	4798      	blx	r3
	
	/* Initialize the pwm signals with the given dutycycle (0-999) */
	update_duty_cycle_9(900);
   80a1a:	f44f 7061 	mov.w	r0, #900	; 0x384
   80a1e:	4b0a      	ldr	r3, [pc, #40]	; (80a48 <init_pwm+0x34>)
   80a20:	4798      	blx	r3
	update_duty_cycle_8(0);
   80a22:	2000      	movs	r0, #0
   80a24:	4b09      	ldr	r3, [pc, #36]	; (80a4c <init_pwm+0x38>)
   80a26:	4798      	blx	r3
	update_duty_cycle_DAC1(0);
   80a28:	2000      	movs	r0, #0
   80a2a:	4b09      	ldr	r3, [pc, #36]	; (80a50 <init_pwm+0x3c>)
   80a2c:	4798      	blx	r3
	update_duty_cycle_36(0);
   80a2e:	2000      	movs	r0, #0
   80a30:	4b08      	ldr	r3, [pc, #32]	; (80a54 <init_pwm+0x40>)
   80a32:	4798      	blx	r3
	update_duty_cycle_38(0);
   80a34:	2000      	movs	r0, #0
   80a36:	4b08      	ldr	r3, [pc, #32]	; (80a58 <init_pwm+0x44>)
   80a38:	4798      	blx	r3
	update_duty_cycle_40(0);
   80a3a:	2000      	movs	r0, #0
   80a3c:	4b07      	ldr	r3, [pc, #28]	; (80a5c <init_pwm+0x48>)
   80a3e:	4798      	blx	r3
   80a40:	bd08      	pop	{r3, pc}
   80a42:	bf00      	nop
   80a44:	00080c3d 	.word	0x00080c3d
   80a48:	00080eb1 	.word	0x00080eb1
   80a4c:	00080edd 	.word	0x00080edd
   80a50:	00080e01 	.word	0x00080e01
   80a54:	00080e2d 	.word	0x00080e2d
   80a58:	00080e59 	.word	0x00080e59
   80a5c:	00080e85 	.word	0x00080e85

00080a60 <init_tasks>:

}

/* Initialize and create the tasks*/
void init_tasks(void)
{
   80a60:	b510      	push	{r4, lr}
   80a62:	b084      	sub	sp, #16
	//{
	//	printf("Could not create task Reset Fan");
	//}
	
	/* Create and start the front controller task */
 	if(xTaskCreate(start_controller_front,(const signed char * const) "Front controller", 2048, NULL, 2, NULL) !=pdPASS)
   80a64:	2302      	movs	r3, #2
   80a66:	9300      	str	r3, [sp, #0]
   80a68:	2300      	movs	r3, #0
   80a6a:	9301      	str	r3, [sp, #4]
   80a6c:	9302      	str	r3, [sp, #8]
   80a6e:	9303      	str	r3, [sp, #12]
   80a70:	4818      	ldr	r0, [pc, #96]	; (80ad4 <init_tasks+0x74>)
   80a72:	4919      	ldr	r1, [pc, #100]	; (80ad8 <init_tasks+0x78>)
   80a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80a78:	4c18      	ldr	r4, [pc, #96]	; (80adc <init_tasks+0x7c>)
   80a7a:	47a0      	blx	r4
   80a7c:	2801      	cmp	r0, #1
   80a7e:	d002      	beq.n	80a86 <init_tasks+0x26>
 	{
 		printf("Could not create task Front controller");
   80a80:	4817      	ldr	r0, [pc, #92]	; (80ae0 <init_tasks+0x80>)
   80a82:	4b18      	ldr	r3, [pc, #96]	; (80ae4 <init_tasks+0x84>)
   80a84:	4798      	blx	r3
 	}
	
	/* Create and start the front controller task */
	if(xTaskCreate(start_controller_back,(const signed char * const) "Back controller", 2048, NULL, 2, NULL) !=pdPASS)
   80a86:	2302      	movs	r3, #2
   80a88:	9300      	str	r3, [sp, #0]
   80a8a:	2300      	movs	r3, #0
   80a8c:	9301      	str	r3, [sp, #4]
   80a8e:	9302      	str	r3, [sp, #8]
   80a90:	9303      	str	r3, [sp, #12]
   80a92:	4815      	ldr	r0, [pc, #84]	; (80ae8 <init_tasks+0x88>)
   80a94:	4915      	ldr	r1, [pc, #84]	; (80aec <init_tasks+0x8c>)
   80a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80a9a:	4c10      	ldr	r4, [pc, #64]	; (80adc <init_tasks+0x7c>)
   80a9c:	47a0      	blx	r4
   80a9e:	2801      	cmp	r0, #1
   80aa0:	d002      	beq.n	80aa8 <init_tasks+0x48>
	{
		printf("Could not create task Back controller");
   80aa2:	4813      	ldr	r0, [pc, #76]	; (80af0 <init_tasks+0x90>)
   80aa4:	4b0f      	ldr	r3, [pc, #60]	; (80ae4 <init_tasks+0x84>)
   80aa6:	4798      	blx	r3
	}
	
	/* Create and start the communication task */
 	if(xTaskCreate(start_communication,(const signed char * const) "Communication", 2048, NULL, 1, NULL) !=pdPASS)
   80aa8:	2301      	movs	r3, #1
   80aaa:	9300      	str	r3, [sp, #0]
   80aac:	2300      	movs	r3, #0
   80aae:	9301      	str	r3, [sp, #4]
   80ab0:	9302      	str	r3, [sp, #8]
   80ab2:	9303      	str	r3, [sp, #12]
   80ab4:	480f      	ldr	r0, [pc, #60]	; (80af4 <init_tasks+0x94>)
   80ab6:	4910      	ldr	r1, [pc, #64]	; (80af8 <init_tasks+0x98>)
   80ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80abc:	4c07      	ldr	r4, [pc, #28]	; (80adc <init_tasks+0x7c>)
   80abe:	47a0      	blx	r4
   80ac0:	2801      	cmp	r0, #1
   80ac2:	d002      	beq.n	80aca <init_tasks+0x6a>
 	{
 		printf("Could not create task Communication");
   80ac4:	480d      	ldr	r0, [pc, #52]	; (80afc <init_tasks+0x9c>)
   80ac6:	4b07      	ldr	r3, [pc, #28]	; (80ae4 <init_tasks+0x84>)
   80ac8:	4798      	blx	r3
 	}
	
	vTaskStartScheduler(); // Start the tasks
   80aca:	4b0d      	ldr	r3, [pc, #52]	; (80b00 <init_tasks+0xa0>)
   80acc:	4798      	blx	r3
}
   80ace:	b004      	add	sp, #16
   80ad0:	bd10      	pop	{r4, pc}
   80ad2:	bf00      	nop
   80ad4:	000807b1 	.word	0x000807b1
   80ad8:	00085f40 	.word	0x00085f40
   80adc:	000818f5 	.word	0x000818f5
   80ae0:	00085f54 	.word	0x00085f54
   80ae4:	000837c1 	.word	0x000837c1
   80ae8:	000805d1 	.word	0x000805d1
   80aec:	00085f7c 	.word	0x00085f7c
   80af0:	00085f8c 	.word	0x00085f8c
   80af4:	00080f09 	.word	0x00080f09
   80af8:	00085fb4 	.word	0x00085fb4
   80afc:	00085fc4 	.word	0x00085fc4
   80b00:	00081afd 	.word	0x00081afd

00080b04 <init_sempahores>:

/* Initialize the semaphores */
void init_sempahores(void)
{
   80b04:	b510      	push	{r4, lr}
	vSemaphoreCreateBinary(semahpore_duty_cycles);
   80b06:	2001      	movs	r0, #1
   80b08:	2100      	movs	r1, #0
   80b0a:	2203      	movs	r2, #3
   80b0c:	4b0b      	ldr	r3, [pc, #44]	; (80b3c <init_sempahores+0x38>)
   80b0e:	4798      	blx	r3
   80b10:	4b0b      	ldr	r3, [pc, #44]	; (80b40 <init_sempahores+0x3c>)
   80b12:	6018      	str	r0, [r3, #0]
   80b14:	b120      	cbz	r0, 80b20 <init_sempahores+0x1c>
   80b16:	2100      	movs	r1, #0
   80b18:	460a      	mov	r2, r1
   80b1a:	460b      	mov	r3, r1
   80b1c:	4c09      	ldr	r4, [pc, #36]	; (80b44 <init_sempahores+0x40>)
   80b1e:	47a0      	blx	r4
	vSemaphoreCreateBinary(semaphore_adc_values);
   80b20:	2001      	movs	r0, #1
   80b22:	2100      	movs	r1, #0
   80b24:	2203      	movs	r2, #3
   80b26:	4b05      	ldr	r3, [pc, #20]	; (80b3c <init_sempahores+0x38>)
   80b28:	4798      	blx	r3
   80b2a:	4b07      	ldr	r3, [pc, #28]	; (80b48 <init_sempahores+0x44>)
   80b2c:	6018      	str	r0, [r3, #0]
   80b2e:	b120      	cbz	r0, 80b3a <init_sempahores+0x36>
   80b30:	2100      	movs	r1, #0
   80b32:	460a      	mov	r2, r1
   80b34:	460b      	mov	r3, r1
   80b36:	4c03      	ldr	r4, [pc, #12]	; (80b44 <init_sempahores+0x40>)
   80b38:	47a0      	blx	r4
   80b3a:	bd10      	pop	{r4, pc}
   80b3c:	000814dd 	.word	0x000814dd
   80b40:	20070dd4 	.word	0x20070dd4
   80b44:	00081535 	.word	0x00081535
   80b48:	20070dd0 	.word	0x20070dd0

00080b4c <main>:
	
	#endif
}

int main(void)
{
   80b4c:	b530      	push	{r4, r5, lr}
   80b4e:	b085      	sub	sp, #20
	/* Setup */
	sysclk_init();
   80b50:	4b27      	ldr	r3, [pc, #156]	; (80bf0 <main+0xa4>)
   80b52:	4798      	blx	r3
	board_init();
   80b54:	4b27      	ldr	r3, [pc, #156]	; (80bf4 <main+0xa8>)
   80b56:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80b58:	200b      	movs	r0, #11
   80b5a:	4c27      	ldr	r4, [pc, #156]	; (80bf8 <main+0xac>)
   80b5c:	47a0      	blx	r4
   80b5e:	200c      	movs	r0, #12
   80b60:	47a0      	blx	r4
   80b62:	200d      	movs	r0, #13
   80b64:	47a0      	blx	r4
   80b66:	200e      	movs	r0, #14
   80b68:	47a0      	blx	r4
   80b6a:	2008      	movs	r0, #8
   80b6c:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80b6e:	4d23      	ldr	r5, [pc, #140]	; (80bfc <main+0xb0>)
   80b70:	4b23      	ldr	r3, [pc, #140]	; (80c00 <main+0xb4>)
   80b72:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80b74:	4a23      	ldr	r2, [pc, #140]	; (80c04 <main+0xb8>)
   80b76:	4b24      	ldr	r3, [pc, #144]	; (80c08 <main+0xbc>)
   80b78:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80b7a:	4a24      	ldr	r2, [pc, #144]	; (80c0c <main+0xc0>)
   80b7c:	4b24      	ldr	r3, [pc, #144]	; (80c10 <main+0xc4>)
   80b7e:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80b80:	4b24      	ldr	r3, [pc, #144]	; (80c14 <main+0xc8>)
   80b82:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   80b84:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80b88:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   80b8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b8e:	9302      	str	r3, [sp, #8]
   80b90:	2008      	movs	r0, #8
   80b92:	47a0      	blx	r4
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80b94:	4628      	mov	r0, r5
   80b96:	4669      	mov	r1, sp
   80b98:	4b1f      	ldr	r3, [pc, #124]	; (80c18 <main+0xcc>)
   80b9a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80b9c:	4d1f      	ldr	r5, [pc, #124]	; (80c1c <main+0xd0>)
   80b9e:	682b      	ldr	r3, [r5, #0]
   80ba0:	6898      	ldr	r0, [r3, #8]
   80ba2:	2100      	movs	r1, #0
   80ba4:	4c1e      	ldr	r4, [pc, #120]	; (80c20 <main+0xd4>)
   80ba6:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80ba8:	682b      	ldr	r3, [r5, #0]
   80baa:	6858      	ldr	r0, [r3, #4]
   80bac:	2100      	movs	r1, #0
   80bae:	47a0      	blx	r4
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   80bb0:	4b1c      	ldr	r3, [pc, #112]	; (80c24 <main+0xd8>)
   80bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
   80bb6:	665a      	str	r2, [r3, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80bb8:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80bba:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   80bc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80bc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   80bc6:	671a      	str	r2, [r3, #112]	; 0x70
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	ioport_set_pin_mode(PIO_PA8_IDX,IOPORT_MODE_PULLUP);// No stdout buffer
	#if defined(__GNUC__)
	setbuf(stdout, NULL);
   80bc8:	682b      	ldr	r3, [r5, #0]
   80bca:	6898      	ldr	r0, [r3, #8]
   80bcc:	2100      	movs	r1, #0
   80bce:	47a0      	blx	r4
	board_init();
	ioport_init();
	configure_console();
	
	/* Initialize program */
	init_adc();
   80bd0:	4b15      	ldr	r3, [pc, #84]	; (80c28 <main+0xdc>)
   80bd2:	4798      	blx	r3
	init_pwm();
   80bd4:	4b15      	ldr	r3, [pc, #84]	; (80c2c <main+0xe0>)
   80bd6:	4798      	blx	r3
	init_sempahores();
   80bd8:	4b15      	ldr	r3, [pc, #84]	; (80c30 <main+0xe4>)
   80bda:	4798      	blx	r3
	delay_init();
	
	set_state(STAND_STILL);
   80bdc:	2004      	movs	r0, #4
   80bde:	4c15      	ldr	r4, [pc, #84]	; (80c34 <main+0xe8>)
   80be0:	47a0      	blx	r4
	set_state(ROTATE_LEFT);
   80be2:	2000      	movs	r0, #0
   80be4:	47a0      	blx	r4

	init_tasks();
   80be6:	4b14      	ldr	r3, [pc, #80]	; (80c38 <main+0xec>)
   80be8:	4798      	blx	r3
}
   80bea:	2000      	movs	r0, #0
   80bec:	b005      	add	sp, #20
   80bee:	bd30      	pop	{r4, r5, pc}
   80bf0:	000827cd 	.word	0x000827cd
   80bf4:	00082831 	.word	0x00082831
   80bf8:	00082c59 	.word	0x00082c59
   80bfc:	400e0800 	.word	0x400e0800
   80c00:	2007918c 	.word	0x2007918c
   80c04:	000808e9 	.word	0x000808e9
   80c08:	20079188 	.word	0x20079188
   80c0c:	00080845 	.word	0x00080845
   80c10:	20079184 	.word	0x20079184
   80c14:	0501bd00 	.word	0x0501bd00
   80c18:	00080401 	.word	0x00080401
   80c1c:	200704d0 	.word	0x200704d0
   80c20:	00083823 	.word	0x00083823
   80c24:	400e0e00 	.word	0x400e0e00
   80c28:	00080305 	.word	0x00080305
   80c2c:	00080a15 	.word	0x00080a15
   80c30:	00080b05 	.word	0x00080b05
   80c34:	00080991 	.word	0x00080991
   80c38:	00080a61 	.word	0x00080a61

00080c3c <initialize_pwm>:
int duty_cycle_DAC1= 0;
int duty_cycle_8 = 0;

/* Function for initialize PWM on pins DAC1, 9, 36, 38 and 40 */
void initialize_pwm(void)
{
   80c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80c40:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_PWM);
   80c42:	2024      	movs	r0, #36	; 0x24
   80c44:	4d5d      	ldr	r5, [pc, #372]	; (80dbc <initialize_pwm+0x180>)
   80c46:	47a8      	blx	r5
	pwm_channel_enable(PWM, PWM_CHANNEL_0);
   80c48:	4c5d      	ldr	r4, [pc, #372]	; (80dc0 <initialize_pwm+0x184>)
   80c4a:	4620      	mov	r0, r4
   80c4c:	2100      	movs	r1, #0
   80c4e:	4e5d      	ldr	r6, [pc, #372]	; (80dc4 <initialize_pwm+0x188>)
   80c50:	47b0      	blx	r6
	pwm_channel_enable(PWM, PWM_CHANNEL_1);
   80c52:	4620      	mov	r0, r4
   80c54:	2101      	movs	r1, #1
   80c56:	47b0      	blx	r6
	pwm_channel_enable(PWM, PWM_CHANNEL_2);
   80c58:	4620      	mov	r0, r4
   80c5a:	2102      	movs	r1, #2
   80c5c:	47b0      	blx	r6
	pwm_channel_enable(PWM, PWM_CHANNEL_3);
   80c5e:	4620      	mov	r0, r4
   80c60:	2103      	movs	r1, #3
   80c62:	47b0      	blx	r6
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   80c64:	4620      	mov	r0, r4
   80c66:	2104      	movs	r1, #4
   80c68:	47b0      	blx	r6
	pwm_channel_enable(PWM, PWM_CHANNEL_5);
   80c6a:	4620      	mov	r0, r4
   80c6c:	2105      	movs	r1, #5
   80c6e:	47b0      	blx	r6
	
	/* General clock settings for the PWM */
	pmc_enable_periph_clk(ID_PWM);
   80c70:	2024      	movs	r0, #36	; 0x24
   80c72:	47a8      	blx	r5
	pwm_clock_t clock_setting = {
   80c74:	4b54      	ldr	r3, [pc, #336]	; (80dc8 <initialize_pwm+0x18c>)
   80c76:	9301      	str	r3, [sp, #4]
   80c78:	2500      	movs	r5, #0
   80c7a:	9502      	str	r5, [sp, #8]
   80c7c:	4b53      	ldr	r3, [pc, #332]	; (80dcc <initialize_pwm+0x190>)
   80c7e:	9303      	str	r3, [sp, #12]
		.ul_clka = PWM_FREQUENCY * PWM_RESOLUTION,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_main_hz()
	};
	pwm_init(PWM, &clock_setting);
   80c80:	4620      	mov	r0, r4
   80c82:	a901      	add	r1, sp, #4
   80c84:	4b52      	ldr	r3, [pc, #328]	; (80dd0 <initialize_pwm+0x194>)
   80c86:	4798      	blx	r3
	
	/* Disables the PWM channels for setup */
	pwm_channel_disable(PWM, PWM_CHANNEL_0);
   80c88:	4620      	mov	r0, r4
   80c8a:	4629      	mov	r1, r5
   80c8c:	4f51      	ldr	r7, [pc, #324]	; (80dd4 <initialize_pwm+0x198>)
   80c8e:	47b8      	blx	r7
	pwm_channel_disable(PWM, PWM_CHANNEL_1);
   80c90:	4620      	mov	r0, r4
   80c92:	2101      	movs	r1, #1
   80c94:	47b8      	blx	r7
	pwm_channel_disable(PWM, PWM_CHANNEL_2);
   80c96:	4620      	mov	r0, r4
   80c98:	2102      	movs	r1, #2
   80c9a:	47b8      	blx	r7
	pwm_channel_disable(PWM, PWM_CHANNEL_3);
   80c9c:	4620      	mov	r0, r4
   80c9e:	2103      	movs	r1, #3
   80ca0:	47b8      	blx	r7
	pwm_channel_disable(PWM, PWM_CHANNEL_4);
   80ca2:	4620      	mov	r0, r4
   80ca4:	2104      	movs	r1, #4
   80ca6:	47b8      	blx	r7
	pwm_channel_disable(PWM, PWM_CHANNEL_5);
   80ca8:	4620      	mov	r0, r4
   80caa:	2105      	movs	r1, #5
   80cac:	47b8      	blx	r7
	
	/* DAC1 */
	pwm_channel_DAC1.alignment = PWM_ALIGN_LEFT;
   80cae:	494a      	ldr	r1, [pc, #296]	; (80dd8 <initialize_pwm+0x19c>)
   80cb0:	810d      	strh	r5, [r1, #8]
	pwm_channel_DAC1.polarity = PWM_POLARITY;
   80cb2:	728d      	strb	r5, [r1, #10]
	pwm_channel_DAC1.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80cb4:	f04f 0a0b 	mov.w	sl, #11
   80cb8:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_DAC1.ul_period = PWM_RESOLUTION;
   80cbc:	f240 39e7 	movw	r9, #999	; 0x3e7
   80cc0:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_DAC1.ul_duty = 0;
   80cc4:	60cd      	str	r5, [r1, #12]
	pwm_channel_DAC1.channel = PWM_CHANNEL_0;
   80cc6:	600d      	str	r5, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_DAC1);
   80cc8:	4620      	mov	r0, r4
   80cca:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80df8 <initialize_pwm+0x1bc>
   80cce:	47c0      	blx	r8
	pio_set_peripheral(PWM_PIO_B, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_DAC1);
   80cd0:	4842      	ldr	r0, [pc, #264]	; (80ddc <initialize_pwm+0x1a0>)
   80cd2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80cd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80cda:	4f41      	ldr	r7, [pc, #260]	; (80de0 <initialize_pwm+0x1a4>)
   80cdc:	47b8      	blx	r7
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_0);
   80cde:	4620      	mov	r0, r4
   80ce0:	4629      	mov	r1, r5
   80ce2:	47b0      	blx	r6
	
	/* Pin 36 */
	pwm_channel_36.alignment = PWM_ALIGN_LEFT;
   80ce4:	493f      	ldr	r1, [pc, #252]	; (80de4 <initialize_pwm+0x1a8>)
   80ce6:	810d      	strh	r5, [r1, #8]
	pwm_channel_36.polarity = PWM_POLARITY;
   80ce8:	728d      	strb	r5, [r1, #10]
	pwm_channel_36.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80cea:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_36.ul_period = PWM_RESOLUTION;
   80cee:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_36.ul_duty = 0;
   80cf2:	60cd      	str	r5, [r1, #12]
	pwm_channel_36.channel = PWM_CHANNEL_1;
   80cf4:	2301      	movs	r3, #1
   80cf6:	600b      	str	r3, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_36);
   80cf8:	4620      	mov	r0, r4
   80cfa:	47c0      	blx	r8
	pio_set_peripheral(PWM_PIO_C, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_36);
   80cfc:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 80dfc <initialize_pwm+0x1c0>
   80d00:	4658      	mov	r0, fp
   80d02:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80d06:	2210      	movs	r2, #16
   80d08:	47b8      	blx	r7
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_1);
   80d0a:	4620      	mov	r0, r4
   80d0c:	2101      	movs	r1, #1
   80d0e:	47b0      	blx	r6
	
	/* Pin 38 */
	pwm_channel_38.alignment = PWM_ALIGN_LEFT;
   80d10:	4935      	ldr	r1, [pc, #212]	; (80de8 <initialize_pwm+0x1ac>)
   80d12:	810d      	strh	r5, [r1, #8]
	pwm_channel_38.polarity = PWM_POLARITY;
   80d14:	728d      	strb	r5, [r1, #10]
	pwm_channel_38.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80d16:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_38.ul_period = PWM_RESOLUTION;
   80d1a:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_38.ul_duty = 0;
   80d1e:	60cd      	str	r5, [r1, #12]
	pwm_channel_38.channel = PWM_CHANNEL_2;
   80d20:	2302      	movs	r3, #2
   80d22:	600b      	str	r3, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_38);
   80d24:	4620      	mov	r0, r4
   80d26:	47c0      	blx	r8
	pio_set_peripheral(PWM_PIO_C, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_38);
   80d28:	4658      	mov	r0, fp
   80d2a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80d2e:	2240      	movs	r2, #64	; 0x40
   80d30:	47b8      	blx	r7
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_2);
   80d32:	4620      	mov	r0, r4
   80d34:	2102      	movs	r1, #2
   80d36:	47b0      	blx	r6
	
	/* Pin 40 */
	pwm_channel_40.alignment = PWM_ALIGN_LEFT;
   80d38:	492c      	ldr	r1, [pc, #176]	; (80dec <initialize_pwm+0x1b0>)
   80d3a:	810d      	strh	r5, [r1, #8]
	pwm_channel_40.polarity = PWM_POLARITY;
   80d3c:	728d      	strb	r5, [r1, #10]
	pwm_channel_40.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80d3e:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_40.ul_period = PWM_RESOLUTION;
   80d42:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_40.ul_duty = 0;
   80d46:	60cd      	str	r5, [r1, #12]
	pwm_channel_40.channel = PWM_CHANNEL_3;
   80d48:	2303      	movs	r3, #3
   80d4a:	600b      	str	r3, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_40);
   80d4c:	4620      	mov	r0, r4
   80d4e:	47c0      	blx	r8
	pio_set_peripheral(PWM_PIO_C, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_40);
   80d50:	4658      	mov	r0, fp
   80d52:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80d56:	f44f 7280 	mov.w	r2, #256	; 0x100
   80d5a:	47b8      	blx	r7
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_3);
   80d5c:	4620      	mov	r0, r4
   80d5e:	2103      	movs	r1, #3
   80d60:	47b0      	blx	r6
	
	/* Pin 9 */
	pwm_channel_9.alignment = PWM_ALIGN_LEFT;
   80d62:	4923      	ldr	r1, [pc, #140]	; (80df0 <initialize_pwm+0x1b4>)
   80d64:	810d      	strh	r5, [r1, #8]
	pwm_channel_9.polarity = PWM_POLARITY;
   80d66:	728d      	strb	r5, [r1, #10]
	pwm_channel_9.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80d68:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_9.ul_period = PWM_RESOLUTION;
   80d6c:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_9.ul_duty = 0;
   80d70:	60cd      	str	r5, [r1, #12]
	pwm_channel_9.channel = PWM_CHANNEL_4;
   80d72:	2304      	movs	r3, #4
   80d74:	600b      	str	r3, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_9);
   80d76:	4620      	mov	r0, r4
   80d78:	47c0      	blx	r8
	pio_set_peripheral(PWM_PIO_C, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_9);
   80d7a:	4658      	mov	r0, fp
   80d7c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80d80:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   80d84:	47b8      	blx	r7
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   80d86:	4620      	mov	r0, r4
   80d88:	2104      	movs	r1, #4
   80d8a:	47b0      	blx	r6
	
	/* Pin 8 */
	pwm_channel_8.alignment = PWM_ALIGN_LEFT;
   80d8c:	4919      	ldr	r1, [pc, #100]	; (80df4 <initialize_pwm+0x1b8>)
   80d8e:	810d      	strh	r5, [r1, #8]
	pwm_channel_8.polarity = PWM_POLARITY;
   80d90:	728d      	strb	r5, [r1, #10]
	pwm_channel_8.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80d92:	f8c1 a004 	str.w	sl, [r1, #4]
	pwm_channel_8.ul_period = PWM_RESOLUTION;
   80d96:	f8c1 9010 	str.w	r9, [r1, #16]
	pwm_channel_8.ul_duty = 0;
   80d9a:	60cd      	str	r5, [r1, #12]
	pwm_channel_8.channel = PWM_CHANNEL_5;
   80d9c:	2505      	movs	r5, #5
   80d9e:	600d      	str	r5, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel_8);
   80da0:	4620      	mov	r0, r4
   80da2:	47c0      	blx	r8
	pio_set_peripheral(PWM_PIO_C, PWM_PIO_PERIPHERAL, PWM_PIO_PIN_8);
   80da4:	4658      	mov	r0, fp
   80da6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80daa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   80dae:	47b8      	blx	r7
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PWM_CHANNEL_5);
   80db0:	4620      	mov	r0, r4
   80db2:	4629      	mov	r1, r5
   80db4:	47b0      	blx	r6
}
   80db6:	b005      	add	sp, #20
   80db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80dbc:	00082c59 	.word	0x00082c59
   80dc0:	40094000 	.word	0x40094000
   80dc4:	000827b5 	.word	0x000827b5
   80dc8:	000f3e58 	.word	0x000f3e58
   80dcc:	0a037a00 	.word	0x0a037a00
   80dd0:	0008264d 	.word	0x0008264d
   80dd4:	000827c1 	.word	0x000827c1
   80dd8:	20070e30 	.word	0x20070e30
   80ddc:	400e1000 	.word	0x400e1000
   80de0:	000828b1 	.word	0x000828b1
   80de4:	20070e84 	.word	0x20070e84
   80de8:	20070eb0 	.word	0x20070eb0
   80dec:	20070e5c 	.word	0x20070e5c
   80df0:	20070e04 	.word	0x20070e04
   80df4:	20070ddc 	.word	0x20070ddc
   80df8:	0008268d 	.word	0x0008268d
   80dfc:	400e1200 	.word	0x400e1200

00080e00 <update_duty_cycle_DAC1>:


/* Updates the dutycycle of the PWM signal on DAC1 */
void update_duty_cycle_DAC1(uint32_t duty_cycle_temp)
{
   80e00:	b508      	push	{r3, lr}
   80e02:	f240 32e7 	movw	r2, #999	; 0x3e7
   80e06:	4290      	cmp	r0, r2
   80e08:	bf38      	it	cc
   80e0a:	4602      	movcc	r2, r0
	else if(duty_cycle_temp<0)
	{
		duty_cycle_temp = 0;
	}
	
	duty_cycle_DAC1 = duty_cycle_temp;
   80e0c:	4b03      	ldr	r3, [pc, #12]	; (80e1c <update_duty_cycle_DAC1+0x1c>)
   80e0e:	601a      	str	r2, [r3, #0]
	pwm_channel_update_duty(PWM, &pwm_channel_DAC1, duty_cycle_temp);
   80e10:	4803      	ldr	r0, [pc, #12]	; (80e20 <update_duty_cycle_DAC1+0x20>)
   80e12:	4904      	ldr	r1, [pc, #16]	; (80e24 <update_duty_cycle_DAC1+0x24>)
   80e14:	4b04      	ldr	r3, [pc, #16]	; (80e28 <update_duty_cycle_DAC1+0x28>)
   80e16:	4798      	blx	r3
   80e18:	bd08      	pop	{r3, pc}
   80e1a:	bf00      	nop
   80e1c:	20070e58 	.word	0x20070e58
   80e20:	40094000 	.word	0x40094000
   80e24:	20070e30 	.word	0x20070e30
   80e28:	00082791 	.word	0x00082791

00080e2c <update_duty_cycle_36>:
}

/* Update the dutycycle of the PWM signal on pin 36 */
void update_duty_cycle_36(uint32_t duty_cycle_temp)
{
   80e2c:	b508      	push	{r3, lr}
   80e2e:	f240 32e7 	movw	r2, #999	; 0x3e7
   80e32:	4290      	cmp	r0, r2
   80e34:	bf38      	it	cc
   80e36:	4602      	movcc	r2, r0
	else if(duty_cycle_temp<0)
	{
		duty_cycle_temp = 0;
	}
	
	duty_cycle_36 = duty_cycle_temp;
   80e38:	4b03      	ldr	r3, [pc, #12]	; (80e48 <update_duty_cycle_36+0x1c>)
   80e3a:	601a      	str	r2, [r3, #0]
	pwm_channel_update_duty(PWM, &pwm_channel_36, duty_cycle_temp);
   80e3c:	4803      	ldr	r0, [pc, #12]	; (80e4c <update_duty_cycle_36+0x20>)
   80e3e:	4904      	ldr	r1, [pc, #16]	; (80e50 <update_duty_cycle_36+0x24>)
   80e40:	4b04      	ldr	r3, [pc, #16]	; (80e54 <update_duty_cycle_36+0x28>)
   80e42:	4798      	blx	r3
   80e44:	bd08      	pop	{r3, pc}
   80e46:	bf00      	nop
   80e48:	20070edc 	.word	0x20070edc
   80e4c:	40094000 	.word	0x40094000
   80e50:	20070e84 	.word	0x20070e84
   80e54:	00082791 	.word	0x00082791

00080e58 <update_duty_cycle_38>:
}

/* Updates the dutycycle of the PMW signal on pin 38 */
void update_duty_cycle_38(uint32_t duty_cycle_temp)
{
   80e58:	b508      	push	{r3, lr}
   80e5a:	f240 32e7 	movw	r2, #999	; 0x3e7
   80e5e:	4290      	cmp	r0, r2
   80e60:	bf38      	it	cc
   80e62:	4602      	movcc	r2, r0
	else if(duty_cycle_temp<0)
	{
		duty_cycle_temp = 0;
	}
	
	duty_cycle_38 = duty_cycle_temp;
   80e64:	4b03      	ldr	r3, [pc, #12]	; (80e74 <update_duty_cycle_38+0x1c>)
   80e66:	601a      	str	r2, [r3, #0]
	pwm_channel_update_duty(PWM, &pwm_channel_38, duty_cycle_temp);
   80e68:	4803      	ldr	r0, [pc, #12]	; (80e78 <update_duty_cycle_38+0x20>)
   80e6a:	4904      	ldr	r1, [pc, #16]	; (80e7c <update_duty_cycle_38+0x24>)
   80e6c:	4b04      	ldr	r3, [pc, #16]	; (80e80 <update_duty_cycle_38+0x28>)
   80e6e:	4798      	blx	r3
   80e70:	bd08      	pop	{r3, pc}
   80e72:	bf00      	nop
   80e74:	20070dd8 	.word	0x20070dd8
   80e78:	40094000 	.word	0x40094000
   80e7c:	20070eb0 	.word	0x20070eb0
   80e80:	00082791 	.word	0x00082791

00080e84 <update_duty_cycle_40>:
}

/* Updates the dutycycle of the PWM signal on pin 40 */
void update_duty_cycle_40(uint32_t duty_cycle_temp)
{
   80e84:	b508      	push	{r3, lr}
   80e86:	f240 32e7 	movw	r2, #999	; 0x3e7
   80e8a:	4290      	cmp	r0, r2
   80e8c:	bf38      	it	cc
   80e8e:	4602      	movcc	r2, r0
	else if(duty_cycle_temp<0)
	{
		duty_cycle_temp = 0;
	}
	
	duty_cycle_40 = duty_cycle_temp;
   80e90:	4b03      	ldr	r3, [pc, #12]	; (80ea0 <update_duty_cycle_40+0x1c>)
   80e92:	601a      	str	r2, [r3, #0]
	pwm_channel_update_duty(PWM, &pwm_channel_40, duty_cycle_temp);
   80e94:	4803      	ldr	r0, [pc, #12]	; (80ea4 <update_duty_cycle_40+0x20>)
   80e96:	4904      	ldr	r1, [pc, #16]	; (80ea8 <update_duty_cycle_40+0x24>)
   80e98:	4b04      	ldr	r3, [pc, #16]	; (80eac <update_duty_cycle_40+0x28>)
   80e9a:	4798      	blx	r3
   80e9c:	bd08      	pop	{r3, pc}
   80e9e:	bf00      	nop
   80ea0:	20070ed8 	.word	0x20070ed8
   80ea4:	40094000 	.word	0x40094000
   80ea8:	20070e5c 	.word	0x20070e5c
   80eac:	00082791 	.word	0x00082791

00080eb0 <update_duty_cycle_9>:
}

/* Updates the dutycycle of the PWM signal on pin 9 */
void update_duty_cycle_9(uint32_t duty_cycle_temp)
{
   80eb0:	b508      	push	{r3, lr}
   80eb2:	f240 32e7 	movw	r2, #999	; 0x3e7
   80eb6:	4290      	cmp	r0, r2
   80eb8:	bf38      	it	cc
   80eba:	4602      	movcc	r2, r0
	else if(duty_cycle_temp<0)
	{
		duty_cycle_temp = 0;
	}
	
	duty_cycle_9 = duty_cycle_temp;
   80ebc:	4b03      	ldr	r3, [pc, #12]	; (80ecc <update_duty_cycle_9+0x1c>)
   80ebe:	601a      	str	r2, [r3, #0]
	pwm_channel_update_duty(PWM, &pwm_channel_9, duty_cycle_temp);
   80ec0:	4803      	ldr	r0, [pc, #12]	; (80ed0 <update_duty_cycle_9+0x20>)
   80ec2:	4904      	ldr	r1, [pc, #16]	; (80ed4 <update_duty_cycle_9+0x24>)
   80ec4:	4b04      	ldr	r3, [pc, #16]	; (80ed8 <update_duty_cycle_9+0x28>)
   80ec6:	4798      	blx	r3
   80ec8:	bd08      	pop	{r3, pc}
   80eca:	bf00      	nop
   80ecc:	20070eac 	.word	0x20070eac
   80ed0:	40094000 	.word	0x40094000
   80ed4:	20070e04 	.word	0x20070e04
   80ed8:	00082791 	.word	0x00082791

00080edc <update_duty_cycle_8>:
}

/* Updates the dutycycle of the PWM signal on pin 8 */
void update_duty_cycle_8(uint32_t duty_cycle_temp)
{
   80edc:	b508      	push	{r3, lr}
   80ede:	f240 32e7 	movw	r2, #999	; 0x3e7
   80ee2:	4290      	cmp	r0, r2
   80ee4:	bf38      	it	cc
   80ee6:	4602      	movcc	r2, r0
	else if(duty_cycle_temp<0)
	{
		duty_cycle_temp = 0;
	}
	
	duty_cycle_8 = duty_cycle_temp;
   80ee8:	4b03      	ldr	r3, [pc, #12]	; (80ef8 <update_duty_cycle_8+0x1c>)
   80eea:	601a      	str	r2, [r3, #0]
	pwm_channel_update_duty(PWM, &pwm_channel_8, duty_cycle_temp);
   80eec:	4803      	ldr	r0, [pc, #12]	; (80efc <update_duty_cycle_8+0x20>)
   80eee:	4904      	ldr	r1, [pc, #16]	; (80f00 <update_duty_cycle_8+0x24>)
   80ef0:	4b04      	ldr	r3, [pc, #16]	; (80f04 <update_duty_cycle_8+0x28>)
   80ef2:	4798      	blx	r3
   80ef4:	bd08      	pop	{r3, pc}
   80ef6:	bf00      	nop
   80ef8:	20070e2c 	.word	0x20070e2c
   80efc:	40094000 	.word	0x40094000
   80f00:	20070ddc 	.word	0x20070ddc
   80f04:	00082791 	.word	0x00082791

00080f08 <start_communication>:

int invalue;

/* Start the communication task */
void start_communication(void *p)
{
   80f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80f0c:	b08d      	sub	sp, #52	; 0x34
	
 	portTickType xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount(); //Retrieve the startup tick timer
   80f0e:	4b27      	ldr	r3, [pc, #156]	; (80fac <start_communication+0xa4>)
   80f10:	4798      	blx	r3
   80f12:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
	
	/* Simple infinite loop, printing text with a given delay */
 	while(1)	
	 {
		
		xSemaphoreTake(semahpore_duty_cycles,portMAX_DELAY); // Take semaphore
   80f16:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80fe8 <start_communication+0xe0>
   80f1a:	4e25      	ldr	r6, [pc, #148]	; (80fb0 <start_communication+0xa8>)
   80f1c:	f8d9 0000 	ldr.w	r0, [r9]
   80f20:	2100      	movs	r1, #0
   80f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80f26:	460b      	mov	r3, r1
   80f28:	47b0      	blx	r6
		/* Store the duty cycle values temporarily in this method */
		int duty_cycle_36_temp;
		duty_cycle_36_temp = duty_cycle_36;
   80f2a:	4b22      	ldr	r3, [pc, #136]	; (80fb4 <start_communication+0xac>)
   80f2c:	f8d3 a000 	ldr.w	sl, [r3]
		int duty_cycle_38_temp;
		duty_cycle_38_temp = duty_cycle_38;
   80f30:	4b21      	ldr	r3, [pc, #132]	; (80fb8 <start_communication+0xb0>)
   80f32:	f8d3 8000 	ldr.w	r8, [r3]
		int duty_cycle_40_temp;
		duty_cycle_40_temp = duty_cycle_40;
   80f36:	4b21      	ldr	r3, [pc, #132]	; (80fbc <start_communication+0xb4>)
   80f38:	681f      	ldr	r7, [r3, #0]
		int duty_cycle_9_temp;
		duty_cycle_9_temp = duty_cycle_9;
   80f3a:	4b21      	ldr	r3, [pc, #132]	; (80fc0 <start_communication+0xb8>)
   80f3c:	f8d3 b000 	ldr.w	fp, [r3]
		int duty_cycle_DAC1_temp;
		duty_cycle_DAC1_temp = duty_cycle_DAC1;
		
		xSemaphoreGive(semahpore_duty_cycles); // Give back the semaphore
   80f40:	f8d9 0000 	ldr.w	r0, [r9]
   80f44:	2100      	movs	r1, #0
   80f46:	460a      	mov	r2, r1
   80f48:	460b      	mov	r3, r1
   80f4a:	4c1e      	ldr	r4, [pc, #120]	; (80fc4 <start_communication+0xbc>)
   80f4c:	47a0      	blx	r4
		
		xSemaphoreTake(semaphore_adc_values,portMAX_DELAY); // Take semaphore
   80f4e:	4d1e      	ldr	r5, [pc, #120]	; (80fc8 <start_communication+0xc0>)
   80f50:	6828      	ldr	r0, [r5, #0]
   80f52:	2100      	movs	r1, #0
   80f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80f58:	460b      	mov	r3, r1
   80f5a:	47b0      	blx	r6
		/* Store the adc values temporarily in this file */
		int adc_value_back_left_temp;
		adc_value_back_left_temp = adc_value_back_left;
   80f5c:	4b1b      	ldr	r3, [pc, #108]	; (80fcc <start_communication+0xc4>)
   80f5e:	681b      	ldr	r3, [r3, #0]
   80f60:	9306      	str	r3, [sp, #24]
		int adc_value_back_right_temp = adc_value_back_right;
		adc_value_back_right_temp = adc_value_back_right;
   80f62:	4b1b      	ldr	r3, [pc, #108]	; (80fd0 <start_communication+0xc8>)
   80f64:	681b      	ldr	r3, [r3, #0]
   80f66:	9307      	str	r3, [sp, #28]
		int adc_value_front_left_temp = adc_value_front_left;
		adc_value_front_left_temp = adc_value_front_left;
   80f68:	4b1a      	ldr	r3, [pc, #104]	; (80fd4 <start_communication+0xcc>)
   80f6a:	681b      	ldr	r3, [r3, #0]
   80f6c:	9308      	str	r3, [sp, #32]
		int adc_value_front_right_temp = adc_value_front_right;
		adc_value_front_right_temp = adc_value_front_right;
   80f6e:	4b1a      	ldr	r3, [pc, #104]	; (80fd8 <start_communication+0xd0>)
   80f70:	681b      	ldr	r3, [r3, #0]
   80f72:	9309      	str	r3, [sp, #36]	; 0x24
		
		xSemaphoreGive(semaphore_adc_values); // Give back the semaphore
   80f74:	6828      	ldr	r0, [r5, #0]
   80f76:	2100      	movs	r1, #0
   80f78:	460a      	mov	r2, r1
   80f7a:	460b      	mov	r3, r1
   80f7c:	47a0      	blx	r4
		
		/* Send information to bluetooth device*/
		printf("%d,%d,%d,%d,%d,%d,%d,%d",duty_cycle_36_temp,duty_cycle_38_temp,duty_cycle_40_temp,duty_cycle_9_temp,
   80f7e:	f8cd b000 	str.w	fp, [sp]
   80f82:	9b06      	ldr	r3, [sp, #24]
   80f84:	9301      	str	r3, [sp, #4]
   80f86:	9b07      	ldr	r3, [sp, #28]
   80f88:	9302      	str	r3, [sp, #8]
   80f8a:	9b08      	ldr	r3, [sp, #32]
   80f8c:	9303      	str	r3, [sp, #12]
   80f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   80f90:	9304      	str	r3, [sp, #16]
   80f92:	4812      	ldr	r0, [pc, #72]	; (80fdc <start_communication+0xd4>)
   80f94:	4651      	mov	r1, sl
   80f96:	4642      	mov	r2, r8
   80f98:	463b      	mov	r3, r7
   80f9a:	4c11      	ldr	r4, [pc, #68]	; (80fe0 <start_communication+0xd8>)
   80f9c:	47a0      	blx	r4
										adc_value_back_left_temp,adc_value_back_right_temp,adc_value_front_left_temp,
										adc_value_front_right_temp);
		vTaskDelayUntil(&xLastWakeTime,COMMUNICATION_SCHEDULE_TIME); 	
   80f9e:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   80fa2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   80fa6:	4b0f      	ldr	r3, [pc, #60]	; (80fe4 <start_communication+0xdc>)
   80fa8:	4798      	blx	r3
   80faa:	e7b7      	b.n	80f1c <start_communication+0x14>
   80fac:	00081b79 	.word	0x00081b79
   80fb0:	000816e9 	.word	0x000816e9
   80fb4:	20070edc 	.word	0x20070edc
   80fb8:	20070dd8 	.word	0x20070dd8
   80fbc:	20070ed8 	.word	0x20070ed8
   80fc0:	20070eac 	.word	0x20070eac
   80fc4:	00081535 	.word	0x00081535
   80fc8:	20070dd0 	.word	0x20070dd0
   80fcc:	20070db4 	.word	0x20070db4
   80fd0:	20070db0 	.word	0x20070db0
   80fd4:	20070dbc 	.word	0x20070dbc
   80fd8:	20070dac 	.word	0x20070dac
   80fdc:	0008606c 	.word	0x0008606c
   80fe0:	000837c1 	.word	0x000837c1
   80fe4:	00081dd1 	.word	0x00081dd1
   80fe8:	20070dd4 	.word	0x20070dd4

00080fec <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   80fec:	f100 0308 	add.w	r3, r0, #8
   80ff0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80ff6:	8102      	strh	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   80ff8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   80ffa:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   80ffc:	2300      	movs	r3, #0
   80ffe:	6003      	str	r3, [r0, #0]
   81000:	4770      	bx	lr
   81002:	bf00      	nop

00081004 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   81004:	2300      	movs	r3, #0
   81006:	6103      	str	r3, [r0, #16]
   81008:	4770      	bx	lr
   8100a:	bf00      	nop

0008100c <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   8100c:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   8100e:	685a      	ldr	r2, [r3, #4]
   81010:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   81012:	6842      	ldr	r2, [r0, #4]
   81014:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   81016:	685a      	ldr	r2, [r3, #4]
   81018:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8101a:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   8101c:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8101e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81020:	6803      	ldr	r3, [r0, #0]
   81022:	3301      	adds	r3, #1
   81024:	6003      	str	r3, [r0, #0]
   81026:	4770      	bx	lr

00081028 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   81028:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   8102a:	880c      	ldrh	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   8102c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81030:	429c      	cmp	r4, r3
   81032:	d101      	bne.n	81038 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   81034:	6903      	ldr	r3, [r0, #16]
   81036:	e00c      	b.n	81052 <vListInsert+0x2a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   81038:	f100 0308 	add.w	r3, r0, #8
   8103c:	68c2      	ldr	r2, [r0, #12]
   8103e:	8812      	ldrh	r2, [r2, #0]
   81040:	b292      	uxth	r2, r2
   81042:	4294      	cmp	r4, r2
   81044:	d305      	bcc.n	81052 <vListInsert+0x2a>
   81046:	685b      	ldr	r3, [r3, #4]
   81048:	685a      	ldr	r2, [r3, #4]
   8104a:	8812      	ldrh	r2, [r2, #0]
   8104c:	b292      	uxth	r2, r2
   8104e:	4294      	cmp	r4, r2
   81050:	d2f9      	bcs.n	81046 <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   81052:	685a      	ldr	r2, [r3, #4]
   81054:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   81056:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   81058:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   8105a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8105c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   8105e:	6803      	ldr	r3, [r0, #0]
   81060:	3301      	adds	r3, #1
   81062:	6003      	str	r3, [r0, #0]
}
   81064:	f85d 4b04 	ldr.w	r4, [sp], #4
   81068:	4770      	bx	lr
   8106a:	bf00      	nop

0008106c <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   8106c:	6843      	ldr	r3, [r0, #4]
   8106e:	6882      	ldr	r2, [r0, #8]
   81070:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   81072:	6883      	ldr	r3, [r0, #8]
   81074:	6842      	ldr	r2, [r0, #4]
   81076:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   81078:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8107a:	685a      	ldr	r2, [r3, #4]
   8107c:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   8107e:	bf04      	itt	eq
   81080:	6882      	ldreq	r2, [r0, #8]
   81082:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   81084:	2200      	movs	r2, #0
   81086:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   81088:	681a      	ldr	r2, [r3, #0]
   8108a:	3a01      	subs	r2, #1
   8108c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   8108e:	6818      	ldr	r0, [r3, #0]
}
   81090:	4770      	bx	lr
   81092:	bf00      	nop

00081094 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   81094:	4803      	ldr	r0, [pc, #12]	; (810a4 <prvPortStartFirstTask+0x10>)
   81096:	6800      	ldr	r0, [r0, #0]
   81098:	6800      	ldr	r0, [r0, #0]
   8109a:	f380 8808 	msr	MSP, r0
   8109e:	b662      	cpsie	i
   810a0:	df00      	svc	0
   810a2:	bf00      	nop
   810a4:	e000ed08 	.word	0xe000ed08

000810a8 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   810a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   810ac:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   810b0:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   810b4:	2300      	movs	r3, #0
   810b6:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   810ba:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   810be:	3840      	subs	r0, #64	; 0x40
   810c0:	4770      	bx	lr
   810c2:	bf00      	nop

000810c4 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   810c4:	4b06      	ldr	r3, [pc, #24]	; (810e0 <pxCurrentTCBConst2>)
   810c6:	6819      	ldr	r1, [r3, #0]
   810c8:	6808      	ldr	r0, [r1, #0]
   810ca:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   810ce:	f380 8809 	msr	PSP, r0
   810d2:	f04f 0000 	mov.w	r0, #0
   810d6:	f380 8811 	msr	BASEPRI, r0
   810da:	f04e 0e0d 	orr.w	lr, lr, #13
   810de:	4770      	bx	lr

000810e0 <pxCurrentTCBConst2>:
   810e0:	20079008 	.word	0x20079008

000810e4 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   810e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   810e8:	4b01      	ldr	r3, [pc, #4]	; (810f0 <vPortYieldFromISR+0xc>)
   810ea:	601a      	str	r2, [r3, #0]
   810ec:	4770      	bx	lr
   810ee:	bf00      	nop
   810f0:	e000ed04 	.word	0xe000ed04

000810f4 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   810f4:	f3ef 8011 	mrs	r0, BASEPRI
   810f8:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   810fc:	f381 8811 	msr	BASEPRI, r1
   81100:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   81102:	2000      	movs	r0, #0

00081104 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   81104:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   81106:	4b03      	ldr	r3, [pc, #12]	; (81114 <vPortEnterCritical+0x10>)
   81108:	4798      	blx	r3
	uxCriticalNesting++;
   8110a:	4b03      	ldr	r3, [pc, #12]	; (81118 <vPortEnterCritical+0x14>)
   8110c:	681a      	ldr	r2, [r3, #0]
   8110e:	3201      	adds	r2, #1
   81110:	601a      	str	r2, [r3, #0]
   81112:	bd08      	pop	{r3, pc}
   81114:	000810f5 	.word	0x000810f5
   81118:	200704bc 	.word	0x200704bc

0008111c <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   8111c:	f380 8811 	msr	BASEPRI, r0
   81120:	4770      	bx	lr
   81122:	bf00      	nop

00081124 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   81124:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   81126:	4a04      	ldr	r2, [pc, #16]	; (81138 <vPortExitCritical+0x14>)
   81128:	6813      	ldr	r3, [r2, #0]
   8112a:	3b01      	subs	r3, #1
   8112c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   8112e:	b913      	cbnz	r3, 81136 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   81130:	2000      	movs	r0, #0
   81132:	4b02      	ldr	r3, [pc, #8]	; (8113c <vPortExitCritical+0x18>)
   81134:	4798      	blx	r3
   81136:	bd08      	pop	{r3, pc}
   81138:	200704bc 	.word	0x200704bc
   8113c:	0008111d 	.word	0x0008111d

00081140 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   81140:	f3ef 8009 	mrs	r0, PSP
   81144:	4b0c      	ldr	r3, [pc, #48]	; (81178 <pxCurrentTCBConst>)
   81146:	681a      	ldr	r2, [r3, #0]
   81148:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8114c:	6010      	str	r0, [r2, #0]
   8114e:	e92d 4008 	stmdb	sp!, {r3, lr}
   81152:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   81156:	f380 8811 	msr	BASEPRI, r0
   8115a:	f000 fec7 	bl	81eec <vTaskSwitchContext>
   8115e:	f04f 0000 	mov.w	r0, #0
   81162:	f380 8811 	msr	BASEPRI, r0
   81166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8116a:	6819      	ldr	r1, [r3, #0]
   8116c:	6808      	ldr	r0, [r1, #0]
   8116e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81172:	f380 8809 	msr	PSP, r0
   81176:	4770      	bx	lr

00081178 <pxCurrentTCBConst>:
   81178:	20079008 	.word	0x20079008

0008117c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   8117c:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8117e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81182:	4b05      	ldr	r3, [pc, #20]	; (81198 <SysTick_Handler+0x1c>)
   81184:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   81186:	4b05      	ldr	r3, [pc, #20]	; (8119c <SysTick_Handler+0x20>)
   81188:	4798      	blx	r3
	{
		vTaskIncrementTick();
   8118a:	4b05      	ldr	r3, [pc, #20]	; (811a0 <SysTick_Handler+0x24>)
   8118c:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8118e:	2000      	movs	r0, #0
   81190:	4b04      	ldr	r3, [pc, #16]	; (811a4 <SysTick_Handler+0x28>)
   81192:	4798      	blx	r3
   81194:	bd08      	pop	{r3, pc}
   81196:	bf00      	nop
   81198:	e000ed04 	.word	0xe000ed04
   8119c:	000810f5 	.word	0x000810f5
   811a0:	00081b99 	.word	0x00081b99
   811a4:	0008111d 	.word	0x0008111d

000811a8 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   811a8:	4a03      	ldr	r2, [pc, #12]	; (811b8 <vPortSetupTimerInterrupt+0x10>)
   811aa:	4b04      	ldr	r3, [pc, #16]	; (811bc <vPortSetupTimerInterrupt+0x14>)
   811ac:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   811ae:	2207      	movs	r2, #7
   811b0:	3b04      	subs	r3, #4
   811b2:	601a      	str	r2, [r3, #0]
   811b4:	4770      	bx	lr
   811b6:	bf00      	nop
   811b8:	0001481f 	.word	0x0001481f
   811bc:	e000e014 	.word	0xe000e014

000811c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   811c0:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   811c2:	4b09      	ldr	r3, [pc, #36]	; (811e8 <xPortStartScheduler+0x28>)
   811c4:	681a      	ldr	r2, [r3, #0]
   811c6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   811ca:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   811cc:	681a      	ldr	r2, [r3, #0]
   811ce:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   811d2:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   811d4:	4b05      	ldr	r3, [pc, #20]	; (811ec <xPortStartScheduler+0x2c>)
   811d6:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   811d8:	2400      	movs	r4, #0
   811da:	4b05      	ldr	r3, [pc, #20]	; (811f0 <xPortStartScheduler+0x30>)
   811dc:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   811de:	4b05      	ldr	r3, [pc, #20]	; (811f4 <xPortStartScheduler+0x34>)
   811e0:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   811e2:	4620      	mov	r0, r4
   811e4:	bd10      	pop	{r4, pc}
   811e6:	bf00      	nop
   811e8:	e000ed20 	.word	0xe000ed20
   811ec:	000811a9 	.word	0x000811a9
   811f0:	200704bc 	.word	0x200704bc
   811f4:	00081095 	.word	0x00081095

000811f8 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   811f8:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   811fa:	4a13      	ldr	r2, [pc, #76]	; (81248 <prvInsertBlockIntoFreeList+0x50>)
   811fc:	6813      	ldr	r3, [r2, #0]
   811fe:	4283      	cmp	r3, r0
   81200:	d201      	bcs.n	81206 <prvInsertBlockIntoFreeList+0xe>
   81202:	461a      	mov	r2, r3
   81204:	e7fa      	b.n	811fc <prvInsertBlockIntoFreeList+0x4>
   81206:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   81208:	6854      	ldr	r4, [r2, #4]
   8120a:	1915      	adds	r5, r2, r4
   8120c:	4285      	cmp	r5, r0
   8120e:	d103      	bne.n	81218 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   81210:	6868      	ldr	r0, [r5, #4]
   81212:	4404      	add	r4, r0
   81214:	6054      	str	r4, [r2, #4]
   81216:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   81218:	6842      	ldr	r2, [r0, #4]
   8121a:	1884      	adds	r4, r0, r2
   8121c:	42a3      	cmp	r3, r4
   8121e:	d10c      	bne.n	8123a <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   81220:	4c0a      	ldr	r4, [pc, #40]	; (8124c <prvInsertBlockIntoFreeList+0x54>)
   81222:	6824      	ldr	r4, [r4, #0]
   81224:	429c      	cmp	r4, r3
   81226:	d006      	beq.n	81236 <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   81228:	685b      	ldr	r3, [r3, #4]
   8122a:	441a      	add	r2, r3
   8122c:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   8122e:	680b      	ldr	r3, [r1, #0]
   81230:	681b      	ldr	r3, [r3, #0]
   81232:	6003      	str	r3, [r0, #0]
   81234:	e002      	b.n	8123c <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   81236:	6003      	str	r3, [r0, #0]
   81238:	e000      	b.n	8123c <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   8123a:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   8123c:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   8123e:	bf18      	it	ne
   81240:	6008      	strne	r0, [r1, #0]
	}
}
   81242:	bc30      	pop	{r4, r5}
   81244:	4770      	bx	lr
   81246:	bf00      	nop
   81248:	20078ee4 	.word	0x20078ee4
   8124c:	20078ee0 	.word	0x20078ee0

00081250 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   81250:	b538      	push	{r3, r4, r5, lr}
   81252:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   81254:	4b28      	ldr	r3, [pc, #160]	; (812f8 <pvPortMalloc+0xa8>)
   81256:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   81258:	4b28      	ldr	r3, [pc, #160]	; (812fc <pvPortMalloc+0xac>)
   8125a:	681b      	ldr	r3, [r3, #0]
   8125c:	b99b      	cbnz	r3, 81286 <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   8125e:	4a28      	ldr	r2, [pc, #160]	; (81300 <pvPortMalloc+0xb0>)
   81260:	4b28      	ldr	r3, [pc, #160]	; (81304 <pvPortMalloc+0xb4>)
   81262:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   81264:	2100      	movs	r1, #0
   81266:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   81268:	f647 72f0 	movw	r2, #32752	; 0x7ff0
   8126c:	1898      	adds	r0, r3, r2
   8126e:	4d23      	ldr	r5, [pc, #140]	; (812fc <pvPortMalloc+0xac>)
   81270:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   81272:	f647 75f4 	movw	r5, #32756	; 0x7ff4
   81276:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   81278:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   8127a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   8127c:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   8127e:	4b22      	ldr	r3, [pc, #136]	; (81308 <pvPortMalloc+0xb8>)
   81280:	681a      	ldr	r2, [r3, #0]
   81282:	3a10      	subs	r2, #16
   81284:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   81286:	2c00      	cmp	r4, #0
   81288:	d02d      	beq.n	812e6 <pvPortMalloc+0x96>
		{
			xWantedSize += heapSTRUCT_SIZE;
   8128a:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   8128e:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   81292:	bf1c      	itt	ne
   81294:	f022 0207 	bicne.w	r2, r2, #7
   81298:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   8129a:	1e51      	subs	r1, r2, #1
   8129c:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   812a0:	4299      	cmp	r1, r3
   812a2:	d822      	bhi.n	812ea <pvPortMalloc+0x9a>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   812a4:	4916      	ldr	r1, [pc, #88]	; (81300 <pvPortMalloc+0xb0>)
   812a6:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   812a8:	6863      	ldr	r3, [r4, #4]
   812aa:	429a      	cmp	r2, r3
   812ac:	d904      	bls.n	812b8 <pvPortMalloc+0x68>
   812ae:	6823      	ldr	r3, [r4, #0]
   812b0:	b113      	cbz	r3, 812b8 <pvPortMalloc+0x68>
   812b2:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   812b4:	461c      	mov	r4, r3
   812b6:	e7f7      	b.n	812a8 <pvPortMalloc+0x58>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   812b8:	4b10      	ldr	r3, [pc, #64]	; (812fc <pvPortMalloc+0xac>)
   812ba:	681b      	ldr	r3, [r3, #0]
   812bc:	429c      	cmp	r4, r3
   812be:	d016      	beq.n	812ee <pvPortMalloc+0x9e>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   812c0:	680d      	ldr	r5, [r1, #0]
   812c2:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   812c4:	6823      	ldr	r3, [r4, #0]
   812c6:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   812c8:	6863      	ldr	r3, [r4, #4]
   812ca:	1a9b      	subs	r3, r3, r2
   812cc:	2b20      	cmp	r3, #32
   812ce:	d904      	bls.n	812da <pvPortMalloc+0x8a>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   812d0:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   812d2:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   812d4:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   812d6:	4b0d      	ldr	r3, [pc, #52]	; (8130c <pvPortMalloc+0xbc>)
   812d8:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   812da:	4b0b      	ldr	r3, [pc, #44]	; (81308 <pvPortMalloc+0xb8>)
   812dc:	681a      	ldr	r2, [r3, #0]
   812de:	6861      	ldr	r1, [r4, #4]
   812e0:	1a52      	subs	r2, r2, r1
   812e2:	601a      	str	r2, [r3, #0]
   812e4:	e004      	b.n	812f0 <pvPortMalloc+0xa0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   812e6:	2500      	movs	r5, #0
   812e8:	e002      	b.n	812f0 <pvPortMalloc+0xa0>
   812ea:	2500      	movs	r5, #0
   812ec:	e000      	b.n	812f0 <pvPortMalloc+0xa0>
   812ee:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   812f0:	4b07      	ldr	r3, [pc, #28]	; (81310 <pvPortMalloc+0xc0>)
   812f2:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   812f4:	4628      	mov	r0, r5
   812f6:	bd38      	pop	{r3, r4, r5, pc}
   812f8:	00081b69 	.word	0x00081b69
   812fc:	20078ee0 	.word	0x20078ee0
   81300:	20078ee4 	.word	0x20078ee4
   81304:	20070ee0 	.word	0x20070ee0
   81308:	200704c0 	.word	0x200704c0
   8130c:	000811f9 	.word	0x000811f9
   81310:	00081cc9 	.word	0x00081cc9

00081314 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   81314:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   81316:	4604      	mov	r4, r0
   81318:	b168      	cbz	r0, 81336 <vPortFree+0x22>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   8131a:	4b07      	ldr	r3, [pc, #28]	; (81338 <vPortFree+0x24>)
   8131c:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   8131e:	4b07      	ldr	r3, [pc, #28]	; (8133c <vPortFree+0x28>)
   81320:	6819      	ldr	r1, [r3, #0]
   81322:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   81326:	440a      	add	r2, r1
   81328:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   8132a:	f1a4 0010 	sub.w	r0, r4, #16
   8132e:	4b04      	ldr	r3, [pc, #16]	; (81340 <vPortFree+0x2c>)
   81330:	4798      	blx	r3
		}
		xTaskResumeAll();
   81332:	4b04      	ldr	r3, [pc, #16]	; (81344 <vPortFree+0x30>)
   81334:	4798      	blx	r3
   81336:	bd10      	pop	{r4, pc}
   81338:	00081b69 	.word	0x00081b69
   8133c:	200704c0 	.word	0x200704c0
   81340:	000811f9 	.word	0x000811f9
   81344:	00081cc9 	.word	0x00081cc9

00081348 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   81348:	b510      	push	{r4, lr}
   8134a:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   8134c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8134e:	b93b      	cbnz	r3, 81360 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81350:	6803      	ldr	r3, [r0, #0]
   81352:	bb1b      	cbnz	r3, 8139c <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   81354:	6840      	ldr	r0, [r0, #4]
   81356:	4b13      	ldr	r3, [pc, #76]	; (813a4 <prvCopyDataToQueue+0x5c>)
   81358:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   8135a:	2300      	movs	r3, #0
   8135c:	6063      	str	r3, [r4, #4]
   8135e:	e01d      	b.n	8139c <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   81360:	b96a      	cbnz	r2, 8137e <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   81362:	6880      	ldr	r0, [r0, #8]
   81364:	461a      	mov	r2, r3
   81366:	4b10      	ldr	r3, [pc, #64]	; (813a8 <prvCopyDataToQueue+0x60>)
   81368:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   8136a:	68a2      	ldr	r2, [r4, #8]
   8136c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   8136e:	4413      	add	r3, r2
   81370:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   81372:	6862      	ldr	r2, [r4, #4]
   81374:	4293      	cmp	r3, r2
   81376:	d311      	bcc.n	8139c <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   81378:	6823      	ldr	r3, [r4, #0]
   8137a:	60a3      	str	r3, [r4, #8]
   8137c:	e00e      	b.n	8139c <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   8137e:	68c0      	ldr	r0, [r0, #12]
   81380:	461a      	mov	r2, r3
   81382:	4b09      	ldr	r3, [pc, #36]	; (813a8 <prvCopyDataToQueue+0x60>)
   81384:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   81386:	6c22      	ldr	r2, [r4, #64]	; 0x40
   81388:	4252      	negs	r2, r2
   8138a:	68e3      	ldr	r3, [r4, #12]
   8138c:	4413      	add	r3, r2
   8138e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   81390:	6821      	ldr	r1, [r4, #0]
   81392:	428b      	cmp	r3, r1
   81394:	d202      	bcs.n	8139c <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   81396:	6863      	ldr	r3, [r4, #4]
   81398:	441a      	add	r2, r3
   8139a:	60e2      	str	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   8139c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8139e:	3301      	adds	r3, #1
   813a0:	63a3      	str	r3, [r4, #56]	; 0x38
   813a2:	bd10      	pop	{r4, pc}
   813a4:	00082219 	.word	0x00082219
   813a8:	00083801 	.word	0x00083801

000813ac <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   813ac:	b538      	push	{r3, r4, r5, lr}
   813ae:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   813b0:	6805      	ldr	r5, [r0, #0]
   813b2:	b15d      	cbz	r5, 813cc <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   813b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
   813b6:	68c4      	ldr	r4, [r0, #12]
   813b8:	4414      	add	r4, r2
   813ba:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   813bc:	6840      	ldr	r0, [r0, #4]
   813be:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   813c0:	bf28      	it	cs
   813c2:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   813c4:	4608      	mov	r0, r1
   813c6:	68d9      	ldr	r1, [r3, #12]
   813c8:	4b01      	ldr	r3, [pc, #4]	; (813d0 <prvCopyDataFromQueue+0x24>)
   813ca:	4798      	blx	r3
   813cc:	bd38      	pop	{r3, r4, r5, pc}
   813ce:	bf00      	nop
   813d0:	00083801 	.word	0x00083801

000813d4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   813d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   813d6:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   813d8:	4b1d      	ldr	r3, [pc, #116]	; (81450 <prvUnlockQueue+0x7c>)
   813da:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   813dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   813de:	2b00      	cmp	r3, #0
   813e0:	dd12      	ble.n	81408 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   813e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   813e4:	b183      	cbz	r3, 81408 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   813e6:	f104 0624 	add.w	r6, r4, #36	; 0x24
   813ea:	4d1a      	ldr	r5, [pc, #104]	; (81454 <prvUnlockQueue+0x80>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   813ec:	4f1a      	ldr	r7, [pc, #104]	; (81458 <prvUnlockQueue+0x84>)
   813ee:	e001      	b.n	813f4 <prvUnlockQueue+0x20>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   813f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   813f2:	b14b      	cbz	r3, 81408 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   813f4:	4630      	mov	r0, r6
   813f6:	47a8      	blx	r5
   813f8:	b100      	cbz	r0, 813fc <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   813fa:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   813fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   813fe:	3b01      	subs	r3, #1
   81400:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81402:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81404:	2b00      	cmp	r3, #0
   81406:	dcf3      	bgt.n	813f0 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   81408:	f04f 33ff 	mov.w	r3, #4294967295
   8140c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   8140e:	4b13      	ldr	r3, [pc, #76]	; (8145c <prvUnlockQueue+0x88>)
   81410:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   81412:	4b0f      	ldr	r3, [pc, #60]	; (81450 <prvUnlockQueue+0x7c>)
   81414:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81416:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81418:	2b00      	cmp	r3, #0
   8141a:	dd12      	ble.n	81442 <prvUnlockQueue+0x6e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8141c:	6923      	ldr	r3, [r4, #16]
   8141e:	b183      	cbz	r3, 81442 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81420:	f104 0610 	add.w	r6, r4, #16
   81424:	4d0b      	ldr	r5, [pc, #44]	; (81454 <prvUnlockQueue+0x80>)
				{
					vTaskMissedYield();
   81426:	4f0c      	ldr	r7, [pc, #48]	; (81458 <prvUnlockQueue+0x84>)
   81428:	e001      	b.n	8142e <prvUnlockQueue+0x5a>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8142a:	6923      	ldr	r3, [r4, #16]
   8142c:	b14b      	cbz	r3, 81442 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8142e:	4630      	mov	r0, r6
   81430:	47a8      	blx	r5
   81432:	b100      	cbz	r0, 81436 <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
   81434:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   81436:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81438:	3b01      	subs	r3, #1
   8143a:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   8143c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8143e:	2b00      	cmp	r3, #0
   81440:	dcf3      	bgt.n	8142a <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   81442:	f04f 33ff 	mov.w	r3, #4294967295
   81446:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   81448:	4b04      	ldr	r3, [pc, #16]	; (8145c <prvUnlockQueue+0x88>)
   8144a:	4798      	blx	r3
   8144c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8144e:	bf00      	nop
   81450:	00081105 	.word	0x00081105
   81454:	00082029 	.word	0x00082029
   81458:	00082165 	.word	0x00082165
   8145c:	00081125 	.word	0x00081125

00081460 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   81460:	b538      	push	{r3, r4, r5, lr}
   81462:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   81464:	4604      	mov	r4, r0
   81466:	b918      	cbnz	r0, 81470 <xQueueGenericReset+0x10>
   81468:	4b16      	ldr	r3, [pc, #88]	; (814c4 <xQueueGenericReset+0x64>)
   8146a:	4798      	blx	r3
   8146c:	bf00      	nop
   8146e:	e7fd      	b.n	8146c <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
   81470:	4b15      	ldr	r3, [pc, #84]	; (814c8 <xQueueGenericReset+0x68>)
   81472:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   81474:	6823      	ldr	r3, [r4, #0]
   81476:	6c22      	ldr	r2, [r4, #64]	; 0x40
   81478:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   8147a:	fb00 f002 	mul.w	r0, r0, r2
   8147e:	1819      	adds	r1, r3, r0
   81480:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   81482:	2100      	movs	r1, #0
   81484:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   81486:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   81488:	1a82      	subs	r2, r0, r2
   8148a:	4413      	add	r3, r2
   8148c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   8148e:	f04f 33ff 	mov.w	r3, #4294967295
   81492:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   81494:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   81496:	b955      	cbnz	r5, 814ae <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81498:	6923      	ldr	r3, [r4, #16]
   8149a:	b17b      	cbz	r3, 814bc <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   8149c:	f104 0010 	add.w	r0, r4, #16
   814a0:	4b0a      	ldr	r3, [pc, #40]	; (814cc <xQueueGenericReset+0x6c>)
   814a2:	4798      	blx	r3
   814a4:	2801      	cmp	r0, #1
   814a6:	d109      	bne.n	814bc <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   814a8:	4b09      	ldr	r3, [pc, #36]	; (814d0 <xQueueGenericReset+0x70>)
   814aa:	4798      	blx	r3
   814ac:	e006      	b.n	814bc <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   814ae:	f104 0010 	add.w	r0, r4, #16
   814b2:	4d08      	ldr	r5, [pc, #32]	; (814d4 <xQueueGenericReset+0x74>)
   814b4:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   814b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   814ba:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   814bc:	4b06      	ldr	r3, [pc, #24]	; (814d8 <xQueueGenericReset+0x78>)
   814be:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   814c0:	2001      	movs	r0, #1
   814c2:	bd38      	pop	{r3, r4, r5, pc}
   814c4:	000810f5 	.word	0x000810f5
   814c8:	00081105 	.word	0x00081105
   814cc:	00082029 	.word	0x00082029
   814d0:	000810e5 	.word	0x000810e5
   814d4:	00080fed 	.word	0x00080fed
   814d8:	00081125 	.word	0x00081125

000814dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   814dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   814de:	460d      	mov	r5, r1
   814e0:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   814e2:	4606      	mov	r6, r0
   814e4:	b188      	cbz	r0, 8150a <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   814e6:	2050      	movs	r0, #80	; 0x50
   814e8:	4b0e      	ldr	r3, [pc, #56]	; (81524 <xQueueGenericCreate+0x48>)
   814ea:	4798      	blx	r3
		if( pxNewQueue != NULL )
   814ec:	4604      	mov	r4, r0
   814ee:	b160      	cbz	r0, 8150a <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   814f0:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   814f4:	3001      	adds	r0, #1
   814f6:	4b0b      	ldr	r3, [pc, #44]	; (81524 <xQueueGenericCreate+0x48>)
   814f8:	4798      	blx	r3
   814fa:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   814fc:	b940      	cbnz	r0, 81510 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   814fe:	4620      	mov	r0, r4
   81500:	4b09      	ldr	r3, [pc, #36]	; (81528 <xQueueGenericCreate+0x4c>)
   81502:	4798      	blx	r3
   81504:	e001      	b.n	8150a <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   81506:	bf00      	nop
   81508:	e7fd      	b.n	81506 <xQueueGenericCreate+0x2a>
   8150a:	4b08      	ldr	r3, [pc, #32]	; (8152c <xQueueGenericCreate+0x50>)
   8150c:	4798      	blx	r3
   8150e:	e7fa      	b.n	81506 <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   81510:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   81512:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   81514:	4620      	mov	r0, r4
   81516:	2101      	movs	r1, #1
   81518:	4b05      	ldr	r3, [pc, #20]	; (81530 <xQueueGenericCreate+0x54>)
   8151a:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   8151c:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   81520:	4620      	mov	r0, r4
   81522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81524:	00081251 	.word	0x00081251
   81528:	00081315 	.word	0x00081315
   8152c:	000810f5 	.word	0x000810f5
   81530:	00081461 	.word	0x00081461

00081534 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81538:	b085      	sub	sp, #20
   8153a:	468a      	mov	sl, r1
   8153c:	469b      	mov	fp, r3
   8153e:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   81542:	4604      	mov	r4, r0
   81544:	b918      	cbnz	r0, 8154e <xQueueGenericSend+0x1a>
   81546:	4b38      	ldr	r3, [pc, #224]	; (81628 <xQueueGenericSend+0xf4>)
   81548:	4798      	blx	r3
   8154a:	bf00      	nop
   8154c:	e7fd      	b.n	8154a <xQueueGenericSend+0x16>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8154e:	b909      	cbnz	r1, 81554 <xQueueGenericSend+0x20>
   81550:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81552:	b91b      	cbnz	r3, 8155c <xQueueGenericSend+0x28>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81554:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81556:	4e35      	ldr	r6, [pc, #212]	; (8162c <xQueueGenericSend+0xf8>)
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81558:	4d35      	ldr	r5, [pc, #212]	; (81630 <xQueueGenericSend+0xfc>)
   8155a:	e003      	b.n	81564 <xQueueGenericSend+0x30>
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8155c:	4b32      	ldr	r3, [pc, #200]	; (81628 <xQueueGenericSend+0xf4>)
   8155e:	4798      	blx	r3
   81560:	bf00      	nop
   81562:	e7fd      	b.n	81560 <xQueueGenericSend+0x2c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81564:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81566:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81568:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8156a:	429a      	cmp	r2, r3
   8156c:	d212      	bcs.n	81594 <xQueueGenericSend+0x60>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   8156e:	4620      	mov	r0, r4
   81570:	4651      	mov	r1, sl
   81572:	465a      	mov	r2, fp
   81574:	4b2f      	ldr	r3, [pc, #188]	; (81634 <xQueueGenericSend+0x100>)
   81576:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81578:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8157a:	b13b      	cbz	r3, 8158c <xQueueGenericSend+0x58>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   8157c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81580:	4b2d      	ldr	r3, [pc, #180]	; (81638 <xQueueGenericSend+0x104>)
   81582:	4798      	blx	r3
   81584:	2801      	cmp	r0, #1
   81586:	d101      	bne.n	8158c <xQueueGenericSend+0x58>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   81588:	4b2c      	ldr	r3, [pc, #176]	; (8163c <xQueueGenericSend+0x108>)
   8158a:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   8158c:	4b28      	ldr	r3, [pc, #160]	; (81630 <xQueueGenericSend+0xfc>)
   8158e:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   81590:	2001      	movs	r0, #1
   81592:	e046      	b.n	81622 <xQueueGenericSend+0xee>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81594:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   81598:	b91b      	cbnz	r3, 815a2 <xQueueGenericSend+0x6e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   8159a:	4b25      	ldr	r3, [pc, #148]	; (81630 <xQueueGenericSend+0xfc>)
   8159c:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   8159e:	2000      	movs	r0, #0
   815a0:	e03f      	b.n	81622 <xQueueGenericSend+0xee>
				}
				else if( xEntryTimeSet == pdFALSE )
   815a2:	b91f      	cbnz	r7, 815ac <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   815a4:	a802      	add	r0, sp, #8
   815a6:	4b26      	ldr	r3, [pc, #152]	; (81640 <xQueueGenericSend+0x10c>)
   815a8:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   815aa:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   815ac:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   815ae:	4b25      	ldr	r3, [pc, #148]	; (81644 <xQueueGenericSend+0x110>)
   815b0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   815b2:	47b0      	blx	r6
   815b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   815b6:	f1b3 3fff 	cmp.w	r3, #4294967295
   815ba:	bf04      	itt	eq
   815bc:	2300      	moveq	r3, #0
   815be:	6463      	streq	r3, [r4, #68]	; 0x44
   815c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   815c2:	f1b3 3fff 	cmp.w	r3, #4294967295
   815c6:	bf04      	itt	eq
   815c8:	2300      	moveq	r3, #0
   815ca:	64a3      	streq	r3, [r4, #72]	; 0x48
   815cc:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   815ce:	a802      	add	r0, sp, #8
   815d0:	f10d 0106 	add.w	r1, sp, #6
   815d4:	4b1c      	ldr	r3, [pc, #112]	; (81648 <xQueueGenericSend+0x114>)
   815d6:	4798      	blx	r3
   815d8:	b9e8      	cbnz	r0, 81616 <xQueueGenericSend+0xe2>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   815da:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   815dc:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   815e0:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   815e4:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   815e6:	45c1      	cmp	r9, r8
   815e8:	d10f      	bne.n	8160a <xQueueGenericSend+0xd6>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   815ea:	f104 0010 	add.w	r0, r4, #16
   815ee:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   815f2:	4b16      	ldr	r3, [pc, #88]	; (8164c <xQueueGenericSend+0x118>)
   815f4:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   815f6:	4620      	mov	r0, r4
   815f8:	4b15      	ldr	r3, [pc, #84]	; (81650 <xQueueGenericSend+0x11c>)
   815fa:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   815fc:	4b15      	ldr	r3, [pc, #84]	; (81654 <xQueueGenericSend+0x120>)
   815fe:	4798      	blx	r3
   81600:	2800      	cmp	r0, #0
   81602:	d1af      	bne.n	81564 <xQueueGenericSend+0x30>
				{
					portYIELD_WITHIN_API();
   81604:	4b0d      	ldr	r3, [pc, #52]	; (8163c <xQueueGenericSend+0x108>)
   81606:	4798      	blx	r3
   81608:	e7ac      	b.n	81564 <xQueueGenericSend+0x30>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   8160a:	4620      	mov	r0, r4
   8160c:	4b10      	ldr	r3, [pc, #64]	; (81650 <xQueueGenericSend+0x11c>)
   8160e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81610:	4b10      	ldr	r3, [pc, #64]	; (81654 <xQueueGenericSend+0x120>)
   81612:	4798      	blx	r3
   81614:	e7a6      	b.n	81564 <xQueueGenericSend+0x30>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   81616:	4620      	mov	r0, r4
   81618:	4b0d      	ldr	r3, [pc, #52]	; (81650 <xQueueGenericSend+0x11c>)
   8161a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   8161c:	4b0d      	ldr	r3, [pc, #52]	; (81654 <xQueueGenericSend+0x120>)
   8161e:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   81620:	2000      	movs	r0, #0
		}
	}
}
   81622:	b005      	add	sp, #20
   81624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81628:	000810f5 	.word	0x000810f5
   8162c:	00081105 	.word	0x00081105
   81630:	00081125 	.word	0x00081125
   81634:	00081349 	.word	0x00081349
   81638:	00082029 	.word	0x00082029
   8163c:	000810e5 	.word	0x000810e5
   81640:	000820ad 	.word	0x000820ad
   81644:	00081b69 	.word	0x00081b69
   81648:	000820d5 	.word	0x000820d5
   8164c:	00081f7d 	.word	0x00081f7d
   81650:	000813d5 	.word	0x000813d5
   81654:	00081cc9 	.word	0x00081cc9

00081658 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   81658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8165c:	460e      	mov	r6, r1
   8165e:	4615      	mov	r5, r2
   81660:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   81662:	4604      	mov	r4, r0
   81664:	b918      	cbnz	r0, 8166e <xQueueGenericSendFromISR+0x16>
   81666:	4b1c      	ldr	r3, [pc, #112]	; (816d8 <xQueueGenericSendFromISR+0x80>)
   81668:	4798      	blx	r3
   8166a:	bf00      	nop
   8166c:	e7fd      	b.n	8166a <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8166e:	b929      	cbnz	r1, 8167c <xQueueGenericSendFromISR+0x24>
   81670:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81672:	b11b      	cbz	r3, 8167c <xQueueGenericSendFromISR+0x24>
   81674:	4b18      	ldr	r3, [pc, #96]	; (816d8 <xQueueGenericSendFromISR+0x80>)
   81676:	4798      	blx	r3
   81678:	bf00      	nop
   8167a:	e7fd      	b.n	81678 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   8167c:	4b16      	ldr	r3, [pc, #88]	; (816d8 <xQueueGenericSendFromISR+0x80>)
   8167e:	4798      	blx	r3
   81680:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81682:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81684:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   81686:	429a      	cmp	r2, r3
   81688:	d218      	bcs.n	816bc <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   8168a:	4620      	mov	r0, r4
   8168c:	4631      	mov	r1, r6
   8168e:	4642      	mov	r2, r8
   81690:	4b12      	ldr	r3, [pc, #72]	; (816dc <xQueueGenericSendFromISR+0x84>)
   81692:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   81694:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81696:	f1b3 3fff 	cmp.w	r3, #4294967295
   8169a:	d10a      	bne.n	816b2 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8169c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8169e:	b17b      	cbz	r3, 816c0 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   816a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   816a4:	4b0e      	ldr	r3, [pc, #56]	; (816e0 <xQueueGenericSendFromISR+0x88>)
   816a6:	4798      	blx	r3
   816a8:	b160      	cbz	r0, 816c4 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   816aa:	b16d      	cbz	r5, 816c8 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   816ac:	2401      	movs	r4, #1
   816ae:	602c      	str	r4, [r5, #0]
   816b0:	e00b      	b.n	816ca <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   816b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   816b4:	3301      	adds	r3, #1
   816b6:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   816b8:	2401      	movs	r4, #1
   816ba:	e006      	b.n	816ca <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   816bc:	2400      	movs	r4, #0
   816be:	e004      	b.n	816ca <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   816c0:	2401      	movs	r4, #1
   816c2:	e002      	b.n	816ca <xQueueGenericSendFromISR+0x72>
   816c4:	2401      	movs	r4, #1
   816c6:	e000      	b.n	816ca <xQueueGenericSendFromISR+0x72>
   816c8:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   816ca:	4638      	mov	r0, r7
   816cc:	4b05      	ldr	r3, [pc, #20]	; (816e4 <xQueueGenericSendFromISR+0x8c>)
   816ce:	4798      	blx	r3

	return xReturn;
}
   816d0:	4620      	mov	r0, r4
   816d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   816d6:	bf00      	nop
   816d8:	000810f5 	.word	0x000810f5
   816dc:	00081349 	.word	0x00081349
   816e0:	00082029 	.word	0x00082029
   816e4:	0008111d 	.word	0x0008111d

000816e8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   816e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   816ec:	b085      	sub	sp, #20
   816ee:	4689      	mov	r9, r1
   816f0:	469a      	mov	sl, r3
   816f2:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   816f6:	4604      	mov	r4, r0
   816f8:	b918      	cbnz	r0, 81702 <xQueueGenericReceive+0x1a>
   816fa:	4b46      	ldr	r3, [pc, #280]	; (81814 <xQueueGenericReceive+0x12c>)
   816fc:	4798      	blx	r3
   816fe:	bf00      	nop
   81700:	e7fd      	b.n	816fe <xQueueGenericReceive+0x16>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81702:	b909      	cbnz	r1, 81708 <xQueueGenericReceive+0x20>
   81704:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81706:	b92b      	cbnz	r3, 81714 <xQueueGenericReceive+0x2c>
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   81708:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   8170a:	4e43      	ldr	r6, [pc, #268]	; (81818 <xQueueGenericReceive+0x130>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8170c:	f8df b138 	ldr.w	fp, [pc, #312]	; 81848 <xQueueGenericReceive+0x160>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81710:	4d42      	ldr	r5, [pc, #264]	; (8181c <xQueueGenericReceive+0x134>)
   81712:	e003      	b.n	8171c <xQueueGenericReceive+0x34>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81714:	4b3f      	ldr	r3, [pc, #252]	; (81814 <xQueueGenericReceive+0x12c>)
   81716:	4798      	blx	r3
   81718:	bf00      	nop
   8171a:	e7fd      	b.n	81718 <xQueueGenericReceive+0x30>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   8171c:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   8171e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81720:	2b00      	cmp	r3, #0
   81722:	d028      	beq.n	81776 <xQueueGenericReceive+0x8e>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   81724:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   81726:	4620      	mov	r0, r4
   81728:	4649      	mov	r1, r9
   8172a:	4b3d      	ldr	r3, [pc, #244]	; (81820 <xQueueGenericReceive+0x138>)
   8172c:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   8172e:	f1ba 0f00 	cmp.w	sl, #0
   81732:	d112      	bne.n	8175a <xQueueGenericReceive+0x72>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   81734:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81736:	3b01      	subs	r3, #1
   81738:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8173a:	6823      	ldr	r3, [r4, #0]
   8173c:	b913      	cbnz	r3, 81744 <xQueueGenericReceive+0x5c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   8173e:	4b39      	ldr	r3, [pc, #228]	; (81824 <xQueueGenericReceive+0x13c>)
   81740:	4798      	blx	r3
   81742:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81744:	6923      	ldr	r3, [r4, #16]
   81746:	b193      	cbz	r3, 8176e <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81748:	f104 0010 	add.w	r0, r4, #16
   8174c:	4b36      	ldr	r3, [pc, #216]	; (81828 <xQueueGenericReceive+0x140>)
   8174e:	4798      	blx	r3
   81750:	2801      	cmp	r0, #1
   81752:	d10c      	bne.n	8176e <xQueueGenericReceive+0x86>
						{
							portYIELD_WITHIN_API();
   81754:	4b35      	ldr	r3, [pc, #212]	; (8182c <xQueueGenericReceive+0x144>)
   81756:	4798      	blx	r3
   81758:	e009      	b.n	8176e <xQueueGenericReceive+0x86>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   8175a:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8175c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8175e:	b133      	cbz	r3, 8176e <xQueueGenericReceive+0x86>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81760:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81764:	4b30      	ldr	r3, [pc, #192]	; (81828 <xQueueGenericReceive+0x140>)
   81766:	4798      	blx	r3
   81768:	b108      	cbz	r0, 8176e <xQueueGenericReceive+0x86>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   8176a:	4b30      	ldr	r3, [pc, #192]	; (8182c <xQueueGenericReceive+0x144>)
   8176c:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   8176e:	4b2b      	ldr	r3, [pc, #172]	; (8181c <xQueueGenericReceive+0x134>)
   81770:	4798      	blx	r3
				return pdPASS;
   81772:	2001      	movs	r0, #1
   81774:	e04b      	b.n	8180e <xQueueGenericReceive+0x126>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81776:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   8177a:	b91b      	cbnz	r3, 81784 <xQueueGenericReceive+0x9c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   8177c:	4b27      	ldr	r3, [pc, #156]	; (8181c <xQueueGenericReceive+0x134>)
   8177e:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   81780:	2000      	movs	r0, #0
   81782:	e044      	b.n	8180e <xQueueGenericReceive+0x126>
				}
				else if( xEntryTimeSet == pdFALSE )
   81784:	b917      	cbnz	r7, 8178c <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81786:	a802      	add	r0, sp, #8
   81788:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   8178a:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   8178c:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   8178e:	4b28      	ldr	r3, [pc, #160]	; (81830 <xQueueGenericReceive+0x148>)
   81790:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81792:	47b0      	blx	r6
   81794:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81796:	f1b3 3fff 	cmp.w	r3, #4294967295
   8179a:	bf04      	itt	eq
   8179c:	2300      	moveq	r3, #0
   8179e:	6463      	streq	r3, [r4, #68]	; 0x44
   817a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   817a2:	f1b3 3fff 	cmp.w	r3, #4294967295
   817a6:	bf04      	itt	eq
   817a8:	2300      	moveq	r3, #0
   817aa:	64a3      	streq	r3, [r4, #72]	; 0x48
   817ac:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   817ae:	a802      	add	r0, sp, #8
   817b0:	f10d 0106 	add.w	r1, sp, #6
   817b4:	4b1f      	ldr	r3, [pc, #124]	; (81834 <xQueueGenericReceive+0x14c>)
   817b6:	4798      	blx	r3
   817b8:	bb18      	cbnz	r0, 81802 <xQueueGenericReceive+0x11a>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   817ba:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   817bc:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   817c0:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   817c2:	f1b8 0f00 	cmp.w	r8, #0
   817c6:	d116      	bne.n	817f6 <xQueueGenericReceive+0x10e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   817c8:	6823      	ldr	r3, [r4, #0]
   817ca:	b923      	cbnz	r3, 817d6 <xQueueGenericReceive+0xee>
					{
						portENTER_CRITICAL();
   817cc:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   817ce:	6860      	ldr	r0, [r4, #4]
   817d0:	4b19      	ldr	r3, [pc, #100]	; (81838 <xQueueGenericReceive+0x150>)
   817d2:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   817d4:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   817d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   817da:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   817de:	4b17      	ldr	r3, [pc, #92]	; (8183c <xQueueGenericReceive+0x154>)
   817e0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   817e2:	4620      	mov	r0, r4
   817e4:	4b16      	ldr	r3, [pc, #88]	; (81840 <xQueueGenericReceive+0x158>)
   817e6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   817e8:	4b16      	ldr	r3, [pc, #88]	; (81844 <xQueueGenericReceive+0x15c>)
   817ea:	4798      	blx	r3
   817ec:	2800      	cmp	r0, #0
   817ee:	d195      	bne.n	8171c <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
   817f0:	4b0e      	ldr	r3, [pc, #56]	; (8182c <xQueueGenericReceive+0x144>)
   817f2:	4798      	blx	r3
   817f4:	e792      	b.n	8171c <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   817f6:	4620      	mov	r0, r4
   817f8:	4b11      	ldr	r3, [pc, #68]	; (81840 <xQueueGenericReceive+0x158>)
   817fa:	4798      	blx	r3
				( void ) xTaskResumeAll();
   817fc:	4b11      	ldr	r3, [pc, #68]	; (81844 <xQueueGenericReceive+0x15c>)
   817fe:	4798      	blx	r3
   81800:	e78c      	b.n	8171c <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   81802:	4620      	mov	r0, r4
   81804:	4b0e      	ldr	r3, [pc, #56]	; (81840 <xQueueGenericReceive+0x158>)
   81806:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81808:	4b0e      	ldr	r3, [pc, #56]	; (81844 <xQueueGenericReceive+0x15c>)
   8180a:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   8180c:	2000      	movs	r0, #0
		}
	}
}
   8180e:	b005      	add	sp, #20
   81810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81814:	000810f5 	.word	0x000810f5
   81818:	00081105 	.word	0x00081105
   8181c:	00081125 	.word	0x00081125
   81820:	000813ad 	.word	0x000813ad
   81824:	00082171 	.word	0x00082171
   81828:	00082029 	.word	0x00082029
   8182c:	000810e5 	.word	0x000810e5
   81830:	00081b69 	.word	0x00081b69
   81834:	000820d5 	.word	0x000820d5
   81838:	0008219d 	.word	0x0008219d
   8183c:	00081f7d 	.word	0x00081f7d
   81840:	000813d5 	.word	0x000813d5
   81844:	00081cc9 	.word	0x00081cc9
   81848:	000820ad 	.word	0x000820ad

0008184c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   8184c:	b538      	push	{r3, r4, r5, lr}
   8184e:	4604      	mov	r4, r0
   81850:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   81852:	4b0d      	ldr	r3, [pc, #52]	; (81888 <vQueueWaitForMessageRestricted+0x3c>)
   81854:	4798      	blx	r3
   81856:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81858:	f1b3 3fff 	cmp.w	r3, #4294967295
   8185c:	bf04      	itt	eq
   8185e:	2300      	moveq	r3, #0
   81860:	6463      	streq	r3, [r4, #68]	; 0x44
   81862:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81864:	f1b3 3fff 	cmp.w	r3, #4294967295
   81868:	bf04      	itt	eq
   8186a:	2300      	moveq	r3, #0
   8186c:	64a3      	streq	r3, [r4, #72]	; 0x48
   8186e:	4b07      	ldr	r3, [pc, #28]	; (8188c <vQueueWaitForMessageRestricted+0x40>)
   81870:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   81872:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81874:	b923      	cbnz	r3, 81880 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81876:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8187a:	4629      	mov	r1, r5
   8187c:	4b04      	ldr	r3, [pc, #16]	; (81890 <vQueueWaitForMessageRestricted+0x44>)
   8187e:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   81880:	4620      	mov	r0, r4
   81882:	4b04      	ldr	r3, [pc, #16]	; (81894 <vQueueWaitForMessageRestricted+0x48>)
   81884:	4798      	blx	r3
   81886:	bd38      	pop	{r3, r4, r5, pc}
   81888:	00081105 	.word	0x00081105
   8188c:	00081125 	.word	0x00081125
   81890:	00081fe1 	.word	0x00081fe1
   81894:	000813d5 	.word	0x000813d5

00081898 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   81898:	b510      	push	{r4, lr}
   8189a:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   8189c:	4b0f      	ldr	r3, [pc, #60]	; (818dc <prvAddCurrentTaskToDelayedList+0x44>)
   8189e:	681b      	ldr	r3, [r3, #0]
   818a0:	8098      	strh	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   818a2:	4b0f      	ldr	r3, [pc, #60]	; (818e0 <prvAddCurrentTaskToDelayedList+0x48>)
   818a4:	881b      	ldrh	r3, [r3, #0]
   818a6:	b29b      	uxth	r3, r3
   818a8:	4298      	cmp	r0, r3
   818aa:	d207      	bcs.n	818bc <prvAddCurrentTaskToDelayedList+0x24>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   818ac:	4b0d      	ldr	r3, [pc, #52]	; (818e4 <prvAddCurrentTaskToDelayedList+0x4c>)
   818ae:	6818      	ldr	r0, [r3, #0]
   818b0:	4b0a      	ldr	r3, [pc, #40]	; (818dc <prvAddCurrentTaskToDelayedList+0x44>)
   818b2:	6819      	ldr	r1, [r3, #0]
   818b4:	3104      	adds	r1, #4
   818b6:	4b0c      	ldr	r3, [pc, #48]	; (818e8 <prvAddCurrentTaskToDelayedList+0x50>)
   818b8:	4798      	blx	r3
   818ba:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   818bc:	4b0b      	ldr	r3, [pc, #44]	; (818ec <prvAddCurrentTaskToDelayedList+0x54>)
   818be:	6818      	ldr	r0, [r3, #0]
   818c0:	4b06      	ldr	r3, [pc, #24]	; (818dc <prvAddCurrentTaskToDelayedList+0x44>)
   818c2:	6819      	ldr	r1, [r3, #0]
   818c4:	3104      	adds	r1, #4
   818c6:	4b08      	ldr	r3, [pc, #32]	; (818e8 <prvAddCurrentTaskToDelayedList+0x50>)
   818c8:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   818ca:	4b09      	ldr	r3, [pc, #36]	; (818f0 <prvAddCurrentTaskToDelayedList+0x58>)
   818cc:	881b      	ldrh	r3, [r3, #0]
   818ce:	b29b      	uxth	r3, r3
   818d0:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   818d2:	bf3c      	itt	cc
   818d4:	4b06      	ldrcc	r3, [pc, #24]	; (818f0 <prvAddCurrentTaskToDelayedList+0x58>)
   818d6:	801c      	strhcc	r4, [r3, #0]
   818d8:	bd10      	pop	{r4, pc}
   818da:	bf00      	nop
   818dc:	20079008 	.word	0x20079008
   818e0:	20079024 	.word	0x20079024
   818e4:	20079028 	.word	0x20079028
   818e8:	00081029 	.word	0x00081029
   818ec:	20078f04 	.word	0x20078f04
   818f0:	200704c4 	.word	0x200704c4

000818f4 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   818f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   818f8:	460e      	mov	r6, r1
   818fa:	4617      	mov	r7, r2
   818fc:	469a      	mov	sl, r3
   818fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   81900:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   81904:	4681      	mov	r9, r0
   81906:	b918      	cbnz	r0, 81910 <xTaskGenericCreate+0x1c>
   81908:	4b62      	ldr	r3, [pc, #392]	; (81a94 <xTaskGenericCreate+0x1a0>)
   8190a:	4798      	blx	r3
   8190c:	bf00      	nop
   8190e:	e7fd      	b.n	8190c <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   81910:	2d09      	cmp	r5, #9
   81912:	d903      	bls.n	8191c <xTaskGenericCreate+0x28>
   81914:	4b5f      	ldr	r3, [pc, #380]	; (81a94 <xTaskGenericCreate+0x1a0>)
   81916:	4798      	blx	r3
   81918:	bf00      	nop
   8191a:	e7fd      	b.n	81918 <xTaskGenericCreate+0x24>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   8191c:	2050      	movs	r0, #80	; 0x50
   8191e:	4b5e      	ldr	r3, [pc, #376]	; (81a98 <xTaskGenericCreate+0x1a4>)
   81920:	4798      	blx	r3

	if( pxNewTCB != NULL )
   81922:	4604      	mov	r4, r0
   81924:	2800      	cmp	r0, #0
   81926:	f000 80b1 	beq.w	81a8c <xTaskGenericCreate+0x198>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   8192a:	f1b8 0f00 	cmp.w	r8, #0
   8192e:	f040 80a9 	bne.w	81a84 <xTaskGenericCreate+0x190>
   81932:	00b8      	lsls	r0, r7, #2
   81934:	4b58      	ldr	r3, [pc, #352]	; (81a98 <xTaskGenericCreate+0x1a4>)
   81936:	4798      	blx	r3
   81938:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   8193a:	b918      	cbnz	r0, 81944 <xTaskGenericCreate+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   8193c:	4620      	mov	r0, r4
   8193e:	4b57      	ldr	r3, [pc, #348]	; (81a9c <xTaskGenericCreate+0x1a8>)
   81940:	4798      	blx	r3
   81942:	e0a3      	b.n	81a8c <xTaskGenericCreate+0x198>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   81944:	21a5      	movs	r1, #165	; 0xa5
   81946:	00ba      	lsls	r2, r7, #2
   81948:	4b55      	ldr	r3, [pc, #340]	; (81aa0 <xTaskGenericCreate+0x1ac>)
   8194a:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   8194c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   81950:	3f01      	subs	r7, #1
   81952:	6b23      	ldr	r3, [r4, #48]	; 0x30
   81954:	eb03 0387 	add.w	r3, r3, r7, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   81958:	f023 0b07 	bic.w	fp, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   8195c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   81960:	4631      	mov	r1, r6
   81962:	2210      	movs	r2, #16
   81964:	4b4f      	ldr	r3, [pc, #316]	; (81aa4 <xTaskGenericCreate+0x1b0>)
   81966:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   81968:	2300      	movs	r3, #0
   8196a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   8196e:	2d09      	cmp	r5, #9
   81970:	bf34      	ite	cc
   81972:	462e      	movcc	r6, r5
   81974:	2609      	movcs	r6, #9
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   81976:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   81978:	64e6      	str	r6, [r4, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   8197a:	1d27      	adds	r7, r4, #4
   8197c:	4638      	mov	r0, r7
   8197e:	f8df 8170 	ldr.w	r8, [pc, #368]	; 81af0 <xTaskGenericCreate+0x1fc>
   81982:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   81984:	f104 0018 	add.w	r0, r4, #24
   81988:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   8198a:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   8198c:	f1c6 060a 	rsb	r6, r6, #10
   81990:	8326      	strh	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   81992:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   81994:	4658      	mov	r0, fp
   81996:	4649      	mov	r1, r9
   81998:	4652      	mov	r2, sl
   8199a:	4b43      	ldr	r3, [pc, #268]	; (81aa8 <xTaskGenericCreate+0x1b4>)
   8199c:	4798      	blx	r3
   8199e:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   819a0:	f010 0f07 	tst.w	r0, #7
   819a4:	d003      	beq.n	819ae <xTaskGenericCreate+0xba>
   819a6:	4b3b      	ldr	r3, [pc, #236]	; (81a94 <xTaskGenericCreate+0x1a0>)
   819a8:	4798      	blx	r3
   819aa:	bf00      	nop
   819ac:	e7fd      	b.n	819aa <xTaskGenericCreate+0xb6>

		if( ( void * ) pxCreatedTask != NULL )
   819ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   819b0:	b103      	cbz	r3, 819b4 <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   819b2:	601c      	str	r4, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   819b4:	4b3d      	ldr	r3, [pc, #244]	; (81aac <xTaskGenericCreate+0x1b8>)
   819b6:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   819b8:	4b3d      	ldr	r3, [pc, #244]	; (81ab0 <xTaskGenericCreate+0x1bc>)
   819ba:	681a      	ldr	r2, [r3, #0]
   819bc:	3201      	adds	r2, #1
   819be:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   819c0:	4b3c      	ldr	r3, [pc, #240]	; (81ab4 <xTaskGenericCreate+0x1c0>)
   819c2:	681b      	ldr	r3, [r3, #0]
   819c4:	bb2b      	cbnz	r3, 81a12 <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   819c6:	4b3b      	ldr	r3, [pc, #236]	; (81ab4 <xTaskGenericCreate+0x1c0>)
   819c8:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   819ca:	4b39      	ldr	r3, [pc, #228]	; (81ab0 <xTaskGenericCreate+0x1bc>)
   819cc:	681b      	ldr	r3, [r3, #0]
   819ce:	2b01      	cmp	r3, #1
   819d0:	d129      	bne.n	81a26 <xTaskGenericCreate+0x132>
   819d2:	4e39      	ldr	r6, [pc, #228]	; (81ab8 <xTaskGenericCreate+0x1c4>)
   819d4:	f106 09c8 	add.w	r9, r6, #200	; 0xc8
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   819d8:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 81abc <xTaskGenericCreate+0x1c8>
   819dc:	4630      	mov	r0, r6
   819de:	47c0      	blx	r8
   819e0:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   819e2:	454e      	cmp	r6, r9
   819e4:	d1fa      	bne.n	819dc <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   819e6:	f8df 910c 	ldr.w	r9, [pc, #268]	; 81af4 <xTaskGenericCreate+0x200>
   819ea:	4648      	mov	r0, r9
   819ec:	4e33      	ldr	r6, [pc, #204]	; (81abc <xTaskGenericCreate+0x1c8>)
   819ee:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   819f0:	f8df 8104 	ldr.w	r8, [pc, #260]	; 81af8 <xTaskGenericCreate+0x204>
   819f4:	4640      	mov	r0, r8
   819f6:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   819f8:	4831      	ldr	r0, [pc, #196]	; (81ac0 <xTaskGenericCreate+0x1cc>)
   819fa:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   819fc:	4831      	ldr	r0, [pc, #196]	; (81ac4 <xTaskGenericCreate+0x1d0>)
   819fe:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   81a00:	4831      	ldr	r0, [pc, #196]	; (81ac8 <xTaskGenericCreate+0x1d4>)
   81a02:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   81a04:	4b31      	ldr	r3, [pc, #196]	; (81acc <xTaskGenericCreate+0x1d8>)
   81a06:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   81a0a:	4b31      	ldr	r3, [pc, #196]	; (81ad0 <xTaskGenericCreate+0x1dc>)
   81a0c:	f8c3 8000 	str.w	r8, [r3]
   81a10:	e009      	b.n	81a26 <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   81a12:	4b30      	ldr	r3, [pc, #192]	; (81ad4 <xTaskGenericCreate+0x1e0>)
   81a14:	681b      	ldr	r3, [r3, #0]
   81a16:	b933      	cbnz	r3, 81a26 <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   81a18:	4b26      	ldr	r3, [pc, #152]	; (81ab4 <xTaskGenericCreate+0x1c0>)
   81a1a:	681b      	ldr	r3, [r3, #0]
   81a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81a1e:	429d      	cmp	r5, r3
					{
						pxCurrentTCB = pxNewTCB;
   81a20:	bf24      	itt	cs
   81a22:	4b24      	ldrcs	r3, [pc, #144]	; (81ab4 <xTaskGenericCreate+0x1c0>)
   81a24:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   81a26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81a28:	4a2b      	ldr	r2, [pc, #172]	; (81ad8 <xTaskGenericCreate+0x1e4>)
   81a2a:	6812      	ldr	r2, [r2, #0]
   81a2c:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   81a2e:	bf84      	itt	hi
   81a30:	4a29      	ldrhi	r2, [pc, #164]	; (81ad8 <xTaskGenericCreate+0x1e4>)
   81a32:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   81a34:	4a29      	ldr	r2, [pc, #164]	; (81adc <xTaskGenericCreate+0x1e8>)
   81a36:	6811      	ldr	r1, [r2, #0]
   81a38:	6461      	str	r1, [r4, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
   81a3a:	3101      	adds	r1, #1
   81a3c:	6011      	str	r1, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   81a3e:	4a28      	ldr	r2, [pc, #160]	; (81ae0 <xTaskGenericCreate+0x1ec>)
   81a40:	6812      	ldr	r2, [r2, #0]
   81a42:	4293      	cmp	r3, r2
   81a44:	bf84      	itt	hi
   81a46:	4a26      	ldrhi	r2, [pc, #152]	; (81ae0 <xTaskGenericCreate+0x1ec>)
   81a48:	6013      	strhi	r3, [r2, #0]
   81a4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81a4e:	481a      	ldr	r0, [pc, #104]	; (81ab8 <xTaskGenericCreate+0x1c4>)
   81a50:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81a54:	4639      	mov	r1, r7
   81a56:	4b23      	ldr	r3, [pc, #140]	; (81ae4 <xTaskGenericCreate+0x1f0>)
   81a58:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   81a5a:	4b23      	ldr	r3, [pc, #140]	; (81ae8 <xTaskGenericCreate+0x1f4>)
   81a5c:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   81a5e:	4b1d      	ldr	r3, [pc, #116]	; (81ad4 <xTaskGenericCreate+0x1e0>)
   81a60:	681b      	ldr	r3, [r3, #0]
   81a62:	b14b      	cbz	r3, 81a78 <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   81a64:	4b13      	ldr	r3, [pc, #76]	; (81ab4 <xTaskGenericCreate+0x1c0>)
   81a66:	681b      	ldr	r3, [r3, #0]
   81a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81a6a:	429d      	cmp	r5, r3
   81a6c:	d907      	bls.n	81a7e <xTaskGenericCreate+0x18a>
			{
				portYIELD_WITHIN_API();
   81a6e:	4b1f      	ldr	r3, [pc, #124]	; (81aec <xTaskGenericCreate+0x1f8>)
   81a70:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   81a72:	2001      	movs	r0, #1
   81a74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81a78:	2001      	movs	r0, #1
   81a7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81a7e:	2001      	movs	r0, #1
   81a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81a84:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
   81a88:	4640      	mov	r0, r8
   81a8a:	e75b      	b.n	81944 <xTaskGenericCreate+0x50>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   81a8c:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   81a90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81a94:	000810f5 	.word	0x000810f5
   81a98:	00081251 	.word	0x00081251
   81a9c:	00081315 	.word	0x00081315
   81aa0:	00083813 	.word	0x00083813
   81aa4:	0008392d 	.word	0x0008392d
   81aa8:	000810a9 	.word	0x000810a9
   81aac:	00081105 	.word	0x00081105
   81ab0:	20079048 	.word	0x20079048
   81ab4:	20079008 	.word	0x20079008
   81ab8:	20078f3c 	.word	0x20078f3c
   81abc:	00080fed 	.word	0x00080fed
   81ac0:	2007900c 	.word	0x2007900c
   81ac4:	20078f10 	.word	0x20078f10
   81ac8:	20078ef0 	.word	0x20078ef0
   81acc:	20078f04 	.word	0x20078f04
   81ad0:	20079028 	.word	0x20079028
   81ad4:	20078f08 	.word	0x20078f08
   81ad8:	2007904c 	.word	0x2007904c
   81adc:	2007902c 	.word	0x2007902c
   81ae0:	20078f38 	.word	0x20078f38
   81ae4:	0008100d 	.word	0x0008100d
   81ae8:	00081125 	.word	0x00081125
   81aec:	000810e5 	.word	0x000810e5
   81af0:	00081005 	.word	0x00081005
   81af4:	20079030 	.word	0x20079030
   81af8:	20078f24 	.word	0x20078f24

00081afc <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   81afc:	b510      	push	{r4, lr}
   81afe:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   81b00:	2300      	movs	r3, #0
   81b02:	9300      	str	r3, [sp, #0]
   81b04:	9301      	str	r3, [sp, #4]
   81b06:	9302      	str	r3, [sp, #8]
   81b08:	9303      	str	r3, [sp, #12]
   81b0a:	480f      	ldr	r0, [pc, #60]	; (81b48 <vTaskStartScheduler+0x4c>)
   81b0c:	490f      	ldr	r1, [pc, #60]	; (81b4c <vTaskStartScheduler+0x50>)
   81b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
   81b12:	4c0f      	ldr	r4, [pc, #60]	; (81b50 <vTaskStartScheduler+0x54>)
   81b14:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   81b16:	2801      	cmp	r0, #1
   81b18:	d10e      	bne.n	81b38 <vTaskStartScheduler+0x3c>
		{
			xReturn = xTimerCreateTimerTask();
   81b1a:	4b0e      	ldr	r3, [pc, #56]	; (81b54 <vTaskStartScheduler+0x58>)
   81b1c:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   81b1e:	2801      	cmp	r0, #1
   81b20:	d10a      	bne.n	81b38 <vTaskStartScheduler+0x3c>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   81b22:	4b0d      	ldr	r3, [pc, #52]	; (81b58 <vTaskStartScheduler+0x5c>)
   81b24:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   81b26:	2201      	movs	r2, #1
   81b28:	4b0c      	ldr	r3, [pc, #48]	; (81b5c <vTaskStartScheduler+0x60>)
   81b2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   81b2c:	2200      	movs	r2, #0
   81b2e:	4b0c      	ldr	r3, [pc, #48]	; (81b60 <vTaskStartScheduler+0x64>)
   81b30:	801a      	strh	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   81b32:	4b0c      	ldr	r3, [pc, #48]	; (81b64 <vTaskStartScheduler+0x68>)
   81b34:	4798      	blx	r3
   81b36:	e004      	b.n	81b42 <vTaskStartScheduler+0x46>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   81b38:	b918      	cbnz	r0, 81b42 <vTaskStartScheduler+0x46>
   81b3a:	4b07      	ldr	r3, [pc, #28]	; (81b58 <vTaskStartScheduler+0x5c>)
   81b3c:	4798      	blx	r3
   81b3e:	bf00      	nop
   81b40:	e7fd      	b.n	81b3e <vTaskStartScheduler+0x42>
}
   81b42:	b004      	add	sp, #16
   81b44:	bd10      	pop	{r4, pc}
   81b46:	bf00      	nop
   81b48:	00081e69 	.word	0x00081e69
   81b4c:	00086098 	.word	0x00086098
   81b50:	000818f5 	.word	0x000818f5
   81b54:	00082315 	.word	0x00082315
   81b58:	000810f5 	.word	0x000810f5
   81b5c:	20078f08 	.word	0x20078f08
   81b60:	20079024 	.word	0x20079024
   81b64:	000811c1 	.word	0x000811c1

00081b68 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   81b68:	4b02      	ldr	r3, [pc, #8]	; (81b74 <vTaskSuspendAll+0xc>)
   81b6a:	681a      	ldr	r2, [r3, #0]
   81b6c:	3201      	adds	r2, #1
   81b6e:	601a      	str	r2, [r3, #0]
   81b70:	4770      	bx	lr
   81b72:	bf00      	nop
   81b74:	20079020 	.word	0x20079020

00081b78 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   81b78:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   81b7a:	4b04      	ldr	r3, [pc, #16]	; (81b8c <xTaskGetTickCount+0x14>)
   81b7c:	4798      	blx	r3
	{
		xTicks = xTickCount;
   81b7e:	4b04      	ldr	r3, [pc, #16]	; (81b90 <xTaskGetTickCount+0x18>)
   81b80:	881c      	ldrh	r4, [r3, #0]
   81b82:	b2a4      	uxth	r4, r4
	}
	taskEXIT_CRITICAL();
   81b84:	4b03      	ldr	r3, [pc, #12]	; (81b94 <xTaskGetTickCount+0x1c>)
   81b86:	4798      	blx	r3

	return xTicks;
}
   81b88:	4620      	mov	r0, r4
   81b8a:	bd10      	pop	{r4, pc}
   81b8c:	00081105 	.word	0x00081105
   81b90:	20079024 	.word	0x20079024
   81b94:	00081125 	.word	0x00081125

00081b98 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81b9c:	4b3e      	ldr	r3, [pc, #248]	; (81c98 <vTaskIncrementTick+0x100>)
   81b9e:	681b      	ldr	r3, [r3, #0]
   81ba0:	2b00      	cmp	r3, #0
   81ba2:	d172      	bne.n	81c8a <vTaskIncrementTick+0xf2>
	{
		++xTickCount;
   81ba4:	4b3d      	ldr	r3, [pc, #244]	; (81c9c <vTaskIncrementTick+0x104>)
   81ba6:	881a      	ldrh	r2, [r3, #0]
   81ba8:	b292      	uxth	r2, r2
   81baa:	3201      	adds	r2, #1
   81bac:	b292      	uxth	r2, r2
   81bae:	801a      	strh	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   81bb0:	881b      	ldrh	r3, [r3, #0]
   81bb2:	b29b      	uxth	r3, r3
   81bb4:	bb03      	cbnz	r3, 81bf8 <vTaskIncrementTick+0x60>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81bb6:	4b3a      	ldr	r3, [pc, #232]	; (81ca0 <vTaskIncrementTick+0x108>)
   81bb8:	681b      	ldr	r3, [r3, #0]
   81bba:	681b      	ldr	r3, [r3, #0]
   81bbc:	b11b      	cbz	r3, 81bc6 <vTaskIncrementTick+0x2e>
   81bbe:	4b39      	ldr	r3, [pc, #228]	; (81ca4 <vTaskIncrementTick+0x10c>)
   81bc0:	4798      	blx	r3
   81bc2:	bf00      	nop
   81bc4:	e7fd      	b.n	81bc2 <vTaskIncrementTick+0x2a>

			pxTemp = pxDelayedTaskList;
   81bc6:	4b36      	ldr	r3, [pc, #216]	; (81ca0 <vTaskIncrementTick+0x108>)
   81bc8:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81bca:	4a37      	ldr	r2, [pc, #220]	; (81ca8 <vTaskIncrementTick+0x110>)
   81bcc:	6810      	ldr	r0, [r2, #0]
   81bce:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   81bd0:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81bd2:	4a36      	ldr	r2, [pc, #216]	; (81cac <vTaskIncrementTick+0x114>)
   81bd4:	6811      	ldr	r1, [r2, #0]
   81bd6:	3101      	adds	r1, #1
   81bd8:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81bda:	681b      	ldr	r3, [r3, #0]
   81bdc:	681b      	ldr	r3, [r3, #0]
   81bde:	b923      	cbnz	r3, 81bea <vTaskIncrementTick+0x52>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   81be0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81be4:	4b32      	ldr	r3, [pc, #200]	; (81cb0 <vTaskIncrementTick+0x118>)
   81be6:	801a      	strh	r2, [r3, #0]
   81be8:	e006      	b.n	81bf8 <vTaskIncrementTick+0x60>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81bea:	4b2d      	ldr	r3, [pc, #180]	; (81ca0 <vTaskIncrementTick+0x108>)
   81bec:	681b      	ldr	r3, [r3, #0]
   81bee:	68db      	ldr	r3, [r3, #12]
   81bf0:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81bf2:	889a      	ldrh	r2, [r3, #4]
   81bf4:	4b2e      	ldr	r3, [pc, #184]	; (81cb0 <vTaskIncrementTick+0x118>)
   81bf6:	801a      	strh	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   81bf8:	4b28      	ldr	r3, [pc, #160]	; (81c9c <vTaskIncrementTick+0x104>)
   81bfa:	881a      	ldrh	r2, [r3, #0]
   81bfc:	b292      	uxth	r2, r2
   81bfe:	4b2c      	ldr	r3, [pc, #176]	; (81cb0 <vTaskIncrementTick+0x118>)
   81c00:	881b      	ldrh	r3, [r3, #0]
   81c02:	b29b      	uxth	r3, r3
   81c04:	429a      	cmp	r2, r3
   81c06:	d344      	bcc.n	81c92 <vTaskIncrementTick+0xfa>
   81c08:	4b25      	ldr	r3, [pc, #148]	; (81ca0 <vTaskIncrementTick+0x108>)
   81c0a:	681b      	ldr	r3, [r3, #0]
   81c0c:	681b      	ldr	r3, [r3, #0]
   81c0e:	b153      	cbz	r3, 81c26 <vTaskIncrementTick+0x8e>
   81c10:	4b23      	ldr	r3, [pc, #140]	; (81ca0 <vTaskIncrementTick+0x108>)
   81c12:	681b      	ldr	r3, [r3, #0]
   81c14:	68db      	ldr	r3, [r3, #12]
   81c16:	68dc      	ldr	r4, [r3, #12]
   81c18:	88a3      	ldrh	r3, [r4, #4]
   81c1a:	4a20      	ldr	r2, [pc, #128]	; (81c9c <vTaskIncrementTick+0x104>)
   81c1c:	8812      	ldrh	r2, [r2, #0]
   81c1e:	b292      	uxth	r2, r2
   81c20:	4293      	cmp	r3, r2
   81c22:	d914      	bls.n	81c4e <vTaskIncrementTick+0xb6>
   81c24:	e00f      	b.n	81c46 <vTaskIncrementTick+0xae>
   81c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81c2a:	4b21      	ldr	r3, [pc, #132]	; (81cb0 <vTaskIncrementTick+0x118>)
   81c2c:	801a      	strh	r2, [r3, #0]
   81c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81c32:	4b1b      	ldr	r3, [pc, #108]	; (81ca0 <vTaskIncrementTick+0x108>)
   81c34:	681b      	ldr	r3, [r3, #0]
   81c36:	68db      	ldr	r3, [r3, #12]
   81c38:	68dc      	ldr	r4, [r3, #12]
   81c3a:	88a3      	ldrh	r3, [r4, #4]
   81c3c:	4a17      	ldr	r2, [pc, #92]	; (81c9c <vTaskIncrementTick+0x104>)
   81c3e:	8812      	ldrh	r2, [r2, #0]
   81c40:	b292      	uxth	r2, r2
   81c42:	4293      	cmp	r3, r2
   81c44:	d907      	bls.n	81c56 <vTaskIncrementTick+0xbe>
   81c46:	4a1a      	ldr	r2, [pc, #104]	; (81cb0 <vTaskIncrementTick+0x118>)
   81c48:	8013      	strh	r3, [r2, #0]
   81c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81c4e:	4e19      	ldr	r6, [pc, #100]	; (81cb4 <vTaskIncrementTick+0x11c>)
   81c50:	4f19      	ldr	r7, [pc, #100]	; (81cb8 <vTaskIncrementTick+0x120>)
   81c52:	f8df 8070 	ldr.w	r8, [pc, #112]	; 81cc4 <vTaskIncrementTick+0x12c>
   81c56:	1d25      	adds	r5, r4, #4
   81c58:	4628      	mov	r0, r5
   81c5a:	47b0      	blx	r6
   81c5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81c5e:	b113      	cbz	r3, 81c66 <vTaskIncrementTick+0xce>
   81c60:	f104 0018 	add.w	r0, r4, #24
   81c64:	47b0      	blx	r6
   81c66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81c68:	683a      	ldr	r2, [r7, #0]
   81c6a:	4293      	cmp	r3, r2
   81c6c:	bf88      	it	hi
   81c6e:	603b      	strhi	r3, [r7, #0]
   81c70:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   81c74:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   81c78:	4629      	mov	r1, r5
   81c7a:	4b10      	ldr	r3, [pc, #64]	; (81cbc <vTaskIncrementTick+0x124>)
   81c7c:	4798      	blx	r3
   81c7e:	4b08      	ldr	r3, [pc, #32]	; (81ca0 <vTaskIncrementTick+0x108>)
   81c80:	681b      	ldr	r3, [r3, #0]
   81c82:	681b      	ldr	r3, [r3, #0]
   81c84:	2b00      	cmp	r3, #0
   81c86:	d1d4      	bne.n	81c32 <vTaskIncrementTick+0x9a>
   81c88:	e7cd      	b.n	81c26 <vTaskIncrementTick+0x8e>
	}
	else
	{
		++uxMissedTicks;
   81c8a:	4b0d      	ldr	r3, [pc, #52]	; (81cc0 <vTaskIncrementTick+0x128>)
   81c8c:	681a      	ldr	r2, [r3, #0]
   81c8e:	3201      	adds	r2, #1
   81c90:	601a      	str	r2, [r3, #0]
   81c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81c96:	bf00      	nop
   81c98:	20079020 	.word	0x20079020
   81c9c:	20079024 	.word	0x20079024
   81ca0:	20078f04 	.word	0x20078f04
   81ca4:	000810f5 	.word	0x000810f5
   81ca8:	20079028 	.word	0x20079028
   81cac:	20079004 	.word	0x20079004
   81cb0:	200704c4 	.word	0x200704c4
   81cb4:	0008106d 	.word	0x0008106d
   81cb8:	20078f38 	.word	0x20078f38
   81cbc:	0008100d 	.word	0x0008100d
   81cc0:	20078eec 	.word	0x20078eec
   81cc4:	20078f3c 	.word	0x20078f3c

00081cc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   81cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   81ccc:	4b31      	ldr	r3, [pc, #196]	; (81d94 <xTaskResumeAll+0xcc>)
   81cce:	681b      	ldr	r3, [r3, #0]
   81cd0:	b91b      	cbnz	r3, 81cda <xTaskResumeAll+0x12>
   81cd2:	4b31      	ldr	r3, [pc, #196]	; (81d98 <xTaskResumeAll+0xd0>)
   81cd4:	4798      	blx	r3
   81cd6:	bf00      	nop
   81cd8:	e7fd      	b.n	81cd6 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   81cda:	4b30      	ldr	r3, [pc, #192]	; (81d9c <xTaskResumeAll+0xd4>)
   81cdc:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   81cde:	4b2d      	ldr	r3, [pc, #180]	; (81d94 <xTaskResumeAll+0xcc>)
   81ce0:	681a      	ldr	r2, [r3, #0]
   81ce2:	3a01      	subs	r2, #1
   81ce4:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81ce6:	681b      	ldr	r3, [r3, #0]
   81ce8:	2b00      	cmp	r3, #0
   81cea:	d148      	bne.n	81d7e <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   81cec:	4b2c      	ldr	r3, [pc, #176]	; (81da0 <xTaskResumeAll+0xd8>)
   81cee:	681b      	ldr	r3, [r3, #0]
   81cf0:	2b00      	cmp	r3, #0
   81cf2:	d046      	beq.n	81d82 <xTaskResumeAll+0xba>
   81cf4:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81cf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 81dcc <xTaskResumeAll+0x104>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   81cfa:	4f2a      	ldr	r7, [pc, #168]	; (81da4 <xTaskResumeAll+0xdc>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   81cfc:	4e2a      	ldr	r6, [pc, #168]	; (81da8 <xTaskResumeAll+0xe0>)
   81cfe:	e01d      	b.n	81d3c <xTaskResumeAll+0x74>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   81d00:	f8d8 300c 	ldr.w	r3, [r8, #12]
   81d04:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   81d06:	f104 0018 	add.w	r0, r4, #24
   81d0a:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81d0c:	f104 0904 	add.w	r9, r4, #4
   81d10:	4648      	mov	r0, r9
   81d12:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   81d14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81d16:	6832      	ldr	r2, [r6, #0]
   81d18:	4293      	cmp	r3, r2
   81d1a:	bf88      	it	hi
   81d1c:	6033      	strhi	r3, [r6, #0]
   81d1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81d22:	4822      	ldr	r0, [pc, #136]	; (81dac <xTaskResumeAll+0xe4>)
   81d24:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81d28:	4649      	mov	r1, r9
   81d2a:	4b21      	ldr	r3, [pc, #132]	; (81db0 <xTaskResumeAll+0xe8>)
   81d2c:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81d2e:	4b21      	ldr	r3, [pc, #132]	; (81db4 <xTaskResumeAll+0xec>)
   81d30:	681b      	ldr	r3, [r3, #0]
   81d32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   81d36:	429a      	cmp	r2, r3
   81d38:	bf28      	it	cs
   81d3a:	2501      	movcs	r5, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81d3c:	f8d8 3000 	ldr.w	r3, [r8]
   81d40:	2b00      	cmp	r3, #0
   81d42:	d1dd      	bne.n	81d00 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81d44:	4b1c      	ldr	r3, [pc, #112]	; (81db8 <xTaskResumeAll+0xf0>)
   81d46:	681b      	ldr	r3, [r3, #0]
   81d48:	b163      	cbz	r3, 81d64 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81d4a:	4b1b      	ldr	r3, [pc, #108]	; (81db8 <xTaskResumeAll+0xf0>)
   81d4c:	681b      	ldr	r3, [r3, #0]
   81d4e:	b17b      	cbz	r3, 81d70 <xTaskResumeAll+0xa8>
					{
						vTaskIncrementTick();
   81d50:	4d1a      	ldr	r5, [pc, #104]	; (81dbc <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
   81d52:	4c19      	ldr	r4, [pc, #100]	; (81db8 <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   81d54:	47a8      	blx	r5
						--uxMissedTicks;
   81d56:	6823      	ldr	r3, [r4, #0]
   81d58:	3b01      	subs	r3, #1
   81d5a:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81d5c:	6823      	ldr	r3, [r4, #0]
   81d5e:	2b00      	cmp	r3, #0
   81d60:	d1f8      	bne.n	81d54 <xTaskResumeAll+0x8c>
   81d62:	e005      	b.n	81d70 <xTaskResumeAll+0xa8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81d64:	2d01      	cmp	r5, #1
   81d66:	d003      	beq.n	81d70 <xTaskResumeAll+0xa8>
   81d68:	4b15      	ldr	r3, [pc, #84]	; (81dc0 <xTaskResumeAll+0xf8>)
   81d6a:	681b      	ldr	r3, [r3, #0]
   81d6c:	2b01      	cmp	r3, #1
   81d6e:	d10a      	bne.n	81d86 <xTaskResumeAll+0xbe>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   81d70:	2200      	movs	r2, #0
   81d72:	4b13      	ldr	r3, [pc, #76]	; (81dc0 <xTaskResumeAll+0xf8>)
   81d74:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   81d76:	4b13      	ldr	r3, [pc, #76]	; (81dc4 <xTaskResumeAll+0xfc>)
   81d78:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   81d7a:	2401      	movs	r4, #1
   81d7c:	e004      	b.n	81d88 <xTaskResumeAll+0xc0>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81d7e:	2400      	movs	r4, #0
   81d80:	e002      	b.n	81d88 <xTaskResumeAll+0xc0>
   81d82:	2400      	movs	r4, #0
   81d84:	e000      	b.n	81d88 <xTaskResumeAll+0xc0>
   81d86:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   81d88:	4b0f      	ldr	r3, [pc, #60]	; (81dc8 <xTaskResumeAll+0x100>)
   81d8a:	4798      	blx	r3

	return xAlreadyYielded;
}
   81d8c:	4620      	mov	r0, r4
   81d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81d92:	bf00      	nop
   81d94:	20079020 	.word	0x20079020
   81d98:	000810f5 	.word	0x000810f5
   81d9c:	00081105 	.word	0x00081105
   81da0:	20079048 	.word	0x20079048
   81da4:	0008106d 	.word	0x0008106d
   81da8:	20078f38 	.word	0x20078f38
   81dac:	20078f3c 	.word	0x20078f3c
   81db0:	0008100d 	.word	0x0008100d
   81db4:	20079008 	.word	0x20079008
   81db8:	20078eec 	.word	0x20078eec
   81dbc:	00081b99 	.word	0x00081b99
   81dc0:	20079044 	.word	0x20079044
   81dc4:	000810e5 	.word	0x000810e5
   81dc8:	00081125 	.word	0x00081125
   81dcc:	2007900c 	.word	0x2007900c

00081dd0 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   81dd0:	b538      	push	{r3, r4, r5, lr}
   81dd2:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   81dd4:	4605      	mov	r5, r0
   81dd6:	b918      	cbnz	r0, 81de0 <vTaskDelayUntil+0x10>
   81dd8:	4b1b      	ldr	r3, [pc, #108]	; (81e48 <vTaskDelayUntil+0x78>)
   81dda:	4798      	blx	r3
   81ddc:	bf00      	nop
   81dde:	e7fd      	b.n	81ddc <vTaskDelayUntil+0xc>
		configASSERT( ( xTimeIncrement > 0U ) );
   81de0:	b919      	cbnz	r1, 81dea <vTaskDelayUntil+0x1a>
   81de2:	4b19      	ldr	r3, [pc, #100]	; (81e48 <vTaskDelayUntil+0x78>)
   81de4:	4798      	blx	r3
   81de6:	bf00      	nop
   81de8:	e7fd      	b.n	81de6 <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   81dea:	4b18      	ldr	r3, [pc, #96]	; (81e4c <vTaskDelayUntil+0x7c>)
   81dec:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   81dee:	882b      	ldrh	r3, [r5, #0]
   81df0:	441c      	add	r4, r3
   81df2:	b2a4      	uxth	r4, r4

			if( xTickCount < *pxPreviousWakeTime )
   81df4:	4a16      	ldr	r2, [pc, #88]	; (81e50 <vTaskDelayUntil+0x80>)
   81df6:	8812      	ldrh	r2, [r2, #0]
   81df8:	b292      	uxth	r2, r2
   81dfa:	4293      	cmp	r3, r2
   81dfc:	d908      	bls.n	81e10 <vTaskDelayUntil+0x40>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   81dfe:	42a3      	cmp	r3, r4
   81e00:	d91e      	bls.n	81e40 <vTaskDelayUntil+0x70>
   81e02:	4b13      	ldr	r3, [pc, #76]	; (81e50 <vTaskDelayUntil+0x80>)
   81e04:	881b      	ldrh	r3, [r3, #0]
   81e06:	b29b      	uxth	r3, r3
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   81e08:	802c      	strh	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   81e0a:	429c      	cmp	r4, r3
   81e0c:	d910      	bls.n	81e30 <vTaskDelayUntil+0x60>
   81e0e:	e007      	b.n	81e20 <vTaskDelayUntil+0x50>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   81e10:	42a3      	cmp	r3, r4
   81e12:	d813      	bhi.n	81e3c <vTaskDelayUntil+0x6c>
   81e14:	4b0e      	ldr	r3, [pc, #56]	; (81e50 <vTaskDelayUntil+0x80>)
   81e16:	881b      	ldrh	r3, [r3, #0]
   81e18:	b29b      	uxth	r3, r3
   81e1a:	429c      	cmp	r4, r3
   81e1c:	d80e      	bhi.n	81e3c <vTaskDelayUntil+0x6c>
   81e1e:	e00f      	b.n	81e40 <vTaskDelayUntil+0x70>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81e20:	4b0c      	ldr	r3, [pc, #48]	; (81e54 <vTaskDelayUntil+0x84>)
   81e22:	6818      	ldr	r0, [r3, #0]
   81e24:	3004      	adds	r0, #4
   81e26:	4b0c      	ldr	r3, [pc, #48]	; (81e58 <vTaskDelayUntil+0x88>)
   81e28:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   81e2a:	4620      	mov	r0, r4
   81e2c:	4b0b      	ldr	r3, [pc, #44]	; (81e5c <vTaskDelayUntil+0x8c>)
   81e2e:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   81e30:	4b0b      	ldr	r3, [pc, #44]	; (81e60 <vTaskDelayUntil+0x90>)
   81e32:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   81e34:	b930      	cbnz	r0, 81e44 <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
   81e36:	4b0b      	ldr	r3, [pc, #44]	; (81e64 <vTaskDelayUntil+0x94>)
   81e38:	4798      	blx	r3
   81e3a:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   81e3c:	802c      	strh	r4, [r5, #0]
   81e3e:	e7ef      	b.n	81e20 <vTaskDelayUntil+0x50>
   81e40:	802c      	strh	r4, [r5, #0]
   81e42:	e7f5      	b.n	81e30 <vTaskDelayUntil+0x60>
   81e44:	bd38      	pop	{r3, r4, r5, pc}
   81e46:	bf00      	nop
   81e48:	000810f5 	.word	0x000810f5
   81e4c:	00081b69 	.word	0x00081b69
   81e50:	20079024 	.word	0x20079024
   81e54:	20079008 	.word	0x20079008
   81e58:	0008106d 	.word	0x0008106d
   81e5c:	00081899 	.word	0x00081899
   81e60:	00081cc9 	.word	0x00081cc9
   81e64:	000810e5 	.word	0x000810e5

00081e68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   81e68:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81e6a:	4d15      	ldr	r5, [pc, #84]	; (81ec0 <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81e6c:	4e15      	ldr	r6, [pc, #84]	; (81ec4 <prvIdleTask+0x5c>)
			{
				taskYIELD();
   81e6e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 81ee8 <prvIdleTask+0x80>
   81e72:	e01c      	b.n	81eae <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81e74:	4b14      	ldr	r3, [pc, #80]	; (81ec8 <prvIdleTask+0x60>)
   81e76:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81e78:	4b14      	ldr	r3, [pc, #80]	; (81ecc <prvIdleTask+0x64>)
   81e7a:	681c      	ldr	r4, [r3, #0]
			xTaskResumeAll();
   81e7c:	4b14      	ldr	r3, [pc, #80]	; (81ed0 <prvIdleTask+0x68>)
   81e7e:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   81e80:	b1ac      	cbz	r4, 81eae <prvIdleTask+0x46>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   81e82:	4b14      	ldr	r3, [pc, #80]	; (81ed4 <prvIdleTask+0x6c>)
   81e84:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81e86:	4b11      	ldr	r3, [pc, #68]	; (81ecc <prvIdleTask+0x64>)
   81e88:	68db      	ldr	r3, [r3, #12]
   81e8a:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81e8c:	1d20      	adds	r0, r4, #4
   81e8e:	4b12      	ldr	r3, [pc, #72]	; (81ed8 <prvIdleTask+0x70>)
   81e90:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   81e92:	4b12      	ldr	r3, [pc, #72]	; (81edc <prvIdleTask+0x74>)
   81e94:	681a      	ldr	r2, [r3, #0]
   81e96:	3a01      	subs	r2, #1
   81e98:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   81e9a:	682b      	ldr	r3, [r5, #0]
   81e9c:	3b01      	subs	r3, #1
   81e9e:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   81ea0:	4b0f      	ldr	r3, [pc, #60]	; (81ee0 <prvIdleTask+0x78>)
   81ea2:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81ea4:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81ea6:	4f0f      	ldr	r7, [pc, #60]	; (81ee4 <prvIdleTask+0x7c>)
   81ea8:	47b8      	blx	r7
		vPortFree( pxTCB );
   81eaa:	4620      	mov	r0, r4
   81eac:	47b8      	blx	r7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81eae:	682b      	ldr	r3, [r5, #0]
   81eb0:	2b00      	cmp	r3, #0
   81eb2:	d1df      	bne.n	81e74 <prvIdleTask+0xc>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81eb4:	6833      	ldr	r3, [r6, #0]
   81eb6:	2b01      	cmp	r3, #1
   81eb8:	d9f9      	bls.n	81eae <prvIdleTask+0x46>
			{
				taskYIELD();
   81eba:	47c0      	blx	r8
   81ebc:	e7f7      	b.n	81eae <prvIdleTask+0x46>
   81ebe:	bf00      	nop
   81ec0:	20078f0c 	.word	0x20078f0c
   81ec4:	20078f3c 	.word	0x20078f3c
   81ec8:	00081b69 	.word	0x00081b69
   81ecc:	20078f10 	.word	0x20078f10
   81ed0:	00081cc9 	.word	0x00081cc9
   81ed4:	00081105 	.word	0x00081105
   81ed8:	0008106d 	.word	0x0008106d
   81edc:	20079048 	.word	0x20079048
   81ee0:	00081125 	.word	0x00081125
   81ee4:	00081315 	.word	0x00081315
   81ee8:	000810e5 	.word	0x000810e5

00081eec <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81eec:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81eee:	4b1d      	ldr	r3, [pc, #116]	; (81f64 <vTaskSwitchContext+0x78>)
   81ef0:	681b      	ldr	r3, [r3, #0]
   81ef2:	b95b      	cbnz	r3, 81f0c <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81ef4:	4b1c      	ldr	r3, [pc, #112]	; (81f68 <vTaskSwitchContext+0x7c>)
   81ef6:	681b      	ldr	r3, [r3, #0]
   81ef8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81efc:	009b      	lsls	r3, r3, #2
   81efe:	4a1b      	ldr	r2, [pc, #108]	; (81f6c <vTaskSwitchContext+0x80>)
   81f00:	58d3      	ldr	r3, [r2, r3]
   81f02:	b9cb      	cbnz	r3, 81f38 <vTaskSwitchContext+0x4c>
   81f04:	4b18      	ldr	r3, [pc, #96]	; (81f68 <vTaskSwitchContext+0x7c>)
   81f06:	681b      	ldr	r3, [r3, #0]
   81f08:	b953      	cbnz	r3, 81f20 <vTaskSwitchContext+0x34>
   81f0a:	e005      	b.n	81f18 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   81f0c:	2201      	movs	r2, #1
   81f0e:	4b18      	ldr	r3, [pc, #96]	; (81f70 <vTaskSwitchContext+0x84>)
   81f10:	601a      	str	r2, [r3, #0]
   81f12:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81f14:	681a      	ldr	r2, [r3, #0]
   81f16:	b92a      	cbnz	r2, 81f24 <vTaskSwitchContext+0x38>
   81f18:	4b16      	ldr	r3, [pc, #88]	; (81f74 <vTaskSwitchContext+0x88>)
   81f1a:	4798      	blx	r3
   81f1c:	bf00      	nop
   81f1e:	e7fd      	b.n	81f1c <vTaskSwitchContext+0x30>
   81f20:	4b11      	ldr	r3, [pc, #68]	; (81f68 <vTaskSwitchContext+0x7c>)
   81f22:	4912      	ldr	r1, [pc, #72]	; (81f6c <vTaskSwitchContext+0x80>)
   81f24:	681a      	ldr	r2, [r3, #0]
   81f26:	3a01      	subs	r2, #1
   81f28:	601a      	str	r2, [r3, #0]
   81f2a:	681a      	ldr	r2, [r3, #0]
   81f2c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81f30:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   81f34:	2a00      	cmp	r2, #0
   81f36:	d0ed      	beq.n	81f14 <vTaskSwitchContext+0x28>
   81f38:	4b0b      	ldr	r3, [pc, #44]	; (81f68 <vTaskSwitchContext+0x7c>)
   81f3a:	681b      	ldr	r3, [r3, #0]
   81f3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81f40:	4a0a      	ldr	r2, [pc, #40]	; (81f6c <vTaskSwitchContext+0x80>)
   81f42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81f46:	685a      	ldr	r2, [r3, #4]
   81f48:	6852      	ldr	r2, [r2, #4]
   81f4a:	605a      	str	r2, [r3, #4]
   81f4c:	f103 0108 	add.w	r1, r3, #8
   81f50:	428a      	cmp	r2, r1
   81f52:	bf04      	itt	eq
   81f54:	6852      	ldreq	r2, [r2, #4]
   81f56:	605a      	streq	r2, [r3, #4]
   81f58:	685b      	ldr	r3, [r3, #4]
   81f5a:	68da      	ldr	r2, [r3, #12]
   81f5c:	4b06      	ldr	r3, [pc, #24]	; (81f78 <vTaskSwitchContext+0x8c>)
   81f5e:	601a      	str	r2, [r3, #0]
   81f60:	bd08      	pop	{r3, pc}
   81f62:	bf00      	nop
   81f64:	20079020 	.word	0x20079020
   81f68:	20078f38 	.word	0x20078f38
   81f6c:	20078f3c 	.word	0x20078f3c
   81f70:	20079044 	.word	0x20079044
   81f74:	000810f5 	.word	0x000810f5
   81f78:	20079008 	.word	0x20079008

00081f7c <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   81f7c:	b538      	push	{r3, r4, r5, lr}
   81f7e:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   81f80:	b918      	cbnz	r0, 81f8a <vTaskPlaceOnEventList+0xe>
   81f82:	4b0f      	ldr	r3, [pc, #60]	; (81fc0 <vTaskPlaceOnEventList+0x44>)
   81f84:	4798      	blx	r3
   81f86:	bf00      	nop
   81f88:	e7fd      	b.n	81f86 <vTaskPlaceOnEventList+0xa>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81f8a:	4d0e      	ldr	r5, [pc, #56]	; (81fc4 <vTaskPlaceOnEventList+0x48>)
   81f8c:	6829      	ldr	r1, [r5, #0]
   81f8e:	3118      	adds	r1, #24
   81f90:	4b0d      	ldr	r3, [pc, #52]	; (81fc8 <vTaskPlaceOnEventList+0x4c>)
   81f92:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81f94:	6828      	ldr	r0, [r5, #0]
   81f96:	3004      	adds	r0, #4
   81f98:	4b0c      	ldr	r3, [pc, #48]	; (81fcc <vTaskPlaceOnEventList+0x50>)
   81f9a:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   81f9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81fa0:	429c      	cmp	r4, r3
   81fa2:	d105      	bne.n	81fb0 <vTaskPlaceOnEventList+0x34>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81fa4:	6829      	ldr	r1, [r5, #0]
   81fa6:	480a      	ldr	r0, [pc, #40]	; (81fd0 <vTaskPlaceOnEventList+0x54>)
   81fa8:	3104      	adds	r1, #4
   81faa:	4b0a      	ldr	r3, [pc, #40]	; (81fd4 <vTaskPlaceOnEventList+0x58>)
   81fac:	4798      	blx	r3
   81fae:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   81fb0:	4b09      	ldr	r3, [pc, #36]	; (81fd8 <vTaskPlaceOnEventList+0x5c>)
   81fb2:	8818      	ldrh	r0, [r3, #0]
   81fb4:	b280      	uxth	r0, r0
   81fb6:	4420      	add	r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81fb8:	b280      	uxth	r0, r0
   81fba:	4b08      	ldr	r3, [pc, #32]	; (81fdc <vTaskPlaceOnEventList+0x60>)
   81fbc:	4798      	blx	r3
   81fbe:	bd38      	pop	{r3, r4, r5, pc}
   81fc0:	000810f5 	.word	0x000810f5
   81fc4:	20079008 	.word	0x20079008
   81fc8:	00081029 	.word	0x00081029
   81fcc:	0008106d 	.word	0x0008106d
   81fd0:	20078ef0 	.word	0x20078ef0
   81fd4:	0008100d 	.word	0x0008100d
   81fd8:	20079024 	.word	0x20079024
   81fdc:	00081899 	.word	0x00081899

00081fe0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   81fe0:	b538      	push	{r3, r4, r5, lr}
   81fe2:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   81fe4:	b918      	cbnz	r0, 81fee <vTaskPlaceOnEventListRestricted+0xe>
   81fe6:	4b0a      	ldr	r3, [pc, #40]	; (82010 <vTaskPlaceOnEventListRestricted+0x30>)
   81fe8:	4798      	blx	r3
   81fea:	bf00      	nop
   81fec:	e7fd      	b.n	81fea <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81fee:	4c09      	ldr	r4, [pc, #36]	; (82014 <vTaskPlaceOnEventListRestricted+0x34>)
   81ff0:	6821      	ldr	r1, [r4, #0]
   81ff2:	3118      	adds	r1, #24
   81ff4:	4b08      	ldr	r3, [pc, #32]	; (82018 <vTaskPlaceOnEventListRestricted+0x38>)
   81ff6:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81ff8:	6820      	ldr	r0, [r4, #0]
   81ffa:	3004      	adds	r0, #4
   81ffc:	4b07      	ldr	r3, [pc, #28]	; (8201c <vTaskPlaceOnEventListRestricted+0x3c>)
   81ffe:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   82000:	4b07      	ldr	r3, [pc, #28]	; (82020 <vTaskPlaceOnEventListRestricted+0x40>)
   82002:	8818      	ldrh	r0, [r3, #0]
   82004:	b280      	uxth	r0, r0
   82006:	4428      	add	r0, r5
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   82008:	b280      	uxth	r0, r0
   8200a:	4b06      	ldr	r3, [pc, #24]	; (82024 <vTaskPlaceOnEventListRestricted+0x44>)
   8200c:	4798      	blx	r3
   8200e:	bd38      	pop	{r3, r4, r5, pc}
   82010:	000810f5 	.word	0x000810f5
   82014:	20079008 	.word	0x20079008
   82018:	0008100d 	.word	0x0008100d
   8201c:	0008106d 	.word	0x0008106d
   82020:	20079024 	.word	0x20079024
   82024:	00081899 	.word	0x00081899

00082028 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   82028:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   8202a:	68c3      	ldr	r3, [r0, #12]
   8202c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   8202e:	b91c      	cbnz	r4, 82038 <xTaskRemoveFromEventList+0x10>
   82030:	4b16      	ldr	r3, [pc, #88]	; (8208c <xTaskRemoveFromEventList+0x64>)
   82032:	4798      	blx	r3
   82034:	bf00      	nop
   82036:	e7fd      	b.n	82034 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   82038:	f104 0518 	add.w	r5, r4, #24
   8203c:	4628      	mov	r0, r5
   8203e:	4b14      	ldr	r3, [pc, #80]	; (82090 <xTaskRemoveFromEventList+0x68>)
   82040:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82042:	4b14      	ldr	r3, [pc, #80]	; (82094 <xTaskRemoveFromEventList+0x6c>)
   82044:	681b      	ldr	r3, [r3, #0]
   82046:	b99b      	cbnz	r3, 82070 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   82048:	1d25      	adds	r5, r4, #4
   8204a:	4628      	mov	r0, r5
   8204c:	4b10      	ldr	r3, [pc, #64]	; (82090 <xTaskRemoveFromEventList+0x68>)
   8204e:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   82050:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   82052:	4a11      	ldr	r2, [pc, #68]	; (82098 <xTaskRemoveFromEventList+0x70>)
   82054:	6812      	ldr	r2, [r2, #0]
   82056:	4293      	cmp	r3, r2
   82058:	bf84      	itt	hi
   8205a:	4a0f      	ldrhi	r2, [pc, #60]	; (82098 <xTaskRemoveFromEventList+0x70>)
   8205c:	6013      	strhi	r3, [r2, #0]
   8205e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82062:	480e      	ldr	r0, [pc, #56]	; (8209c <xTaskRemoveFromEventList+0x74>)
   82064:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   82068:	4629      	mov	r1, r5
   8206a:	4b0d      	ldr	r3, [pc, #52]	; (820a0 <xTaskRemoveFromEventList+0x78>)
   8206c:	4798      	blx	r3
   8206e:	e003      	b.n	82078 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   82070:	480c      	ldr	r0, [pc, #48]	; (820a4 <xTaskRemoveFromEventList+0x7c>)
   82072:	4629      	mov	r1, r5
   82074:	4b0a      	ldr	r3, [pc, #40]	; (820a0 <xTaskRemoveFromEventList+0x78>)
   82076:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   82078:	4b0b      	ldr	r3, [pc, #44]	; (820a8 <xTaskRemoveFromEventList+0x80>)
   8207a:	681b      	ldr	r3, [r3, #0]
   8207c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   82080:	4298      	cmp	r0, r3
   82082:	bf34      	ite	cc
   82084:	2000      	movcc	r0, #0
   82086:	2001      	movcs	r0, #1
   82088:	bd38      	pop	{r3, r4, r5, pc}
   8208a:	bf00      	nop
   8208c:	000810f5 	.word	0x000810f5
   82090:	0008106d 	.word	0x0008106d
   82094:	20079020 	.word	0x20079020
   82098:	20078f38 	.word	0x20078f38
   8209c:	20078f3c 	.word	0x20078f3c
   820a0:	0008100d 	.word	0x0008100d
   820a4:	2007900c 	.word	0x2007900c
   820a8:	20079008 	.word	0x20079008

000820ac <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   820ac:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   820ae:	b918      	cbnz	r0, 820b8 <vTaskSetTimeOutState+0xc>
   820b0:	4b05      	ldr	r3, [pc, #20]	; (820c8 <vTaskSetTimeOutState+0x1c>)
   820b2:	4798      	blx	r3
   820b4:	bf00      	nop
   820b6:	e7fd      	b.n	820b4 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   820b8:	4a04      	ldr	r2, [pc, #16]	; (820cc <vTaskSetTimeOutState+0x20>)
   820ba:	6812      	ldr	r2, [r2, #0]
   820bc:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   820be:	4a04      	ldr	r2, [pc, #16]	; (820d0 <vTaskSetTimeOutState+0x24>)
   820c0:	8812      	ldrh	r2, [r2, #0]
   820c2:	8082      	strh	r2, [r0, #4]
   820c4:	bd08      	pop	{r3, pc}
   820c6:	bf00      	nop
   820c8:	000810f5 	.word	0x000810f5
   820cc:	20079004 	.word	0x20079004
   820d0:	20079024 	.word	0x20079024

000820d4 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   820d4:	b538      	push	{r3, r4, r5, lr}
   820d6:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   820d8:	4604      	mov	r4, r0
   820da:	b918      	cbnz	r0, 820e4 <xTaskCheckForTimeOut+0x10>
   820dc:	4b1b      	ldr	r3, [pc, #108]	; (8214c <xTaskCheckForTimeOut+0x78>)
   820de:	4798      	blx	r3
   820e0:	bf00      	nop
   820e2:	e7fd      	b.n	820e0 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
   820e4:	b919      	cbnz	r1, 820ee <xTaskCheckForTimeOut+0x1a>
   820e6:	4b19      	ldr	r3, [pc, #100]	; (8214c <xTaskCheckForTimeOut+0x78>)
   820e8:	4798      	blx	r3
   820ea:	bf00      	nop
   820ec:	e7fd      	b.n	820ea <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   820ee:	4b18      	ldr	r3, [pc, #96]	; (82150 <xTaskCheckForTimeOut+0x7c>)
   820f0:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   820f2:	882b      	ldrh	r3, [r5, #0]
   820f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   820f8:	4293      	cmp	r3, r2
   820fa:	d01d      	beq.n	82138 <xTaskCheckForTimeOut+0x64>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   820fc:	4a15      	ldr	r2, [pc, #84]	; (82154 <xTaskCheckForTimeOut+0x80>)
   820fe:	6811      	ldr	r1, [r2, #0]
   82100:	6822      	ldr	r2, [r4, #0]
   82102:	428a      	cmp	r2, r1
   82104:	d005      	beq.n	82112 <xTaskCheckForTimeOut+0x3e>
   82106:	4a14      	ldr	r2, [pc, #80]	; (82158 <xTaskCheckForTimeOut+0x84>)
   82108:	8812      	ldrh	r2, [r2, #0]
   8210a:	b292      	uxth	r2, r2
   8210c:	88a1      	ldrh	r1, [r4, #4]
   8210e:	4291      	cmp	r1, r2
   82110:	d914      	bls.n	8213c <xTaskCheckForTimeOut+0x68>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   82112:	4a11      	ldr	r2, [pc, #68]	; (82158 <xTaskCheckForTimeOut+0x84>)
   82114:	8811      	ldrh	r1, [r2, #0]
   82116:	b289      	uxth	r1, r1
   82118:	88a2      	ldrh	r2, [r4, #4]
   8211a:	1a89      	subs	r1, r1, r2
   8211c:	b289      	uxth	r1, r1
   8211e:	428b      	cmp	r3, r1
   82120:	d90e      	bls.n	82140 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   82122:	490d      	ldr	r1, [pc, #52]	; (82158 <xTaskCheckForTimeOut+0x84>)
   82124:	8809      	ldrh	r1, [r1, #0]
   82126:	b289      	uxth	r1, r1
   82128:	1a52      	subs	r2, r2, r1
   8212a:	4413      	add	r3, r2
   8212c:	802b      	strh	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   8212e:	4620      	mov	r0, r4
   82130:	4b0a      	ldr	r3, [pc, #40]	; (8215c <xTaskCheckForTimeOut+0x88>)
   82132:	4798      	blx	r3
			xReturn = pdFALSE;
   82134:	2400      	movs	r4, #0
   82136:	e004      	b.n	82142 <xTaskCheckForTimeOut+0x6e>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   82138:	2400      	movs	r4, #0
   8213a:	e002      	b.n	82142 <xTaskCheckForTimeOut+0x6e>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   8213c:	2401      	movs	r4, #1
   8213e:	e000      	b.n	82142 <xTaskCheckForTimeOut+0x6e>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   82140:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   82142:	4b07      	ldr	r3, [pc, #28]	; (82160 <xTaskCheckForTimeOut+0x8c>)
   82144:	4798      	blx	r3

	return xReturn;
}
   82146:	4620      	mov	r0, r4
   82148:	bd38      	pop	{r3, r4, r5, pc}
   8214a:	bf00      	nop
   8214c:	000810f5 	.word	0x000810f5
   82150:	00081105 	.word	0x00081105
   82154:	20079004 	.word	0x20079004
   82158:	20079024 	.word	0x20079024
   8215c:	000820ad 	.word	0x000820ad
   82160:	00081125 	.word	0x00081125

00082164 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   82164:	2201      	movs	r2, #1
   82166:	4b01      	ldr	r3, [pc, #4]	; (8216c <vTaskMissedYield+0x8>)
   82168:	601a      	str	r2, [r3, #0]
   8216a:	4770      	bx	lr
   8216c:	20079044 	.word	0x20079044

00082170 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   82170:	4b01      	ldr	r3, [pc, #4]	; (82178 <xTaskGetCurrentTaskHandle+0x8>)
   82172:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   82174:	4770      	bx	lr
   82176:	bf00      	nop
   82178:	20079008 	.word	0x20079008

0008217c <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   8217c:	4b05      	ldr	r3, [pc, #20]	; (82194 <xTaskGetSchedulerState+0x18>)
   8217e:	681b      	ldr	r3, [r3, #0]
   82180:	b133      	cbz	r3, 82190 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82182:	4b05      	ldr	r3, [pc, #20]	; (82198 <xTaskGetSchedulerState+0x1c>)
   82184:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   82186:	2b00      	cmp	r3, #0
   82188:	bf14      	ite	ne
   8218a:	2002      	movne	r0, #2
   8218c:	2001      	moveq	r0, #1
   8218e:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   82190:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   82192:	4770      	bx	lr
   82194:	20078f08 	.word	0x20078f08
   82198:	20079020 	.word	0x20079020

0008219c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   8219c:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   8219e:	4604      	mov	r4, r0
   821a0:	2800      	cmp	r0, #0
   821a2:	d02e      	beq.n	82202 <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   821a4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   821a6:	4a17      	ldr	r2, [pc, #92]	; (82204 <vTaskPriorityInherit+0x68>)
   821a8:	6812      	ldr	r2, [r2, #0]
   821aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   821ac:	4293      	cmp	r3, r2
   821ae:	d228      	bcs.n	82202 <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   821b0:	4a14      	ldr	r2, [pc, #80]	; (82204 <vTaskPriorityInherit+0x68>)
   821b2:	6812      	ldr	r2, [r2, #0]
   821b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   821b6:	f1c2 020a 	rsb	r2, r2, #10
   821ba:	8302      	strh	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   821bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   821c0:	4a11      	ldr	r2, [pc, #68]	; (82208 <vTaskPriorityInherit+0x6c>)
   821c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   821c6:	6942      	ldr	r2, [r0, #20]
   821c8:	429a      	cmp	r2, r3
   821ca:	d116      	bne.n	821fa <vTaskPriorityInherit+0x5e>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   821cc:	1d05      	adds	r5, r0, #4
   821ce:	4628      	mov	r0, r5
   821d0:	4b0e      	ldr	r3, [pc, #56]	; (8220c <vTaskPriorityInherit+0x70>)
   821d2:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   821d4:	4b0b      	ldr	r3, [pc, #44]	; (82204 <vTaskPriorityInherit+0x68>)
   821d6:	681b      	ldr	r3, [r3, #0]
   821d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   821da:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   821dc:	4a0c      	ldr	r2, [pc, #48]	; (82210 <vTaskPriorityInherit+0x74>)
   821de:	6812      	ldr	r2, [r2, #0]
   821e0:	4293      	cmp	r3, r2
   821e2:	bf84      	itt	hi
   821e4:	4a0a      	ldrhi	r2, [pc, #40]	; (82210 <vTaskPriorityInherit+0x74>)
   821e6:	6013      	strhi	r3, [r2, #0]
   821e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   821ec:	4806      	ldr	r0, [pc, #24]	; (82208 <vTaskPriorityInherit+0x6c>)
   821ee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   821f2:	4629      	mov	r1, r5
   821f4:	4b07      	ldr	r3, [pc, #28]	; (82214 <vTaskPriorityInherit+0x78>)
   821f6:	4798      	blx	r3
   821f8:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   821fa:	4b02      	ldr	r3, [pc, #8]	; (82204 <vTaskPriorityInherit+0x68>)
   821fc:	681b      	ldr	r3, [r3, #0]
   821fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82200:	62c3      	str	r3, [r0, #44]	; 0x2c
   82202:	bd38      	pop	{r3, r4, r5, pc}
   82204:	20079008 	.word	0x20079008
   82208:	20078f3c 	.word	0x20078f3c
   8220c:	0008106d 	.word	0x0008106d
   82210:	20078f38 	.word	0x20078f38
   82214:	0008100d 	.word	0x0008100d

00082218 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   82218:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   8221a:	4604      	mov	r4, r0
   8221c:	b1d0      	cbz	r0, 82254 <vTaskPriorityDisinherit+0x3c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   8221e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   82220:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   82222:	429a      	cmp	r2, r3
   82224:	d016      	beq.n	82254 <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82226:	1d05      	adds	r5, r0, #4
   82228:	4628      	mov	r0, r5
   8222a:	4b0b      	ldr	r3, [pc, #44]	; (82258 <vTaskPriorityDisinherit+0x40>)
   8222c:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   8222e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   82230:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   82232:	f1c3 020a 	rsb	r2, r3, #10
   82236:	8322      	strh	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   82238:	4a08      	ldr	r2, [pc, #32]	; (8225c <vTaskPriorityDisinherit+0x44>)
   8223a:	6812      	ldr	r2, [r2, #0]
   8223c:	4293      	cmp	r3, r2
   8223e:	bf84      	itt	hi
   82240:	4a06      	ldrhi	r2, [pc, #24]	; (8225c <vTaskPriorityDisinherit+0x44>)
   82242:	6013      	strhi	r3, [r2, #0]
   82244:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82248:	4805      	ldr	r0, [pc, #20]	; (82260 <vTaskPriorityDisinherit+0x48>)
   8224a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   8224e:	4629      	mov	r1, r5
   82250:	4b04      	ldr	r3, [pc, #16]	; (82264 <vTaskPriorityDisinherit+0x4c>)
   82252:	4798      	blx	r3
   82254:	bd38      	pop	{r3, r4, r5, pc}
   82256:	bf00      	nop
   82258:	0008106d 	.word	0x0008106d
   8225c:	20078f38 	.word	0x20078f38
   82260:	20078f3c 	.word	0x20078f3c
   82264:	0008100d 	.word	0x0008100d

00082268 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   82268:	b510      	push	{r4, lr}
   8226a:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   8226c:	8081      	strh	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   8226e:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   82270:	4291      	cmp	r1, r2
   82272:	d80b      	bhi.n	8228c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   82274:	1ad3      	subs	r3, r2, r3
   82276:	8b01      	ldrh	r1, [r0, #24]
   82278:	b29b      	uxth	r3, r3
   8227a:	4299      	cmp	r1, r3
   8227c:	d911      	bls.n	822a2 <prvInsertTimerInActiveList+0x3a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   8227e:	4b0b      	ldr	r3, [pc, #44]	; (822ac <prvInsertTimerInActiveList+0x44>)
   82280:	6818      	ldr	r0, [r3, #0]
   82282:	1d21      	adds	r1, r4, #4
   82284:	4b0a      	ldr	r3, [pc, #40]	; (822b0 <prvInsertTimerInActiveList+0x48>)
   82286:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   82288:	2000      	movs	r0, #0
   8228a:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   8228c:	429a      	cmp	r2, r3
   8228e:	d201      	bcs.n	82294 <prvInsertTimerInActiveList+0x2c>
   82290:	4299      	cmp	r1, r3
   82292:	d208      	bcs.n	822a6 <prvInsertTimerInActiveList+0x3e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82294:	4b07      	ldr	r3, [pc, #28]	; (822b4 <prvInsertTimerInActiveList+0x4c>)
   82296:	6818      	ldr	r0, [r3, #0]
   82298:	1d21      	adds	r1, r4, #4
   8229a:	4b05      	ldr	r3, [pc, #20]	; (822b0 <prvInsertTimerInActiveList+0x48>)
   8229c:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   8229e:	2000      	movs	r0, #0
   822a0:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   822a2:	2001      	movs	r0, #1
   822a4:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   822a6:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   822a8:	bd10      	pop	{r4, pc}
   822aa:	bf00      	nop
   822ac:	20079084 	.word	0x20079084
   822b0:	00081029 	.word	0x00081029
   822b4:	20079050 	.word	0x20079050

000822b8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   822b8:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   822ba:	4b0d      	ldr	r3, [pc, #52]	; (822f0 <prvCheckForValidListAndQueue+0x38>)
   822bc:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   822be:	4b0d      	ldr	r3, [pc, #52]	; (822f4 <prvCheckForValidListAndQueue+0x3c>)
   822c0:	681b      	ldr	r3, [r3, #0]
   822c2:	b98b      	cbnz	r3, 822e8 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   822c4:	4d0c      	ldr	r5, [pc, #48]	; (822f8 <prvCheckForValidListAndQueue+0x40>)
   822c6:	4628      	mov	r0, r5
   822c8:	4e0c      	ldr	r6, [pc, #48]	; (822fc <prvCheckForValidListAndQueue+0x44>)
   822ca:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   822cc:	4c0c      	ldr	r4, [pc, #48]	; (82300 <prvCheckForValidListAndQueue+0x48>)
   822ce:	4620      	mov	r0, r4
   822d0:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   822d2:	4b0c      	ldr	r3, [pc, #48]	; (82304 <prvCheckForValidListAndQueue+0x4c>)
   822d4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   822d6:	4b0c      	ldr	r3, [pc, #48]	; (82308 <prvCheckForValidListAndQueue+0x50>)
   822d8:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   822da:	2005      	movs	r0, #5
   822dc:	210c      	movs	r1, #12
   822de:	2200      	movs	r2, #0
   822e0:	4b0a      	ldr	r3, [pc, #40]	; (8230c <prvCheckForValidListAndQueue+0x54>)
   822e2:	4798      	blx	r3
   822e4:	4b03      	ldr	r3, [pc, #12]	; (822f4 <prvCheckForValidListAndQueue+0x3c>)
   822e6:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   822e8:	4b09      	ldr	r3, [pc, #36]	; (82310 <prvCheckForValidListAndQueue+0x58>)
   822ea:	4798      	blx	r3
   822ec:	bd70      	pop	{r4, r5, r6, pc}
   822ee:	bf00      	nop
   822f0:	00081105 	.word	0x00081105
   822f4:	20079080 	.word	0x20079080
   822f8:	20079054 	.word	0x20079054
   822fc:	00080fed 	.word	0x00080fed
   82300:	20079068 	.word	0x20079068
   82304:	20079050 	.word	0x20079050
   82308:	20079084 	.word	0x20079084
   8230c:	000814dd 	.word	0x000814dd
   82310:	00081125 	.word	0x00081125

00082314 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   82314:	b510      	push	{r4, lr}
   82316:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   82318:	4b0b      	ldr	r3, [pc, #44]	; (82348 <xTimerCreateTimerTask+0x34>)
   8231a:	4798      	blx	r3

	if( xTimerQueue != NULL )
   8231c:	4b0b      	ldr	r3, [pc, #44]	; (8234c <xTimerCreateTimerTask+0x38>)
   8231e:	681b      	ldr	r3, [r3, #0]
   82320:	b163      	cbz	r3, 8233c <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   82322:	2309      	movs	r3, #9
   82324:	9300      	str	r3, [sp, #0]
   82326:	2300      	movs	r3, #0
   82328:	9301      	str	r3, [sp, #4]
   8232a:	9302      	str	r3, [sp, #8]
   8232c:	9303      	str	r3, [sp, #12]
   8232e:	4808      	ldr	r0, [pc, #32]	; (82350 <xTimerCreateTimerTask+0x3c>)
   82330:	4908      	ldr	r1, [pc, #32]	; (82354 <xTimerCreateTimerTask+0x40>)
   82332:	f44f 7200 	mov.w	r2, #512	; 0x200
   82336:	4c08      	ldr	r4, [pc, #32]	; (82358 <xTimerCreateTimerTask+0x44>)
   82338:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   8233a:	b918      	cbnz	r0, 82344 <xTimerCreateTimerTask+0x30>
   8233c:	4b07      	ldr	r3, [pc, #28]	; (8235c <xTimerCreateTimerTask+0x48>)
   8233e:	4798      	blx	r3
   82340:	bf00      	nop
   82342:	e7fd      	b.n	82340 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   82344:	b004      	add	sp, #16
   82346:	bd10      	pop	{r4, pc}
   82348:	000822b9 	.word	0x000822b9
   8234c:	20079080 	.word	0x20079080
   82350:	00082475 	.word	0x00082475
   82354:	000860a4 	.word	0x000860a4
   82358:	000818f5 	.word	0x000818f5
   8235c:	000810f5 	.word	0x000810f5

00082360 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   82360:	b510      	push	{r4, lr}
   82362:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   82364:	4c10      	ldr	r4, [pc, #64]	; (823a8 <xTimerGenericCommand+0x48>)
   82366:	6824      	ldr	r4, [r4, #0]
   82368:	b1d4      	cbz	r4, 823a0 <xTimerGenericCommand+0x40>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   8236a:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   8236c:	f8ad 2008 	strh.w	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   82370:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   82372:	b973      	cbnz	r3, 82392 <xTimerGenericCommand+0x32>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   82374:	4b0d      	ldr	r3, [pc, #52]	; (823ac <xTimerGenericCommand+0x4c>)
   82376:	4798      	blx	r3
   82378:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   8237a:	4b0b      	ldr	r3, [pc, #44]	; (823a8 <xTimerGenericCommand+0x48>)
   8237c:	6818      	ldr	r0, [r3, #0]
   8237e:	a901      	add	r1, sp, #4
   82380:	bf07      	ittee	eq
   82382:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
   82386:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   82388:	2200      	movne	r2, #0
   8238a:	4613      	movne	r3, r2
   8238c:	4c08      	ldr	r4, [pc, #32]	; (823b0 <xTimerGenericCommand+0x50>)
   8238e:	47a0      	blx	r4
   82390:	e007      	b.n	823a2 <xTimerGenericCommand+0x42>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   82392:	4620      	mov	r0, r4
   82394:	a901      	add	r1, sp, #4
   82396:	461a      	mov	r2, r3
   82398:	2300      	movs	r3, #0
   8239a:	4c06      	ldr	r4, [pc, #24]	; (823b4 <xTimerGenericCommand+0x54>)
   8239c:	47a0      	blx	r4
   8239e:	e000      	b.n	823a2 <xTimerGenericCommand+0x42>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   823a0:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   823a2:	b004      	add	sp, #16
   823a4:	bd10      	pop	{r4, pc}
   823a6:	bf00      	nop
   823a8:	20079080 	.word	0x20079080
   823ac:	0008217d 	.word	0x0008217d
   823b0:	00081535 	.word	0x00081535
   823b4:	00081659 	.word	0x00081659

000823b8 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   823b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   823bc:	b082      	sub	sp, #8
   823be:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   823c0:	4b24      	ldr	r3, [pc, #144]	; (82454 <prvSampleTimeNow+0x9c>)
   823c2:	4798      	blx	r3
   823c4:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   823c6:	4b24      	ldr	r3, [pc, #144]	; (82458 <prvSampleTimeNow+0xa0>)
   823c8:	881b      	ldrh	r3, [r3, #0]
   823ca:	4283      	cmp	r3, r0
   823cc:	d937      	bls.n	8243e <prvSampleTimeNow+0x86>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   823ce:	4e23      	ldr	r6, [pc, #140]	; (8245c <prvSampleTimeNow+0xa4>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   823d0:	4f23      	ldr	r7, [pc, #140]	; (82460 <prvSampleTimeNow+0xa8>)
   823d2:	e027      	b.n	82424 <prvSampleTimeNow+0x6c>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   823d4:	68da      	ldr	r2, [r3, #12]
   823d6:	f8b2 a000 	ldrh.w	sl, [r2]
   823da:	fa1f fa8a 	uxth.w	sl, sl

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   823de:	68db      	ldr	r3, [r3, #12]
   823e0:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   823e2:	1d25      	adds	r5, r4, #4
   823e4:	4628      	mov	r0, r5
   823e6:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   823e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   823ea:	4620      	mov	r0, r4
   823ec:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   823ee:	69e3      	ldr	r3, [r4, #28]
   823f0:	2b01      	cmp	r3, #1
   823f2:	d117      	bne.n	82424 <prvSampleTimeNow+0x6c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   823f4:	8b23      	ldrh	r3, [r4, #24]
   823f6:	4453      	add	r3, sl
   823f8:	b29b      	uxth	r3, r3
			if( xReloadTime > xNextExpireTime )
   823fa:	4553      	cmp	r3, sl
   823fc:	d906      	bls.n	8240c <prvSampleTimeNow+0x54>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   823fe:	80a3      	strh	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   82400:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82402:	6830      	ldr	r0, [r6, #0]
   82404:	4629      	mov	r1, r5
   82406:	4b17      	ldr	r3, [pc, #92]	; (82464 <prvSampleTimeNow+0xac>)
   82408:	4798      	blx	r3
   8240a:	e00b      	b.n	82424 <prvSampleTimeNow+0x6c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   8240c:	2300      	movs	r3, #0
   8240e:	9300      	str	r3, [sp, #0]
   82410:	4620      	mov	r0, r4
   82412:	4619      	mov	r1, r3
   82414:	4652      	mov	r2, sl
   82416:	4c14      	ldr	r4, [pc, #80]	; (82468 <prvSampleTimeNow+0xb0>)
   82418:	47a0      	blx	r4
				configASSERT( xResult );
   8241a:	b918      	cbnz	r0, 82424 <prvSampleTimeNow+0x6c>
   8241c:	4b13      	ldr	r3, [pc, #76]	; (8246c <prvSampleTimeNow+0xb4>)
   8241e:	4798      	blx	r3
   82420:	bf00      	nop
   82422:	e7fd      	b.n	82420 <prvSampleTimeNow+0x68>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82424:	6833      	ldr	r3, [r6, #0]
   82426:	681a      	ldr	r2, [r3, #0]
   82428:	2a00      	cmp	r2, #0
   8242a:	d1d3      	bne.n	823d4 <prvSampleTimeNow+0x1c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   8242c:	4a10      	ldr	r2, [pc, #64]	; (82470 <prvSampleTimeNow+0xb8>)
   8242e:	6811      	ldr	r1, [r2, #0]
   82430:	480a      	ldr	r0, [pc, #40]	; (8245c <prvSampleTimeNow+0xa4>)
   82432:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   82434:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   82436:	2301      	movs	r3, #1
   82438:	f8c9 3000 	str.w	r3, [r9]
   8243c:	e002      	b.n	82444 <prvSampleTimeNow+0x8c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   8243e:	2300      	movs	r3, #0
   82440:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   82444:	4b04      	ldr	r3, [pc, #16]	; (82458 <prvSampleTimeNow+0xa0>)
   82446:	f8a3 8000 	strh.w	r8, [r3]

	return xTimeNow;
}
   8244a:	4640      	mov	r0, r8
   8244c:	b002      	add	sp, #8
   8244e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82452:	bf00      	nop
   82454:	00081b79 	.word	0x00081b79
   82458:	2007907c 	.word	0x2007907c
   8245c:	20079050 	.word	0x20079050
   82460:	0008106d 	.word	0x0008106d
   82464:	00081029 	.word	0x00081029
   82468:	00082361 	.word	0x00082361
   8246c:	000810f5 	.word	0x000810f5
   82470:	20079084 	.word	0x20079084

00082474 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   82474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82478:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   8247a:	4d51      	ldr	r5, [pc, #324]	; (825c0 <prvTimerTask+0x14c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   8247c:	f8df 8170 	ldr.w	r8, [pc, #368]	; 825f0 <prvTimerTask+0x17c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   82480:	4b50      	ldr	r3, [pc, #320]	; (825c4 <prvTimerTask+0x150>)
   82482:	681b      	ldr	r3, [r3, #0]
   82484:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   82486:	2a00      	cmp	r2, #0
   82488:	f000 8090 	beq.w	825ac <prvTimerTask+0x138>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   8248c:	68db      	ldr	r3, [r3, #12]
   8248e:	881e      	ldrh	r6, [r3, #0]
   82490:	b2b6      	uxth	r6, r6
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82492:	4b4d      	ldr	r3, [pc, #308]	; (825c8 <prvTimerTask+0x154>)
   82494:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82496:	a803      	add	r0, sp, #12
   82498:	4b4c      	ldr	r3, [pc, #304]	; (825cc <prvTimerTask+0x158>)
   8249a:	4798      	blx	r3
   8249c:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   8249e:	9b03      	ldr	r3, [sp, #12]
   824a0:	2b00      	cmp	r3, #0
   824a2:	d132      	bne.n	8250a <prvTimerTask+0x96>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   824a4:	4286      	cmp	r6, r0
   824a6:	d825      	bhi.n	824f4 <prvTimerTask+0x80>
			{
				xTaskResumeAll();
   824a8:	4b49      	ldr	r3, [pc, #292]	; (825d0 <prvTimerTask+0x15c>)
   824aa:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   824ac:	4b45      	ldr	r3, [pc, #276]	; (825c4 <prvTimerTask+0x150>)
   824ae:	681b      	ldr	r3, [r3, #0]
   824b0:	68db      	ldr	r3, [r3, #12]
   824b2:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   824b4:	1d20      	adds	r0, r4, #4
   824b6:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   824b8:	69e3      	ldr	r3, [r4, #28]
   824ba:	2b01      	cmp	r3, #1
   824bc:	d115      	bne.n	824ea <prvTimerTask+0x76>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   824be:	8b21      	ldrh	r1, [r4, #24]
   824c0:	4431      	add	r1, r6
   824c2:	4620      	mov	r0, r4
   824c4:	b289      	uxth	r1, r1
   824c6:	463a      	mov	r2, r7
   824c8:	4633      	mov	r3, r6
   824ca:	4f42      	ldr	r7, [pc, #264]	; (825d4 <prvTimerTask+0x160>)
   824cc:	47b8      	blx	r7
   824ce:	2801      	cmp	r0, #1
   824d0:	d10b      	bne.n	824ea <prvTimerTask+0x76>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   824d2:	2300      	movs	r3, #0
   824d4:	9300      	str	r3, [sp, #0]
   824d6:	4620      	mov	r0, r4
   824d8:	4619      	mov	r1, r3
   824da:	4632      	mov	r2, r6
   824dc:	4e3e      	ldr	r6, [pc, #248]	; (825d8 <prvTimerTask+0x164>)
   824de:	47b0      	blx	r6
			configASSERT( xResult );
   824e0:	b918      	cbnz	r0, 824ea <prvTimerTask+0x76>
   824e2:	4b3e      	ldr	r3, [pc, #248]	; (825dc <prvTimerTask+0x168>)
   824e4:	4798      	blx	r3
   824e6:	bf00      	nop
   824e8:	e7fd      	b.n	824e6 <prvTimerTask+0x72>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   824ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   824ec:	4620      	mov	r0, r4
   824ee:	4798      	blx	r3
   824f0:	e00d      	b.n	8250e <prvTimerTask+0x9a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   824f2:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   824f4:	1bf1      	subs	r1, r6, r7
   824f6:	6828      	ldr	r0, [r5, #0]
   824f8:	b289      	uxth	r1, r1
   824fa:	4b39      	ldr	r3, [pc, #228]	; (825e0 <prvTimerTask+0x16c>)
   824fc:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   824fe:	4b34      	ldr	r3, [pc, #208]	; (825d0 <prvTimerTask+0x15c>)
   82500:	4798      	blx	r3
   82502:	b920      	cbnz	r0, 8250e <prvTimerTask+0x9a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   82504:	4b37      	ldr	r3, [pc, #220]	; (825e4 <prvTimerTask+0x170>)
   82506:	4798      	blx	r3
   82508:	e001      	b.n	8250e <prvTimerTask+0x9a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   8250a:	4b31      	ldr	r3, [pc, #196]	; (825d0 <prvTimerTask+0x15c>)
   8250c:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8250e:	a802      	add	r0, sp, #8
   82510:	4b2e      	ldr	r3, [pc, #184]	; (825cc <prvTimerTask+0x158>)
   82512:	4798      	blx	r3
   82514:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   82516:	4e34      	ldr	r6, [pc, #208]	; (825e8 <prvTimerTask+0x174>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82518:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 825d4 <prvTimerTask+0x160>
   8251c:	e03e      	b.n	8259c <prvTimerTask+0x128>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   8251e:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   82520:	b11c      	cbz	r4, 8252a <prvTimerTask+0xb6>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   82522:	6961      	ldr	r1, [r4, #20]
   82524:	b109      	cbz	r1, 8252a <prvTimerTask+0xb6>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   82526:	1d20      	adds	r0, r4, #4
   82528:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   8252a:	9903      	ldr	r1, [sp, #12]
   8252c:	2902      	cmp	r1, #2
   8252e:	d023      	beq.n	82578 <prvTimerTask+0x104>
   82530:	2903      	cmp	r1, #3
   82532:	d030      	beq.n	82596 <prvTimerTask+0x122>
   82534:	2900      	cmp	r1, #0
   82536:	d131      	bne.n	8259c <prvTimerTask+0x128>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   82538:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   8253c:	8b21      	ldrh	r1, [r4, #24]
   8253e:	4419      	add	r1, r3
   82540:	4620      	mov	r0, r4
   82542:	b289      	uxth	r1, r1
   82544:	463a      	mov	r2, r7
   82546:	47c8      	blx	r9
   82548:	2801      	cmp	r0, #1
   8254a:	d127      	bne.n	8259c <prvTimerTask+0x128>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8254c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8254e:	4620      	mov	r0, r4
   82550:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82552:	69e3      	ldr	r3, [r4, #28]
   82554:	2b01      	cmp	r3, #1
   82556:	d121      	bne.n	8259c <prvTimerTask+0x128>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   82558:	8b22      	ldrh	r2, [r4, #24]
   8255a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   8255e:	441a      	add	r2, r3
   82560:	2300      	movs	r3, #0
   82562:	9300      	str	r3, [sp, #0]
   82564:	4620      	mov	r0, r4
   82566:	4619      	mov	r1, r3
   82568:	b292      	uxth	r2, r2
   8256a:	4c1b      	ldr	r4, [pc, #108]	; (825d8 <prvTimerTask+0x164>)
   8256c:	47a0      	blx	r4
						configASSERT( xResult );
   8256e:	b9a8      	cbnz	r0, 8259c <prvTimerTask+0x128>
   82570:	4b1a      	ldr	r3, [pc, #104]	; (825dc <prvTimerTask+0x168>)
   82572:	4798      	blx	r3
   82574:	bf00      	nop
   82576:	e7fd      	b.n	82574 <prvTimerTask+0x100>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   82578:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   8257c:	8323      	strh	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   8257e:	b91b      	cbnz	r3, 82588 <prvTimerTask+0x114>
   82580:	4b16      	ldr	r3, [pc, #88]	; (825dc <prvTimerTask+0x168>)
   82582:	4798      	blx	r3
   82584:	bf00      	nop
   82586:	e7fd      	b.n	82584 <prvTimerTask+0x110>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82588:	18f9      	adds	r1, r7, r3
   8258a:	4620      	mov	r0, r4
   8258c:	b289      	uxth	r1, r1
   8258e:	463a      	mov	r2, r7
   82590:	463b      	mov	r3, r7
   82592:	47c8      	blx	r9
   82594:	e002      	b.n	8259c <prvTimerTask+0x128>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   82596:	4620      	mov	r0, r4
   82598:	4b14      	ldr	r3, [pc, #80]	; (825ec <prvTimerTask+0x178>)
   8259a:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   8259c:	6828      	ldr	r0, [r5, #0]
   8259e:	a903      	add	r1, sp, #12
   825a0:	2200      	movs	r2, #0
   825a2:	4613      	mov	r3, r2
   825a4:	47b0      	blx	r6
   825a6:	2800      	cmp	r0, #0
   825a8:	d1b9      	bne.n	8251e <prvTimerTask+0xaa>
   825aa:	e769      	b.n	82480 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   825ac:	4b06      	ldr	r3, [pc, #24]	; (825c8 <prvTimerTask+0x154>)
   825ae:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   825b0:	a803      	add	r0, sp, #12
   825b2:	4b06      	ldr	r3, [pc, #24]	; (825cc <prvTimerTask+0x158>)
   825b4:	4798      	blx	r3
   825b6:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   825b8:	9b03      	ldr	r3, [sp, #12]
   825ba:	2b00      	cmp	r3, #0
   825bc:	d099      	beq.n	824f2 <prvTimerTask+0x7e>
   825be:	e7a4      	b.n	8250a <prvTimerTask+0x96>
   825c0:	20079080 	.word	0x20079080
   825c4:	20079050 	.word	0x20079050
   825c8:	00081b69 	.word	0x00081b69
   825cc:	000823b9 	.word	0x000823b9
   825d0:	00081cc9 	.word	0x00081cc9
   825d4:	00082269 	.word	0x00082269
   825d8:	00082361 	.word	0x00082361
   825dc:	000810f5 	.word	0x000810f5
   825e0:	0008184d 	.word	0x0008184d
   825e4:	000810e5 	.word	0x000810e5
   825e8:	000816e9 	.word	0x000816e9
   825ec:	00081315 	.word	0x00081315
   825f0:	0008106d 	.word	0x0008106d

000825f4 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   825f4:	b4f0      	push	{r4, r5, r6, r7}
   825f6:	b08c      	sub	sp, #48	; 0x30
   825f8:	4607      	mov	r7, r0
   825fa:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   825fc:	ac01      	add	r4, sp, #4
   825fe:	4d12      	ldr	r5, [pc, #72]	; (82648 <pwm_clocks_generate+0x54>)
   82600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82608:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   8260c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   82610:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   82612:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   82614:	f852 4f04 	ldr.w	r4, [r2, #4]!
   82618:	fbb6 f4f4 	udiv	r4, r6, r4
   8261c:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   82620:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   82624:	d903      	bls.n	8262e <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   82626:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   82628:	2b0b      	cmp	r3, #11
   8262a:	d1f3      	bne.n	82614 <pwm_clocks_generate+0x20>
   8262c:	e004      	b.n	82638 <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   8262e:	2b0a      	cmp	r3, #10
   82630:	d805      	bhi.n	8263e <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   82632:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   82636:	e004      	b.n	82642 <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   82638:	f64f 70ff 	movw	r0, #65535	; 0xffff
   8263c:	e001      	b.n	82642 <pwm_clocks_generate+0x4e>
   8263e:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   82642:	b00c      	add	sp, #48	; 0x30
   82644:	bcf0      	pop	{r4, r5, r6, r7}
   82646:	4770      	bx	lr
   82648:	000860ac 	.word	0x000860ac

0008264c <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   8264c:	b570      	push	{r4, r5, r6, lr}
   8264e:	4606      	mov	r6, r0
   82650:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   82652:	6808      	ldr	r0, [r1, #0]
   82654:	b140      	cbz	r0, 82668 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   82656:	6889      	ldr	r1, [r1, #8]
   82658:	4b0b      	ldr	r3, [pc, #44]	; (82688 <pwm_init+0x3c>)
   8265a:	4798      	blx	r3
   8265c:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   8265e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   82662:	4298      	cmp	r0, r3
   82664:	d101      	bne.n	8266a <pwm_init+0x1e>
   82666:	e00e      	b.n	82686 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   82668:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   8266a:	6860      	ldr	r0, [r4, #4]
   8266c:	b140      	cbz	r0, 82680 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   8266e:	68a1      	ldr	r1, [r4, #8]
   82670:	4b05      	ldr	r3, [pc, #20]	; (82688 <pwm_init+0x3c>)
   82672:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   82674:	f64f 73ff 	movw	r3, #65535	; 0xffff
   82678:	4298      	cmp	r0, r3
   8267a:	d004      	beq.n	82686 <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   8267c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   82680:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   82682:	2000      	movs	r0, #0
   82684:	bd70      	pop	{r4, r5, r6, pc}
}
   82686:	bd70      	pop	{r4, r5, r6, pc}
   82688:	000825f5 	.word	0x000825f5

0008268c <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   8268c:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   8268e:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   82690:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   82692:	684a      	ldr	r2, [r1, #4]
   82694:	f002 020f 	and.w	r2, r2, #15
   82698:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   8269a:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   8269c:	432c      	orrs	r4, r5
   8269e:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   826a0:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   826a4:	7d8a      	ldrb	r2, [r1, #22]
   826a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   826aa:	7dca      	ldrb	r2, [r1, #23]
   826ac:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   826b0:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   826b2:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   826b6:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   826ba:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   826be:	68cc      	ldr	r4, [r1, #12]
   826c0:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   826c4:	690c      	ldr	r4, [r1, #16]
   826c6:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   826ca:	7d8a      	ldrb	r2, [r1, #22]
   826cc:	b13a      	cbz	r2, 826de <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   826ce:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   826d0:	8b4a      	ldrh	r2, [r1, #26]
   826d2:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   826d6:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   826da:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   826de:	6c85      	ldr	r5, [r0, #72]	; 0x48
   826e0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   826e4:	409a      	lsls	r2, r3
   826e6:	43d2      	mvns	r2, r2
   826e8:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   826ea:	7fce      	ldrb	r6, [r1, #31]
   826ec:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   826ee:	7f8c      	ldrb	r4, [r1, #30]
   826f0:	409c      	lsls	r4, r3
   826f2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   826f6:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   826f8:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   826fa:	6c44      	ldr	r4, [r0, #68]	; 0x44
   826fc:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   826fe:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   82702:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   82704:	f891 4020 	ldrb.w	r4, [r1, #32]
   82708:	409c      	lsls	r4, r3
   8270a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   8270e:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   82710:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   82712:	2201      	movs	r2, #1
   82714:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   82716:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   8271a:	b11c      	cbz	r4, 82724 <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   8271c:	6a04      	ldr	r4, [r0, #32]
   8271e:	4314      	orrs	r4, r2
   82720:	6204      	str	r4, [r0, #32]
   82722:	e003      	b.n	8272c <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   82724:	6a04      	ldr	r4, [r0, #32]
   82726:	ea24 0402 	bic.w	r4, r4, r2
   8272a:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   8272c:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   82730:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   82732:	6e84      	ldr	r4, [r0, #104]	; 0x68
   82734:	bf0c      	ite	eq
   82736:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   82738:	4394      	bicne	r4, r2
   8273a:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   8273c:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   82740:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   82742:	6e84      	ldr	r4, [r0, #104]	; 0x68
   82744:	bf0c      	ite	eq
   82746:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   8274a:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   8274e:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   82750:	2b03      	cmp	r3, #3
   82752:	d80c      	bhi.n	8276e <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   82754:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   82756:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   82758:	22ff      	movs	r2, #255	; 0xff
   8275a:	409a      	lsls	r2, r3
   8275c:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   82760:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   82764:	fa01 f303 	lsl.w	r3, r1, r3
   82768:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   8276a:	66c3      	str	r3, [r0, #108]	; 0x6c
   8276c:	e00c      	b.n	82788 <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   8276e:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   82770:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   82772:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   82774:	22ff      	movs	r2, #255	; 0xff
   82776:	409a      	lsls	r2, r3
   82778:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   8277c:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   82780:	fa01 f303 	lsl.w	r3, r1, r3
   82784:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   82786:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   82788:	2000      	movs	r0, #0
   8278a:	bc70      	pop	{r4, r5, r6}
   8278c:	4770      	bx	lr
   8278e:	bf00      	nop

00082790 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   82790:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   82792:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   82794:	690b      	ldr	r3, [r1, #16]
   82796:	4293      	cmp	r3, r2
   82798:	d306      	bcc.n	827a8 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   8279a:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   8279c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   827a0:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   827a4:	2000      	movs	r0, #0
   827a6:	e001      	b.n	827ac <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   827a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   827ac:	f85d 4b04 	ldr.w	r4, [sp], #4
   827b0:	4770      	bx	lr
   827b2:	bf00      	nop

000827b4 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   827b4:	2301      	movs	r3, #1
   827b6:	fa03 f101 	lsl.w	r1, r3, r1
   827ba:	6041      	str	r1, [r0, #4]
   827bc:	4770      	bx	lr
   827be:	bf00      	nop

000827c0 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   827c0:	2301      	movs	r3, #1
   827c2:	fa03 f101 	lsl.w	r1, r3, r1
   827c6:	6081      	str	r1, [r0, #8]
   827c8:	4770      	bx	lr
   827ca:	bf00      	nop

000827cc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   827cc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   827ce:	480e      	ldr	r0, [pc, #56]	; (82808 <sysclk_init+0x3c>)
   827d0:	4b0e      	ldr	r3, [pc, #56]	; (8280c <sysclk_init+0x40>)
   827d2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   827d4:	2000      	movs	r0, #0
   827d6:	213e      	movs	r1, #62	; 0x3e
   827d8:	4b0d      	ldr	r3, [pc, #52]	; (82810 <sysclk_init+0x44>)
   827da:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   827dc:	4c0d      	ldr	r4, [pc, #52]	; (82814 <sysclk_init+0x48>)
   827de:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   827e0:	2800      	cmp	r0, #0
   827e2:	d0fc      	beq.n	827de <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   827e4:	4b0c      	ldr	r3, [pc, #48]	; (82818 <sysclk_init+0x4c>)
   827e6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   827e8:	4a0c      	ldr	r2, [pc, #48]	; (8281c <sysclk_init+0x50>)
   827ea:	4b0d      	ldr	r3, [pc, #52]	; (82820 <sysclk_init+0x54>)
   827ec:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   827ee:	4c0d      	ldr	r4, [pc, #52]	; (82824 <sysclk_init+0x58>)
   827f0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   827f2:	2800      	cmp	r0, #0
   827f4:	d0fc      	beq.n	827f0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   827f6:	2010      	movs	r0, #16
   827f8:	4b0b      	ldr	r3, [pc, #44]	; (82828 <sysclk_init+0x5c>)
   827fa:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   827fc:	4b0b      	ldr	r3, [pc, #44]	; (8282c <sysclk_init+0x60>)
   827fe:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82800:	4801      	ldr	r0, [pc, #4]	; (82808 <sysclk_init+0x3c>)
   82802:	4b02      	ldr	r3, [pc, #8]	; (8280c <sysclk_init+0x40>)
   82804:	4798      	blx	r3
   82806:	bd10      	pop	{r4, pc}
   82808:	0501bd00 	.word	0x0501bd00
   8280c:	00082e81 	.word	0x00082e81
   82810:	00082bd5 	.word	0x00082bd5
   82814:	00082c29 	.word	0x00082c29
   82818:	00082c39 	.word	0x00082c39
   8281c:	200d3f01 	.word	0x200d3f01
   82820:	400e0600 	.word	0x400e0600
   82824:	00082c49 	.word	0x00082c49
   82828:	00082b71 	.word	0x00082b71
   8282c:	00082d65 	.word	0x00082d65

00082830 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   82830:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82832:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82836:	4b17      	ldr	r3, [pc, #92]	; (82894 <board_init+0x64>)
   82838:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8283a:	200b      	movs	r0, #11
   8283c:	4c16      	ldr	r4, [pc, #88]	; (82898 <board_init+0x68>)
   8283e:	47a0      	blx	r4
   82840:	200c      	movs	r0, #12
   82842:	47a0      	blx	r4
   82844:	200d      	movs	r0, #13
   82846:	47a0      	blx	r4
   82848:	200e      	movs	r0, #14
   8284a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8284c:	203b      	movs	r0, #59	; 0x3b
   8284e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82852:	4c12      	ldr	r4, [pc, #72]	; (8289c <board_init+0x6c>)
   82854:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   82856:	2055      	movs	r0, #85	; 0x55
   82858:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8285c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8285e:	2056      	movs	r0, #86	; 0x56
   82860:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82864:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   82866:	2068      	movs	r0, #104	; 0x68
   82868:	490d      	ldr	r1, [pc, #52]	; (828a0 <board_init+0x70>)
   8286a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8286c:	205c      	movs	r0, #92	; 0x5c
   8286e:	490d      	ldr	r1, [pc, #52]	; (828a4 <board_init+0x74>)
   82870:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   82872:	480d      	ldr	r0, [pc, #52]	; (828a8 <board_init+0x78>)
   82874:	f44f 7140 	mov.w	r1, #768	; 0x300
   82878:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8287c:	4b0b      	ldr	r3, [pc, #44]	; (828ac <board_init+0x7c>)
   8287e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   82880:	202b      	movs	r0, #43	; 0x2b
   82882:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82886:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   82888:	202a      	movs	r0, #42	; 0x2a
   8288a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8288e:	47a0      	blx	r4
   82890:	bd10      	pop	{r4, pc}
   82892:	bf00      	nop
   82894:	400e1a50 	.word	0x400e1a50
   82898:	00082c59 	.word	0x00082c59
   8289c:	00082955 	.word	0x00082955
   828a0:	28000079 	.word	0x28000079
   828a4:	28000001 	.word	0x28000001
   828a8:	400e0e00 	.word	0x400e0e00
   828ac:	00082a29 	.word	0x00082a29

000828b0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   828b0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   828b2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   828b6:	d016      	beq.n	828e6 <pio_set_peripheral+0x36>
   828b8:	d804      	bhi.n	828c4 <pio_set_peripheral+0x14>
   828ba:	b1c1      	cbz	r1, 828ee <pio_set_peripheral+0x3e>
   828bc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   828c0:	d00a      	beq.n	828d8 <pio_set_peripheral+0x28>
   828c2:	e013      	b.n	828ec <pio_set_peripheral+0x3c>
   828c4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   828c8:	d011      	beq.n	828ee <pio_set_peripheral+0x3e>
   828ca:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   828ce:	d00e      	beq.n	828ee <pio_set_peripheral+0x3e>
   828d0:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   828d4:	d10a      	bne.n	828ec <pio_set_peripheral+0x3c>
   828d6:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   828d8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   828da:	6f01      	ldr	r1, [r0, #112]	; 0x70
   828dc:	400b      	ands	r3, r1
   828de:	ea23 0302 	bic.w	r3, r3, r2
   828e2:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   828e4:	e002      	b.n	828ec <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   828e6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   828e8:	4313      	orrs	r3, r2
   828ea:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   828ec:	6042      	str	r2, [r0, #4]
   828ee:	4770      	bx	lr

000828f0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   828f0:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   828f2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   828f6:	bf14      	ite	ne
   828f8:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   828fa:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   828fc:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   82900:	bf14      	ite	ne
   82902:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82904:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82906:	f012 0f02 	tst.w	r2, #2
   8290a:	d002      	beq.n	82912 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   8290c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   82910:	e004      	b.n	8291c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82912:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   82916:	bf18      	it	ne
   82918:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8291c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8291e:	6001      	str	r1, [r0, #0]
   82920:	4770      	bx	lr
   82922:	bf00      	nop

00082924 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82924:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82926:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82928:	9c01      	ldr	r4, [sp, #4]
   8292a:	b10c      	cbz	r4, 82930 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   8292c:	6641      	str	r1, [r0, #100]	; 0x64
   8292e:	e000      	b.n	82932 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82930:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82932:	b10b      	cbz	r3, 82938 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   82934:	6501      	str	r1, [r0, #80]	; 0x50
   82936:	e000      	b.n	8293a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82938:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8293a:	b10a      	cbz	r2, 82940 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   8293c:	6301      	str	r1, [r0, #48]	; 0x30
   8293e:	e000      	b.n	82942 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82940:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   82942:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   82944:	6001      	str	r1, [r0, #0]
}
   82946:	f85d 4b04 	ldr.w	r4, [sp], #4
   8294a:	4770      	bx	lr

0008294c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8294c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8294e:	4770      	bx	lr

00082950 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   82950:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   82952:	4770      	bx	lr

00082954 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82954:	b570      	push	{r4, r5, r6, lr}
   82956:	b082      	sub	sp, #8
   82958:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8295a:	0944      	lsrs	r4, r0, #5
   8295c:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   82960:	f204 7407 	addw	r4, r4, #1799	; 0x707
   82964:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82966:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   8296a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8296e:	d030      	beq.n	829d2 <pio_configure_pin+0x7e>
   82970:	d806      	bhi.n	82980 <pio_configure_pin+0x2c>
   82972:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   82976:	d00a      	beq.n	8298e <pio_configure_pin+0x3a>
   82978:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   8297c:	d018      	beq.n	829b0 <pio_configure_pin+0x5c>
   8297e:	e049      	b.n	82a14 <pio_configure_pin+0xc0>
   82980:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   82984:	d030      	beq.n	829e8 <pio_configure_pin+0x94>
   82986:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8298a:	d02d      	beq.n	829e8 <pio_configure_pin+0x94>
   8298c:	e042      	b.n	82a14 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8298e:	f000 001f 	and.w	r0, r0, #31
   82992:	2401      	movs	r4, #1
   82994:	4084      	lsls	r4, r0
   82996:	4630      	mov	r0, r6
   82998:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8299c:	4622      	mov	r2, r4
   8299e:	4b1f      	ldr	r3, [pc, #124]	; (82a1c <pio_configure_pin+0xc8>)
   829a0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   829a2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   829a6:	bf14      	ite	ne
   829a8:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   829aa:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   829ac:	2001      	movs	r0, #1
   829ae:	e032      	b.n	82a16 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   829b0:	f000 001f 	and.w	r0, r0, #31
   829b4:	2401      	movs	r4, #1
   829b6:	4084      	lsls	r4, r0
   829b8:	4630      	mov	r0, r6
   829ba:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   829be:	4622      	mov	r2, r4
   829c0:	4b16      	ldr	r3, [pc, #88]	; (82a1c <pio_configure_pin+0xc8>)
   829c2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   829c4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   829c8:	bf14      	ite	ne
   829ca:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   829cc:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   829ce:	2001      	movs	r0, #1
   829d0:	e021      	b.n	82a16 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   829d2:	f000 011f 	and.w	r1, r0, #31
   829d6:	2401      	movs	r4, #1
   829d8:	4630      	mov	r0, r6
   829da:	fa04 f101 	lsl.w	r1, r4, r1
   829de:	462a      	mov	r2, r5
   829e0:	4b0f      	ldr	r3, [pc, #60]	; (82a20 <pio_configure_pin+0xcc>)
   829e2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   829e4:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   829e6:	e016      	b.n	82a16 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   829e8:	f000 011f 	and.w	r1, r0, #31
   829ec:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   829ee:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   829f2:	ea05 0304 	and.w	r3, r5, r4
   829f6:	9300      	str	r3, [sp, #0]
   829f8:	4630      	mov	r0, r6
   829fa:	fa04 f101 	lsl.w	r1, r4, r1
   829fe:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82a02:	bf14      	ite	ne
   82a04:	2200      	movne	r2, #0
   82a06:	2201      	moveq	r2, #1
   82a08:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82a0c:	4d05      	ldr	r5, [pc, #20]	; (82a24 <pio_configure_pin+0xd0>)
   82a0e:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   82a10:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82a12:	e000      	b.n	82a16 <pio_configure_pin+0xc2>

	default:
		return 0;
   82a14:	2000      	movs	r0, #0
	}

	return 1;
}
   82a16:	b002      	add	sp, #8
   82a18:	bd70      	pop	{r4, r5, r6, pc}
   82a1a:	bf00      	nop
   82a1c:	000828b1 	.word	0x000828b1
   82a20:	000828f1 	.word	0x000828f1
   82a24:	00082925 	.word	0x00082925

00082a28 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82a28:	b5f0      	push	{r4, r5, r6, r7, lr}
   82a2a:	b083      	sub	sp, #12
   82a2c:	4607      	mov	r7, r0
   82a2e:	460e      	mov	r6, r1
   82a30:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82a32:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   82a36:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   82a3a:	d026      	beq.n	82a8a <pio_configure_pin_group+0x62>
   82a3c:	d806      	bhi.n	82a4c <pio_configure_pin_group+0x24>
   82a3e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   82a42:	d00a      	beq.n	82a5a <pio_configure_pin_group+0x32>
   82a44:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   82a48:	d013      	beq.n	82a72 <pio_configure_pin_group+0x4a>
   82a4a:	e034      	b.n	82ab6 <pio_configure_pin_group+0x8e>
   82a4c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   82a50:	d01f      	beq.n	82a92 <pio_configure_pin_group+0x6a>
   82a52:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   82a56:	d01c      	beq.n	82a92 <pio_configure_pin_group+0x6a>
   82a58:	e02d      	b.n	82ab6 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82a5a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82a5e:	4632      	mov	r2, r6
   82a60:	4b16      	ldr	r3, [pc, #88]	; (82abc <pio_configure_pin_group+0x94>)
   82a62:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82a64:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82a68:	bf14      	ite	ne
   82a6a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82a6c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82a6e:	2001      	movs	r0, #1
   82a70:	e022      	b.n	82ab8 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82a72:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82a76:	4632      	mov	r2, r6
   82a78:	4b10      	ldr	r3, [pc, #64]	; (82abc <pio_configure_pin_group+0x94>)
   82a7a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82a7c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82a80:	bf14      	ite	ne
   82a82:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82a84:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82a86:	2001      	movs	r0, #1
   82a88:	e016      	b.n	82ab8 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82a8a:	4b0d      	ldr	r3, [pc, #52]	; (82ac0 <pio_configure_pin_group+0x98>)
   82a8c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82a8e:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   82a90:	e012      	b.n	82ab8 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82a92:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82a96:	f005 0301 	and.w	r3, r5, #1
   82a9a:	9300      	str	r3, [sp, #0]
   82a9c:	4638      	mov	r0, r7
   82a9e:	4631      	mov	r1, r6
   82aa0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82aa4:	bf14      	ite	ne
   82aa6:	2200      	movne	r2, #0
   82aa8:	2201      	moveq	r2, #1
   82aaa:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82aae:	4c05      	ldr	r4, [pc, #20]	; (82ac4 <pio_configure_pin_group+0x9c>)
   82ab0:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   82ab2:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82ab4:	e000      	b.n	82ab8 <pio_configure_pin_group+0x90>

	default:
		return 0;
   82ab6:	2000      	movs	r0, #0
	}

	return 1;
}
   82ab8:	b003      	add	sp, #12
   82aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82abc:	000828b1 	.word	0x000828b1
   82ac0:	000828f1 	.word	0x000828f1
   82ac4:	00082925 	.word	0x00082925

00082ac8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82acc:	4604      	mov	r4, r0
   82ace:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82ad0:	4b10      	ldr	r3, [pc, #64]	; (82b14 <pio_handler_process+0x4c>)
   82ad2:	4798      	blx	r3
   82ad4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   82ad6:	4620      	mov	r0, r4
   82ad8:	4b0f      	ldr	r3, [pc, #60]	; (82b18 <pio_handler_process+0x50>)
   82ada:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   82adc:	4005      	ands	r5, r0
   82ade:	d017      	beq.n	82b10 <pio_handler_process+0x48>
   82ae0:	4f0e      	ldr	r7, [pc, #56]	; (82b1c <pio_handler_process+0x54>)
   82ae2:	f107 040c 	add.w	r4, r7, #12
   82ae6:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82ae8:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   82aec:	42b3      	cmp	r3, r6
   82aee:	d10a      	bne.n	82b06 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82af0:	f854 1c08 	ldr.w	r1, [r4, #-8]
   82af4:	4229      	tst	r1, r5
   82af6:	d006      	beq.n	82b06 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82af8:	6823      	ldr	r3, [r4, #0]
   82afa:	4630      	mov	r0, r6
   82afc:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82afe:	f854 3c08 	ldr.w	r3, [r4, #-8]
   82b02:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82b06:	42bc      	cmp	r4, r7
   82b08:	d002      	beq.n	82b10 <pio_handler_process+0x48>
   82b0a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82b0c:	2d00      	cmp	r5, #0
   82b0e:	d1eb      	bne.n	82ae8 <pio_handler_process+0x20>
   82b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b14:	0008294d 	.word	0x0008294d
   82b18:	00082951 	.word	0x00082951
   82b1c:	20079088 	.word	0x20079088

00082b20 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82b20:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   82b22:	4802      	ldr	r0, [pc, #8]	; (82b2c <PIOA_Handler+0xc>)
   82b24:	210b      	movs	r1, #11
   82b26:	4b02      	ldr	r3, [pc, #8]	; (82b30 <PIOA_Handler+0x10>)
   82b28:	4798      	blx	r3
   82b2a:	bd08      	pop	{r3, pc}
   82b2c:	400e0e00 	.word	0x400e0e00
   82b30:	00082ac9 	.word	0x00082ac9

00082b34 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82b34:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   82b36:	4802      	ldr	r0, [pc, #8]	; (82b40 <PIOB_Handler+0xc>)
   82b38:	210c      	movs	r1, #12
   82b3a:	4b02      	ldr	r3, [pc, #8]	; (82b44 <PIOB_Handler+0x10>)
   82b3c:	4798      	blx	r3
   82b3e:	bd08      	pop	{r3, pc}
   82b40:	400e1000 	.word	0x400e1000
   82b44:	00082ac9 	.word	0x00082ac9

00082b48 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82b48:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82b4a:	4802      	ldr	r0, [pc, #8]	; (82b54 <PIOC_Handler+0xc>)
   82b4c:	210d      	movs	r1, #13
   82b4e:	4b02      	ldr	r3, [pc, #8]	; (82b58 <PIOC_Handler+0x10>)
   82b50:	4798      	blx	r3
   82b52:	bd08      	pop	{r3, pc}
   82b54:	400e1200 	.word	0x400e1200
   82b58:	00082ac9 	.word	0x00082ac9

00082b5c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82b5c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   82b5e:	4802      	ldr	r0, [pc, #8]	; (82b68 <PIOD_Handler+0xc>)
   82b60:	210e      	movs	r1, #14
   82b62:	4b02      	ldr	r3, [pc, #8]	; (82b6c <PIOD_Handler+0x10>)
   82b64:	4798      	blx	r3
   82b66:	bd08      	pop	{r3, pc}
   82b68:	400e1400 	.word	0x400e1400
   82b6c:	00082ac9 	.word	0x00082ac9

00082b70 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82b70:	4b17      	ldr	r3, [pc, #92]	; (82bd0 <pmc_switch_mck_to_pllack+0x60>)
   82b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82b74:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   82b78:	4310      	orrs	r0, r2
   82b7a:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82b7e:	f013 0f08 	tst.w	r3, #8
   82b82:	d109      	bne.n	82b98 <pmc_switch_mck_to_pllack+0x28>
   82b84:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82b88:	4911      	ldr	r1, [pc, #68]	; (82bd0 <pmc_switch_mck_to_pllack+0x60>)
   82b8a:	e001      	b.n	82b90 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82b8c:	3b01      	subs	r3, #1
   82b8e:	d019      	beq.n	82bc4 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82b90:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82b92:	f012 0f08 	tst.w	r2, #8
   82b96:	d0f9      	beq.n	82b8c <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82b98:	4b0d      	ldr	r3, [pc, #52]	; (82bd0 <pmc_switch_mck_to_pllack+0x60>)
   82b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82b9c:	f022 0203 	bic.w	r2, r2, #3
   82ba0:	f042 0202 	orr.w	r2, r2, #2
   82ba4:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82ba6:	6e98      	ldr	r0, [r3, #104]	; 0x68
   82ba8:	f010 0008 	ands.w	r0, r0, #8
   82bac:	d10c      	bne.n	82bc8 <pmc_switch_mck_to_pllack+0x58>
   82bae:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82bb2:	4907      	ldr	r1, [pc, #28]	; (82bd0 <pmc_switch_mck_to_pllack+0x60>)
   82bb4:	e001      	b.n	82bba <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82bb6:	3b01      	subs	r3, #1
   82bb8:	d008      	beq.n	82bcc <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82bba:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82bbc:	f012 0f08 	tst.w	r2, #8
   82bc0:	d0f9      	beq.n	82bb6 <pmc_switch_mck_to_pllack+0x46>
   82bc2:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82bc4:	2001      	movs	r0, #1
   82bc6:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   82bc8:	2000      	movs	r0, #0
   82bca:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82bcc:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   82bce:	4770      	bx	lr
   82bd0:	400e0600 	.word	0x400e0600

00082bd4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82bd4:	b138      	cbz	r0, 82be6 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82bd6:	4911      	ldr	r1, [pc, #68]	; (82c1c <pmc_switch_mainck_to_xtal+0x48>)
   82bd8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82bda:	4a11      	ldr	r2, [pc, #68]	; (82c20 <pmc_switch_mainck_to_xtal+0x4c>)
   82bdc:	401a      	ands	r2, r3
   82bde:	4b11      	ldr	r3, [pc, #68]	; (82c24 <pmc_switch_mainck_to_xtal+0x50>)
   82be0:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82be2:	620b      	str	r3, [r1, #32]
   82be4:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82be6:	4a0d      	ldr	r2, [pc, #52]	; (82c1c <pmc_switch_mainck_to_xtal+0x48>)
   82be8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82bea:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82bee:	f023 0303 	bic.w	r3, r3, #3
   82bf2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82bf6:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82bfa:	0209      	lsls	r1, r1, #8
   82bfc:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82bfe:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82c00:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82c02:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82c04:	f013 0f01 	tst.w	r3, #1
   82c08:	d0fb      	beq.n	82c02 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82c0a:	4a04      	ldr	r2, [pc, #16]	; (82c1c <pmc_switch_mainck_to_xtal+0x48>)
   82c0c:	6a13      	ldr	r3, [r2, #32]
   82c0e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82c16:	6213      	str	r3, [r2, #32]
   82c18:	4770      	bx	lr
   82c1a:	bf00      	nop
   82c1c:	400e0600 	.word	0x400e0600
   82c20:	fec8fffc 	.word	0xfec8fffc
   82c24:	01370002 	.word	0x01370002

00082c28 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82c28:	4b02      	ldr	r3, [pc, #8]	; (82c34 <pmc_osc_is_ready_mainck+0xc>)
   82c2a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82c2c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82c30:	4770      	bx	lr
   82c32:	bf00      	nop
   82c34:	400e0600 	.word	0x400e0600

00082c38 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82c38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82c3c:	4b01      	ldr	r3, [pc, #4]	; (82c44 <pmc_disable_pllack+0xc>)
   82c3e:	629a      	str	r2, [r3, #40]	; 0x28
   82c40:	4770      	bx	lr
   82c42:	bf00      	nop
   82c44:	400e0600 	.word	0x400e0600

00082c48 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82c48:	4b02      	ldr	r3, [pc, #8]	; (82c54 <pmc_is_locked_pllack+0xc>)
   82c4a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82c4c:	f000 0002 	and.w	r0, r0, #2
   82c50:	4770      	bx	lr
   82c52:	bf00      	nop
   82c54:	400e0600 	.word	0x400e0600

00082c58 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82c58:	282c      	cmp	r0, #44	; 0x2c
   82c5a:	d820      	bhi.n	82c9e <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   82c5c:	281f      	cmp	r0, #31
   82c5e:	d80d      	bhi.n	82c7c <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82c60:	4b12      	ldr	r3, [pc, #72]	; (82cac <pmc_enable_periph_clk+0x54>)
   82c62:	699a      	ldr	r2, [r3, #24]
   82c64:	2301      	movs	r3, #1
   82c66:	4083      	lsls	r3, r0
   82c68:	401a      	ands	r2, r3
   82c6a:	4293      	cmp	r3, r2
   82c6c:	d019      	beq.n	82ca2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   82c6e:	2301      	movs	r3, #1
   82c70:	fa03 f000 	lsl.w	r0, r3, r0
   82c74:	4b0d      	ldr	r3, [pc, #52]	; (82cac <pmc_enable_periph_clk+0x54>)
   82c76:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82c78:	2000      	movs	r0, #0
   82c7a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82c7c:	4b0b      	ldr	r3, [pc, #44]	; (82cac <pmc_enable_periph_clk+0x54>)
   82c7e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
   82c82:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82c84:	2301      	movs	r3, #1
   82c86:	4083      	lsls	r3, r0
   82c88:	401a      	ands	r2, r3
   82c8a:	4293      	cmp	r3, r2
   82c8c:	d00b      	beq.n	82ca6 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   82c8e:	2301      	movs	r3, #1
   82c90:	fa03 f000 	lsl.w	r0, r3, r0
   82c94:	4b05      	ldr	r3, [pc, #20]	; (82cac <pmc_enable_periph_clk+0x54>)
   82c96:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   82c9a:	2000      	movs	r0, #0
   82c9c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   82c9e:	2001      	movs	r0, #1
   82ca0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82ca2:	2000      	movs	r0, #0
   82ca4:	4770      	bx	lr
   82ca6:	2000      	movs	r0, #0
}
   82ca8:	4770      	bx	lr
   82caa:	bf00      	nop
   82cac:	400e0600 	.word	0x400e0600

00082cb0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82cb0:	e7fe      	b.n	82cb0 <Dummy_Handler>
   82cb2:	bf00      	nop

00082cb4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82cb4:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   82cb6:	4b1e      	ldr	r3, [pc, #120]	; (82d30 <Reset_Handler+0x7c>)
   82cb8:	4a1e      	ldr	r2, [pc, #120]	; (82d34 <Reset_Handler+0x80>)
   82cba:	429a      	cmp	r2, r3
   82cbc:	d003      	beq.n	82cc6 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   82cbe:	4b1e      	ldr	r3, [pc, #120]	; (82d38 <Reset_Handler+0x84>)
   82cc0:	4a1b      	ldr	r2, [pc, #108]	; (82d30 <Reset_Handler+0x7c>)
   82cc2:	429a      	cmp	r2, r3
   82cc4:	d304      	bcc.n	82cd0 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82cc6:	4b1d      	ldr	r3, [pc, #116]	; (82d3c <Reset_Handler+0x88>)
   82cc8:	4a1d      	ldr	r2, [pc, #116]	; (82d40 <Reset_Handler+0x8c>)
   82cca:	429a      	cmp	r2, r3
   82ccc:	d30f      	bcc.n	82cee <Reset_Handler+0x3a>
   82cce:	e01a      	b.n	82d06 <Reset_Handler+0x52>
   82cd0:	4b1c      	ldr	r3, [pc, #112]	; (82d44 <Reset_Handler+0x90>)
   82cd2:	4c1d      	ldr	r4, [pc, #116]	; (82d48 <Reset_Handler+0x94>)
   82cd4:	1ae4      	subs	r4, r4, r3
   82cd6:	f024 0403 	bic.w	r4, r4, #3
   82cda:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82cdc:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   82cde:	4814      	ldr	r0, [pc, #80]	; (82d30 <Reset_Handler+0x7c>)
   82ce0:	4914      	ldr	r1, [pc, #80]	; (82d34 <Reset_Handler+0x80>)
   82ce2:	585a      	ldr	r2, [r3, r1]
   82ce4:	501a      	str	r2, [r3, r0]
   82ce6:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82ce8:	42a3      	cmp	r3, r4
   82cea:	d1fa      	bne.n	82ce2 <Reset_Handler+0x2e>
   82cec:	e7eb      	b.n	82cc6 <Reset_Handler+0x12>
   82cee:	4b17      	ldr	r3, [pc, #92]	; (82d4c <Reset_Handler+0x98>)
   82cf0:	4917      	ldr	r1, [pc, #92]	; (82d50 <Reset_Handler+0x9c>)
   82cf2:	1ac9      	subs	r1, r1, r3
   82cf4:	f021 0103 	bic.w	r1, r1, #3
   82cf8:	1d1a      	adds	r2, r3, #4
   82cfa:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   82cfc:	2200      	movs	r2, #0
   82cfe:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82d02:	428b      	cmp	r3, r1
   82d04:	d1fb      	bne.n	82cfe <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82d06:	4a13      	ldr	r2, [pc, #76]	; (82d54 <Reset_Handler+0xa0>)
   82d08:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   82d0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82d10:	4911      	ldr	r1, [pc, #68]	; (82d58 <Reset_Handler+0xa4>)
   82d12:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82d14:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   82d18:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   82d1c:	d203      	bcs.n	82d26 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82d1e:	688a      	ldr	r2, [r1, #8]
   82d20:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   82d24:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82d26:	4b0d      	ldr	r3, [pc, #52]	; (82d5c <Reset_Handler+0xa8>)
   82d28:	4798      	blx	r3

	/* Branch to main function */
	main();
   82d2a:	4b0d      	ldr	r3, [pc, #52]	; (82d60 <Reset_Handler+0xac>)
   82d2c:	4798      	blx	r3
   82d2e:	e7fe      	b.n	82d2e <Reset_Handler+0x7a>
   82d30:	20070000 	.word	0x20070000
   82d34:	00086154 	.word	0x00086154
   82d38:	20070d90 	.word	0x20070d90
   82d3c:	200791cc 	.word	0x200791cc
   82d40:	20070d90 	.word	0x20070d90
   82d44:	20070004 	.word	0x20070004
   82d48:	20070d93 	.word	0x20070d93
   82d4c:	20070d8c 	.word	0x20070d8c
   82d50:	200791c7 	.word	0x200791c7
   82d54:	00080000 	.word	0x00080000
   82d58:	e000ed00 	.word	0xe000ed00
   82d5c:	00083775 	.word	0x00083775
   82d60:	00080b4d 	.word	0x00080b4d

00082d64 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82d64:	4b3e      	ldr	r3, [pc, #248]	; (82e60 <SystemCoreClockUpdate+0xfc>)
   82d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82d68:	f003 0303 	and.w	r3, r3, #3
   82d6c:	2b03      	cmp	r3, #3
   82d6e:	d85f      	bhi.n	82e30 <SystemCoreClockUpdate+0xcc>
   82d70:	e8df f003 	tbb	[pc, r3]
   82d74:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82d78:	4b3a      	ldr	r3, [pc, #232]	; (82e64 <SystemCoreClockUpdate+0x100>)
   82d7a:	695b      	ldr	r3, [r3, #20]
   82d7c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82d80:	bf14      	ite	ne
   82d82:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82d86:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   82d8a:	4b37      	ldr	r3, [pc, #220]	; (82e68 <SystemCoreClockUpdate+0x104>)
   82d8c:	601a      	str	r2, [r3, #0]
   82d8e:	e04f      	b.n	82e30 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82d90:	4b33      	ldr	r3, [pc, #204]	; (82e60 <SystemCoreClockUpdate+0xfc>)
   82d92:	6a1b      	ldr	r3, [r3, #32]
   82d94:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82d98:	d003      	beq.n	82da2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82d9a:	4a34      	ldr	r2, [pc, #208]	; (82e6c <SystemCoreClockUpdate+0x108>)
   82d9c:	4b32      	ldr	r3, [pc, #200]	; (82e68 <SystemCoreClockUpdate+0x104>)
   82d9e:	601a      	str	r2, [r3, #0]
   82da0:	e046      	b.n	82e30 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82da2:	4a33      	ldr	r2, [pc, #204]	; (82e70 <SystemCoreClockUpdate+0x10c>)
   82da4:	4b30      	ldr	r3, [pc, #192]	; (82e68 <SystemCoreClockUpdate+0x104>)
   82da6:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82da8:	4b2d      	ldr	r3, [pc, #180]	; (82e60 <SystemCoreClockUpdate+0xfc>)
   82daa:	6a1b      	ldr	r3, [r3, #32]
   82dac:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82db0:	2b10      	cmp	r3, #16
   82db2:	d002      	beq.n	82dba <SystemCoreClockUpdate+0x56>
   82db4:	2b20      	cmp	r3, #32
   82db6:	d004      	beq.n	82dc2 <SystemCoreClockUpdate+0x5e>
   82db8:	e03a      	b.n	82e30 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82dba:	4a2e      	ldr	r2, [pc, #184]	; (82e74 <SystemCoreClockUpdate+0x110>)
   82dbc:	4b2a      	ldr	r3, [pc, #168]	; (82e68 <SystemCoreClockUpdate+0x104>)
   82dbe:	601a      	str	r2, [r3, #0]
				break;
   82dc0:	e036      	b.n	82e30 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82dc2:	4a2a      	ldr	r2, [pc, #168]	; (82e6c <SystemCoreClockUpdate+0x108>)
   82dc4:	4b28      	ldr	r3, [pc, #160]	; (82e68 <SystemCoreClockUpdate+0x104>)
   82dc6:	601a      	str	r2, [r3, #0]
				break;
   82dc8:	e032      	b.n	82e30 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82dca:	4b25      	ldr	r3, [pc, #148]	; (82e60 <SystemCoreClockUpdate+0xfc>)
   82dcc:	6a1b      	ldr	r3, [r3, #32]
   82dce:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82dd2:	d003      	beq.n	82ddc <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82dd4:	4a25      	ldr	r2, [pc, #148]	; (82e6c <SystemCoreClockUpdate+0x108>)
   82dd6:	4b24      	ldr	r3, [pc, #144]	; (82e68 <SystemCoreClockUpdate+0x104>)
   82dd8:	601a      	str	r2, [r3, #0]
   82dda:	e012      	b.n	82e02 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82ddc:	4a24      	ldr	r2, [pc, #144]	; (82e70 <SystemCoreClockUpdate+0x10c>)
   82dde:	4b22      	ldr	r3, [pc, #136]	; (82e68 <SystemCoreClockUpdate+0x104>)
   82de0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82de2:	4b1f      	ldr	r3, [pc, #124]	; (82e60 <SystemCoreClockUpdate+0xfc>)
   82de4:	6a1b      	ldr	r3, [r3, #32]
   82de6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82dea:	2b10      	cmp	r3, #16
   82dec:	d002      	beq.n	82df4 <SystemCoreClockUpdate+0x90>
   82dee:	2b20      	cmp	r3, #32
   82df0:	d004      	beq.n	82dfc <SystemCoreClockUpdate+0x98>
   82df2:	e006      	b.n	82e02 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82df4:	4a1f      	ldr	r2, [pc, #124]	; (82e74 <SystemCoreClockUpdate+0x110>)
   82df6:	4b1c      	ldr	r3, [pc, #112]	; (82e68 <SystemCoreClockUpdate+0x104>)
   82df8:	601a      	str	r2, [r3, #0]
				break;
   82dfa:	e002      	b.n	82e02 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82dfc:	4a1b      	ldr	r2, [pc, #108]	; (82e6c <SystemCoreClockUpdate+0x108>)
   82dfe:	4b1a      	ldr	r3, [pc, #104]	; (82e68 <SystemCoreClockUpdate+0x104>)
   82e00:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82e02:	4b17      	ldr	r3, [pc, #92]	; (82e60 <SystemCoreClockUpdate+0xfc>)
   82e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82e06:	f003 0303 	and.w	r3, r3, #3
   82e0a:	2b02      	cmp	r3, #2
   82e0c:	d10d      	bne.n	82e2a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82e0e:	4b14      	ldr	r3, [pc, #80]	; (82e60 <SystemCoreClockUpdate+0xfc>)
   82e10:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82e12:	6a99      	ldr	r1, [r3, #40]	; 0x28
   82e14:	4b14      	ldr	r3, [pc, #80]	; (82e68 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82e16:	f3c0 400a 	ubfx	r0, r0, #16, #11
   82e1a:	681a      	ldr	r2, [r3, #0]
   82e1c:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82e20:	b2c9      	uxtb	r1, r1
   82e22:	fbb2 f2f1 	udiv	r2, r2, r1
   82e26:	601a      	str	r2, [r3, #0]
   82e28:	e002      	b.n	82e30 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82e2a:	4a13      	ldr	r2, [pc, #76]	; (82e78 <SystemCoreClockUpdate+0x114>)
   82e2c:	4b0e      	ldr	r3, [pc, #56]	; (82e68 <SystemCoreClockUpdate+0x104>)
   82e2e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82e30:	4b0b      	ldr	r3, [pc, #44]	; (82e60 <SystemCoreClockUpdate+0xfc>)
   82e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82e34:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82e38:	2b70      	cmp	r3, #112	; 0x70
   82e3a:	d107      	bne.n	82e4c <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   82e3c:	4b0a      	ldr	r3, [pc, #40]	; (82e68 <SystemCoreClockUpdate+0x104>)
   82e3e:	681a      	ldr	r2, [r3, #0]
   82e40:	490e      	ldr	r1, [pc, #56]	; (82e7c <SystemCoreClockUpdate+0x118>)
   82e42:	fba1 0202 	umull	r0, r2, r1, r2
   82e46:	0852      	lsrs	r2, r2, #1
   82e48:	601a      	str	r2, [r3, #0]
   82e4a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82e4c:	4b04      	ldr	r3, [pc, #16]	; (82e60 <SystemCoreClockUpdate+0xfc>)
   82e4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   82e50:	4b05      	ldr	r3, [pc, #20]	; (82e68 <SystemCoreClockUpdate+0x104>)
   82e52:	f3c1 1102 	ubfx	r1, r1, #4, #3
   82e56:	681a      	ldr	r2, [r3, #0]
   82e58:	40ca      	lsrs	r2, r1
   82e5a:	601a      	str	r2, [r3, #0]
   82e5c:	4770      	bx	lr
   82e5e:	bf00      	nop
   82e60:	400e0600 	.word	0x400e0600
   82e64:	400e1a10 	.word	0x400e1a10
   82e68:	200704c8 	.word	0x200704c8
   82e6c:	00b71b00 	.word	0x00b71b00
   82e70:	003d0900 	.word	0x003d0900
   82e74:	007a1200 	.word	0x007a1200
   82e78:	0e4e1c00 	.word	0x0e4e1c00
   82e7c:	aaaaaaab 	.word	0xaaaaaaab

00082e80 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   82e80:	4b1b      	ldr	r3, [pc, #108]	; (82ef0 <system_init_flash+0x70>)
   82e82:	4298      	cmp	r0, r3
   82e84:	d806      	bhi.n	82e94 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   82e86:	2300      	movs	r3, #0
   82e88:	4a1a      	ldr	r2, [pc, #104]	; (82ef4 <system_init_flash+0x74>)
   82e8a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   82e8c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   82e90:	6013      	str	r3, [r2, #0]
   82e92:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   82e94:	4b18      	ldr	r3, [pc, #96]	; (82ef8 <system_init_flash+0x78>)
   82e96:	4298      	cmp	r0, r3
   82e98:	d807      	bhi.n	82eaa <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   82e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
   82e9e:	4a15      	ldr	r2, [pc, #84]	; (82ef4 <system_init_flash+0x74>)
   82ea0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   82ea2:	f502 7200 	add.w	r2, r2, #512	; 0x200
   82ea6:	6013      	str	r3, [r2, #0]
   82ea8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   82eaa:	4b14      	ldr	r3, [pc, #80]	; (82efc <system_init_flash+0x7c>)
   82eac:	4298      	cmp	r0, r3
   82eae:	d807      	bhi.n	82ec0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   82eb0:	f44f 7300 	mov.w	r3, #512	; 0x200
   82eb4:	4a0f      	ldr	r2, [pc, #60]	; (82ef4 <system_init_flash+0x74>)
   82eb6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   82eb8:	f502 7200 	add.w	r2, r2, #512	; 0x200
   82ebc:	6013      	str	r3, [r2, #0]
   82ebe:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   82ec0:	4b0f      	ldr	r3, [pc, #60]	; (82f00 <system_init_flash+0x80>)
   82ec2:	4298      	cmp	r0, r3
   82ec4:	d807      	bhi.n	82ed6 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   82ec6:	f44f 7340 	mov.w	r3, #768	; 0x300
   82eca:	4a0a      	ldr	r2, [pc, #40]	; (82ef4 <system_init_flash+0x74>)
   82ecc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   82ece:	f502 7200 	add.w	r2, r2, #512	; 0x200
   82ed2:	6013      	str	r3, [r2, #0]
   82ed4:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   82ed6:	4b0b      	ldr	r3, [pc, #44]	; (82f04 <system_init_flash+0x84>)
   82ed8:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   82eda:	bf94      	ite	ls
   82edc:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   82ee0:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
   82ee4:	4a03      	ldr	r2, [pc, #12]	; (82ef4 <system_init_flash+0x74>)
   82ee6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   82ee8:	f502 7200 	add.w	r2, r2, #512	; 0x200
   82eec:	6013      	str	r3, [r2, #0]
   82eee:	4770      	bx	lr
   82ef0:	0121eabf 	.word	0x0121eabf
   82ef4:	400e0a00 	.word	0x400e0a00
   82ef8:	02faf07f 	.word	0x02faf07f
   82efc:	03d08fff 	.word	0x03d08fff
   82f00:	04c4b3ff 	.word	0x04c4b3ff
   82f04:	055d4a7f 	.word	0x055d4a7f

00082f08 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82f08:	4b09      	ldr	r3, [pc, #36]	; (82f30 <_sbrk+0x28>)
   82f0a:	681b      	ldr	r3, [r3, #0]
   82f0c:	b913      	cbnz	r3, 82f14 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   82f0e:	4a09      	ldr	r2, [pc, #36]	; (82f34 <_sbrk+0x2c>)
   82f10:	4b07      	ldr	r3, [pc, #28]	; (82f30 <_sbrk+0x28>)
   82f12:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   82f14:	4b06      	ldr	r3, [pc, #24]	; (82f30 <_sbrk+0x28>)
   82f16:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82f18:	181a      	adds	r2, r3, r0
   82f1a:	4907      	ldr	r1, [pc, #28]	; (82f38 <_sbrk+0x30>)
   82f1c:	4291      	cmp	r1, r2
   82f1e:	db04      	blt.n	82f2a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   82f20:	4610      	mov	r0, r2
   82f22:	4a03      	ldr	r2, [pc, #12]	; (82f30 <_sbrk+0x28>)
   82f24:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82f26:	4618      	mov	r0, r3
   82f28:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   82f2a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   82f2e:	4770      	bx	lr
   82f30:	200790f8 	.word	0x200790f8
   82f34:	2007b1d0 	.word	0x2007b1d0
   82f38:	20087ffc 	.word	0x20087ffc

00082f3c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82f3c:	f04f 30ff 	mov.w	r0, #4294967295
   82f40:	4770      	bx	lr
   82f42:	bf00      	nop

00082f44 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82f48:	604b      	str	r3, [r1, #4]

	return 0;
}
   82f4a:	2000      	movs	r0, #0
   82f4c:	4770      	bx	lr
   82f4e:	bf00      	nop

00082f50 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82f50:	2001      	movs	r0, #1
   82f52:	4770      	bx	lr

00082f54 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82f54:	2000      	movs	r0, #0
   82f56:	4770      	bx	lr

00082f58 <__aeabi_drsub>:
   82f58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   82f5c:	e002      	b.n	82f64 <__adddf3>
   82f5e:	bf00      	nop

00082f60 <__aeabi_dsub>:
   82f60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00082f64 <__adddf3>:
   82f64:	b530      	push	{r4, r5, lr}
   82f66:	ea4f 0441 	mov.w	r4, r1, lsl #1
   82f6a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   82f6e:	ea94 0f05 	teq	r4, r5
   82f72:	bf08      	it	eq
   82f74:	ea90 0f02 	teqeq	r0, r2
   82f78:	bf1f      	itttt	ne
   82f7a:	ea54 0c00 	orrsne.w	ip, r4, r0
   82f7e:	ea55 0c02 	orrsne.w	ip, r5, r2
   82f82:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   82f86:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   82f8a:	f000 80e2 	beq.w	83152 <__adddf3+0x1ee>
   82f8e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   82f92:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   82f96:	bfb8      	it	lt
   82f98:	426d      	neglt	r5, r5
   82f9a:	dd0c      	ble.n	82fb6 <__adddf3+0x52>
   82f9c:	442c      	add	r4, r5
   82f9e:	ea80 0202 	eor.w	r2, r0, r2
   82fa2:	ea81 0303 	eor.w	r3, r1, r3
   82fa6:	ea82 0000 	eor.w	r0, r2, r0
   82faa:	ea83 0101 	eor.w	r1, r3, r1
   82fae:	ea80 0202 	eor.w	r2, r0, r2
   82fb2:	ea81 0303 	eor.w	r3, r1, r3
   82fb6:	2d36      	cmp	r5, #54	; 0x36
   82fb8:	bf88      	it	hi
   82fba:	bd30      	pophi	{r4, r5, pc}
   82fbc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82fc0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   82fc4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   82fc8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   82fcc:	d002      	beq.n	82fd4 <__adddf3+0x70>
   82fce:	4240      	negs	r0, r0
   82fd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82fd4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   82fd8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   82fdc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   82fe0:	d002      	beq.n	82fe8 <__adddf3+0x84>
   82fe2:	4252      	negs	r2, r2
   82fe4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   82fe8:	ea94 0f05 	teq	r4, r5
   82fec:	f000 80a7 	beq.w	8313e <__adddf3+0x1da>
   82ff0:	f1a4 0401 	sub.w	r4, r4, #1
   82ff4:	f1d5 0e20 	rsbs	lr, r5, #32
   82ff8:	db0d      	blt.n	83016 <__adddf3+0xb2>
   82ffa:	fa02 fc0e 	lsl.w	ip, r2, lr
   82ffe:	fa22 f205 	lsr.w	r2, r2, r5
   83002:	1880      	adds	r0, r0, r2
   83004:	f141 0100 	adc.w	r1, r1, #0
   83008:	fa03 f20e 	lsl.w	r2, r3, lr
   8300c:	1880      	adds	r0, r0, r2
   8300e:	fa43 f305 	asr.w	r3, r3, r5
   83012:	4159      	adcs	r1, r3
   83014:	e00e      	b.n	83034 <__adddf3+0xd0>
   83016:	f1a5 0520 	sub.w	r5, r5, #32
   8301a:	f10e 0e20 	add.w	lr, lr, #32
   8301e:	2a01      	cmp	r2, #1
   83020:	fa03 fc0e 	lsl.w	ip, r3, lr
   83024:	bf28      	it	cs
   83026:	f04c 0c02 	orrcs.w	ip, ip, #2
   8302a:	fa43 f305 	asr.w	r3, r3, r5
   8302e:	18c0      	adds	r0, r0, r3
   83030:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   83034:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83038:	d507      	bpl.n	8304a <__adddf3+0xe6>
   8303a:	f04f 0e00 	mov.w	lr, #0
   8303e:	f1dc 0c00 	rsbs	ip, ip, #0
   83042:	eb7e 0000 	sbcs.w	r0, lr, r0
   83046:	eb6e 0101 	sbc.w	r1, lr, r1
   8304a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8304e:	d31b      	bcc.n	83088 <__adddf3+0x124>
   83050:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   83054:	d30c      	bcc.n	83070 <__adddf3+0x10c>
   83056:	0849      	lsrs	r1, r1, #1
   83058:	ea5f 0030 	movs.w	r0, r0, rrx
   8305c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   83060:	f104 0401 	add.w	r4, r4, #1
   83064:	ea4f 5244 	mov.w	r2, r4, lsl #21
   83068:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8306c:	f080 809a 	bcs.w	831a4 <__adddf3+0x240>
   83070:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83074:	bf08      	it	eq
   83076:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8307a:	f150 0000 	adcs.w	r0, r0, #0
   8307e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83082:	ea41 0105 	orr.w	r1, r1, r5
   83086:	bd30      	pop	{r4, r5, pc}
   83088:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8308c:	4140      	adcs	r0, r0
   8308e:	eb41 0101 	adc.w	r1, r1, r1
   83092:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83096:	f1a4 0401 	sub.w	r4, r4, #1
   8309a:	d1e9      	bne.n	83070 <__adddf3+0x10c>
   8309c:	f091 0f00 	teq	r1, #0
   830a0:	bf04      	itt	eq
   830a2:	4601      	moveq	r1, r0
   830a4:	2000      	moveq	r0, #0
   830a6:	fab1 f381 	clz	r3, r1
   830aa:	bf08      	it	eq
   830ac:	3320      	addeq	r3, #32
   830ae:	f1a3 030b 	sub.w	r3, r3, #11
   830b2:	f1b3 0220 	subs.w	r2, r3, #32
   830b6:	da0c      	bge.n	830d2 <__adddf3+0x16e>
   830b8:	320c      	adds	r2, #12
   830ba:	dd08      	ble.n	830ce <__adddf3+0x16a>
   830bc:	f102 0c14 	add.w	ip, r2, #20
   830c0:	f1c2 020c 	rsb	r2, r2, #12
   830c4:	fa01 f00c 	lsl.w	r0, r1, ip
   830c8:	fa21 f102 	lsr.w	r1, r1, r2
   830cc:	e00c      	b.n	830e8 <__adddf3+0x184>
   830ce:	f102 0214 	add.w	r2, r2, #20
   830d2:	bfd8      	it	le
   830d4:	f1c2 0c20 	rsble	ip, r2, #32
   830d8:	fa01 f102 	lsl.w	r1, r1, r2
   830dc:	fa20 fc0c 	lsr.w	ip, r0, ip
   830e0:	bfdc      	itt	le
   830e2:	ea41 010c 	orrle.w	r1, r1, ip
   830e6:	4090      	lslle	r0, r2
   830e8:	1ae4      	subs	r4, r4, r3
   830ea:	bfa2      	ittt	ge
   830ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   830f0:	4329      	orrge	r1, r5
   830f2:	bd30      	popge	{r4, r5, pc}
   830f4:	ea6f 0404 	mvn.w	r4, r4
   830f8:	3c1f      	subs	r4, #31
   830fa:	da1c      	bge.n	83136 <__adddf3+0x1d2>
   830fc:	340c      	adds	r4, #12
   830fe:	dc0e      	bgt.n	8311e <__adddf3+0x1ba>
   83100:	f104 0414 	add.w	r4, r4, #20
   83104:	f1c4 0220 	rsb	r2, r4, #32
   83108:	fa20 f004 	lsr.w	r0, r0, r4
   8310c:	fa01 f302 	lsl.w	r3, r1, r2
   83110:	ea40 0003 	orr.w	r0, r0, r3
   83114:	fa21 f304 	lsr.w	r3, r1, r4
   83118:	ea45 0103 	orr.w	r1, r5, r3
   8311c:	bd30      	pop	{r4, r5, pc}
   8311e:	f1c4 040c 	rsb	r4, r4, #12
   83122:	f1c4 0220 	rsb	r2, r4, #32
   83126:	fa20 f002 	lsr.w	r0, r0, r2
   8312a:	fa01 f304 	lsl.w	r3, r1, r4
   8312e:	ea40 0003 	orr.w	r0, r0, r3
   83132:	4629      	mov	r1, r5
   83134:	bd30      	pop	{r4, r5, pc}
   83136:	fa21 f004 	lsr.w	r0, r1, r4
   8313a:	4629      	mov	r1, r5
   8313c:	bd30      	pop	{r4, r5, pc}
   8313e:	f094 0f00 	teq	r4, #0
   83142:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   83146:	bf06      	itte	eq
   83148:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8314c:	3401      	addeq	r4, #1
   8314e:	3d01      	subne	r5, #1
   83150:	e74e      	b.n	82ff0 <__adddf3+0x8c>
   83152:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83156:	bf18      	it	ne
   83158:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8315c:	d029      	beq.n	831b2 <__adddf3+0x24e>
   8315e:	ea94 0f05 	teq	r4, r5
   83162:	bf08      	it	eq
   83164:	ea90 0f02 	teqeq	r0, r2
   83168:	d005      	beq.n	83176 <__adddf3+0x212>
   8316a:	ea54 0c00 	orrs.w	ip, r4, r0
   8316e:	bf04      	itt	eq
   83170:	4619      	moveq	r1, r3
   83172:	4610      	moveq	r0, r2
   83174:	bd30      	pop	{r4, r5, pc}
   83176:	ea91 0f03 	teq	r1, r3
   8317a:	bf1e      	ittt	ne
   8317c:	2100      	movne	r1, #0
   8317e:	2000      	movne	r0, #0
   83180:	bd30      	popne	{r4, r5, pc}
   83182:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   83186:	d105      	bne.n	83194 <__adddf3+0x230>
   83188:	0040      	lsls	r0, r0, #1
   8318a:	4149      	adcs	r1, r1
   8318c:	bf28      	it	cs
   8318e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   83192:	bd30      	pop	{r4, r5, pc}
   83194:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   83198:	bf3c      	itt	cc
   8319a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8319e:	bd30      	popcc	{r4, r5, pc}
   831a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   831a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   831a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   831ac:	f04f 0000 	mov.w	r0, #0
   831b0:	bd30      	pop	{r4, r5, pc}
   831b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   831b6:	bf1a      	itte	ne
   831b8:	4619      	movne	r1, r3
   831ba:	4610      	movne	r0, r2
   831bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   831c0:	bf1c      	itt	ne
   831c2:	460b      	movne	r3, r1
   831c4:	4602      	movne	r2, r0
   831c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   831ca:	bf06      	itte	eq
   831cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   831d0:	ea91 0f03 	teqeq	r1, r3
   831d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   831d8:	bd30      	pop	{r4, r5, pc}
   831da:	bf00      	nop

000831dc <__aeabi_ui2d>:
   831dc:	f090 0f00 	teq	r0, #0
   831e0:	bf04      	itt	eq
   831e2:	2100      	moveq	r1, #0
   831e4:	4770      	bxeq	lr
   831e6:	b530      	push	{r4, r5, lr}
   831e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   831ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   831f0:	f04f 0500 	mov.w	r5, #0
   831f4:	f04f 0100 	mov.w	r1, #0
   831f8:	e750      	b.n	8309c <__adddf3+0x138>
   831fa:	bf00      	nop

000831fc <__aeabi_i2d>:
   831fc:	f090 0f00 	teq	r0, #0
   83200:	bf04      	itt	eq
   83202:	2100      	moveq	r1, #0
   83204:	4770      	bxeq	lr
   83206:	b530      	push	{r4, r5, lr}
   83208:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8320c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83210:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   83214:	bf48      	it	mi
   83216:	4240      	negmi	r0, r0
   83218:	f04f 0100 	mov.w	r1, #0
   8321c:	e73e      	b.n	8309c <__adddf3+0x138>
   8321e:	bf00      	nop

00083220 <__aeabi_f2d>:
   83220:	0042      	lsls	r2, r0, #1
   83222:	ea4f 01e2 	mov.w	r1, r2, asr #3
   83226:	ea4f 0131 	mov.w	r1, r1, rrx
   8322a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8322e:	bf1f      	itttt	ne
   83230:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   83234:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83238:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8323c:	4770      	bxne	lr
   8323e:	f092 0f00 	teq	r2, #0
   83242:	bf14      	ite	ne
   83244:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83248:	4770      	bxeq	lr
   8324a:	b530      	push	{r4, r5, lr}
   8324c:	f44f 7460 	mov.w	r4, #896	; 0x380
   83250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83254:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83258:	e720      	b.n	8309c <__adddf3+0x138>
   8325a:	bf00      	nop

0008325c <__aeabi_ul2d>:
   8325c:	ea50 0201 	orrs.w	r2, r0, r1
   83260:	bf08      	it	eq
   83262:	4770      	bxeq	lr
   83264:	b530      	push	{r4, r5, lr}
   83266:	f04f 0500 	mov.w	r5, #0
   8326a:	e00a      	b.n	83282 <__aeabi_l2d+0x16>

0008326c <__aeabi_l2d>:
   8326c:	ea50 0201 	orrs.w	r2, r0, r1
   83270:	bf08      	it	eq
   83272:	4770      	bxeq	lr
   83274:	b530      	push	{r4, r5, lr}
   83276:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8327a:	d502      	bpl.n	83282 <__aeabi_l2d+0x16>
   8327c:	4240      	negs	r0, r0
   8327e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83282:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83286:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8328a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8328e:	f43f aedc 	beq.w	8304a <__adddf3+0xe6>
   83292:	f04f 0203 	mov.w	r2, #3
   83296:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8329a:	bf18      	it	ne
   8329c:	3203      	addne	r2, #3
   8329e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   832a2:	bf18      	it	ne
   832a4:	3203      	addne	r2, #3
   832a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   832aa:	f1c2 0320 	rsb	r3, r2, #32
   832ae:	fa00 fc03 	lsl.w	ip, r0, r3
   832b2:	fa20 f002 	lsr.w	r0, r0, r2
   832b6:	fa01 fe03 	lsl.w	lr, r1, r3
   832ba:	ea40 000e 	orr.w	r0, r0, lr
   832be:	fa21 f102 	lsr.w	r1, r1, r2
   832c2:	4414      	add	r4, r2
   832c4:	e6c1      	b.n	8304a <__adddf3+0xe6>
   832c6:	bf00      	nop

000832c8 <__aeabi_dmul>:
   832c8:	b570      	push	{r4, r5, r6, lr}
   832ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   832ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   832d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   832d6:	bf1d      	ittte	ne
   832d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   832dc:	ea94 0f0c 	teqne	r4, ip
   832e0:	ea95 0f0c 	teqne	r5, ip
   832e4:	f000 f8de 	bleq	834a4 <__aeabi_dmul+0x1dc>
   832e8:	442c      	add	r4, r5
   832ea:	ea81 0603 	eor.w	r6, r1, r3
   832ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   832f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   832f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   832fa:	bf18      	it	ne
   832fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   83300:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83308:	d038      	beq.n	8337c <__aeabi_dmul+0xb4>
   8330a:	fba0 ce02 	umull	ip, lr, r0, r2
   8330e:	f04f 0500 	mov.w	r5, #0
   83312:	fbe1 e502 	umlal	lr, r5, r1, r2
   83316:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8331a:	fbe0 e503 	umlal	lr, r5, r0, r3
   8331e:	f04f 0600 	mov.w	r6, #0
   83322:	fbe1 5603 	umlal	r5, r6, r1, r3
   83326:	f09c 0f00 	teq	ip, #0
   8332a:	bf18      	it	ne
   8332c:	f04e 0e01 	orrne.w	lr, lr, #1
   83330:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   83334:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   83338:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8333c:	d204      	bcs.n	83348 <__aeabi_dmul+0x80>
   8333e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   83342:	416d      	adcs	r5, r5
   83344:	eb46 0606 	adc.w	r6, r6, r6
   83348:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8334c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   83350:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   83354:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   83358:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8335c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83360:	bf88      	it	hi
   83362:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83366:	d81e      	bhi.n	833a6 <__aeabi_dmul+0xde>
   83368:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8336c:	bf08      	it	eq
   8336e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   83372:	f150 0000 	adcs.w	r0, r0, #0
   83376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8337a:	bd70      	pop	{r4, r5, r6, pc}
   8337c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   83380:	ea46 0101 	orr.w	r1, r6, r1
   83384:	ea40 0002 	orr.w	r0, r0, r2
   83388:	ea81 0103 	eor.w	r1, r1, r3
   8338c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   83390:	bfc2      	ittt	gt
   83392:	ebd4 050c 	rsbsgt	r5, r4, ip
   83396:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8339a:	bd70      	popgt	{r4, r5, r6, pc}
   8339c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   833a0:	f04f 0e00 	mov.w	lr, #0
   833a4:	3c01      	subs	r4, #1
   833a6:	f300 80ab 	bgt.w	83500 <__aeabi_dmul+0x238>
   833aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   833ae:	bfde      	ittt	le
   833b0:	2000      	movle	r0, #0
   833b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   833b6:	bd70      	pople	{r4, r5, r6, pc}
   833b8:	f1c4 0400 	rsb	r4, r4, #0
   833bc:	3c20      	subs	r4, #32
   833be:	da35      	bge.n	8342c <__aeabi_dmul+0x164>
   833c0:	340c      	adds	r4, #12
   833c2:	dc1b      	bgt.n	833fc <__aeabi_dmul+0x134>
   833c4:	f104 0414 	add.w	r4, r4, #20
   833c8:	f1c4 0520 	rsb	r5, r4, #32
   833cc:	fa00 f305 	lsl.w	r3, r0, r5
   833d0:	fa20 f004 	lsr.w	r0, r0, r4
   833d4:	fa01 f205 	lsl.w	r2, r1, r5
   833d8:	ea40 0002 	orr.w	r0, r0, r2
   833dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   833e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   833e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   833e8:	fa21 f604 	lsr.w	r6, r1, r4
   833ec:	eb42 0106 	adc.w	r1, r2, r6
   833f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   833f4:	bf08      	it	eq
   833f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   833fa:	bd70      	pop	{r4, r5, r6, pc}
   833fc:	f1c4 040c 	rsb	r4, r4, #12
   83400:	f1c4 0520 	rsb	r5, r4, #32
   83404:	fa00 f304 	lsl.w	r3, r0, r4
   83408:	fa20 f005 	lsr.w	r0, r0, r5
   8340c:	fa01 f204 	lsl.w	r2, r1, r4
   83410:	ea40 0002 	orr.w	r0, r0, r2
   83414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83418:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8341c:	f141 0100 	adc.w	r1, r1, #0
   83420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83424:	bf08      	it	eq
   83426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8342a:	bd70      	pop	{r4, r5, r6, pc}
   8342c:	f1c4 0520 	rsb	r5, r4, #32
   83430:	fa00 f205 	lsl.w	r2, r0, r5
   83434:	ea4e 0e02 	orr.w	lr, lr, r2
   83438:	fa20 f304 	lsr.w	r3, r0, r4
   8343c:	fa01 f205 	lsl.w	r2, r1, r5
   83440:	ea43 0302 	orr.w	r3, r3, r2
   83444:	fa21 f004 	lsr.w	r0, r1, r4
   83448:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8344c:	fa21 f204 	lsr.w	r2, r1, r4
   83450:	ea20 0002 	bic.w	r0, r0, r2
   83454:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   83458:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8345c:	bf08      	it	eq
   8345e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83462:	bd70      	pop	{r4, r5, r6, pc}
   83464:	f094 0f00 	teq	r4, #0
   83468:	d10f      	bne.n	8348a <__aeabi_dmul+0x1c2>
   8346a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8346e:	0040      	lsls	r0, r0, #1
   83470:	eb41 0101 	adc.w	r1, r1, r1
   83474:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83478:	bf08      	it	eq
   8347a:	3c01      	subeq	r4, #1
   8347c:	d0f7      	beq.n	8346e <__aeabi_dmul+0x1a6>
   8347e:	ea41 0106 	orr.w	r1, r1, r6
   83482:	f095 0f00 	teq	r5, #0
   83486:	bf18      	it	ne
   83488:	4770      	bxne	lr
   8348a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8348e:	0052      	lsls	r2, r2, #1
   83490:	eb43 0303 	adc.w	r3, r3, r3
   83494:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   83498:	bf08      	it	eq
   8349a:	3d01      	subeq	r5, #1
   8349c:	d0f7      	beq.n	8348e <__aeabi_dmul+0x1c6>
   8349e:	ea43 0306 	orr.w	r3, r3, r6
   834a2:	4770      	bx	lr
   834a4:	ea94 0f0c 	teq	r4, ip
   834a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   834ac:	bf18      	it	ne
   834ae:	ea95 0f0c 	teqne	r5, ip
   834b2:	d00c      	beq.n	834ce <__aeabi_dmul+0x206>
   834b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   834b8:	bf18      	it	ne
   834ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   834be:	d1d1      	bne.n	83464 <__aeabi_dmul+0x19c>
   834c0:	ea81 0103 	eor.w	r1, r1, r3
   834c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   834c8:	f04f 0000 	mov.w	r0, #0
   834cc:	bd70      	pop	{r4, r5, r6, pc}
   834ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   834d2:	bf06      	itte	eq
   834d4:	4610      	moveq	r0, r2
   834d6:	4619      	moveq	r1, r3
   834d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   834dc:	d019      	beq.n	83512 <__aeabi_dmul+0x24a>
   834de:	ea94 0f0c 	teq	r4, ip
   834e2:	d102      	bne.n	834ea <__aeabi_dmul+0x222>
   834e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   834e8:	d113      	bne.n	83512 <__aeabi_dmul+0x24a>
   834ea:	ea95 0f0c 	teq	r5, ip
   834ee:	d105      	bne.n	834fc <__aeabi_dmul+0x234>
   834f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   834f4:	bf1c      	itt	ne
   834f6:	4610      	movne	r0, r2
   834f8:	4619      	movne	r1, r3
   834fa:	d10a      	bne.n	83512 <__aeabi_dmul+0x24a>
   834fc:	ea81 0103 	eor.w	r1, r1, r3
   83500:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83504:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   83508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8350c:	f04f 0000 	mov.w	r0, #0
   83510:	bd70      	pop	{r4, r5, r6, pc}
   83512:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   83516:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8351a:	bd70      	pop	{r4, r5, r6, pc}

0008351c <__aeabi_ddiv>:
   8351c:	b570      	push	{r4, r5, r6, lr}
   8351e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83522:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   83526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8352a:	bf1d      	ittte	ne
   8352c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83530:	ea94 0f0c 	teqne	r4, ip
   83534:	ea95 0f0c 	teqne	r5, ip
   83538:	f000 f8a7 	bleq	8368a <__aeabi_ddiv+0x16e>
   8353c:	eba4 0405 	sub.w	r4, r4, r5
   83540:	ea81 0e03 	eor.w	lr, r1, r3
   83544:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   83548:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8354c:	f000 8088 	beq.w	83660 <__aeabi_ddiv+0x144>
   83550:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83554:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   83558:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8355c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   83560:	ea4f 2202 	mov.w	r2, r2, lsl #8
   83564:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   83568:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8356c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   83570:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   83574:	429d      	cmp	r5, r3
   83576:	bf08      	it	eq
   83578:	4296      	cmpeq	r6, r2
   8357a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8357e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   83582:	d202      	bcs.n	8358a <__aeabi_ddiv+0x6e>
   83584:	085b      	lsrs	r3, r3, #1
   83586:	ea4f 0232 	mov.w	r2, r2, rrx
   8358a:	1ab6      	subs	r6, r6, r2
   8358c:	eb65 0503 	sbc.w	r5, r5, r3
   83590:	085b      	lsrs	r3, r3, #1
   83592:	ea4f 0232 	mov.w	r2, r2, rrx
   83596:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8359a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8359e:	ebb6 0e02 	subs.w	lr, r6, r2
   835a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   835a6:	bf22      	ittt	cs
   835a8:	1ab6      	subcs	r6, r6, r2
   835aa:	4675      	movcs	r5, lr
   835ac:	ea40 000c 	orrcs.w	r0, r0, ip
   835b0:	085b      	lsrs	r3, r3, #1
   835b2:	ea4f 0232 	mov.w	r2, r2, rrx
   835b6:	ebb6 0e02 	subs.w	lr, r6, r2
   835ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   835be:	bf22      	ittt	cs
   835c0:	1ab6      	subcs	r6, r6, r2
   835c2:	4675      	movcs	r5, lr
   835c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   835c8:	085b      	lsrs	r3, r3, #1
   835ca:	ea4f 0232 	mov.w	r2, r2, rrx
   835ce:	ebb6 0e02 	subs.w	lr, r6, r2
   835d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   835d6:	bf22      	ittt	cs
   835d8:	1ab6      	subcs	r6, r6, r2
   835da:	4675      	movcs	r5, lr
   835dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   835e0:	085b      	lsrs	r3, r3, #1
   835e2:	ea4f 0232 	mov.w	r2, r2, rrx
   835e6:	ebb6 0e02 	subs.w	lr, r6, r2
   835ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   835ee:	bf22      	ittt	cs
   835f0:	1ab6      	subcs	r6, r6, r2
   835f2:	4675      	movcs	r5, lr
   835f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   835f8:	ea55 0e06 	orrs.w	lr, r5, r6
   835fc:	d018      	beq.n	83630 <__aeabi_ddiv+0x114>
   835fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
   83602:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   83606:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8360a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8360e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   83612:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   83616:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8361a:	d1c0      	bne.n	8359e <__aeabi_ddiv+0x82>
   8361c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83620:	d10b      	bne.n	8363a <__aeabi_ddiv+0x11e>
   83622:	ea41 0100 	orr.w	r1, r1, r0
   83626:	f04f 0000 	mov.w	r0, #0
   8362a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8362e:	e7b6      	b.n	8359e <__aeabi_ddiv+0x82>
   83630:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83634:	bf04      	itt	eq
   83636:	4301      	orreq	r1, r0
   83638:	2000      	moveq	r0, #0
   8363a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8363e:	bf88      	it	hi
   83640:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83644:	f63f aeaf 	bhi.w	833a6 <__aeabi_dmul+0xde>
   83648:	ebb5 0c03 	subs.w	ip, r5, r3
   8364c:	bf04      	itt	eq
   8364e:	ebb6 0c02 	subseq.w	ip, r6, r2
   83652:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   83656:	f150 0000 	adcs.w	r0, r0, #0
   8365a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8365e:	bd70      	pop	{r4, r5, r6, pc}
   83660:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   83664:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   83668:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8366c:	bfc2      	ittt	gt
   8366e:	ebd4 050c 	rsbsgt	r5, r4, ip
   83672:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   83676:	bd70      	popgt	{r4, r5, r6, pc}
   83678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8367c:	f04f 0e00 	mov.w	lr, #0
   83680:	3c01      	subs	r4, #1
   83682:	e690      	b.n	833a6 <__aeabi_dmul+0xde>
   83684:	ea45 0e06 	orr.w	lr, r5, r6
   83688:	e68d      	b.n	833a6 <__aeabi_dmul+0xde>
   8368a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8368e:	ea94 0f0c 	teq	r4, ip
   83692:	bf08      	it	eq
   83694:	ea95 0f0c 	teqeq	r5, ip
   83698:	f43f af3b 	beq.w	83512 <__aeabi_dmul+0x24a>
   8369c:	ea94 0f0c 	teq	r4, ip
   836a0:	d10a      	bne.n	836b8 <__aeabi_ddiv+0x19c>
   836a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   836a6:	f47f af34 	bne.w	83512 <__aeabi_dmul+0x24a>
   836aa:	ea95 0f0c 	teq	r5, ip
   836ae:	f47f af25 	bne.w	834fc <__aeabi_dmul+0x234>
   836b2:	4610      	mov	r0, r2
   836b4:	4619      	mov	r1, r3
   836b6:	e72c      	b.n	83512 <__aeabi_dmul+0x24a>
   836b8:	ea95 0f0c 	teq	r5, ip
   836bc:	d106      	bne.n	836cc <__aeabi_ddiv+0x1b0>
   836be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   836c2:	f43f aefd 	beq.w	834c0 <__aeabi_dmul+0x1f8>
   836c6:	4610      	mov	r0, r2
   836c8:	4619      	mov	r1, r3
   836ca:	e722      	b.n	83512 <__aeabi_dmul+0x24a>
   836cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   836d0:	bf18      	it	ne
   836d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   836d6:	f47f aec5 	bne.w	83464 <__aeabi_dmul+0x19c>
   836da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   836de:	f47f af0d 	bne.w	834fc <__aeabi_dmul+0x234>
   836e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   836e6:	f47f aeeb 	bne.w	834c0 <__aeabi_dmul+0x1f8>
   836ea:	e712      	b.n	83512 <__aeabi_dmul+0x24a>

000836ec <__aeabi_d2iz>:
   836ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   836f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   836f4:	d215      	bcs.n	83722 <__aeabi_d2iz+0x36>
   836f6:	d511      	bpl.n	8371c <__aeabi_d2iz+0x30>
   836f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   836fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83700:	d912      	bls.n	83728 <__aeabi_d2iz+0x3c>
   83702:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83706:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8370a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8370e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83712:	fa23 f002 	lsr.w	r0, r3, r2
   83716:	bf18      	it	ne
   83718:	4240      	negne	r0, r0
   8371a:	4770      	bx	lr
   8371c:	f04f 0000 	mov.w	r0, #0
   83720:	4770      	bx	lr
   83722:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   83726:	d105      	bne.n	83734 <__aeabi_d2iz+0x48>
   83728:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8372c:	bf08      	it	eq
   8372e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   83732:	4770      	bx	lr
   83734:	f04f 0000 	mov.w	r0, #0
   83738:	4770      	bx	lr
   8373a:	bf00      	nop

0008373c <atexit>:
   8373c:	4601      	mov	r1, r0
   8373e:	2000      	movs	r0, #0
   83740:	4602      	mov	r2, r0
   83742:	4603      	mov	r3, r0
   83744:	f000 be36 	b.w	843b4 <__register_exitproc>

00083748 <__libc_fini_array>:
   83748:	b538      	push	{r3, r4, r5, lr}
   8374a:	4d08      	ldr	r5, [pc, #32]	; (8376c <__libc_fini_array+0x24>)
   8374c:	4c08      	ldr	r4, [pc, #32]	; (83770 <__libc_fini_array+0x28>)
   8374e:	1b64      	subs	r4, r4, r5
   83750:	10a4      	asrs	r4, r4, #2
   83752:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   83756:	b124      	cbz	r4, 83762 <__libc_fini_array+0x1a>
   83758:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8375c:	3c01      	subs	r4, #1
   8375e:	4798      	blx	r3
   83760:	e7f9      	b.n	83756 <__libc_fini_array+0xe>
   83762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83766:	f002 bce9 	b.w	8613c <_fini>
   8376a:	bf00      	nop
   8376c:	00086148 	.word	0x00086148
   83770:	0008614c 	.word	0x0008614c

00083774 <__libc_init_array>:
   83774:	b570      	push	{r4, r5, r6, lr}
   83776:	4b0e      	ldr	r3, [pc, #56]	; (837b0 <__libc_init_array+0x3c>)
   83778:	4d0e      	ldr	r5, [pc, #56]	; (837b4 <__libc_init_array+0x40>)
   8377a:	2400      	movs	r4, #0
   8377c:	1aed      	subs	r5, r5, r3
   8377e:	10ad      	asrs	r5, r5, #2
   83780:	461e      	mov	r6, r3
   83782:	42ac      	cmp	r4, r5
   83784:	d004      	beq.n	83790 <__libc_init_array+0x1c>
   83786:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   8378a:	4790      	blx	r2
   8378c:	3401      	adds	r4, #1
   8378e:	e7f8      	b.n	83782 <__libc_init_array+0xe>
   83790:	f002 fcca 	bl	86128 <_init>
   83794:	4d08      	ldr	r5, [pc, #32]	; (837b8 <__libc_init_array+0x44>)
   83796:	4b09      	ldr	r3, [pc, #36]	; (837bc <__libc_init_array+0x48>)
   83798:	2400      	movs	r4, #0
   8379a:	1aed      	subs	r5, r5, r3
   8379c:	10ad      	asrs	r5, r5, #2
   8379e:	461e      	mov	r6, r3
   837a0:	42ac      	cmp	r4, r5
   837a2:	d004      	beq.n	837ae <__libc_init_array+0x3a>
   837a4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   837a8:	4790      	blx	r2
   837aa:	3401      	adds	r4, #1
   837ac:	e7f8      	b.n	837a0 <__libc_init_array+0x2c>
   837ae:	bd70      	pop	{r4, r5, r6, pc}
   837b0:	00086134 	.word	0x00086134
   837b4:	00086134 	.word	0x00086134
   837b8:	0008613c 	.word	0x0008613c
   837bc:	00086134 	.word	0x00086134

000837c0 <iprintf>:
   837c0:	b40f      	push	{r0, r1, r2, r3}
   837c2:	b507      	push	{r0, r1, r2, lr}
   837c4:	4906      	ldr	r1, [pc, #24]	; (837e0 <iprintf+0x20>)
   837c6:	ab04      	add	r3, sp, #16
   837c8:	6808      	ldr	r0, [r1, #0]
   837ca:	f853 2b04 	ldr.w	r2, [r3], #4
   837ce:	6881      	ldr	r1, [r0, #8]
   837d0:	9301      	str	r3, [sp, #4]
   837d2:	f000 f8f0 	bl	839b6 <_vfiprintf_r>
   837d6:	b003      	add	sp, #12
   837d8:	f85d eb04 	ldr.w	lr, [sp], #4
   837dc:	b004      	add	sp, #16
   837de:	4770      	bx	lr
   837e0:	200704d0 	.word	0x200704d0

000837e4 <_iprintf_r>:
   837e4:	b40e      	push	{r1, r2, r3}
   837e6:	b503      	push	{r0, r1, lr}
   837e8:	ab03      	add	r3, sp, #12
   837ea:	f853 2b04 	ldr.w	r2, [r3], #4
   837ee:	6881      	ldr	r1, [r0, #8]
   837f0:	9301      	str	r3, [sp, #4]
   837f2:	f000 f8e0 	bl	839b6 <_vfiprintf_r>
   837f6:	b002      	add	sp, #8
   837f8:	f85d eb04 	ldr.w	lr, [sp], #4
   837fc:	b003      	add	sp, #12
   837fe:	4770      	bx	lr

00083800 <memcpy>:
   83800:	b510      	push	{r4, lr}
   83802:	2300      	movs	r3, #0
   83804:	4293      	cmp	r3, r2
   83806:	d003      	beq.n	83810 <memcpy+0x10>
   83808:	5ccc      	ldrb	r4, [r1, r3]
   8380a:	54c4      	strb	r4, [r0, r3]
   8380c:	3301      	adds	r3, #1
   8380e:	e7f9      	b.n	83804 <memcpy+0x4>
   83810:	bd10      	pop	{r4, pc}

00083812 <memset>:
   83812:	4402      	add	r2, r0
   83814:	4603      	mov	r3, r0
   83816:	4293      	cmp	r3, r2
   83818:	d002      	beq.n	83820 <memset+0xe>
   8381a:	f803 1b01 	strb.w	r1, [r3], #1
   8381e:	e7fa      	b.n	83816 <memset+0x4>
   83820:	4770      	bx	lr

00083822 <setbuf>:
   83822:	2900      	cmp	r1, #0
   83824:	bf0c      	ite	eq
   83826:	2202      	moveq	r2, #2
   83828:	2200      	movne	r2, #0
   8382a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8382e:	f000 b801 	b.w	83834 <setvbuf>
	...

00083834 <setvbuf>:
   83834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83838:	461d      	mov	r5, r3
   8383a:	4b36      	ldr	r3, [pc, #216]	; (83914 <setvbuf+0xe0>)
   8383c:	4604      	mov	r4, r0
   8383e:	681f      	ldr	r7, [r3, #0]
   83840:	460e      	mov	r6, r1
   83842:	4690      	mov	r8, r2
   83844:	b127      	cbz	r7, 83850 <setvbuf+0x1c>
   83846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   83848:	b913      	cbnz	r3, 83850 <setvbuf+0x1c>
   8384a:	4638      	mov	r0, r7
   8384c:	f000 fedc 	bl	84608 <__sinit>
   83850:	f1b8 0f02 	cmp.w	r8, #2
   83854:	d859      	bhi.n	8390a <setvbuf+0xd6>
   83856:	2d00      	cmp	r5, #0
   83858:	db57      	blt.n	8390a <setvbuf+0xd6>
   8385a:	4638      	mov	r0, r7
   8385c:	4621      	mov	r1, r4
   8385e:	f000 fe8a 	bl	84576 <_fflush_r>
   83862:	2300      	movs	r3, #0
   83864:	6063      	str	r3, [r4, #4]
   83866:	61a3      	str	r3, [r4, #24]
   83868:	89a3      	ldrh	r3, [r4, #12]
   8386a:	061b      	lsls	r3, r3, #24
   8386c:	d503      	bpl.n	83876 <setvbuf+0x42>
   8386e:	4638      	mov	r0, r7
   83870:	6921      	ldr	r1, [r4, #16]
   83872:	f001 f84d 	bl	84910 <_free_r>
   83876:	89a3      	ldrh	r3, [r4, #12]
   83878:	f1b8 0f02 	cmp.w	r8, #2
   8387c:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   83880:	81a3      	strh	r3, [r4, #12]
   83882:	d012      	beq.n	838aa <setvbuf+0x76>
   83884:	bb36      	cbnz	r6, 838d4 <setvbuf+0xa0>
   83886:	2d00      	cmp	r5, #0
   83888:	bf08      	it	eq
   8388a:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   8388e:	4628      	mov	r0, r5
   83890:	f001 fb22 	bl	84ed8 <malloc>
   83894:	4606      	mov	r6, r0
   83896:	b9c8      	cbnz	r0, 838cc <setvbuf+0x98>
   83898:	f44f 6080 	mov.w	r0, #1024	; 0x400
   8389c:	f001 fb1c 	bl	84ed8 <malloc>
   838a0:	4606      	mov	r6, r0
   838a2:	b988      	cbnz	r0, 838c8 <setvbuf+0x94>
   838a4:	f04f 30ff 	mov.w	r0, #4294967295
   838a8:	e000      	b.n	838ac <setvbuf+0x78>
   838aa:	2000      	movs	r0, #0
   838ac:	89a3      	ldrh	r3, [r4, #12]
   838ae:	f043 0302 	orr.w	r3, r3, #2
   838b2:	81a3      	strh	r3, [r4, #12]
   838b4:	2300      	movs	r3, #0
   838b6:	60a3      	str	r3, [r4, #8]
   838b8:	f104 0343 	add.w	r3, r4, #67	; 0x43
   838bc:	6023      	str	r3, [r4, #0]
   838be:	6123      	str	r3, [r4, #16]
   838c0:	2301      	movs	r3, #1
   838c2:	6163      	str	r3, [r4, #20]
   838c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   838c8:	f44f 6580 	mov.w	r5, #1024	; 0x400
   838cc:	89a3      	ldrh	r3, [r4, #12]
   838ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   838d2:	81a3      	strh	r3, [r4, #12]
   838d4:	f1b8 0f01 	cmp.w	r8, #1
   838d8:	d105      	bne.n	838e6 <setvbuf+0xb2>
   838da:	89a3      	ldrh	r3, [r4, #12]
   838dc:	f043 0301 	orr.w	r3, r3, #1
   838e0:	81a3      	strh	r3, [r4, #12]
   838e2:	426b      	negs	r3, r5
   838e4:	61a3      	str	r3, [r4, #24]
   838e6:	4b0c      	ldr	r3, [pc, #48]	; (83918 <setvbuf+0xe4>)
   838e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   838ea:	89a3      	ldrh	r3, [r4, #12]
   838ec:	6026      	str	r6, [r4, #0]
   838ee:	f003 0008 	and.w	r0, r3, #8
   838f2:	b280      	uxth	r0, r0
   838f4:	6126      	str	r6, [r4, #16]
   838f6:	6165      	str	r5, [r4, #20]
   838f8:	b148      	cbz	r0, 8390e <setvbuf+0xda>
   838fa:	f013 0f03 	tst.w	r3, #3
   838fe:	bf18      	it	ne
   83900:	2500      	movne	r5, #0
   83902:	60a5      	str	r5, [r4, #8]
   83904:	2000      	movs	r0, #0
   83906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8390a:	f04f 30ff 	mov.w	r0, #4294967295
   8390e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83912:	bf00      	nop
   83914:	200704d0 	.word	0x200704d0
   83918:	000845c5 	.word	0x000845c5

0008391c <strlen>:
   8391c:	4603      	mov	r3, r0
   8391e:	f813 2b01 	ldrb.w	r2, [r3], #1
   83922:	2a00      	cmp	r2, #0
   83924:	d1fb      	bne.n	8391e <strlen+0x2>
   83926:	1a18      	subs	r0, r3, r0
   83928:	3801      	subs	r0, #1
   8392a:	4770      	bx	lr

0008392c <strncpy>:
   8392c:	b510      	push	{r4, lr}
   8392e:	4603      	mov	r3, r0
   83930:	b132      	cbz	r2, 83940 <strncpy+0x14>
   83932:	f811 4b01 	ldrb.w	r4, [r1], #1
   83936:	3a01      	subs	r2, #1
   83938:	f803 4b01 	strb.w	r4, [r3], #1
   8393c:	2c00      	cmp	r4, #0
   8393e:	d1f7      	bne.n	83930 <strncpy+0x4>
   83940:	441a      	add	r2, r3
   83942:	4293      	cmp	r3, r2
   83944:	d003      	beq.n	8394e <strncpy+0x22>
   83946:	2100      	movs	r1, #0
   83948:	f803 1b01 	strb.w	r1, [r3], #1
   8394c:	e7f9      	b.n	83942 <strncpy+0x16>
   8394e:	bd10      	pop	{r4, pc}

00083950 <__sprint_r>:
   83950:	6893      	ldr	r3, [r2, #8]
   83952:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83956:	4681      	mov	r9, r0
   83958:	460f      	mov	r7, r1
   8395a:	4614      	mov	r4, r2
   8395c:	b91b      	cbnz	r3, 83966 <__sprint_r+0x16>
   8395e:	6053      	str	r3, [r2, #4]
   83960:	4618      	mov	r0, r3
   83962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83966:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   83968:	049d      	lsls	r5, r3, #18
   8396a:	d51d      	bpl.n	839a8 <__sprint_r+0x58>
   8396c:	6815      	ldr	r5, [r2, #0]
   8396e:	68a3      	ldr	r3, [r4, #8]
   83970:	3508      	adds	r5, #8
   83972:	b1bb      	cbz	r3, 839a4 <__sprint_r+0x54>
   83974:	f855 3c04 	ldr.w	r3, [r5, #-4]
   83978:	f855 ac08 	ldr.w	sl, [r5, #-8]
   8397c:	ea4f 0893 	mov.w	r8, r3, lsr #2
   83980:	2600      	movs	r6, #0
   83982:	4546      	cmp	r6, r8
   83984:	da09      	bge.n	8399a <__sprint_r+0x4a>
   83986:	4648      	mov	r0, r9
   83988:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
   8398c:	463a      	mov	r2, r7
   8398e:	f000 ff05 	bl	8479c <_fputwc_r>
   83992:	1c43      	adds	r3, r0, #1
   83994:	d00a      	beq.n	839ac <__sprint_r+0x5c>
   83996:	3601      	adds	r6, #1
   83998:	e7f3      	b.n	83982 <__sprint_r+0x32>
   8399a:	68a3      	ldr	r3, [r4, #8]
   8399c:	eba3 0388 	sub.w	r3, r3, r8, lsl #2
   839a0:	60a3      	str	r3, [r4, #8]
   839a2:	e7e4      	b.n	8396e <__sprint_r+0x1e>
   839a4:	4618      	mov	r0, r3
   839a6:	e001      	b.n	839ac <__sprint_r+0x5c>
   839a8:	f001 f86a 	bl	84a80 <__sfvwrite_r>
   839ac:	2300      	movs	r3, #0
   839ae:	60a3      	str	r3, [r4, #8]
   839b0:	6063      	str	r3, [r4, #4]
   839b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000839b6 <_vfiprintf_r>:
   839b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   839ba:	b0ad      	sub	sp, #180	; 0xb4
   839bc:	4688      	mov	r8, r1
   839be:	9202      	str	r2, [sp, #8]
   839c0:	461c      	mov	r4, r3
   839c2:	461e      	mov	r6, r3
   839c4:	4683      	mov	fp, r0
   839c6:	b118      	cbz	r0, 839d0 <_vfiprintf_r+0x1a>
   839c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   839ca:	b90b      	cbnz	r3, 839d0 <_vfiprintf_r+0x1a>
   839cc:	f000 fe1c 	bl	84608 <__sinit>
   839d0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   839d4:	0498      	lsls	r0, r3, #18
   839d6:	d409      	bmi.n	839ec <_vfiprintf_r+0x36>
   839d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   839dc:	f8a8 300c 	strh.w	r3, [r8, #12]
   839e0:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
   839e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   839e8:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
   839ec:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   839f0:	0719      	lsls	r1, r3, #28
   839f2:	d509      	bpl.n	83a08 <_vfiprintf_r+0x52>
   839f4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   839f8:	b133      	cbz	r3, 83a08 <_vfiprintf_r+0x52>
   839fa:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   839fe:	f003 031a 	and.w	r3, r3, #26
   83a02:	2b0a      	cmp	r3, #10
   83a04:	d114      	bne.n	83a30 <_vfiprintf_r+0x7a>
   83a06:	e008      	b.n	83a1a <_vfiprintf_r+0x64>
   83a08:	4658      	mov	r0, fp
   83a0a:	4641      	mov	r1, r8
   83a0c:	f000 fc78 	bl	84300 <__swsetup_r>
   83a10:	2800      	cmp	r0, #0
   83a12:	d0f2      	beq.n	839fa <_vfiprintf_r+0x44>
   83a14:	f04f 30ff 	mov.w	r0, #4294967295
   83a18:	e3d9      	b.n	841ce <_vfiprintf_r+0x818>
   83a1a:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
   83a1e:	2b00      	cmp	r3, #0
   83a20:	db06      	blt.n	83a30 <_vfiprintf_r+0x7a>
   83a22:	4658      	mov	r0, fp
   83a24:	4641      	mov	r1, r8
   83a26:	9a02      	ldr	r2, [sp, #8]
   83a28:	4623      	mov	r3, r4
   83a2a:	f000 fbe1 	bl	841f0 <__sbprintf>
   83a2e:	e3ce      	b.n	841ce <_vfiprintf_r+0x818>
   83a30:	2300      	movs	r3, #0
   83a32:	aa1c      	add	r2, sp, #112	; 0x70
   83a34:	920f      	str	r2, [sp, #60]	; 0x3c
   83a36:	9311      	str	r3, [sp, #68]	; 0x44
   83a38:	9310      	str	r3, [sp, #64]	; 0x40
   83a3a:	4694      	mov	ip, r2
   83a3c:	930a      	str	r3, [sp, #40]	; 0x28
   83a3e:	9305      	str	r3, [sp, #20]
   83a40:	9b02      	ldr	r3, [sp, #8]
   83a42:	461c      	mov	r4, r3
   83a44:	f813 2b01 	ldrb.w	r2, [r3], #1
   83a48:	b91a      	cbnz	r2, 83a52 <_vfiprintf_r+0x9c>
   83a4a:	9802      	ldr	r0, [sp, #8]
   83a4c:	1a25      	subs	r5, r4, r0
   83a4e:	d103      	bne.n	83a58 <_vfiprintf_r+0xa2>
   83a50:	e01d      	b.n	83a8e <_vfiprintf_r+0xd8>
   83a52:	2a25      	cmp	r2, #37	; 0x25
   83a54:	d1f5      	bne.n	83a42 <_vfiprintf_r+0x8c>
   83a56:	e7f8      	b.n	83a4a <_vfiprintf_r+0x94>
   83a58:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83a5a:	9902      	ldr	r1, [sp, #8]
   83a5c:	442b      	add	r3, r5
   83a5e:	9311      	str	r3, [sp, #68]	; 0x44
   83a60:	9b10      	ldr	r3, [sp, #64]	; 0x40
   83a62:	e88c 0022 	stmia.w	ip, {r1, r5}
   83a66:	3301      	adds	r3, #1
   83a68:	2b07      	cmp	r3, #7
   83a6a:	9310      	str	r3, [sp, #64]	; 0x40
   83a6c:	dc02      	bgt.n	83a74 <_vfiprintf_r+0xbe>
   83a6e:	f10c 0c08 	add.w	ip, ip, #8
   83a72:	e009      	b.n	83a88 <_vfiprintf_r+0xd2>
   83a74:	4658      	mov	r0, fp
   83a76:	4641      	mov	r1, r8
   83a78:	aa0f      	add	r2, sp, #60	; 0x3c
   83a7a:	f7ff ff69 	bl	83950 <__sprint_r>
   83a7e:	2800      	cmp	r0, #0
   83a80:	f040 839f 	bne.w	841c2 <_vfiprintf_r+0x80c>
   83a84:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   83a88:	9a05      	ldr	r2, [sp, #20]
   83a8a:	442a      	add	r2, r5
   83a8c:	9205      	str	r2, [sp, #20]
   83a8e:	7823      	ldrb	r3, [r4, #0]
   83a90:	2b00      	cmp	r3, #0
   83a92:	f000 838f 	beq.w	841b4 <_vfiprintf_r+0x7fe>
   83a96:	2200      	movs	r2, #0
   83a98:	3401      	adds	r4, #1
   83a9a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   83a9e:	f04f 3aff 	mov.w	sl, #4294967295
   83aa2:	9204      	str	r2, [sp, #16]
   83aa4:	4617      	mov	r7, r2
   83aa6:	1c65      	adds	r5, r4, #1
   83aa8:	7823      	ldrb	r3, [r4, #0]
   83aaa:	9502      	str	r5, [sp, #8]
   83aac:	2b58      	cmp	r3, #88	; 0x58
   83aae:	d064      	beq.n	83b7a <_vfiprintf_r+0x1c4>
   83ab0:	dc2d      	bgt.n	83b0e <_vfiprintf_r+0x158>
   83ab2:	2b2e      	cmp	r3, #46	; 0x2e
   83ab4:	d076      	beq.n	83ba4 <_vfiprintf_r+0x1ee>
   83ab6:	dc12      	bgt.n	83ade <_vfiprintf_r+0x128>
   83ab8:	2b2a      	cmp	r3, #42	; 0x2a
   83aba:	d066      	beq.n	83b8a <_vfiprintf_r+0x1d4>
   83abc:	dc08      	bgt.n	83ad0 <_vfiprintf_r+0x11a>
   83abe:	2b20      	cmp	r3, #32
   83ac0:	d05f      	beq.n	83b82 <_vfiprintf_r+0x1cc>
   83ac2:	2b23      	cmp	r3, #35	; 0x23
   83ac4:	f040 8200 	bne.w	83ec8 <_vfiprintf_r+0x512>
   83ac8:	f047 0701 	orr.w	r7, r7, #1
   83acc:	9c02      	ldr	r4, [sp, #8]
   83ace:	e7ea      	b.n	83aa6 <_vfiprintf_r+0xf0>
   83ad0:	2b2b      	cmp	r3, #43	; 0x2b
   83ad2:	d101      	bne.n	83ad8 <_vfiprintf_r+0x122>
   83ad4:	461a      	mov	r2, r3
   83ad6:	e7f9      	b.n	83acc <_vfiprintf_r+0x116>
   83ad8:	2b2d      	cmp	r3, #45	; 0x2d
   83ada:	d060      	beq.n	83b9e <_vfiprintf_r+0x1e8>
   83adc:	e1f4      	b.n	83ec8 <_vfiprintf_r+0x512>
   83ade:	2b39      	cmp	r3, #57	; 0x39
   83ae0:	dc07      	bgt.n	83af2 <_vfiprintf_r+0x13c>
   83ae2:	2b31      	cmp	r3, #49	; 0x31
   83ae4:	da7f      	bge.n	83be6 <_vfiprintf_r+0x230>
   83ae6:	2b30      	cmp	r3, #48	; 0x30
   83ae8:	f040 81ee 	bne.w	83ec8 <_vfiprintf_r+0x512>
   83aec:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   83af0:	e7ec      	b.n	83acc <_vfiprintf_r+0x116>
   83af2:	2b4f      	cmp	r3, #79	; 0x4f
   83af4:	f000 80e0 	beq.w	83cb8 <_vfiprintf_r+0x302>
   83af8:	2b55      	cmp	r3, #85	; 0x55
   83afa:	f000 8120 	beq.w	83d3e <_vfiprintf_r+0x388>
   83afe:	2b44      	cmp	r3, #68	; 0x44
   83b00:	f040 81e2 	bne.w	83ec8 <_vfiprintf_r+0x512>
   83b04:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   83b08:	f047 0710 	orr.w	r7, r7, #16
   83b0c:	e094      	b.n	83c38 <_vfiprintf_r+0x282>
   83b0e:	2b6e      	cmp	r3, #110	; 0x6e
   83b10:	f000 80b6 	beq.w	83c80 <_vfiprintf_r+0x2ca>
   83b14:	dc0d      	bgt.n	83b32 <_vfiprintf_r+0x17c>
   83b16:	2b68      	cmp	r3, #104	; 0x68
   83b18:	d076      	beq.n	83c08 <_vfiprintf_r+0x252>
   83b1a:	dc05      	bgt.n	83b28 <_vfiprintf_r+0x172>
   83b1c:	2b63      	cmp	r3, #99	; 0x63
   83b1e:	f000 8083 	beq.w	83c28 <_vfiprintf_r+0x272>
   83b22:	2b64      	cmp	r3, #100	; 0x64
   83b24:	d026      	beq.n	83b74 <_vfiprintf_r+0x1be>
   83b26:	e1cf      	b.n	83ec8 <_vfiprintf_r+0x512>
   83b28:	2b69      	cmp	r3, #105	; 0x69
   83b2a:	d023      	beq.n	83b74 <_vfiprintf_r+0x1be>
   83b2c:	2b6c      	cmp	r3, #108	; 0x6c
   83b2e:	d06e      	beq.n	83c0e <_vfiprintf_r+0x258>
   83b30:	e1ca      	b.n	83ec8 <_vfiprintf_r+0x512>
   83b32:	2b71      	cmp	r3, #113	; 0x71
   83b34:	d075      	beq.n	83c22 <_vfiprintf_r+0x26c>
   83b36:	dc13      	bgt.n	83b60 <_vfiprintf_r+0x1aa>
   83b38:	2b6f      	cmp	r3, #111	; 0x6f
   83b3a:	f000 80bf 	beq.w	83cbc <_vfiprintf_r+0x306>
   83b3e:	2b70      	cmp	r3, #112	; 0x70
   83b40:	f040 81c2 	bne.w	83ec8 <_vfiprintf_r+0x512>
   83b44:	2330      	movs	r3, #48	; 0x30
   83b46:	48a0      	ldr	r0, [pc, #640]	; (83dc8 <_vfiprintf_r+0x412>)
   83b48:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   83b4c:	2378      	movs	r3, #120	; 0x78
   83b4e:	6834      	ldr	r4, [r6, #0]
   83b50:	2500      	movs	r5, #0
   83b52:	f047 0702 	orr.w	r7, r7, #2
   83b56:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   83b5a:	3604      	adds	r6, #4
   83b5c:	900a      	str	r0, [sp, #40]	; 0x28
   83b5e:	e12e      	b.n	83dbe <_vfiprintf_r+0x408>
   83b60:	2b75      	cmp	r3, #117	; 0x75
   83b62:	f000 80ee 	beq.w	83d42 <_vfiprintf_r+0x38c>
   83b66:	2b78      	cmp	r3, #120	; 0x78
   83b68:	f000 8103 	beq.w	83d72 <_vfiprintf_r+0x3bc>
   83b6c:	2b73      	cmp	r3, #115	; 0x73
   83b6e:	f040 81ab 	bne.w	83ec8 <_vfiprintf_r+0x512>
   83b72:	e0bf      	b.n	83cf4 <_vfiprintf_r+0x33e>
   83b74:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   83b78:	e05e      	b.n	83c38 <_vfiprintf_r+0x282>
   83b7a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   83b7e:	4c93      	ldr	r4, [pc, #588]	; (83dcc <_vfiprintf_r+0x416>)
   83b80:	e0fa      	b.n	83d78 <_vfiprintf_r+0x3c2>
   83b82:	2a00      	cmp	r2, #0
   83b84:	bf08      	it	eq
   83b86:	2220      	moveq	r2, #32
   83b88:	e7a0      	b.n	83acc <_vfiprintf_r+0x116>
   83b8a:	1d33      	adds	r3, r6, #4
   83b8c:	6836      	ldr	r6, [r6, #0]
   83b8e:	2e00      	cmp	r6, #0
   83b90:	9604      	str	r6, [sp, #16]
   83b92:	db01      	blt.n	83b98 <_vfiprintf_r+0x1e2>
   83b94:	461e      	mov	r6, r3
   83b96:	e799      	b.n	83acc <_vfiprintf_r+0x116>
   83b98:	4275      	negs	r5, r6
   83b9a:	9504      	str	r5, [sp, #16]
   83b9c:	461e      	mov	r6, r3
   83b9e:	f047 0704 	orr.w	r7, r7, #4
   83ba2:	e793      	b.n	83acc <_vfiprintf_r+0x116>
   83ba4:	9c02      	ldr	r4, [sp, #8]
   83ba6:	7823      	ldrb	r3, [r4, #0]
   83ba8:	1c61      	adds	r1, r4, #1
   83baa:	2b2a      	cmp	r3, #42	; 0x2a
   83bac:	d002      	beq.n	83bb4 <_vfiprintf_r+0x1fe>
   83bae:	f04f 0a00 	mov.w	sl, #0
   83bb2:	e00a      	b.n	83bca <_vfiprintf_r+0x214>
   83bb4:	f8d6 a000 	ldr.w	sl, [r6]
   83bb8:	1d33      	adds	r3, r6, #4
   83bba:	f1ba 0f00 	cmp.w	sl, #0
   83bbe:	461e      	mov	r6, r3
   83bc0:	9102      	str	r1, [sp, #8]
   83bc2:	da83      	bge.n	83acc <_vfiprintf_r+0x116>
   83bc4:	f04f 3aff 	mov.w	sl, #4294967295
   83bc8:	e780      	b.n	83acc <_vfiprintf_r+0x116>
   83bca:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   83bce:	2809      	cmp	r0, #9
   83bd0:	d805      	bhi.n	83bde <_vfiprintf_r+0x228>
   83bd2:	230a      	movs	r3, #10
   83bd4:	fb03 0a0a 	mla	sl, r3, sl, r0
   83bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
   83bdc:	e7f5      	b.n	83bca <_vfiprintf_r+0x214>
   83bde:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
   83be2:	9102      	str	r1, [sp, #8]
   83be4:	e762      	b.n	83aac <_vfiprintf_r+0xf6>
   83be6:	2500      	movs	r5, #0
   83be8:	9504      	str	r5, [sp, #16]
   83bea:	9c04      	ldr	r4, [sp, #16]
   83bec:	3b30      	subs	r3, #48	; 0x30
   83bee:	210a      	movs	r1, #10
   83bf0:	fb01 3404 	mla	r4, r1, r4, r3
   83bf4:	9902      	ldr	r1, [sp, #8]
   83bf6:	9404      	str	r4, [sp, #16]
   83bf8:	f811 3b01 	ldrb.w	r3, [r1], #1
   83bfc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   83c00:	2809      	cmp	r0, #9
   83c02:	d8ee      	bhi.n	83be2 <_vfiprintf_r+0x22c>
   83c04:	9102      	str	r1, [sp, #8]
   83c06:	e7f0      	b.n	83bea <_vfiprintf_r+0x234>
   83c08:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   83c0c:	e75e      	b.n	83acc <_vfiprintf_r+0x116>
   83c0e:	9d02      	ldr	r5, [sp, #8]
   83c10:	782b      	ldrb	r3, [r5, #0]
   83c12:	2b6c      	cmp	r3, #108	; 0x6c
   83c14:	d102      	bne.n	83c1c <_vfiprintf_r+0x266>
   83c16:	3501      	adds	r5, #1
   83c18:	9502      	str	r5, [sp, #8]
   83c1a:	e002      	b.n	83c22 <_vfiprintf_r+0x26c>
   83c1c:	f047 0710 	orr.w	r7, r7, #16
   83c20:	e754      	b.n	83acc <_vfiprintf_r+0x116>
   83c22:	f047 0720 	orr.w	r7, r7, #32
   83c26:	e751      	b.n	83acc <_vfiprintf_r+0x116>
   83c28:	6833      	ldr	r3, [r6, #0]
   83c2a:	2500      	movs	r5, #0
   83c2c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   83c30:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   83c34:	3604      	adds	r6, #4
   83c36:	e151      	b.n	83edc <_vfiprintf_r+0x526>
   83c38:	06ba      	lsls	r2, r7, #26
   83c3a:	d507      	bpl.n	83c4c <_vfiprintf_r+0x296>
   83c3c:	3607      	adds	r6, #7
   83c3e:	f026 0307 	bic.w	r3, r6, #7
   83c42:	f103 0608 	add.w	r6, r3, #8
   83c46:	e9d3 4500 	ldrd	r4, r5, [r3]
   83c4a:	e00d      	b.n	83c68 <_vfiprintf_r+0x2b2>
   83c4c:	f017 0f10 	tst.w	r7, #16
   83c50:	f106 0304 	add.w	r3, r6, #4
   83c54:	d001      	beq.n	83c5a <_vfiprintf_r+0x2a4>
   83c56:	6834      	ldr	r4, [r6, #0]
   83c58:	e004      	b.n	83c64 <_vfiprintf_r+0x2ae>
   83c5a:	6834      	ldr	r4, [r6, #0]
   83c5c:	f017 0f40 	tst.w	r7, #64	; 0x40
   83c60:	bf18      	it	ne
   83c62:	b224      	sxthne	r4, r4
   83c64:	17e5      	asrs	r5, r4, #31
   83c66:	461e      	mov	r6, r3
   83c68:	2c00      	cmp	r4, #0
   83c6a:	f175 0000 	sbcs.w	r0, r5, #0
   83c6e:	f280 80af 	bge.w	83dd0 <_vfiprintf_r+0x41a>
   83c72:	232d      	movs	r3, #45	; 0x2d
   83c74:	4264      	negs	r4, r4
   83c76:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   83c7a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   83c7e:	e0a7      	b.n	83dd0 <_vfiprintf_r+0x41a>
   83c80:	f017 0f20 	tst.w	r7, #32
   83c84:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   83c88:	f106 0104 	add.w	r1, r6, #4
   83c8c:	d007      	beq.n	83c9e <_vfiprintf_r+0x2e8>
   83c8e:	9c05      	ldr	r4, [sp, #20]
   83c90:	6830      	ldr	r0, [r6, #0]
   83c92:	17e5      	asrs	r5, r4, #31
   83c94:	4622      	mov	r2, r4
   83c96:	462b      	mov	r3, r5
   83c98:	e9c0 2300 	strd	r2, r3, [r0]
   83c9c:	e00a      	b.n	83cb4 <_vfiprintf_r+0x2fe>
   83c9e:	06fb      	lsls	r3, r7, #27
   83ca0:	d405      	bmi.n	83cae <_vfiprintf_r+0x2f8>
   83ca2:	067f      	lsls	r7, r7, #25
   83ca4:	d503      	bpl.n	83cae <_vfiprintf_r+0x2f8>
   83ca6:	6833      	ldr	r3, [r6, #0]
   83ca8:	9c05      	ldr	r4, [sp, #20]
   83caa:	801c      	strh	r4, [r3, #0]
   83cac:	e002      	b.n	83cb4 <_vfiprintf_r+0x2fe>
   83cae:	6833      	ldr	r3, [r6, #0]
   83cb0:	9d05      	ldr	r5, [sp, #20]
   83cb2:	601d      	str	r5, [r3, #0]
   83cb4:	460e      	mov	r6, r1
   83cb6:	e6c3      	b.n	83a40 <_vfiprintf_r+0x8a>
   83cb8:	f047 0710 	orr.w	r7, r7, #16
   83cbc:	f017 0320 	ands.w	r3, r7, #32
   83cc0:	d008      	beq.n	83cd4 <_vfiprintf_r+0x31e>
   83cc2:	3607      	adds	r6, #7
   83cc4:	f026 0307 	bic.w	r3, r6, #7
   83cc8:	f103 0608 	add.w	r6, r3, #8
   83ccc:	e9d3 4500 	ldrd	r4, r5, [r3]
   83cd0:	2300      	movs	r3, #0
   83cd2:	e075      	b.n	83dc0 <_vfiprintf_r+0x40a>
   83cd4:	f017 0110 	ands.w	r1, r7, #16
   83cd8:	f106 0204 	add.w	r2, r6, #4
   83cdc:	d106      	bne.n	83cec <_vfiprintf_r+0x336>
   83cde:	f017 0340 	ands.w	r3, r7, #64	; 0x40
   83ce2:	d003      	beq.n	83cec <_vfiprintf_r+0x336>
   83ce4:	8834      	ldrh	r4, [r6, #0]
   83ce6:	2500      	movs	r5, #0
   83ce8:	4616      	mov	r6, r2
   83cea:	e7f1      	b.n	83cd0 <_vfiprintf_r+0x31a>
   83cec:	6834      	ldr	r4, [r6, #0]
   83cee:	2500      	movs	r5, #0
   83cf0:	4616      	mov	r6, r2
   83cf2:	e065      	b.n	83dc0 <_vfiprintf_r+0x40a>
   83cf4:	f8d6 9000 	ldr.w	r9, [r6]
   83cf8:	2300      	movs	r3, #0
   83cfa:	459a      	cmp	sl, r3
   83cfc:	f106 0604 	add.w	r6, r6, #4
   83d00:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   83d04:	4648      	mov	r0, r9
   83d06:	db11      	blt.n	83d2c <_vfiprintf_r+0x376>
   83d08:	4619      	mov	r1, r3
   83d0a:	4652      	mov	r2, sl
   83d0c:	f8cd c004 	str.w	ip, [sp, #4]
   83d10:	f001 fafa 	bl	85308 <memchr>
   83d14:	f8dd c004 	ldr.w	ip, [sp, #4]
   83d18:	2800      	cmp	r0, #0
   83d1a:	f000 80e4 	beq.w	83ee6 <_vfiprintf_r+0x530>
   83d1e:	ebc9 0000 	rsb	r0, r9, r0
   83d22:	4550      	cmp	r0, sl
   83d24:	bfb8      	it	lt
   83d26:	4682      	movlt	sl, r0
   83d28:	2500      	movs	r5, #0
   83d2a:	e0dd      	b.n	83ee8 <_vfiprintf_r+0x532>
   83d2c:	f8cd c004 	str.w	ip, [sp, #4]
   83d30:	f7ff fdf4 	bl	8391c <strlen>
   83d34:	2500      	movs	r5, #0
   83d36:	4682      	mov	sl, r0
   83d38:	f8dd c004 	ldr.w	ip, [sp, #4]
   83d3c:	e0d4      	b.n	83ee8 <_vfiprintf_r+0x532>
   83d3e:	f047 0710 	orr.w	r7, r7, #16
   83d42:	06bd      	lsls	r5, r7, #26
   83d44:	d507      	bpl.n	83d56 <_vfiprintf_r+0x3a0>
   83d46:	3607      	adds	r6, #7
   83d48:	f026 0307 	bic.w	r3, r6, #7
   83d4c:	f103 0608 	add.w	r6, r3, #8
   83d50:	e9d3 4500 	ldrd	r4, r5, [r3]
   83d54:	e00b      	b.n	83d6e <_vfiprintf_r+0x3b8>
   83d56:	f017 0f10 	tst.w	r7, #16
   83d5a:	f106 0304 	add.w	r3, r6, #4
   83d5e:	d103      	bne.n	83d68 <_vfiprintf_r+0x3b2>
   83d60:	067c      	lsls	r4, r7, #25
   83d62:	d501      	bpl.n	83d68 <_vfiprintf_r+0x3b2>
   83d64:	8834      	ldrh	r4, [r6, #0]
   83d66:	e000      	b.n	83d6a <_vfiprintf_r+0x3b4>
   83d68:	6834      	ldr	r4, [r6, #0]
   83d6a:	2500      	movs	r5, #0
   83d6c:	461e      	mov	r6, r3
   83d6e:	2301      	movs	r3, #1
   83d70:	e026      	b.n	83dc0 <_vfiprintf_r+0x40a>
   83d72:	4c15      	ldr	r4, [pc, #84]	; (83dc8 <_vfiprintf_r+0x412>)
   83d74:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   83d78:	06b8      	lsls	r0, r7, #26
   83d7a:	940a      	str	r4, [sp, #40]	; 0x28
   83d7c:	d507      	bpl.n	83d8e <_vfiprintf_r+0x3d8>
   83d7e:	3607      	adds	r6, #7
   83d80:	f026 0207 	bic.w	r2, r6, #7
   83d84:	f102 0608 	add.w	r6, r2, #8
   83d88:	e9d2 4500 	ldrd	r4, r5, [r2]
   83d8c:	e00b      	b.n	83da6 <_vfiprintf_r+0x3f0>
   83d8e:	f017 0f10 	tst.w	r7, #16
   83d92:	f106 0204 	add.w	r2, r6, #4
   83d96:	d103      	bne.n	83da0 <_vfiprintf_r+0x3ea>
   83d98:	0679      	lsls	r1, r7, #25
   83d9a:	d501      	bpl.n	83da0 <_vfiprintf_r+0x3ea>
   83d9c:	8834      	ldrh	r4, [r6, #0]
   83d9e:	e000      	b.n	83da2 <_vfiprintf_r+0x3ec>
   83da0:	6834      	ldr	r4, [r6, #0]
   83da2:	2500      	movs	r5, #0
   83da4:	4616      	mov	r6, r2
   83da6:	07fa      	lsls	r2, r7, #31
   83da8:	d509      	bpl.n	83dbe <_vfiprintf_r+0x408>
   83daa:	ea54 0005 	orrs.w	r0, r4, r5
   83dae:	d006      	beq.n	83dbe <_vfiprintf_r+0x408>
   83db0:	2230      	movs	r2, #48	; 0x30
   83db2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   83db6:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   83dba:	f047 0702 	orr.w	r7, r7, #2
   83dbe:	2302      	movs	r3, #2
   83dc0:	2200      	movs	r2, #0
   83dc2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   83dc6:	e004      	b.n	83dd2 <_vfiprintf_r+0x41c>
   83dc8:	0008610f 	.word	0x0008610f
   83dcc:	000860fe 	.word	0x000860fe
   83dd0:	2301      	movs	r3, #1
   83dd2:	f1ba 0f00 	cmp.w	sl, #0
   83dd6:	bfa8      	it	ge
   83dd8:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   83ddc:	ea54 0105 	orrs.w	r1, r4, r5
   83de0:	d102      	bne.n	83de8 <_vfiprintf_r+0x432>
   83de2:	f1ba 0f00 	cmp.w	sl, #0
   83de6:	d05e      	beq.n	83ea6 <_vfiprintf_r+0x4f0>
   83de8:	2b01      	cmp	r3, #1
   83dea:	d01f      	beq.n	83e2c <_vfiprintf_r+0x476>
   83dec:	2b02      	cmp	r3, #2
   83dee:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
   83df2:	d045      	beq.n	83e80 <_vfiprintf_r+0x4ca>
   83df4:	08e0      	lsrs	r0, r4, #3
   83df6:	ea40 7145 	orr.w	r1, r0, r5, lsl #29
   83dfa:	08e8      	lsrs	r0, r5, #3
   83dfc:	f004 0207 	and.w	r2, r4, #7
   83e00:	9106      	str	r1, [sp, #24]
   83e02:	9007      	str	r0, [sp, #28]
   83e04:	3230      	adds	r2, #48	; 0x30
   83e06:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
   83e0a:	ea54 0105 	orrs.w	r1, r4, r5
   83e0e:	4699      	mov	r9, r3
   83e10:	701a      	strb	r2, [r3, #0]
   83e12:	f103 33ff 	add.w	r3, r3, #4294967295
   83e16:	d1ed      	bne.n	83df4 <_vfiprintf_r+0x43e>
   83e18:	07f8      	lsls	r0, r7, #31
   83e1a:	4649      	mov	r1, r9
   83e1c:	d54e      	bpl.n	83ebc <_vfiprintf_r+0x506>
   83e1e:	2a30      	cmp	r2, #48	; 0x30
   83e20:	d04c      	beq.n	83ebc <_vfiprintf_r+0x506>
   83e22:	4699      	mov	r9, r3
   83e24:	2330      	movs	r3, #48	; 0x30
   83e26:	f801 3c01 	strb.w	r3, [r1, #-1]
   83e2a:	e047      	b.n	83ebc <_vfiprintf_r+0x506>
   83e2c:	2d00      	cmp	r5, #0
   83e2e:	bf08      	it	eq
   83e30:	2c0a      	cmpeq	r4, #10
   83e32:	d205      	bcs.n	83e40 <_vfiprintf_r+0x48a>
   83e34:	3430      	adds	r4, #48	; 0x30
   83e36:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   83e3a:	f10d 096f 	add.w	r9, sp, #111	; 0x6f
   83e3e:	e03d      	b.n	83ebc <_vfiprintf_r+0x506>
   83e40:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
   83e44:	9203      	str	r2, [sp, #12]
   83e46:	4620      	mov	r0, r4
   83e48:	4629      	mov	r1, r5
   83e4a:	220a      	movs	r2, #10
   83e4c:	2300      	movs	r3, #0
   83e4e:	f8cd c004 	str.w	ip, [sp, #4]
   83e52:	f001 fd95 	bl	85980 <__aeabi_uldivmod>
   83e56:	9b03      	ldr	r3, [sp, #12]
   83e58:	3230      	adds	r2, #48	; 0x30
   83e5a:	f803 2901 	strb.w	r2, [r3], #-1
   83e5e:	4620      	mov	r0, r4
   83e60:	4629      	mov	r1, r5
   83e62:	f8dd 900c 	ldr.w	r9, [sp, #12]
   83e66:	220a      	movs	r2, #10
   83e68:	9303      	str	r3, [sp, #12]
   83e6a:	2300      	movs	r3, #0
   83e6c:	f001 fd88 	bl	85980 <__aeabi_uldivmod>
   83e70:	4604      	mov	r4, r0
   83e72:	460d      	mov	r5, r1
   83e74:	ea54 0005 	orrs.w	r0, r4, r5
   83e78:	f8dd c004 	ldr.w	ip, [sp, #4]
   83e7c:	d1e3      	bne.n	83e46 <_vfiprintf_r+0x490>
   83e7e:	e01d      	b.n	83ebc <_vfiprintf_r+0x506>
   83e80:	990a      	ldr	r1, [sp, #40]	; 0x28
   83e82:	f004 020f 	and.w	r2, r4, #15
   83e86:	5c8a      	ldrb	r2, [r1, r2]
   83e88:	4699      	mov	r9, r3
   83e8a:	f803 2901 	strb.w	r2, [r3], #-1
   83e8e:	0922      	lsrs	r2, r4, #4
   83e90:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
   83e94:	0929      	lsrs	r1, r5, #4
   83e96:	9008      	str	r0, [sp, #32]
   83e98:	9109      	str	r1, [sp, #36]	; 0x24
   83e9a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   83e9e:	ea54 0205 	orrs.w	r2, r4, r5
   83ea2:	d1ed      	bne.n	83e80 <_vfiprintf_r+0x4ca>
   83ea4:	e00a      	b.n	83ebc <_vfiprintf_r+0x506>
   83ea6:	b93b      	cbnz	r3, 83eb8 <_vfiprintf_r+0x502>
   83ea8:	07f9      	lsls	r1, r7, #31
   83eaa:	d505      	bpl.n	83eb8 <_vfiprintf_r+0x502>
   83eac:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
   83eb0:	2330      	movs	r3, #48	; 0x30
   83eb2:	f809 3d41 	strb.w	r3, [r9, #-65]!
   83eb6:	e001      	b.n	83ebc <_vfiprintf_r+0x506>
   83eb8:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   83ebc:	4655      	mov	r5, sl
   83ebe:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   83ec2:	ebc9 0a0a 	rsb	sl, r9, sl
   83ec6:	e00f      	b.n	83ee8 <_vfiprintf_r+0x532>
   83ec8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   83ecc:	2b00      	cmp	r3, #0
   83ece:	f000 8171 	beq.w	841b4 <_vfiprintf_r+0x7fe>
   83ed2:	2500      	movs	r5, #0
   83ed4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   83ed8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   83edc:	f04f 0a01 	mov.w	sl, #1
   83ee0:	f10d 0948 	add.w	r9, sp, #72	; 0x48
   83ee4:	e000      	b.n	83ee8 <_vfiprintf_r+0x532>
   83ee6:	4605      	mov	r5, r0
   83ee8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   83eec:	45aa      	cmp	sl, r5
   83eee:	bfac      	ite	ge
   83ef0:	4654      	movge	r4, sl
   83ef2:	462c      	movlt	r4, r5
   83ef4:	b103      	cbz	r3, 83ef8 <_vfiprintf_r+0x542>
   83ef6:	3401      	adds	r4, #1
   83ef8:	f017 0302 	ands.w	r3, r7, #2
   83efc:	9303      	str	r3, [sp, #12]
   83efe:	bf18      	it	ne
   83f00:	3402      	addne	r4, #2
   83f02:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   83f06:	930b      	str	r3, [sp, #44]	; 0x2c
   83f08:	d13b      	bne.n	83f82 <_vfiprintf_r+0x5cc>
   83f0a:	9804      	ldr	r0, [sp, #16]
   83f0c:	1b03      	subs	r3, r0, r4
   83f0e:	2b00      	cmp	r3, #0
   83f10:	dd37      	ble.n	83f82 <_vfiprintf_r+0x5cc>
   83f12:	4aa6      	ldr	r2, [pc, #664]	; (841ac <_vfiprintf_r+0x7f6>)
   83f14:	2b10      	cmp	r3, #16
   83f16:	f8cc 2000 	str.w	r2, [ip]
   83f1a:	dd1b      	ble.n	83f54 <_vfiprintf_r+0x59e>
   83f1c:	2210      	movs	r2, #16
   83f1e:	f8cc 2004 	str.w	r2, [ip, #4]
   83f22:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83f24:	3210      	adds	r2, #16
   83f26:	9211      	str	r2, [sp, #68]	; 0x44
   83f28:	9a10      	ldr	r2, [sp, #64]	; 0x40
   83f2a:	3201      	adds	r2, #1
   83f2c:	2a07      	cmp	r2, #7
   83f2e:	9210      	str	r2, [sp, #64]	; 0x40
   83f30:	dc02      	bgt.n	83f38 <_vfiprintf_r+0x582>
   83f32:	f10c 0c08 	add.w	ip, ip, #8
   83f36:	e00b      	b.n	83f50 <_vfiprintf_r+0x59a>
   83f38:	4658      	mov	r0, fp
   83f3a:	4641      	mov	r1, r8
   83f3c:	aa0f      	add	r2, sp, #60	; 0x3c
   83f3e:	9301      	str	r3, [sp, #4]
   83f40:	f7ff fd06 	bl	83950 <__sprint_r>
   83f44:	9b01      	ldr	r3, [sp, #4]
   83f46:	2800      	cmp	r0, #0
   83f48:	f040 813b 	bne.w	841c2 <_vfiprintf_r+0x80c>
   83f4c:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   83f50:	3b10      	subs	r3, #16
   83f52:	e7de      	b.n	83f12 <_vfiprintf_r+0x55c>
   83f54:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83f56:	f8cc 3004 	str.w	r3, [ip, #4]
   83f5a:	4413      	add	r3, r2
   83f5c:	9311      	str	r3, [sp, #68]	; 0x44
   83f5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   83f60:	3301      	adds	r3, #1
   83f62:	2b07      	cmp	r3, #7
   83f64:	9310      	str	r3, [sp, #64]	; 0x40
   83f66:	dc02      	bgt.n	83f6e <_vfiprintf_r+0x5b8>
   83f68:	f10c 0c08 	add.w	ip, ip, #8
   83f6c:	e009      	b.n	83f82 <_vfiprintf_r+0x5cc>
   83f6e:	4658      	mov	r0, fp
   83f70:	4641      	mov	r1, r8
   83f72:	aa0f      	add	r2, sp, #60	; 0x3c
   83f74:	f7ff fcec 	bl	83950 <__sprint_r>
   83f78:	2800      	cmp	r0, #0
   83f7a:	f040 8122 	bne.w	841c2 <_vfiprintf_r+0x80c>
   83f7e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   83f82:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   83f86:	b1db      	cbz	r3, 83fc0 <_vfiprintf_r+0x60a>
   83f88:	f10d 0337 	add.w	r3, sp, #55	; 0x37
   83f8c:	f8cc 3000 	str.w	r3, [ip]
   83f90:	2301      	movs	r3, #1
   83f92:	f8cc 3004 	str.w	r3, [ip, #4]
   83f96:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83f98:	3301      	adds	r3, #1
   83f9a:	9311      	str	r3, [sp, #68]	; 0x44
   83f9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   83f9e:	3301      	adds	r3, #1
   83fa0:	2b07      	cmp	r3, #7
   83fa2:	9310      	str	r3, [sp, #64]	; 0x40
   83fa4:	dc02      	bgt.n	83fac <_vfiprintf_r+0x5f6>
   83fa6:	f10c 0c08 	add.w	ip, ip, #8
   83faa:	e009      	b.n	83fc0 <_vfiprintf_r+0x60a>
   83fac:	4658      	mov	r0, fp
   83fae:	4641      	mov	r1, r8
   83fb0:	aa0f      	add	r2, sp, #60	; 0x3c
   83fb2:	f7ff fccd 	bl	83950 <__sprint_r>
   83fb6:	2800      	cmp	r0, #0
   83fb8:	f040 8103 	bne.w	841c2 <_vfiprintf_r+0x80c>
   83fbc:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   83fc0:	9b03      	ldr	r3, [sp, #12]
   83fc2:	b1d3      	cbz	r3, 83ffa <_vfiprintf_r+0x644>
   83fc4:	ab0e      	add	r3, sp, #56	; 0x38
   83fc6:	f8cc 3000 	str.w	r3, [ip]
   83fca:	2302      	movs	r3, #2
   83fcc:	f8cc 3004 	str.w	r3, [ip, #4]
   83fd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83fd2:	3302      	adds	r3, #2
   83fd4:	9311      	str	r3, [sp, #68]	; 0x44
   83fd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   83fd8:	3301      	adds	r3, #1
   83fda:	2b07      	cmp	r3, #7
   83fdc:	9310      	str	r3, [sp, #64]	; 0x40
   83fde:	dc02      	bgt.n	83fe6 <_vfiprintf_r+0x630>
   83fe0:	f10c 0c08 	add.w	ip, ip, #8
   83fe4:	e009      	b.n	83ffa <_vfiprintf_r+0x644>
   83fe6:	4658      	mov	r0, fp
   83fe8:	4641      	mov	r1, r8
   83fea:	aa0f      	add	r2, sp, #60	; 0x3c
   83fec:	f7ff fcb0 	bl	83950 <__sprint_r>
   83ff0:	2800      	cmp	r0, #0
   83ff2:	f040 80e6 	bne.w	841c2 <_vfiprintf_r+0x80c>
   83ff6:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   83ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83ffc:	2b80      	cmp	r3, #128	; 0x80
   83ffe:	d13f      	bne.n	84080 <_vfiprintf_r+0x6ca>
   84000:	9b04      	ldr	r3, [sp, #16]
   84002:	1b1b      	subs	r3, r3, r4
   84004:	2b00      	cmp	r3, #0
   84006:	9303      	str	r3, [sp, #12]
   84008:	dd3a      	ble.n	84080 <_vfiprintf_r+0x6ca>
   8400a:	9b03      	ldr	r3, [sp, #12]
   8400c:	2b10      	cmp	r3, #16
   8400e:	4b68      	ldr	r3, [pc, #416]	; (841b0 <_vfiprintf_r+0x7fa>)
   84010:	f8cc 3000 	str.w	r3, [ip]
   84014:	dd1b      	ble.n	8404e <_vfiprintf_r+0x698>
   84016:	2310      	movs	r3, #16
   84018:	f8cc 3004 	str.w	r3, [ip, #4]
   8401c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8401e:	3310      	adds	r3, #16
   84020:	9311      	str	r3, [sp, #68]	; 0x44
   84022:	9b10      	ldr	r3, [sp, #64]	; 0x40
   84024:	3301      	adds	r3, #1
   84026:	2b07      	cmp	r3, #7
   84028:	9310      	str	r3, [sp, #64]	; 0x40
   8402a:	dc02      	bgt.n	84032 <_vfiprintf_r+0x67c>
   8402c:	f10c 0c08 	add.w	ip, ip, #8
   84030:	e009      	b.n	84046 <_vfiprintf_r+0x690>
   84032:	4658      	mov	r0, fp
   84034:	4641      	mov	r1, r8
   84036:	aa0f      	add	r2, sp, #60	; 0x3c
   84038:	f7ff fc8a 	bl	83950 <__sprint_r>
   8403c:	2800      	cmp	r0, #0
   8403e:	f040 80c0 	bne.w	841c2 <_vfiprintf_r+0x80c>
   84042:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   84046:	9b03      	ldr	r3, [sp, #12]
   84048:	3b10      	subs	r3, #16
   8404a:	9303      	str	r3, [sp, #12]
   8404c:	e7dd      	b.n	8400a <_vfiprintf_r+0x654>
   8404e:	9b03      	ldr	r3, [sp, #12]
   84050:	9803      	ldr	r0, [sp, #12]
   84052:	f8cc 3004 	str.w	r3, [ip, #4]
   84056:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84058:	4403      	add	r3, r0
   8405a:	9311      	str	r3, [sp, #68]	; 0x44
   8405c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8405e:	3301      	adds	r3, #1
   84060:	2b07      	cmp	r3, #7
   84062:	9310      	str	r3, [sp, #64]	; 0x40
   84064:	dc02      	bgt.n	8406c <_vfiprintf_r+0x6b6>
   84066:	f10c 0c08 	add.w	ip, ip, #8
   8406a:	e009      	b.n	84080 <_vfiprintf_r+0x6ca>
   8406c:	4658      	mov	r0, fp
   8406e:	4641      	mov	r1, r8
   84070:	aa0f      	add	r2, sp, #60	; 0x3c
   84072:	f7ff fc6d 	bl	83950 <__sprint_r>
   84076:	2800      	cmp	r0, #0
   84078:	f040 80a3 	bne.w	841c2 <_vfiprintf_r+0x80c>
   8407c:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   84080:	ebca 0505 	rsb	r5, sl, r5
   84084:	2d00      	cmp	r5, #0
   84086:	dd34      	ble.n	840f2 <_vfiprintf_r+0x73c>
   84088:	4b49      	ldr	r3, [pc, #292]	; (841b0 <_vfiprintf_r+0x7fa>)
   8408a:	2d10      	cmp	r5, #16
   8408c:	f8cc 3000 	str.w	r3, [ip]
   84090:	dd19      	ble.n	840c6 <_vfiprintf_r+0x710>
   84092:	2310      	movs	r3, #16
   84094:	f8cc 3004 	str.w	r3, [ip, #4]
   84098:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8409a:	3310      	adds	r3, #16
   8409c:	9311      	str	r3, [sp, #68]	; 0x44
   8409e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   840a0:	3301      	adds	r3, #1
   840a2:	2b07      	cmp	r3, #7
   840a4:	9310      	str	r3, [sp, #64]	; 0x40
   840a6:	dc02      	bgt.n	840ae <_vfiprintf_r+0x6f8>
   840a8:	f10c 0c08 	add.w	ip, ip, #8
   840ac:	e009      	b.n	840c2 <_vfiprintf_r+0x70c>
   840ae:	4658      	mov	r0, fp
   840b0:	4641      	mov	r1, r8
   840b2:	aa0f      	add	r2, sp, #60	; 0x3c
   840b4:	f7ff fc4c 	bl	83950 <__sprint_r>
   840b8:	2800      	cmp	r0, #0
   840ba:	f040 8082 	bne.w	841c2 <_vfiprintf_r+0x80c>
   840be:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   840c2:	3d10      	subs	r5, #16
   840c4:	e7e0      	b.n	84088 <_vfiprintf_r+0x6d2>
   840c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   840c8:	f8cc 5004 	str.w	r5, [ip, #4]
   840cc:	441d      	add	r5, r3
   840ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
   840d0:	9511      	str	r5, [sp, #68]	; 0x44
   840d2:	3301      	adds	r3, #1
   840d4:	2b07      	cmp	r3, #7
   840d6:	9310      	str	r3, [sp, #64]	; 0x40
   840d8:	dc02      	bgt.n	840e0 <_vfiprintf_r+0x72a>
   840da:	f10c 0c08 	add.w	ip, ip, #8
   840de:	e008      	b.n	840f2 <_vfiprintf_r+0x73c>
   840e0:	4658      	mov	r0, fp
   840e2:	4641      	mov	r1, r8
   840e4:	aa0f      	add	r2, sp, #60	; 0x3c
   840e6:	f7ff fc33 	bl	83950 <__sprint_r>
   840ea:	2800      	cmp	r0, #0
   840ec:	d169      	bne.n	841c2 <_vfiprintf_r+0x80c>
   840ee:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   840f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   840f4:	e88c 0600 	stmia.w	ip, {r9, sl}
   840f8:	4453      	add	r3, sl
   840fa:	9311      	str	r3, [sp, #68]	; 0x44
   840fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   840fe:	3301      	adds	r3, #1
   84100:	2b07      	cmp	r3, #7
   84102:	9310      	str	r3, [sp, #64]	; 0x40
   84104:	dc02      	bgt.n	8410c <_vfiprintf_r+0x756>
   84106:	f10c 0308 	add.w	r3, ip, #8
   8410a:	e007      	b.n	8411c <_vfiprintf_r+0x766>
   8410c:	4658      	mov	r0, fp
   8410e:	4641      	mov	r1, r8
   84110:	aa0f      	add	r2, sp, #60	; 0x3c
   84112:	f7ff fc1d 	bl	83950 <__sprint_r>
   84116:	2800      	cmp	r0, #0
   84118:	d153      	bne.n	841c2 <_vfiprintf_r+0x80c>
   8411a:	ab1c      	add	r3, sp, #112	; 0x70
   8411c:	077a      	lsls	r2, r7, #29
   8411e:	d40a      	bmi.n	84136 <_vfiprintf_r+0x780>
   84120:	9d05      	ldr	r5, [sp, #20]
   84122:	9804      	ldr	r0, [sp, #16]
   84124:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84126:	4284      	cmp	r4, r0
   84128:	bfac      	ite	ge
   8412a:	192d      	addge	r5, r5, r4
   8412c:	182d      	addlt	r5, r5, r0
   8412e:	9505      	str	r5, [sp, #20]
   84130:	2b00      	cmp	r3, #0
   84132:	d035      	beq.n	841a0 <_vfiprintf_r+0x7ea>
   84134:	e02e      	b.n	84194 <_vfiprintf_r+0x7de>
   84136:	9904      	ldr	r1, [sp, #16]
   84138:	1b0d      	subs	r5, r1, r4
   8413a:	2d00      	cmp	r5, #0
   8413c:	ddf0      	ble.n	84120 <_vfiprintf_r+0x76a>
   8413e:	4a1b      	ldr	r2, [pc, #108]	; (841ac <_vfiprintf_r+0x7f6>)
   84140:	2d10      	cmp	r5, #16
   84142:	601a      	str	r2, [r3, #0]
   84144:	dd15      	ble.n	84172 <_vfiprintf_r+0x7bc>
   84146:	2210      	movs	r2, #16
   84148:	605a      	str	r2, [r3, #4]
   8414a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8414c:	3210      	adds	r2, #16
   8414e:	9211      	str	r2, [sp, #68]	; 0x44
   84150:	9a10      	ldr	r2, [sp, #64]	; 0x40
   84152:	3201      	adds	r2, #1
   84154:	2a07      	cmp	r2, #7
   84156:	9210      	str	r2, [sp, #64]	; 0x40
   84158:	dc01      	bgt.n	8415e <_vfiprintf_r+0x7a8>
   8415a:	3308      	adds	r3, #8
   8415c:	e007      	b.n	8416e <_vfiprintf_r+0x7b8>
   8415e:	4658      	mov	r0, fp
   84160:	4641      	mov	r1, r8
   84162:	aa0f      	add	r2, sp, #60	; 0x3c
   84164:	f7ff fbf4 	bl	83950 <__sprint_r>
   84168:	2800      	cmp	r0, #0
   8416a:	d12a      	bne.n	841c2 <_vfiprintf_r+0x80c>
   8416c:	ab1c      	add	r3, sp, #112	; 0x70
   8416e:	3d10      	subs	r5, #16
   84170:	e7e5      	b.n	8413e <_vfiprintf_r+0x788>
   84172:	605d      	str	r5, [r3, #4]
   84174:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84176:	441d      	add	r5, r3
   84178:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8417a:	9511      	str	r5, [sp, #68]	; 0x44
   8417c:	3301      	adds	r3, #1
   8417e:	2b07      	cmp	r3, #7
   84180:	9310      	str	r3, [sp, #64]	; 0x40
   84182:	ddcd      	ble.n	84120 <_vfiprintf_r+0x76a>
   84184:	4658      	mov	r0, fp
   84186:	4641      	mov	r1, r8
   84188:	aa0f      	add	r2, sp, #60	; 0x3c
   8418a:	f7ff fbe1 	bl	83950 <__sprint_r>
   8418e:	2800      	cmp	r0, #0
   84190:	d0c6      	beq.n	84120 <_vfiprintf_r+0x76a>
   84192:	e016      	b.n	841c2 <_vfiprintf_r+0x80c>
   84194:	4658      	mov	r0, fp
   84196:	4641      	mov	r1, r8
   84198:	aa0f      	add	r2, sp, #60	; 0x3c
   8419a:	f7ff fbd9 	bl	83950 <__sprint_r>
   8419e:	b980      	cbnz	r0, 841c2 <_vfiprintf_r+0x80c>
   841a0:	2300      	movs	r3, #0
   841a2:	9310      	str	r3, [sp, #64]	; 0x40
   841a4:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   841a8:	e44a      	b.n	83a40 <_vfiprintf_r+0x8a>
   841aa:	bf00      	nop
   841ac:	000860de 	.word	0x000860de
   841b0:	000860ee 	.word	0x000860ee
   841b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   841b6:	b123      	cbz	r3, 841c2 <_vfiprintf_r+0x80c>
   841b8:	4658      	mov	r0, fp
   841ba:	4641      	mov	r1, r8
   841bc:	aa0f      	add	r2, sp, #60	; 0x3c
   841be:	f7ff fbc7 	bl	83950 <__sprint_r>
   841c2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   841c6:	065b      	lsls	r3, r3, #25
   841c8:	f53f ac24 	bmi.w	83a14 <_vfiprintf_r+0x5e>
   841cc:	9805      	ldr	r0, [sp, #20]
   841ce:	b02d      	add	sp, #180	; 0xb4
   841d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000841d4 <vfiprintf>:
   841d4:	b530      	push	{r4, r5, lr}
   841d6:	4613      	mov	r3, r2
   841d8:	4a04      	ldr	r2, [pc, #16]	; (841ec <vfiprintf+0x18>)
   841da:	4605      	mov	r5, r0
   841dc:	460c      	mov	r4, r1
   841de:	6810      	ldr	r0, [r2, #0]
   841e0:	4629      	mov	r1, r5
   841e2:	4622      	mov	r2, r4
   841e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   841e8:	f7ff bbe5 	b.w	839b6 <_vfiprintf_r>
   841ec:	200704d0 	.word	0x200704d0

000841f0 <__sbprintf>:
   841f0:	b570      	push	{r4, r5, r6, lr}
   841f2:	460c      	mov	r4, r1
   841f4:	8989      	ldrh	r1, [r1, #12]
   841f6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   841fa:	f021 0102 	bic.w	r1, r1, #2
   841fe:	f8ad 100c 	strh.w	r1, [sp, #12]
   84202:	6e61      	ldr	r1, [r4, #100]	; 0x64
   84204:	4606      	mov	r6, r0
   84206:	9119      	str	r1, [sp, #100]	; 0x64
   84208:	89e1      	ldrh	r1, [r4, #14]
   8420a:	f8ad 100e 	strh.w	r1, [sp, #14]
   8420e:	69e1      	ldr	r1, [r4, #28]
   84210:	9107      	str	r1, [sp, #28]
   84212:	6a61      	ldr	r1, [r4, #36]	; 0x24
   84214:	9109      	str	r1, [sp, #36]	; 0x24
   84216:	a91a      	add	r1, sp, #104	; 0x68
   84218:	9100      	str	r1, [sp, #0]
   8421a:	9104      	str	r1, [sp, #16]
   8421c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   84220:	9102      	str	r1, [sp, #8]
   84222:	9105      	str	r1, [sp, #20]
   84224:	2100      	movs	r1, #0
   84226:	9106      	str	r1, [sp, #24]
   84228:	4669      	mov	r1, sp
   8422a:	f7ff fbc4 	bl	839b6 <_vfiprintf_r>
   8422e:	1e05      	subs	r5, r0, #0
   84230:	db07      	blt.n	84242 <__sbprintf+0x52>
   84232:	4630      	mov	r0, r6
   84234:	4669      	mov	r1, sp
   84236:	f000 f99e 	bl	84576 <_fflush_r>
   8423a:	2800      	cmp	r0, #0
   8423c:	bf18      	it	ne
   8423e:	f04f 35ff 	movne.w	r5, #4294967295
   84242:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   84246:	065b      	lsls	r3, r3, #25
   84248:	d503      	bpl.n	84252 <__sbprintf+0x62>
   8424a:	89a3      	ldrh	r3, [r4, #12]
   8424c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84250:	81a3      	strh	r3, [r4, #12]
   84252:	4628      	mov	r0, r5
   84254:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   84258:	bd70      	pop	{r4, r5, r6, pc}
   8425a:	bf00      	nop

0008425c <__swbuf_r>:
   8425c:	b570      	push	{r4, r5, r6, lr}
   8425e:	460d      	mov	r5, r1
   84260:	4614      	mov	r4, r2
   84262:	4606      	mov	r6, r0
   84264:	b118      	cbz	r0, 8426e <__swbuf_r+0x12>
   84266:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84268:	b90b      	cbnz	r3, 8426e <__swbuf_r+0x12>
   8426a:	f000 f9cd 	bl	84608 <__sinit>
   8426e:	69a3      	ldr	r3, [r4, #24]
   84270:	60a3      	str	r3, [r4, #8]
   84272:	89a3      	ldrh	r3, [r4, #12]
   84274:	0719      	lsls	r1, r3, #28
   84276:	d50d      	bpl.n	84294 <__swbuf_r+0x38>
   84278:	6923      	ldr	r3, [r4, #16]
   8427a:	b15b      	cbz	r3, 84294 <__swbuf_r+0x38>
   8427c:	89a3      	ldrh	r3, [r4, #12]
   8427e:	b2ed      	uxtb	r5, r5
   84280:	049a      	lsls	r2, r3, #18
   84282:	d410      	bmi.n	842a6 <__swbuf_r+0x4a>
   84284:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   84288:	81a3      	strh	r3, [r4, #12]
   8428a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8428c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   84290:	6663      	str	r3, [r4, #100]	; 0x64
   84292:	e008      	b.n	842a6 <__swbuf_r+0x4a>
   84294:	4630      	mov	r0, r6
   84296:	4621      	mov	r1, r4
   84298:	f000 f832 	bl	84300 <__swsetup_r>
   8429c:	2800      	cmp	r0, #0
   8429e:	d0ed      	beq.n	8427c <__swbuf_r+0x20>
   842a0:	f04f 30ff 	mov.w	r0, #4294967295
   842a4:	bd70      	pop	{r4, r5, r6, pc}
   842a6:	6923      	ldr	r3, [r4, #16]
   842a8:	6820      	ldr	r0, [r4, #0]
   842aa:	1ac0      	subs	r0, r0, r3
   842ac:	6963      	ldr	r3, [r4, #20]
   842ae:	4298      	cmp	r0, r3
   842b0:	db05      	blt.n	842be <__swbuf_r+0x62>
   842b2:	4630      	mov	r0, r6
   842b4:	4621      	mov	r1, r4
   842b6:	f000 f95e 	bl	84576 <_fflush_r>
   842ba:	2800      	cmp	r0, #0
   842bc:	d1f0      	bne.n	842a0 <__swbuf_r+0x44>
   842be:	68a3      	ldr	r3, [r4, #8]
   842c0:	3001      	adds	r0, #1
   842c2:	3b01      	subs	r3, #1
   842c4:	60a3      	str	r3, [r4, #8]
   842c6:	6823      	ldr	r3, [r4, #0]
   842c8:	1c5a      	adds	r2, r3, #1
   842ca:	6022      	str	r2, [r4, #0]
   842cc:	701d      	strb	r5, [r3, #0]
   842ce:	6963      	ldr	r3, [r4, #20]
   842d0:	4298      	cmp	r0, r3
   842d2:	d004      	beq.n	842de <__swbuf_r+0x82>
   842d4:	89a3      	ldrh	r3, [r4, #12]
   842d6:	07db      	lsls	r3, r3, #31
   842d8:	d507      	bpl.n	842ea <__swbuf_r+0x8e>
   842da:	2d0a      	cmp	r5, #10
   842dc:	d105      	bne.n	842ea <__swbuf_r+0x8e>
   842de:	4630      	mov	r0, r6
   842e0:	4621      	mov	r1, r4
   842e2:	f000 f948 	bl	84576 <_fflush_r>
   842e6:	2800      	cmp	r0, #0
   842e8:	d1da      	bne.n	842a0 <__swbuf_r+0x44>
   842ea:	4628      	mov	r0, r5
   842ec:	bd70      	pop	{r4, r5, r6, pc}

000842ee <__swbuf>:
   842ee:	460a      	mov	r2, r1
   842f0:	4902      	ldr	r1, [pc, #8]	; (842fc <__swbuf+0xe>)
   842f2:	4603      	mov	r3, r0
   842f4:	6808      	ldr	r0, [r1, #0]
   842f6:	4619      	mov	r1, r3
   842f8:	f7ff bfb0 	b.w	8425c <__swbuf_r>
   842fc:	200704d0 	.word	0x200704d0

00084300 <__swsetup_r>:
   84300:	b538      	push	{r3, r4, r5, lr}
   84302:	4b2b      	ldr	r3, [pc, #172]	; (843b0 <__swsetup_r+0xb0>)
   84304:	4605      	mov	r5, r0
   84306:	6818      	ldr	r0, [r3, #0]
   84308:	460c      	mov	r4, r1
   8430a:	b118      	cbz	r0, 84314 <__swsetup_r+0x14>
   8430c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8430e:	b90b      	cbnz	r3, 84314 <__swsetup_r+0x14>
   84310:	f000 f97a 	bl	84608 <__sinit>
   84314:	89a2      	ldrh	r2, [r4, #12]
   84316:	b293      	uxth	r3, r2
   84318:	0718      	lsls	r0, r3, #28
   8431a:	d420      	bmi.n	8435e <__swsetup_r+0x5e>
   8431c:	06d9      	lsls	r1, r3, #27
   8431e:	d405      	bmi.n	8432c <__swsetup_r+0x2c>
   84320:	2309      	movs	r3, #9
   84322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   84326:	602b      	str	r3, [r5, #0]
   84328:	81a2      	strh	r2, [r4, #12]
   8432a:	e03b      	b.n	843a4 <__swsetup_r+0xa4>
   8432c:	0758      	lsls	r0, r3, #29
   8432e:	d512      	bpl.n	84356 <__swsetup_r+0x56>
   84330:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84332:	b141      	cbz	r1, 84346 <__swsetup_r+0x46>
   84334:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84338:	4299      	cmp	r1, r3
   8433a:	d002      	beq.n	84342 <__swsetup_r+0x42>
   8433c:	4628      	mov	r0, r5
   8433e:	f000 fae7 	bl	84910 <_free_r>
   84342:	2300      	movs	r3, #0
   84344:	6323      	str	r3, [r4, #48]	; 0x30
   84346:	89a3      	ldrh	r3, [r4, #12]
   84348:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   8434c:	81a3      	strh	r3, [r4, #12]
   8434e:	2300      	movs	r3, #0
   84350:	6063      	str	r3, [r4, #4]
   84352:	6923      	ldr	r3, [r4, #16]
   84354:	6023      	str	r3, [r4, #0]
   84356:	89a3      	ldrh	r3, [r4, #12]
   84358:	f043 0308 	orr.w	r3, r3, #8
   8435c:	81a3      	strh	r3, [r4, #12]
   8435e:	6923      	ldr	r3, [r4, #16]
   84360:	b94b      	cbnz	r3, 84376 <__swsetup_r+0x76>
   84362:	89a3      	ldrh	r3, [r4, #12]
   84364:	f403 7320 	and.w	r3, r3, #640	; 0x280
   84368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8436c:	d003      	beq.n	84376 <__swsetup_r+0x76>
   8436e:	4628      	mov	r0, r5
   84370:	4621      	mov	r1, r4
   84372:	f000 fd4d 	bl	84e10 <__smakebuf_r>
   84376:	89a3      	ldrh	r3, [r4, #12]
   84378:	f013 0201 	ands.w	r2, r3, #1
   8437c:	d005      	beq.n	8438a <__swsetup_r+0x8a>
   8437e:	2200      	movs	r2, #0
   84380:	60a2      	str	r2, [r4, #8]
   84382:	6962      	ldr	r2, [r4, #20]
   84384:	4252      	negs	r2, r2
   84386:	61a2      	str	r2, [r4, #24]
   84388:	e003      	b.n	84392 <__swsetup_r+0x92>
   8438a:	0799      	lsls	r1, r3, #30
   8438c:	bf58      	it	pl
   8438e:	6962      	ldrpl	r2, [r4, #20]
   84390:	60a2      	str	r2, [r4, #8]
   84392:	6922      	ldr	r2, [r4, #16]
   84394:	b94a      	cbnz	r2, 843aa <__swsetup_r+0xaa>
   84396:	f003 0080 	and.w	r0, r3, #128	; 0x80
   8439a:	b280      	uxth	r0, r0
   8439c:	b130      	cbz	r0, 843ac <__swsetup_r+0xac>
   8439e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   843a2:	81a3      	strh	r3, [r4, #12]
   843a4:	f04f 30ff 	mov.w	r0, #4294967295
   843a8:	bd38      	pop	{r3, r4, r5, pc}
   843aa:	2000      	movs	r0, #0
   843ac:	bd38      	pop	{r3, r4, r5, pc}
   843ae:	bf00      	nop
   843b0:	200704d0 	.word	0x200704d0

000843b4 <__register_exitproc>:
   843b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   843b8:	4698      	mov	r8, r3
   843ba:	4b22      	ldr	r3, [pc, #136]	; (84444 <__register_exitproc+0x90>)
   843bc:	4606      	mov	r6, r0
   843be:	681c      	ldr	r4, [r3, #0]
   843c0:	460f      	mov	r7, r1
   843c2:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   843c6:	4691      	mov	r9, r2
   843c8:	b918      	cbnz	r0, 843d2 <__register_exitproc+0x1e>
   843ca:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   843ce:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   843d2:	6843      	ldr	r3, [r0, #4]
   843d4:	2b1f      	cmp	r3, #31
   843d6:	dd16      	ble.n	84406 <__register_exitproc+0x52>
   843d8:	4b1b      	ldr	r3, [pc, #108]	; (84448 <__register_exitproc+0x94>)
   843da:	b91b      	cbnz	r3, 843e4 <__register_exitproc+0x30>
   843dc:	f04f 30ff 	mov.w	r0, #4294967295
   843e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   843e4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   843e8:	f000 fd76 	bl	84ed8 <malloc>
   843ec:	2800      	cmp	r0, #0
   843ee:	d0f5      	beq.n	843dc <__register_exitproc+0x28>
   843f0:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   843f4:	2500      	movs	r5, #0
   843f6:	6045      	str	r5, [r0, #4]
   843f8:	6001      	str	r1, [r0, #0]
   843fa:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   843fe:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   84402:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   84406:	6844      	ldr	r4, [r0, #4]
   84408:	b1a6      	cbz	r6, 84434 <__register_exitproc+0x80>
   8440a:	2201      	movs	r2, #1
   8440c:	40a2      	lsls	r2, r4
   8440e:	eb00 0584 	add.w	r5, r0, r4, lsl #2
   84412:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
   84416:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   8441a:	2e02      	cmp	r6, #2
   8441c:	ea41 0102 	orr.w	r1, r1, r2
   84420:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   84424:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
   84428:	d104      	bne.n	84434 <__register_exitproc+0x80>
   8442a:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   8442e:	431a      	orrs	r2, r3
   84430:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   84434:	1c63      	adds	r3, r4, #1
   84436:	3402      	adds	r4, #2
   84438:	6043      	str	r3, [r0, #4]
   8443a:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
   8443e:	2000      	movs	r0, #0
   84440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84444:	000860d8 	.word	0x000860d8
   84448:	00084ed9 	.word	0x00084ed9

0008444c <register_fini>:
   8444c:	4b02      	ldr	r3, [pc, #8]	; (84458 <register_fini+0xc>)
   8444e:	b113      	cbz	r3, 84456 <register_fini+0xa>
   84450:	4802      	ldr	r0, [pc, #8]	; (8445c <register_fini+0x10>)
   84452:	f7ff b973 	b.w	8373c <atexit>
   84456:	4770      	bx	lr
   84458:	00000000 	.word	0x00000000
   8445c:	00083749 	.word	0x00083749

00084460 <__sflush_r>:
   84460:	898a      	ldrh	r2, [r1, #12]
   84462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84466:	b293      	uxth	r3, r2
   84468:	4605      	mov	r5, r0
   8446a:	0718      	lsls	r0, r3, #28
   8446c:	460c      	mov	r4, r1
   8446e:	d45e      	bmi.n	8452e <__sflush_r+0xce>
   84470:	684b      	ldr	r3, [r1, #4]
   84472:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   84476:	2b00      	cmp	r3, #0
   84478:	818a      	strh	r2, [r1, #12]
   8447a:	dc02      	bgt.n	84482 <__sflush_r+0x22>
   8447c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8447e:	2b00      	cmp	r3, #0
   84480:	dd18      	ble.n	844b4 <__sflush_r+0x54>
   84482:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   84484:	b1b6      	cbz	r6, 844b4 <__sflush_r+0x54>
   84486:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   8448a:	2300      	movs	r3, #0
   8448c:	b292      	uxth	r2, r2
   8448e:	682f      	ldr	r7, [r5, #0]
   84490:	602b      	str	r3, [r5, #0]
   84492:	b10a      	cbz	r2, 84498 <__sflush_r+0x38>
   84494:	6d22      	ldr	r2, [r4, #80]	; 0x50
   84496:	e010      	b.n	844ba <__sflush_r+0x5a>
   84498:	69e1      	ldr	r1, [r4, #28]
   8449a:	4628      	mov	r0, r5
   8449c:	2301      	movs	r3, #1
   8449e:	47b0      	blx	r6
   844a0:	1c41      	adds	r1, r0, #1
   844a2:	4602      	mov	r2, r0
   844a4:	d109      	bne.n	844ba <__sflush_r+0x5a>
   844a6:	682b      	ldr	r3, [r5, #0]
   844a8:	b13b      	cbz	r3, 844ba <__sflush_r+0x5a>
   844aa:	2b1d      	cmp	r3, #29
   844ac:	d001      	beq.n	844b2 <__sflush_r+0x52>
   844ae:	2b16      	cmp	r3, #22
   844b0:	d14a      	bne.n	84548 <__sflush_r+0xe8>
   844b2:	602f      	str	r7, [r5, #0]
   844b4:	2000      	movs	r0, #0
   844b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   844ba:	89a3      	ldrh	r3, [r4, #12]
   844bc:	075b      	lsls	r3, r3, #29
   844be:	d505      	bpl.n	844cc <__sflush_r+0x6c>
   844c0:	6863      	ldr	r3, [r4, #4]
   844c2:	1ad2      	subs	r2, r2, r3
   844c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   844c6:	b10b      	cbz	r3, 844cc <__sflush_r+0x6c>
   844c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   844ca:	1ad2      	subs	r2, r2, r3
   844cc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   844ce:	4628      	mov	r0, r5
   844d0:	69e1      	ldr	r1, [r4, #28]
   844d2:	2300      	movs	r3, #0
   844d4:	47b0      	blx	r6
   844d6:	1c46      	adds	r6, r0, #1
   844d8:	89a2      	ldrh	r2, [r4, #12]
   844da:	d105      	bne.n	844e8 <__sflush_r+0x88>
   844dc:	682b      	ldr	r3, [r5, #0]
   844de:	b11b      	cbz	r3, 844e8 <__sflush_r+0x88>
   844e0:	2b1d      	cmp	r3, #29
   844e2:	d001      	beq.n	844e8 <__sflush_r+0x88>
   844e4:	2b16      	cmp	r3, #22
   844e6:	d11d      	bne.n	84524 <__sflush_r+0xc4>
   844e8:	2300      	movs	r3, #0
   844ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   844ee:	b292      	uxth	r2, r2
   844f0:	6063      	str	r3, [r4, #4]
   844f2:	6923      	ldr	r3, [r4, #16]
   844f4:	04d1      	lsls	r1, r2, #19
   844f6:	81a2      	strh	r2, [r4, #12]
   844f8:	6023      	str	r3, [r4, #0]
   844fa:	d504      	bpl.n	84506 <__sflush_r+0xa6>
   844fc:	1c42      	adds	r2, r0, #1
   844fe:	d101      	bne.n	84504 <__sflush_r+0xa4>
   84500:	682b      	ldr	r3, [r5, #0]
   84502:	b903      	cbnz	r3, 84506 <__sflush_r+0xa6>
   84504:	6520      	str	r0, [r4, #80]	; 0x50
   84506:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84508:	602f      	str	r7, [r5, #0]
   8450a:	2900      	cmp	r1, #0
   8450c:	d0d2      	beq.n	844b4 <__sflush_r+0x54>
   8450e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84512:	4299      	cmp	r1, r3
   84514:	d002      	beq.n	8451c <__sflush_r+0xbc>
   84516:	4628      	mov	r0, r5
   84518:	f000 f9fa 	bl	84910 <_free_r>
   8451c:	2000      	movs	r0, #0
   8451e:	6320      	str	r0, [r4, #48]	; 0x30
   84520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84524:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   84528:	81a2      	strh	r2, [r4, #12]
   8452a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8452e:	690e      	ldr	r6, [r1, #16]
   84530:	2e00      	cmp	r6, #0
   84532:	d0bf      	beq.n	844b4 <__sflush_r+0x54>
   84534:	079b      	lsls	r3, r3, #30
   84536:	680a      	ldr	r2, [r1, #0]
   84538:	bf0c      	ite	eq
   8453a:	694b      	ldreq	r3, [r1, #20]
   8453c:	2300      	movne	r3, #0
   8453e:	ebc6 0802 	rsb	r8, r6, r2
   84542:	600e      	str	r6, [r1, #0]
   84544:	608b      	str	r3, [r1, #8]
   84546:	e012      	b.n	8456e <__sflush_r+0x10e>
   84548:	89a3      	ldrh	r3, [r4, #12]
   8454a:	f04f 30ff 	mov.w	r0, #4294967295
   8454e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84552:	81a3      	strh	r3, [r4, #12]
   84554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84558:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8455a:	4628      	mov	r0, r5
   8455c:	69e1      	ldr	r1, [r4, #28]
   8455e:	4632      	mov	r2, r6
   84560:	4643      	mov	r3, r8
   84562:	47b8      	blx	r7
   84564:	2800      	cmp	r0, #0
   84566:	ddef      	ble.n	84548 <__sflush_r+0xe8>
   84568:	4406      	add	r6, r0
   8456a:	ebc0 0808 	rsb	r8, r0, r8
   8456e:	f1b8 0f00 	cmp.w	r8, #0
   84572:	dcf1      	bgt.n	84558 <__sflush_r+0xf8>
   84574:	e79e      	b.n	844b4 <__sflush_r+0x54>

00084576 <_fflush_r>:
   84576:	b538      	push	{r3, r4, r5, lr}
   84578:	460c      	mov	r4, r1
   8457a:	4605      	mov	r5, r0
   8457c:	b118      	cbz	r0, 84586 <_fflush_r+0x10>
   8457e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84580:	b90b      	cbnz	r3, 84586 <_fflush_r+0x10>
   84582:	f000 f841 	bl	84608 <__sinit>
   84586:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8458a:	b128      	cbz	r0, 84598 <_fflush_r+0x22>
   8458c:	4628      	mov	r0, r5
   8458e:	4621      	mov	r1, r4
   84590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   84594:	f7ff bf64 	b.w	84460 <__sflush_r>
   84598:	bd38      	pop	{r3, r4, r5, pc}

0008459a <fflush>:
   8459a:	4601      	mov	r1, r0
   8459c:	b920      	cbnz	r0, 845a8 <fflush+0xe>
   8459e:	4b04      	ldr	r3, [pc, #16]	; (845b0 <fflush+0x16>)
   845a0:	4904      	ldr	r1, [pc, #16]	; (845b4 <fflush+0x1a>)
   845a2:	6818      	ldr	r0, [r3, #0]
   845a4:	f000 bbd4 	b.w	84d50 <_fwalk_reent>
   845a8:	4b03      	ldr	r3, [pc, #12]	; (845b8 <fflush+0x1e>)
   845aa:	6818      	ldr	r0, [r3, #0]
   845ac:	f7ff bfe3 	b.w	84576 <_fflush_r>
   845b0:	000860d8 	.word	0x000860d8
   845b4:	00084577 	.word	0x00084577
   845b8:	200704d0 	.word	0x200704d0

000845bc <__fp_lock>:
   845bc:	2000      	movs	r0, #0
   845be:	4770      	bx	lr

000845c0 <__fp_unlock>:
   845c0:	2000      	movs	r0, #0
   845c2:	4770      	bx	lr

000845c4 <_cleanup_r>:
   845c4:	4901      	ldr	r1, [pc, #4]	; (845cc <_cleanup_r+0x8>)
   845c6:	f000 bba7 	b.w	84d18 <_fwalk>
   845ca:	bf00      	nop
   845cc:	000858e5 	.word	0x000858e5

000845d0 <__sfmoreglue>:
   845d0:	b570      	push	{r4, r5, r6, lr}
   845d2:	1e4b      	subs	r3, r1, #1
   845d4:	2568      	movs	r5, #104	; 0x68
   845d6:	435d      	muls	r5, r3
   845d8:	460e      	mov	r6, r1
   845da:	f105 0174 	add.w	r1, r5, #116	; 0x74
   845de:	f000 fc8b 	bl	84ef8 <_malloc_r>
   845e2:	4604      	mov	r4, r0
   845e4:	b140      	cbz	r0, 845f8 <__sfmoreglue+0x28>
   845e6:	2100      	movs	r1, #0
   845e8:	e880 0042 	stmia.w	r0, {r1, r6}
   845ec:	300c      	adds	r0, #12
   845ee:	60a0      	str	r0, [r4, #8]
   845f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
   845f4:	f7ff f90d 	bl	83812 <memset>
   845f8:	4620      	mov	r0, r4
   845fa:	bd70      	pop	{r4, r5, r6, pc}

000845fc <_cleanup>:
   845fc:	4b01      	ldr	r3, [pc, #4]	; (84604 <_cleanup+0x8>)
   845fe:	6818      	ldr	r0, [r3, #0]
   84600:	f7ff bfe0 	b.w	845c4 <_cleanup_r>
   84604:	000860d8 	.word	0x000860d8

00084608 <__sinit>:
   84608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8460c:	6b84      	ldr	r4, [r0, #56]	; 0x38
   8460e:	4606      	mov	r6, r0
   84610:	2c00      	cmp	r4, #0
   84612:	d162      	bne.n	846da <__sinit+0xd2>
   84614:	4b32      	ldr	r3, [pc, #200]	; (846e0 <__sinit+0xd8>)
   84616:	6845      	ldr	r5, [r0, #4]
   84618:	63c3      	str	r3, [r0, #60]	; 0x3c
   8461a:	2303      	movs	r3, #3
   8461c:	f8c0 32e4 	str.w	r3, [r0, #740]	; 0x2e4
   84620:	f500 733b 	add.w	r3, r0, #748	; 0x2ec
   84624:	f8c0 32e8 	str.w	r3, [r0, #744]	; 0x2e8
   84628:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 846e8 <__sinit+0xe0>
   8462c:	2304      	movs	r3, #4
   8462e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 846ec <__sinit+0xe4>
   84632:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 846f0 <__sinit+0xe8>
   84636:	4f2b      	ldr	r7, [pc, #172]	; (846e4 <__sinit+0xdc>)
   84638:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
   8463c:	4621      	mov	r1, r4
   8463e:	81ab      	strh	r3, [r5, #12]
   84640:	602c      	str	r4, [r5, #0]
   84642:	606c      	str	r4, [r5, #4]
   84644:	60ac      	str	r4, [r5, #8]
   84646:	666c      	str	r4, [r5, #100]	; 0x64
   84648:	81ec      	strh	r4, [r5, #14]
   8464a:	612c      	str	r4, [r5, #16]
   8464c:	616c      	str	r4, [r5, #20]
   8464e:	61ac      	str	r4, [r5, #24]
   84650:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   84654:	2208      	movs	r2, #8
   84656:	f7ff f8dc 	bl	83812 <memset>
   8465a:	61ed      	str	r5, [r5, #28]
   8465c:	f8c5 a020 	str.w	sl, [r5, #32]
   84660:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   84664:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   84668:	62ef      	str	r7, [r5, #44]	; 0x2c
   8466a:	68b5      	ldr	r5, [r6, #8]
   8466c:	2309      	movs	r3, #9
   8466e:	f04f 0b01 	mov.w	fp, #1
   84672:	81ab      	strh	r3, [r5, #12]
   84674:	602c      	str	r4, [r5, #0]
   84676:	606c      	str	r4, [r5, #4]
   84678:	60ac      	str	r4, [r5, #8]
   8467a:	666c      	str	r4, [r5, #100]	; 0x64
   8467c:	f8a5 b00e 	strh.w	fp, [r5, #14]
   84680:	612c      	str	r4, [r5, #16]
   84682:	616c      	str	r4, [r5, #20]
   84684:	61ac      	str	r4, [r5, #24]
   84686:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8468a:	4621      	mov	r1, r4
   8468c:	2208      	movs	r2, #8
   8468e:	f7ff f8c0 	bl	83812 <memset>
   84692:	61ed      	str	r5, [r5, #28]
   84694:	f8c5 a020 	str.w	sl, [r5, #32]
   84698:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   8469c:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   846a0:	62ef      	str	r7, [r5, #44]	; 0x2c
   846a2:	68f5      	ldr	r5, [r6, #12]
   846a4:	2312      	movs	r3, #18
   846a6:	81ab      	strh	r3, [r5, #12]
   846a8:	2302      	movs	r3, #2
   846aa:	602c      	str	r4, [r5, #0]
   846ac:	606c      	str	r4, [r5, #4]
   846ae:	60ac      	str	r4, [r5, #8]
   846b0:	666c      	str	r4, [r5, #100]	; 0x64
   846b2:	81eb      	strh	r3, [r5, #14]
   846b4:	612c      	str	r4, [r5, #16]
   846b6:	616c      	str	r4, [r5, #20]
   846b8:	61ac      	str	r4, [r5, #24]
   846ba:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   846be:	4621      	mov	r1, r4
   846c0:	2208      	movs	r2, #8
   846c2:	f7ff f8a6 	bl	83812 <memset>
   846c6:	61ed      	str	r5, [r5, #28]
   846c8:	f8c5 a020 	str.w	sl, [r5, #32]
   846cc:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   846d0:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   846d4:	62ef      	str	r7, [r5, #44]	; 0x2c
   846d6:	f8c6 b038 	str.w	fp, [r6, #56]	; 0x38
   846da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   846de:	bf00      	nop
   846e0:	000845c5 	.word	0x000845c5
   846e4:	00085757 	.word	0x00085757
   846e8:	000856d5 	.word	0x000856d5
   846ec:	000856fb 	.word	0x000856fb
   846f0:	00085733 	.word	0x00085733

000846f4 <__sfp>:
   846f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   846f6:	4b1c      	ldr	r3, [pc, #112]	; (84768 <__sfp+0x74>)
   846f8:	4607      	mov	r7, r0
   846fa:	681e      	ldr	r6, [r3, #0]
   846fc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   846fe:	b913      	cbnz	r3, 84706 <__sfp+0x12>
   84700:	4630      	mov	r0, r6
   84702:	f7ff ff81 	bl	84608 <__sinit>
   84706:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
   8470a:	68b4      	ldr	r4, [r6, #8]
   8470c:	6873      	ldr	r3, [r6, #4]
   8470e:	3b01      	subs	r3, #1
   84710:	d404      	bmi.n	8471c <__sfp+0x28>
   84712:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   84716:	b175      	cbz	r5, 84736 <__sfp+0x42>
   84718:	3468      	adds	r4, #104	; 0x68
   8471a:	e7f8      	b.n	8470e <__sfp+0x1a>
   8471c:	6833      	ldr	r3, [r6, #0]
   8471e:	b92b      	cbnz	r3, 8472c <__sfp+0x38>
   84720:	4638      	mov	r0, r7
   84722:	2104      	movs	r1, #4
   84724:	f7ff ff54 	bl	845d0 <__sfmoreglue>
   84728:	6030      	str	r0, [r6, #0]
   8472a:	b108      	cbz	r0, 84730 <__sfp+0x3c>
   8472c:	6836      	ldr	r6, [r6, #0]
   8472e:	e7ec      	b.n	8470a <__sfp+0x16>
   84730:	230c      	movs	r3, #12
   84732:	603b      	str	r3, [r7, #0]
   84734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84736:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8473a:	81e3      	strh	r3, [r4, #14]
   8473c:	2301      	movs	r3, #1
   8473e:	81a3      	strh	r3, [r4, #12]
   84740:	6665      	str	r5, [r4, #100]	; 0x64
   84742:	6025      	str	r5, [r4, #0]
   84744:	60a5      	str	r5, [r4, #8]
   84746:	6065      	str	r5, [r4, #4]
   84748:	6125      	str	r5, [r4, #16]
   8474a:	6165      	str	r5, [r4, #20]
   8474c:	61a5      	str	r5, [r4, #24]
   8474e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   84752:	4629      	mov	r1, r5
   84754:	2208      	movs	r2, #8
   84756:	f7ff f85c 	bl	83812 <memset>
   8475a:	6325      	str	r5, [r4, #48]	; 0x30
   8475c:	6365      	str	r5, [r4, #52]	; 0x34
   8475e:	6465      	str	r5, [r4, #68]	; 0x44
   84760:	64a5      	str	r5, [r4, #72]	; 0x48
   84762:	4620      	mov	r0, r4
   84764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84766:	bf00      	nop
   84768:	000860d8 	.word	0x000860d8

0008476c <__sfp_lock_acquire>:
   8476c:	4770      	bx	lr

0008476e <__sfp_lock_release>:
   8476e:	4770      	bx	lr

00084770 <__sinit_lock_acquire>:
   84770:	4770      	bx	lr

00084772 <__sinit_lock_release>:
   84772:	4770      	bx	lr

00084774 <__fp_lock_all>:
   84774:	4b02      	ldr	r3, [pc, #8]	; (84780 <__fp_lock_all+0xc>)
   84776:	4903      	ldr	r1, [pc, #12]	; (84784 <__fp_lock_all+0x10>)
   84778:	6818      	ldr	r0, [r3, #0]
   8477a:	f000 bacd 	b.w	84d18 <_fwalk>
   8477e:	bf00      	nop
   84780:	200704d0 	.word	0x200704d0
   84784:	000845bd 	.word	0x000845bd

00084788 <__fp_unlock_all>:
   84788:	4b02      	ldr	r3, [pc, #8]	; (84794 <__fp_unlock_all+0xc>)
   8478a:	4903      	ldr	r1, [pc, #12]	; (84798 <__fp_unlock_all+0x10>)
   8478c:	6818      	ldr	r0, [r3, #0]
   8478e:	f000 bac3 	b.w	84d18 <_fwalk>
   84792:	bf00      	nop
   84794:	200704d0 	.word	0x200704d0
   84798:	000845c1 	.word	0x000845c1

0008479c <_fputwc_r>:
   8479c:	8993      	ldrh	r3, [r2, #12]
   8479e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   847a2:	460e      	mov	r6, r1
   847a4:	0499      	lsls	r1, r3, #18
   847a6:	4680      	mov	r8, r0
   847a8:	4614      	mov	r4, r2
   847aa:	d406      	bmi.n	847ba <_fputwc_r+0x1e>
   847ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   847b0:	8193      	strh	r3, [r2, #12]
   847b2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   847b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   847b8:	6653      	str	r3, [r2, #100]	; 0x64
   847ba:	f000 fb0b 	bl	84dd4 <__locale_mb_cur_max>
   847be:	2801      	cmp	r0, #1
   847c0:	d106      	bne.n	847d0 <_fputwc_r+0x34>
   847c2:	1e73      	subs	r3, r6, #1
   847c4:	2bfe      	cmp	r3, #254	; 0xfe
   847c6:	d803      	bhi.n	847d0 <_fputwc_r+0x34>
   847c8:	f88d 6004 	strb.w	r6, [sp, #4]
   847cc:	4607      	mov	r7, r0
   847ce:	e00e      	b.n	847ee <_fputwc_r+0x52>
   847d0:	4632      	mov	r2, r6
   847d2:	4640      	mov	r0, r8
   847d4:	a901      	add	r1, sp, #4
   847d6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   847da:	f000 ffcb 	bl	85774 <_wcrtomb_r>
   847de:	1c42      	adds	r2, r0, #1
   847e0:	4607      	mov	r7, r0
   847e2:	d104      	bne.n	847ee <_fputwc_r+0x52>
   847e4:	89a3      	ldrh	r3, [r4, #12]
   847e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   847ea:	81a3      	strh	r3, [r4, #12]
   847ec:	e02b      	b.n	84846 <_fputwc_r+0xaa>
   847ee:	2500      	movs	r5, #0
   847f0:	42bd      	cmp	r5, r7
   847f2:	d024      	beq.n	8483e <_fputwc_r+0xa2>
   847f4:	68a2      	ldr	r2, [r4, #8]
   847f6:	ab01      	add	r3, sp, #4
   847f8:	3a01      	subs	r2, #1
   847fa:	2a00      	cmp	r2, #0
   847fc:	60a2      	str	r2, [r4, #8]
   847fe:	da16      	bge.n	8482e <_fputwc_r+0x92>
   84800:	69a1      	ldr	r1, [r4, #24]
   84802:	428a      	cmp	r2, r1
   84804:	db08      	blt.n	84818 <_fputwc_r+0x7c>
   84806:	5d5b      	ldrb	r3, [r3, r5]
   84808:	6822      	ldr	r2, [r4, #0]
   8480a:	7013      	strb	r3, [r2, #0]
   8480c:	6823      	ldr	r3, [r4, #0]
   8480e:	7819      	ldrb	r1, [r3, #0]
   84810:	290a      	cmp	r1, #10
   84812:	d110      	bne.n	84836 <_fputwc_r+0x9a>
   84814:	4640      	mov	r0, r8
   84816:	e001      	b.n	8481c <_fputwc_r+0x80>
   84818:	5d59      	ldrb	r1, [r3, r5]
   8481a:	4640      	mov	r0, r8
   8481c:	4622      	mov	r2, r4
   8481e:	f7ff fd1d 	bl	8425c <__swbuf_r>
   84822:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   84826:	4258      	negs	r0, r3
   84828:	4158      	adcs	r0, r3
   8482a:	b130      	cbz	r0, 8483a <_fputwc_r+0x9e>
   8482c:	e009      	b.n	84842 <_fputwc_r+0xa6>
   8482e:	5d5b      	ldrb	r3, [r3, r5]
   84830:	6822      	ldr	r2, [r4, #0]
   84832:	7013      	strb	r3, [r2, #0]
   84834:	6823      	ldr	r3, [r4, #0]
   84836:	3301      	adds	r3, #1
   84838:	6023      	str	r3, [r4, #0]
   8483a:	3501      	adds	r5, #1
   8483c:	e7d8      	b.n	847f0 <_fputwc_r+0x54>
   8483e:	4630      	mov	r0, r6
   84840:	e001      	b.n	84846 <_fputwc_r+0xaa>
   84842:	f04f 30ff 	mov.w	r0, #4294967295
   84846:	b002      	add	sp, #8
   84848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0008484c <fputwc>:
   8484c:	4b08      	ldr	r3, [pc, #32]	; (84870 <fputwc+0x24>)
   8484e:	b570      	push	{r4, r5, r6, lr}
   84850:	681c      	ldr	r4, [r3, #0]
   84852:	4606      	mov	r6, r0
   84854:	460d      	mov	r5, r1
   84856:	b124      	cbz	r4, 84862 <fputwc+0x16>
   84858:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8485a:	b913      	cbnz	r3, 84862 <fputwc+0x16>
   8485c:	4620      	mov	r0, r4
   8485e:	f7ff fed3 	bl	84608 <__sinit>
   84862:	4620      	mov	r0, r4
   84864:	4631      	mov	r1, r6
   84866:	462a      	mov	r2, r5
   84868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   8486c:	f7ff bf96 	b.w	8479c <_fputwc_r>
   84870:	200704d0 	.word	0x200704d0

00084874 <_malloc_trim_r>:
   84874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84876:	4d23      	ldr	r5, [pc, #140]	; (84904 <_malloc_trim_r+0x90>)
   84878:	460e      	mov	r6, r1
   8487a:	4604      	mov	r4, r0
   8487c:	f000 fd6d 	bl	8535a <__malloc_lock>
   84880:	68ab      	ldr	r3, [r5, #8]
   84882:	685f      	ldr	r7, [r3, #4]
   84884:	f027 0703 	bic.w	r7, r7, #3
   84888:	1bbe      	subs	r6, r7, r6
   8488a:	f606 76ef 	addw	r6, r6, #4079	; 0xfef
   8488e:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
   84892:	f026 060f 	bic.w	r6, r6, #15
   84896:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   8489a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   8489e:	da04      	bge.n	848aa <_malloc_trim_r+0x36>
   848a0:	4620      	mov	r0, r4
   848a2:	f000 fd5b 	bl	8535c <__malloc_unlock>
   848a6:	2000      	movs	r0, #0
   848a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   848aa:	4620      	mov	r0, r4
   848ac:	2100      	movs	r1, #0
   848ae:	f000 ff01 	bl	856b4 <_sbrk_r>
   848b2:	68ab      	ldr	r3, [r5, #8]
   848b4:	443b      	add	r3, r7
   848b6:	4298      	cmp	r0, r3
   848b8:	d1f2      	bne.n	848a0 <_malloc_trim_r+0x2c>
   848ba:	4620      	mov	r0, r4
   848bc:	4271      	negs	r1, r6
   848be:	f000 fef9 	bl	856b4 <_sbrk_r>
   848c2:	3001      	adds	r0, #1
   848c4:	d110      	bne.n	848e8 <_malloc_trim_r+0x74>
   848c6:	4620      	mov	r0, r4
   848c8:	2100      	movs	r1, #0
   848ca:	f000 fef3 	bl	856b4 <_sbrk_r>
   848ce:	68ab      	ldr	r3, [r5, #8]
   848d0:	1ac2      	subs	r2, r0, r3
   848d2:	2a0f      	cmp	r2, #15
   848d4:	dde4      	ble.n	848a0 <_malloc_trim_r+0x2c>
   848d6:	490c      	ldr	r1, [pc, #48]	; (84908 <_malloc_trim_r+0x94>)
   848d8:	f042 0201 	orr.w	r2, r2, #1
   848dc:	6809      	ldr	r1, [r1, #0]
   848de:	605a      	str	r2, [r3, #4]
   848e0:	1a40      	subs	r0, r0, r1
   848e2:	490a      	ldr	r1, [pc, #40]	; (8490c <_malloc_trim_r+0x98>)
   848e4:	6008      	str	r0, [r1, #0]
   848e6:	e7db      	b.n	848a0 <_malloc_trim_r+0x2c>
   848e8:	68ab      	ldr	r3, [r5, #8]
   848ea:	1bbf      	subs	r7, r7, r6
   848ec:	f047 0701 	orr.w	r7, r7, #1
   848f0:	605f      	str	r7, [r3, #4]
   848f2:	4b06      	ldr	r3, [pc, #24]	; (8490c <_malloc_trim_r+0x98>)
   848f4:	4620      	mov	r0, r4
   848f6:	681a      	ldr	r2, [r3, #0]
   848f8:	1b96      	subs	r6, r2, r6
   848fa:	601e      	str	r6, [r3, #0]
   848fc:	f000 fd2e 	bl	8535c <__malloc_unlock>
   84900:	2001      	movs	r0, #1
   84902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84904:	2007097c 	.word	0x2007097c
   84908:	20070d84 	.word	0x20070d84
   8490c:	20079100 	.word	0x20079100

00084910 <_free_r>:
   84910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84912:	4606      	mov	r6, r0
   84914:	460d      	mov	r5, r1
   84916:	2900      	cmp	r1, #0
   84918:	f000 80a9 	beq.w	84a6e <_free_r+0x15e>
   8491c:	f000 fd1d 	bl	8535a <__malloc_lock>
   84920:	f855 cc04 	ldr.w	ip, [r5, #-4]
   84924:	4c52      	ldr	r4, [pc, #328]	; (84a70 <_free_r+0x160>)
   84926:	f1a5 0308 	sub.w	r3, r5, #8
   8492a:	f02c 0201 	bic.w	r2, ip, #1
   8492e:	1898      	adds	r0, r3, r2
   84930:	68a1      	ldr	r1, [r4, #8]
   84932:	6847      	ldr	r7, [r0, #4]
   84934:	4288      	cmp	r0, r1
   84936:	f027 0703 	bic.w	r7, r7, #3
   8493a:	f00c 0101 	and.w	r1, ip, #1
   8493e:	d11b      	bne.n	84978 <_free_r+0x68>
   84940:	443a      	add	r2, r7
   84942:	b939      	cbnz	r1, 84954 <_free_r+0x44>
   84944:	f855 1c08 	ldr.w	r1, [r5, #-8]
   84948:	1a5b      	subs	r3, r3, r1
   8494a:	6898      	ldr	r0, [r3, #8]
   8494c:	440a      	add	r2, r1
   8494e:	68d9      	ldr	r1, [r3, #12]
   84950:	60c1      	str	r1, [r0, #12]
   84952:	6088      	str	r0, [r1, #8]
   84954:	f042 0101 	orr.w	r1, r2, #1
   84958:	6059      	str	r1, [r3, #4]
   8495a:	60a3      	str	r3, [r4, #8]
   8495c:	4b45      	ldr	r3, [pc, #276]	; (84a74 <_free_r+0x164>)
   8495e:	681b      	ldr	r3, [r3, #0]
   84960:	429a      	cmp	r2, r3
   84962:	d304      	bcc.n	8496e <_free_r+0x5e>
   84964:	4b44      	ldr	r3, [pc, #272]	; (84a78 <_free_r+0x168>)
   84966:	4630      	mov	r0, r6
   84968:	6819      	ldr	r1, [r3, #0]
   8496a:	f7ff ff83 	bl	84874 <_malloc_trim_r>
   8496e:	4630      	mov	r0, r6
   84970:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   84974:	f000 bcf2 	b.w	8535c <__malloc_unlock>
   84978:	6047      	str	r7, [r0, #4]
   8497a:	b979      	cbnz	r1, 8499c <_free_r+0x8c>
   8497c:	f855 5c08 	ldr.w	r5, [r5, #-8]
   84980:	f104 0c08 	add.w	ip, r4, #8
   84984:	1b5b      	subs	r3, r3, r5
   84986:	442a      	add	r2, r5
   84988:	689d      	ldr	r5, [r3, #8]
   8498a:	4565      	cmp	r5, ip
   8498c:	d008      	beq.n	849a0 <_free_r+0x90>
   8498e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   84992:	f8c5 c00c 	str.w	ip, [r5, #12]
   84996:	f8cc 5008 	str.w	r5, [ip, #8]
   8499a:	e002      	b.n	849a2 <_free_r+0x92>
   8499c:	2100      	movs	r1, #0
   8499e:	e000      	b.n	849a2 <_free_r+0x92>
   849a0:	2101      	movs	r1, #1
   849a2:	19c5      	adds	r5, r0, r7
   849a4:	686d      	ldr	r5, [r5, #4]
   849a6:	07ed      	lsls	r5, r5, #31
   849a8:	d40e      	bmi.n	849c8 <_free_r+0xb8>
   849aa:	443a      	add	r2, r7
   849ac:	6885      	ldr	r5, [r0, #8]
   849ae:	b941      	cbnz	r1, 849c2 <_free_r+0xb2>
   849b0:	4f32      	ldr	r7, [pc, #200]	; (84a7c <_free_r+0x16c>)
   849b2:	42bd      	cmp	r5, r7
   849b4:	d105      	bne.n	849c2 <_free_r+0xb2>
   849b6:	6163      	str	r3, [r4, #20]
   849b8:	6123      	str	r3, [r4, #16]
   849ba:	2101      	movs	r1, #1
   849bc:	60dd      	str	r5, [r3, #12]
   849be:	609d      	str	r5, [r3, #8]
   849c0:	e002      	b.n	849c8 <_free_r+0xb8>
   849c2:	68c0      	ldr	r0, [r0, #12]
   849c4:	60e8      	str	r0, [r5, #12]
   849c6:	6085      	str	r5, [r0, #8]
   849c8:	f042 0001 	orr.w	r0, r2, #1
   849cc:	6058      	str	r0, [r3, #4]
   849ce:	509a      	str	r2, [r3, r2]
   849d0:	2900      	cmp	r1, #0
   849d2:	d1cc      	bne.n	8496e <_free_r+0x5e>
   849d4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   849d8:	d20e      	bcs.n	849f8 <_free_r+0xe8>
   849da:	08d2      	lsrs	r2, r2, #3
   849dc:	1091      	asrs	r1, r2, #2
   849de:	2001      	movs	r0, #1
   849e0:	4088      	lsls	r0, r1
   849e2:	6861      	ldr	r1, [r4, #4]
   849e4:	4301      	orrs	r1, r0
   849e6:	6061      	str	r1, [r4, #4]
   849e8:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
   849ec:	68a2      	ldr	r2, [r4, #8]
   849ee:	60dc      	str	r4, [r3, #12]
   849f0:	609a      	str	r2, [r3, #8]
   849f2:	60a3      	str	r3, [r4, #8]
   849f4:	60d3      	str	r3, [r2, #12]
   849f6:	e7ba      	b.n	8496e <_free_r+0x5e>
   849f8:	0a51      	lsrs	r1, r2, #9
   849fa:	2904      	cmp	r1, #4
   849fc:	d802      	bhi.n	84a04 <_free_r+0xf4>
   849fe:	0991      	lsrs	r1, r2, #6
   84a00:	3138      	adds	r1, #56	; 0x38
   84a02:	e015      	b.n	84a30 <_free_r+0x120>
   84a04:	2914      	cmp	r1, #20
   84a06:	d801      	bhi.n	84a0c <_free_r+0xfc>
   84a08:	315b      	adds	r1, #91	; 0x5b
   84a0a:	e011      	b.n	84a30 <_free_r+0x120>
   84a0c:	2954      	cmp	r1, #84	; 0x54
   84a0e:	d802      	bhi.n	84a16 <_free_r+0x106>
   84a10:	0b11      	lsrs	r1, r2, #12
   84a12:	316e      	adds	r1, #110	; 0x6e
   84a14:	e00c      	b.n	84a30 <_free_r+0x120>
   84a16:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
   84a1a:	d802      	bhi.n	84a22 <_free_r+0x112>
   84a1c:	0bd1      	lsrs	r1, r2, #15
   84a1e:	3177      	adds	r1, #119	; 0x77
   84a20:	e006      	b.n	84a30 <_free_r+0x120>
   84a22:	f240 5054 	movw	r0, #1364	; 0x554
   84a26:	4281      	cmp	r1, r0
   84a28:	bf9a      	itte	ls
   84a2a:	0c91      	lsrls	r1, r2, #18
   84a2c:	317c      	addls	r1, #124	; 0x7c
   84a2e:	217e      	movhi	r1, #126	; 0x7e
   84a30:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
   84a34:	68a5      	ldr	r5, [r4, #8]
   84a36:	480e      	ldr	r0, [pc, #56]	; (84a70 <_free_r+0x160>)
   84a38:	42a5      	cmp	r5, r4
   84a3a:	d001      	beq.n	84a40 <_free_r+0x130>
   84a3c:	4629      	mov	r1, r5
   84a3e:	e00b      	b.n	84a58 <_free_r+0x148>
   84a40:	2201      	movs	r2, #1
   84a42:	1089      	asrs	r1, r1, #2
   84a44:	fa02 f101 	lsl.w	r1, r2, r1
   84a48:	6842      	ldr	r2, [r0, #4]
   84a4a:	430a      	orrs	r2, r1
   84a4c:	6042      	str	r2, [r0, #4]
   84a4e:	4629      	mov	r1, r5
   84a50:	e008      	b.n	84a64 <_free_r+0x154>
   84a52:	6889      	ldr	r1, [r1, #8]
   84a54:	42a1      	cmp	r1, r4
   84a56:	d004      	beq.n	84a62 <_free_r+0x152>
   84a58:	6848      	ldr	r0, [r1, #4]
   84a5a:	f020 0003 	bic.w	r0, r0, #3
   84a5e:	4282      	cmp	r2, r0
   84a60:	d3f7      	bcc.n	84a52 <_free_r+0x142>
   84a62:	68cd      	ldr	r5, [r1, #12]
   84a64:	60dd      	str	r5, [r3, #12]
   84a66:	6099      	str	r1, [r3, #8]
   84a68:	60ab      	str	r3, [r5, #8]
   84a6a:	60cb      	str	r3, [r1, #12]
   84a6c:	e77f      	b.n	8496e <_free_r+0x5e>
   84a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84a70:	2007097c 	.word	0x2007097c
   84a74:	20070d88 	.word	0x20070d88
   84a78:	200790fc 	.word	0x200790fc
   84a7c:	20070984 	.word	0x20070984

00084a80 <__sfvwrite_r>:
   84a80:	6893      	ldr	r3, [r2, #8]
   84a82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84a86:	4680      	mov	r8, r0
   84a88:	460c      	mov	r4, r1
   84a8a:	4691      	mov	r9, r2
   84a8c:	b90b      	cbnz	r3, 84a92 <__sfvwrite_r+0x12>
   84a8e:	2000      	movs	r0, #0
   84a90:	e13c      	b.n	84d0c <__sfvwrite_r+0x28c>
   84a92:	898b      	ldrh	r3, [r1, #12]
   84a94:	0718      	lsls	r0, r3, #28
   84a96:	d50e      	bpl.n	84ab6 <__sfvwrite_r+0x36>
   84a98:	690b      	ldr	r3, [r1, #16]
   84a9a:	b163      	cbz	r3, 84ab6 <__sfvwrite_r+0x36>
   84a9c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
   84aa0:	f8d9 6000 	ldr.w	r6, [r9]
   84aa4:	f00a 0c02 	and.w	ip, sl, #2
   84aa8:	fa1f f38c 	uxth.w	r3, ip
   84aac:	b333      	cbz	r3, 84afc <__sfvwrite_r+0x7c>
   84aae:	f04f 0a00 	mov.w	sl, #0
   84ab2:	4657      	mov	r7, sl
   84ab4:	e01b      	b.n	84aee <__sfvwrite_r+0x6e>
   84ab6:	4640      	mov	r0, r8
   84ab8:	4621      	mov	r1, r4
   84aba:	f7ff fc21 	bl	84300 <__swsetup_r>
   84abe:	2800      	cmp	r0, #0
   84ac0:	d0ec      	beq.n	84a9c <__sfvwrite_r+0x1c>
   84ac2:	e121      	b.n	84d08 <__sfvwrite_r+0x288>
   84ac4:	4b93      	ldr	r3, [pc, #588]	; (84d14 <__sfvwrite_r+0x294>)
   84ac6:	4640      	mov	r0, r8
   84ac8:	429f      	cmp	r7, r3
   84aca:	bf38      	it	cc
   84acc:	463b      	movcc	r3, r7
   84ace:	69e1      	ldr	r1, [r4, #28]
   84ad0:	4652      	mov	r2, sl
   84ad2:	6a65      	ldr	r5, [r4, #36]	; 0x24
   84ad4:	47a8      	blx	r5
   84ad6:	2800      	cmp	r0, #0
   84ad8:	f340 8112 	ble.w	84d00 <__sfvwrite_r+0x280>
   84adc:	f8d9 3008 	ldr.w	r3, [r9, #8]
   84ae0:	4482      	add	sl, r0
   84ae2:	1a3f      	subs	r7, r7, r0
   84ae4:	1a18      	subs	r0, r3, r0
   84ae6:	f8c9 0008 	str.w	r0, [r9, #8]
   84aea:	2800      	cmp	r0, #0
   84aec:	d0cf      	beq.n	84a8e <__sfvwrite_r+0xe>
   84aee:	2f00      	cmp	r7, #0
   84af0:	d1e8      	bne.n	84ac4 <__sfvwrite_r+0x44>
   84af2:	f8d6 a000 	ldr.w	sl, [r6]
   84af6:	6877      	ldr	r7, [r6, #4]
   84af8:	3608      	adds	r6, #8
   84afa:	e7f8      	b.n	84aee <__sfvwrite_r+0x6e>
   84afc:	f01a 0a01 	ands.w	sl, sl, #1
   84b00:	d004      	beq.n	84b0c <__sfvwrite_r+0x8c>
   84b02:	469b      	mov	fp, r3
   84b04:	9301      	str	r3, [sp, #4]
   84b06:	461f      	mov	r7, r3
   84b08:	469a      	mov	sl, r3
   84b0a:	e0bf      	b.n	84c8c <__sfvwrite_r+0x20c>
   84b0c:	4655      	mov	r5, sl
   84b0e:	b925      	cbnz	r5, 84b1a <__sfvwrite_r+0x9a>
   84b10:	f8d6 a000 	ldr.w	sl, [r6]
   84b14:	6875      	ldr	r5, [r6, #4]
   84b16:	3608      	adds	r6, #8
   84b18:	e7f9      	b.n	84b0e <__sfvwrite_r+0x8e>
   84b1a:	89a2      	ldrh	r2, [r4, #12]
   84b1c:	68a7      	ldr	r7, [r4, #8]
   84b1e:	0591      	lsls	r1, r2, #22
   84b20:	d552      	bpl.n	84bc8 <__sfvwrite_r+0x148>
   84b22:	42bd      	cmp	r5, r7
   84b24:	d342      	bcc.n	84bac <__sfvwrite_r+0x12c>
   84b26:	f412 6f90 	tst.w	r2, #1152	; 0x480
   84b2a:	d03d      	beq.n	84ba8 <__sfvwrite_r+0x128>
   84b2c:	6921      	ldr	r1, [r4, #16]
   84b2e:	6823      	ldr	r3, [r4, #0]
   84b30:	2002      	movs	r0, #2
   84b32:	1a5b      	subs	r3, r3, r1
   84b34:	9301      	str	r3, [sp, #4]
   84b36:	6963      	ldr	r3, [r4, #20]
   84b38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   84b3c:	fb93 fbf0 	sdiv	fp, r3, r0
   84b40:	9b01      	ldr	r3, [sp, #4]
   84b42:	1c58      	adds	r0, r3, #1
   84b44:	4428      	add	r0, r5
   84b46:	4583      	cmp	fp, r0
   84b48:	bf38      	it	cc
   84b4a:	4683      	movcc	fp, r0
   84b4c:	0553      	lsls	r3, r2, #21
   84b4e:	4640      	mov	r0, r8
   84b50:	d50f      	bpl.n	84b72 <__sfvwrite_r+0xf2>
   84b52:	4659      	mov	r1, fp
   84b54:	f000 f9d0 	bl	84ef8 <_malloc_r>
   84b58:	4607      	mov	r7, r0
   84b5a:	b1b8      	cbz	r0, 84b8c <__sfvwrite_r+0x10c>
   84b5c:	9a01      	ldr	r2, [sp, #4]
   84b5e:	6921      	ldr	r1, [r4, #16]
   84b60:	f7fe fe4e 	bl	83800 <memcpy>
   84b64:	89a2      	ldrh	r2, [r4, #12]
   84b66:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   84b6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84b6e:	81a2      	strh	r2, [r4, #12]
   84b70:	e010      	b.n	84b94 <__sfvwrite_r+0x114>
   84b72:	465a      	mov	r2, fp
   84b74:	f000 fbf4 	bl	85360 <_realloc_r>
   84b78:	4607      	mov	r7, r0
   84b7a:	b958      	cbnz	r0, 84b94 <__sfvwrite_r+0x114>
   84b7c:	4640      	mov	r0, r8
   84b7e:	6921      	ldr	r1, [r4, #16]
   84b80:	f7ff fec6 	bl	84910 <_free_r>
   84b84:	89a3      	ldrh	r3, [r4, #12]
   84b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   84b8a:	81a3      	strh	r3, [r4, #12]
   84b8c:	230c      	movs	r3, #12
   84b8e:	f8c8 3000 	str.w	r3, [r8]
   84b92:	e0b5      	b.n	84d00 <__sfvwrite_r+0x280>
   84b94:	9b01      	ldr	r3, [sp, #4]
   84b96:	6127      	str	r7, [r4, #16]
   84b98:	441f      	add	r7, r3
   84b9a:	ebc3 030b 	rsb	r3, r3, fp
   84b9e:	6027      	str	r7, [r4, #0]
   84ba0:	f8c4 b014 	str.w	fp, [r4, #20]
   84ba4:	462f      	mov	r7, r5
   84ba6:	60a3      	str	r3, [r4, #8]
   84ba8:	42bd      	cmp	r5, r7
   84baa:	d200      	bcs.n	84bae <__sfvwrite_r+0x12e>
   84bac:	462f      	mov	r7, r5
   84bae:	463a      	mov	r2, r7
   84bb0:	6820      	ldr	r0, [r4, #0]
   84bb2:	4651      	mov	r1, sl
   84bb4:	f000 fbb6 	bl	85324 <memmove>
   84bb8:	68a3      	ldr	r3, [r4, #8]
   84bba:	1bdb      	subs	r3, r3, r7
   84bbc:	60a3      	str	r3, [r4, #8]
   84bbe:	6823      	ldr	r3, [r4, #0]
   84bc0:	441f      	add	r7, r3
   84bc2:	6027      	str	r7, [r4, #0]
   84bc4:	462f      	mov	r7, r5
   84bc6:	e02a      	b.n	84c1e <__sfvwrite_r+0x19e>
   84bc8:	6820      	ldr	r0, [r4, #0]
   84bca:	6923      	ldr	r3, [r4, #16]
   84bcc:	4298      	cmp	r0, r3
   84bce:	d802      	bhi.n	84bd6 <__sfvwrite_r+0x156>
   84bd0:	6963      	ldr	r3, [r4, #20]
   84bd2:	429d      	cmp	r5, r3
   84bd4:	d213      	bcs.n	84bfe <__sfvwrite_r+0x17e>
   84bd6:	42bd      	cmp	r5, r7
   84bd8:	bf38      	it	cc
   84bda:	462f      	movcc	r7, r5
   84bdc:	463a      	mov	r2, r7
   84bde:	4651      	mov	r1, sl
   84be0:	f000 fba0 	bl	85324 <memmove>
   84be4:	68a3      	ldr	r3, [r4, #8]
   84be6:	6822      	ldr	r2, [r4, #0]
   84be8:	1bdb      	subs	r3, r3, r7
   84bea:	443a      	add	r2, r7
   84bec:	60a3      	str	r3, [r4, #8]
   84bee:	6022      	str	r2, [r4, #0]
   84bf0:	b9ab      	cbnz	r3, 84c1e <__sfvwrite_r+0x19e>
   84bf2:	4640      	mov	r0, r8
   84bf4:	4621      	mov	r1, r4
   84bf6:	f7ff fcbe 	bl	84576 <_fflush_r>
   84bfa:	b180      	cbz	r0, 84c1e <__sfvwrite_r+0x19e>
   84bfc:	e080      	b.n	84d00 <__sfvwrite_r+0x280>
   84bfe:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   84c02:	4575      	cmp	r5, lr
   84c04:	bf38      	it	cc
   84c06:	46ae      	movcc	lr, r5
   84c08:	fb9e fef3 	sdiv	lr, lr, r3
   84c0c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84c0e:	4640      	mov	r0, r8
   84c10:	69e1      	ldr	r1, [r4, #28]
   84c12:	4652      	mov	r2, sl
   84c14:	fb03 f30e 	mul.w	r3, r3, lr
   84c18:	47b8      	blx	r7
   84c1a:	1e07      	subs	r7, r0, #0
   84c1c:	dd70      	ble.n	84d00 <__sfvwrite_r+0x280>
   84c1e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   84c22:	44ba      	add	sl, r7
   84c24:	1bed      	subs	r5, r5, r7
   84c26:	1bdf      	subs	r7, r3, r7
   84c28:	f8c9 7008 	str.w	r7, [r9, #8]
   84c2c:	2f00      	cmp	r7, #0
   84c2e:	f47f af6e 	bne.w	84b0e <__sfvwrite_r+0x8e>
   84c32:	e72c      	b.n	84a8e <__sfvwrite_r+0xe>
   84c34:	9d01      	ldr	r5, [sp, #4]
   84c36:	2d00      	cmp	r5, #0
   84c38:	d031      	beq.n	84c9e <__sfvwrite_r+0x21e>
   84c3a:	6820      	ldr	r0, [r4, #0]
   84c3c:	6922      	ldr	r2, [r4, #16]
   84c3e:	45d3      	cmp	fp, sl
   84c40:	bf34      	ite	cc
   84c42:	465b      	movcc	r3, fp
   84c44:	4653      	movcs	r3, sl
   84c46:	4290      	cmp	r0, r2
   84c48:	68a5      	ldr	r5, [r4, #8]
   84c4a:	f8d4 e014 	ldr.w	lr, [r4, #20]
   84c4e:	d936      	bls.n	84cbe <__sfvwrite_r+0x23e>
   84c50:	4475      	add	r5, lr
   84c52:	42ab      	cmp	r3, r5
   84c54:	dd33      	ble.n	84cbe <__sfvwrite_r+0x23e>
   84c56:	4639      	mov	r1, r7
   84c58:	462a      	mov	r2, r5
   84c5a:	f000 fb63 	bl	85324 <memmove>
   84c5e:	6823      	ldr	r3, [r4, #0]
   84c60:	4640      	mov	r0, r8
   84c62:	442b      	add	r3, r5
   84c64:	6023      	str	r3, [r4, #0]
   84c66:	4621      	mov	r1, r4
   84c68:	f7ff fc85 	bl	84576 <_fflush_r>
   84c6c:	2800      	cmp	r0, #0
   84c6e:	d147      	bne.n	84d00 <__sfvwrite_r+0x280>
   84c70:	ebbb 0b05 	subs.w	fp, fp, r5
   84c74:	d03c      	beq.n	84cf0 <__sfvwrite_r+0x270>
   84c76:	f8d9 3008 	ldr.w	r3, [r9, #8]
   84c7a:	442f      	add	r7, r5
   84c7c:	ebc5 0a0a 	rsb	sl, r5, sl
   84c80:	1b5d      	subs	r5, r3, r5
   84c82:	f8c9 5008 	str.w	r5, [r9, #8]
   84c86:	2d00      	cmp	r5, #0
   84c88:	f43f af01 	beq.w	84a8e <__sfvwrite_r+0xe>
   84c8c:	f1ba 0f00 	cmp.w	sl, #0
   84c90:	d1d0      	bne.n	84c34 <__sfvwrite_r+0x1b4>
   84c92:	2500      	movs	r5, #0
   84c94:	e896 0480 	ldmia.w	r6, {r7, sl}
   84c98:	9501      	str	r5, [sp, #4]
   84c9a:	3608      	adds	r6, #8
   84c9c:	e7f6      	b.n	84c8c <__sfvwrite_r+0x20c>
   84c9e:	4638      	mov	r0, r7
   84ca0:	210a      	movs	r1, #10
   84ca2:	4652      	mov	r2, sl
   84ca4:	f000 fb30 	bl	85308 <memchr>
   84ca8:	b120      	cbz	r0, 84cb4 <__sfvwrite_r+0x234>
   84caa:	f100 0c01 	add.w	ip, r0, #1
   84cae:	ebc7 0b0c 	rsb	fp, r7, ip
   84cb2:	e001      	b.n	84cb8 <__sfvwrite_r+0x238>
   84cb4:	f10a 0b01 	add.w	fp, sl, #1
   84cb8:	2501      	movs	r5, #1
   84cba:	9501      	str	r5, [sp, #4]
   84cbc:	e7bd      	b.n	84c3a <__sfvwrite_r+0x1ba>
   84cbe:	4573      	cmp	r3, lr
   84cc0:	db08      	blt.n	84cd4 <__sfvwrite_r+0x254>
   84cc2:	6a65      	ldr	r5, [r4, #36]	; 0x24
   84cc4:	4640      	mov	r0, r8
   84cc6:	69e1      	ldr	r1, [r4, #28]
   84cc8:	463a      	mov	r2, r7
   84cca:	4673      	mov	r3, lr
   84ccc:	47a8      	blx	r5
   84cce:	1e05      	subs	r5, r0, #0
   84cd0:	dcce      	bgt.n	84c70 <__sfvwrite_r+0x1f0>
   84cd2:	e015      	b.n	84d00 <__sfvwrite_r+0x280>
   84cd4:	461a      	mov	r2, r3
   84cd6:	4639      	mov	r1, r7
   84cd8:	9300      	str	r3, [sp, #0]
   84cda:	f000 fb23 	bl	85324 <memmove>
   84cde:	9b00      	ldr	r3, [sp, #0]
   84ce0:	68a2      	ldr	r2, [r4, #8]
   84ce2:	461d      	mov	r5, r3
   84ce4:	1ad2      	subs	r2, r2, r3
   84ce6:	60a2      	str	r2, [r4, #8]
   84ce8:	6822      	ldr	r2, [r4, #0]
   84cea:	441a      	add	r2, r3
   84cec:	6022      	str	r2, [r4, #0]
   84cee:	e7bf      	b.n	84c70 <__sfvwrite_r+0x1f0>
   84cf0:	4640      	mov	r0, r8
   84cf2:	4621      	mov	r1, r4
   84cf4:	f7ff fc3f 	bl	84576 <_fflush_r>
   84cf8:	b910      	cbnz	r0, 84d00 <__sfvwrite_r+0x280>
   84cfa:	f8cd b004 	str.w	fp, [sp, #4]
   84cfe:	e7ba      	b.n	84c76 <__sfvwrite_r+0x1f6>
   84d00:	89a3      	ldrh	r3, [r4, #12]
   84d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84d06:	81a3      	strh	r3, [r4, #12]
   84d08:	f04f 30ff 	mov.w	r0, #4294967295
   84d0c:	b003      	add	sp, #12
   84d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84d12:	bf00      	nop
   84d14:	7ffffc00 	.word	0x7ffffc00

00084d18 <_fwalk>:
   84d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84d1c:	4688      	mov	r8, r1
   84d1e:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
   84d22:	2600      	movs	r6, #0
   84d24:	b18c      	cbz	r4, 84d4a <_fwalk+0x32>
   84d26:	68a5      	ldr	r5, [r4, #8]
   84d28:	6867      	ldr	r7, [r4, #4]
   84d2a:	3f01      	subs	r7, #1
   84d2c:	d40b      	bmi.n	84d46 <_fwalk+0x2e>
   84d2e:	89ab      	ldrh	r3, [r5, #12]
   84d30:	2b01      	cmp	r3, #1
   84d32:	d906      	bls.n	84d42 <_fwalk+0x2a>
   84d34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   84d38:	3301      	adds	r3, #1
   84d3a:	d002      	beq.n	84d42 <_fwalk+0x2a>
   84d3c:	4628      	mov	r0, r5
   84d3e:	47c0      	blx	r8
   84d40:	4306      	orrs	r6, r0
   84d42:	3568      	adds	r5, #104	; 0x68
   84d44:	e7f1      	b.n	84d2a <_fwalk+0x12>
   84d46:	6824      	ldr	r4, [r4, #0]
   84d48:	e7ec      	b.n	84d24 <_fwalk+0xc>
   84d4a:	4630      	mov	r0, r6
   84d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00084d50 <_fwalk_reent>:
   84d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84d54:	4680      	mov	r8, r0
   84d56:	4689      	mov	r9, r1
   84d58:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
   84d5c:	2600      	movs	r6, #0
   84d5e:	b194      	cbz	r4, 84d86 <_fwalk_reent+0x36>
   84d60:	68a5      	ldr	r5, [r4, #8]
   84d62:	6867      	ldr	r7, [r4, #4]
   84d64:	3f01      	subs	r7, #1
   84d66:	d40c      	bmi.n	84d82 <_fwalk_reent+0x32>
   84d68:	89ab      	ldrh	r3, [r5, #12]
   84d6a:	2b01      	cmp	r3, #1
   84d6c:	d907      	bls.n	84d7e <_fwalk_reent+0x2e>
   84d6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   84d72:	3301      	adds	r3, #1
   84d74:	d003      	beq.n	84d7e <_fwalk_reent+0x2e>
   84d76:	4640      	mov	r0, r8
   84d78:	4629      	mov	r1, r5
   84d7a:	47c8      	blx	r9
   84d7c:	4306      	orrs	r6, r0
   84d7e:	3568      	adds	r5, #104	; 0x68
   84d80:	e7f0      	b.n	84d64 <_fwalk_reent+0x14>
   84d82:	6824      	ldr	r4, [r4, #0]
   84d84:	e7eb      	b.n	84d5e <_fwalk_reent+0xe>
   84d86:	4630      	mov	r0, r6
   84d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00084d8c <_setlocale_r>:
   84d8c:	b510      	push	{r4, lr}
   84d8e:	4614      	mov	r4, r2
   84d90:	b90a      	cbnz	r2, 84d96 <_setlocale_r+0xa>
   84d92:	480b      	ldr	r0, [pc, #44]	; (84dc0 <_setlocale_r+0x34>)
   84d94:	bd10      	pop	{r4, pc}
   84d96:	4610      	mov	r0, r2
   84d98:	490a      	ldr	r1, [pc, #40]	; (84dc4 <_setlocale_r+0x38>)
   84d9a:	f000 fce0 	bl	8575e <strcmp>
   84d9e:	2800      	cmp	r0, #0
   84da0:	d0f7      	beq.n	84d92 <_setlocale_r+0x6>
   84da2:	4620      	mov	r0, r4
   84da4:	4906      	ldr	r1, [pc, #24]	; (84dc0 <_setlocale_r+0x34>)
   84da6:	f000 fcda 	bl	8575e <strcmp>
   84daa:	2800      	cmp	r0, #0
   84dac:	d0f1      	beq.n	84d92 <_setlocale_r+0x6>
   84dae:	4620      	mov	r0, r4
   84db0:	4905      	ldr	r1, [pc, #20]	; (84dc8 <_setlocale_r+0x3c>)
   84db2:	f000 fcd4 	bl	8575e <strcmp>
   84db6:	2800      	cmp	r0, #0
   84db8:	4801      	ldr	r0, [pc, #4]	; (84dc0 <_setlocale_r+0x34>)
   84dba:	bf18      	it	ne
   84dbc:	2000      	movne	r0, #0
   84dbe:	bd10      	pop	{r4, pc}
   84dc0:	000860dc 	.word	0x000860dc
   84dc4:	00086120 	.word	0x00086120
   84dc8:	00086127 	.word	0x00086127

00084dcc <__locale_charset>:
   84dcc:	4800      	ldr	r0, [pc, #0]	; (84dd0 <__locale_charset+0x4>)
   84dce:	4770      	bx	lr
   84dd0:	20070900 	.word	0x20070900

00084dd4 <__locale_mb_cur_max>:
   84dd4:	4b01      	ldr	r3, [pc, #4]	; (84ddc <__locale_mb_cur_max+0x8>)
   84dd6:	6a18      	ldr	r0, [r3, #32]
   84dd8:	4770      	bx	lr
   84dda:	bf00      	nop
   84ddc:	20070900 	.word	0x20070900

00084de0 <__locale_msgcharset>:
   84de0:	4800      	ldr	r0, [pc, #0]	; (84de4 <__locale_msgcharset+0x4>)
   84de2:	4770      	bx	lr
   84de4:	20070924 	.word	0x20070924

00084de8 <__locale_cjk_lang>:
   84de8:	2000      	movs	r0, #0
   84dea:	4770      	bx	lr

00084dec <_localeconv_r>:
   84dec:	4800      	ldr	r0, [pc, #0]	; (84df0 <_localeconv_r+0x4>)
   84dee:	4770      	bx	lr
   84df0:	20070944 	.word	0x20070944

00084df4 <setlocale>:
   84df4:	460a      	mov	r2, r1
   84df6:	4903      	ldr	r1, [pc, #12]	; (84e04 <setlocale+0x10>)
   84df8:	4603      	mov	r3, r0
   84dfa:	6808      	ldr	r0, [r1, #0]
   84dfc:	4619      	mov	r1, r3
   84dfe:	f7ff bfc5 	b.w	84d8c <_setlocale_r>
   84e02:	bf00      	nop
   84e04:	200704d0 	.word	0x200704d0

00084e08 <localeconv>:
   84e08:	4800      	ldr	r0, [pc, #0]	; (84e0c <localeconv+0x4>)
   84e0a:	4770      	bx	lr
   84e0c:	20070944 	.word	0x20070944

00084e10 <__smakebuf_r>:
   84e10:	b5f0      	push	{r4, r5, r6, r7, lr}
   84e12:	898b      	ldrh	r3, [r1, #12]
   84e14:	b091      	sub	sp, #68	; 0x44
   84e16:	079d      	lsls	r5, r3, #30
   84e18:	4606      	mov	r6, r0
   84e1a:	460c      	mov	r4, r1
   84e1c:	d43a      	bmi.n	84e94 <__smakebuf_r+0x84>
   84e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84e22:	2900      	cmp	r1, #0
   84e24:	da0b      	bge.n	84e3e <__smakebuf_r+0x2e>
   84e26:	89a3      	ldrh	r3, [r4, #12]
   84e28:	2700      	movs	r7, #0
   84e2a:	f013 0f80 	tst.w	r3, #128	; 0x80
   84e2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84e32:	bf0c      	ite	eq
   84e34:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   84e38:	2540      	movne	r5, #64	; 0x40
   84e3a:	81a3      	strh	r3, [r4, #12]
   84e3c:	e01f      	b.n	84e7e <__smakebuf_r+0x6e>
   84e3e:	aa01      	add	r2, sp, #4
   84e40:	f000 fd58 	bl	858f4 <_fstat_r>
   84e44:	2800      	cmp	r0, #0
   84e46:	dbee      	blt.n	84e26 <__smakebuf_r+0x16>
   84e48:	9b02      	ldr	r3, [sp, #8]
   84e4a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   84e4e:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   84e52:	424f      	negs	r7, r1
   84e54:	414f      	adcs	r7, r1
   84e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   84e5a:	89a3      	ldrh	r3, [r4, #12]
   84e5c:	d10a      	bne.n	84e74 <__smakebuf_r+0x64>
   84e5e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   84e60:	491b      	ldr	r1, [pc, #108]	; (84ed0 <__smakebuf_r+0xc0>)
   84e62:	428a      	cmp	r2, r1
   84e64:	d106      	bne.n	84e74 <__smakebuf_r+0x64>
   84e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   84e6a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   84e6e:	81a3      	strh	r3, [r4, #12]
   84e70:	64e5      	str	r5, [r4, #76]	; 0x4c
   84e72:	e004      	b.n	84e7e <__smakebuf_r+0x6e>
   84e74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84e78:	81a3      	strh	r3, [r4, #12]
   84e7a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   84e7e:	4630      	mov	r0, r6
   84e80:	4629      	mov	r1, r5
   84e82:	f000 f839 	bl	84ef8 <_malloc_r>
   84e86:	b960      	cbnz	r0, 84ea2 <__smakebuf_r+0x92>
   84e88:	89a3      	ldrh	r3, [r4, #12]
   84e8a:	059a      	lsls	r2, r3, #22
   84e8c:	d41d      	bmi.n	84eca <__smakebuf_r+0xba>
   84e8e:	f043 0302 	orr.w	r3, r3, #2
   84e92:	81a3      	strh	r3, [r4, #12]
   84e94:	f104 0343 	add.w	r3, r4, #67	; 0x43
   84e98:	6023      	str	r3, [r4, #0]
   84e9a:	6123      	str	r3, [r4, #16]
   84e9c:	2301      	movs	r3, #1
   84e9e:	6163      	str	r3, [r4, #20]
   84ea0:	e013      	b.n	84eca <__smakebuf_r+0xba>
   84ea2:	4b0c      	ldr	r3, [pc, #48]	; (84ed4 <__smakebuf_r+0xc4>)
   84ea4:	63f3      	str	r3, [r6, #60]	; 0x3c
   84ea6:	89a3      	ldrh	r3, [r4, #12]
   84ea8:	6020      	str	r0, [r4, #0]
   84eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84eae:	81a3      	strh	r3, [r4, #12]
   84eb0:	6120      	str	r0, [r4, #16]
   84eb2:	6165      	str	r5, [r4, #20]
   84eb4:	b14f      	cbz	r7, 84eca <__smakebuf_r+0xba>
   84eb6:	4630      	mov	r0, r6
   84eb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84ebc:	f000 fd2c 	bl	85918 <_isatty_r>
   84ec0:	b118      	cbz	r0, 84eca <__smakebuf_r+0xba>
   84ec2:	89a3      	ldrh	r3, [r4, #12]
   84ec4:	f043 0301 	orr.w	r3, r3, #1
   84ec8:	81a3      	strh	r3, [r4, #12]
   84eca:	b011      	add	sp, #68	; 0x44
   84ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84ece:	bf00      	nop
   84ed0:	00085733 	.word	0x00085733
   84ed4:	000845c5 	.word	0x000845c5

00084ed8 <malloc>:
   84ed8:	4b02      	ldr	r3, [pc, #8]	; (84ee4 <malloc+0xc>)
   84eda:	4601      	mov	r1, r0
   84edc:	6818      	ldr	r0, [r3, #0]
   84ede:	f000 b80b 	b.w	84ef8 <_malloc_r>
   84ee2:	bf00      	nop
   84ee4:	200704d0 	.word	0x200704d0

00084ee8 <free>:
   84ee8:	4b02      	ldr	r3, [pc, #8]	; (84ef4 <free+0xc>)
   84eea:	4601      	mov	r1, r0
   84eec:	6818      	ldr	r0, [r3, #0]
   84eee:	f7ff bd0f 	b.w	84910 <_free_r>
   84ef2:	bf00      	nop
   84ef4:	200704d0 	.word	0x200704d0

00084ef8 <_malloc_r>:
   84ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84efc:	f101 040b 	add.w	r4, r1, #11
   84f00:	2c16      	cmp	r4, #22
   84f02:	4607      	mov	r7, r0
   84f04:	d903      	bls.n	84f0e <_malloc_r+0x16>
   84f06:	f034 0407 	bics.w	r4, r4, #7
   84f0a:	d501      	bpl.n	84f10 <_malloc_r+0x18>
   84f0c:	e002      	b.n	84f14 <_malloc_r+0x1c>
   84f0e:	2410      	movs	r4, #16
   84f10:	428c      	cmp	r4, r1
   84f12:	d202      	bcs.n	84f1a <_malloc_r+0x22>
   84f14:	230c      	movs	r3, #12
   84f16:	603b      	str	r3, [r7, #0]
   84f18:	e1de      	b.n	852d8 <_malloc_r+0x3e0>
   84f1a:	4638      	mov	r0, r7
   84f1c:	f000 fa1d 	bl	8535a <__malloc_lock>
   84f20:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   84f24:	4da3      	ldr	r5, [pc, #652]	; (851b4 <_malloc_r+0x2bc>)
   84f26:	d214      	bcs.n	84f52 <_malloc_r+0x5a>
   84f28:	08e2      	lsrs	r2, r4, #3
   84f2a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   84f2e:	68de      	ldr	r6, [r3, #12]
   84f30:	429e      	cmp	r6, r3
   84f32:	d106      	bne.n	84f42 <_malloc_r+0x4a>
   84f34:	f106 0308 	add.w	r3, r6, #8
   84f38:	6976      	ldr	r6, [r6, #20]
   84f3a:	429e      	cmp	r6, r3
   84f3c:	bf08      	it	eq
   84f3e:	3202      	addeq	r2, #2
   84f40:	d043      	beq.n	84fca <_malloc_r+0xd2>
   84f42:	6873      	ldr	r3, [r6, #4]
   84f44:	68f2      	ldr	r2, [r6, #12]
   84f46:	68b1      	ldr	r1, [r6, #8]
   84f48:	f023 0303 	bic.w	r3, r3, #3
   84f4c:	60ca      	str	r2, [r1, #12]
   84f4e:	6091      	str	r1, [r2, #8]
   84f50:	e05d      	b.n	8500e <_malloc_r+0x116>
   84f52:	0a62      	lsrs	r2, r4, #9
   84f54:	d01a      	beq.n	84f8c <_malloc_r+0x94>
   84f56:	2a04      	cmp	r2, #4
   84f58:	d802      	bhi.n	84f60 <_malloc_r+0x68>
   84f5a:	09a2      	lsrs	r2, r4, #6
   84f5c:	3238      	adds	r2, #56	; 0x38
   84f5e:	e018      	b.n	84f92 <_malloc_r+0x9a>
   84f60:	2a14      	cmp	r2, #20
   84f62:	d801      	bhi.n	84f68 <_malloc_r+0x70>
   84f64:	325b      	adds	r2, #91	; 0x5b
   84f66:	e014      	b.n	84f92 <_malloc_r+0x9a>
   84f68:	2a54      	cmp	r2, #84	; 0x54
   84f6a:	d802      	bhi.n	84f72 <_malloc_r+0x7a>
   84f6c:	0b22      	lsrs	r2, r4, #12
   84f6e:	326e      	adds	r2, #110	; 0x6e
   84f70:	e00f      	b.n	84f92 <_malloc_r+0x9a>
   84f72:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84f76:	d802      	bhi.n	84f7e <_malloc_r+0x86>
   84f78:	0be2      	lsrs	r2, r4, #15
   84f7a:	3277      	adds	r2, #119	; 0x77
   84f7c:	e009      	b.n	84f92 <_malloc_r+0x9a>
   84f7e:	f240 5354 	movw	r3, #1364	; 0x554
   84f82:	429a      	cmp	r2, r3
   84f84:	d804      	bhi.n	84f90 <_malloc_r+0x98>
   84f86:	0ca2      	lsrs	r2, r4, #18
   84f88:	327c      	adds	r2, #124	; 0x7c
   84f8a:	e002      	b.n	84f92 <_malloc_r+0x9a>
   84f8c:	223f      	movs	r2, #63	; 0x3f
   84f8e:	e000      	b.n	84f92 <_malloc_r+0x9a>
   84f90:	227e      	movs	r2, #126	; 0x7e
   84f92:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   84f96:	68de      	ldr	r6, [r3, #12]
   84f98:	429e      	cmp	r6, r3
   84f9a:	d015      	beq.n	84fc8 <_malloc_r+0xd0>
   84f9c:	6871      	ldr	r1, [r6, #4]
   84f9e:	f021 0103 	bic.w	r1, r1, #3
   84fa2:	1b08      	subs	r0, r1, r4
   84fa4:	280f      	cmp	r0, #15
   84fa6:	dd01      	ble.n	84fac <_malloc_r+0xb4>
   84fa8:	3a01      	subs	r2, #1
   84faa:	e00d      	b.n	84fc8 <_malloc_r+0xd0>
   84fac:	2800      	cmp	r0, #0
   84fae:	db09      	blt.n	84fc4 <_malloc_r+0xcc>
   84fb0:	68f3      	ldr	r3, [r6, #12]
   84fb2:	68b2      	ldr	r2, [r6, #8]
   84fb4:	60d3      	str	r3, [r2, #12]
   84fb6:	609a      	str	r2, [r3, #8]
   84fb8:	1873      	adds	r3, r6, r1
   84fba:	685a      	ldr	r2, [r3, #4]
   84fbc:	f042 0201 	orr.w	r2, r2, #1
   84fc0:	605a      	str	r2, [r3, #4]
   84fc2:	e194      	b.n	852ee <_malloc_r+0x3f6>
   84fc4:	68f6      	ldr	r6, [r6, #12]
   84fc6:	e7e7      	b.n	84f98 <_malloc_r+0xa0>
   84fc8:	3201      	adds	r2, #1
   84fca:	497a      	ldr	r1, [pc, #488]	; (851b4 <_malloc_r+0x2bc>)
   84fcc:	692e      	ldr	r6, [r5, #16]
   84fce:	f101 0008 	add.w	r0, r1, #8
   84fd2:	4286      	cmp	r6, r0
   84fd4:	4686      	mov	lr, r0
   84fd6:	d06d      	beq.n	850b4 <_malloc_r+0x1bc>
   84fd8:	6873      	ldr	r3, [r6, #4]
   84fda:	f023 0303 	bic.w	r3, r3, #3
   84fde:	ebc4 0c03 	rsb	ip, r4, r3
   84fe2:	f1bc 0f0f 	cmp.w	ip, #15
   84fe6:	dd0d      	ble.n	85004 <_malloc_r+0x10c>
   84fe8:	1933      	adds	r3, r6, r4
   84fea:	f04c 0201 	orr.w	r2, ip, #1
   84fee:	f044 0401 	orr.w	r4, r4, #1
   84ff2:	6074      	str	r4, [r6, #4]
   84ff4:	614b      	str	r3, [r1, #20]
   84ff6:	610b      	str	r3, [r1, #16]
   84ff8:	60d8      	str	r0, [r3, #12]
   84ffa:	6098      	str	r0, [r3, #8]
   84ffc:	605a      	str	r2, [r3, #4]
   84ffe:	f843 c00c 	str.w	ip, [r3, ip]
   85002:	e174      	b.n	852ee <_malloc_r+0x3f6>
   85004:	f1bc 0f00 	cmp.w	ip, #0
   85008:	6148      	str	r0, [r1, #20]
   8500a:	6108      	str	r0, [r1, #16]
   8500c:	db01      	blt.n	85012 <_malloc_r+0x11a>
   8500e:	4433      	add	r3, r6
   85010:	e7d3      	b.n	84fba <_malloc_r+0xc2>
   85012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85016:	d211      	bcs.n	8503c <_malloc_r+0x144>
   85018:	08db      	lsrs	r3, r3, #3
   8501a:	1098      	asrs	r0, r3, #2
   8501c:	f04f 0c01 	mov.w	ip, #1
   85020:	fa0c fc00 	lsl.w	ip, ip, r0
   85024:	6848      	ldr	r0, [r1, #4]
   85026:	ea4c 0000 	orr.w	r0, ip, r0
   8502a:	6048      	str	r0, [r1, #4]
   8502c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   85030:	688b      	ldr	r3, [r1, #8]
   85032:	60f1      	str	r1, [r6, #12]
   85034:	60b3      	str	r3, [r6, #8]
   85036:	608e      	str	r6, [r1, #8]
   85038:	60de      	str	r6, [r3, #12]
   8503a:	e03b      	b.n	850b4 <_malloc_r+0x1bc>
   8503c:	0a58      	lsrs	r0, r3, #9
   8503e:	2804      	cmp	r0, #4
   85040:	d802      	bhi.n	85048 <_malloc_r+0x150>
   85042:	0998      	lsrs	r0, r3, #6
   85044:	3038      	adds	r0, #56	; 0x38
   85046:	e015      	b.n	85074 <_malloc_r+0x17c>
   85048:	2814      	cmp	r0, #20
   8504a:	d801      	bhi.n	85050 <_malloc_r+0x158>
   8504c:	305b      	adds	r0, #91	; 0x5b
   8504e:	e011      	b.n	85074 <_malloc_r+0x17c>
   85050:	2854      	cmp	r0, #84	; 0x54
   85052:	d802      	bhi.n	8505a <_malloc_r+0x162>
   85054:	0b18      	lsrs	r0, r3, #12
   85056:	306e      	adds	r0, #110	; 0x6e
   85058:	e00c      	b.n	85074 <_malloc_r+0x17c>
   8505a:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   8505e:	d802      	bhi.n	85066 <_malloc_r+0x16e>
   85060:	0bd8      	lsrs	r0, r3, #15
   85062:	3077      	adds	r0, #119	; 0x77
   85064:	e006      	b.n	85074 <_malloc_r+0x17c>
   85066:	f240 5154 	movw	r1, #1364	; 0x554
   8506a:	4288      	cmp	r0, r1
   8506c:	bf9a      	itte	ls
   8506e:	0c98      	lsrls	r0, r3, #18
   85070:	307c      	addls	r0, #124	; 0x7c
   85072:	207e      	movhi	r0, #126	; 0x7e
   85074:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
   85078:	f8dc 1008 	ldr.w	r1, [ip, #8]
   8507c:	f8df 8134 	ldr.w	r8, [pc, #308]	; 851b4 <_malloc_r+0x2bc>
   85080:	4561      	cmp	r1, ip
   85082:	d10d      	bne.n	850a0 <_malloc_r+0x1a8>
   85084:	2301      	movs	r3, #1
   85086:	1080      	asrs	r0, r0, #2
   85088:	fa03 f000 	lsl.w	r0, r3, r0
   8508c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   85090:	4303      	orrs	r3, r0
   85092:	f8c8 3004 	str.w	r3, [r8, #4]
   85096:	460b      	mov	r3, r1
   85098:	e008      	b.n	850ac <_malloc_r+0x1b4>
   8509a:	6889      	ldr	r1, [r1, #8]
   8509c:	4561      	cmp	r1, ip
   8509e:	d004      	beq.n	850aa <_malloc_r+0x1b2>
   850a0:	6848      	ldr	r0, [r1, #4]
   850a2:	f020 0003 	bic.w	r0, r0, #3
   850a6:	4283      	cmp	r3, r0
   850a8:	d3f7      	bcc.n	8509a <_malloc_r+0x1a2>
   850aa:	68cb      	ldr	r3, [r1, #12]
   850ac:	60f3      	str	r3, [r6, #12]
   850ae:	60b1      	str	r1, [r6, #8]
   850b0:	609e      	str	r6, [r3, #8]
   850b2:	60ce      	str	r6, [r1, #12]
   850b4:	2101      	movs	r1, #1
   850b6:	1093      	asrs	r3, r2, #2
   850b8:	fa01 f303 	lsl.w	r3, r1, r3
   850bc:	6869      	ldr	r1, [r5, #4]
   850be:	428b      	cmp	r3, r1
   850c0:	d85d      	bhi.n	8517e <_malloc_r+0x286>
   850c2:	420b      	tst	r3, r1
   850c4:	d106      	bne.n	850d4 <_malloc_r+0x1dc>
   850c6:	f022 0203 	bic.w	r2, r2, #3
   850ca:	005b      	lsls	r3, r3, #1
   850cc:	420b      	tst	r3, r1
   850ce:	f102 0204 	add.w	r2, r2, #4
   850d2:	d0fa      	beq.n	850ca <_malloc_r+0x1d2>
   850d4:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
   850d8:	4680      	mov	r8, r0
   850da:	4694      	mov	ip, r2
   850dc:	f8d8 600c 	ldr.w	r6, [r8, #12]
   850e0:	4546      	cmp	r6, r8
   850e2:	d02d      	beq.n	85140 <_malloc_r+0x248>
   850e4:	6871      	ldr	r1, [r6, #4]
   850e6:	f021 0903 	bic.w	r9, r1, #3
   850ea:	ebc4 0109 	rsb	r1, r4, r9
   850ee:	290f      	cmp	r1, #15
   850f0:	dd13      	ble.n	8511a <_malloc_r+0x222>
   850f2:	1933      	adds	r3, r6, r4
   850f4:	f044 0401 	orr.w	r4, r4, #1
   850f8:	68f2      	ldr	r2, [r6, #12]
   850fa:	6074      	str	r4, [r6, #4]
   850fc:	f856 0f08 	ldr.w	r0, [r6, #8]!
   85100:	60c2      	str	r2, [r0, #12]
   85102:	6090      	str	r0, [r2, #8]
   85104:	f041 0201 	orr.w	r2, r1, #1
   85108:	616b      	str	r3, [r5, #20]
   8510a:	612b      	str	r3, [r5, #16]
   8510c:	f8c3 e00c 	str.w	lr, [r3, #12]
   85110:	f8c3 e008 	str.w	lr, [r3, #8]
   85114:	605a      	str	r2, [r3, #4]
   85116:	5059      	str	r1, [r3, r1]
   85118:	e00c      	b.n	85134 <_malloc_r+0x23c>
   8511a:	2900      	cmp	r1, #0
   8511c:	db0e      	blt.n	8513c <_malloc_r+0x244>
   8511e:	eb06 0109 	add.w	r1, r6, r9
   85122:	684b      	ldr	r3, [r1, #4]
   85124:	f043 0301 	orr.w	r3, r3, #1
   85128:	604b      	str	r3, [r1, #4]
   8512a:	68f3      	ldr	r3, [r6, #12]
   8512c:	f856 2f08 	ldr.w	r2, [r6, #8]!
   85130:	60d3      	str	r3, [r2, #12]
   85132:	609a      	str	r2, [r3, #8]
   85134:	4638      	mov	r0, r7
   85136:	f000 f911 	bl	8535c <__malloc_unlock>
   8513a:	e0dc      	b.n	852f6 <_malloc_r+0x3fe>
   8513c:	68f6      	ldr	r6, [r6, #12]
   8513e:	e7cf      	b.n	850e0 <_malloc_r+0x1e8>
   85140:	f10c 0c01 	add.w	ip, ip, #1
   85144:	f01c 0f03 	tst.w	ip, #3
   85148:	f108 0808 	add.w	r8, r8, #8
   8514c:	d1c6      	bne.n	850dc <_malloc_r+0x1e4>
   8514e:	0791      	lsls	r1, r2, #30
   85150:	d104      	bne.n	8515c <_malloc_r+0x264>
   85152:	686a      	ldr	r2, [r5, #4]
   85154:	ea22 0203 	bic.w	r2, r2, r3
   85158:	606a      	str	r2, [r5, #4]
   8515a:	e005      	b.n	85168 <_malloc_r+0x270>
   8515c:	f1a0 0108 	sub.w	r1, r0, #8
   85160:	6800      	ldr	r0, [r0, #0]
   85162:	3a01      	subs	r2, #1
   85164:	4288      	cmp	r0, r1
   85166:	d0f2      	beq.n	8514e <_malloc_r+0x256>
   85168:	6869      	ldr	r1, [r5, #4]
   8516a:	005b      	lsls	r3, r3, #1
   8516c:	428b      	cmp	r3, r1
   8516e:	d806      	bhi.n	8517e <_malloc_r+0x286>
   85170:	b12b      	cbz	r3, 8517e <_malloc_r+0x286>
   85172:	4662      	mov	r2, ip
   85174:	420b      	tst	r3, r1
   85176:	d1ad      	bne.n	850d4 <_malloc_r+0x1dc>
   85178:	3204      	adds	r2, #4
   8517a:	005b      	lsls	r3, r3, #1
   8517c:	e7fa      	b.n	85174 <_malloc_r+0x27c>
   8517e:	f8d5 9008 	ldr.w	r9, [r5, #8]
   85182:	f8d9 3004 	ldr.w	r3, [r9, #4]
   85186:	f023 0b03 	bic.w	fp, r3, #3
   8518a:	45a3      	cmp	fp, r4
   8518c:	d304      	bcc.n	85198 <_malloc_r+0x2a0>
   8518e:	ebc4 030b 	rsb	r3, r4, fp
   85192:	2b0f      	cmp	r3, #15
   85194:	f300 80a2 	bgt.w	852dc <_malloc_r+0x3e4>
   85198:	4907      	ldr	r1, [pc, #28]	; (851b8 <_malloc_r+0x2c0>)
   8519a:	eb09 030b 	add.w	r3, r9, fp
   8519e:	680a      	ldr	r2, [r1, #0]
   851a0:	4688      	mov	r8, r1
   851a2:	eb04 0a02 	add.w	sl, r4, r2
   851a6:	f8d5 2408 	ldr.w	r2, [r5, #1032]	; 0x408
   851aa:	3201      	adds	r2, #1
   851ac:	d106      	bne.n	851bc <_malloc_r+0x2c4>
   851ae:	f10a 0a10 	add.w	sl, sl, #16
   851b2:	e00b      	b.n	851cc <_malloc_r+0x2d4>
   851b4:	2007097c 	.word	0x2007097c
   851b8:	200790fc 	.word	0x200790fc
   851bc:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   851c0:	f10a 0a0f 	add.w	sl, sl, #15
   851c4:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   851c8:	f02a 0a0f 	bic.w	sl, sl, #15
   851cc:	4638      	mov	r0, r7
   851ce:	4651      	mov	r1, sl
   851d0:	9301      	str	r3, [sp, #4]
   851d2:	f000 fa6f 	bl	856b4 <_sbrk_r>
   851d6:	1c42      	adds	r2, r0, #1
   851d8:	4606      	mov	r6, r0
   851da:	9b01      	ldr	r3, [sp, #4]
   851dc:	d06f      	beq.n	852be <_malloc_r+0x3c6>
   851de:	4298      	cmp	r0, r3
   851e0:	d201      	bcs.n	851e6 <_malloc_r+0x2ee>
   851e2:	45a9      	cmp	r9, r5
   851e4:	d16b      	bne.n	852be <_malloc_r+0x3c6>
   851e6:	f8d8 2004 	ldr.w	r2, [r8, #4]
   851ea:	429e      	cmp	r6, r3
   851ec:	4452      	add	r2, sl
   851ee:	f8c8 2004 	str.w	r2, [r8, #4]
   851f2:	d108      	bne.n	85206 <_malloc_r+0x30e>
   851f4:	f3c6 010b 	ubfx	r1, r6, #0, #12
   851f8:	b929      	cbnz	r1, 85206 <_malloc_r+0x30e>
   851fa:	68ab      	ldr	r3, [r5, #8]
   851fc:	44da      	add	sl, fp
   851fe:	f04a 0201 	orr.w	r2, sl, #1
   85202:	605a      	str	r2, [r3, #4]
   85204:	e04d      	b.n	852a2 <_malloc_r+0x3aa>
   85206:	f8d5 1408 	ldr.w	r1, [r5, #1032]	; 0x408
   8520a:	3101      	adds	r1, #1
   8520c:	d103      	bne.n	85216 <_malloc_r+0x31e>
   8520e:	4b3c      	ldr	r3, [pc, #240]	; (85300 <_malloc_r+0x408>)
   85210:	f8c3 6408 	str.w	r6, [r3, #1032]	; 0x408
   85214:	e003      	b.n	8521e <_malloc_r+0x326>
   85216:	1af3      	subs	r3, r6, r3
   85218:	441a      	add	r2, r3
   8521a:	f8c8 2004 	str.w	r2, [r8, #4]
   8521e:	f016 0307 	ands.w	r3, r6, #7
   85222:	bf1c      	itt	ne
   85224:	f1c3 0308 	rsbne	r3, r3, #8
   85228:	18f6      	addne	r6, r6, r3
   8522a:	44b2      	add	sl, r6
   8522c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   85230:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   85234:	ebca 0a03 	rsb	sl, sl, r3
   85238:	4651      	mov	r1, sl
   8523a:	4638      	mov	r0, r7
   8523c:	f000 fa3a 	bl	856b4 <_sbrk_r>
   85240:	1c43      	adds	r3, r0, #1
   85242:	bf04      	itt	eq
   85244:	4630      	moveq	r0, r6
   85246:	f04f 0a00 	moveq.w	sl, #0
   8524a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8524e:	1b80      	subs	r0, r0, r6
   85250:	4450      	add	r0, sl
   85252:	4453      	add	r3, sl
   85254:	f040 0001 	orr.w	r0, r0, #1
   85258:	45a9      	cmp	r9, r5
   8525a:	60ae      	str	r6, [r5, #8]
   8525c:	f8c8 3004 	str.w	r3, [r8, #4]
   85260:	6070      	str	r0, [r6, #4]
   85262:	d01e      	beq.n	852a2 <_malloc_r+0x3aa>
   85264:	f1bb 0f0f 	cmp.w	fp, #15
   85268:	d802      	bhi.n	85270 <_malloc_r+0x378>
   8526a:	2301      	movs	r3, #1
   8526c:	6073      	str	r3, [r6, #4]
   8526e:	e026      	b.n	852be <_malloc_r+0x3c6>
   85270:	f8d9 3004 	ldr.w	r3, [r9, #4]
   85274:	f1ab 0b0c 	sub.w	fp, fp, #12
   85278:	f02b 0b07 	bic.w	fp, fp, #7
   8527c:	f003 0301 	and.w	r3, r3, #1
   85280:	ea4b 0303 	orr.w	r3, fp, r3
   85284:	f8c9 3004 	str.w	r3, [r9, #4]
   85288:	2205      	movs	r2, #5
   8528a:	eb09 030b 	add.w	r3, r9, fp
   8528e:	f1bb 0f0f 	cmp.w	fp, #15
   85292:	605a      	str	r2, [r3, #4]
   85294:	609a      	str	r2, [r3, #8]
   85296:	d904      	bls.n	852a2 <_malloc_r+0x3aa>
   85298:	4638      	mov	r0, r7
   8529a:	f109 0108 	add.w	r1, r9, #8
   8529e:	f7ff fb37 	bl	84910 <_free_r>
   852a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   852a6:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
   852aa:	4293      	cmp	r3, r2
   852ac:	bf84      	itt	hi
   852ae:	4a15      	ldrhi	r2, [pc, #84]	; (85304 <_malloc_r+0x40c>)
   852b0:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   852b2:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
   852b6:	4293      	cmp	r3, r2
   852b8:	bf84      	itt	hi
   852ba:	4a12      	ldrhi	r2, [pc, #72]	; (85304 <_malloc_r+0x40c>)
   852bc:	6313      	strhi	r3, [r2, #48]	; 0x30
   852be:	68ab      	ldr	r3, [r5, #8]
   852c0:	685a      	ldr	r2, [r3, #4]
   852c2:	f022 0203 	bic.w	r2, r2, #3
   852c6:	42a2      	cmp	r2, r4
   852c8:	ebc4 0302 	rsb	r3, r4, r2
   852cc:	d301      	bcc.n	852d2 <_malloc_r+0x3da>
   852ce:	2b0f      	cmp	r3, #15
   852d0:	dc04      	bgt.n	852dc <_malloc_r+0x3e4>
   852d2:	4638      	mov	r0, r7
   852d4:	f000 f842 	bl	8535c <__malloc_unlock>
   852d8:	2600      	movs	r6, #0
   852da:	e00c      	b.n	852f6 <_malloc_r+0x3fe>
   852dc:	68ae      	ldr	r6, [r5, #8]
   852de:	f044 0201 	orr.w	r2, r4, #1
   852e2:	f043 0301 	orr.w	r3, r3, #1
   852e6:	4434      	add	r4, r6
   852e8:	6072      	str	r2, [r6, #4]
   852ea:	60ac      	str	r4, [r5, #8]
   852ec:	6063      	str	r3, [r4, #4]
   852ee:	4638      	mov	r0, r7
   852f0:	f000 f834 	bl	8535c <__malloc_unlock>
   852f4:	3608      	adds	r6, #8
   852f6:	4630      	mov	r0, r6
   852f8:	b003      	add	sp, #12
   852fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   852fe:	bf00      	nop
   85300:	2007097c 	.word	0x2007097c
   85304:	200790fc 	.word	0x200790fc

00085308 <memchr>:
   85308:	b510      	push	{r4, lr}
   8530a:	b2c9      	uxtb	r1, r1
   8530c:	4402      	add	r2, r0
   8530e:	4290      	cmp	r0, r2
   85310:	4603      	mov	r3, r0
   85312:	d005      	beq.n	85320 <memchr+0x18>
   85314:	781c      	ldrb	r4, [r3, #0]
   85316:	3001      	adds	r0, #1
   85318:	428c      	cmp	r4, r1
   8531a:	d1f8      	bne.n	8530e <memchr+0x6>
   8531c:	4618      	mov	r0, r3
   8531e:	bd10      	pop	{r4, pc}
   85320:	2000      	movs	r0, #0
   85322:	bd10      	pop	{r4, pc}

00085324 <memmove>:
   85324:	4281      	cmp	r1, r0
   85326:	b570      	push	{r4, r5, r6, lr}
   85328:	d301      	bcc.n	8532e <memmove+0xa>
   8532a:	2300      	movs	r3, #0
   8532c:	e00e      	b.n	8534c <memmove+0x28>
   8532e:	188c      	adds	r4, r1, r2
   85330:	42a0      	cmp	r0, r4
   85332:	d2fa      	bcs.n	8532a <memmove+0x6>
   85334:	1885      	adds	r5, r0, r2
   85336:	4613      	mov	r3, r2
   85338:	f113 33ff 	adds.w	r3, r3, #4294967295
   8533c:	d305      	bcc.n	8534a <memmove+0x26>
   8533e:	4251      	negs	r1, r2
   85340:	1866      	adds	r6, r4, r1
   85342:	5cf6      	ldrb	r6, [r6, r3]
   85344:	4429      	add	r1, r5
   85346:	54ce      	strb	r6, [r1, r3]
   85348:	e7f6      	b.n	85338 <memmove+0x14>
   8534a:	bd70      	pop	{r4, r5, r6, pc}
   8534c:	4293      	cmp	r3, r2
   8534e:	d003      	beq.n	85358 <memmove+0x34>
   85350:	5ccc      	ldrb	r4, [r1, r3]
   85352:	54c4      	strb	r4, [r0, r3]
   85354:	3301      	adds	r3, #1
   85356:	e7f9      	b.n	8534c <memmove+0x28>
   85358:	bd70      	pop	{r4, r5, r6, pc}

0008535a <__malloc_lock>:
   8535a:	4770      	bx	lr

0008535c <__malloc_unlock>:
   8535c:	4770      	bx	lr
	...

00085360 <_realloc_r>:
   85360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85364:	4681      	mov	r9, r0
   85366:	460c      	mov	r4, r1
   85368:	b929      	cbnz	r1, 85376 <_realloc_r+0x16>
   8536a:	4611      	mov	r1, r2
   8536c:	b003      	add	sp, #12
   8536e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85372:	f7ff bdc1 	b.w	84ef8 <_malloc_r>
   85376:	9201      	str	r2, [sp, #4]
   85378:	f7ff ffef 	bl	8535a <__malloc_lock>
   8537c:	9a01      	ldr	r2, [sp, #4]
   8537e:	f854 5c04 	ldr.w	r5, [r4, #-4]
   85382:	f102 070b 	add.w	r7, r2, #11
   85386:	2f16      	cmp	r7, #22
   85388:	f1a4 0808 	sub.w	r8, r4, #8
   8538c:	f025 0603 	bic.w	r6, r5, #3
   85390:	d903      	bls.n	8539a <_realloc_r+0x3a>
   85392:	f037 0707 	bics.w	r7, r7, #7
   85396:	d501      	bpl.n	8539c <_realloc_r+0x3c>
   85398:	e002      	b.n	853a0 <_realloc_r+0x40>
   8539a:	2710      	movs	r7, #16
   8539c:	4297      	cmp	r7, r2
   8539e:	d204      	bcs.n	853aa <_realloc_r+0x4a>
   853a0:	230c      	movs	r3, #12
   853a2:	f8c9 3000 	str.w	r3, [r9]
   853a6:	2000      	movs	r0, #0
   853a8:	e180      	b.n	856ac <_realloc_r+0x34c>
   853aa:	42be      	cmp	r6, r7
   853ac:	f280 8156 	bge.w	8565c <_realloc_r+0x2fc>
   853b0:	49a3      	ldr	r1, [pc, #652]	; (85640 <_realloc_r+0x2e0>)
   853b2:	eb08 0306 	add.w	r3, r8, r6
   853b6:	f8d1 e008 	ldr.w	lr, [r1, #8]
   853ba:	468b      	mov	fp, r1
   853bc:	4573      	cmp	r3, lr
   853be:	6858      	ldr	r0, [r3, #4]
   853c0:	d005      	beq.n	853ce <_realloc_r+0x6e>
   853c2:	f020 0101 	bic.w	r1, r0, #1
   853c6:	4419      	add	r1, r3
   853c8:	6849      	ldr	r1, [r1, #4]
   853ca:	07c9      	lsls	r1, r1, #31
   853cc:	d425      	bmi.n	8541a <_realloc_r+0xba>
   853ce:	f020 0003 	bic.w	r0, r0, #3
   853d2:	4573      	cmp	r3, lr
   853d4:	eb00 0106 	add.w	r1, r0, r6
   853d8:	d117      	bne.n	8540a <_realloc_r+0xaa>
   853da:	f107 0c10 	add.w	ip, r7, #16
   853de:	4561      	cmp	r1, ip
   853e0:	db1d      	blt.n	8541e <_realloc_r+0xbe>
   853e2:	1bc9      	subs	r1, r1, r7
   853e4:	eb08 0507 	add.w	r5, r8, r7
   853e8:	f041 0101 	orr.w	r1, r1, #1
   853ec:	f8cb 5008 	str.w	r5, [fp, #8]
   853f0:	6069      	str	r1, [r5, #4]
   853f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   853f6:	4648      	mov	r0, r9
   853f8:	f003 0301 	and.w	r3, r3, #1
   853fc:	431f      	orrs	r7, r3
   853fe:	f844 7c04 	str.w	r7, [r4, #-4]
   85402:	f7ff ffab 	bl	8535c <__malloc_unlock>
   85406:	4620      	mov	r0, r4
   85408:	e150      	b.n	856ac <_realloc_r+0x34c>
   8540a:	42b9      	cmp	r1, r7
   8540c:	db07      	blt.n	8541e <_realloc_r+0xbe>
   8540e:	68da      	ldr	r2, [r3, #12]
   85410:	689b      	ldr	r3, [r3, #8]
   85412:	460e      	mov	r6, r1
   85414:	60da      	str	r2, [r3, #12]
   85416:	6093      	str	r3, [r2, #8]
   85418:	e120      	b.n	8565c <_realloc_r+0x2fc>
   8541a:	2000      	movs	r0, #0
   8541c:	4603      	mov	r3, r0
   8541e:	07e9      	lsls	r1, r5, #31
   85420:	f100 80cb 	bmi.w	855ba <_realloc_r+0x25a>
   85424:	f854 5c08 	ldr.w	r5, [r4, #-8]
   85428:	ebc5 0508 	rsb	r5, r5, r8
   8542c:	6869      	ldr	r1, [r5, #4]
   8542e:	f021 0103 	bic.w	r1, r1, #3
   85432:	eb01 0a06 	add.w	sl, r1, r6
   85436:	2b00      	cmp	r3, #0
   85438:	f000 808a 	beq.w	85550 <_realloc_r+0x1f0>
   8543c:	4573      	cmp	r3, lr
   8543e:	d14d      	bne.n	854dc <_realloc_r+0x17c>
   85440:	eb0a 0300 	add.w	r3, sl, r0
   85444:	f107 0110 	add.w	r1, r7, #16
   85448:	428b      	cmp	r3, r1
   8544a:	f2c0 8081 	blt.w	85550 <_realloc_r+0x1f0>
   8544e:	46a8      	mov	r8, r5
   85450:	68ea      	ldr	r2, [r5, #12]
   85452:	f858 1f08 	ldr.w	r1, [r8, #8]!
   85456:	60ca      	str	r2, [r1, #12]
   85458:	6091      	str	r1, [r2, #8]
   8545a:	1f32      	subs	r2, r6, #4
   8545c:	2a24      	cmp	r2, #36	; 0x24
   8545e:	d826      	bhi.n	854ae <_realloc_r+0x14e>
   85460:	2a13      	cmp	r2, #19
   85462:	d91c      	bls.n	8549e <_realloc_r+0x13e>
   85464:	6821      	ldr	r1, [r4, #0]
   85466:	2a1b      	cmp	r2, #27
   85468:	60a9      	str	r1, [r5, #8]
   8546a:	6861      	ldr	r1, [r4, #4]
   8546c:	60e9      	str	r1, [r5, #12]
   8546e:	d803      	bhi.n	85478 <_realloc_r+0x118>
   85470:	f105 0210 	add.w	r2, r5, #16
   85474:	3408      	adds	r4, #8
   85476:	e013      	b.n	854a0 <_realloc_r+0x140>
   85478:	68a1      	ldr	r1, [r4, #8]
   8547a:	2a24      	cmp	r2, #36	; 0x24
   8547c:	6129      	str	r1, [r5, #16]
   8547e:	68e1      	ldr	r1, [r4, #12]
   85480:	6169      	str	r1, [r5, #20]
   85482:	d003      	beq.n	8548c <_realloc_r+0x12c>
   85484:	f105 0218 	add.w	r2, r5, #24
   85488:	3410      	adds	r4, #16
   8548a:	e009      	b.n	854a0 <_realloc_r+0x140>
   8548c:	6922      	ldr	r2, [r4, #16]
   8548e:	3418      	adds	r4, #24
   85490:	61aa      	str	r2, [r5, #24]
   85492:	f854 1c04 	ldr.w	r1, [r4, #-4]
   85496:	f105 0220 	add.w	r2, r5, #32
   8549a:	61e9      	str	r1, [r5, #28]
   8549c:	e000      	b.n	854a0 <_realloc_r+0x140>
   8549e:	4642      	mov	r2, r8
   854a0:	6821      	ldr	r1, [r4, #0]
   854a2:	6011      	str	r1, [r2, #0]
   854a4:	6861      	ldr	r1, [r4, #4]
   854a6:	6051      	str	r1, [r2, #4]
   854a8:	68a1      	ldr	r1, [r4, #8]
   854aa:	6091      	str	r1, [r2, #8]
   854ac:	e005      	b.n	854ba <_realloc_r+0x15a>
   854ae:	4640      	mov	r0, r8
   854b0:	4621      	mov	r1, r4
   854b2:	9301      	str	r3, [sp, #4]
   854b4:	f7ff ff36 	bl	85324 <memmove>
   854b8:	9b01      	ldr	r3, [sp, #4]
   854ba:	1bdb      	subs	r3, r3, r7
   854bc:	19ea      	adds	r2, r5, r7
   854be:	f043 0301 	orr.w	r3, r3, #1
   854c2:	f8cb 2008 	str.w	r2, [fp, #8]
   854c6:	6053      	str	r3, [r2, #4]
   854c8:	686b      	ldr	r3, [r5, #4]
   854ca:	4648      	mov	r0, r9
   854cc:	f003 0301 	and.w	r3, r3, #1
   854d0:	431f      	orrs	r7, r3
   854d2:	606f      	str	r7, [r5, #4]
   854d4:	f7ff ff42 	bl	8535c <__malloc_unlock>
   854d8:	4640      	mov	r0, r8
   854da:	e0e7      	b.n	856ac <_realloc_r+0x34c>
   854dc:	eb0a 0b00 	add.w	fp, sl, r0
   854e0:	45bb      	cmp	fp, r7
   854e2:	db35      	blt.n	85550 <_realloc_r+0x1f0>
   854e4:	68da      	ldr	r2, [r3, #12]
   854e6:	689b      	ldr	r3, [r3, #8]
   854e8:	4628      	mov	r0, r5
   854ea:	60da      	str	r2, [r3, #12]
   854ec:	6093      	str	r3, [r2, #8]
   854ee:	f850 2f08 	ldr.w	r2, [r0, #8]!
   854f2:	68eb      	ldr	r3, [r5, #12]
   854f4:	60d3      	str	r3, [r2, #12]
   854f6:	609a      	str	r2, [r3, #8]
   854f8:	1f32      	subs	r2, r6, #4
   854fa:	2a24      	cmp	r2, #36	; 0x24
   854fc:	d823      	bhi.n	85546 <_realloc_r+0x1e6>
   854fe:	2a13      	cmp	r2, #19
   85500:	d91a      	bls.n	85538 <_realloc_r+0x1d8>
   85502:	6823      	ldr	r3, [r4, #0]
   85504:	2a1b      	cmp	r2, #27
   85506:	60ab      	str	r3, [r5, #8]
   85508:	6863      	ldr	r3, [r4, #4]
   8550a:	60eb      	str	r3, [r5, #12]
   8550c:	d803      	bhi.n	85516 <_realloc_r+0x1b6>
   8550e:	f105 0010 	add.w	r0, r5, #16
   85512:	3408      	adds	r4, #8
   85514:	e010      	b.n	85538 <_realloc_r+0x1d8>
   85516:	68a3      	ldr	r3, [r4, #8]
   85518:	2a24      	cmp	r2, #36	; 0x24
   8551a:	612b      	str	r3, [r5, #16]
   8551c:	68e3      	ldr	r3, [r4, #12]
   8551e:	616b      	str	r3, [r5, #20]
   85520:	d003      	beq.n	8552a <_realloc_r+0x1ca>
   85522:	f105 0018 	add.w	r0, r5, #24
   85526:	3410      	adds	r4, #16
   85528:	e006      	b.n	85538 <_realloc_r+0x1d8>
   8552a:	6923      	ldr	r3, [r4, #16]
   8552c:	f105 0020 	add.w	r0, r5, #32
   85530:	61ab      	str	r3, [r5, #24]
   85532:	6963      	ldr	r3, [r4, #20]
   85534:	3418      	adds	r4, #24
   85536:	61eb      	str	r3, [r5, #28]
   85538:	6823      	ldr	r3, [r4, #0]
   8553a:	6003      	str	r3, [r0, #0]
   8553c:	6863      	ldr	r3, [r4, #4]
   8553e:	6043      	str	r3, [r0, #4]
   85540:	68a3      	ldr	r3, [r4, #8]
   85542:	6083      	str	r3, [r0, #8]
   85544:	e002      	b.n	8554c <_realloc_r+0x1ec>
   85546:	4621      	mov	r1, r4
   85548:	f7ff feec 	bl	85324 <memmove>
   8554c:	465e      	mov	r6, fp
   8554e:	e02e      	b.n	855ae <_realloc_r+0x24e>
   85550:	45ba      	cmp	sl, r7
   85552:	db32      	blt.n	855ba <_realloc_r+0x25a>
   85554:	4628      	mov	r0, r5
   85556:	f850 2f08 	ldr.w	r2, [r0, #8]!
   8555a:	68eb      	ldr	r3, [r5, #12]
   8555c:	60d3      	str	r3, [r2, #12]
   8555e:	609a      	str	r2, [r3, #8]
   85560:	1f32      	subs	r2, r6, #4
   85562:	2a24      	cmp	r2, #36	; 0x24
   85564:	d825      	bhi.n	855b2 <_realloc_r+0x252>
   85566:	2a13      	cmp	r2, #19
   85568:	d91a      	bls.n	855a0 <_realloc_r+0x240>
   8556a:	6823      	ldr	r3, [r4, #0]
   8556c:	2a1b      	cmp	r2, #27
   8556e:	60ab      	str	r3, [r5, #8]
   85570:	6863      	ldr	r3, [r4, #4]
   85572:	60eb      	str	r3, [r5, #12]
   85574:	d803      	bhi.n	8557e <_realloc_r+0x21e>
   85576:	f105 0010 	add.w	r0, r5, #16
   8557a:	3408      	adds	r4, #8
   8557c:	e010      	b.n	855a0 <_realloc_r+0x240>
   8557e:	68a3      	ldr	r3, [r4, #8]
   85580:	2a24      	cmp	r2, #36	; 0x24
   85582:	612b      	str	r3, [r5, #16]
   85584:	68e3      	ldr	r3, [r4, #12]
   85586:	616b      	str	r3, [r5, #20]
   85588:	d003      	beq.n	85592 <_realloc_r+0x232>
   8558a:	f105 0018 	add.w	r0, r5, #24
   8558e:	3410      	adds	r4, #16
   85590:	e006      	b.n	855a0 <_realloc_r+0x240>
   85592:	6923      	ldr	r3, [r4, #16]
   85594:	f105 0020 	add.w	r0, r5, #32
   85598:	61ab      	str	r3, [r5, #24]
   8559a:	6963      	ldr	r3, [r4, #20]
   8559c:	3418      	adds	r4, #24
   8559e:	61eb      	str	r3, [r5, #28]
   855a0:	6823      	ldr	r3, [r4, #0]
   855a2:	6003      	str	r3, [r0, #0]
   855a4:	6863      	ldr	r3, [r4, #4]
   855a6:	6043      	str	r3, [r0, #4]
   855a8:	68a3      	ldr	r3, [r4, #8]
   855aa:	6083      	str	r3, [r0, #8]
   855ac:	4656      	mov	r6, sl
   855ae:	46a8      	mov	r8, r5
   855b0:	e054      	b.n	8565c <_realloc_r+0x2fc>
   855b2:	4621      	mov	r1, r4
   855b4:	f7ff feb6 	bl	85324 <memmove>
   855b8:	e7f8      	b.n	855ac <_realloc_r+0x24c>
   855ba:	4648      	mov	r0, r9
   855bc:	4611      	mov	r1, r2
   855be:	f7ff fc9b 	bl	84ef8 <_malloc_r>
   855c2:	4605      	mov	r5, r0
   855c4:	2800      	cmp	r0, #0
   855c6:	d044      	beq.n	85652 <_realloc_r+0x2f2>
   855c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   855cc:	f1a0 0208 	sub.w	r2, r0, #8
   855d0:	f023 0301 	bic.w	r3, r3, #1
   855d4:	4443      	add	r3, r8
   855d6:	429a      	cmp	r2, r3
   855d8:	d105      	bne.n	855e6 <_realloc_r+0x286>
   855da:	f850 3c04 	ldr.w	r3, [r0, #-4]
   855de:	f023 0303 	bic.w	r3, r3, #3
   855e2:	441e      	add	r6, r3
   855e4:	e03a      	b.n	8565c <_realloc_r+0x2fc>
   855e6:	1f32      	subs	r2, r6, #4
   855e8:	2a24      	cmp	r2, #36	; 0x24
   855ea:	d82b      	bhi.n	85644 <_realloc_r+0x2e4>
   855ec:	2a13      	cmp	r2, #19
   855ee:	d91e      	bls.n	8562e <_realloc_r+0x2ce>
   855f0:	6823      	ldr	r3, [r4, #0]
   855f2:	2a1b      	cmp	r2, #27
   855f4:	6003      	str	r3, [r0, #0]
   855f6:	6863      	ldr	r3, [r4, #4]
   855f8:	6043      	str	r3, [r0, #4]
   855fa:	d804      	bhi.n	85606 <_realloc_r+0x2a6>
   855fc:	f100 0308 	add.w	r3, r0, #8
   85600:	f104 0208 	add.w	r2, r4, #8
   85604:	e015      	b.n	85632 <_realloc_r+0x2d2>
   85606:	68a3      	ldr	r3, [r4, #8]
   85608:	2a24      	cmp	r2, #36	; 0x24
   8560a:	6083      	str	r3, [r0, #8]
   8560c:	68e3      	ldr	r3, [r4, #12]
   8560e:	60c3      	str	r3, [r0, #12]
   85610:	d004      	beq.n	8561c <_realloc_r+0x2bc>
   85612:	f100 0310 	add.w	r3, r0, #16
   85616:	f104 0210 	add.w	r2, r4, #16
   8561a:	e00a      	b.n	85632 <_realloc_r+0x2d2>
   8561c:	6923      	ldr	r3, [r4, #16]
   8561e:	f104 0218 	add.w	r2, r4, #24
   85622:	6103      	str	r3, [r0, #16]
   85624:	6961      	ldr	r1, [r4, #20]
   85626:	f100 0318 	add.w	r3, r0, #24
   8562a:	6141      	str	r1, [r0, #20]
   8562c:	e001      	b.n	85632 <_realloc_r+0x2d2>
   8562e:	4603      	mov	r3, r0
   85630:	4622      	mov	r2, r4
   85632:	6811      	ldr	r1, [r2, #0]
   85634:	6019      	str	r1, [r3, #0]
   85636:	6851      	ldr	r1, [r2, #4]
   85638:	6059      	str	r1, [r3, #4]
   8563a:	6892      	ldr	r2, [r2, #8]
   8563c:	609a      	str	r2, [r3, #8]
   8563e:	e004      	b.n	8564a <_realloc_r+0x2ea>
   85640:	2007097c 	.word	0x2007097c
   85644:	4621      	mov	r1, r4
   85646:	f7ff fe6d 	bl	85324 <memmove>
   8564a:	4648      	mov	r0, r9
   8564c:	4621      	mov	r1, r4
   8564e:	f7ff f95f 	bl	84910 <_free_r>
   85652:	4648      	mov	r0, r9
   85654:	f7ff fe82 	bl	8535c <__malloc_unlock>
   85658:	4628      	mov	r0, r5
   8565a:	e027      	b.n	856ac <_realloc_r+0x34c>
   8565c:	1bf3      	subs	r3, r6, r7
   8565e:	2b0f      	cmp	r3, #15
   85660:	f8d8 2004 	ldr.w	r2, [r8, #4]
   85664:	d913      	bls.n	8568e <_realloc_r+0x32e>
   85666:	f002 0201 	and.w	r2, r2, #1
   8566a:	eb08 0107 	add.w	r1, r8, r7
   8566e:	4317      	orrs	r7, r2
   85670:	f043 0201 	orr.w	r2, r3, #1
   85674:	f8c8 7004 	str.w	r7, [r8, #4]
   85678:	440b      	add	r3, r1
   8567a:	604a      	str	r2, [r1, #4]
   8567c:	685a      	ldr	r2, [r3, #4]
   8567e:	4648      	mov	r0, r9
   85680:	f042 0201 	orr.w	r2, r2, #1
   85684:	605a      	str	r2, [r3, #4]
   85686:	3108      	adds	r1, #8
   85688:	f7ff f942 	bl	84910 <_free_r>
   8568c:	e009      	b.n	856a2 <_realloc_r+0x342>
   8568e:	f002 0201 	and.w	r2, r2, #1
   85692:	4332      	orrs	r2, r6
   85694:	f8c8 2004 	str.w	r2, [r8, #4]
   85698:	4446      	add	r6, r8
   8569a:	6873      	ldr	r3, [r6, #4]
   8569c:	f043 0301 	orr.w	r3, r3, #1
   856a0:	6073      	str	r3, [r6, #4]
   856a2:	4648      	mov	r0, r9
   856a4:	f7ff fe5a 	bl	8535c <__malloc_unlock>
   856a8:	f108 0008 	add.w	r0, r8, #8
   856ac:	b003      	add	sp, #12
   856ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   856b2:	bf00      	nop

000856b4 <_sbrk_r>:
   856b4:	b538      	push	{r3, r4, r5, lr}
   856b6:	4c06      	ldr	r4, [pc, #24]	; (856d0 <_sbrk_r+0x1c>)
   856b8:	2300      	movs	r3, #0
   856ba:	4605      	mov	r5, r0
   856bc:	4608      	mov	r0, r1
   856be:	6023      	str	r3, [r4, #0]
   856c0:	f7fd fc22 	bl	82f08 <_sbrk>
   856c4:	1c43      	adds	r3, r0, #1
   856c6:	d102      	bne.n	856ce <_sbrk_r+0x1a>
   856c8:	6823      	ldr	r3, [r4, #0]
   856ca:	b103      	cbz	r3, 856ce <_sbrk_r+0x1a>
   856cc:	602b      	str	r3, [r5, #0]
   856ce:	bd38      	pop	{r3, r4, r5, pc}
   856d0:	200791c8 	.word	0x200791c8

000856d4 <__sread>:
   856d4:	b510      	push	{r4, lr}
   856d6:	460c      	mov	r4, r1
   856d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   856dc:	f000 f93e 	bl	8595c <_read_r>
   856e0:	2800      	cmp	r0, #0
   856e2:	db03      	blt.n	856ec <__sread+0x18>
   856e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   856e6:	4403      	add	r3, r0
   856e8:	6523      	str	r3, [r4, #80]	; 0x50
   856ea:	bd10      	pop	{r4, pc}
   856ec:	89a3      	ldrh	r3, [r4, #12]
   856ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   856f2:	81a3      	strh	r3, [r4, #12]
   856f4:	bd10      	pop	{r4, pc}

000856f6 <__seofread>:
   856f6:	2000      	movs	r0, #0
   856f8:	4770      	bx	lr

000856fa <__swrite>:
   856fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   856fe:	461d      	mov	r5, r3
   85700:	898b      	ldrh	r3, [r1, #12]
   85702:	4607      	mov	r7, r0
   85704:	05db      	lsls	r3, r3, #23
   85706:	460c      	mov	r4, r1
   85708:	4616      	mov	r6, r2
   8570a:	d505      	bpl.n	85718 <__swrite+0x1e>
   8570c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85710:	2200      	movs	r2, #0
   85712:	2302      	movs	r3, #2
   85714:	f000 f910 	bl	85938 <_lseek_r>
   85718:	89a3      	ldrh	r3, [r4, #12]
   8571a:	4638      	mov	r0, r7
   8571c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   85720:	81a3      	strh	r3, [r4, #12]
   85722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85726:	4632      	mov	r2, r6
   85728:	462b      	mov	r3, r5
   8572a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8572e:	f000 b879 	b.w	85824 <_write_r>

00085732 <__sseek>:
   85732:	b510      	push	{r4, lr}
   85734:	460c      	mov	r4, r1
   85736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8573a:	f000 f8fd 	bl	85938 <_lseek_r>
   8573e:	1c43      	adds	r3, r0, #1
   85740:	89a3      	ldrh	r3, [r4, #12]
   85742:	d103      	bne.n	8574c <__sseek+0x1a>
   85744:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   85748:	81a3      	strh	r3, [r4, #12]
   8574a:	bd10      	pop	{r4, pc}
   8574c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   85750:	81a3      	strh	r3, [r4, #12]
   85752:	6520      	str	r0, [r4, #80]	; 0x50
   85754:	bd10      	pop	{r4, pc}

00085756 <__sclose>:
   85756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8575a:	f000 b875 	b.w	85848 <_close_r>

0008575e <strcmp>:
   8575e:	f810 2b01 	ldrb.w	r2, [r0], #1
   85762:	f811 3b01 	ldrb.w	r3, [r1], #1
   85766:	2a01      	cmp	r2, #1
   85768:	bf28      	it	cs
   8576a:	429a      	cmpcs	r2, r3
   8576c:	d0f7      	beq.n	8575e <strcmp>
   8576e:	1ad0      	subs	r0, r2, r3
   85770:	4770      	bx	lr
	...

00085774 <_wcrtomb_r>:
   85774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85778:	461d      	mov	r5, r3
   8577a:	4b10      	ldr	r3, [pc, #64]	; (857bc <_wcrtomb_r+0x48>)
   8577c:	b086      	sub	sp, #24
   8577e:	4604      	mov	r4, r0
   85780:	4690      	mov	r8, r2
   85782:	460e      	mov	r6, r1
   85784:	681f      	ldr	r7, [r3, #0]
   85786:	b939      	cbnz	r1, 85798 <_wcrtomb_r+0x24>
   85788:	f7ff fb20 	bl	84dcc <__locale_charset>
   8578c:	9500      	str	r5, [sp, #0]
   8578e:	4603      	mov	r3, r0
   85790:	a903      	add	r1, sp, #12
   85792:	4620      	mov	r0, r4
   85794:	4632      	mov	r2, r6
   85796:	e006      	b.n	857a6 <_wcrtomb_r+0x32>
   85798:	f7ff fb18 	bl	84dcc <__locale_charset>
   8579c:	9500      	str	r5, [sp, #0]
   8579e:	4603      	mov	r3, r0
   857a0:	4631      	mov	r1, r6
   857a2:	4620      	mov	r0, r4
   857a4:	4642      	mov	r2, r8
   857a6:	47b8      	blx	r7
   857a8:	1c43      	adds	r3, r0, #1
   857aa:	d103      	bne.n	857b4 <_wcrtomb_r+0x40>
   857ac:	2300      	movs	r3, #0
   857ae:	602b      	str	r3, [r5, #0]
   857b0:	238a      	movs	r3, #138	; 0x8a
   857b2:	6023      	str	r3, [r4, #0]
   857b4:	b006      	add	sp, #24
   857b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   857ba:	bf00      	nop
   857bc:	20070d8c 	.word	0x20070d8c

000857c0 <wcrtomb>:
   857c0:	b530      	push	{r4, r5, lr}
   857c2:	4613      	mov	r3, r2
   857c4:	4a04      	ldr	r2, [pc, #16]	; (857d8 <wcrtomb+0x18>)
   857c6:	4605      	mov	r5, r0
   857c8:	460c      	mov	r4, r1
   857ca:	6810      	ldr	r0, [r2, #0]
   857cc:	4629      	mov	r1, r5
   857ce:	4622      	mov	r2, r4
   857d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   857d4:	f7ff bfce 	b.w	85774 <_wcrtomb_r>
   857d8:	200704d0 	.word	0x200704d0

000857dc <__ascii_wctomb>:
   857dc:	b149      	cbz	r1, 857f2 <__ascii_wctomb+0x16>
   857de:	2aff      	cmp	r2, #255	; 0xff
   857e0:	d904      	bls.n	857ec <__ascii_wctomb+0x10>
   857e2:	238a      	movs	r3, #138	; 0x8a
   857e4:	6003      	str	r3, [r0, #0]
   857e6:	f04f 30ff 	mov.w	r0, #4294967295
   857ea:	4770      	bx	lr
   857ec:	700a      	strb	r2, [r1, #0]
   857ee:	2001      	movs	r0, #1
   857f0:	4770      	bx	lr
   857f2:	4608      	mov	r0, r1
   857f4:	4770      	bx	lr

000857f6 <_wctomb_r>:
   857f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   857fa:	4698      	mov	r8, r3
   857fc:	4b08      	ldr	r3, [pc, #32]	; (85820 <_wctomb_r+0x2a>)
   857fe:	4605      	mov	r5, r0
   85800:	681c      	ldr	r4, [r3, #0]
   85802:	460f      	mov	r7, r1
   85804:	4616      	mov	r6, r2
   85806:	f7ff fae1 	bl	84dcc <__locale_charset>
   8580a:	f8cd 8000 	str.w	r8, [sp]
   8580e:	4603      	mov	r3, r0
   85810:	4639      	mov	r1, r7
   85812:	4628      	mov	r0, r5
   85814:	4632      	mov	r2, r6
   85816:	47a0      	blx	r4
   85818:	b002      	add	sp, #8
   8581a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8581e:	bf00      	nop
   85820:	20070d8c 	.word	0x20070d8c

00085824 <_write_r>:
   85824:	b538      	push	{r3, r4, r5, lr}
   85826:	4c07      	ldr	r4, [pc, #28]	; (85844 <_write_r+0x20>)
   85828:	4605      	mov	r5, r0
   8582a:	2000      	movs	r0, #0
   8582c:	6020      	str	r0, [r4, #0]
   8582e:	4608      	mov	r0, r1
   85830:	4611      	mov	r1, r2
   85832:	461a      	mov	r2, r3
   85834:	f7fa fdba 	bl	803ac <_write>
   85838:	1c43      	adds	r3, r0, #1
   8583a:	d102      	bne.n	85842 <_write_r+0x1e>
   8583c:	6823      	ldr	r3, [r4, #0]
   8583e:	b103      	cbz	r3, 85842 <_write_r+0x1e>
   85840:	602b      	str	r3, [r5, #0]
   85842:	bd38      	pop	{r3, r4, r5, pc}
   85844:	200791c8 	.word	0x200791c8

00085848 <_close_r>:
   85848:	b538      	push	{r3, r4, r5, lr}
   8584a:	4c06      	ldr	r4, [pc, #24]	; (85864 <_close_r+0x1c>)
   8584c:	2300      	movs	r3, #0
   8584e:	4605      	mov	r5, r0
   85850:	4608      	mov	r0, r1
   85852:	6023      	str	r3, [r4, #0]
   85854:	f7fd fb72 	bl	82f3c <_close>
   85858:	1c43      	adds	r3, r0, #1
   8585a:	d102      	bne.n	85862 <_close_r+0x1a>
   8585c:	6823      	ldr	r3, [r4, #0]
   8585e:	b103      	cbz	r3, 85862 <_close_r+0x1a>
   85860:	602b      	str	r3, [r5, #0]
   85862:	bd38      	pop	{r3, r4, r5, pc}
   85864:	200791c8 	.word	0x200791c8

00085868 <_fclose_r>:
   85868:	b570      	push	{r4, r5, r6, lr}
   8586a:	4605      	mov	r5, r0
   8586c:	460c      	mov	r4, r1
   8586e:	b909      	cbnz	r1, 85874 <_fclose_r+0xc>
   85870:	2000      	movs	r0, #0
   85872:	bd70      	pop	{r4, r5, r6, pc}
   85874:	b118      	cbz	r0, 8587e <_fclose_r+0x16>
   85876:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85878:	b90b      	cbnz	r3, 8587e <_fclose_r+0x16>
   8587a:	f7fe fec5 	bl	84608 <__sinit>
   8587e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85882:	2b00      	cmp	r3, #0
   85884:	d0f4      	beq.n	85870 <_fclose_r+0x8>
   85886:	4628      	mov	r0, r5
   85888:	4621      	mov	r1, r4
   8588a:	f7fe fe74 	bl	84576 <_fflush_r>
   8588e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   85890:	4606      	mov	r6, r0
   85892:	b133      	cbz	r3, 858a2 <_fclose_r+0x3a>
   85894:	4628      	mov	r0, r5
   85896:	69e1      	ldr	r1, [r4, #28]
   85898:	4798      	blx	r3
   8589a:	2800      	cmp	r0, #0
   8589c:	bfb8      	it	lt
   8589e:	f04f 36ff 	movlt.w	r6, #4294967295
   858a2:	89a3      	ldrh	r3, [r4, #12]
   858a4:	061b      	lsls	r3, r3, #24
   858a6:	d503      	bpl.n	858b0 <_fclose_r+0x48>
   858a8:	4628      	mov	r0, r5
   858aa:	6921      	ldr	r1, [r4, #16]
   858ac:	f7ff f830 	bl	84910 <_free_r>
   858b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   858b2:	b141      	cbz	r1, 858c6 <_fclose_r+0x5e>
   858b4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   858b8:	4299      	cmp	r1, r3
   858ba:	d002      	beq.n	858c2 <_fclose_r+0x5a>
   858bc:	4628      	mov	r0, r5
   858be:	f7ff f827 	bl	84910 <_free_r>
   858c2:	2300      	movs	r3, #0
   858c4:	6323      	str	r3, [r4, #48]	; 0x30
   858c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
   858c8:	b121      	cbz	r1, 858d4 <_fclose_r+0x6c>
   858ca:	4628      	mov	r0, r5
   858cc:	f7ff f820 	bl	84910 <_free_r>
   858d0:	2300      	movs	r3, #0
   858d2:	6463      	str	r3, [r4, #68]	; 0x44
   858d4:	f7fe ff4a 	bl	8476c <__sfp_lock_acquire>
   858d8:	2300      	movs	r3, #0
   858da:	81a3      	strh	r3, [r4, #12]
   858dc:	f7fe ff47 	bl	8476e <__sfp_lock_release>
   858e0:	4630      	mov	r0, r6
   858e2:	bd70      	pop	{r4, r5, r6, pc}

000858e4 <fclose>:
   858e4:	4b02      	ldr	r3, [pc, #8]	; (858f0 <fclose+0xc>)
   858e6:	4601      	mov	r1, r0
   858e8:	6818      	ldr	r0, [r3, #0]
   858ea:	f7ff bfbd 	b.w	85868 <_fclose_r>
   858ee:	bf00      	nop
   858f0:	200704d0 	.word	0x200704d0

000858f4 <_fstat_r>:
   858f4:	b538      	push	{r3, r4, r5, lr}
   858f6:	4c07      	ldr	r4, [pc, #28]	; (85914 <_fstat_r+0x20>)
   858f8:	2300      	movs	r3, #0
   858fa:	4605      	mov	r5, r0
   858fc:	4608      	mov	r0, r1
   858fe:	4611      	mov	r1, r2
   85900:	6023      	str	r3, [r4, #0]
   85902:	f7fd fb1f 	bl	82f44 <_fstat>
   85906:	1c43      	adds	r3, r0, #1
   85908:	d102      	bne.n	85910 <_fstat_r+0x1c>
   8590a:	6823      	ldr	r3, [r4, #0]
   8590c:	b103      	cbz	r3, 85910 <_fstat_r+0x1c>
   8590e:	602b      	str	r3, [r5, #0]
   85910:	bd38      	pop	{r3, r4, r5, pc}
   85912:	bf00      	nop
   85914:	200791c8 	.word	0x200791c8

00085918 <_isatty_r>:
   85918:	b538      	push	{r3, r4, r5, lr}
   8591a:	4c06      	ldr	r4, [pc, #24]	; (85934 <_isatty_r+0x1c>)
   8591c:	2300      	movs	r3, #0
   8591e:	4605      	mov	r5, r0
   85920:	4608      	mov	r0, r1
   85922:	6023      	str	r3, [r4, #0]
   85924:	f7fd fb14 	bl	82f50 <_isatty>
   85928:	1c43      	adds	r3, r0, #1
   8592a:	d102      	bne.n	85932 <_isatty_r+0x1a>
   8592c:	6823      	ldr	r3, [r4, #0]
   8592e:	b103      	cbz	r3, 85932 <_isatty_r+0x1a>
   85930:	602b      	str	r3, [r5, #0]
   85932:	bd38      	pop	{r3, r4, r5, pc}
   85934:	200791c8 	.word	0x200791c8

00085938 <_lseek_r>:
   85938:	b538      	push	{r3, r4, r5, lr}
   8593a:	4c07      	ldr	r4, [pc, #28]	; (85958 <_lseek_r+0x20>)
   8593c:	4605      	mov	r5, r0
   8593e:	2000      	movs	r0, #0
   85940:	6020      	str	r0, [r4, #0]
   85942:	4608      	mov	r0, r1
   85944:	4611      	mov	r1, r2
   85946:	461a      	mov	r2, r3
   85948:	f7fd fb04 	bl	82f54 <_lseek>
   8594c:	1c43      	adds	r3, r0, #1
   8594e:	d102      	bne.n	85956 <_lseek_r+0x1e>
   85950:	6823      	ldr	r3, [r4, #0]
   85952:	b103      	cbz	r3, 85956 <_lseek_r+0x1e>
   85954:	602b      	str	r3, [r5, #0]
   85956:	bd38      	pop	{r3, r4, r5, pc}
   85958:	200791c8 	.word	0x200791c8

0008595c <_read_r>:
   8595c:	b538      	push	{r3, r4, r5, lr}
   8595e:	4c07      	ldr	r4, [pc, #28]	; (8597c <_read_r+0x20>)
   85960:	4605      	mov	r5, r0
   85962:	2000      	movs	r0, #0
   85964:	6020      	str	r0, [r4, #0]
   85966:	4608      	mov	r0, r1
   85968:	4611      	mov	r1, r2
   8596a:	461a      	mov	r2, r3
   8596c:	f7fa fcfe 	bl	8036c <_read>
   85970:	1c43      	adds	r3, r0, #1
   85972:	d102      	bne.n	8597a <_read_r+0x1e>
   85974:	6823      	ldr	r3, [r4, #0]
   85976:	b103      	cbz	r3, 8597a <_read_r+0x1e>
   85978:	602b      	str	r3, [r5, #0]
   8597a:	bd38      	pop	{r3, r4, r5, pc}
   8597c:	200791c8 	.word	0x200791c8

00085980 <__aeabi_uldivmod>:
   85980:	b94b      	cbnz	r3, 85996 <__aeabi_uldivmod+0x16>
   85982:	b942      	cbnz	r2, 85996 <__aeabi_uldivmod+0x16>
   85984:	2900      	cmp	r1, #0
   85986:	bf08      	it	eq
   85988:	2800      	cmpeq	r0, #0
   8598a:	d002      	beq.n	85992 <__aeabi_uldivmod+0x12>
   8598c:	f04f 31ff 	mov.w	r1, #4294967295
   85990:	4608      	mov	r0, r1
   85992:	f000 b83b 	b.w	85a0c <__aeabi_idiv0>
   85996:	b082      	sub	sp, #8
   85998:	46ec      	mov	ip, sp
   8599a:	e92d 5000 	stmdb	sp!, {ip, lr}
   8599e:	f000 f81d 	bl	859dc <__gnu_uldivmod_helper>
   859a2:	f8dd e004 	ldr.w	lr, [sp, #4]
   859a6:	b002      	add	sp, #8
   859a8:	bc0c      	pop	{r2, r3}
   859aa:	4770      	bx	lr

000859ac <__gnu_ldivmod_helper>:
   859ac:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   859b0:	9e08      	ldr	r6, [sp, #32]
   859b2:	4614      	mov	r4, r2
   859b4:	461d      	mov	r5, r3
   859b6:	4680      	mov	r8, r0
   859b8:	4689      	mov	r9, r1
   859ba:	f000 f829 	bl	85a10 <__divdi3>
   859be:	fb04 f301 	mul.w	r3, r4, r1
   859c2:	fba4 ab00 	umull	sl, fp, r4, r0
   859c6:	fb00 3205 	mla	r2, r0, r5, r3
   859ca:	4493      	add	fp, r2
   859cc:	ebb8 080a 	subs.w	r8, r8, sl
   859d0:	eb69 090b 	sbc.w	r9, r9, fp
   859d4:	e9c6 8900 	strd	r8, r9, [r6]
   859d8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000859dc <__gnu_uldivmod_helper>:
   859dc:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   859e0:	9e08      	ldr	r6, [sp, #32]
   859e2:	4614      	mov	r4, r2
   859e4:	461d      	mov	r5, r3
   859e6:	4680      	mov	r8, r0
   859e8:	4689      	mov	r9, r1
   859ea:	f000 f961 	bl	85cb0 <__udivdi3>
   859ee:	fb00 f505 	mul.w	r5, r0, r5
   859f2:	fba0 ab04 	umull	sl, fp, r0, r4
   859f6:	fb04 5401 	mla	r4, r4, r1, r5
   859fa:	44a3      	add	fp, r4
   859fc:	ebb8 080a 	subs.w	r8, r8, sl
   85a00:	eb69 090b 	sbc.w	r9, r9, fp
   85a04:	e9c6 8900 	strd	r8, r9, [r6]
   85a08:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00085a0c <__aeabi_idiv0>:
   85a0c:	4770      	bx	lr
   85a0e:	bf00      	nop

00085a10 <__divdi3>:
   85a10:	2900      	cmp	r1, #0
   85a12:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85a16:	f2c0 80a1 	blt.w	85b5c <__divdi3+0x14c>
   85a1a:	2400      	movs	r4, #0
   85a1c:	2b00      	cmp	r3, #0
   85a1e:	f2c0 8098 	blt.w	85b52 <__divdi3+0x142>
   85a22:	4615      	mov	r5, r2
   85a24:	4606      	mov	r6, r0
   85a26:	460f      	mov	r7, r1
   85a28:	2b00      	cmp	r3, #0
   85a2a:	d13f      	bne.n	85aac <__divdi3+0x9c>
   85a2c:	428a      	cmp	r2, r1
   85a2e:	d958      	bls.n	85ae2 <__divdi3+0xd2>
   85a30:	fab2 f382 	clz	r3, r2
   85a34:	b14b      	cbz	r3, 85a4a <__divdi3+0x3a>
   85a36:	f1c3 0220 	rsb	r2, r3, #32
   85a3a:	fa01 f703 	lsl.w	r7, r1, r3
   85a3e:	fa20 f202 	lsr.w	r2, r0, r2
   85a42:	409d      	lsls	r5, r3
   85a44:	fa00 f603 	lsl.w	r6, r0, r3
   85a48:	4317      	orrs	r7, r2
   85a4a:	0c29      	lsrs	r1, r5, #16
   85a4c:	fbb7 f2f1 	udiv	r2, r7, r1
   85a50:	fb01 7712 	mls	r7, r1, r2, r7
   85a54:	b2a8      	uxth	r0, r5
   85a56:	fb00 f302 	mul.w	r3, r0, r2
   85a5a:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   85a5e:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   85a62:	42bb      	cmp	r3, r7
   85a64:	d909      	bls.n	85a7a <__divdi3+0x6a>
   85a66:	197f      	adds	r7, r7, r5
   85a68:	f102 3cff 	add.w	ip, r2, #4294967295
   85a6c:	f080 8105 	bcs.w	85c7a <__divdi3+0x26a>
   85a70:	42bb      	cmp	r3, r7
   85a72:	f240 8102 	bls.w	85c7a <__divdi3+0x26a>
   85a76:	3a02      	subs	r2, #2
   85a78:	442f      	add	r7, r5
   85a7a:	1aff      	subs	r7, r7, r3
   85a7c:	fbb7 f3f1 	udiv	r3, r7, r1
   85a80:	fb01 7113 	mls	r1, r1, r3, r7
   85a84:	fb00 f003 	mul.w	r0, r0, r3
   85a88:	b2b6      	uxth	r6, r6
   85a8a:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   85a8e:	4288      	cmp	r0, r1
   85a90:	d908      	bls.n	85aa4 <__divdi3+0x94>
   85a92:	1949      	adds	r1, r1, r5
   85a94:	f103 37ff 	add.w	r7, r3, #4294967295
   85a98:	f080 80f1 	bcs.w	85c7e <__divdi3+0x26e>
   85a9c:	4288      	cmp	r0, r1
   85a9e:	f240 80ee 	bls.w	85c7e <__divdi3+0x26e>
   85aa2:	3b02      	subs	r3, #2
   85aa4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   85aa8:	2300      	movs	r3, #0
   85aaa:	e003      	b.n	85ab4 <__divdi3+0xa4>
   85aac:	428b      	cmp	r3, r1
   85aae:	d90a      	bls.n	85ac6 <__divdi3+0xb6>
   85ab0:	2300      	movs	r3, #0
   85ab2:	461a      	mov	r2, r3
   85ab4:	4610      	mov	r0, r2
   85ab6:	4619      	mov	r1, r3
   85ab8:	b114      	cbz	r4, 85ac0 <__divdi3+0xb0>
   85aba:	4240      	negs	r0, r0
   85abc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85ac0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85ac4:	4770      	bx	lr
   85ac6:	fab3 f883 	clz	r8, r3
   85aca:	f1b8 0f00 	cmp.w	r8, #0
   85ace:	f040 8088 	bne.w	85be2 <__divdi3+0x1d2>
   85ad2:	428b      	cmp	r3, r1
   85ad4:	d302      	bcc.n	85adc <__divdi3+0xcc>
   85ad6:	4282      	cmp	r2, r0
   85ad8:	f200 80e2 	bhi.w	85ca0 <__divdi3+0x290>
   85adc:	2300      	movs	r3, #0
   85ade:	2201      	movs	r2, #1
   85ae0:	e7e8      	b.n	85ab4 <__divdi3+0xa4>
   85ae2:	b912      	cbnz	r2, 85aea <__divdi3+0xda>
   85ae4:	2301      	movs	r3, #1
   85ae6:	fbb3 f5f2 	udiv	r5, r3, r2
   85aea:	fab5 f285 	clz	r2, r5
   85aee:	2a00      	cmp	r2, #0
   85af0:	d13a      	bne.n	85b68 <__divdi3+0x158>
   85af2:	1b7f      	subs	r7, r7, r5
   85af4:	0c28      	lsrs	r0, r5, #16
   85af6:	fa1f fc85 	uxth.w	ip, r5
   85afa:	2301      	movs	r3, #1
   85afc:	fbb7 f1f0 	udiv	r1, r7, r0
   85b00:	fb00 7711 	mls	r7, r0, r1, r7
   85b04:	fb0c f201 	mul.w	r2, ip, r1
   85b08:	ea4f 4816 	mov.w	r8, r6, lsr #16
   85b0c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   85b10:	42ba      	cmp	r2, r7
   85b12:	d907      	bls.n	85b24 <__divdi3+0x114>
   85b14:	197f      	adds	r7, r7, r5
   85b16:	f101 38ff 	add.w	r8, r1, #4294967295
   85b1a:	d202      	bcs.n	85b22 <__divdi3+0x112>
   85b1c:	42ba      	cmp	r2, r7
   85b1e:	f200 80c4 	bhi.w	85caa <__divdi3+0x29a>
   85b22:	4641      	mov	r1, r8
   85b24:	1abf      	subs	r7, r7, r2
   85b26:	fbb7 f2f0 	udiv	r2, r7, r0
   85b2a:	fb00 7012 	mls	r0, r0, r2, r7
   85b2e:	fb0c fc02 	mul.w	ip, ip, r2
   85b32:	b2b6      	uxth	r6, r6
   85b34:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   85b38:	4584      	cmp	ip, r0
   85b3a:	d907      	bls.n	85b4c <__divdi3+0x13c>
   85b3c:	1940      	adds	r0, r0, r5
   85b3e:	f102 37ff 	add.w	r7, r2, #4294967295
   85b42:	d202      	bcs.n	85b4a <__divdi3+0x13a>
   85b44:	4584      	cmp	ip, r0
   85b46:	f200 80ae 	bhi.w	85ca6 <__divdi3+0x296>
   85b4a:	463a      	mov	r2, r7
   85b4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   85b50:	e7b0      	b.n	85ab4 <__divdi3+0xa4>
   85b52:	43e4      	mvns	r4, r4
   85b54:	4252      	negs	r2, r2
   85b56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   85b5a:	e762      	b.n	85a22 <__divdi3+0x12>
   85b5c:	4240      	negs	r0, r0
   85b5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85b62:	f04f 34ff 	mov.w	r4, #4294967295
   85b66:	e759      	b.n	85a1c <__divdi3+0xc>
   85b68:	4095      	lsls	r5, r2
   85b6a:	f1c2 0920 	rsb	r9, r2, #32
   85b6e:	fa27 f109 	lsr.w	r1, r7, r9
   85b72:	fa26 f909 	lsr.w	r9, r6, r9
   85b76:	4097      	lsls	r7, r2
   85b78:	0c28      	lsrs	r0, r5, #16
   85b7a:	fbb1 f8f0 	udiv	r8, r1, r0
   85b7e:	fb00 1118 	mls	r1, r0, r8, r1
   85b82:	fa1f fc85 	uxth.w	ip, r5
   85b86:	fb0c f308 	mul.w	r3, ip, r8
   85b8a:	ea49 0907 	orr.w	r9, r9, r7
   85b8e:	ea4f 4719 	mov.w	r7, r9, lsr #16
   85b92:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   85b96:	428b      	cmp	r3, r1
   85b98:	fa06 f602 	lsl.w	r6, r6, r2
   85b9c:	d908      	bls.n	85bb0 <__divdi3+0x1a0>
   85b9e:	1949      	adds	r1, r1, r5
   85ba0:	f108 32ff 	add.w	r2, r8, #4294967295
   85ba4:	d27a      	bcs.n	85c9c <__divdi3+0x28c>
   85ba6:	428b      	cmp	r3, r1
   85ba8:	d978      	bls.n	85c9c <__divdi3+0x28c>
   85baa:	f1a8 0802 	sub.w	r8, r8, #2
   85bae:	4429      	add	r1, r5
   85bb0:	1ac9      	subs	r1, r1, r3
   85bb2:	fbb1 f3f0 	udiv	r3, r1, r0
   85bb6:	fb00 1713 	mls	r7, r0, r3, r1
   85bba:	fb0c f203 	mul.w	r2, ip, r3
   85bbe:	fa1f f989 	uxth.w	r9, r9
   85bc2:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   85bc6:	42ba      	cmp	r2, r7
   85bc8:	d907      	bls.n	85bda <__divdi3+0x1ca>
   85bca:	197f      	adds	r7, r7, r5
   85bcc:	f103 31ff 	add.w	r1, r3, #4294967295
   85bd0:	d260      	bcs.n	85c94 <__divdi3+0x284>
   85bd2:	42ba      	cmp	r2, r7
   85bd4:	d95e      	bls.n	85c94 <__divdi3+0x284>
   85bd6:	3b02      	subs	r3, #2
   85bd8:	442f      	add	r7, r5
   85bda:	1abf      	subs	r7, r7, r2
   85bdc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   85be0:	e78c      	b.n	85afc <__divdi3+0xec>
   85be2:	f1c8 0220 	rsb	r2, r8, #32
   85be6:	fa25 f102 	lsr.w	r1, r5, r2
   85bea:	fa03 fc08 	lsl.w	ip, r3, r8
   85bee:	fa27 f302 	lsr.w	r3, r7, r2
   85bf2:	fa20 f202 	lsr.w	r2, r0, r2
   85bf6:	fa07 f708 	lsl.w	r7, r7, r8
   85bfa:	ea41 0c0c 	orr.w	ip, r1, ip
   85bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
   85c02:	fbb3 f1f9 	udiv	r1, r3, r9
   85c06:	fb09 3311 	mls	r3, r9, r1, r3
   85c0a:	fa1f fa8c 	uxth.w	sl, ip
   85c0e:	fb0a fb01 	mul.w	fp, sl, r1
   85c12:	4317      	orrs	r7, r2
   85c14:	0c3a      	lsrs	r2, r7, #16
   85c16:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   85c1a:	459b      	cmp	fp, r3
   85c1c:	fa05 f008 	lsl.w	r0, r5, r8
   85c20:	d908      	bls.n	85c34 <__divdi3+0x224>
   85c22:	eb13 030c 	adds.w	r3, r3, ip
   85c26:	f101 32ff 	add.w	r2, r1, #4294967295
   85c2a:	d235      	bcs.n	85c98 <__divdi3+0x288>
   85c2c:	459b      	cmp	fp, r3
   85c2e:	d933      	bls.n	85c98 <__divdi3+0x288>
   85c30:	3902      	subs	r1, #2
   85c32:	4463      	add	r3, ip
   85c34:	ebcb 0303 	rsb	r3, fp, r3
   85c38:	fbb3 f2f9 	udiv	r2, r3, r9
   85c3c:	fb09 3312 	mls	r3, r9, r2, r3
   85c40:	fb0a fa02 	mul.w	sl, sl, r2
   85c44:	b2bf      	uxth	r7, r7
   85c46:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   85c4a:	45ba      	cmp	sl, r7
   85c4c:	d908      	bls.n	85c60 <__divdi3+0x250>
   85c4e:	eb17 070c 	adds.w	r7, r7, ip
   85c52:	f102 33ff 	add.w	r3, r2, #4294967295
   85c56:	d21b      	bcs.n	85c90 <__divdi3+0x280>
   85c58:	45ba      	cmp	sl, r7
   85c5a:	d919      	bls.n	85c90 <__divdi3+0x280>
   85c5c:	3a02      	subs	r2, #2
   85c5e:	4467      	add	r7, ip
   85c60:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   85c64:	fba5 0100 	umull	r0, r1, r5, r0
   85c68:	ebca 0707 	rsb	r7, sl, r7
   85c6c:	428f      	cmp	r7, r1
   85c6e:	f04f 0300 	mov.w	r3, #0
   85c72:	d30a      	bcc.n	85c8a <__divdi3+0x27a>
   85c74:	d005      	beq.n	85c82 <__divdi3+0x272>
   85c76:	462a      	mov	r2, r5
   85c78:	e71c      	b.n	85ab4 <__divdi3+0xa4>
   85c7a:	4662      	mov	r2, ip
   85c7c:	e6fd      	b.n	85a7a <__divdi3+0x6a>
   85c7e:	463b      	mov	r3, r7
   85c80:	e710      	b.n	85aa4 <__divdi3+0x94>
   85c82:	fa06 f608 	lsl.w	r6, r6, r8
   85c86:	4286      	cmp	r6, r0
   85c88:	d2f5      	bcs.n	85c76 <__divdi3+0x266>
   85c8a:	1e6a      	subs	r2, r5, #1
   85c8c:	2300      	movs	r3, #0
   85c8e:	e711      	b.n	85ab4 <__divdi3+0xa4>
   85c90:	461a      	mov	r2, r3
   85c92:	e7e5      	b.n	85c60 <__divdi3+0x250>
   85c94:	460b      	mov	r3, r1
   85c96:	e7a0      	b.n	85bda <__divdi3+0x1ca>
   85c98:	4611      	mov	r1, r2
   85c9a:	e7cb      	b.n	85c34 <__divdi3+0x224>
   85c9c:	4690      	mov	r8, r2
   85c9e:	e787      	b.n	85bb0 <__divdi3+0x1a0>
   85ca0:	4643      	mov	r3, r8
   85ca2:	4642      	mov	r2, r8
   85ca4:	e706      	b.n	85ab4 <__divdi3+0xa4>
   85ca6:	3a02      	subs	r2, #2
   85ca8:	e750      	b.n	85b4c <__divdi3+0x13c>
   85caa:	3902      	subs	r1, #2
   85cac:	442f      	add	r7, r5
   85cae:	e739      	b.n	85b24 <__divdi3+0x114>

00085cb0 <__udivdi3>:
   85cb0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85cb4:	4614      	mov	r4, r2
   85cb6:	4605      	mov	r5, r0
   85cb8:	460e      	mov	r6, r1
   85cba:	2b00      	cmp	r3, #0
   85cbc:	d143      	bne.n	85d46 <__udivdi3+0x96>
   85cbe:	428a      	cmp	r2, r1
   85cc0:	d953      	bls.n	85d6a <__udivdi3+0xba>
   85cc2:	fab2 f782 	clz	r7, r2
   85cc6:	b157      	cbz	r7, 85cde <__udivdi3+0x2e>
   85cc8:	f1c7 0620 	rsb	r6, r7, #32
   85ccc:	fa20 f606 	lsr.w	r6, r0, r6
   85cd0:	fa01 f307 	lsl.w	r3, r1, r7
   85cd4:	fa02 f407 	lsl.w	r4, r2, r7
   85cd8:	fa00 f507 	lsl.w	r5, r0, r7
   85cdc:	431e      	orrs	r6, r3
   85cde:	0c21      	lsrs	r1, r4, #16
   85ce0:	fbb6 f2f1 	udiv	r2, r6, r1
   85ce4:	fb01 6612 	mls	r6, r1, r2, r6
   85ce8:	b2a0      	uxth	r0, r4
   85cea:	fb00 f302 	mul.w	r3, r0, r2
   85cee:	0c2f      	lsrs	r7, r5, #16
   85cf0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   85cf4:	42b3      	cmp	r3, r6
   85cf6:	d909      	bls.n	85d0c <__udivdi3+0x5c>
   85cf8:	1936      	adds	r6, r6, r4
   85cfa:	f102 37ff 	add.w	r7, r2, #4294967295
   85cfe:	f080 80fd 	bcs.w	85efc <__udivdi3+0x24c>
   85d02:	42b3      	cmp	r3, r6
   85d04:	f240 80fa 	bls.w	85efc <__udivdi3+0x24c>
   85d08:	3a02      	subs	r2, #2
   85d0a:	4426      	add	r6, r4
   85d0c:	1af6      	subs	r6, r6, r3
   85d0e:	fbb6 f3f1 	udiv	r3, r6, r1
   85d12:	fb01 6113 	mls	r1, r1, r3, r6
   85d16:	fb00 f003 	mul.w	r0, r0, r3
   85d1a:	b2ad      	uxth	r5, r5
   85d1c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   85d20:	4288      	cmp	r0, r1
   85d22:	d908      	bls.n	85d36 <__udivdi3+0x86>
   85d24:	1909      	adds	r1, r1, r4
   85d26:	f103 36ff 	add.w	r6, r3, #4294967295
   85d2a:	f080 80e9 	bcs.w	85f00 <__udivdi3+0x250>
   85d2e:	4288      	cmp	r0, r1
   85d30:	f240 80e6 	bls.w	85f00 <__udivdi3+0x250>
   85d34:	3b02      	subs	r3, #2
   85d36:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   85d3a:	2300      	movs	r3, #0
   85d3c:	4610      	mov	r0, r2
   85d3e:	4619      	mov	r1, r3
   85d40:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85d44:	4770      	bx	lr
   85d46:	428b      	cmp	r3, r1
   85d48:	d84c      	bhi.n	85de4 <__udivdi3+0x134>
   85d4a:	fab3 f683 	clz	r6, r3
   85d4e:	2e00      	cmp	r6, #0
   85d50:	d14f      	bne.n	85df2 <__udivdi3+0x142>
   85d52:	428b      	cmp	r3, r1
   85d54:	d302      	bcc.n	85d5c <__udivdi3+0xac>
   85d56:	4282      	cmp	r2, r0
   85d58:	f200 80dd 	bhi.w	85f16 <__udivdi3+0x266>
   85d5c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85d60:	2300      	movs	r3, #0
   85d62:	2201      	movs	r2, #1
   85d64:	4610      	mov	r0, r2
   85d66:	4619      	mov	r1, r3
   85d68:	4770      	bx	lr
   85d6a:	b912      	cbnz	r2, 85d72 <__udivdi3+0xc2>
   85d6c:	2401      	movs	r4, #1
   85d6e:	fbb4 f4f2 	udiv	r4, r4, r2
   85d72:	fab4 f284 	clz	r2, r4
   85d76:	2a00      	cmp	r2, #0
   85d78:	f040 8082 	bne.w	85e80 <__udivdi3+0x1d0>
   85d7c:	1b09      	subs	r1, r1, r4
   85d7e:	0c26      	lsrs	r6, r4, #16
   85d80:	b2a7      	uxth	r7, r4
   85d82:	2301      	movs	r3, #1
   85d84:	fbb1 f0f6 	udiv	r0, r1, r6
   85d88:	fb06 1110 	mls	r1, r6, r0, r1
   85d8c:	fb07 f200 	mul.w	r2, r7, r0
   85d90:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   85d94:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   85d98:	428a      	cmp	r2, r1
   85d9a:	d907      	bls.n	85dac <__udivdi3+0xfc>
   85d9c:	1909      	adds	r1, r1, r4
   85d9e:	f100 3cff 	add.w	ip, r0, #4294967295
   85da2:	d202      	bcs.n	85daa <__udivdi3+0xfa>
   85da4:	428a      	cmp	r2, r1
   85da6:	f200 80c8 	bhi.w	85f3a <__udivdi3+0x28a>
   85daa:	4660      	mov	r0, ip
   85dac:	1a89      	subs	r1, r1, r2
   85dae:	fbb1 f2f6 	udiv	r2, r1, r6
   85db2:	fb06 1112 	mls	r1, r6, r2, r1
   85db6:	fb07 f702 	mul.w	r7, r7, r2
   85dba:	b2ad      	uxth	r5, r5
   85dbc:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   85dc0:	42af      	cmp	r7, r5
   85dc2:	d908      	bls.n	85dd6 <__udivdi3+0x126>
   85dc4:	192c      	adds	r4, r5, r4
   85dc6:	f102 31ff 	add.w	r1, r2, #4294967295
   85dca:	f080 809b 	bcs.w	85f04 <__udivdi3+0x254>
   85dce:	42a7      	cmp	r7, r4
   85dd0:	f240 8098 	bls.w	85f04 <__udivdi3+0x254>
   85dd4:	3a02      	subs	r2, #2
   85dd6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   85dda:	4610      	mov	r0, r2
   85ddc:	4619      	mov	r1, r3
   85dde:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85de2:	4770      	bx	lr
   85de4:	2300      	movs	r3, #0
   85de6:	461a      	mov	r2, r3
   85de8:	4610      	mov	r0, r2
   85dea:	4619      	mov	r1, r3
   85dec:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85df0:	4770      	bx	lr
   85df2:	f1c6 0520 	rsb	r5, r6, #32
   85df6:	fa22 f705 	lsr.w	r7, r2, r5
   85dfa:	fa03 f406 	lsl.w	r4, r3, r6
   85dfe:	fa21 f305 	lsr.w	r3, r1, r5
   85e02:	fa01 fb06 	lsl.w	fp, r1, r6
   85e06:	fa20 f505 	lsr.w	r5, r0, r5
   85e0a:	433c      	orrs	r4, r7
   85e0c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   85e10:	fbb3 fcf8 	udiv	ip, r3, r8
   85e14:	fb08 331c 	mls	r3, r8, ip, r3
   85e18:	fa1f f984 	uxth.w	r9, r4
   85e1c:	fb09 fa0c 	mul.w	sl, r9, ip
   85e20:	ea45 0b0b 	orr.w	fp, r5, fp
   85e24:	ea4f 451b 	mov.w	r5, fp, lsr #16
   85e28:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   85e2c:	459a      	cmp	sl, r3
   85e2e:	fa02 f206 	lsl.w	r2, r2, r6
   85e32:	d904      	bls.n	85e3e <__udivdi3+0x18e>
   85e34:	191b      	adds	r3, r3, r4
   85e36:	f10c 35ff 	add.w	r5, ip, #4294967295
   85e3a:	d36f      	bcc.n	85f1c <__udivdi3+0x26c>
   85e3c:	46ac      	mov	ip, r5
   85e3e:	ebca 0303 	rsb	r3, sl, r3
   85e42:	fbb3 f5f8 	udiv	r5, r3, r8
   85e46:	fb08 3315 	mls	r3, r8, r5, r3
   85e4a:	fb09 f905 	mul.w	r9, r9, r5
   85e4e:	fa1f fb8b 	uxth.w	fp, fp
   85e52:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   85e56:	45b9      	cmp	r9, r7
   85e58:	d904      	bls.n	85e64 <__udivdi3+0x1b4>
   85e5a:	193f      	adds	r7, r7, r4
   85e5c:	f105 33ff 	add.w	r3, r5, #4294967295
   85e60:	d362      	bcc.n	85f28 <__udivdi3+0x278>
   85e62:	461d      	mov	r5, r3
   85e64:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   85e68:	fbac 2302 	umull	r2, r3, ip, r2
   85e6c:	ebc9 0707 	rsb	r7, r9, r7
   85e70:	429f      	cmp	r7, r3
   85e72:	f04f 0500 	mov.w	r5, #0
   85e76:	d34a      	bcc.n	85f0e <__udivdi3+0x25e>
   85e78:	d046      	beq.n	85f08 <__udivdi3+0x258>
   85e7a:	4662      	mov	r2, ip
   85e7c:	462b      	mov	r3, r5
   85e7e:	e75d      	b.n	85d3c <__udivdi3+0x8c>
   85e80:	4094      	lsls	r4, r2
   85e82:	f1c2 0920 	rsb	r9, r2, #32
   85e86:	fa21 fc09 	lsr.w	ip, r1, r9
   85e8a:	4091      	lsls	r1, r2
   85e8c:	fa20 f909 	lsr.w	r9, r0, r9
   85e90:	0c26      	lsrs	r6, r4, #16
   85e92:	fbbc f8f6 	udiv	r8, ip, r6
   85e96:	fb06 cc18 	mls	ip, r6, r8, ip
   85e9a:	b2a7      	uxth	r7, r4
   85e9c:	fb07 f308 	mul.w	r3, r7, r8
   85ea0:	ea49 0901 	orr.w	r9, r9, r1
   85ea4:	ea4f 4119 	mov.w	r1, r9, lsr #16
   85ea8:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   85eac:	4563      	cmp	r3, ip
   85eae:	fa00 f502 	lsl.w	r5, r0, r2
   85eb2:	d909      	bls.n	85ec8 <__udivdi3+0x218>
   85eb4:	eb1c 0c04 	adds.w	ip, ip, r4
   85eb8:	f108 32ff 	add.w	r2, r8, #4294967295
   85ebc:	d23b      	bcs.n	85f36 <__udivdi3+0x286>
   85ebe:	4563      	cmp	r3, ip
   85ec0:	d939      	bls.n	85f36 <__udivdi3+0x286>
   85ec2:	f1a8 0802 	sub.w	r8, r8, #2
   85ec6:	44a4      	add	ip, r4
   85ec8:	ebc3 0c0c 	rsb	ip, r3, ip
   85ecc:	fbbc f3f6 	udiv	r3, ip, r6
   85ed0:	fb06 c113 	mls	r1, r6, r3, ip
   85ed4:	fb07 f203 	mul.w	r2, r7, r3
   85ed8:	fa1f f989 	uxth.w	r9, r9
   85edc:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   85ee0:	428a      	cmp	r2, r1
   85ee2:	d907      	bls.n	85ef4 <__udivdi3+0x244>
   85ee4:	1909      	adds	r1, r1, r4
   85ee6:	f103 30ff 	add.w	r0, r3, #4294967295
   85eea:	d222      	bcs.n	85f32 <__udivdi3+0x282>
   85eec:	428a      	cmp	r2, r1
   85eee:	d920      	bls.n	85f32 <__udivdi3+0x282>
   85ef0:	3b02      	subs	r3, #2
   85ef2:	4421      	add	r1, r4
   85ef4:	1a89      	subs	r1, r1, r2
   85ef6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   85efa:	e743      	b.n	85d84 <__udivdi3+0xd4>
   85efc:	463a      	mov	r2, r7
   85efe:	e705      	b.n	85d0c <__udivdi3+0x5c>
   85f00:	4633      	mov	r3, r6
   85f02:	e718      	b.n	85d36 <__udivdi3+0x86>
   85f04:	460a      	mov	r2, r1
   85f06:	e766      	b.n	85dd6 <__udivdi3+0x126>
   85f08:	40b0      	lsls	r0, r6
   85f0a:	4290      	cmp	r0, r2
   85f0c:	d2b5      	bcs.n	85e7a <__udivdi3+0x1ca>
   85f0e:	f10c 32ff 	add.w	r2, ip, #4294967295
   85f12:	2300      	movs	r3, #0
   85f14:	e712      	b.n	85d3c <__udivdi3+0x8c>
   85f16:	4633      	mov	r3, r6
   85f18:	4632      	mov	r2, r6
   85f1a:	e70f      	b.n	85d3c <__udivdi3+0x8c>
   85f1c:	459a      	cmp	sl, r3
   85f1e:	d98d      	bls.n	85e3c <__udivdi3+0x18c>
   85f20:	f1ac 0c02 	sub.w	ip, ip, #2
   85f24:	4423      	add	r3, r4
   85f26:	e78a      	b.n	85e3e <__udivdi3+0x18e>
   85f28:	45b9      	cmp	r9, r7
   85f2a:	d99a      	bls.n	85e62 <__udivdi3+0x1b2>
   85f2c:	3d02      	subs	r5, #2
   85f2e:	4427      	add	r7, r4
   85f30:	e798      	b.n	85e64 <__udivdi3+0x1b4>
   85f32:	4603      	mov	r3, r0
   85f34:	e7de      	b.n	85ef4 <__udivdi3+0x244>
   85f36:	4690      	mov	r8, r2
   85f38:	e7c6      	b.n	85ec8 <__udivdi3+0x218>
   85f3a:	3802      	subs	r0, #2
   85f3c:	4421      	add	r1, r4
   85f3e:	e735      	b.n	85dac <__udivdi3+0xfc>
   85f40:	6e6f7246 	.word	0x6e6f7246
   85f44:	6f632074 	.word	0x6f632074
   85f48:	6f72746e 	.word	0x6f72746e
   85f4c:	72656c6c 	.word	0x72656c6c
   85f50:	00000000 	.word	0x00000000
   85f54:	6c756f43 	.word	0x6c756f43
   85f58:	6f6e2064 	.word	0x6f6e2064
   85f5c:	72632074 	.word	0x72632074
   85f60:	65746165 	.word	0x65746165
   85f64:	73617420 	.word	0x73617420
   85f68:	7246206b 	.word	0x7246206b
   85f6c:	20746e6f 	.word	0x20746e6f
   85f70:	746e6f63 	.word	0x746e6f63
   85f74:	6c6c6f72 	.word	0x6c6c6f72
   85f78:	00007265 	.word	0x00007265
   85f7c:	6b636142 	.word	0x6b636142
   85f80:	6e6f6320 	.word	0x6e6f6320
   85f84:	6c6f7274 	.word	0x6c6f7274
   85f88:	0072656c 	.word	0x0072656c
   85f8c:	6c756f43 	.word	0x6c756f43
   85f90:	6f6e2064 	.word	0x6f6e2064
   85f94:	72632074 	.word	0x72632074
   85f98:	65746165 	.word	0x65746165
   85f9c:	73617420 	.word	0x73617420
   85fa0:	6142206b 	.word	0x6142206b
   85fa4:	63206b63 	.word	0x63206b63
   85fa8:	72746e6f 	.word	0x72746e6f
   85fac:	656c6c6f 	.word	0x656c6c6f
   85fb0:	00000072 	.word	0x00000072
   85fb4:	6d6d6f43 	.word	0x6d6d6f43
   85fb8:	63696e75 	.word	0x63696e75
   85fbc:	6f697461 	.word	0x6f697461
   85fc0:	0000006e 	.word	0x0000006e
   85fc4:	6c756f43 	.word	0x6c756f43
   85fc8:	6f6e2064 	.word	0x6f6e2064
   85fcc:	72632074 	.word	0x72632074
   85fd0:	65746165 	.word	0x65746165
   85fd4:	73617420 	.word	0x73617420
   85fd8:	6f43206b 	.word	0x6f43206b
   85fdc:	6e756d6d 	.word	0x6e756d6d
   85fe0:	74616369 	.word	0x74616369
   85fe4:	006e6f69 	.word	0x006e6f69
   85fe8:	52415453 	.word	0x52415453
   85fec:	45542054 	.word	0x45542054
   85ff0:	000a5453 	.word	0x000a5453
   85ff4:	74736574 	.word	0x74736574
   85ff8:	7365742f 	.word	0x7365742f
   85ffc:	61635f74 	.word	0x61635f74
   86000:	7262696c 	.word	0x7262696c
   86004:	2e657461 	.word	0x2e657461
   86008:	00000063 	.word	0x00000063
   8600c:	74736574 	.word	0x74736574
   86010:	6c61635f 	.word	0x6c61635f
   86014:	61726269 	.word	0x61726269
   86018:	6e6f6974 	.word	0x6e6f6974
   8601c:	00000000 	.word	0x00000000
   86020:	3a4c4156 	.word	0x3a4c4156
   86024:	00642520 	.word	0x00642520
   86028:	74736574 	.word	0x74736574
   8602c:	7365742f 	.word	0x7365742f
   86030:	6f765f74 	.word	0x6f765f74
   86034:	6761746c 	.word	0x6761746c
   86038:	6f635f65 	.word	0x6f635f65
   8603c:	7265766e 	.word	0x7265766e
   86040:	2e726574 	.word	0x2e726574
   86044:	00000063 	.word	0x00000063
   86048:	74736574 	.word	0x74736574
   8604c:	6c6f765f 	.word	0x6c6f765f
   86050:	65676174 	.word	0x65676174
   86054:	6e6f635f 	.word	0x6e6f635f
   86058:	74726576 	.word	0x74726576
   8605c:	00007265 	.word	0x00007265
   86060:	74736574 	.word	0x74736574
   86064:	6c69665f 	.word	0x6c69665f
   86068:	00726574 	.word	0x00726574
   8606c:	252c6425 	.word	0x252c6425
   86070:	64252c64 	.word	0x64252c64
   86074:	2c64252c 	.word	0x2c64252c
   86078:	252c6425 	.word	0x252c6425
   8607c:	64252c64 	.word	0x64252c64
   86080:	0064252c 	.word	0x0064252c
   86084:	09097325 	.word	0x09097325
   86088:	25096325 	.word	0x25096325
   8608c:	75250975 	.word	0x75250975
   86090:	0d752509 	.word	0x0d752509
   86094:	0000000a 	.word	0x0000000a
   86098:	454c4449 	.word	0x454c4449
   8609c:	00000000 	.word	0x00000000
   860a0:	00000a0d 	.word	0x00000a0d
   860a4:	20726d54 	.word	0x20726d54
   860a8:	00637653 	.word	0x00637653
   860ac:	00000001 	.word	0x00000001
   860b0:	00000002 	.word	0x00000002
   860b4:	00000004 	.word	0x00000004
   860b8:	00000008 	.word	0x00000008
   860bc:	00000010 	.word	0x00000010
   860c0:	00000020 	.word	0x00000020
   860c4:	00000040 	.word	0x00000040
   860c8:	00000080 	.word	0x00000080
   860cc:	00000100 	.word	0x00000100
   860d0:	00000200 	.word	0x00000200
   860d4:	00000400 	.word	0x00000400

000860d8 <_global_impure_ptr>:
   860d8:	200704d8 20200043                                ... C.

000860de <blanks.6701>:
   860de:	20202020 20202020 20202020 20202020                     

000860ee <zeroes.6702>:
   860ee:	30303030 30303030 30303030 30303030     0000000000000000
   860fe:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   8610e:	32313000 36353433 61393837 65646362     .0123456789abcde
   8611e:	4f500066 00584953 b5f8002e                       f.POSIX...

00086128 <_init>:
   86128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8612a:	bf00      	nop
   8612c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8612e:	bc08      	pop	{r3}
   86130:	469e      	mov	lr, r3
   86132:	4770      	bx	lr

00086134 <__init_array_start>:
   86134:	0008444d 	.word	0x0008444d

00086138 <__frame_dummy_init_array_entry>:
   86138:	0008016d                                m...

0008613c <_fini>:
   8613c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8613e:	bf00      	nop
   86140:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86142:	bc08      	pop	{r3}
   86144:	469e      	mov	lr, r3
   86146:	4770      	bx	lr

00086148 <__fini_array_start>:
   86148:	00080145 	.word	0x00080145

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <voltage_to_distance_table>:
2007000c:	08a9 0000 0658 0000 057d 0000 0540 0000     ....X...}...@...
2007001c:	0427 0000 03b0 0000 0338 0000 0303 0000     '.......8.......
2007002c:	02cd 0000 0294 0000 025b 0000 0237 0000     ........[...7...
2007003c:	0212 0000 01fd 0000 01e7 0000 01d2 0000     ................
2007004c:	01bd 0000 01b2 0000 01a7 0000 0196 0000     ................
2007005c:	0185 0000 0177 0000 0169 0000 0150 0000     ....w...i...P...
2007006c:	0137 0000 089b 0000 06f1 0000 0547 0000     7...........G...
2007007c:	0478 0000 03a8 0000 031a 0000 028c 0000     x...............
2007008c:	0231 0000 01d5 0000 01a7 0000 0151 0000     1...........Q...
2007009c:	013b 0000 00fc 0000 00dc 0000 00bb 0000     ;...............
200700ac:	00a2 0000 0089 0000 007b 0000 006d 0000     ........{...m...
200700bc:	0062 0000 0056 0000 004d 0000 0044 0000     b...V...M...D...
200700cc:	0040 0000 003b 0000 08d2 0000 0876 0000     @...;.......v...
200700dc:	081b 0000 061a 0000 0418 0000 03b1 0000     ................
200700ec:	0349 0000 031d 0000 02f1 0000 02a9 0000     I...............
200700fc:	0261 0000 024e 0000 023a 0000 0202 0000     a...N...:.......
2007010c:	01ca 0000 01bc 0000 01ad 0000 01a1 0000     ................
2007011c:	0195 0000 0190 0000 018a 0000 017a 0000     ............z...
2007012c:	0169 0000 0167 0000 0164 0000 08d0 0000     i...g...d.......
2007013c:	076b 0000 0606 0000 050f 0000 0418 0000     k...............
2007014c:	03a3 0000 032f 0000 02ec 0000 02a9 0000     ..../...........
2007015c:	027a 0000 024b 0000 0229 0000 0207 0000     z...K...).......
2007016c:	01ec 0000 01d2 0000 01bc 0000 01a7 0000     ................
2007017c:	0198 0000 0189 0000 017c 0000 016f 0000     ........|...o...
2007018c:	0161 0000 0153 0000 013f 0000 012b 0000     a...S...?...+...
2007019c:	09ca 0000 08cf 0000 06bc 0000 055a 0000     ............Z...
200701ac:	048b 0000 03ee 0000 0396 0000 0344 0000     ............D...
200701bc:	0300 0000 02bc 0000 029a 0000 026f 0000     ............o...
200701cc:	0255 0000 023b 0000 0229 0000 0214 0000     U...;...).......
200701dc:	0205 0000 01f4 0000 01df 0000 01d5 0000     ................
200701ec:	01c9 0000 01bb 0000 01b0 0000 01aa 0000     ................
200701fc:	0187 0000 098e 0000 0776 0000 05ad 0000     ........v.......
2007020c:	0458 0000 038a 0000 02cd 0000 0248 0000     X...........H...
2007021c:	01e0 0000 0187 0000 0147 0000 010e 0000     ........G.......
2007022c:	00e0 0000 00bd 0000 00a0 0000 0082 0000     ................
2007023c:	006c 0000 005d 0000 004e 0000 0044 0000     l...]...N...D...
2007024c:	003d 0000 0037 0000 0032 0000 002f 0000     =...7...2.../...
2007025c:	002d 0000 002c 0000 0a32 0000 089c 0000     -...,...2.......
2007026c:	0727 0000 0651 0000 0529 0000 04cb 0000     '...Q...).......
2007027c:	03ee 0000 0377 0000 031a 0000 02da 0000     ....w...........
2007028c:	02a9 0000 0278 0000 026a 0000 024a 0000     ....x...j...J...
2007029c:	0249 0000 0235 0000 0225 0000 021a 0000     I...5...%.......
200702ac:	01fb 0000 01fa 0000 01d5 0000 01ca 0000     ................
200702bc:	01c0 0000 01b0 0000 0199 0000 06e3 0000     ................
200702cc:	058f 0000 048f 0000 03fd 0000 0390 0000     ................
200702dc:	0329 0000 02c6 0000 028e 0000 0255 0000     )...........U...
200702ec:	0224 0000 020c 0000 01f4 0000 01d6 0000     $...............
200702fc:	01b7 0000 01a5 0000 0194 0000 0175 0000     ............u...
2007030c:	016b 0000 0158 0000 0144 0000 0136 0000     k...X...D...6...
2007031c:	011f 0000 00fe 0000 00e9 0000 00e5 0000     ................
2007032c:	07eb 0000 076f 0000 0640 0000 051c 0000     ....o...@.......
2007033c:	0452 0000 03c5 0000 035f 0000 031f 0000     R......._.......
2007034c:	02ea 0000 02c7 0000 0295 0000 026d 0000     ............m...
2007035c:	024e 0000 022d 0000 0220 0000 01ff 0000     N...-... .......
2007036c:	01e6 0000 01df 0000 01c9 0000 01b9 0000     ................
2007037c:	01b1 0000 01a3 0000 0190 0000 0171 0000     ............q...
2007038c:	0168 0000 0822 0000 080a 0000 0644 0000     h...".......D...
2007039c:	04ca 0000 03ce 0000 0325 0000 028d 0000     ........%.......
200703ac:	0217 0000 01c3 0000 016f 0000 0132 0000     ........o...2...
200703bc:	0101 0000 00cc 0000 00a0 0000 0081 0000     ................
200703cc:	0068 0000 005a 0000 004c 0000 0041 0000     h...Z...L...A...
200703dc:	003a 0000 0035 0000 0031 0000 002e 0000     :...5...1.......
200703ec:	002c 0000 002b 0000 08ec 0000 08a4 0000     ,...+...........
200703fc:	06da 0000 05b9 0000 04e0 0000 043b 0000     ............;...
2007040c:	03b5 0000 0350 0000 0304 0000 02c4 0000     ....P...........
2007041c:	0289 0000 025c 0000 023b 0000 0217 0000     ....\...;.......
2007042c:	01fd 0000 01e7 0000 01d3 0000 01bd 0000     ................
2007043c:	01ae 0000 019f 0000 0195 0000 0183 0000     ................
2007044c:	016c 0000 015b 0000 013c 0000 07f3 0000     l...[...<.......
2007045c:	073b 0000 0515 0000 0468 0000 03b0 0000     ;.......h.......
2007046c:	0354 0000 0305 0000 02bb 0000 026e 0000     T...........n...
2007047c:	024d 0000 0223 0000 01f4 0000 01b3 0000     M...#...........
2007048c:	019b 0000 0182 0000 0171 0000 015c 0000     ........q...\...
2007049c:	014a 0000 0135 0000 011c 0000 010b 0000     J...5...........
200704ac:	00fd 0000 00e8 0000 00d0 0000 00c4 0000     ................

200704bc <uxCriticalNesting>:
200704bc:	aaaa aaaa                                   ....

200704c0 <xFreeBytesRemaining>:
200704c0:	8000 0000                                   ....

200704c4 <xNextTaskUnblockTime>:
200704c4:	ffff 0000                                   ....

200704c8 <SystemCoreClock>:
200704c8:	0900 003d 0000 0000                         ..=.....

200704d0 <_impure_ptr>:
200704d0:	04d8 2007 0000 0000                         ... ....

200704d8 <impure_data>:
200704d8:	0000 0000 07c4 2007 082c 2007 0894 2007     ....... ,.. ... 
	...
2007050c:	60dc 0008 0000 0000 0000 0000 0000 0000     .`..............
	...
20070580:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20070590:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20070900 <lc_ctype_charset>:
20070900:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20070920 <__mb_cur_max>:
20070920:	0001 0000                                   ....

20070924 <lc_message_charset>:
20070924:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20070944 <lconv>:
20070944:	6126 0008 6127 0008 6127 0008 6127 0008     &a..'a..'a..'a..
20070954:	6127 0008 6127 0008 6127 0008 6127 0008     'a..'a..'a..'a..
20070964:	6127 0008 6127 0008 ffff ffff ffff ffff     'a..'a..........
20070974:	ffff ffff ffff 0000                         ........

2007097c <__malloc_av_>:
	...
20070984:	097c 2007 097c 2007 0984 2007 0984 2007     |.. |.. ... ... 
20070994:	098c 2007 098c 2007 0994 2007 0994 2007     ... ... ... ... 
200709a4:	099c 2007 099c 2007 09a4 2007 09a4 2007     ... ... ... ... 
200709b4:	09ac 2007 09ac 2007 09b4 2007 09b4 2007     ... ... ... ... 
200709c4:	09bc 2007 09bc 2007 09c4 2007 09c4 2007     ... ... ... ... 
200709d4:	09cc 2007 09cc 2007 09d4 2007 09d4 2007     ... ... ... ... 
200709e4:	09dc 2007 09dc 2007 09e4 2007 09e4 2007     ... ... ... ... 
200709f4:	09ec 2007 09ec 2007 09f4 2007 09f4 2007     ... ... ... ... 
20070a04:	09fc 2007 09fc 2007 0a04 2007 0a04 2007     ... ... ... ... 
20070a14:	0a0c 2007 0a0c 2007 0a14 2007 0a14 2007     ... ... ... ... 
20070a24:	0a1c 2007 0a1c 2007 0a24 2007 0a24 2007     ... ... $.. $.. 
20070a34:	0a2c 2007 0a2c 2007 0a34 2007 0a34 2007     ,.. ,.. 4.. 4.. 
20070a44:	0a3c 2007 0a3c 2007 0a44 2007 0a44 2007     <.. <.. D.. D.. 
20070a54:	0a4c 2007 0a4c 2007 0a54 2007 0a54 2007     L.. L.. T.. T.. 
20070a64:	0a5c 2007 0a5c 2007 0a64 2007 0a64 2007     \.. \.. d.. d.. 
20070a74:	0a6c 2007 0a6c 2007 0a74 2007 0a74 2007     l.. l.. t.. t.. 
20070a84:	0a7c 2007 0a7c 2007 0a84 2007 0a84 2007     |.. |.. ... ... 
20070a94:	0a8c 2007 0a8c 2007 0a94 2007 0a94 2007     ... ... ... ... 
20070aa4:	0a9c 2007 0a9c 2007 0aa4 2007 0aa4 2007     ... ... ... ... 
20070ab4:	0aac 2007 0aac 2007 0ab4 2007 0ab4 2007     ... ... ... ... 
20070ac4:	0abc 2007 0abc 2007 0ac4 2007 0ac4 2007     ... ... ... ... 
20070ad4:	0acc 2007 0acc 2007 0ad4 2007 0ad4 2007     ... ... ... ... 
20070ae4:	0adc 2007 0adc 2007 0ae4 2007 0ae4 2007     ... ... ... ... 
20070af4:	0aec 2007 0aec 2007 0af4 2007 0af4 2007     ... ... ... ... 
20070b04:	0afc 2007 0afc 2007 0b04 2007 0b04 2007     ... ... ... ... 
20070b14:	0b0c 2007 0b0c 2007 0b14 2007 0b14 2007     ... ... ... ... 
20070b24:	0b1c 2007 0b1c 2007 0b24 2007 0b24 2007     ... ... $.. $.. 
20070b34:	0b2c 2007 0b2c 2007 0b34 2007 0b34 2007     ,.. ,.. 4.. 4.. 
20070b44:	0b3c 2007 0b3c 2007 0b44 2007 0b44 2007     <.. <.. D.. D.. 
20070b54:	0b4c 2007 0b4c 2007 0b54 2007 0b54 2007     L.. L.. T.. T.. 
20070b64:	0b5c 2007 0b5c 2007 0b64 2007 0b64 2007     \.. \.. d.. d.. 
20070b74:	0b6c 2007 0b6c 2007 0b74 2007 0b74 2007     l.. l.. t.. t.. 
20070b84:	0b7c 2007 0b7c 2007 0b84 2007 0b84 2007     |.. |.. ... ... 
20070b94:	0b8c 2007 0b8c 2007 0b94 2007 0b94 2007     ... ... ... ... 
20070ba4:	0b9c 2007 0b9c 2007 0ba4 2007 0ba4 2007     ... ... ... ... 
20070bb4:	0bac 2007 0bac 2007 0bb4 2007 0bb4 2007     ... ... ... ... 
20070bc4:	0bbc 2007 0bbc 2007 0bc4 2007 0bc4 2007     ... ... ... ... 
20070bd4:	0bcc 2007 0bcc 2007 0bd4 2007 0bd4 2007     ... ... ... ... 
20070be4:	0bdc 2007 0bdc 2007 0be4 2007 0be4 2007     ... ... ... ... 
20070bf4:	0bec 2007 0bec 2007 0bf4 2007 0bf4 2007     ... ... ... ... 
20070c04:	0bfc 2007 0bfc 2007 0c04 2007 0c04 2007     ... ... ... ... 
20070c14:	0c0c 2007 0c0c 2007 0c14 2007 0c14 2007     ... ... ... ... 
20070c24:	0c1c 2007 0c1c 2007 0c24 2007 0c24 2007     ... ... $.. $.. 
20070c34:	0c2c 2007 0c2c 2007 0c34 2007 0c34 2007     ,.. ,.. 4.. 4.. 
20070c44:	0c3c 2007 0c3c 2007 0c44 2007 0c44 2007     <.. <.. D.. D.. 
20070c54:	0c4c 2007 0c4c 2007 0c54 2007 0c54 2007     L.. L.. T.. T.. 
20070c64:	0c5c 2007 0c5c 2007 0c64 2007 0c64 2007     \.. \.. d.. d.. 
20070c74:	0c6c 2007 0c6c 2007 0c74 2007 0c74 2007     l.. l.. t.. t.. 
20070c84:	0c7c 2007 0c7c 2007 0c84 2007 0c84 2007     |.. |.. ... ... 
20070c94:	0c8c 2007 0c8c 2007 0c94 2007 0c94 2007     ... ... ... ... 
20070ca4:	0c9c 2007 0c9c 2007 0ca4 2007 0ca4 2007     ... ... ... ... 
20070cb4:	0cac 2007 0cac 2007 0cb4 2007 0cb4 2007     ... ... ... ... 
20070cc4:	0cbc 2007 0cbc 2007 0cc4 2007 0cc4 2007     ... ... ... ... 
20070cd4:	0ccc 2007 0ccc 2007 0cd4 2007 0cd4 2007     ... ... ... ... 
20070ce4:	0cdc 2007 0cdc 2007 0ce4 2007 0ce4 2007     ... ... ... ... 
20070cf4:	0cec 2007 0cec 2007 0cf4 2007 0cf4 2007     ... ... ... ... 
20070d04:	0cfc 2007 0cfc 2007 0d04 2007 0d04 2007     ... ... ... ... 
20070d14:	0d0c 2007 0d0c 2007 0d14 2007 0d14 2007     ... ... ... ... 
20070d24:	0d1c 2007 0d1c 2007 0d24 2007 0d24 2007     ... ... $.. $.. 
20070d34:	0d2c 2007 0d2c 2007 0d34 2007 0d34 2007     ,.. ,.. 4.. 4.. 
20070d44:	0d3c 2007 0d3c 2007 0d44 2007 0d44 2007     <.. <.. D.. D.. 
20070d54:	0d4c 2007 0d4c 2007 0d54 2007 0d54 2007     L.. L.. T.. T.. 
20070d64:	0d5c 2007 0d5c 2007 0d64 2007 0d64 2007     \.. \.. d.. d.. 
20070d74:	0d6c 2007 0d6c 2007 0d74 2007 0d74 2007     l.. l.. t.. t.. 

20070d84 <__malloc_sbrk_base>:
20070d84:	ffff ffff                                   ....

20070d88 <__malloc_trim_threshold>:
20070d88:	0000 0002                                   ....

20070d8c <__wctomb>:
20070d8c:	57dd 0008                                   .W..
